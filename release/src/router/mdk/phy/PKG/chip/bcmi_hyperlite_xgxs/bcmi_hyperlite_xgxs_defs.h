#ifndef __BCMI_HYPERLITE_XGXS_DEFS_H__
#define __BCMI_HYPERLITE_XGXS_DEFS_H__
/*******************************************************************************
 *
 * $Copyright: Copyright 2013 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_HYPERLITE_XGXS.
 * This file provides all basic definitions required to program the BCMI_HYPERLITE_XGXS.
 *
 * This file is autogenerated. Please do not edit.
 *
 ******************************************************************************/

#include <phy/phy_xgs_iblk.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 *
 ******************************************************************************/



/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_MIICNTL
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0000
 * DESC:     IEEE MII control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     MANUAL_SPEED1    
 *     COLLISION_TEST_EN 
 *     FULL_DUPLEX      
 *     RESTART_AUTONEG  
 *     RESERVED0        
 *     PWRDWN_SW        
 *     AUTONEG_ENABLE   
 *     MANUAL_SPEED0    
 *     GLOOPBACK        
 *     RST_HW           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr (0x00000000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_MIICNTL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_s {
	uint32_t v[1];
	uint32_t ieee0blk_miicntl[1];
	uint32_t _ieee0blk_miicntl;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_CLR(r) (r).ieee0blk_miicntl[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_SET(r,d) (r).ieee0blk_miicntl[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GET(r) (r).ieee0blk_miicntl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RST_HWf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RST_HWf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GLOOPBACKf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GLOOPBACKf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_GET(r) ((((r).ieee0blk_miicntl[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_PWRDWN_SWf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_PWRDWN_SWf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED0f_GET(r) ((((r).ieee0blk_miicntl[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED0f_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_FULL_DUPLEXf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_FULL_DUPLEXf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_GET(r) ((((r).ieee0blk_miicntl[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_GET(r) ((((r).ieee0blk_miicntl[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED1f_GET(r) (((r).ieee0blk_miicntl[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED1f_SET(r,f) (r).ieee0blk_miicntl[0]=(((r).ieee0blk_miicntl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access IEEE0BLK_MIICNTL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIICNTLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr,(_r._ieee0blk_miicntl))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIICNTLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr,(_r._ieee0blk_miicntl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_MIICNTLr BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr
#define IEEE0BLK_MIICNTLr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_t IEEE0BLK_MIICNTLr_t;
#define IEEE0BLK_MIICNTLr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_CLR
#define IEEE0BLK_MIICNTLr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_SET
#define IEEE0BLK_MIICNTLr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GET
#define IEEE0BLK_MIICNTLr_RST_HWf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RST_HWf_GET
#define IEEE0BLK_MIICNTLr_RST_HWf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RST_HWf_SET
#define IEEE0BLK_MIICNTLr_GLOOPBACKf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GLOOPBACKf_GET
#define IEEE0BLK_MIICNTLr_GLOOPBACKf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_GLOOPBACKf_SET
#define IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_GET
#define IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED0f_SET
#define IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_GET
#define IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_AUTONEG_ENABLEf_SET
#define IEEE0BLK_MIICNTLr_PWRDWN_SWf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_PWRDWN_SWf_GET
#define IEEE0BLK_MIICNTLr_PWRDWN_SWf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_PWRDWN_SWf_SET
#define IEEE0BLK_MIICNTLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED0f_GET
#define IEEE0BLK_MIICNTLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED0f_SET
#define IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_GET
#define IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESTART_AUTONEGf_SET
#define IEEE0BLK_MIICNTLr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_FULL_DUPLEXf_GET
#define IEEE0BLK_MIICNTLr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_FULL_DUPLEXf_SET
#define IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_GET
#define IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_COLLISION_TEST_ENf_SET
#define IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_GET
#define IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_MANUAL_SPEED1f_SET
#define IEEE0BLK_MIICNTLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED1f_GET
#define IEEE0BLK_MIICNTLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr_RESERVED1f_SET
#define READ_IEEE0BLK_MIICNTLr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIICNTLr
#define WRITE_IEEE0BLK_MIICNTLr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIICNTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_MIICNTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_MIISTAT
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0001
 * DESC:     IEEE MII status register
 * SIZE:     32
 * FIELDS:
 *     EXTENDED_CAPABILITY 
 *     JABBER_DETECT    
 *     LINK_STATUS      
 *     AUTONEG_ABILITY  
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     MF_PREAMBLE_SUPRESSION 
 *     RESERVED0        
 *     EXTENDED_STATUS  
 *     S100BASE_T2_HALF_DUPLEX_CAPABLE 
 *     S100BASE_T2_FULL_DUPLEX_CAPABLE 
 *     S10BASE_T_HALF_DUPLEX_CAPABLE 
 *     S10BASE_T_FULL_DUPLEX_CAPABLE 
 *     S100BASE_X_HALF_DUPLEX_CAPABLE 
 *     S100BASE_X_FULL_DUPLEX_CAPABLE 
 *     S100BASE_T4_CAPABLE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr (0x00000001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_MIISTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_s {
	uint32_t v[1];
	uint32_t ieee0blk_miistat[1];
	uint32_t _ieee0blk_miistat;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_CLR(r) (r).ieee0blk_miistat[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_SET(r,d) (r).ieee0blk_miistat[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_GET(r) (r).ieee0blk_miistat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_STATUSf_GET(r) ((((r).ieee0blk_miistat[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_STATUSf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_RESERVED0f_GET(r) ((((r).ieee0blk_miistat[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_RESERVED0f_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET(r) ((((r).ieee0blk_miistat[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_GET(r) ((((r).ieee0blk_miistat[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_REMOTE_FAULTf_GET(r) ((((r).ieee0blk_miistat[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_REMOTE_FAULTf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_GET(r) ((((r).ieee0blk_miistat[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_LINK_STATUSf_GET(r) ((((r).ieee0blk_miistat[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_LINK_STATUSf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_JABBER_DETECTf_GET(r) ((((r).ieee0blk_miistat[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_JABBER_DETECTf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_GET(r) (((r).ieee0blk_miistat[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_SET(r,f) (r).ieee0blk_miistat[0]=(((r).ieee0blk_miistat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access IEEE0BLK_MIISTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIISTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr,(_r._ieee0blk_miistat))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIISTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr,(_r._ieee0blk_miistat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_MIISTATr BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr
#define IEEE0BLK_MIISTATr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_t IEEE0BLK_MIISTATr_t;
#define IEEE0BLK_MIISTATr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_CLR
#define IEEE0BLK_MIISTATr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_SET
#define IEEE0BLK_MIISTATr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_GET
#define IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T4_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIISTATr_EXTENDED_STATUSf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_STATUSf_GET
#define IEEE0BLK_MIISTATr_EXTENDED_STATUSf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_STATUSf_SET
#define IEEE0BLK_MIISTATr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_RESERVED0f_GET
#define IEEE0BLK_MIISTATr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_RESERVED0f_SET
#define IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET
#define IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET
#define IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_GET
#define IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_COMPLETEf_SET
#define IEEE0BLK_MIISTATr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_REMOTE_FAULTf_GET
#define IEEE0BLK_MIISTATr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_REMOTE_FAULTf_SET
#define IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_GET
#define IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_AUTONEG_ABILITYf_SET
#define IEEE0BLK_MIISTATr_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_LINK_STATUSf_GET
#define IEEE0BLK_MIISTATr_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_LINK_STATUSf_SET
#define IEEE0BLK_MIISTATr_JABBER_DETECTf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_JABBER_DETECTf_GET
#define IEEE0BLK_MIISTATr_JABBER_DETECTf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_JABBER_DETECTf_SET
#define IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_GET
#define IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr_EXTENDED_CAPABILITYf_SET
#define READ_IEEE0BLK_MIISTATr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIISTATr
#define WRITE_IEEE0BLK_MIISTATr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIISTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_MIISTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_ID1
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0002
 * DESC:     IEEE phy ID LSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r (0x00000002 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_ID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_s {
	uint32_t v[1];
	uint32_t ieee0blk_id1[1];
	uint32_t _ieee0blk_id1;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_CLR(r) (r).ieee0blk_id1[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_SET(r,d) (r).ieee0blk_id1[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_GET(r) (r).ieee0blk_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_REGIDf_GET(r) (((r).ieee0blk_id1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_REGIDf_SET(r,f) (r).ieee0blk_id1[0]=(((r).ieee0blk_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access IEEE0BLK_ID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_ID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r,(_r._ieee0blk_id1))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_ID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r,(_r._ieee0blk_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_ID1r BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r
#define IEEE0BLK_ID1r_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_t IEEE0BLK_ID1r_t;
#define IEEE0BLK_ID1r_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_CLR
#define IEEE0BLK_ID1r_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_SET
#define IEEE0BLK_ID1r_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_GET
#define IEEE0BLK_ID1r_REGIDf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_REGIDf_GET
#define IEEE0BLK_ID1r_REGIDf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r_REGIDf_SET
#define READ_IEEE0BLK_ID1r BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_ID1r
#define WRITE_IEEE0BLK_ID1r BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_ID2
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0003
 * DESC:     IEEE phy ID MSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r (0x00000003 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_ID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_s {
	uint32_t v[1];
	uint32_t ieee0blk_id2[1];
	uint32_t _ieee0blk_id2;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_CLR(r) (r).ieee0blk_id2[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_SET(r,d) (r).ieee0blk_id2[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_GET(r) (r).ieee0blk_id2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_REGIDf_GET(r) (((r).ieee0blk_id2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_REGIDf_SET(r,f) (r).ieee0blk_id2[0]=(((r).ieee0blk_id2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access IEEE0BLK_ID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_ID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r,(_r._ieee0blk_id2))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_ID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r,(_r._ieee0blk_id2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_ID2r BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r
#define IEEE0BLK_ID2r_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_t IEEE0BLK_ID2r_t;
#define IEEE0BLK_ID2r_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_CLR
#define IEEE0BLK_ID2r_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_SET
#define IEEE0BLK_ID2r_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_GET
#define IEEE0BLK_ID2r_REGIDf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_REGIDf_GET
#define IEEE0BLK_ID2r_REGIDf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r_REGIDf_SET
#define READ_IEEE0BLK_ID2r BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_ID2r
#define WRITE_IEEE0BLK_ID2r BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_ID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_ID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_AUTONEGADV
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0004
 * DESC:     IEEE auto-negotiation advertised abilities register
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     RESERVED1        
 *     REMOTE_FAULT     
 *     RESERVED0        
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr (0x00000004 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_AUTONEGADV.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t ieee0blk_autonegadv[1];
	uint32_t _ieee0blk_autonegadv;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_CLR(r) (r).ieee0blk_autonegadv[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_SET(r,d) (r).ieee0blk_autonegadv[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_GET(r) (r).ieee0blk_autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED0f_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED0f_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED1f_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED1f_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_PAUSEf_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_PAUSEf_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_GET(r) ((((r).ieee0blk_autonegadv[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED2f_GET(r) (((r).ieee0blk_autonegadv[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED2f_SET(r,f) (r).ieee0blk_autonegadv[0]=(((r).ieee0blk_autonegadv[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access IEEE0BLK_AUTONEGADV.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGADVr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr,(_r._ieee0blk_autonegadv))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGADVr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr,(_r._ieee0blk_autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_AUTONEGADVr BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr
#define IEEE0BLK_AUTONEGADVr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_t IEEE0BLK_AUTONEGADVr_t;
#define IEEE0BLK_AUTONEGADVr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_CLR
#define IEEE0BLK_AUTONEGADVr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_SET
#define IEEE0BLK_AUTONEGADVr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_GET
#define IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_GET
#define IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_NEXT_PAGEf_SET
#define IEEE0BLK_AUTONEGADVr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED0f_GET
#define IEEE0BLK_AUTONEGADVr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED0f_SET
#define IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_GET
#define IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_REMOTE_FAULTf_SET
#define IEEE0BLK_AUTONEGADVr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED1f_GET
#define IEEE0BLK_AUTONEGADVr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED1f_SET
#define IEEE0BLK_AUTONEGADVr_PAUSEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_PAUSEf_GET
#define IEEE0BLK_AUTONEGADVr_PAUSEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_PAUSEf_SET
#define IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_GET
#define IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_HALF_DUPLEXf_SET
#define IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_GET
#define IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_FULL_DUPLEXf_SET
#define IEEE0BLK_AUTONEGADVr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED2f_GET
#define IEEE0BLK_AUTONEGADVr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr_RESERVED2f_SET
#define READ_IEEE0BLK_AUTONEGADVr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGADVr
#define WRITE_IEEE0BLK_AUTONEGADVr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_AUTONEGLPABIL
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0005
 * DESC:     IEEE auto-negotiation link partner abilities register
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     RESERVED1        
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     RESERVED0        
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr (0x00000005 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_AUTONEGLPABIL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_s {
	uint32_t v[1];
	uint32_t ieee0blk_autoneglpabil[1];
	uint32_t _ieee0blk_autoneglpabil;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_CLR(r) (r).ieee0blk_autoneglpabil[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SET(r,d) (r).ieee0blk_autoneglpabil[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_GET(r) (r).ieee0blk_autoneglpabil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED0f_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED0f_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_PAUSEf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_PAUSEf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED1f_GET(r) ((((r).ieee0blk_autoneglpabil[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED1f_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_GET(r) (((r).ieee0blk_autoneglpabil[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_SET(r,f) (r).ieee0blk_autoneglpabil[0]=(((r).ieee0blk_autoneglpabil[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access IEEE0BLK_AUTONEGLPABIL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGLPABILr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr,(_r._ieee0blk_autoneglpabil))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGLPABILr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr,(_r._ieee0blk_autoneglpabil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_AUTONEGLPABILr BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr
#define IEEE0BLK_AUTONEGLPABILr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_t IEEE0BLK_AUTONEGLPABILr_t;
#define IEEE0BLK_AUTONEGLPABILr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_CLR
#define IEEE0BLK_AUTONEGLPABILr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SET
#define IEEE0BLK_AUTONEGLPABILr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_GET
#define IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_GET
#define IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_NEXT_PAGEf_SET
#define IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_GET
#define IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_ACKNOWLEDGEf_SET
#define IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_GET
#define IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_REMOTE_FAULTf_SET
#define IEEE0BLK_AUTONEGLPABILr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED0f_GET
#define IEEE0BLK_AUTONEGLPABILr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED0f_SET
#define IEEE0BLK_AUTONEGLPABILr_PAUSEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_PAUSEf_GET
#define IEEE0BLK_AUTONEGLPABILr_PAUSEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_PAUSEf_SET
#define IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_GET
#define IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_HALF_DUPLEXf_SET
#define IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_GET
#define IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_FULL_DUPLEXf_SET
#define IEEE0BLK_AUTONEGLPABILr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED1f_GET
#define IEEE0BLK_AUTONEGLPABILr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_RESERVED1f_SET
#define IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_GET
#define IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr_SGMII_MODEf_SET
#define READ_IEEE0BLK_AUTONEGLPABILr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGLPABILr
#define WRITE_IEEE0BLK_AUTONEGLPABILr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGLPABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_AUTONEGEXP
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0006
 * DESC:     IEEE auto-negotiation expansion register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     PAGE_RECEIVED    
 *     NEXT_PAGE_ABILITY 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr (0x00000006 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_AUTONEGEXP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_s {
	uint32_t v[1];
	uint32_t ieee0blk_autonegexp[1];
	uint32_t _ieee0blk_autonegexp;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_CLR(r) (r).ieee0blk_autonegexp[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_SET(r,d) (r).ieee0blk_autonegexp[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_GET(r) (r).ieee0blk_autonegexp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED0f_GET(r) ((((r).ieee0blk_autonegexp[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED0f_SET(r,f) (r).ieee0blk_autonegexp[0]=(((r).ieee0blk_autonegexp[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET(r) ((((r).ieee0blk_autonegexp[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET(r,f) (r).ieee0blk_autonegexp[0]=(((r).ieee0blk_autonegexp[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_GET(r) ((((r).ieee0blk_autonegexp[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_SET(r,f) (r).ieee0blk_autonegexp[0]=(((r).ieee0blk_autonegexp[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED1f_GET(r) (((r).ieee0blk_autonegexp[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED1f_SET(r,f) (r).ieee0blk_autonegexp[0]=(((r).ieee0blk_autonegexp[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access IEEE0BLK_AUTONEGEXP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGEXPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr,(_r._ieee0blk_autonegexp))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGEXPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr,(_r._ieee0blk_autonegexp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_AUTONEGEXPr BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr
#define IEEE0BLK_AUTONEGEXPr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_t IEEE0BLK_AUTONEGEXPr_t;
#define IEEE0BLK_AUTONEGEXPr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_CLR
#define IEEE0BLK_AUTONEGEXPr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_SET
#define IEEE0BLK_AUTONEGEXPr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_GET
#define IEEE0BLK_AUTONEGEXPr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED0f_GET
#define IEEE0BLK_AUTONEGEXPr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED0f_SET
#define IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET
#define IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET
#define IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_GET
#define IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_PAGE_RECEIVEDf_SET
#define IEEE0BLK_AUTONEGEXPr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED1f_GET
#define IEEE0BLK_AUTONEGEXPr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr_RESERVED1f_SET
#define READ_IEEE0BLK_AUTONEGEXPr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGEXPr
#define WRITE_IEEE0BLK_AUTONEGEXPr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGEXPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGEXPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_AUTONEGNP
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0007
 * DESC:     IEEE auto-negotiation next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr (0x00000007 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_AUTONEGNP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_s {
	uint32_t v[1];
	uint32_t ieee0blk_autonegnp[1];
	uint32_t _ieee0blk_autonegnp;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_CLR(r) (r).ieee0blk_autonegnp[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_SET(r,d) (r).ieee0blk_autonegnp[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_GET(r) (r).ieee0blk_autonegnp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_GET(r) ((((r).ieee0blk_autonegnp[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACKf_GET(r) ((((r).ieee0blk_autonegnp[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACKf_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_GET(r) ((((r).ieee0blk_autonegnp[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACK2f_GET(r) ((((r).ieee0blk_autonegnp[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACK2f_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_TOGGLEf_GET(r) ((((r).ieee0blk_autonegnp[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_TOGGLEf_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGEf_GET(r) (((r).ieee0blk_autonegnp[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGEf_SET(r,f) (r).ieee0blk_autonegnp[0]=(((r).ieee0blk_autonegnp[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access IEEE0BLK_AUTONEGNP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGNPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr,(_r._ieee0blk_autonegnp))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGNPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr,(_r._ieee0blk_autonegnp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_AUTONEGNPr BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr
#define IEEE0BLK_AUTONEGNPr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_t IEEE0BLK_AUTONEGNPr_t;
#define IEEE0BLK_AUTONEGNPr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_CLR
#define IEEE0BLK_AUTONEGNPr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_SET
#define IEEE0BLK_AUTONEGNPr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_GET
#define IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_GET
#define IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_NEXT_PAGEf_SET
#define IEEE0BLK_AUTONEGNPr_ACKf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACKf_GET
#define IEEE0BLK_AUTONEGNPr_ACKf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACKf_SET
#define IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_GET
#define IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGE_PAGEf_SET
#define IEEE0BLK_AUTONEGNPr_ACK2f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACK2f_GET
#define IEEE0BLK_AUTONEGNPr_ACK2f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_ACK2f_SET
#define IEEE0BLK_AUTONEGNPr_TOGGLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_TOGGLEf_GET
#define IEEE0BLK_AUTONEGNPr_TOGGLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_TOGGLEf_SET
#define IEEE0BLK_AUTONEGNPr_MESSAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGEf_GET
#define IEEE0BLK_AUTONEGNPr_MESSAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr_MESSAGEf_SET
#define READ_IEEE0BLK_AUTONEGNPr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGNPr
#define WRITE_IEEE0BLK_AUTONEGNPr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGNPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGNPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_AUTONEGLPABIL2
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x0008
 * DESC:     IEEE auto-negotiation link partner next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r (0x00000008 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_AUTONEGLPABIL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_s {
	uint32_t v[1];
	uint32_t ieee0blk_autoneglpabil2[1];
	uint32_t _ieee0blk_autoneglpabil2;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_CLR(r) (r).ieee0blk_autoneglpabil2[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_SET(r,d) (r).ieee0blk_autoneglpabil2[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_GET(r) (r).ieee0blk_autoneglpabil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_GET(r) ((((r).ieee0blk_autoneglpabil2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACKf_GET(r) ((((r).ieee0blk_autoneglpabil2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACKf_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET(r) ((((r).ieee0blk_autoneglpabil2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACK2f_GET(r) ((((r).ieee0blk_autoneglpabil2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACK2f_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_GET(r) ((((r).ieee0blk_autoneglpabil2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_GET(r) (((r).ieee0blk_autoneglpabil2[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_SET(r,f) (r).ieee0blk_autoneglpabil2[0]=(((r).ieee0blk_autoneglpabil2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access IEEE0BLK_AUTONEGLPABIL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGLPABIL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r,(_r._ieee0blk_autoneglpabil2))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGLPABIL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r,(_r._ieee0blk_autoneglpabil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r
#define IEEE0BLK_AUTONEGLPABIL2r_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_t IEEE0BLK_AUTONEGLPABIL2r_t;
#define IEEE0BLK_AUTONEGLPABIL2r_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_CLR
#define IEEE0BLK_AUTONEGLPABIL2r_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_SET
#define IEEE0BLK_AUTONEGLPABIL2r_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_GET
#define IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_GET
#define IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_NEXT_PAGEf_SET
#define IEEE0BLK_AUTONEGLPABIL2r_ACKf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACKf_GET
#define IEEE0BLK_AUTONEGLPABIL2r_ACKf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACKf_SET
#define IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET
#define IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET
#define IEEE0BLK_AUTONEGLPABIL2r_ACK2f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACK2f_GET
#define IEEE0BLK_AUTONEGLPABIL2r_ACK2f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_ACK2f_SET
#define IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_GET
#define IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_TOGGLEf_SET
#define IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_GET
#define IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r_MESSAGEf_SET
#define READ_IEEE0BLK_AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_AUTONEGLPABIL2r
#define WRITE_IEEE0BLK_AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_AUTONEGLPABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_AUTONEGLPABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  IEEE0BLK_MIIEXTSTAT
 * BLOCKS:   IEEE0BLK
 * REGADDR:  0x000f
 * DESC:     IEEE MII extended status register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     S1000BASE_T_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_T_FULL_DUPLEX_CAPABLE 
 *     S1000BASE_X_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_X_FULL_DUPLEX_CAPABLE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr (0x0000000f | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_SIZE 4

/*
 * This structure should be used to declare and program IEEE0BLK_MIIEXTSTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_s {
	uint32_t v[1];
	uint32_t ieee0blk_miiextstat[1];
	uint32_t _ieee0blk_miiextstat;
} BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_t;

#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_CLR(r) (r).ieee0blk_miiextstat[0] = 0
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_SET(r,d) (r).ieee0blk_miiextstat[0] = d
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_GET(r) (r).ieee0blk_miiextstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miiextstat[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miiextstat[0]=(((r).ieee0blk_miiextstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miiextstat[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miiextstat[0]=(((r).ieee0blk_miiextstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miiextstat[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miiextstat[0]=(((r).ieee0blk_miiextstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).ieee0blk_miiextstat[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).ieee0blk_miiextstat[0]=(((r).ieee0blk_miiextstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_RESERVED0f_GET(r) (((r).ieee0blk_miiextstat[0]) & 0xfff)
#define BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_RESERVED0f_SET(r,f) (r).ieee0blk_miiextstat[0]=(((r).ieee0blk_miiextstat[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access IEEE0BLK_MIIEXTSTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIIEXTSTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr,(_r._ieee0blk_miiextstat))
#define BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIIEXTSTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr,(_r._ieee0blk_miiextstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEE0BLK_MIIEXTSTATr BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr
#define IEEE0BLK_MIIEXTSTATr_SIZE BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_t IEEE0BLK_MIIEXTSTATr_t;
#define IEEE0BLK_MIIEXTSTATr_CLR BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_CLR
#define IEEE0BLK_MIIEXTSTATr_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_SET
#define IEEE0BLK_MIIEXTSTATr_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_GET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define IEEE0BLK_MIIEXTSTATr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_RESERVED0f_GET
#define IEEE0BLK_MIIEXTSTATr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr_RESERVED0f_SET
#define READ_IEEE0BLK_MIIEXTSTATr BCMI_HYPERLITE_XGXS_READ_IEEE0BLK_MIIEXTSTATr
#define WRITE_IEEE0BLK_MIIEXTSTATr BCMI_HYPERLITE_XGXS_WRITE_IEEE0BLK_MIIEXTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_IEEE0BLK_MIIEXTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGXSCONTROL
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8000
 * DESC:     XGXS control register
 * SIZE:     32
 * FIELDS:
 *     TXCKO_DIV        
 *     AFRST_EN         
 *     EDEN             
 *     CDET_EN          
 *     MDIO_CONT_EN     
 *     RESERVED0        
 *     RLOOP            
 *     PLL_BYPASS       
 *     MODE_10G         
 *     RESET_ANLG       
 *     START_SEQUENCER  
 *     PCMP_EN          
 *     PGEN_EN          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr (0x00000010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGXSCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGXSCONTROLr_s {
	uint32_t v[1];
	uint32_t xgxscontrol[1];
	uint32_t _xgxscontrol;
} BCMI_HYPERLITE_XGXS_XGXSCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CLR(r) (r).xgxscontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_SET(r,d) (r).xgxscontrol[0] = d
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_GET(r) (r).xgxscontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PGEN_ENf_GET(r) ((((r).xgxscontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PGEN_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PCMP_ENf_GET(r) ((((r).xgxscontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PCMP_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_START_SEQUENCERf_GET(r) ((((r).xgxscontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_START_SEQUENCERf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESET_ANLGf_GET(r) ((((r).xgxscontrol[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESET_ANLGf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MODE_10Gf_GET(r) ((((r).xgxscontrol[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MODE_10Gf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PLL_BYPASSf_GET(r) ((((r).xgxscontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PLL_BYPASSf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RLOOPf_GET(r) ((((r).xgxscontrol[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RLOOPf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESERVED0f_GET(r) ((((r).xgxscontrol[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESERVED0f_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MDIO_CONT_ENf_GET(r) ((((r).xgxscontrol[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MDIO_CONT_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CDET_ENf_GET(r) ((((r).xgxscontrol[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CDET_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_EDENf_GET(r) ((((r).xgxscontrol[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_EDENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_AFRST_ENf_GET(r) ((((r).xgxscontrol[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_AFRST_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_TXCKO_DIVf_GET(r) (((r).xgxscontrol[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSCONTROLr_TXCKO_DIVf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGXSCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGXSCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGXSCONTROLr,(_r._xgxscontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_XGXSCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGXSCONTROLr,(_r._xgxscontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGXSCONTROLr BCMI_HYPERLITE_XGXS_XGXSCONTROLr
#define XGXSCONTROLr_SIZE BCMI_HYPERLITE_XGXS_XGXSCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGXSCONTROLr_t XGXSCONTROLr_t;
#define XGXSCONTROLr_CLR BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CLR
#define XGXSCONTROLr_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_SET
#define XGXSCONTROLr_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_GET
#define XGXSCONTROLr_PGEN_ENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PGEN_ENf_GET
#define XGXSCONTROLr_PGEN_ENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PGEN_ENf_SET
#define XGXSCONTROLr_PCMP_ENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PCMP_ENf_GET
#define XGXSCONTROLr_PCMP_ENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PCMP_ENf_SET
#define XGXSCONTROLr_START_SEQUENCERf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_START_SEQUENCERf_GET
#define XGXSCONTROLr_START_SEQUENCERf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_START_SEQUENCERf_SET
#define XGXSCONTROLr_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESET_ANLGf_GET
#define XGXSCONTROLr_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESET_ANLGf_SET
#define XGXSCONTROLr_MODE_10Gf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MODE_10Gf_GET
#define XGXSCONTROLr_MODE_10Gf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MODE_10Gf_SET
#define XGXSCONTROLr_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PLL_BYPASSf_GET
#define XGXSCONTROLr_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_PLL_BYPASSf_SET
#define XGXSCONTROLr_RLOOPf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RLOOPf_GET
#define XGXSCONTROLr_RLOOPf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RLOOPf_SET
#define XGXSCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESERVED0f_GET
#define XGXSCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_RESERVED0f_SET
#define XGXSCONTROLr_MDIO_CONT_ENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MDIO_CONT_ENf_GET
#define XGXSCONTROLr_MDIO_CONT_ENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_MDIO_CONT_ENf_SET
#define XGXSCONTROLr_CDET_ENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CDET_ENf_GET
#define XGXSCONTROLr_CDET_ENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_CDET_ENf_SET
#define XGXSCONTROLr_EDENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_EDENf_GET
#define XGXSCONTROLr_EDENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_EDENf_SET
#define XGXSCONTROLr_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_AFRST_ENf_GET
#define XGXSCONTROLr_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_AFRST_ENf_SET
#define XGXSCONTROLr_TXCKO_DIVf_GET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_TXCKO_DIVf_GET
#define XGXSCONTROLr_TXCKO_DIVf_SET BCMI_HYPERLITE_XGXS_XGXSCONTROLr_TXCKO_DIVf_SET
#define READ_XGXSCONTROLr BCMI_HYPERLITE_XGXS_READ_XGXSCONTROLr
#define WRITE_XGXSCONTROLr BCMI_HYPERLITE_XGXS_WRITE_XGXSCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGXSCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGXSSTATUS
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8001
 * DESC:     XGXS status register
 * SIZE:     32
 * FIELDS:
 *     SKEW_STATUS      
 *     CKCMP_OVFLOW     
 *     CKCMP_UNFLOW     
 *     PLL_MODE_AFE     
 *     RXFERR           
 *     SEQUENCER_PASS   
 *     SEQUENCER_DONE   
 *     TXD_FIFO_ERR     
 *     TXPLL_LOCK       
 *     RX_REMOTE_FAULT  
 *     TX_REMOTE_FAULT  
 *     RESERVED0        
 *     STATUS_EN        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr (0x00000011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program XGXSSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGXSSTATUSr_s {
	uint32_t v[1];
	uint32_t xgxsstatus[1];
	uint32_t _xgxsstatus;
} BCMI_HYPERLITE_XGXS_XGXSSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CLR(r) (r).xgxsstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SET(r,d) (r).xgxsstatus[0] = d
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_GET(r) (r).xgxsstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_STATUS_ENf_GET(r) ((((r).xgxsstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_STATUS_ENf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RESERVED0f_GET(r) ((((r).xgxsstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RESERVED0f_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TX_REMOTE_FAULTf_GET(r) ((((r).xgxsstatus[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TX_REMOTE_FAULTf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RX_REMOTE_FAULTf_GET(r) ((((r).xgxsstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RX_REMOTE_FAULTf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXPLL_LOCKf_GET(r) ((((r).xgxsstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXPLL_LOCKf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXD_FIFO_ERRf_GET(r) ((((r).xgxsstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXD_FIFO_ERRf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_DONEf_GET(r) ((((r).xgxsstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_DONEf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_PASSf_GET(r) ((((r).xgxsstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_PASSf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RXFERRf_GET(r) ((((r).xgxsstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RXFERRf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_PLL_MODE_AFEf_GET(r) ((((r).xgxsstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_PLL_MODE_AFEf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_UNFLOWf_GET(r) ((((r).xgxsstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_UNFLOWf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_OVFLOWf_GET(r) ((((r).xgxsstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_OVFLOWf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SKEW_STATUSf_GET(r) (((r).xgxsstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SKEW_STATUSf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGXSSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGXSSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGXSSTATUSr,(_r._xgxsstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_XGXSSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGXSSTATUSr,(_r._xgxsstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGXSSTATUSr BCMI_HYPERLITE_XGXS_XGXSSTATUSr
#define XGXSSTATUSr_SIZE BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGXSSTATUSr_t XGXSSTATUSr_t;
#define XGXSSTATUSr_CLR BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CLR
#define XGXSSTATUSr_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SET
#define XGXSSTATUSr_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_GET
#define XGXSSTATUSr_STATUS_ENf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_STATUS_ENf_GET
#define XGXSSTATUSr_STATUS_ENf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_STATUS_ENf_SET
#define XGXSSTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RESERVED0f_GET
#define XGXSSTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RESERVED0f_SET
#define XGXSSTATUSr_TX_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TX_REMOTE_FAULTf_GET
#define XGXSSTATUSr_TX_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TX_REMOTE_FAULTf_SET
#define XGXSSTATUSr_RX_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RX_REMOTE_FAULTf_GET
#define XGXSSTATUSr_RX_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RX_REMOTE_FAULTf_SET
#define XGXSSTATUSr_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXPLL_LOCKf_GET
#define XGXSSTATUSr_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXPLL_LOCKf_SET
#define XGXSSTATUSr_TXD_FIFO_ERRf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXD_FIFO_ERRf_GET
#define XGXSSTATUSr_TXD_FIFO_ERRf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_TXD_FIFO_ERRf_SET
#define XGXSSTATUSr_SEQUENCER_DONEf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_DONEf_GET
#define XGXSSTATUSr_SEQUENCER_DONEf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_DONEf_SET
#define XGXSSTATUSr_SEQUENCER_PASSf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_PASSf_GET
#define XGXSSTATUSr_SEQUENCER_PASSf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SEQUENCER_PASSf_SET
#define XGXSSTATUSr_RXFERRf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RXFERRf_GET
#define XGXSSTATUSr_RXFERRf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_RXFERRf_SET
#define XGXSSTATUSr_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_PLL_MODE_AFEf_GET
#define XGXSSTATUSr_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_PLL_MODE_AFEf_SET
#define XGXSSTATUSr_CKCMP_UNFLOWf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_UNFLOWf_GET
#define XGXSSTATUSr_CKCMP_UNFLOWf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_UNFLOWf_SET
#define XGXSSTATUSr_CKCMP_OVFLOWf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_OVFLOWf_GET
#define XGXSSTATUSr_CKCMP_OVFLOWf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_CKCMP_OVFLOWf_SET
#define XGXSSTATUSr_SKEW_STATUSf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SKEW_STATUSf_GET
#define XGXSSTATUSr_SKEW_STATUSf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUSr_SKEW_STATUSf_SET
#define READ_XGXSSTATUSr BCMI_HYPERLITE_XGXS_READ_XGXSSTATUSr
#define WRITE_XGXSSTATUSr BCMI_HYPERLITE_XGXS_WRITE_XGXSSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGXSSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIIIDLE
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8002
 * DESC:     XGMII idle control character register
 * SIZE:     32
 * FIELDS:
 *     IB               
 *     I                
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr (0x00000012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIIDLE.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIIIDLEr_s {
	uint32_t v[1];
	uint32_t xgmiiidle[1];
	uint32_t _xgmiiidle;
} BCMI_HYPERLITE_XGXS_XGMIIIDLEr_t;

#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_CLR(r) (r).xgmiiidle[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_SET(r,d) (r).xgmiiidle[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_GET(r) (r).xgmiiidle[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_If_GET(r) ((((r).xgmiiidle[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_If_SET(r,f) (r).xgmiiidle[0]=(((r).xgmiiidle[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_IBf_GET(r) (((r).xgmiiidle[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIIIDLEr_IBf_SET(r,f) (r).xgmiiidle[0]=(((r).xgmiiidle[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIIIDLE.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIIIDLEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIIIDLEr,(_r._xgmiiidle))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIIIDLEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIIIDLEr,(_r._xgmiiidle))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIIDLEr BCMI_HYPERLITE_XGXS_XGMIIIDLEr
#define XGMIIIDLEr_SIZE BCMI_HYPERLITE_XGXS_XGMIIIDLEr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIIIDLEr_t XGMIIIDLEr_t;
#define XGMIIIDLEr_CLR BCMI_HYPERLITE_XGXS_XGMIIIDLEr_CLR
#define XGMIIIDLEr_SET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_SET
#define XGMIIIDLEr_GET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_GET
#define XGMIIIDLEr_If_GET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_If_GET
#define XGMIIIDLEr_If_SET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_If_SET
#define XGMIIIDLEr_IBf_GET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_IBf_GET
#define XGMIIIDLEr_IBf_SET BCMI_HYPERLITE_XGXS_XGMIIIDLEr_IBf_SET
#define READ_XGMIIIDLEr BCMI_HYPERLITE_XGXS_READ_XGMIIIDLEr
#define WRITE_XGMIIIDLEr BCMI_HYPERLITE_XGXS_WRITE_XGMIIIDLEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIIIDLEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIISYNC
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8003
 * DESC:     XGMII sync control character register
 * SIZE:     32
 * FIELDS:
 *     KB               
 *     K                
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr (0x00000013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISYNC.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIISYNCr_s {
	uint32_t v[1];
	uint32_t xgmiisync[1];
	uint32_t _xgmiisync;
} BCMI_HYPERLITE_XGXS_XGMIISYNCr_t;

#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_CLR(r) (r).xgmiisync[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_SET(r,d) (r).xgmiisync[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_GET(r) (r).xgmiisync[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_Kf_GET(r) ((((r).xgmiisync[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_Kf_SET(r,f) (r).xgmiisync[0]=(((r).xgmiisync[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_KBf_GET(r) (((r).xgmiisync[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISYNCr_KBf_SET(r,f) (r).xgmiisync[0]=(((r).xgmiisync[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISYNC.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIISYNCr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIISYNCr,(_r._xgmiisync))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIISYNCr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIISYNCr,(_r._xgmiisync))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISYNCr BCMI_HYPERLITE_XGXS_XGMIISYNCr
#define XGMIISYNCr_SIZE BCMI_HYPERLITE_XGXS_XGMIISYNCr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIISYNCr_t XGMIISYNCr_t;
#define XGMIISYNCr_CLR BCMI_HYPERLITE_XGXS_XGMIISYNCr_CLR
#define XGMIISYNCr_SET BCMI_HYPERLITE_XGXS_XGMIISYNCr_SET
#define XGMIISYNCr_GET BCMI_HYPERLITE_XGXS_XGMIISYNCr_GET
#define XGMIISYNCr_Kf_GET BCMI_HYPERLITE_XGXS_XGMIISYNCr_Kf_GET
#define XGMIISYNCr_Kf_SET BCMI_HYPERLITE_XGXS_XGMIISYNCr_Kf_SET
#define XGMIISYNCr_KBf_GET BCMI_HYPERLITE_XGXS_XGMIISYNCr_KBf_GET
#define XGMIISYNCr_KBf_SET BCMI_HYPERLITE_XGXS_XGMIISYNCr_KBf_SET
#define READ_XGMIISYNCr BCMI_HYPERLITE_XGXS_READ_XGMIISYNCr
#define WRITE_XGMIISYNCr BCMI_HYPERLITE_XGXS_WRITE_XGMIISYNCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIISYNCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIISKIP
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8004
 * DESC:     XGMII skip control character register
 * SIZE:     32
 * FIELDS:
 *     RB               
 *     R                
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr (0x00000014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISKIP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIISKIPr_s {
	uint32_t v[1];
	uint32_t xgmiiskip[1];
	uint32_t _xgmiiskip;
} BCMI_HYPERLITE_XGXS_XGMIISKIPr_t;

#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_CLR(r) (r).xgmiiskip[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_SET(r,d) (r).xgmiiskip[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_GET(r) (r).xgmiiskip[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_Rf_GET(r) ((((r).xgmiiskip[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_Rf_SET(r,f) (r).xgmiiskip[0]=(((r).xgmiiskip[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_RBf_GET(r) (((r).xgmiiskip[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISKIPr_RBf_SET(r,f) (r).xgmiiskip[0]=(((r).xgmiiskip[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISKIP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIISKIPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIISKIPr,(_r._xgmiiskip))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIISKIPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIISKIPr,(_r._xgmiiskip))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISKIPr BCMI_HYPERLITE_XGXS_XGMIISKIPr
#define XGMIISKIPr_SIZE BCMI_HYPERLITE_XGXS_XGMIISKIPr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIISKIPr_t XGMIISKIPr_t;
#define XGMIISKIPr_CLR BCMI_HYPERLITE_XGXS_XGMIISKIPr_CLR
#define XGMIISKIPr_SET BCMI_HYPERLITE_XGXS_XGMIISKIPr_SET
#define XGMIISKIPr_GET BCMI_HYPERLITE_XGXS_XGMIISKIPr_GET
#define XGMIISKIPr_Rf_GET BCMI_HYPERLITE_XGXS_XGMIISKIPr_Rf_GET
#define XGMIISKIPr_Rf_SET BCMI_HYPERLITE_XGXS_XGMIISKIPr_Rf_SET
#define XGMIISKIPr_RBf_GET BCMI_HYPERLITE_XGXS_XGMIISKIPr_RBf_GET
#define XGMIISKIPr_RBf_SET BCMI_HYPERLITE_XGXS_XGMIISKIPr_RBf_SET
#define READ_XGMIISKIPr BCMI_HYPERLITE_XGXS_READ_XGMIISKIPr
#define WRITE_XGMIISKIPr BCMI_HYPERLITE_XGXS_WRITE_XGMIISKIPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIISKIPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIISOPEOP
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8005
 * DESC:     XGMII sop & eop control character register
 * SIZE:     32
 * FIELDS:
 *     T                
 *     S                
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr (0x00000015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISOPEOP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_s {
	uint32_t v[1];
	uint32_t xgmiisopeop[1];
	uint32_t _xgmiisopeop;
} BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_t;

#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_CLR(r) (r).xgmiisopeop[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_SET(r,d) (r).xgmiisopeop[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_GET(r) (r).xgmiisopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Sf_GET(r) ((((r).xgmiisopeop[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Sf_SET(r,f) (r).xgmiisopeop[0]=(((r).xgmiisopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Tf_GET(r) (((r).xgmiisopeop[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Tf_SET(r,f) (r).xgmiisopeop[0]=(((r).xgmiisopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISOPEOP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIISOPEOPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIISOPEOPr,(_r._xgmiisopeop))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIISOPEOPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIISOPEOPr,(_r._xgmiisopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISOPEOPr BCMI_HYPERLITE_XGXS_XGMIISOPEOPr
#define XGMIISOPEOPr_SIZE BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_t XGMIISOPEOPr_t;
#define XGMIISOPEOPr_CLR BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_CLR
#define XGMIISOPEOPr_SET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_SET
#define XGMIISOPEOPr_GET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_GET
#define XGMIISOPEOPr_Sf_GET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Sf_GET
#define XGMIISOPEOPr_Sf_SET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Sf_SET
#define XGMIISOPEOPr_Tf_GET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Tf_GET
#define XGMIISOPEOPr_Tf_SET BCMI_HYPERLITE_XGXS_XGMIISOPEOPr_Tf_SET
#define READ_XGMIISOPEOPr BCMI_HYPERLITE_XGXS_READ_XGMIISOPEOPr
#define WRITE_XGMIISOPEOPr BCMI_HYPERLITE_XGXS_WRITE_XGMIISOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIISOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIIALIGN
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8006
 * DESC:     XGMII alignment & eror control character register
 * SIZE:     32
 * FIELDS:
 *     A                
 *     E                
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr (0x00000016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIALIGN.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIIALIGNr_s {
	uint32_t v[1];
	uint32_t xgmiialign[1];
	uint32_t _xgmiialign;
} BCMI_HYPERLITE_XGXS_XGMIIALIGNr_t;

#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_CLR(r) (r).xgmiialign[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_SET(r,d) (r).xgmiialign[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_GET(r) (r).xgmiialign[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Ef_GET(r) ((((r).xgmiialign[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Ef_SET(r,f) (r).xgmiialign[0]=(((r).xgmiialign[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Af_GET(r) (((r).xgmiialign[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Af_SET(r,f) (r).xgmiialign[0]=(((r).xgmiialign[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIIALIGN.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIIALIGNr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIIALIGNr,(_r._xgmiialign))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIIALIGNr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIIALIGNr,(_r._xgmiialign))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIALIGNr BCMI_HYPERLITE_XGXS_XGMIIALIGNr
#define XGMIIALIGNr_SIZE BCMI_HYPERLITE_XGXS_XGMIIALIGNr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIIALIGNr_t XGMIIALIGNr_t;
#define XGMIIALIGNr_CLR BCMI_HYPERLITE_XGXS_XGMIIALIGNr_CLR
#define XGMIIALIGNr_SET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_SET
#define XGMIIALIGNr_GET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_GET
#define XGMIIALIGNr_Ef_GET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Ef_GET
#define XGMIIALIGNr_Ef_SET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Ef_SET
#define XGMIIALIGNr_Af_GET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Af_GET
#define XGMIIALIGNr_Af_SET BCMI_HYPERLITE_XGXS_XGMIIALIGNr_Af_SET
#define READ_XGMIIALIGNr BCMI_HYPERLITE_XGXS_READ_XGMIIALIGNr
#define WRITE_XGMIIALIGNr BCMI_HYPERLITE_XGXS_WRITE_XGMIIALIGNr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIIALIGNr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIIRCONTROL
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8007
 * DESC:     XGMII receive control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     CKCMP_GT1_ICOL_DIS 
 *     CKCMP_AFRST_EN   
 *     CKCMP_NOIPG_EN   
 *     SCR_EN_4LANE     
 *     RESERVED1        
 *     CHK_END_FORCE    
 *     CHK_END_STD_EN   
 *     CHK_END_EN       
 *     FORCE_INBNDLS_EN 
 *     TX_LF2_EN        
 *     TX_LF1_EN        
 *     TX_LF0_EN        
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr (0x00000017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIRCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_s {
	uint32_t v[1];
	uint32_t xgmiircontrol[1];
	uint32_t _xgmiircontrol;
} BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CLR(r) (r).xgmiircontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SET(r,d) (r).xgmiircontrol[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_GET(r) (r).xgmiircontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED0f_GET(r) ((((r).xgmiircontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED0f_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF0_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF0_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF1_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF1_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF2_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF2_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_STD_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_STD_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_FORCEf_GET(r) ((((r).xgmiircontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_FORCEf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED1f_GET(r) ((((r).xgmiircontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED1f_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SCR_EN_4LANEf_GET(r) ((((r).xgmiircontrol[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SCR_EN_4LANEf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET(r) ((((r).xgmiircontrol[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED2f_GET(r) (((r).xgmiircontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED2f_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XGMIIRCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIIRCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr,(_r._xgmiircontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIIRCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr,(_r._xgmiircontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIRCONTROLr BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr
#define XGMIIRCONTROLr_SIZE BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_t XGMIIRCONTROLr_t;
#define XGMIIRCONTROLr_CLR BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CLR
#define XGMIIRCONTROLr_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SET
#define XGMIIRCONTROLr_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_GET
#define XGMIIRCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED0f_GET
#define XGMIIRCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED0f_SET
#define XGMIIRCONTROLr_TX_LF0_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF0_ENf_GET
#define XGMIIRCONTROLr_TX_LF0_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF0_ENf_SET
#define XGMIIRCONTROLr_TX_LF1_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF1_ENf_GET
#define XGMIIRCONTROLr_TX_LF1_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF1_ENf_SET
#define XGMIIRCONTROLr_TX_LF2_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF2_ENf_GET
#define XGMIIRCONTROLr_TX_LF2_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_TX_LF2_ENf_SET
#define XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET
#define XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET
#define XGMIIRCONTROLr_CHK_END_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_ENf_GET
#define XGMIIRCONTROLr_CHK_END_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_ENf_SET
#define XGMIIRCONTROLr_CHK_END_STD_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_STD_ENf_GET
#define XGMIIRCONTROLr_CHK_END_STD_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_STD_ENf_SET
#define XGMIIRCONTROLr_CHK_END_FORCEf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_FORCEf_GET
#define XGMIIRCONTROLr_CHK_END_FORCEf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CHK_END_FORCEf_SET
#define XGMIIRCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED1f_GET
#define XGMIIRCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED1f_SET
#define XGMIIRCONTROLr_SCR_EN_4LANEf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SCR_EN_4LANEf_GET
#define XGMIIRCONTROLr_SCR_EN_4LANEf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_SCR_EN_4LANEf_SET
#define XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET
#define XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET
#define XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET
#define XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET
#define XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET
#define XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET
#define XGMIIRCONTROLr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED2f_GET
#define XGMIIRCONTROLr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr_RESERVED2f_SET
#define READ_XGMIIRCONTROLr BCMI_HYPERLITE_XGXS_READ_XGMIIRCONTROLr
#define WRITE_XGMIIRCONTROLr BCMI_HYPERLITE_XGXS_WRITE_XGMIIRCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIIRCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIITCONTROL
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8008
 * DESC:     XGMII transmit control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     TX_FORCE_DPATH_I_EN 
 *     TX_FORCE_DPATH_IORRF_EN 
 *     TX_XGMII_TCOL_OLD_EN 
 *     XENPAK_LFCLR_EN  
 *     FLIP_TXRX_LF     
 *     ALIGNSTAT_RXLF_EN 
 *     RESERVED0        
 *     PN_SEL           
 *     SWAP_LANE_IND    
 *     SWAPEN           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr (0x00000018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGMIITCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_s {
	uint32_t v[1];
	uint32_t xgmiitcontrol[1];
	uint32_t _xgmiitcontrol;
} BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_CLR(r) (r).xgmiitcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SET(r,d) (r).xgmiitcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_GET(r) (r).xgmiitcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAPENf_GET(r) ((((r).xgmiitcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAPENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAP_LANE_INDf_GET(r) ((((r).xgmiitcontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAP_LANE_INDf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_PN_SELf_GET(r) ((((r).xgmiitcontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_PN_SELf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED0f_GET(r) ((((r).xgmiitcontrol[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED0f_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_FLIP_TXRX_LFf_GET(r) ((((r).xgmiitcontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_FLIP_TXRX_LFf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED1f_GET(r) (((r).xgmiitcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED1f_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XGMIITCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIITCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIITCONTROLr,(_r._xgmiitcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIITCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIITCONTROLr,(_r._xgmiitcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIITCONTROLr BCMI_HYPERLITE_XGXS_XGMIITCONTROLr
#define XGMIITCONTROLr_SIZE BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_t XGMIITCONTROLr_t;
#define XGMIITCONTROLr_CLR BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_CLR
#define XGMIITCONTROLr_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SET
#define XGMIITCONTROLr_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_GET
#define XGMIITCONTROLr_SWAPENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAPENf_GET
#define XGMIITCONTROLr_SWAPENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAPENf_SET
#define XGMIITCONTROLr_SWAP_LANE_INDf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAP_LANE_INDf_GET
#define XGMIITCONTROLr_SWAP_LANE_INDf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_SWAP_LANE_INDf_SET
#define XGMIITCONTROLr_PN_SELf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_PN_SELf_GET
#define XGMIITCONTROLr_PN_SELf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_PN_SELf_SET
#define XGMIITCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED0f_GET
#define XGMIITCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED0f_SET
#define XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET
#define XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET
#define XGMIITCONTROLr_FLIP_TXRX_LFf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_FLIP_TXRX_LFf_GET
#define XGMIITCONTROLr_FLIP_TXRX_LFf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_FLIP_TXRX_LFf_SET
#define XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET
#define XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET
#define XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET
#define XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET
#define XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET
#define XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET
#define XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET
#define XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET
#define XGMIITCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED1f_GET
#define XGMIITCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_XGMIITCONTROLr_RESERVED1f_SET
#define READ_XGMIITCONTROLr BCMI_HYPERLITE_XGXS_READ_XGMIITCONTROLr
#define WRITE_XGMIITCONTROLr BCMI_HYPERLITE_XGXS_WRITE_XGMIITCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIITCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGMIISWAP
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x8009
 * DESC:     XGMII ||A|| minimum swap spacing
 * SIZE:     32
 * FIELDS:
 *     SWAP_COUNT       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGMIISWAPr (0x00000019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISWAP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGMIISWAPr_s {
	uint32_t v[1];
	uint32_t xgmiiswap[1];
	uint32_t _xgmiiswap;
} BCMI_HYPERLITE_XGXS_XGMIISWAPr_t;

#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_CLR(r) (r).xgmiiswap[0] = 0
#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_SET(r,d) (r).xgmiiswap[0] = d
#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_GET(r) (r).xgmiiswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_SWAP_COUNTf_GET(r) (((r).xgmiiswap[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_XGMIISWAPr_SWAP_COUNTf_SET(r,f) (r).xgmiiswap[0]=(((r).xgmiiswap[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XGMIISWAP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGMIISWAPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGMIISWAPr,(_r._xgmiiswap))
#define BCMI_HYPERLITE_XGXS_WRITE_XGMIISWAPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGMIISWAPr,(_r._xgmiiswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISWAPr BCMI_HYPERLITE_XGXS_XGMIISWAPr
#define XGMIISWAPr_SIZE BCMI_HYPERLITE_XGXS_XGMIISWAPr_SIZE
typedef BCMI_HYPERLITE_XGXS_XGMIISWAPr_t XGMIISWAPr_t;
#define XGMIISWAPr_CLR BCMI_HYPERLITE_XGXS_XGMIISWAPr_CLR
#define XGMIISWAPr_SET BCMI_HYPERLITE_XGXS_XGMIISWAPr_SET
#define XGMIISWAPr_GET BCMI_HYPERLITE_XGXS_XGMIISWAPr_GET
#define XGMIISWAPr_SWAP_COUNTf_GET BCMI_HYPERLITE_XGXS_XGMIISWAPr_SWAP_COUNTf_GET
#define XGMIISWAPr_SWAP_COUNTf_SET BCMI_HYPERLITE_XGXS_XGMIISWAPr_SWAP_COUNTf_SET
#define READ_XGMIISWAPr BCMI_HYPERLITE_XGXS_READ_XGMIISWAPr
#define WRITE_XGMIISWAPr BCMI_HYPERLITE_XGXS_WRITE_XGMIISWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGMIISWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LSSLSID
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800a
 * DESC:     LSS information byte register
 * SIZE:     32
 * FIELDS:
 *     LSS_DOMAIN_ID    
 *     LSS_LS_ID        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LSSLSIDr (0x0000001a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LSSLSIDr_SIZE 4

/*
 * This structure should be used to declare and program LSSLSID.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LSSLSIDr_s {
	uint32_t v[1];
	uint32_t lsslsid[1];
	uint32_t _lsslsid;
} BCMI_HYPERLITE_XGXS_LSSLSIDr_t;

#define BCMI_HYPERLITE_XGXS_LSSLSIDr_CLR(r) (r).lsslsid[0] = 0
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_SET(r,d) (r).lsslsid[0] = d
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_GET(r) (r).lsslsid[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_LS_IDf_GET(r) ((((r).lsslsid[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_LS_IDf_SET(r,f) (r).lsslsid[0]=(((r).lsslsid[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_DOMAIN_IDf_GET(r) (((r).lsslsid[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_DOMAIN_IDf_SET(r,f) (r).lsslsid[0]=(((r).lsslsid[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LSSLSID.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LSSLSIDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LSSLSIDr,(_r._lsslsid))
#define BCMI_HYPERLITE_XGXS_WRITE_LSSLSIDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LSSLSIDr,(_r._lsslsid))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSLSIDr BCMI_HYPERLITE_XGXS_LSSLSIDr
#define LSSLSIDr_SIZE BCMI_HYPERLITE_XGXS_LSSLSIDr_SIZE
typedef BCMI_HYPERLITE_XGXS_LSSLSIDr_t LSSLSIDr_t;
#define LSSLSIDr_CLR BCMI_HYPERLITE_XGXS_LSSLSIDr_CLR
#define LSSLSIDr_SET BCMI_HYPERLITE_XGXS_LSSLSIDr_SET
#define LSSLSIDr_GET BCMI_HYPERLITE_XGXS_LSSLSIDr_GET
#define LSSLSIDr_LSS_LS_IDf_GET BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_LS_IDf_GET
#define LSSLSIDr_LSS_LS_IDf_SET BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_LS_IDf_SET
#define LSSLSIDr_LSS_DOMAIN_IDf_GET BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_DOMAIN_IDf_GET
#define LSSLSIDr_LSS_DOMAIN_IDf_SET BCMI_HYPERLITE_XGXS_LSSLSIDr_LSS_DOMAIN_IDf_SET
#define READ_LSSLSIDr BCMI_HYPERLITE_XGXS_READ_LSSLSIDr
#define WRITE_LSSLSIDr BCMI_HYPERLITE_XGXS_WRITE_LSSLSIDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LSSLSIDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LSSTINFO
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800b
 * DESC:     LSS transmit information byte register
 * SIZE:     32
 * FIELDS:
 *     LSSL_INFO_BYTE   
 *     LSS_FUNCTION_ID  
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LSSTINFOr (0x0000001b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LSSTINFOr_SIZE 4

/*
 * This structure should be used to declare and program LSSTINFO.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LSSTINFOr_s {
	uint32_t v[1];
	uint32_t lsstinfo[1];
	uint32_t _lsstinfo;
} BCMI_HYPERLITE_XGXS_LSSTINFOr_t;

#define BCMI_HYPERLITE_XGXS_LSSTINFOr_CLR(r) (r).lsstinfo[0] = 0
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_SET(r,d) (r).lsstinfo[0] = d
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_GET(r) (r).lsstinfo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_LSS_FUNCTION_IDf_GET(r) ((((r).lsstinfo[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_LSS_FUNCTION_IDf_SET(r,f) (r).lsstinfo[0]=(((r).lsstinfo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_LSSL_INFO_BYTEf_GET(r) (((r).lsstinfo[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_LSSTINFOr_LSSL_INFO_BYTEf_SET(r,f) (r).lsstinfo[0]=(((r).lsstinfo[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LSSTINFO.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LSSTINFOr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LSSTINFOr,(_r._lsstinfo))
#define BCMI_HYPERLITE_XGXS_WRITE_LSSTINFOr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LSSTINFOr,(_r._lsstinfo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSTINFOr BCMI_HYPERLITE_XGXS_LSSTINFOr
#define LSSTINFOr_SIZE BCMI_HYPERLITE_XGXS_LSSTINFOr_SIZE
typedef BCMI_HYPERLITE_XGXS_LSSTINFOr_t LSSTINFOr_t;
#define LSSTINFOr_CLR BCMI_HYPERLITE_XGXS_LSSTINFOr_CLR
#define LSSTINFOr_SET BCMI_HYPERLITE_XGXS_LSSTINFOr_SET
#define LSSTINFOr_GET BCMI_HYPERLITE_XGXS_LSSTINFOr_GET
#define LSSTINFOr_LSS_FUNCTION_IDf_GET BCMI_HYPERLITE_XGXS_LSSTINFOr_LSS_FUNCTION_IDf_GET
#define LSSTINFOr_LSS_FUNCTION_IDf_SET BCMI_HYPERLITE_XGXS_LSSTINFOr_LSS_FUNCTION_IDf_SET
#define LSSTINFOr_LSSL_INFO_BYTEf_GET BCMI_HYPERLITE_XGXS_LSSTINFOr_LSSL_INFO_BYTEf_GET
#define LSSTINFOr_LSSL_INFO_BYTEf_SET BCMI_HYPERLITE_XGXS_LSSTINFOr_LSSL_INFO_BYTEf_SET
#define READ_LSSTINFOr BCMI_HYPERLITE_XGXS_READ_LSSTINFOr
#define WRITE_LSSTINFOr BCMI_HYPERLITE_XGXS_WRITE_LSSTINFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LSSTINFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LSSRINFO
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800c
 * DESC:     LSS receive information byte register
 * SIZE:     32
 * FIELDS:
 *     LSSR_INFO_BYTE   
 *     RESERVED1        
 *     LSSL_INFO_BYTE8  
 *     LSS_FUNCTION_ID8 
 *     LSS_DOMAIN_ID8   
 *     LSS_LS_ID8       
 *     RESERVED0        
 *     CONTROL_EN       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LSSRINFOr (0x0000001c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LSSRINFOr_SIZE 4

/*
 * This structure should be used to declare and program LSSRINFO.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LSSRINFOr_s {
	uint32_t v[1];
	uint32_t lssrinfo[1];
	uint32_t _lssrinfo;
} BCMI_HYPERLITE_XGXS_LSSRINFOr_t;

#define BCMI_HYPERLITE_XGXS_LSSRINFOr_CLR(r) (r).lssrinfo[0] = 0
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_SET(r,d) (r).lssrinfo[0] = d
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_GET(r) (r).lssrinfo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_CONTROL_ENf_GET(r) ((((r).lssrinfo[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_CONTROL_ENf_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED0f_GET(r) ((((r).lssrinfo[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED0f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_LS_ID8f_GET(r) ((((r).lssrinfo[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_LS_ID8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_DOMAIN_ID8f_GET(r) ((((r).lssrinfo[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_DOMAIN_ID8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_FUNCTION_ID8f_GET(r) ((((r).lssrinfo[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_FUNCTION_ID8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSL_INFO_BYTE8f_GET(r) ((((r).lssrinfo[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSL_INFO_BYTE8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED1f_GET(r) ((((r).lssrinfo[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED1f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSR_INFO_BYTEf_GET(r) (((r).lssrinfo[0]) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSR_INFO_BYTEf_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access LSSRINFO.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LSSRINFOr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LSSRINFOr,(_r._lssrinfo))
#define BCMI_HYPERLITE_XGXS_WRITE_LSSRINFOr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LSSRINFOr,(_r._lssrinfo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSRINFOr BCMI_HYPERLITE_XGXS_LSSRINFOr
#define LSSRINFOr_SIZE BCMI_HYPERLITE_XGXS_LSSRINFOr_SIZE
typedef BCMI_HYPERLITE_XGXS_LSSRINFOr_t LSSRINFOr_t;
#define LSSRINFOr_CLR BCMI_HYPERLITE_XGXS_LSSRINFOr_CLR
#define LSSRINFOr_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_SET
#define LSSRINFOr_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_GET
#define LSSRINFOr_CONTROL_ENf_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_CONTROL_ENf_GET
#define LSSRINFOr_CONTROL_ENf_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_CONTROL_ENf_SET
#define LSSRINFOr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED0f_GET
#define LSSRINFOr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED0f_SET
#define LSSRINFOr_LSS_LS_ID8f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_LS_ID8f_GET
#define LSSRINFOr_LSS_LS_ID8f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_LS_ID8f_SET
#define LSSRINFOr_LSS_DOMAIN_ID8f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_DOMAIN_ID8f_GET
#define LSSRINFOr_LSS_DOMAIN_ID8f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_DOMAIN_ID8f_SET
#define LSSRINFOr_LSS_FUNCTION_ID8f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_FUNCTION_ID8f_GET
#define LSSRINFOr_LSS_FUNCTION_ID8f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSS_FUNCTION_ID8f_SET
#define LSSRINFOr_LSSL_INFO_BYTE8f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSL_INFO_BYTE8f_GET
#define LSSRINFOr_LSSL_INFO_BYTE8f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSL_INFO_BYTE8f_SET
#define LSSRINFOr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED1f_GET
#define LSSRINFOr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_RESERVED1f_SET
#define LSSRINFOr_LSSR_INFO_BYTEf_GET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSR_INFO_BYTEf_GET
#define LSSRINFOr_LSSR_INFO_BYTEf_SET BCMI_HYPERLITE_XGXS_LSSRINFOr_LSSR_INFO_BYTEf_SET
#define READ_LSSRINFOr BCMI_HYPERLITE_XGXS_READ_LSSRINFOr
#define WRITE_LSSRINFOr BCMI_HYPERLITE_XGXS_WRITE_LSSRINFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LSSRINFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MMDSELECT
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800d
 * DESC:     MMD select register
 * SIZE:     32
 * FIELDS:
 *     DEVCL22_EN       
 *     DEVDEVAD_EN      
 *     DEVPMD_EN        
 *     DEVAN_EN         
 *     RESERVED0        
 *     MULTIMMDS_EN     
 *     MULTIPRTS_EN     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MMDSELECTr (0x0000001d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MMDSELECTr_SIZE 4

/*
 * This structure should be used to declare and program MMDSELECT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MMDSELECTr_s {
	uint32_t v[1];
	uint32_t mmdselect[1];
	uint32_t _mmdselect;
} BCMI_HYPERLITE_XGXS_MMDSELECTr_t;

#define BCMI_HYPERLITE_XGXS_MMDSELECTr_CLR(r) (r).mmdselect[0] = 0
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_SET(r,d) (r).mmdselect[0] = d
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_GET(r) (r).mmdselect[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIPRTS_ENf_GET(r) ((((r).mmdselect[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIPRTS_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIMMDS_ENf_GET(r) ((((r).mmdselect[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIMMDS_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_RESERVED0f_GET(r) ((((r).mmdselect[0]) >> 4) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_RESERVED0f_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x3ff << 4)) | ((((uint32_t)f) & 0x3ff) << 4))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVAN_ENf_GET(r) ((((r).mmdselect[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVAN_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVPMD_ENf_GET(r) ((((r).mmdselect[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVPMD_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVDEVAD_ENf_GET(r) ((((r).mmdselect[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVDEVAD_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVCL22_ENf_GET(r) (((r).mmdselect[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVCL22_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MMDSELECT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MMDSELECTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MMDSELECTr,(_r._mmdselect))
#define BCMI_HYPERLITE_XGXS_WRITE_MMDSELECTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MMDSELECTr,(_r._mmdselect))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MMDSELECTr BCMI_HYPERLITE_XGXS_MMDSELECTr
#define MMDSELECTr_SIZE BCMI_HYPERLITE_XGXS_MMDSELECTr_SIZE
typedef BCMI_HYPERLITE_XGXS_MMDSELECTr_t MMDSELECTr_t;
#define MMDSELECTr_CLR BCMI_HYPERLITE_XGXS_MMDSELECTr_CLR
#define MMDSELECTr_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_SET
#define MMDSELECTr_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_GET
#define MMDSELECTr_MULTIPRTS_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIPRTS_ENf_GET
#define MMDSELECTr_MULTIPRTS_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIPRTS_ENf_SET
#define MMDSELECTr_MULTIMMDS_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIMMDS_ENf_GET
#define MMDSELECTr_MULTIMMDS_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_MULTIMMDS_ENf_SET
#define MMDSELECTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_RESERVED0f_GET
#define MMDSELECTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_RESERVED0f_SET
#define MMDSELECTr_DEVAN_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVAN_ENf_GET
#define MMDSELECTr_DEVAN_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVAN_ENf_SET
#define MMDSELECTr_DEVPMD_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVPMD_ENf_GET
#define MMDSELECTr_DEVPMD_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVPMD_ENf_SET
#define MMDSELECTr_DEVDEVAD_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVDEVAD_ENf_GET
#define MMDSELECTr_DEVDEVAD_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVDEVAD_ENf_SET
#define MMDSELECTr_DEVCL22_ENf_GET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVCL22_ENf_GET
#define MMDSELECTr_DEVCL22_ENf_SET BCMI_HYPERLITE_XGXS_MMDSELECTr_DEVCL22_ENf_SET
#define READ_MMDSELECTr BCMI_HYPERLITE_XGXS_READ_MMDSELECTr
#define WRITE_MMDSELECTr BCMI_HYPERLITE_XGXS_WRITE_MMDSELECTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MMDSELECTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MISCCONTROL1
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800e
 * DESC:     Miscellaneous control 1 register
 * SIZE:     32
 * FIELDS:
 *     IEEE_BLKSEL_VAL  
 *     IEEE_BLKSEL_AUTODET 
 *     INVERT_RX_SIGDET 
 *     PARDET10G_PWRDNLINK_EN 
 *     FORCE_DIV5_FOR_LXCK25 
 *     RESERVED1        
 *     LATCH_LINKDOWN_ENABLE 
 *     CLEAR_LINKDOWN   
 *     RESERVED0        
 *     PMD_DEV_EN_OVERRIDE 
 *     PCS_DEV_EN_OVERRIDE 
 *     GLOBAL_PMD_TX_DISABLE 
 *     PMD_LANE0_TX_DISABLE 
 *     PMD_LANE1_TX_DISABLE 
 *     PMD_LANE2_TX_DISABLE 
 *     PMD_LANE3_TX_DISABLE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r (0x0000001e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program MISCCONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MISCCONTROL1r_s {
	uint32_t v[1];
	uint32_t misccontrol1[1];
	uint32_t _misccontrol1;
} BCMI_HYPERLITE_XGXS_MISCCONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLR(r) (r).misccontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_SET(r,d) (r).misccontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GET(r) (r).misccontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET(r) ((((r).misccontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET(r) ((((r).misccontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED0f_GET(r) ((((r).misccontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED0f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLEAR_LINKDOWNf_GET(r) ((((r).misccontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLEAR_LINKDOWNf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET(r) ((((r).misccontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED1f_GET(r) ((((r).misccontrol1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED1f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET(r) ((((r).misccontrol1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET(r) ((((r).misccontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_INVERT_RX_SIGDETf_GET(r) ((((r).misccontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_INVERT_RX_SIGDETf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET(r) ((((r).misccontrol1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_VALf_GET(r) (((r).misccontrol1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_VALf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISCCONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MISCCONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MISCCONTROL1r,(_r._misccontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_MISCCONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MISCCONTROL1r,(_r._misccontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISCCONTROL1r BCMI_HYPERLITE_XGXS_MISCCONTROL1r
#define MISCCONTROL1r_SIZE BCMI_HYPERLITE_XGXS_MISCCONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_MISCCONTROL1r_t MISCCONTROL1r_t;
#define MISCCONTROL1r_CLR BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLR
#define MISCCONTROL1r_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_SET
#define MISCCONTROL1r_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GET
#define MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET
#define MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET
#define MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET
#define MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET
#define MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET
#define MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET
#define MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET
#define MISCCONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED0f_GET
#define MISCCONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED0f_SET
#define MISCCONTROL1r_CLEAR_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLEAR_LINKDOWNf_GET
#define MISCCONTROL1r_CLEAR_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_CLEAR_LINKDOWNf_SET
#define MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET
#define MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET
#define MISCCONTROL1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED1f_GET
#define MISCCONTROL1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_RESERVED1f_SET
#define MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET
#define MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET
#define MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET
#define MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET
#define MISCCONTROL1r_INVERT_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_INVERT_RX_SIGDETf_GET
#define MISCCONTROL1r_INVERT_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_INVERT_RX_SIGDETf_SET
#define MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET
#define MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET
#define MISCCONTROL1r_IEEE_BLKSEL_VALf_GET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_VALf_GET
#define MISCCONTROL1r_IEEE_BLKSEL_VALf_SET BCMI_HYPERLITE_XGXS_MISCCONTROL1r_IEEE_BLKSEL_VALf_SET
#define READ_MISCCONTROL1r BCMI_HYPERLITE_XGXS_READ_MISCCONTROL1r
#define WRITE_MISCCONTROL1r BCMI_HYPERLITE_XGXS_WRITE_MISCCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MISCCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  BLOCKADDRESS
 * BLOCKS:   XGXSBLK0
 * REGADDR:  0x800f
 * DESC:     Block Address register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     BLOCKADDRESS     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr (0x0000001f | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_SIZE 4

/*
 * This structure should be used to declare and program BLOCKADDRESS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_s {
	uint32_t v[1];
	uint32_t blockaddress[1];
	uint32_t _blockaddress;
} BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_t;

#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_CLR(r) (r).blockaddress[0] = 0
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_SET(r,d) (r).blockaddress[0] = d
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_GET(r) (r).blockaddress[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED0f_GET(r) ((((r).blockaddress[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED0f_SET(r,f) (r).blockaddress[0]=(((r).blockaddress[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_BLOCKADDRESSf_GET(r) ((((r).blockaddress[0]) >> 4) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_BLOCKADDRESSf_SET(r,f) (r).blockaddress[0]=(((r).blockaddress[0] & ~((uint32_t)0x7ff << 4)) | ((((uint32_t)f) & 0x7ff) << 4))
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED1f_GET(r) (((r).blockaddress[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED1f_SET(r,f) (r).blockaddress[0]=(((r).blockaddress[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access BLOCKADDRESS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_BLOCKADDRESSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_BLOCKADDRESSr,(_r._blockaddress))
#define BCMI_HYPERLITE_XGXS_WRITE_BLOCKADDRESSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_BLOCKADDRESSr,(_r._blockaddress))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BLOCKADDRESSr BCMI_HYPERLITE_XGXS_BLOCKADDRESSr
#define BLOCKADDRESSr_SIZE BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_SIZE
typedef BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_t BLOCKADDRESSr_t;
#define BLOCKADDRESSr_CLR BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_CLR
#define BLOCKADDRESSr_SET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_SET
#define BLOCKADDRESSr_GET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_GET
#define BLOCKADDRESSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED0f_GET
#define BLOCKADDRESSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED0f_SET
#define BLOCKADDRESSr_BLOCKADDRESSf_GET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_BLOCKADDRESSf_GET
#define BLOCKADDRESSr_BLOCKADDRESSf_SET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_BLOCKADDRESSf_SET
#define BLOCKADDRESSr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED1f_GET
#define BLOCKADDRESSr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_BLOCKADDRESSr_RESERVED1f_SET
#define READ_BLOCKADDRESSr BCMI_HYPERLITE_XGXS_READ_BLOCKADDRESSr
#define WRITE_BLOCKADDRESSr BCMI_HYPERLITE_XGXS_WRITE_BLOCKADDRESSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_BLOCKADDRESSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DESKEW
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8010
 * DESC:     Lane deskew register
 * SIZE:     32
 * FIELDS:
 *     MPWIN            
 *     DSWIN            
 *     DESKEW_HYST_EN   
 *     LINK_EN          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DESKEWr (0x00001010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DESKEWr_SIZE 4

/*
 * This structure should be used to declare and program DESKEW.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DESKEWr_s {
	uint32_t v[1];
	uint32_t deskew[1];
	uint32_t _deskew;
} BCMI_HYPERLITE_XGXS_DESKEWr_t;

#define BCMI_HYPERLITE_XGXS_DESKEWr_CLR(r) (r).deskew[0] = 0
#define BCMI_HYPERLITE_XGXS_DESKEWr_SET(r,d) (r).deskew[0] = d
#define BCMI_HYPERLITE_XGXS_DESKEWr_GET(r) (r).deskew[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DESKEWr_LINK_ENf_GET(r) ((((r).deskew[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DESKEWr_LINK_ENf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DESKEWr_DESKEW_HYST_ENf_GET(r) ((((r).deskew[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DESKEWr_DESKEW_HYST_ENf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DESKEWr_DSWINf_GET(r) ((((r).deskew[0]) >> 9) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DESKEWr_DSWINf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9))
#define BCMI_HYPERLITE_XGXS_DESKEWr_MPWINf_GET(r) (((r).deskew[0]) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_DESKEWr_MPWINf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access DESKEW.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DESKEWr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DESKEWr,(_r._deskew))
#define BCMI_HYPERLITE_XGXS_WRITE_DESKEWr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DESKEWr,(_r._deskew))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DESKEWr BCMI_HYPERLITE_XGXS_DESKEWr
#define DESKEWr_SIZE BCMI_HYPERLITE_XGXS_DESKEWr_SIZE
typedef BCMI_HYPERLITE_XGXS_DESKEWr_t DESKEWr_t;
#define DESKEWr_CLR BCMI_HYPERLITE_XGXS_DESKEWr_CLR
#define DESKEWr_SET BCMI_HYPERLITE_XGXS_DESKEWr_SET
#define DESKEWr_GET BCMI_HYPERLITE_XGXS_DESKEWr_GET
#define DESKEWr_LINK_ENf_GET BCMI_HYPERLITE_XGXS_DESKEWr_LINK_ENf_GET
#define DESKEWr_LINK_ENf_SET BCMI_HYPERLITE_XGXS_DESKEWr_LINK_ENf_SET
#define DESKEWr_DESKEW_HYST_ENf_GET BCMI_HYPERLITE_XGXS_DESKEWr_DESKEW_HYST_ENf_GET
#define DESKEWr_DESKEW_HYST_ENf_SET BCMI_HYPERLITE_XGXS_DESKEWr_DESKEW_HYST_ENf_SET
#define DESKEWr_DSWINf_GET BCMI_HYPERLITE_XGXS_DESKEWr_DSWINf_GET
#define DESKEWr_DSWINf_SET BCMI_HYPERLITE_XGXS_DESKEWr_DSWINf_SET
#define DESKEWr_MPWINf_GET BCMI_HYPERLITE_XGXS_DESKEWr_MPWINf_GET
#define DESKEWr_MPWINf_SET BCMI_HYPERLITE_XGXS_DESKEWr_MPWINf_SET
#define READ_DESKEWr BCMI_HYPERLITE_XGXS_READ_DESKEWr
#define WRITE_DESKEWr BCMI_HYPERLITE_XGXS_WRITE_DESKEWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DESKEWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LINK
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8011
 * DESC:     Link ||A|| column timeout value register
 * SIZE:     32
 * FIELDS:
 *     ACOLWIN          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LINKr (0x00001011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LINKr_SIZE 4

/*
 * This structure should be used to declare and program LINK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LINKr_s {
	uint32_t v[1];
	uint32_t link[1];
	uint32_t _link;
} BCMI_HYPERLITE_XGXS_LINKr_t;

#define BCMI_HYPERLITE_XGXS_LINKr_CLR(r) (r).link[0] = 0
#define BCMI_HYPERLITE_XGXS_LINKr_SET(r,d) (r).link[0] = d
#define BCMI_HYPERLITE_XGXS_LINKr_GET(r) (r).link[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LINKr_ACOLWINf_GET(r) (((r).link[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LINKr_ACOLWINf_SET(r,f) (r).link[0]=(((r).link[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LINK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LINKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LINKr,(_r._link))
#define BCMI_HYPERLITE_XGXS_WRITE_LINKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LINKr,(_r._link))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINKr BCMI_HYPERLITE_XGXS_LINKr
#define LINKr_SIZE BCMI_HYPERLITE_XGXS_LINKr_SIZE
typedef BCMI_HYPERLITE_XGXS_LINKr_t LINKr_t;
#define LINKr_CLR BCMI_HYPERLITE_XGXS_LINKr_CLR
#define LINKr_SET BCMI_HYPERLITE_XGXS_LINKr_SET
#define LINKr_GET BCMI_HYPERLITE_XGXS_LINKr_GET
#define LINKr_ACOLWINf_GET BCMI_HYPERLITE_XGXS_LINKr_ACOLWINf_GET
#define LINKr_ACOLWINf_SET BCMI_HYPERLITE_XGXS_LINKr_ACOLWINf_SET
#define READ_LINKr BCMI_HYPERLITE_XGXS_READ_LINKr
#define WRITE_LINKr BCMI_HYPERLITE_XGXS_WRITE_LINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTRX
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8012
 * DESC:     Receive test control register
 * SIZE:     32
 * FIELDS:
 *     RXTM_TSTSEL      
 *     RXTM_MODSEL      
 *     LINK_FORCE       
 *     RX_INBANDMDIO_QFLTR_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTRXr (0x00001012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTRXr_SIZE 4

/*
 * This structure should be used to declare and program TESTRX.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTRXr_s {
	uint32_t v[1];
	uint32_t testrx[1];
	uint32_t _testrx;
} BCMI_HYPERLITE_XGXS_TESTRXr_t;

#define BCMI_HYPERLITE_XGXS_TESTRXr_CLR(r) (r).testrx[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTRXr_SET(r,d) (r).testrx[0] = d
#define BCMI_HYPERLITE_XGXS_TESTRXr_GET(r) (r).testrx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTRXr_RESERVED0f_GET(r) ((((r).testrx[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_TESTRXr_RESERVED0f_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET(r) ((((r).testrx[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TESTRXr_LINK_FORCEf_GET(r) ((((r).testrx[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTRXr_LINK_FORCEf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_MODSELf_GET(r) ((((r).testrx[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_MODSELf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_TSTSELf_GET(r) (((r).testrx[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_TSTSELf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TESTRX.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTRXr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTRXr,(_r._testrx))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTRXr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTRXr,(_r._testrx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTRXr BCMI_HYPERLITE_XGXS_TESTRXr
#define TESTRXr_SIZE BCMI_HYPERLITE_XGXS_TESTRXr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTRXr_t TESTRXr_t;
#define TESTRXr_CLR BCMI_HYPERLITE_XGXS_TESTRXr_CLR
#define TESTRXr_SET BCMI_HYPERLITE_XGXS_TESTRXr_SET
#define TESTRXr_GET BCMI_HYPERLITE_XGXS_TESTRXr_GET
#define TESTRXr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTRXr_RESERVED0f_GET
#define TESTRXr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTRXr_RESERVED0f_SET
#define TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET BCMI_HYPERLITE_XGXS_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET
#define TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET BCMI_HYPERLITE_XGXS_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET
#define TESTRXr_LINK_FORCEf_GET BCMI_HYPERLITE_XGXS_TESTRXr_LINK_FORCEf_GET
#define TESTRXr_LINK_FORCEf_SET BCMI_HYPERLITE_XGXS_TESTRXr_LINK_FORCEf_SET
#define TESTRXr_RXTM_MODSELf_GET BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_MODSELf_GET
#define TESTRXr_RXTM_MODSELf_SET BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_MODSELf_SET
#define TESTRXr_RXTM_TSTSELf_GET BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_TSTSELf_GET
#define TESTRXr_RXTM_TSTSELf_SET BCMI_HYPERLITE_XGXS_TESTRXr_RXTM_TSTSELf_SET
#define READ_TESTRXr BCMI_HYPERLITE_XGXS_READ_TESTRXr
#define WRITE_TESTRXr BCMI_HYPERLITE_XGXS_WRITE_TESTRXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTRXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTTX
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8013
 * DESC:     Transmit test control register
 * SIZE:     32
 * FIELDS:
 *     TXTM_TSTSEL      
 *     TXTM_MODSEL      
 *     RX_CK4X1MUXSEL   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTTXr (0x00001013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTTXr_SIZE 4

/*
 * This structure should be used to declare and program TESTTX.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTTXr_s {
	uint32_t v[1];
	uint32_t testtx[1];
	uint32_t _testtx;
} BCMI_HYPERLITE_XGXS_TESTTXr_t;

#define BCMI_HYPERLITE_XGXS_TESTTXr_CLR(r) (r).testtx[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTTXr_SET(r,d) (r).testtx[0] = d
#define BCMI_HYPERLITE_XGXS_TESTTXr_GET(r) (r).testtx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTTXr_RESERVED0f_GET(r) ((((r).testtx[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_TESTTXr_RESERVED0f_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_TESTTXr_RX_CK4X1MUXSELf_GET(r) ((((r).testtx[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TESTTXr_RX_CK4X1MUXSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_MODSELf_GET(r) ((((r).testtx[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_MODSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_TSTSELf_GET(r) (((r).testtx[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_TSTSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TESTTX.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTTXr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTTXr,(_r._testtx))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTTXr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTTXr,(_r._testtx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTTXr BCMI_HYPERLITE_XGXS_TESTTXr
#define TESTTXr_SIZE BCMI_HYPERLITE_XGXS_TESTTXr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTTXr_t TESTTXr_t;
#define TESTTXr_CLR BCMI_HYPERLITE_XGXS_TESTTXr_CLR
#define TESTTXr_SET BCMI_HYPERLITE_XGXS_TESTTXr_SET
#define TESTTXr_GET BCMI_HYPERLITE_XGXS_TESTTXr_GET
#define TESTTXr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTTXr_RESERVED0f_GET
#define TESTTXr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTTXr_RESERVED0f_SET
#define TESTTXr_RX_CK4X1MUXSELf_GET BCMI_HYPERLITE_XGXS_TESTTXr_RX_CK4X1MUXSELf_GET
#define TESTTXr_RX_CK4X1MUXSELf_SET BCMI_HYPERLITE_XGXS_TESTTXr_RX_CK4X1MUXSELf_SET
#define TESTTXr_TXTM_MODSELf_GET BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_MODSELf_GET
#define TESTTXr_TXTM_MODSELf_SET BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_MODSELf_SET
#define TESTTXr_TXTM_TSTSELf_GET BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_TSTSELf_GET
#define TESTTXr_TXTM_TSTSELf_SET BCMI_HYPERLITE_XGXS_TESTTXr_TXTM_TSTSELf_SET
#define READ_TESTTXr BCMI_HYPERLITE_XGXS_READ_TESTTXr
#define WRITE_TESTTXr BCMI_HYPERLITE_XGXS_WRITE_TESTTXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTTXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTXG
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8014
 * DESC:     XGXS test control register
 * SIZE:     32
 * FIELDS:
 *     XG_RXTSTSEL      
 *     XG_TXTSTSEL      
 *     TEST_REG_SEL     
 *     RESERVED0        
 *     SLICE_SEL        
 *     TXDT_SEL         
 *     EVNT_CNTR_SEL    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTXGr (0x00001014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTXGr_SIZE 4

/*
 * This structure should be used to declare and program TESTXG.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTXGr_s {
	uint32_t v[1];
	uint32_t testxg[1];
	uint32_t _testxg;
} BCMI_HYPERLITE_XGXS_TESTXGr_t;

#define BCMI_HYPERLITE_XGXS_TESTXGr_CLR(r) (r).testxg[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTXGr_SET(r,d) (r).testxg[0] = d
#define BCMI_HYPERLITE_XGXS_TESTXGr_GET(r) (r).testxg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTXGr_EVNT_CNTR_SELf_GET(r) ((((r).testxg[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTXGr_EVNT_CNTR_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TESTXGr_TXDT_SELf_GET(r) ((((r).testxg[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTXGr_TXDT_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TESTXGr_SLICE_SELf_GET(r) ((((r).testxg[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_TESTXGr_SLICE_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_TESTXGr_RESERVED0f_GET(r) ((((r).testxg[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TESTXGr_RESERVED0f_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TESTXGr_TEST_REG_SELf_GET(r) ((((r).testxg[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTXGr_TEST_REG_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TESTXGr_XG_TXTSTSELf_GET(r) ((((r).testxg[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTXGr_XG_TXTSTSELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_TESTXGr_XG_RXTSTSELf_GET(r) (((r).testxg[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_TESTXGr_XG_RXTSTSELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TESTXG.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTXGr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTXGr,(_r._testxg))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTXGr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTXGr,(_r._testxg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTXGr BCMI_HYPERLITE_XGXS_TESTXGr
#define TESTXGr_SIZE BCMI_HYPERLITE_XGXS_TESTXGr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTXGr_t TESTXGr_t;
#define TESTXGr_CLR BCMI_HYPERLITE_XGXS_TESTXGr_CLR
#define TESTXGr_SET BCMI_HYPERLITE_XGXS_TESTXGr_SET
#define TESTXGr_GET BCMI_HYPERLITE_XGXS_TESTXGr_GET
#define TESTXGr_EVNT_CNTR_SELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_EVNT_CNTR_SELf_GET
#define TESTXGr_EVNT_CNTR_SELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_EVNT_CNTR_SELf_SET
#define TESTXGr_TXDT_SELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_TXDT_SELf_GET
#define TESTXGr_TXDT_SELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_TXDT_SELf_SET
#define TESTXGr_SLICE_SELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_SLICE_SELf_GET
#define TESTXGr_SLICE_SELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_SLICE_SELf_SET
#define TESTXGr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTXGr_RESERVED0f_GET
#define TESTXGr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTXGr_RESERVED0f_SET
#define TESTXGr_TEST_REG_SELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_TEST_REG_SELf_GET
#define TESTXGr_TEST_REG_SELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_TEST_REG_SELf_SET
#define TESTXGr_XG_TXTSTSELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_XG_TXTSTSELf_GET
#define TESTXGr_XG_TXTSTSELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_XG_TXTSTSELf_SET
#define TESTXGr_XG_RXTSTSELf_GET BCMI_HYPERLITE_XGXS_TESTXGr_XG_RXTSTSELf_GET
#define TESTXGr_XG_RXTSTSELf_SET BCMI_HYPERLITE_XGXS_TESTXGr_XG_RXTSTSELf_SET
#define READ_TESTXGr BCMI_HYPERLITE_XGXS_READ_TESTXGr
#define WRITE_TESTXGr BCMI_HYPERLITE_XGXS_WRITE_TESTXGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTXGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANECTRL0
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8015
 * DESC:     Lane control 0 register
 * SIZE:     32
 * FIELDS:
 *     CL36_PCS_EN_TX   
 *     CL36_PCS_EN_RX   
 *     RESERVED0        
 *     ED66EN           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANECTRL0r (0x00001015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANECTRL0r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANECTRL0r_s {
	uint32_t v[1];
	uint32_t lanectrl0[1];
	uint32_t _lanectrl0;
} BCMI_HYPERLITE_XGXS_LANECTRL0r_t;

#define BCMI_HYPERLITE_XGXS_LANECTRL0r_CLR(r) (r).lanectrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_SET(r,d) (r).lanectrl0[0] = d
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_GET(r) (r).lanectrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_ED66ENf_GET(r) ((((r).lanectrl0[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_ED66ENf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_RESERVED0f_GET(r) ((((r).lanectrl0[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_RESERVED0f_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_RXf_GET(r) ((((r).lanectrl0[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_RXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_TXf_GET(r) (((r).lanectrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_TXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANECTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANECTRL0r,(_r._lanectrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_LANECTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANECTRL0r,(_r._lanectrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL0r BCMI_HYPERLITE_XGXS_LANECTRL0r
#define LANECTRL0r_SIZE BCMI_HYPERLITE_XGXS_LANECTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_LANECTRL0r_t LANECTRL0r_t;
#define LANECTRL0r_CLR BCMI_HYPERLITE_XGXS_LANECTRL0r_CLR
#define LANECTRL0r_SET BCMI_HYPERLITE_XGXS_LANECTRL0r_SET
#define LANECTRL0r_GET BCMI_HYPERLITE_XGXS_LANECTRL0r_GET
#define LANECTRL0r_ED66ENf_GET BCMI_HYPERLITE_XGXS_LANECTRL0r_ED66ENf_GET
#define LANECTRL0r_ED66ENf_SET BCMI_HYPERLITE_XGXS_LANECTRL0r_ED66ENf_SET
#define LANECTRL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LANECTRL0r_RESERVED0f_GET
#define LANECTRL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LANECTRL0r_RESERVED0f_SET
#define LANECTRL0r_CL36_PCS_EN_RXf_GET BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_RXf_GET
#define LANECTRL0r_CL36_PCS_EN_RXf_SET BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_RXf_SET
#define LANECTRL0r_CL36_PCS_EN_TXf_GET BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_TXf_GET
#define LANECTRL0r_CL36_PCS_EN_TXf_SET BCMI_HYPERLITE_XGXS_LANECTRL0r_CL36_PCS_EN_TXf_SET
#define READ_LANECTRL0r BCMI_HYPERLITE_XGXS_READ_LANECTRL0r
#define WRITE_LANECTRL0r BCMI_HYPERLITE_XGXS_WRITE_LANECTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANECTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANECTRL1
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8016
 * DESC:     Lane control 1 register
 * SIZE:     32
 * FIELDS:
 *     TX1G_MODE_LN0    
 *     TX1G_MODE_LN1    
 *     TX1G_MODE_LN2    
 *     TX1G_MODE_LN3    
 *     RX1G_MODE_LN0    
 *     RX1G_MODE_LN1    
 *     RX1G_MODE_LN2    
 *     RX1G_MODE_LN3    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANECTRL1r (0x00001016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANECTRL1r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANECTRL1r_s {
	uint32_t v[1];
	uint32_t lanectrl1[1];
	uint32_t _lanectrl1;
} BCMI_HYPERLITE_XGXS_LANECTRL1r_t;

#define BCMI_HYPERLITE_XGXS_LANECTRL1r_CLR(r) (r).lanectrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_SET(r,d) (r).lanectrl1[0] = d
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_GET(r) (r).lanectrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN3f_GET(r) ((((r).lanectrl1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN3f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN2f_GET(r) ((((r).lanectrl1[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN2f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN1f_GET(r) ((((r).lanectrl1[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN1f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN0f_GET(r) ((((r).lanectrl1[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN0f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN3f_GET(r) ((((r).lanectrl1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN3f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN2f_GET(r) ((((r).lanectrl1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN2f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN1f_GET(r) ((((r).lanectrl1[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN1f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN0f_GET(r) (((r).lanectrl1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN0f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access LANECTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANECTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANECTRL1r,(_r._lanectrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_LANECTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANECTRL1r,(_r._lanectrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL1r BCMI_HYPERLITE_XGXS_LANECTRL1r
#define LANECTRL1r_SIZE BCMI_HYPERLITE_XGXS_LANECTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_LANECTRL1r_t LANECTRL1r_t;
#define LANECTRL1r_CLR BCMI_HYPERLITE_XGXS_LANECTRL1r_CLR
#define LANECTRL1r_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_SET
#define LANECTRL1r_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_GET
#define LANECTRL1r_RX1G_MODE_LN3f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN3f_GET
#define LANECTRL1r_RX1G_MODE_LN3f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN3f_SET
#define LANECTRL1r_RX1G_MODE_LN2f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN2f_GET
#define LANECTRL1r_RX1G_MODE_LN2f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN2f_SET
#define LANECTRL1r_RX1G_MODE_LN1f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN1f_GET
#define LANECTRL1r_RX1G_MODE_LN1f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN1f_SET
#define LANECTRL1r_RX1G_MODE_LN0f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN0f_GET
#define LANECTRL1r_RX1G_MODE_LN0f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_RX1G_MODE_LN0f_SET
#define LANECTRL1r_TX1G_MODE_LN3f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN3f_GET
#define LANECTRL1r_TX1G_MODE_LN3f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN3f_SET
#define LANECTRL1r_TX1G_MODE_LN2f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN2f_GET
#define LANECTRL1r_TX1G_MODE_LN2f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN2f_SET
#define LANECTRL1r_TX1G_MODE_LN1f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN1f_GET
#define LANECTRL1r_TX1G_MODE_LN1f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN1f_SET
#define LANECTRL1r_TX1G_MODE_LN0f_GET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN0f_GET
#define LANECTRL1r_TX1G_MODE_LN0f_SET BCMI_HYPERLITE_XGXS_LANECTRL1r_TX1G_MODE_LN0f_SET
#define READ_LANECTRL1r BCMI_HYPERLITE_XGXS_READ_LANECTRL1r
#define WRITE_LANECTRL1r BCMI_HYPERLITE_XGXS_WRITE_LANECTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANECTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANECTRL2
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8017
 * DESC:     Lane control 2 register
 * SIZE:     32
 * FIELDS:
 *     GLOOP1G          
 *     RLOOP1G          
 *     EDEN1G           
 *     CDET_EN1G        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANECTRL2r (0x00001017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANECTRL2r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANECTRL2r_s {
	uint32_t v[1];
	uint32_t lanectrl2[1];
	uint32_t _lanectrl2;
} BCMI_HYPERLITE_XGXS_LANECTRL2r_t;

#define BCMI_HYPERLITE_XGXS_LANECTRL2r_CLR(r) (r).lanectrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_SET(r,d) (r).lanectrl2[0] = d
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_GET(r) (r).lanectrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_CDET_EN1Gf_GET(r) ((((r).lanectrl2[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_CDET_EN1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_EDEN1Gf_GET(r) ((((r).lanectrl2[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_EDEN1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_RLOOP1Gf_GET(r) ((((r).lanectrl2[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_RLOOP1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_GLOOP1Gf_GET(r) (((r).lanectrl2[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL2r_GLOOP1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANECTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANECTRL2r,(_r._lanectrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_LANECTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANECTRL2r,(_r._lanectrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL2r BCMI_HYPERLITE_XGXS_LANECTRL2r
#define LANECTRL2r_SIZE BCMI_HYPERLITE_XGXS_LANECTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_LANECTRL2r_t LANECTRL2r_t;
#define LANECTRL2r_CLR BCMI_HYPERLITE_XGXS_LANECTRL2r_CLR
#define LANECTRL2r_SET BCMI_HYPERLITE_XGXS_LANECTRL2r_SET
#define LANECTRL2r_GET BCMI_HYPERLITE_XGXS_LANECTRL2r_GET
#define LANECTRL2r_CDET_EN1Gf_GET BCMI_HYPERLITE_XGXS_LANECTRL2r_CDET_EN1Gf_GET
#define LANECTRL2r_CDET_EN1Gf_SET BCMI_HYPERLITE_XGXS_LANECTRL2r_CDET_EN1Gf_SET
#define LANECTRL2r_EDEN1Gf_GET BCMI_HYPERLITE_XGXS_LANECTRL2r_EDEN1Gf_GET
#define LANECTRL2r_EDEN1Gf_SET BCMI_HYPERLITE_XGXS_LANECTRL2r_EDEN1Gf_SET
#define LANECTRL2r_RLOOP1Gf_GET BCMI_HYPERLITE_XGXS_LANECTRL2r_RLOOP1Gf_GET
#define LANECTRL2r_RLOOP1Gf_SET BCMI_HYPERLITE_XGXS_LANECTRL2r_RLOOP1Gf_SET
#define LANECTRL2r_GLOOP1Gf_GET BCMI_HYPERLITE_XGXS_LANECTRL2r_GLOOP1Gf_GET
#define LANECTRL2r_GLOOP1Gf_SET BCMI_HYPERLITE_XGXS_LANECTRL2r_GLOOP1Gf_SET
#define READ_LANECTRL2r BCMI_HYPERLITE_XGXS_READ_LANECTRL2r
#define WRITE_LANECTRL2r BCMI_HYPERLITE_XGXS_WRITE_LANECTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANECTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANECTRL3
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8018
 * DESC:     Lane control 3 register
 * SIZE:     32
 * FIELDS:
 *     PWRDN_RX         
 *     PWRDN_TX         
 *     PWRDWN_PLL       
 *     PWRDWN10G_PLL_DIS 
 *     LOCK_REF_EN      
 *     PWRDWN_FORCE     
 *     LOCK_REF         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANECTRL3r (0x00001018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANECTRL3r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANECTRL3r_s {
	uint32_t v[1];
	uint32_t lanectrl3[1];
	uint32_t _lanectrl3;
} BCMI_HYPERLITE_XGXS_LANECTRL3r_t;

#define BCMI_HYPERLITE_XGXS_LANECTRL3r_CLR(r) (r).lanectrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_SET(r,d) (r).lanectrl3[0] = d
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_GET(r) (r).lanectrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REFf_GET(r) ((((r).lanectrl3[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REFf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_FORCEf_GET(r) ((((r).lanectrl3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_FORCEf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REF_ENf_GET(r) ((((r).lanectrl3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REF_ENf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN10G_PLL_DISf_GET(r) ((((r).lanectrl3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN10G_PLL_DISf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_PLLf_GET(r) ((((r).lanectrl3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_PLLf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_TXf_GET(r) ((((r).lanectrl3[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_TXf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_RXf_GET(r) (((r).lanectrl3[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_RXf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANECTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANECTRL3r,(_r._lanectrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_LANECTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANECTRL3r,(_r._lanectrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL3r BCMI_HYPERLITE_XGXS_LANECTRL3r
#define LANECTRL3r_SIZE BCMI_HYPERLITE_XGXS_LANECTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_LANECTRL3r_t LANECTRL3r_t;
#define LANECTRL3r_CLR BCMI_HYPERLITE_XGXS_LANECTRL3r_CLR
#define LANECTRL3r_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_SET
#define LANECTRL3r_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_GET
#define LANECTRL3r_LOCK_REFf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REFf_GET
#define LANECTRL3r_LOCK_REFf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REFf_SET
#define LANECTRL3r_PWRDWN_FORCEf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_FORCEf_GET
#define LANECTRL3r_PWRDWN_FORCEf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_FORCEf_SET
#define LANECTRL3r_LOCK_REF_ENf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REF_ENf_GET
#define LANECTRL3r_LOCK_REF_ENf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_LOCK_REF_ENf_SET
#define LANECTRL3r_PWRDWN10G_PLL_DISf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN10G_PLL_DISf_GET
#define LANECTRL3r_PWRDWN10G_PLL_DISf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN10G_PLL_DISf_SET
#define LANECTRL3r_PWRDWN_PLLf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_PLLf_GET
#define LANECTRL3r_PWRDWN_PLLf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDWN_PLLf_SET
#define LANECTRL3r_PWRDN_TXf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_TXf_GET
#define LANECTRL3r_PWRDN_TXf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_TXf_SET
#define LANECTRL3r_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_RXf_GET
#define LANECTRL3r_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_LANECTRL3r_PWRDN_RXf_SET
#define READ_LANECTRL3r BCMI_HYPERLITE_XGXS_READ_LANECTRL3r
#define WRITE_LANECTRL3r BCMI_HYPERLITE_XGXS_WRITE_LANECTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANECTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANEPRBS
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x8019
 * DESC:     Lane PRBS control register
 * SIZE:     32
 * FIELDS:
 *     PRBS_ORDER0      
 *     PRBS_INV0        
 *     PRBS_EN0         
 *     PRBS_ORDER1      
 *     PRBS_INV1        
 *     PRBS_EN1         
 *     PRBS_ORDER2      
 *     PRBS_INV2        
 *     PRBS_EN2         
 *     PRBS_ORDER3      
 *     PRBS_INV3        
 *     PRBS_EN3         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANEPRBSr (0x00001019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANEPRBSr_SIZE 4

/*
 * This structure should be used to declare and program LANEPRBS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANEPRBSr_s {
	uint32_t v[1];
	uint32_t laneprbs[1];
	uint32_t _laneprbs;
} BCMI_HYPERLITE_XGXS_LANEPRBSr_t;

#define BCMI_HYPERLITE_XGXS_LANEPRBSr_CLR(r) (r).laneprbs[0] = 0
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_SET(r,d) (r).laneprbs[0] = d
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_GET(r) (r).laneprbs[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN3f_GET(r) ((((r).laneprbs[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV3f_GET(r) ((((r).laneprbs[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER3f_GET(r) ((((r).laneprbs[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN2f_GET(r) ((((r).laneprbs[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV2f_GET(r) ((((r).laneprbs[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER2f_GET(r) ((((r).laneprbs[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN1f_GET(r) ((((r).laneprbs[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV1f_GET(r) ((((r).laneprbs[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER1f_GET(r) ((((r).laneprbs[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN0f_GET(r) ((((r).laneprbs[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV0f_GET(r) ((((r).laneprbs[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER0f_GET(r) (((r).laneprbs[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access LANEPRBS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANEPRBSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANEPRBSr,(_r._laneprbs))
#define BCMI_HYPERLITE_XGXS_WRITE_LANEPRBSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANEPRBSr,(_r._laneprbs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANEPRBSr BCMI_HYPERLITE_XGXS_LANEPRBSr
#define LANEPRBSr_SIZE BCMI_HYPERLITE_XGXS_LANEPRBSr_SIZE
typedef BCMI_HYPERLITE_XGXS_LANEPRBSr_t LANEPRBSr_t;
#define LANEPRBSr_CLR BCMI_HYPERLITE_XGXS_LANEPRBSr_CLR
#define LANEPRBSr_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_SET
#define LANEPRBSr_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_GET
#define LANEPRBSr_PRBS_EN3f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN3f_GET
#define LANEPRBSr_PRBS_EN3f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN3f_SET
#define LANEPRBSr_PRBS_INV3f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV3f_GET
#define LANEPRBSr_PRBS_INV3f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV3f_SET
#define LANEPRBSr_PRBS_ORDER3f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER3f_GET
#define LANEPRBSr_PRBS_ORDER3f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER3f_SET
#define LANEPRBSr_PRBS_EN2f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN2f_GET
#define LANEPRBSr_PRBS_EN2f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN2f_SET
#define LANEPRBSr_PRBS_INV2f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV2f_GET
#define LANEPRBSr_PRBS_INV2f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV2f_SET
#define LANEPRBSr_PRBS_ORDER2f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER2f_GET
#define LANEPRBSr_PRBS_ORDER2f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER2f_SET
#define LANEPRBSr_PRBS_EN1f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN1f_GET
#define LANEPRBSr_PRBS_EN1f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN1f_SET
#define LANEPRBSr_PRBS_INV1f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV1f_GET
#define LANEPRBSr_PRBS_INV1f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV1f_SET
#define LANEPRBSr_PRBS_ORDER1f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER1f_GET
#define LANEPRBSr_PRBS_ORDER1f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER1f_SET
#define LANEPRBSr_PRBS_EN0f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN0f_GET
#define LANEPRBSr_PRBS_EN0f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_EN0f_SET
#define LANEPRBSr_PRBS_INV0f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV0f_GET
#define LANEPRBSr_PRBS_INV0f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_INV0f_SET
#define LANEPRBSr_PRBS_ORDER0f_GET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER0f_GET
#define LANEPRBSr_PRBS_ORDER0f_SET BCMI_HYPERLITE_XGXS_LANEPRBSr_PRBS_ORDER0f_SET
#define READ_LANEPRBSr BCMI_HYPERLITE_XGXS_READ_LANEPRBSr
#define WRITE_LANEPRBSr BCMI_HYPERLITE_XGXS_WRITE_LANEPRBSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANEPRBSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANETEST
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x801a
 * DESC:     Lane test control register
 * SIZE:     32
 * FIELDS:
 *     MODE_10G_SNOOP   
 *     RX_SNOOP_EN      
 *     LFCK_BYPASS      
 *     PLL_LOCK_RSTB_R  
 *     RXSEQSTART_EXT_DIS 
 *     PWRDWN_CLKS_EN   
 *     PWRDN_SAFE_DIS   
 *     PWRDN_EXT_DIS    
 *     INBANDMDIORXRSTEN 
 *     TMUX_SEL         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANETESTr (0x0000101a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANETESTr_SIZE 4

/*
 * This structure should be used to declare and program LANETEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANETESTr_s {
	uint32_t v[1];
	uint32_t lanetest[1];
	uint32_t _lanetest;
} BCMI_HYPERLITE_XGXS_LANETESTr_t;

#define BCMI_HYPERLITE_XGXS_LANETESTr_CLR(r) (r).lanetest[0] = 0
#define BCMI_HYPERLITE_XGXS_LANETESTr_SET(r,d) (r).lanetest[0] = d
#define BCMI_HYPERLITE_XGXS_LANETESTr_GET(r) (r).lanetest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANETESTr_TMUX_SELf_GET(r) ((((r).lanetest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANETESTr_TMUX_SELf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_LANETESTr_INBANDMDIORXRSTENf_GET(r) ((((r).lanetest[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_INBANDMDIORXRSTENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_EXT_DISf_GET(r) ((((r).lanetest[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_EXT_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_SAFE_DISf_GET(r) ((((r).lanetest[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_SAFE_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDWN_CLKS_ENf_GET(r) ((((r).lanetest[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_PWRDWN_CLKS_ENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_LANETESTr_RXSEQSTART_EXT_DISf_GET(r) ((((r).lanetest[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_RXSEQSTART_EXT_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_LANETESTr_PLL_LOCK_RSTB_Rf_GET(r) ((((r).lanetest[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_PLL_LOCK_RSTB_Rf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_LANETESTr_LFCK_BYPASSf_GET(r) ((((r).lanetest[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_LFCK_BYPASSf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_LANETESTr_RX_SNOOP_ENf_GET(r) ((((r).lanetest[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANETESTr_RX_SNOOP_ENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_LANETESTr_MODE_10G_SNOOPf_GET(r) (((r).lanetest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANETESTr_MODE_10G_SNOOPf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANETEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANETESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANETESTr,(_r._lanetest))
#define BCMI_HYPERLITE_XGXS_WRITE_LANETESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANETESTr,(_r._lanetest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANETESTr BCMI_HYPERLITE_XGXS_LANETESTr
#define LANETESTr_SIZE BCMI_HYPERLITE_XGXS_LANETESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_LANETESTr_t LANETESTr_t;
#define LANETESTr_CLR BCMI_HYPERLITE_XGXS_LANETESTr_CLR
#define LANETESTr_SET BCMI_HYPERLITE_XGXS_LANETESTr_SET
#define LANETESTr_GET BCMI_HYPERLITE_XGXS_LANETESTr_GET
#define LANETESTr_TMUX_SELf_GET BCMI_HYPERLITE_XGXS_LANETESTr_TMUX_SELf_GET
#define LANETESTr_TMUX_SELf_SET BCMI_HYPERLITE_XGXS_LANETESTr_TMUX_SELf_SET
#define LANETESTr_INBANDMDIORXRSTENf_GET BCMI_HYPERLITE_XGXS_LANETESTr_INBANDMDIORXRSTENf_GET
#define LANETESTr_INBANDMDIORXRSTENf_SET BCMI_HYPERLITE_XGXS_LANETESTr_INBANDMDIORXRSTENf_SET
#define LANETESTr_PWRDN_EXT_DISf_GET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_EXT_DISf_GET
#define LANETESTr_PWRDN_EXT_DISf_SET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_EXT_DISf_SET
#define LANETESTr_PWRDN_SAFE_DISf_GET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_SAFE_DISf_GET
#define LANETESTr_PWRDN_SAFE_DISf_SET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDN_SAFE_DISf_SET
#define LANETESTr_PWRDWN_CLKS_ENf_GET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDWN_CLKS_ENf_GET
#define LANETESTr_PWRDWN_CLKS_ENf_SET BCMI_HYPERLITE_XGXS_LANETESTr_PWRDWN_CLKS_ENf_SET
#define LANETESTr_RXSEQSTART_EXT_DISf_GET BCMI_HYPERLITE_XGXS_LANETESTr_RXSEQSTART_EXT_DISf_GET
#define LANETESTr_RXSEQSTART_EXT_DISf_SET BCMI_HYPERLITE_XGXS_LANETESTr_RXSEQSTART_EXT_DISf_SET
#define LANETESTr_PLL_LOCK_RSTB_Rf_GET BCMI_HYPERLITE_XGXS_LANETESTr_PLL_LOCK_RSTB_Rf_GET
#define LANETESTr_PLL_LOCK_RSTB_Rf_SET BCMI_HYPERLITE_XGXS_LANETESTr_PLL_LOCK_RSTB_Rf_SET
#define LANETESTr_LFCK_BYPASSf_GET BCMI_HYPERLITE_XGXS_LANETESTr_LFCK_BYPASSf_GET
#define LANETESTr_LFCK_BYPASSf_SET BCMI_HYPERLITE_XGXS_LANETESTr_LFCK_BYPASSf_SET
#define LANETESTr_RX_SNOOP_ENf_GET BCMI_HYPERLITE_XGXS_LANETESTr_RX_SNOOP_ENf_GET
#define LANETESTr_RX_SNOOP_ENf_SET BCMI_HYPERLITE_XGXS_LANETESTr_RX_SNOOP_ENf_SET
#define LANETESTr_MODE_10G_SNOOPf_GET BCMI_HYPERLITE_XGXS_LANETESTr_MODE_10G_SNOOPf_GET
#define LANETESTr_MODE_10G_SNOOPf_SET BCMI_HYPERLITE_XGXS_LANETESTr_MODE_10G_SNOOPf_SET
#define READ_LANETESTr BCMI_HYPERLITE_XGXS_READ_LANETESTr
#define WRITE_LANETESTr BCMI_HYPERLITE_XGXS_WRITE_LANETESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANETESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LSSREVNT
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x801b
 * DESC:     LSS, ||Q|| column count register
 * SIZE:     32
 * FIELDS:
 *     TXACTIVE_TXACTIVE 
 *     LSSREVENT_LSS_REVENT 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LSSREVNTr (0x0000101b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LSSREVNTr_SIZE 4

/*
 * This structure should be used to declare and program LSSREVNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LSSREVNTr_s {
	uint32_t v[1];
	uint32_t lssrevnt[1];
	uint32_t _lssrevnt;
} BCMI_HYPERLITE_XGXS_LSSREVNTr_t;

#define BCMI_HYPERLITE_XGXS_LSSREVNTr_CLR(r) (r).lssrevnt[0] = 0
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_SET(r,d) (r).lssrevnt[0] = d
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_GET(r) (r).lssrevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_TXACTIVE_TXACTIVEf_GET(r) (((r).lssrevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_TXACTIVE_TXACTIVEf_SET(r,f) (r).lssrevnt[0]=(((r).lssrevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_LSSREVENT_LSS_REVENTf_GET(r) (((r).lssrevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LSSREVNTr_LSSREVENT_LSS_REVENTf_SET(r,f) (r).lssrevnt[0]=(((r).lssrevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LSSREVNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LSSREVNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LSSREVNTr,(_r._lssrevnt))
#define BCMI_HYPERLITE_XGXS_WRITE_LSSREVNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LSSREVNTr,(_r._lssrevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSREVNTr BCMI_HYPERLITE_XGXS_LSSREVNTr
#define LSSREVNTr_SIZE BCMI_HYPERLITE_XGXS_LSSREVNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_LSSREVNTr_t LSSREVNTr_t;
#define LSSREVNTr_CLR BCMI_HYPERLITE_XGXS_LSSREVNTr_CLR
#define LSSREVNTr_SET BCMI_HYPERLITE_XGXS_LSSREVNTr_SET
#define LSSREVNTr_GET BCMI_HYPERLITE_XGXS_LSSREVNTr_GET
#define LSSREVNTr_TXACTIVE_TXACTIVEf_GET BCMI_HYPERLITE_XGXS_LSSREVNTr_TXACTIVE_TXACTIVEf_GET
#define LSSREVNTr_TXACTIVE_TXACTIVEf_SET BCMI_HYPERLITE_XGXS_LSSREVNTr_TXACTIVE_TXACTIVEf_SET
#define LSSREVNTr_LSSREVENT_LSS_REVENTf_GET BCMI_HYPERLITE_XGXS_LSSREVNTr_LSSREVENT_LSS_REVENTf_GET
#define LSSREVNTr_LSSREVENT_LSS_REVENTf_SET BCMI_HYPERLITE_XGXS_LSSREVNTr_LSSREVENT_LSS_REVENTf_SET
#define READ_LSSREVNTr BCMI_HYPERLITE_XGXS_READ_LSSREVNTr
#define WRITE_LSSREVNTr BCMI_HYPERLITE_XGXS_WRITE_LSSREVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LSSREVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSKEVNT
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x801c
 * DESC:     Lane deskew event count register
 * SIZE:     32
 * FIELDS:
 *     RXACTIVE_RXACTIVE 
 *     DESKWEVENT_DESKEWEVENT 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSKEVNTr (0x0000101c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSKEVNTr_SIZE 4

/*
 * This structure should be used to declare and program DSKEVNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSKEVNTr_s {
	uint32_t v[1];
	uint32_t dskevnt[1];
	uint32_t _dskevnt;
} BCMI_HYPERLITE_XGXS_DSKEVNTr_t;

#define BCMI_HYPERLITE_XGXS_DSKEVNTr_CLR(r) (r).dskevnt[0] = 0
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_SET(r,d) (r).dskevnt[0] = d
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_GET(r) (r).dskevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_RXACTIVE_RXACTIVEf_GET(r) (((r).dskevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_RXACTIVE_RXACTIVEf_SET(r,f) (r).dskevnt[0]=(((r).dskevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_DESKWEVENT_DESKEWEVENTf_GET(r) (((r).dskevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSKEVNTr_DESKWEVENT_DESKEWEVENTf_SET(r,f) (r).dskevnt[0]=(((r).dskevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSKEVNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSKEVNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSKEVNTr,(_r._dskevnt))
#define BCMI_HYPERLITE_XGXS_WRITE_DSKEVNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSKEVNTr,(_r._dskevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSKEVNTr BCMI_HYPERLITE_XGXS_DSKEVNTr
#define DSKEVNTr_SIZE BCMI_HYPERLITE_XGXS_DSKEVNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSKEVNTr_t DSKEVNTr_t;
#define DSKEVNTr_CLR BCMI_HYPERLITE_XGXS_DSKEVNTr_CLR
#define DSKEVNTr_SET BCMI_HYPERLITE_XGXS_DSKEVNTr_SET
#define DSKEVNTr_GET BCMI_HYPERLITE_XGXS_DSKEVNTr_GET
#define DSKEVNTr_RXACTIVE_RXACTIVEf_GET BCMI_HYPERLITE_XGXS_DSKEVNTr_RXACTIVE_RXACTIVEf_GET
#define DSKEVNTr_RXACTIVE_RXACTIVEf_SET BCMI_HYPERLITE_XGXS_DSKEVNTr_RXACTIVE_RXACTIVEf_SET
#define DSKEVNTr_DESKWEVENT_DESKEWEVENTf_GET BCMI_HYPERLITE_XGXS_DSKEVNTr_DESKWEVENT_DESKEWEVENTf_GET
#define DSKEVNTr_DESKWEVENT_DESKEWEVENTf_SET BCMI_HYPERLITE_XGXS_DSKEVNTr_DESKWEVENT_DESKEWEVENTf_SET
#define READ_DSKEVNTr BCMI_HYPERLITE_XGXS_READ_DSKEVNTr
#define WRITE_DSKEVNTr BCMI_HYPERLITE_XGXS_WRITE_DSKEVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSKEVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AERREVNT
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x801d
 * DESC:     Bad ||A|| column count register
 * SIZE:     32
 * FIELDS:
 *     AERREVNT         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AERREVNTr (0x0000101d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AERREVNTr_SIZE 4

/*
 * This structure should be used to declare and program AERREVNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AERREVNTr_s {
	uint32_t v[1];
	uint32_t aerrevnt[1];
	uint32_t _aerrevnt;
} BCMI_HYPERLITE_XGXS_AERREVNTr_t;

#define BCMI_HYPERLITE_XGXS_AERREVNTr_CLR(r) (r).aerrevnt[0] = 0
#define BCMI_HYPERLITE_XGXS_AERREVNTr_SET(r,d) (r).aerrevnt[0] = d
#define BCMI_HYPERLITE_XGXS_AERREVNTr_GET(r) (r).aerrevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AERREVNTr_AERREVNTf_GET(r) (((r).aerrevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AERREVNTr_AERREVNTf_SET(r,f) (r).aerrevnt[0]=(((r).aerrevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AERREVNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AERREVNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AERREVNTr,(_r._aerrevnt))
#define BCMI_HYPERLITE_XGXS_WRITE_AERREVNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AERREVNTr,(_r._aerrevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AERREVNTr BCMI_HYPERLITE_XGXS_AERREVNTr
#define AERREVNTr_SIZE BCMI_HYPERLITE_XGXS_AERREVNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_AERREVNTr_t AERREVNTr_t;
#define AERREVNTr_CLR BCMI_HYPERLITE_XGXS_AERREVNTr_CLR
#define AERREVNTr_SET BCMI_HYPERLITE_XGXS_AERREVNTr_SET
#define AERREVNTr_GET BCMI_HYPERLITE_XGXS_AERREVNTr_GET
#define AERREVNTr_AERREVNTf_GET BCMI_HYPERLITE_XGXS_AERREVNTr_AERREVNTf_GET
#define AERREVNTr_AERREVNTf_SET BCMI_HYPERLITE_XGXS_AERREVNTr_AERREVNTf_SET
#define READ_AERREVNTr BCMI_HYPERLITE_XGXS_READ_AERREVNTr
#define WRITE_AERREVNTr BCMI_HYPERLITE_XGXS_WRITE_AERREVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AERREVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CKCMPEVNT
 * BLOCKS:   XGXSBLK1
 * REGADDR:  0x801e
 * DESC:     Clock compensation event count register
 * SIZE:     32
 * FIELDS:
 *     CKCMPEVNT        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr (0x0000101e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_SIZE 4

/*
 * This structure should be used to declare and program CKCMPEVNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CKCMPEVNTr_s {
	uint32_t v[1];
	uint32_t ckcmpevnt[1];
	uint32_t _ckcmpevnt;
} BCMI_HYPERLITE_XGXS_CKCMPEVNTr_t;

#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CLR(r) (r).ckcmpevnt[0] = 0
#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_SET(r,d) (r).ckcmpevnt[0] = d
#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_GET(r) (r).ckcmpevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CKCMPEVNTf_GET(r) (((r).ckcmpevnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CKCMPEVNTf_SET(r,f) (r).ckcmpevnt[0]=(((r).ckcmpevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CKCMPEVNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CKCMPEVNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CKCMPEVNTr,(_r._ckcmpevnt))
#define BCMI_HYPERLITE_XGXS_WRITE_CKCMPEVNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CKCMPEVNTr,(_r._ckcmpevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CKCMPEVNTr BCMI_HYPERLITE_XGXS_CKCMPEVNTr
#define CKCMPEVNTr_SIZE BCMI_HYPERLITE_XGXS_CKCMPEVNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_CKCMPEVNTr_t CKCMPEVNTr_t;
#define CKCMPEVNTr_CLR BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CLR
#define CKCMPEVNTr_SET BCMI_HYPERLITE_XGXS_CKCMPEVNTr_SET
#define CKCMPEVNTr_GET BCMI_HYPERLITE_XGXS_CKCMPEVNTr_GET
#define CKCMPEVNTr_CKCMPEVNTf_GET BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CKCMPEVNTf_GET
#define CKCMPEVNTr_CKCMPEVNTf_SET BCMI_HYPERLITE_XGXS_CKCMPEVNTr_CKCMPEVNTf_SET
#define READ_CKCMPEVNTr BCMI_HYPERLITE_XGXS_READ_CKCMPEVNTr
#define WRITE_CKCMPEVNTr BCMI_HYPERLITE_XGXS_WRITE_CKCMPEVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CKCMPEVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTCTRL
 * BLOCKS:   TXBERT
 * REGADDR:  0x8020
 * DESC:     Tx Bert control register
 * SIZE:     32
 * FIELDS:
 *     COUNT_CLR        
 *     COUNTRST_DIS     
 *     FIFO_RST         
 *     TXCK_OUT_FORCE   
 *     CJRMP_EN         
 *     CRPAT_EN         
 *     CJPAT_EN         
 *     SKEW_EN          
 *     Q_LINK_EN        
 *     Q_EN             
 *     RNDM_EN          
 *     RAMP_EN          
 *     PRBS_ORDER       
 *     SEED_LD          
 *     PKT_EN           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr (0x00002010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTCTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTCTRLr_s {
	uint32_t v[1];
	uint32_t txbertctrl[1];
	uint32_t _txbertctrl;
} BCMI_HYPERLITE_XGXS_TXBERTCTRLr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CLR(r) (r).txbertctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SET(r,d) (r).txbertctrl[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_GET(r) (r).txbertctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PKT_ENf_GET(r) ((((r).txbertctrl[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PKT_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SEED_LDf_GET(r) ((((r).txbertctrl[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SEED_LDf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PRBS_ORDERf_GET(r) ((((r).txbertctrl[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PRBS_ORDERf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RAMP_ENf_GET(r) ((((r).txbertctrl[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RAMP_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RNDM_ENf_GET(r) ((((r).txbertctrl[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RNDM_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_ENf_GET(r) ((((r).txbertctrl[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_LINK_ENf_GET(r) ((((r).txbertctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_LINK_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SKEW_ENf_GET(r) ((((r).txbertctrl[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SKEW_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJPAT_ENf_GET(r) ((((r).txbertctrl[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJPAT_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CRPAT_ENf_GET(r) ((((r).txbertctrl[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CRPAT_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJRMP_ENf_GET(r) ((((r).txbertctrl[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJRMP_ENf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_TXCK_OUT_FORCEf_GET(r) ((((r).txbertctrl[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_TXCK_OUT_FORCEf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_FIFO_RSTf_GET(r) ((((r).txbertctrl[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_FIFO_RSTf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNTRST_DISf_GET(r) ((((r).txbertctrl[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNTRST_DISf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNT_CLRf_GET(r) (((r).txbertctrl[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNT_CLRf_SET(r,f) (r).txbertctrl[0]=(((r).txbertctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXBERTCTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTCTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTCTRLr,(_r._txbertctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTCTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTCTRLr,(_r._txbertctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTCTRLr BCMI_HYPERLITE_XGXS_TXBERTCTRLr
#define TXBERTCTRLr_SIZE BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTCTRLr_t TXBERTCTRLr_t;
#define TXBERTCTRLr_CLR BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CLR
#define TXBERTCTRLr_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SET
#define TXBERTCTRLr_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_GET
#define TXBERTCTRLr_PKT_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PKT_ENf_GET
#define TXBERTCTRLr_PKT_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PKT_ENf_SET
#define TXBERTCTRLr_SEED_LDf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SEED_LDf_GET
#define TXBERTCTRLr_SEED_LDf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SEED_LDf_SET
#define TXBERTCTRLr_PRBS_ORDERf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PRBS_ORDERf_GET
#define TXBERTCTRLr_PRBS_ORDERf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_PRBS_ORDERf_SET
#define TXBERTCTRLr_RAMP_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RAMP_ENf_GET
#define TXBERTCTRLr_RAMP_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RAMP_ENf_SET
#define TXBERTCTRLr_RNDM_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RNDM_ENf_GET
#define TXBERTCTRLr_RNDM_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_RNDM_ENf_SET
#define TXBERTCTRLr_Q_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_ENf_GET
#define TXBERTCTRLr_Q_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_ENf_SET
#define TXBERTCTRLr_Q_LINK_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_LINK_ENf_GET
#define TXBERTCTRLr_Q_LINK_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_Q_LINK_ENf_SET
#define TXBERTCTRLr_SKEW_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SKEW_ENf_GET
#define TXBERTCTRLr_SKEW_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_SKEW_ENf_SET
#define TXBERTCTRLr_CJPAT_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJPAT_ENf_GET
#define TXBERTCTRLr_CJPAT_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJPAT_ENf_SET
#define TXBERTCTRLr_CRPAT_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CRPAT_ENf_GET
#define TXBERTCTRLr_CRPAT_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CRPAT_ENf_SET
#define TXBERTCTRLr_CJRMP_ENf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJRMP_ENf_GET
#define TXBERTCTRLr_CJRMP_ENf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_CJRMP_ENf_SET
#define TXBERTCTRLr_TXCK_OUT_FORCEf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_TXCK_OUT_FORCEf_GET
#define TXBERTCTRLr_TXCK_OUT_FORCEf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_TXCK_OUT_FORCEf_SET
#define TXBERTCTRLr_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_FIFO_RSTf_GET
#define TXBERTCTRLr_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_FIFO_RSTf_SET
#define TXBERTCTRLr_COUNTRST_DISf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNTRST_DISf_GET
#define TXBERTCTRLr_COUNTRST_DISf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNTRST_DISf_SET
#define TXBERTCTRLr_COUNT_CLRf_GET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNT_CLRf_GET
#define TXBERTCTRLr_COUNT_CLRf_SET BCMI_HYPERLITE_XGXS_TXBERTCTRLr_COUNT_CLRf_SET
#define READ_TXBERTCTRLr BCMI_HYPERLITE_XGXS_READ_TXBERTCTRLr
#define WRITE_TXBERTCTRLr BCMI_HYPERLITE_XGXS_WRITE_TXBERTCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTSOPEOP
 * BLOCKS:   TXBERT
 * REGADDR:  0x8021
 * DESC:     Tx Bert SOP, EOP definition register
 * SIZE:     32
 * FIELDS:
 *     EOP              
 *     SOP              
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr (0x00002011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSOPEOP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_s {
	uint32_t v[1];
	uint32_t txbertsopeop[1];
	uint32_t _txbertsopeop;
} BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_CLR(r) (r).txbertsopeop[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SET(r,d) (r).txbertsopeop[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_GET(r) (r).txbertsopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SOPf_GET(r) ((((r).txbertsopeop[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SOPf_SET(r,f) (r).txbertsopeop[0]=(((r).txbertsopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_EOPf_GET(r) (((r).txbertsopeop[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_EOPf_SET(r,f) (r).txbertsopeop[0]=(((r).txbertsopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTSOPEOP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTSOPEOPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr,(_r._txbertsopeop))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTSOPEOPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr,(_r._txbertsopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSOPEOPr BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr
#define TXBERTSOPEOPr_SIZE BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_t TXBERTSOPEOPr_t;
#define TXBERTSOPEOPr_CLR BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_CLR
#define TXBERTSOPEOPr_SET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SET
#define TXBERTSOPEOPr_GET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_GET
#define TXBERTSOPEOPr_SOPf_GET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SOPf_GET
#define TXBERTSOPEOPr_SOPf_SET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_SOPf_SET
#define TXBERTSOPEOPr_EOPf_GET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_EOPf_GET
#define TXBERTSOPEOPr_EOPf_SET BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr_EOPf_SET
#define READ_TXBERTSOPEOPr BCMI_HYPERLITE_XGXS_READ_TXBERTSOPEOPr
#define WRITE_TXBERTSOPEOPr BCMI_HYPERLITE_XGXS_WRITE_TXBERTSOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTSOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTSIZE0
 * BLOCKS:   TXBERT
 * REGADDR:  0x8022
 * DESC:     Packet size configuration 0 register
 * SIZE:     32
 * FIELDS:
 *     PKT_SIZE         
 *     IPG_SIZE         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r (0x00002012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_s {
	uint32_t v[1];
	uint32_t txbertsize0[1];
	uint32_t _txbertsize0;
} BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_t;

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_CLR(r) (r).txbertsize0[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_SET(r,d) (r).txbertsize0[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_GET(r) (r).txbertsize0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_IPG_SIZEf_GET(r) ((((r).txbertsize0[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_IPG_SIZEf_SET(r,f) (r).txbertsize0[0]=(((r).txbertsize0[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_PKT_SIZEf_GET(r) (((r).txbertsize0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_PKT_SIZEf_SET(r,f) (r).txbertsize0[0]=(((r).txbertsize0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXBERTSIZE0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE0r,(_r._txbertsize0))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE0r,(_r._txbertsize0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE0r BCMI_HYPERLITE_XGXS_TXBERTSIZE0r
#define TXBERTSIZE0r_SIZE BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_t TXBERTSIZE0r_t;
#define TXBERTSIZE0r_CLR BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_CLR
#define TXBERTSIZE0r_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_SET
#define TXBERTSIZE0r_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_GET
#define TXBERTSIZE0r_IPG_SIZEf_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_IPG_SIZEf_GET
#define TXBERTSIZE0r_IPG_SIZEf_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_IPG_SIZEf_SET
#define TXBERTSIZE0r_PKT_SIZEf_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_PKT_SIZEf_GET
#define TXBERTSIZE0r_PKT_SIZEf_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE0r_PKT_SIZEf_SET
#define READ_TXBERTSIZE0r BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE0r
#define WRITE_TXBERTSIZE0r BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTSIZE0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTSIZE1
 * BLOCKS:   TXBERT
 * REGADDR:  0x8023
 * DESC:     Packet size configuration 1 register
 * SIZE:     32
 * FIELDS:
 *     PKTSTPCNT        
 *     AWIN_SIZE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r (0x00002013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_s {
	uint32_t v[1];
	uint32_t txbertsize1[1];
	uint32_t _txbertsize1;
} BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_t;

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_CLR(r) (r).txbertsize1[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_SET(r,d) (r).txbertsize1[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_GET(r) (r).txbertsize1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_AWIN_SIZEf_GET(r) ((((r).txbertsize1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_AWIN_SIZEf_SET(r,f) (r).txbertsize1[0]=(((r).txbertsize1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_PKTSTPCNTf_GET(r) (((r).txbertsize1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_PKTSTPCNTf_SET(r,f) (r).txbertsize1[0]=(((r).txbertsize1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXBERTSIZE1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE1r,(_r._txbertsize1))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE1r,(_r._txbertsize1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE1r BCMI_HYPERLITE_XGXS_TXBERTSIZE1r
#define TXBERTSIZE1r_SIZE BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_t TXBERTSIZE1r_t;
#define TXBERTSIZE1r_CLR BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_CLR
#define TXBERTSIZE1r_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_SET
#define TXBERTSIZE1r_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_GET
#define TXBERTSIZE1r_AWIN_SIZEf_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_AWIN_SIZEf_GET
#define TXBERTSIZE1r_AWIN_SIZEf_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_AWIN_SIZEf_SET
#define TXBERTSIZE1r_PKTSTPCNTf_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_PKTSTPCNTf_GET
#define TXBERTSIZE1r_PKTSTPCNTf_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE1r_PKTSTPCNTf_SET
#define READ_TXBERTSIZE1r BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE1r
#define WRITE_TXBERTSIZE1r BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTSIZE1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTSIZE2
 * BLOCKS:   TXBERT
 * REGADDR:  0x8024
 * DESC:     Packet size configuration 2 register
 * SIZE:     32
 * FIELDS:
 *     SKEW0            
 *     SKEW1            
 *     SKEW2            
 *     SKEW3            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r (0x00002014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_s {
	uint32_t v[1];
	uint32_t txbertsize2[1];
	uint32_t _txbertsize2;
} BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_t;

#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_CLR(r) (r).txbertsize2[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SET(r,d) (r).txbertsize2[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_GET(r) (r).txbertsize2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW3f_GET(r) ((((r).txbertsize2[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW3f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW2f_GET(r) ((((r).txbertsize2[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW2f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW1f_GET(r) ((((r).txbertsize2[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW1f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW0f_GET(r) (((r).txbertsize2[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW0f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TXBERTSIZE2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE2r,(_r._txbertsize2))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTSIZE2r,(_r._txbertsize2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE2r BCMI_HYPERLITE_XGXS_TXBERTSIZE2r
#define TXBERTSIZE2r_SIZE BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_t TXBERTSIZE2r_t;
#define TXBERTSIZE2r_CLR BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_CLR
#define TXBERTSIZE2r_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SET
#define TXBERTSIZE2r_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_GET
#define TXBERTSIZE2r_SKEW3f_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW3f_GET
#define TXBERTSIZE2r_SKEW3f_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW3f_SET
#define TXBERTSIZE2r_SKEW2f_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW2f_GET
#define TXBERTSIZE2r_SKEW2f_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW2f_SET
#define TXBERTSIZE2r_SKEW1f_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW1f_GET
#define TXBERTSIZE2r_SKEW1f_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW1f_SET
#define TXBERTSIZE2r_SKEW0f_GET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW0f_GET
#define TXBERTSIZE2r_SKEW0f_SET BCMI_HYPERLITE_XGXS_TXBERTSIZE2r_SKEW0f_SET
#define READ_TXBERTSIZE2r BCMI_HYPERLITE_XGXS_READ_TXBERTSIZE2r
#define WRITE_TXBERTSIZE2r BCMI_HYPERLITE_XGXS_WRITE_TXBERTSIZE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTSIZE2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTIPG0
 * BLOCKS:   TXBERT
 * REGADDR:  0x8025
 * DESC:     IPG 0 definition register
 * SIZE:     32
 * FIELDS:
 *     IPG0             
 *     IPG1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r (0x00002015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTIPG0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTIPG0r_s {
	uint32_t v[1];
	uint32_t txbertipg0[1];
	uint32_t _txbertipg0;
} BCMI_HYPERLITE_XGXS_TXBERTIPG0r_t;

#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_CLR(r) (r).txbertipg0[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_SET(r,d) (r).txbertipg0[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_GET(r) (r).txbertipg0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG1f_GET(r) ((((r).txbertipg0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG1f_SET(r,f) (r).txbertipg0[0]=(((r).txbertipg0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG0f_GET(r) (((r).txbertipg0[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG0f_SET(r,f) (r).txbertipg0[0]=(((r).txbertipg0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTIPG0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTIPG0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTIPG0r,(_r._txbertipg0))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTIPG0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTIPG0r,(_r._txbertipg0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTIPG0r BCMI_HYPERLITE_XGXS_TXBERTIPG0r
#define TXBERTIPG0r_SIZE BCMI_HYPERLITE_XGXS_TXBERTIPG0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTIPG0r_t TXBERTIPG0r_t;
#define TXBERTIPG0r_CLR BCMI_HYPERLITE_XGXS_TXBERTIPG0r_CLR
#define TXBERTIPG0r_SET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_SET
#define TXBERTIPG0r_GET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_GET
#define TXBERTIPG0r_IPG1f_GET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG1f_GET
#define TXBERTIPG0r_IPG1f_SET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG1f_SET
#define TXBERTIPG0r_IPG0f_GET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG0f_GET
#define TXBERTIPG0r_IPG0f_SET BCMI_HYPERLITE_XGXS_TXBERTIPG0r_IPG0f_SET
#define READ_TXBERTIPG0r BCMI_HYPERLITE_XGXS_READ_TXBERTIPG0r
#define WRITE_TXBERTIPG0r BCMI_HYPERLITE_XGXS_WRITE_TXBERTIPG0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTIPG0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTIPG1
 * BLOCKS:   TXBERT
 * REGADDR:  0x8026
 * DESC:     IPG 1 definition register
 * SIZE:     32
 * FIELDS:
 *     IPG2             
 *     IPG3             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r (0x00002016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTIPG1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTIPG1r_s {
	uint32_t v[1];
	uint32_t txbertipg1[1];
	uint32_t _txbertipg1;
} BCMI_HYPERLITE_XGXS_TXBERTIPG1r_t;

#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_CLR(r) (r).txbertipg1[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_SET(r,d) (r).txbertipg1[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_GET(r) (r).txbertipg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG3f_GET(r) ((((r).txbertipg1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG3f_SET(r,f) (r).txbertipg1[0]=(((r).txbertipg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG2f_GET(r) (((r).txbertipg1[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG2f_SET(r,f) (r).txbertipg1[0]=(((r).txbertipg1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTIPG1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTIPG1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTIPG1r,(_r._txbertipg1))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTIPG1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTIPG1r,(_r._txbertipg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTIPG1r BCMI_HYPERLITE_XGXS_TXBERTIPG1r
#define TXBERTIPG1r_SIZE BCMI_HYPERLITE_XGXS_TXBERTIPG1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTIPG1r_t TXBERTIPG1r_t;
#define TXBERTIPG1r_CLR BCMI_HYPERLITE_XGXS_TXBERTIPG1r_CLR
#define TXBERTIPG1r_SET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_SET
#define TXBERTIPG1r_GET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_GET
#define TXBERTIPG1r_IPG3f_GET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG3f_GET
#define TXBERTIPG1r_IPG3f_SET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG3f_SET
#define TXBERTIPG1r_IPG2f_GET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG2f_GET
#define TXBERTIPG1r_IPG2f_SET BCMI_HYPERLITE_XGXS_TXBERTIPG1r_IPG2f_SET
#define READ_TXBERTIPG1r BCMI_HYPERLITE_XGXS_READ_TXBERTIPG1r
#define WRITE_TXBERTIPG1r BCMI_HYPERLITE_XGXS_WRITE_TXBERTIPG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTIPG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTBYTEU
 * BLOCKS:   TXBERT
 * REGADDR:  0x8027
 * DESC:     Transmitted byte count upper 16 bits register
 * SIZE:     32
 * FIELDS:
 *     BYTE_COUNT_HIGH  
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr (0x00002017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTBYTEU.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_s {
	uint32_t v[1];
	uint32_t txbertbyteu[1];
	uint32_t _txbertbyteu;
} BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_CLR(r) (r).txbertbyteu[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_SET(r,d) (r).txbertbyteu[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_GET(r) (r).txbertbyteu[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_BYTE_COUNT_HIGHf_GET(r) (((r).txbertbyteu[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_BYTE_COUNT_HIGHf_SET(r,f) (r).txbertbyteu[0]=(((r).txbertbyteu[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXBERTBYTEU.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTBYTEUr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTBYTEUr,(_r._txbertbyteu))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTBYTEUr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTBYTEUr,(_r._txbertbyteu))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTBYTEUr BCMI_HYPERLITE_XGXS_TXBERTBYTEUr
#define TXBERTBYTEUr_SIZE BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_t TXBERTBYTEUr_t;
#define TXBERTBYTEUr_CLR BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_CLR
#define TXBERTBYTEUr_SET BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_SET
#define TXBERTBYTEUr_GET BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_GET
#define TXBERTBYTEUr_BYTE_COUNT_HIGHf_GET BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_BYTE_COUNT_HIGHf_GET
#define TXBERTBYTEUr_BYTE_COUNT_HIGHf_SET BCMI_HYPERLITE_XGXS_TXBERTBYTEUr_BYTE_COUNT_HIGHf_SET
#define READ_TXBERTBYTEUr BCMI_HYPERLITE_XGXS_READ_TXBERTBYTEUr
#define WRITE_TXBERTBYTEUr BCMI_HYPERLITE_XGXS_WRITE_TXBERTBYTEUr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTBYTEUr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTBYTEL
 * BLOCKS:   TXBERT
 * REGADDR:  0x8028
 * DESC:     Transmitted byte count lower 16 bits register
 * SIZE:     32
 * FIELDS:
 *     BYTE_COUNT_LOW   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr (0x00002018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTBYTEL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTBYTELr_s {
	uint32_t v[1];
	uint32_t txbertbytel[1];
	uint32_t _txbertbytel;
} BCMI_HYPERLITE_XGXS_TXBERTBYTELr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_CLR(r) (r).txbertbytel[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_SET(r,d) (r).txbertbytel[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_GET(r) (r).txbertbytel[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_BYTE_COUNT_LOWf_GET(r) (((r).txbertbytel[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TXBERTBYTELr_BYTE_COUNT_LOWf_SET(r,f) (r).txbertbytel[0]=(((r).txbertbytel[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXBERTBYTEL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTBYTELr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTBYTELr,(_r._txbertbytel))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTBYTELr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTBYTELr,(_r._txbertbytel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTBYTELr BCMI_HYPERLITE_XGXS_TXBERTBYTELr
#define TXBERTBYTELr_SIZE BCMI_HYPERLITE_XGXS_TXBERTBYTELr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTBYTELr_t TXBERTBYTELr_t;
#define TXBERTBYTELr_CLR BCMI_HYPERLITE_XGXS_TXBERTBYTELr_CLR
#define TXBERTBYTELr_SET BCMI_HYPERLITE_XGXS_TXBERTBYTELr_SET
#define TXBERTBYTELr_GET BCMI_HYPERLITE_XGXS_TXBERTBYTELr_GET
#define TXBERTBYTELr_BYTE_COUNT_LOWf_GET BCMI_HYPERLITE_XGXS_TXBERTBYTELr_BYTE_COUNT_LOWf_GET
#define TXBERTBYTELr_BYTE_COUNT_LOWf_SET BCMI_HYPERLITE_XGXS_TXBERTBYTELr_BYTE_COUNT_LOWf_SET
#define READ_TXBERTBYTELr BCMI_HYPERLITE_XGXS_READ_TXBERTBYTELr
#define WRITE_TXBERTBYTELr BCMI_HYPERLITE_XGXS_WRITE_TXBERTBYTELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTBYTELr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTPACKETU
 * BLOCKS:   TXBERT
 * REGADDR:  0x8029
 * DESC:     Transmitted packet count upper 16 bits register
 * SIZE:     32
 * FIELDS:
 *     PKT_COUNT_HIGH   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr (0x00002019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTPACKETU.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_s {
	uint32_t v[1];
	uint32_t txbertpacketu[1];
	uint32_t _txbertpacketu;
} BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_CLR(r) (r).txbertpacketu[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_SET(r,d) (r).txbertpacketu[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_GET(r) (r).txbertpacketu[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_PKT_COUNT_HIGHf_GET(r) (((r).txbertpacketu[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_PKT_COUNT_HIGHf_SET(r,f) (r).txbertpacketu[0]=(((r).txbertpacketu[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXBERTPACKETU.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTPACKETUr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTPACKETUr,(_r._txbertpacketu))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTPACKETUr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTPACKETUr,(_r._txbertpacketu))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTPACKETUr BCMI_HYPERLITE_XGXS_TXBERTPACKETUr
#define TXBERTPACKETUr_SIZE BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_t TXBERTPACKETUr_t;
#define TXBERTPACKETUr_CLR BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_CLR
#define TXBERTPACKETUr_SET BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_SET
#define TXBERTPACKETUr_GET BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_GET
#define TXBERTPACKETUr_PKT_COUNT_HIGHf_GET BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_PKT_COUNT_HIGHf_GET
#define TXBERTPACKETUr_PKT_COUNT_HIGHf_SET BCMI_HYPERLITE_XGXS_TXBERTPACKETUr_PKT_COUNT_HIGHf_SET
#define READ_TXBERTPACKETUr BCMI_HYPERLITE_XGXS_READ_TXBERTPACKETUr
#define WRITE_TXBERTPACKETUr BCMI_HYPERLITE_XGXS_WRITE_TXBERTPACKETUr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTPACKETUr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXBERTPACKETL
 * BLOCKS:   TXBERT
 * REGADDR:  0x802a
 * DESC:     Transmitted packet count lower 16 bits register
 * SIZE:     32
 * FIELDS:
 *     PKT_COUNT_LOW    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr (0x0000201a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTPACKETL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_s {
	uint32_t v[1];
	uint32_t txbertpacketl[1];
	uint32_t _txbertpacketl;
} BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_t;

#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_CLR(r) (r).txbertpacketl[0] = 0
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_SET(r,d) (r).txbertpacketl[0] = d
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_GET(r) (r).txbertpacketl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_PKT_COUNT_LOWf_GET(r) (((r).txbertpacketl[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_PKT_COUNT_LOWf_SET(r,f) (r).txbertpacketl[0]=(((r).txbertpacketl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXBERTPACKETL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXBERTPACKETLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXBERTPACKETLr,(_r._txbertpacketl))
#define BCMI_HYPERLITE_XGXS_WRITE_TXBERTPACKETLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXBERTPACKETLr,(_r._txbertpacketl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTPACKETLr BCMI_HYPERLITE_XGXS_TXBERTPACKETLr
#define TXBERTPACKETLr_SIZE BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_t TXBERTPACKETLr_t;
#define TXBERTPACKETLr_CLR BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_CLR
#define TXBERTPACKETLr_SET BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_SET
#define TXBERTPACKETLr_GET BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_GET
#define TXBERTPACKETLr_PKT_COUNT_LOWf_GET BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_PKT_COUNT_LOWf_GET
#define TXBERTPACKETLr_PKT_COUNT_LOWf_SET BCMI_HYPERLITE_XGXS_TXBERTPACKETLr_PKT_COUNT_LOWf_SET
#define READ_TXBERTPACKETLr BCMI_HYPERLITE_XGXS_READ_TXBERTPACKETLr
#define WRITE_TXBERTPACKETLr BCMI_HYPERLITE_XGXS_WRITE_TXBERTPACKETLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXBERTPACKETLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTCTRL
 * BLOCKS:   RXBERT
 * REGADDR:  0x8030
 * DESC:     Rx Bert control register
 * SIZE:     32
 * FIELDS:
 *     COUNT_CLR        
 *     ERR_CLR          
 *     SLICE_SEL        
 *     SOURCE_SEL       
 *     SOURCE_SEL_R     
 *     RXSTATSEL        
 *     COUNTRST_DIS     
 *     CRCCHK_EN        
 *     CGBAD_TST_EN     
 *     RAMP_EN          
 *     PRBS_ORDER       
 *     SEED_LD          
 *     PKT_EN           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr (0x00003010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTCTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTCTRLr_s {
	uint32_t v[1];
	uint32_t rxbertctrl[1];
	uint32_t _rxbertctrl;
} BCMI_HYPERLITE_XGXS_RXBERTCTRLr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CLR(r) (r).rxbertctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SET(r,d) (r).rxbertctrl[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_GET(r) (r).rxbertctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PKT_ENf_GET(r) ((((r).rxbertctrl[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PKT_ENf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SEED_LDf_GET(r) ((((r).rxbertctrl[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SEED_LDf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PRBS_ORDERf_GET(r) ((((r).rxbertctrl[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PRBS_ORDERf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RAMP_ENf_GET(r) ((((r).rxbertctrl[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RAMP_ENf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CGBAD_TST_ENf_GET(r) ((((r).rxbertctrl[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CGBAD_TST_ENf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CRCCHK_ENf_GET(r) ((((r).rxbertctrl[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CRCCHK_ENf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNTRST_DISf_GET(r) ((((r).rxbertctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNTRST_DISf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RXSTATSELf_GET(r) ((((r).rxbertctrl[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RXSTATSELf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SEL_Rf_GET(r) ((((r).rxbertctrl[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SEL_Rf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SELf_GET(r) ((((r).rxbertctrl[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SELf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SLICE_SELf_GET(r) ((((r).rxbertctrl[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SLICE_SELf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_ERR_CLRf_GET(r) ((((r).rxbertctrl[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_ERR_CLRf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNT_CLRf_GET(r) (((r).rxbertctrl[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNT_CLRf_SET(r,f) (r).rxbertctrl[0]=(((r).rxbertctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RXBERTCTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTCTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTCTRLr,(_r._rxbertctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTCTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTCTRLr,(_r._rxbertctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTCTRLr BCMI_HYPERLITE_XGXS_RXBERTCTRLr
#define RXBERTCTRLr_SIZE BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTCTRLr_t RXBERTCTRLr_t;
#define RXBERTCTRLr_CLR BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CLR
#define RXBERTCTRLr_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SET
#define RXBERTCTRLr_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_GET
#define RXBERTCTRLr_PKT_ENf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PKT_ENf_GET
#define RXBERTCTRLr_PKT_ENf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PKT_ENf_SET
#define RXBERTCTRLr_SEED_LDf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SEED_LDf_GET
#define RXBERTCTRLr_SEED_LDf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SEED_LDf_SET
#define RXBERTCTRLr_PRBS_ORDERf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PRBS_ORDERf_GET
#define RXBERTCTRLr_PRBS_ORDERf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_PRBS_ORDERf_SET
#define RXBERTCTRLr_RAMP_ENf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RAMP_ENf_GET
#define RXBERTCTRLr_RAMP_ENf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RAMP_ENf_SET
#define RXBERTCTRLr_CGBAD_TST_ENf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CGBAD_TST_ENf_GET
#define RXBERTCTRLr_CGBAD_TST_ENf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CGBAD_TST_ENf_SET
#define RXBERTCTRLr_CRCCHK_ENf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CRCCHK_ENf_GET
#define RXBERTCTRLr_CRCCHK_ENf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_CRCCHK_ENf_SET
#define RXBERTCTRLr_COUNTRST_DISf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNTRST_DISf_GET
#define RXBERTCTRLr_COUNTRST_DISf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNTRST_DISf_SET
#define RXBERTCTRLr_RXSTATSELf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RXSTATSELf_GET
#define RXBERTCTRLr_RXSTATSELf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_RXSTATSELf_SET
#define RXBERTCTRLr_SOURCE_SEL_Rf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SEL_Rf_GET
#define RXBERTCTRLr_SOURCE_SEL_Rf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SEL_Rf_SET
#define RXBERTCTRLr_SOURCE_SELf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SELf_GET
#define RXBERTCTRLr_SOURCE_SELf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SOURCE_SELf_SET
#define RXBERTCTRLr_SLICE_SELf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SLICE_SELf_GET
#define RXBERTCTRLr_SLICE_SELf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_SLICE_SELf_SET
#define RXBERTCTRLr_ERR_CLRf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_ERR_CLRf_GET
#define RXBERTCTRLr_ERR_CLRf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_ERR_CLRf_SET
#define RXBERTCTRLr_COUNT_CLRf_GET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNT_CLRf_GET
#define RXBERTCTRLr_COUNT_CLRf_SET BCMI_HYPERLITE_XGXS_RXBERTCTRLr_COUNT_CLRf_SET
#define READ_RXBERTCTRLr BCMI_HYPERLITE_XGXS_READ_RXBERTCTRLr
#define WRITE_RXBERTCTRLr BCMI_HYPERLITE_XGXS_WRITE_RXBERTCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTSOPEOP
 * BLOCKS:   RXBERT
 * REGADDR:  0x8031
 * DESC:     Rx Bert SOP, EOP definition register
 * SIZE:     32
 * FIELDS:
 *     EOP              
 *     SOP              
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr (0x00003011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTSOPEOP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_s {
	uint32_t v[1];
	uint32_t rxbertsopeop[1];
	uint32_t _rxbertsopeop;
} BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_CLR(r) (r).rxbertsopeop[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SET(r,d) (r).rxbertsopeop[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_GET(r) (r).rxbertsopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SOPf_GET(r) ((((r).rxbertsopeop[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SOPf_SET(r,f) (r).rxbertsopeop[0]=(((r).rxbertsopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_EOPf_GET(r) (((r).rxbertsopeop[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_EOPf_SET(r,f) (r).rxbertsopeop[0]=(((r).rxbertsopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access RXBERTSOPEOP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTSOPEOPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr,(_r._rxbertsopeop))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTSOPEOPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr,(_r._rxbertsopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTSOPEOPr BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr
#define RXBERTSOPEOPr_SIZE BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_t RXBERTSOPEOPr_t;
#define RXBERTSOPEOPr_CLR BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_CLR
#define RXBERTSOPEOPr_SET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SET
#define RXBERTSOPEOPr_GET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_GET
#define RXBERTSOPEOPr_SOPf_GET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SOPf_GET
#define RXBERTSOPEOPr_SOPf_SET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_SOPf_SET
#define RXBERTSOPEOPr_EOPf_GET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_EOPf_GET
#define RXBERTSOPEOPr_EOPf_SET BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr_EOPf_SET
#define READ_RXBERTSOPEOPr BCMI_HYPERLITE_XGXS_READ_RXBERTSOPEOPr
#define WRITE_RXBERTSOPEOPr BCMI_HYPERLITE_XGXS_WRITE_RXBERTSOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTSOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTBYTEU
 * BLOCKS:   RXBERT
 * REGADDR:  0x8037
 * DESC:     Received byte count upper 16 bits register
 * SIZE:     32
 * FIELDS:
 *     BYTE_COUNT_HIGH  
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr (0x00003017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTBYTEU.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_s {
	uint32_t v[1];
	uint32_t rxbertbyteu[1];
	uint32_t _rxbertbyteu;
} BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_CLR(r) (r).rxbertbyteu[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_SET(r,d) (r).rxbertbyteu[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_GET(r) (r).rxbertbyteu[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_BYTE_COUNT_HIGHf_GET(r) (((r).rxbertbyteu[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_BYTE_COUNT_HIGHf_SET(r,f) (r).rxbertbyteu[0]=(((r).rxbertbyteu[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTBYTEU.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTBYTEUr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTEUr,(_r._rxbertbyteu))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTEUr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTEUr,(_r._rxbertbyteu))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTBYTEUr BCMI_HYPERLITE_XGXS_RXBERTBYTEUr
#define RXBERTBYTEUr_SIZE BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_t RXBERTBYTEUr_t;
#define RXBERTBYTEUr_CLR BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_CLR
#define RXBERTBYTEUr_SET BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_SET
#define RXBERTBYTEUr_GET BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_GET
#define RXBERTBYTEUr_BYTE_COUNT_HIGHf_GET BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_BYTE_COUNT_HIGHf_GET
#define RXBERTBYTEUr_BYTE_COUNT_HIGHf_SET BCMI_HYPERLITE_XGXS_RXBERTBYTEUr_BYTE_COUNT_HIGHf_SET
#define READ_RXBERTBYTEUr BCMI_HYPERLITE_XGXS_READ_RXBERTBYTEUr
#define WRITE_RXBERTBYTEUr BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTEUr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTBYTEUr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTBYTEL
 * BLOCKS:   RXBERT
 * REGADDR:  0x8038
 * DESC:     Received bytes count lower 16 bits register
 * SIZE:     32
 * FIELDS:
 *     BYTE_COUNT_LOW   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr (0x00003018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTBYTEL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTBYTELr_s {
	uint32_t v[1];
	uint32_t rxbertbytel[1];
	uint32_t _rxbertbytel;
} BCMI_HYPERLITE_XGXS_RXBERTBYTELr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_CLR(r) (r).rxbertbytel[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_SET(r,d) (r).rxbertbytel[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_GET(r) (r).rxbertbytel[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_BYTE_COUNT_LOWf_GET(r) (((r).rxbertbytel[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTBYTELr_BYTE_COUNT_LOWf_SET(r,f) (r).rxbertbytel[0]=(((r).rxbertbytel[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTBYTEL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTBYTELr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTELr,(_r._rxbertbytel))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTELr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTELr,(_r._rxbertbytel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTBYTELr BCMI_HYPERLITE_XGXS_RXBERTBYTELr
#define RXBERTBYTELr_SIZE BCMI_HYPERLITE_XGXS_RXBERTBYTELr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTBYTELr_t RXBERTBYTELr_t;
#define RXBERTBYTELr_CLR BCMI_HYPERLITE_XGXS_RXBERTBYTELr_CLR
#define RXBERTBYTELr_SET BCMI_HYPERLITE_XGXS_RXBERTBYTELr_SET
#define RXBERTBYTELr_GET BCMI_HYPERLITE_XGXS_RXBERTBYTELr_GET
#define RXBERTBYTELr_BYTE_COUNT_LOWf_GET BCMI_HYPERLITE_XGXS_RXBERTBYTELr_BYTE_COUNT_LOWf_GET
#define RXBERTBYTELr_BYTE_COUNT_LOWf_SET BCMI_HYPERLITE_XGXS_RXBERTBYTELr_BYTE_COUNT_LOWf_SET
#define READ_RXBERTBYTELr BCMI_HYPERLITE_XGXS_READ_RXBERTBYTELr
#define WRITE_RXBERTBYTELr BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTBYTELr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTPACKETU
 * BLOCKS:   RXBERT
 * REGADDR:  0x8039
 * DESC:     Received packet count upper 16 bits register
 * SIZE:     32
 * FIELDS:
 *     PKT_COUNT_HIGH   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr (0x00003019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTPACKETU.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_s {
	uint32_t v[1];
	uint32_t rxbertpacketu[1];
	uint32_t _rxbertpacketu;
} BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_CLR(r) (r).rxbertpacketu[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_SET(r,d) (r).rxbertpacketu[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_GET(r) (r).rxbertpacketu[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_PKT_COUNT_HIGHf_GET(r) (((r).rxbertpacketu[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_PKT_COUNT_HIGHf_SET(r,f) (r).rxbertpacketu[0]=(((r).rxbertpacketu[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTPACKETU.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTPACKETUr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTPACKETUr,(_r._rxbertpacketu))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTPACKETUr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTPACKETUr,(_r._rxbertpacketu))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTPACKETUr BCMI_HYPERLITE_XGXS_RXBERTPACKETUr
#define RXBERTPACKETUr_SIZE BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_t RXBERTPACKETUr_t;
#define RXBERTPACKETUr_CLR BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_CLR
#define RXBERTPACKETUr_SET BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_SET
#define RXBERTPACKETUr_GET BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_GET
#define RXBERTPACKETUr_PKT_COUNT_HIGHf_GET BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_PKT_COUNT_HIGHf_GET
#define RXBERTPACKETUr_PKT_COUNT_HIGHf_SET BCMI_HYPERLITE_XGXS_RXBERTPACKETUr_PKT_COUNT_HIGHf_SET
#define READ_RXBERTPACKETUr BCMI_HYPERLITE_XGXS_READ_RXBERTPACKETUr
#define WRITE_RXBERTPACKETUr BCMI_HYPERLITE_XGXS_WRITE_RXBERTPACKETUr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTPACKETUr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTPACKETL
 * BLOCKS:   RXBERT
 * REGADDR:  0x803a
 * DESC:     Received packet count lower 16 bits register
 * SIZE:     32
 * FIELDS:
 *     PKT_COUNT_LOW    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr (0x0000301a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTPACKETL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_s {
	uint32_t v[1];
	uint32_t rxbertpacketl[1];
	uint32_t _rxbertpacketl;
} BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_CLR(r) (r).rxbertpacketl[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_SET(r,d) (r).rxbertpacketl[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_GET(r) (r).rxbertpacketl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_PKT_COUNT_LOWf_GET(r) (((r).rxbertpacketl[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_PKT_COUNT_LOWf_SET(r,f) (r).rxbertpacketl[0]=(((r).rxbertpacketl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTPACKETL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTPACKETLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTPACKETLr,(_r._rxbertpacketl))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTPACKETLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTPACKETLr,(_r._rxbertpacketl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTPACKETLr BCMI_HYPERLITE_XGXS_RXBERTPACKETLr
#define RXBERTPACKETLr_SIZE BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_t RXBERTPACKETLr_t;
#define RXBERTPACKETLr_CLR BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_CLR
#define RXBERTPACKETLr_SET BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_SET
#define RXBERTPACKETLr_GET BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_GET
#define RXBERTPACKETLr_PKT_COUNT_LOWf_GET BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_PKT_COUNT_LOWf_GET
#define RXBERTPACKETLr_PKT_COUNT_LOWf_SET BCMI_HYPERLITE_XGXS_RXBERTPACKETLr_PKT_COUNT_LOWf_SET
#define READ_RXBERTPACKETLr BCMI_HYPERLITE_XGXS_READ_RXBERTPACKETLr
#define WRITE_RXBERTPACKETLr BCMI_HYPERLITE_XGXS_WRITE_RXBERTPACKETLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTPACKETLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTBITERR
 * BLOCKS:   RXBERT
 * REGADDR:  0x803b
 * DESC:     Received bits error count
 * SIZE:     32
 * FIELDS:
 *     BIT_ERR_COUNT    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr (0x0000301b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTBITERR.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTBITERRr_s {
	uint32_t v[1];
	uint32_t rxbertbiterr[1];
	uint32_t _rxbertbiterr;
} BCMI_HYPERLITE_XGXS_RXBERTBITERRr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_CLR(r) (r).rxbertbiterr[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_SET(r,d) (r).rxbertbiterr[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_GET(r) (r).rxbertbiterr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_BIT_ERR_COUNTf_GET(r) (((r).rxbertbiterr[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTBITERRr_BIT_ERR_COUNTf_SET(r,f) (r).rxbertbiterr[0]=(((r).rxbertbiterr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTBITERR.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTBITERRr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTBITERRr,(_r._rxbertbiterr))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTBITERRr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTBITERRr,(_r._rxbertbiterr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTBITERRr BCMI_HYPERLITE_XGXS_RXBERTBITERRr
#define RXBERTBITERRr_SIZE BCMI_HYPERLITE_XGXS_RXBERTBITERRr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTBITERRr_t RXBERTBITERRr_t;
#define RXBERTBITERRr_CLR BCMI_HYPERLITE_XGXS_RXBERTBITERRr_CLR
#define RXBERTBITERRr_SET BCMI_HYPERLITE_XGXS_RXBERTBITERRr_SET
#define RXBERTBITERRr_GET BCMI_HYPERLITE_XGXS_RXBERTBITERRr_GET
#define RXBERTBITERRr_BIT_ERR_COUNTf_GET BCMI_HYPERLITE_XGXS_RXBERTBITERRr_BIT_ERR_COUNTf_GET
#define RXBERTBITERRr_BIT_ERR_COUNTf_SET BCMI_HYPERLITE_XGXS_RXBERTBITERRr_BIT_ERR_COUNTf_SET
#define READ_RXBERTBITERRr BCMI_HYPERLITE_XGXS_READ_RXBERTBITERRr
#define WRITE_RXBERTBITERRr BCMI_HYPERLITE_XGXS_WRITE_RXBERTBITERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTBITERRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTBYTEERR
 * BLOCKS:   RXBERT
 * REGADDR:  0x803c
 * DESC:     Received bytes error count
 * SIZE:     32
 * FIELDS:
 *     BYTE_ERR_COUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr (0x0000301c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTBYTEERR.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_s {
	uint32_t v[1];
	uint32_t rxbertbyteerr[1];
	uint32_t _rxbertbyteerr;
} BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_CLR(r) (r).rxbertbyteerr[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_SET(r,d) (r).rxbertbyteerr[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_GET(r) (r).rxbertbyteerr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_BYTE_ERR_COUNTf_GET(r) (((r).rxbertbyteerr[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_BYTE_ERR_COUNTf_SET(r,f) (r).rxbertbyteerr[0]=(((r).rxbertbyteerr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTBYTEERR.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTBYTEERRr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr,(_r._rxbertbyteerr))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTEERRr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr,(_r._rxbertbyteerr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTBYTEERRr BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr
#define RXBERTBYTEERRr_SIZE BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_t RXBERTBYTEERRr_t;
#define RXBERTBYTEERRr_CLR BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_CLR
#define RXBERTBYTEERRr_SET BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_SET
#define RXBERTBYTEERRr_GET BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_GET
#define RXBERTBYTEERRr_BYTE_ERR_COUNTf_GET BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_BYTE_ERR_COUNTf_GET
#define RXBERTBYTEERRr_BYTE_ERR_COUNTf_SET BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr_BYTE_ERR_COUNTf_SET
#define READ_RXBERTBYTEERRr BCMI_HYPERLITE_XGXS_READ_RXBERTBYTEERRr
#define WRITE_RXBERTBYTEERRr BCMI_HYPERLITE_XGXS_WRITE_RXBERTBYTEERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTBYTEERRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTPKTERR
 * BLOCKS:   RXBERT
 * REGADDR:  0x803d
 * DESC:     Received packets error count
 * SIZE:     32
 * FIELDS:
 *     PKT_ERR_COUNT    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr (0x0000301d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTPKTERR.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_s {
	uint32_t v[1];
	uint32_t rxbertpkterr[1];
	uint32_t _rxbertpkterr;
} BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_CLR(r) (r).rxbertpkterr[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_SET(r,d) (r).rxbertpkterr[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_GET(r) (r).rxbertpkterr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_PKT_ERR_COUNTf_GET(r) (((r).rxbertpkterr[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_PKT_ERR_COUNTf_SET(r,f) (r).rxbertpkterr[0]=(((r).rxbertpkterr[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXBERTPKTERR.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTPKTERRr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTPKTERRr,(_r._rxbertpkterr))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTPKTERRr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTPKTERRr,(_r._rxbertpkterr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTPKTERRr BCMI_HYPERLITE_XGXS_RXBERTPKTERRr
#define RXBERTPKTERRr_SIZE BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_t RXBERTPKTERRr_t;
#define RXBERTPKTERRr_CLR BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_CLR
#define RXBERTPKTERRr_SET BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_SET
#define RXBERTPKTERRr_GET BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_GET
#define RXBERTPKTERRr_PKT_ERR_COUNTf_GET BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_PKT_ERR_COUNTf_GET
#define RXBERTPKTERRr_PKT_ERR_COUNTf_SET BCMI_HYPERLITE_XGXS_RXBERTPKTERRr_PKT_ERR_COUNTf_SET
#define READ_RXBERTPKTERRr BCMI_HYPERLITE_XGXS_READ_RXBERTPKTERRr
#define WRITE_RXBERTPKTERRr BCMI_HYPERLITE_XGXS_WRITE_RXBERTPKTERRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTPKTERRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXBERTSTATUS
 * BLOCKS:   RXBERT
 * REGADDR:  0x803e
 * DESC:     Receive Status
 * SIZE:     32
 * FIELDS:
 *     CRCCHK_EN_RESERVED0 
 *     RXSTATSEL_RX_10G_TMUX 
 *     RXBERT_XOR_COMP  
 *     RXBERT_ONEFE_DET 
 *     RXBERT_RESERVED1 
 *     RXBERT_BIT_ERR_OVERFLOW 
 *     RXBERT_RESERVED0 
 *     RXSTATSEL_RESERVED0 
 *     RXBERT_PRBS_STATE 
 *     RXBERT_PRBS_STKY 
 *     CRCCHK_EN_PRBS_STKY 
 *     RXBERT_PRBS_LOCK 
 *     CRCCHK_EN_LINK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr (0x0000301e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_s {
	uint32_t v[1];
	uint32_t rxbertstatus[1];
	uint32_t _rxbertstatus;
} BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CLR(r) (r).rxbertstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_SET(r,d) (r).rxbertstatus[0] = d
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_GET(r) (r).rxbertstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_LOCKf_GET(r) ((((r).rxbertstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_LOCKf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_LINKf_GET(r) ((((r).rxbertstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_LINKf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STKYf_GET(r) ((((r).rxbertstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STKYf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_GET(r) ((((r).rxbertstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_GET(r) (((r).rxbertstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STATEf_GET(r) ((((r).rxbertstatus[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STATEf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED0f_GET(r) ((((r).rxbertstatus[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED0f_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RESERVED0f_GET(r) ((((r).rxbertstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RESERVED0f_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_GET(r) ((((r).rxbertstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED1f_GET(r) ((((r).rxbertstatus[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED1f_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_ONEFE_DETf_GET(r) ((((r).rxbertstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_ONEFE_DETf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_GET(r) (((r).rxbertstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_XOR_COMPf_GET(r) (((r).rxbertstatus[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_XOR_COMPf_SET(r,f) (r).rxbertstatus[0]=(((r).rxbertstatus[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RXBERTSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXBERTSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXBERTSTATUSr,(_r._rxbertstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RXBERTSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXBERTSTATUSr,(_r._rxbertstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTSTATUSr BCMI_HYPERLITE_XGXS_RXBERTSTATUSr
#define RXBERTSTATUSr_SIZE BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_t RXBERTSTATUSr_t;
#define RXBERTSTATUSr_CLR BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CLR
#define RXBERTSTATUSr_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_SET
#define RXBERTSTATUSr_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_GET
#define RXBERTSTATUSr_RXBERT_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_LOCKf_GET
#define RXBERTSTATUSr_RXBERT_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_LOCKf_SET
#define RXBERTSTATUSr_CRCCHK_EN_LINKf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_LINKf_GET
#define RXBERTSTATUSr_CRCCHK_EN_LINKf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_LINKf_SET
#define RXBERTSTATUSr_RXBERT_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STKYf_GET
#define RXBERTSTATUSr_RXBERT_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STKYf_SET
#define RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_GET
#define RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_PRBS_STKYf_SET
#define RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_GET
#define RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_CRCCHK_EN_RESERVED0f_SET
#define RXBERTSTATUSr_RXBERT_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STATEf_GET
#define RXBERTSTATUSr_RXBERT_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_PRBS_STATEf_SET
#define RXBERTSTATUSr_RXBERT_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED0f_GET
#define RXBERTSTATUSr_RXBERT_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED0f_SET
#define RXBERTSTATUSr_RXSTATSEL_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RESERVED0f_GET
#define RXBERTSTATUSr_RXSTATSEL_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RESERVED0f_SET
#define RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_GET
#define RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_BIT_ERR_OVERFLOWf_SET
#define RXBERTSTATUSr_RXBERT_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED1f_GET
#define RXBERTSTATUSr_RXBERT_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_RESERVED1f_SET
#define RXBERTSTATUSr_RXBERT_ONEFE_DETf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_ONEFE_DETf_GET
#define RXBERTSTATUSr_RXBERT_ONEFE_DETf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_ONEFE_DETf_SET
#define RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_GET
#define RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXSTATSEL_RX_10G_TMUXf_SET
#define RXBERTSTATUSr_RXBERT_XOR_COMPf_GET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_XOR_COMPf_GET
#define RXBERTSTATUSr_RXBERT_XOR_COMPf_SET BCMI_HYPERLITE_XGXS_RXBERTSTATUSr_RXBERT_XOR_COMPf_SET
#define READ_RXBERTSTATUSr BCMI_HYPERLITE_XGXS_READ_RXBERTSTATUSr
#define WRITE_RXBERTSTATUSr BCMI_HYPERLITE_XGXS_WRITE_RXBERTSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXBERTSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLSTATUS
 * BLOCKS:   TXPLL
 * REGADDR:  0x8050
 * DESC:     PLL status register
 * SIZE:     32
 * FIELDS:
 *     PLL_MODE_AFE     
 *     RESERVED2        
 *     LOSTPLLLOCK_SM   
 *     SLOWDN           
 *     RESERVED1        
 *     VCOPASS          
 *     FREQPASS         
 *     PLLSEQPASS       
 *     RESERVED0        
 *     VCODONE          
 *     FREQDONE         
 *     PLLSEQDONE       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr (0x00005010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_s {
	uint32_t v[1];
	uint32_t anapllstatus[1];
	uint32_t _anapllstatus;
} BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_CLR(r) (r).anapllstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SET(r,d) (r).anapllstatus[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_GET(r) (r).anapllstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQDONEf_GET(r) ((((r).anapllstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQDONEf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQDONEf_GET(r) ((((r).anapllstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQDONEf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCODONEf_GET(r) ((((r).anapllstatus[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCODONEf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED0f_GET(r) ((((r).anapllstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED0f_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQPASSf_GET(r) ((((r).anapllstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQPASSf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQPASSf_GET(r) ((((r).anapllstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQPASSf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCOPASSf_GET(r) ((((r).anapllstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCOPASSf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED1f_GET(r) ((((r).anapllstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED1f_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SLOWDNf_GET(r) ((((r).anapllstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SLOWDNf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_LOSTPLLLOCK_SMf_GET(r) ((((r).anapllstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_LOSTPLLLOCK_SMf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED2f_GET(r) ((((r).anapllstatus[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED2f_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLL_MODE_AFEf_GET(r) (((r).anapllstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLL_MODE_AFEf_SET(r,f) (r).anapllstatus[0]=(((r).anapllstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access ANAPLLSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr,(_r._anapllstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr,(_r._anapllstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLSTATUSr BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr
#define ANAPLLSTATUSr_SIZE BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_t ANAPLLSTATUSr_t;
#define ANAPLLSTATUSr_CLR BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_CLR
#define ANAPLLSTATUSr_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SET
#define ANAPLLSTATUSr_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_GET
#define ANAPLLSTATUSr_PLLSEQDONEf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQDONEf_GET
#define ANAPLLSTATUSr_PLLSEQDONEf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQDONEf_SET
#define ANAPLLSTATUSr_FREQDONEf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQDONEf_GET
#define ANAPLLSTATUSr_FREQDONEf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQDONEf_SET
#define ANAPLLSTATUSr_VCODONEf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCODONEf_GET
#define ANAPLLSTATUSr_VCODONEf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCODONEf_SET
#define ANAPLLSTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED0f_GET
#define ANAPLLSTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED0f_SET
#define ANAPLLSTATUSr_PLLSEQPASSf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQPASSf_GET
#define ANAPLLSTATUSr_PLLSEQPASSf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLLSEQPASSf_SET
#define ANAPLLSTATUSr_FREQPASSf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQPASSf_GET
#define ANAPLLSTATUSr_FREQPASSf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_FREQPASSf_SET
#define ANAPLLSTATUSr_VCOPASSf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCOPASSf_GET
#define ANAPLLSTATUSr_VCOPASSf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_VCOPASSf_SET
#define ANAPLLSTATUSr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED1f_GET
#define ANAPLLSTATUSr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED1f_SET
#define ANAPLLSTATUSr_SLOWDNf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SLOWDNf_GET
#define ANAPLLSTATUSr_SLOWDNf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_SLOWDNf_SET
#define ANAPLLSTATUSr_LOSTPLLLOCK_SMf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_LOSTPLLLOCK_SMf_GET
#define ANAPLLSTATUSr_LOSTPLLLOCK_SMf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_LOSTPLLLOCK_SMf_SET
#define ANAPLLSTATUSr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED2f_GET
#define ANAPLLSTATUSr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_RESERVED2f_SET
#define ANAPLLSTATUSr_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLL_MODE_AFEf_GET
#define ANAPLLSTATUSr_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr_PLL_MODE_AFEf_SET
#define READ_ANAPLLSTATUSr BCMI_HYPERLITE_XGXS_READ_ANAPLLSTATUSr
#define WRITE_ANAPLLSTATUSr BCMI_HYPERLITE_XGXS_WRITE_ANAPLLSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLCONTROL
 * BLOCKS:   TXPLL
 * REGADDR:  0x8051
 * DESC:     PLL control register
 * SIZE:     32
 * FIELDS:
 *     PLLFORCEPLLLOCK  
 *     PLLFORCEVCOPASS  
 *     PLLFORCEVCOPASS_EN 
 *     PLLFORCEVCODONE  
 *     PLLFORCEVCODONE_EN 
 *     PLLFORCEPASS     
 *     PLLFORCEDONE     
 *     PLLFORCEDONE_EN  
 *     BYTESYNCRESTART_EN 
 *     LINKRESTART_EN   
 *     VCODONE_EN       
 *     VCOPRETRY_EN     
 *     FREQMONITOR_EN   
 *     FREQDETRESTART_EN 
 *     FREQDETRETRY_EN  
 *     PLLRESTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr (0x00005011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_s {
	uint32_t v[1];
	uint32_t anapllcontrol[1];
	uint32_t _anapllcontrol;
} BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_CLR(r) (r).anapllcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_SET(r,d) (r).anapllcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_GET(r) (r).anapllcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLRESTARTf_GET(r) ((((r).anapllcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLRESTARTf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRETRY_ENf_GET(r) ((((r).anapllcontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRETRY_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRESTART_ENf_GET(r) ((((r).anapllcontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRESTART_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQMONITOR_ENf_GET(r) ((((r).anapllcontrol[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQMONITOR_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCOPRETRY_ENf_GET(r) ((((r).anapllcontrol[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCOPRETRY_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCODONE_ENf_GET(r) ((((r).anapllcontrol[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCODONE_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_LINKRESTART_ENf_GET(r) ((((r).anapllcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_LINKRESTART_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_BYTESYNCRESTART_ENf_GET(r) ((((r).anapllcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_BYTESYNCRESTART_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONE_ENf_GET(r) ((((r).anapllcontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONE_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONEf_GET(r) ((((r).anapllcontrol[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONEf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPASSf_GET(r) ((((r).anapllcontrol[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPASSf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_GET(r) ((((r).anapllcontrol[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONEf_GET(r) ((((r).anapllcontrol[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONEf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_GET(r) ((((r).anapllcontrol[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASSf_GET(r) ((((r).anapllcontrol[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASSf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPLLLOCKf_GET(r) (((r).anapllcontrol[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPLLLOCKf_SET(r,f) (r).anapllcontrol[0]=(((r).anapllcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr,(_r._anapllcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr,(_r._anapllcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLCONTROLr BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr
#define ANAPLLCONTROLr_SIZE BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_t ANAPLLCONTROLr_t;
#define ANAPLLCONTROLr_CLR BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_CLR
#define ANAPLLCONTROLr_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_SET
#define ANAPLLCONTROLr_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_GET
#define ANAPLLCONTROLr_PLLRESTARTf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLRESTARTf_GET
#define ANAPLLCONTROLr_PLLRESTARTf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLRESTARTf_SET
#define ANAPLLCONTROLr_FREQDETRETRY_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRETRY_ENf_GET
#define ANAPLLCONTROLr_FREQDETRETRY_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRETRY_ENf_SET
#define ANAPLLCONTROLr_FREQDETRESTART_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRESTART_ENf_GET
#define ANAPLLCONTROLr_FREQDETRESTART_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQDETRESTART_ENf_SET
#define ANAPLLCONTROLr_FREQMONITOR_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQMONITOR_ENf_GET
#define ANAPLLCONTROLr_FREQMONITOR_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_FREQMONITOR_ENf_SET
#define ANAPLLCONTROLr_VCOPRETRY_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCOPRETRY_ENf_GET
#define ANAPLLCONTROLr_VCOPRETRY_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCOPRETRY_ENf_SET
#define ANAPLLCONTROLr_VCODONE_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCODONE_ENf_GET
#define ANAPLLCONTROLr_VCODONE_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_VCODONE_ENf_SET
#define ANAPLLCONTROLr_LINKRESTART_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_LINKRESTART_ENf_GET
#define ANAPLLCONTROLr_LINKRESTART_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_LINKRESTART_ENf_SET
#define ANAPLLCONTROLr_BYTESYNCRESTART_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_BYTESYNCRESTART_ENf_GET
#define ANAPLLCONTROLr_BYTESYNCRESTART_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_BYTESYNCRESTART_ENf_SET
#define ANAPLLCONTROLr_PLLFORCEDONE_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONE_ENf_GET
#define ANAPLLCONTROLr_PLLFORCEDONE_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONE_ENf_SET
#define ANAPLLCONTROLr_PLLFORCEDONEf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONEf_GET
#define ANAPLLCONTROLr_PLLFORCEDONEf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEDONEf_SET
#define ANAPLLCONTROLr_PLLFORCEPASSf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPASSf_GET
#define ANAPLLCONTROLr_PLLFORCEPASSf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPASSf_SET
#define ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_GET
#define ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONE_ENf_SET
#define ANAPLLCONTROLr_PLLFORCEVCODONEf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONEf_GET
#define ANAPLLCONTROLr_PLLFORCEVCODONEf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCODONEf_SET
#define ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_GET
#define ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASS_ENf_SET
#define ANAPLLCONTROLr_PLLFORCEVCOPASSf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASSf_GET
#define ANAPLLCONTROLr_PLLFORCEVCOPASSf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEVCOPASSf_SET
#define ANAPLLCONTROLr_PLLFORCEPLLLOCKf_GET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPLLLOCKf_GET
#define ANAPLLCONTROLr_PLLFORCEPLLLOCKf_SET BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr_PLLFORCEPLLLOCKf_SET
#define READ_ANAPLLCONTROLr BCMI_HYPERLITE_XGXS_READ_ANAPLLCONTROLr
#define WRITE_ANAPLLCONTROLr BCMI_HYPERLITE_XGXS_WRITE_ANAPLLCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLTIMER1
 * BLOCKS:   TXPLL
 * REGADDR:  0x8052
 * DESC:     PLL start up state machine vco timers
 * SIZE:     32
 * FIELDS:
 *     VCOSTARTTIME     
 *     VCOSTEPTIME      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r (0x00005012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLTIMER1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_s {
	uint32_t v[1];
	uint32_t anaplltimer1[1];
	uint32_t _anaplltimer1;
} BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_CLR(r) (r).anaplltimer1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_SET(r,d) (r).anaplltimer1[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_GET(r) (r).anaplltimer1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTEPTIMEf_GET(r) ((((r).anaplltimer1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTEPTIMEf_SET(r,f) (r).anaplltimer1[0]=(((r).anaplltimer1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTARTTIMEf_GET(r) (((r).anaplltimer1[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTARTTIMEf_SET(r,f) (r).anaplltimer1[0]=(((r).anaplltimer1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access ANAPLLTIMER1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r,(_r._anaplltimer1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r,(_r._anaplltimer1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLTIMER1r BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r
#define ANAPLLTIMER1r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_t ANAPLLTIMER1r_t;
#define ANAPLLTIMER1r_CLR BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_CLR
#define ANAPLLTIMER1r_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_SET
#define ANAPLLTIMER1r_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_GET
#define ANAPLLTIMER1r_VCOSTEPTIMEf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTEPTIMEf_GET
#define ANAPLLTIMER1r_VCOSTEPTIMEf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTEPTIMEf_SET
#define ANAPLLTIMER1r_VCOSTARTTIMEf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTARTTIMEf_GET
#define ANAPLLTIMER1r_VCOSTARTTIMEf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r_VCOSTARTTIMEf_SET
#define READ_ANAPLLTIMER1r BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER1r
#define WRITE_ANAPLLTIMER1r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLTIMER1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLTIMER2
 * BLOCKS:   TXPLL
 * REGADDR:  0x8053
 * DESC:     PLL start up state machine retry timer
 * SIZE:     32
 * FIELDS:
 *     RETRYTIME        
 *     TESTMUXSEL       
 *     LFCKSINGLESTEP   
 *     LFCKSINGLESTEP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r (0x00005013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLTIMER2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_s {
	uint32_t v[1];
	uint32_t anaplltimer2[1];
	uint32_t _anaplltimer2;
} BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_CLR(r) (r).anaplltimer2[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_SET(r,d) (r).anaplltimer2[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_GET(r) (r).anaplltimer2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RESERVED0f_GET(r) ((((r).anaplltimer2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RESERVED0f_SET(r,f) (r).anaplltimer2[0]=(((r).anaplltimer2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_GET(r) ((((r).anaplltimer2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_SET(r,f) (r).anaplltimer2[0]=(((r).anaplltimer2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEPf_GET(r) ((((r).anaplltimer2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEPf_SET(r,f) (r).anaplltimer2[0]=(((r).anaplltimer2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_TESTMUXSELf_GET(r) ((((r).anaplltimer2[0]) >> 8) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_TESTMUXSELf_SET(r,f) (r).anaplltimer2[0]=(((r).anaplltimer2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RETRYTIMEf_GET(r) (((r).anaplltimer2[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RETRYTIMEf_SET(r,f) (r).anaplltimer2[0]=(((r).anaplltimer2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access ANAPLLTIMER2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r,(_r._anaplltimer2))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r,(_r._anaplltimer2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLTIMER2r BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r
#define ANAPLLTIMER2r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_t ANAPLLTIMER2r_t;
#define ANAPLLTIMER2r_CLR BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_CLR
#define ANAPLLTIMER2r_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_SET
#define ANAPLLTIMER2r_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_GET
#define ANAPLLTIMER2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RESERVED0f_GET
#define ANAPLLTIMER2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RESERVED0f_SET
#define ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_GET
#define ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEP_ENf_SET
#define ANAPLLTIMER2r_LFCKSINGLESTEPf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEPf_GET
#define ANAPLLTIMER2r_LFCKSINGLESTEPf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_LFCKSINGLESTEPf_SET
#define ANAPLLTIMER2r_TESTMUXSELf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_TESTMUXSELf_GET
#define ANAPLLTIMER2r_TESTMUXSELf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_TESTMUXSELf_SET
#define ANAPLLTIMER2r_RETRYTIMEf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RETRYTIMEf_GET
#define ANAPLLTIMER2r_RETRYTIMEf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r_RETRYTIMEf_SET
#define READ_ANAPLLTIMER2r BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER2r
#define WRITE_ANAPLLTIMER2r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLTIMER2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLTIMER3
 * BLOCKS:   TXPLL
 * REGADDR:  0x8054
 * DESC:     PLL start up state machine freq. detect timer
 * SIZE:     32
 * FIELDS:
 *     FREQDETTIME      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r (0x00005014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLTIMER3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_s {
	uint32_t v[1];
	uint32_t anaplltimer3[1];
	uint32_t _anaplltimer3;
} BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_CLR(r) (r).anaplltimer3[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_SET(r,d) (r).anaplltimer3[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_GET(r) (r).anaplltimer3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_RESERVED0f_GET(r) ((((r).anaplltimer3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_RESERVED0f_SET(r,f) (r).anaplltimer3[0]=(((r).anaplltimer3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_FREQDETTIMEf_GET(r) (((r).anaplltimer3[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_FREQDETTIMEf_SET(r,f) (r).anaplltimer3[0]=(((r).anaplltimer3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access ANAPLLTIMER3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r,(_r._anaplltimer3))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r,(_r._anaplltimer3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLTIMER3r BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r
#define ANAPLLTIMER3r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_t ANAPLLTIMER3r_t;
#define ANAPLLTIMER3r_CLR BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_CLR
#define ANAPLLTIMER3r_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_SET
#define ANAPLLTIMER3r_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_GET
#define ANAPLLTIMER3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_RESERVED0f_GET
#define ANAPLLTIMER3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_RESERVED0f_SET
#define ANAPLLTIMER3r_FREQDETTIMEf_GET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_FREQDETTIMEf_GET
#define ANAPLLTIMER3r_FREQDETTIMEf_SET BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r_FREQDETTIMEf_SET
#define READ_ANAPLLTIMER3r BCMI_HYPERLITE_XGXS_READ_ANAPLLTIMER3r
#define WRITE_ANAPLLTIMER3r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLTIMER3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLTIMER3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANACAPCONTROL
 * BLOCKS:   TXPLL
 * REGADDR:  0x8055
 * DESC:     PLL vco range control state machine
 * SIZE:     32
 * FIELDS:
 *     STATUS_VCORANGE  
 *     CONTROL_VCOFORCERANGE 
 *     CONTROL_RESERVED0 
 *     STATUS_RESERVED0 
 *     STATUS_SLOWDN    
 *     CONTROL_VCOFORCESLOWDN 
 *     SLOWDN_XOR       
 *     RESERVED0        
 *     VCOFORCESLOWDN_EN 
 *     VCOFORCERANGE_EN 
 *     VCORESTART       
 *     STATUSCONTROL    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr (0x00005015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program ANACAPCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_s {
	uint32_t v[1];
	uint32_t anacapcontrol[1];
	uint32_t _anacapcontrol;
} BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CLR(r) (r).anacapcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SET(r,d) (r).anacapcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_GET(r) (r).anacapcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUSCONTROLf_GET(r) ((((r).anacapcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUSCONTROLf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCORESTARTf_GET(r) ((((r).anacapcontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCORESTARTf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCERANGE_ENf_GET(r) ((((r).anacapcontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCERANGE_ENf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCESLOWDN_ENf_GET(r) ((((r).anacapcontrol[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCESLOWDN_ENf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_RESERVED0f_GET(r) ((((r).anacapcontrol[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_RESERVED0f_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SLOWDN_XORf_GET(r) ((((r).anacapcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SLOWDN_XORf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_SLOWDNf_GET(r) ((((r).anacapcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_SLOWDNf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_GET(r) ((((r).anacapcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_RESERVED0f_GET(r) ((((r).anacapcontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_RESERVED0f_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_RESERVED0f_GET(r) ((((r).anacapcontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_RESERVED0f_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_VCORANGEf_GET(r) (((r).anacapcontrol[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_VCORANGEf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_GET(r) (((r).anacapcontrol[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_SET(r,f) (r).anacapcontrol[0]=(((r).anacapcontrol[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access ANACAPCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANACAPCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANACAPCONTROLr,(_r._anacapcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_ANACAPCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANACAPCONTROLr,(_r._anacapcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANACAPCONTROLr BCMI_HYPERLITE_XGXS_ANACAPCONTROLr
#define ANACAPCONTROLr_SIZE BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_t ANACAPCONTROLr_t;
#define ANACAPCONTROLr_CLR BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CLR
#define ANACAPCONTROLr_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SET
#define ANACAPCONTROLr_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_GET
#define ANACAPCONTROLr_STATUSCONTROLf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUSCONTROLf_GET
#define ANACAPCONTROLr_STATUSCONTROLf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUSCONTROLf_SET
#define ANACAPCONTROLr_VCORESTARTf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCORESTARTf_GET
#define ANACAPCONTROLr_VCORESTARTf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCORESTARTf_SET
#define ANACAPCONTROLr_VCOFORCERANGE_ENf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCERANGE_ENf_GET
#define ANACAPCONTROLr_VCOFORCERANGE_ENf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCERANGE_ENf_SET
#define ANACAPCONTROLr_VCOFORCESLOWDN_ENf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCESLOWDN_ENf_GET
#define ANACAPCONTROLr_VCOFORCESLOWDN_ENf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_VCOFORCESLOWDN_ENf_SET
#define ANACAPCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_RESERVED0f_GET
#define ANACAPCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_RESERVED0f_SET
#define ANACAPCONTROLr_SLOWDN_XORf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SLOWDN_XORf_GET
#define ANACAPCONTROLr_SLOWDN_XORf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_SLOWDN_XORf_SET
#define ANACAPCONTROLr_STATUS_SLOWDNf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_SLOWDNf_GET
#define ANACAPCONTROLr_STATUS_SLOWDNf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_SLOWDNf_SET
#define ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_GET
#define ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCESLOWDNf_SET
#define ANACAPCONTROLr_CONTROL_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_RESERVED0f_GET
#define ANACAPCONTROLr_CONTROL_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_RESERVED0f_SET
#define ANACAPCONTROLr_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_RESERVED0f_GET
#define ANACAPCONTROLr_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_RESERVED0f_SET
#define ANACAPCONTROLr_STATUS_VCORANGEf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_VCORANGEf_GET
#define ANACAPCONTROLr_STATUS_VCORANGEf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_STATUS_VCORANGEf_SET
#define ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_GET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_GET
#define ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_SET BCMI_HYPERLITE_XGXS_ANACAPCONTROLr_CONTROL_VCOFORCERANGEf_SET
#define READ_ANACAPCONTROLr BCMI_HYPERLITE_XGXS_READ_ANACAPCONTROLr
#define WRITE_ANACAPCONTROLr BCMI_HYPERLITE_XGXS_WRITE_ANACAPCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANACAPCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAFREQDETCNTR
 * BLOCKS:   TXPLL
 * REGADDR:  0x8057
 * DESC:     Frequency detector control
 * SIZE:     32
 * FIELDS:
 *     WINDOW           
 *     RESOLUTION       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr (0x00005017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_SIZE 4

/*
 * This structure should be used to declare and program ANAFREQDETCNTR.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_s {
	uint32_t v[1];
	uint32_t anafreqdetcntr[1];
	uint32_t _anafreqdetcntr;
} BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_t;

#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_CLR(r) (r).anafreqdetcntr[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_SET(r,d) (r).anafreqdetcntr[0] = d
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_GET(r) (r).anafreqdetcntr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_RESOLUTIONf_GET(r) ((((r).anafreqdetcntr[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_RESOLUTIONf_SET(r,f) (r).anafreqdetcntr[0]=(((r).anafreqdetcntr[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_WINDOWf_GET(r) (((r).anafreqdetcntr[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_WINDOWf_SET(r,f) (r).anafreqdetcntr[0]=(((r).anafreqdetcntr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access ANAFREQDETCNTR.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAFREQDETCNTRr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr,(_r._anafreqdetcntr))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAFREQDETCNTRr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr,(_r._anafreqdetcntr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAFREQDETCNTRr BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr
#define ANAFREQDETCNTRr_SIZE BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_t ANAFREQDETCNTRr_t;
#define ANAFREQDETCNTRr_CLR BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_CLR
#define ANAFREQDETCNTRr_SET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_SET
#define ANAFREQDETCNTRr_GET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_GET
#define ANAFREQDETCNTRr_RESOLUTIONf_GET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_RESOLUTIONf_GET
#define ANAFREQDETCNTRr_RESOLUTIONf_SET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_RESOLUTIONf_SET
#define ANAFREQDETCNTRr_WINDOWf_GET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_WINDOWf_GET
#define ANAFREQDETCNTRr_WINDOWf_SET BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr_WINDOWf_SET
#define READ_ANAFREQDETCNTRr BCMI_HYPERLITE_XGXS_READ_ANAFREQDETCNTRr
#define WRITE_ANAFREQDETCNTRr BCMI_HYPERLITE_XGXS_WRITE_ANAFREQDETCNTRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAFREQDETCNTRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLASTATUS1
 * BLOCKS:   TXPLL
 * REGADDR:  0x8058
 * DESC:     PLL analog status
 * SIZE:     32
 * FIELDS:
 *     PLL_NDIV         
 *     RESERVED1        
 *     PLL_LOW          
 *     PLL_RANGE        
 *     KVH              
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r (0x00005018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_s {
	uint32_t v[1];
	uint32_t anapllastatus1[1];
	uint32_t _anapllastatus1;
} BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_CLR(r) (r).anapllastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_SET(r,d) (r).anapllastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_GET(r) (r).anapllastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED0f_GET(r) ((((r).anapllastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED0f_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_KVHf_GET(r) ((((r).anapllastatus1[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_KVHf_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_RANGEf_GET(r) ((((r).anapllastatus1[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_RANGEf_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_LOWf_GET(r) ((((r).anapllastatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_LOWf_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED1f_GET(r) ((((r).anapllastatus1[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED1f_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_NDIVf_GET(r) (((r).anapllastatus1[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_NDIVf_SET(r,f) (r).anapllastatus1[0]=(((r).anapllastatus1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access ANAPLLASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r,(_r._anapllastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r,(_r._anapllastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLASTATUS1r BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r
#define ANAPLLASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_t ANAPLLASTATUS1r_t;
#define ANAPLLASTATUS1r_CLR BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_CLR
#define ANAPLLASTATUS1r_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_SET
#define ANAPLLASTATUS1r_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_GET
#define ANAPLLASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED0f_GET
#define ANAPLLASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED0f_SET
#define ANAPLLASTATUS1r_KVHf_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_KVHf_GET
#define ANAPLLASTATUS1r_KVHf_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_KVHf_SET
#define ANAPLLASTATUS1r_PLL_RANGEf_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_RANGEf_GET
#define ANAPLLASTATUS1r_PLL_RANGEf_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_RANGEf_SET
#define ANAPLLASTATUS1r_PLL_LOWf_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_LOWf_GET
#define ANAPLLASTATUS1r_PLL_LOWf_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_LOWf_SET
#define ANAPLLASTATUS1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED1f_GET
#define ANAPLLASTATUS1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_RESERVED1f_SET
#define ANAPLLASTATUS1r_PLL_NDIVf_GET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_NDIVf_GET
#define ANAPLLASTATUS1r_PLL_NDIVf_SET BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r_PLL_NDIVf_SET
#define READ_ANAPLLASTATUS1r BCMI_HYPERLITE_XGXS_READ_ANAPLLASTATUS1r
#define WRITE_ANAPLLASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLACONTROL0
 * BLOCKS:   TXPLL
 * REGADDR:  0x805a
 * DESC:     PLL analog controls
 * SIZE:     32
 * FIELDS:
 *     CLKSEL_HALFRATE  
 *     VDDR_BGB         
 *     RESERVED0        
 *     ICLKDIV2         
 *     ICLKODRV2        
 *     ICLKODRV1        
 *     ICLKIDRV1        
 *     REFL_CLKGEN      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r (0x0000501a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_s {
	uint32_t v[1];
	uint32_t anapllacontrol0[1];
	uint32_t _anapllacontrol0;
} BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLR(r) (r).anapllacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_SET(r,d) (r).anapllacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_GET(r) (r).anapllacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_REFL_CLKGENf_GET(r) ((((r).anapllacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_REFL_CLKGENf_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKIDRV1f_GET(r) ((((r).anapllacontrol0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKIDRV1f_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV1f_GET(r) ((((r).anapllacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV1f_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV2f_GET(r) ((((r).anapllacontrol0[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV2f_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKDIV2f_GET(r) ((((r).anapllacontrol0[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKDIV2f_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_RESERVED0f_GET(r) ((((r).anapllacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_RESERVED0f_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_VDDR_BGBf_GET(r) ((((r).anapllacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_VDDR_BGBf_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLKSEL_HALFRATEf_GET(r) (((r).anapllacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLKSEL_HALFRATEf_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r,(_r._anapllacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r,(_r._anapllacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL0r BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r
#define ANAPLLACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_t ANAPLLACONTROL0r_t;
#define ANAPLLACONTROL0r_CLR BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLR
#define ANAPLLACONTROL0r_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_SET
#define ANAPLLACONTROL0r_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_GET
#define ANAPLLACONTROL0r_REFL_CLKGENf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_REFL_CLKGENf_GET
#define ANAPLLACONTROL0r_REFL_CLKGENf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_REFL_CLKGENf_SET
#define ANAPLLACONTROL0r_ICLKIDRV1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKIDRV1f_GET
#define ANAPLLACONTROL0r_ICLKIDRV1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKIDRV1f_SET
#define ANAPLLACONTROL0r_ICLKODRV1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV1f_GET
#define ANAPLLACONTROL0r_ICLKODRV1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV1f_SET
#define ANAPLLACONTROL0r_ICLKODRV2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV2f_GET
#define ANAPLLACONTROL0r_ICLKODRV2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKODRV2f_SET
#define ANAPLLACONTROL0r_ICLKDIV2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKDIV2f_GET
#define ANAPLLACONTROL0r_ICLKDIV2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_ICLKDIV2f_SET
#define ANAPLLACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_RESERVED0f_GET
#define ANAPLLACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_RESERVED0f_SET
#define ANAPLLACONTROL0r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_VDDR_BGBf_GET
#define ANAPLLACONTROL0r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_VDDR_BGBf_SET
#define ANAPLLACONTROL0r_CLKSEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLKSEL_HALFRATEf_GET
#define ANAPLLACONTROL0r_CLKSEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r_CLKSEL_HALFRATEf_SET
#define READ_ANAPLLACONTROL0r BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL0r
#define WRITE_ANAPLLACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLACONTROL1
 * BLOCKS:   TXPLL
 * REGADDR:  0x805b
 * DESC:     PLL analog controls
 * SIZE:     32
 * FIELDS:
 *     REFH_CLKGEN      
 *     PLL2RX_CLKBW     
 *     RESERVED1        
 *     IBIAS_ALL        
 *     ICLKIBUF4        
 *     RESERVED0        
 *     KVHCE            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r (0x0000501b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_s {
	uint32_t v[1];
	uint32_t anapllacontrol1[1];
	uint32_t _anapllacontrol1;
} BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_CLR(r) (r).anapllacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_SET(r,d) (r).anapllacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_GET(r) (r).anapllacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_KVHCEf_GET(r) ((((r).anapllacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_KVHCEf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED0f_GET(r) ((((r).anapllacontrol1[0]) >> 11) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED0f_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0xf << 11)) | ((((uint32_t)f) & 0xf) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_ICLKIBUF4f_GET(r) ((((r).anapllacontrol1[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_ICLKIBUF4f_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_IBIAS_ALLf_GET(r) ((((r).anapllacontrol1[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_IBIAS_ALLf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED1f_GET(r) ((((r).anapllacontrol1[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED1f_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_PLL2RX_CLKBWf_GET(r) ((((r).anapllacontrol1[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_PLL2RX_CLKBWf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_REFH_CLKGENf_GET(r) (((r).anapllacontrol1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_REFH_CLKGENf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r,(_r._anapllacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r,(_r._anapllacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL1r BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r
#define ANAPLLACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_t ANAPLLACONTROL1r_t;
#define ANAPLLACONTROL1r_CLR BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_CLR
#define ANAPLLACONTROL1r_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_SET
#define ANAPLLACONTROL1r_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_GET
#define ANAPLLACONTROL1r_KVHCEf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_KVHCEf_GET
#define ANAPLLACONTROL1r_KVHCEf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_KVHCEf_SET
#define ANAPLLACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED0f_GET
#define ANAPLLACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED0f_SET
#define ANAPLLACONTROL1r_ICLKIBUF4f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_ICLKIBUF4f_GET
#define ANAPLLACONTROL1r_ICLKIBUF4f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_ICLKIBUF4f_SET
#define ANAPLLACONTROL1r_IBIAS_ALLf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_IBIAS_ALLf_GET
#define ANAPLLACONTROL1r_IBIAS_ALLf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_IBIAS_ALLf_SET
#define ANAPLLACONTROL1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED1f_GET
#define ANAPLLACONTROL1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_RESERVED1f_SET
#define ANAPLLACONTROL1r_PLL2RX_CLKBWf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_PLL2RX_CLKBWf_GET
#define ANAPLLACONTROL1r_PLL2RX_CLKBWf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_PLL2RX_CLKBWf_SET
#define ANAPLLACONTROL1r_REFH_CLKGENf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_REFH_CLKGENf_GET
#define ANAPLLACONTROL1r_REFH_CLKGENf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r_REFH_CLKGENf_SET
#define READ_ANAPLLACONTROL1r BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL1r
#define WRITE_ANAPLLACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLACONTROL2
 * BLOCKS:   TXPLL
 * REGADDR:  0x805c
 * DESC:     PLL analog controls
 * SIZE:     32
 * FIELDS:
 *     ENABLE_FTUNE     
 *     EN_P3            
 *     IQP              
 *     REFL_PLL         
 *     REFH_PLL         
 *     IBMIN            
 *     IBMODE           
 *     IBMAX            
 *     ICP1             
 *     ICP0             
 *     ICP2             
 *     ICK1             
 *     ICK0             
 *     ICK2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r (0x0000501c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_s {
	uint32_t v[1];
	uint32_t anapllacontrol2[1];
	uint32_t _anapllacontrol2;
} BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_CLR(r) (r).anapllacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_SET(r,d) (r).anapllacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_GET(r) (r).anapllacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK2f_GET(r) ((((r).anapllacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK2f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK0f_GET(r) ((((r).anapllacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK0f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK1f_GET(r) ((((r).anapllacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK1f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP2f_GET(r) ((((r).anapllacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP2f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP0f_GET(r) ((((r).anapllacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP0f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP1f_GET(r) ((((r).anapllacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP1f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMAXf_GET(r) ((((r).anapllacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMAXf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMODEf_GET(r) ((((r).anapllacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMODEf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMINf_GET(r) ((((r).anapllacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMINf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFH_PLLf_GET(r) ((((r).anapllacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFH_PLLf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFL_PLLf_GET(r) ((((r).anapllacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFL_PLLf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IQPf_GET(r) ((((r).anapllacontrol2[0]) >> 2) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IQPf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_EN_P3f_GET(r) ((((r).anapllacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_EN_P3f_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ENABLE_FTUNEf_GET(r) (((r).anapllacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ENABLE_FTUNEf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r,(_r._anapllacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r,(_r._anapllacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL2r BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r
#define ANAPLLACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_t ANAPLLACONTROL2r_t;
#define ANAPLLACONTROL2r_CLR BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_CLR
#define ANAPLLACONTROL2r_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_SET
#define ANAPLLACONTROL2r_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_GET
#define ANAPLLACONTROL2r_ICK2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK2f_GET
#define ANAPLLACONTROL2r_ICK2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK2f_SET
#define ANAPLLACONTROL2r_ICK0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK0f_GET
#define ANAPLLACONTROL2r_ICK0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK0f_SET
#define ANAPLLACONTROL2r_ICK1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK1f_GET
#define ANAPLLACONTROL2r_ICK1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICK1f_SET
#define ANAPLLACONTROL2r_ICP2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP2f_GET
#define ANAPLLACONTROL2r_ICP2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP2f_SET
#define ANAPLLACONTROL2r_ICP0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP0f_GET
#define ANAPLLACONTROL2r_ICP0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP0f_SET
#define ANAPLLACONTROL2r_ICP1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP1f_GET
#define ANAPLLACONTROL2r_ICP1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ICP1f_SET
#define ANAPLLACONTROL2r_IBMAXf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMAXf_GET
#define ANAPLLACONTROL2r_IBMAXf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMAXf_SET
#define ANAPLLACONTROL2r_IBMODEf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMODEf_GET
#define ANAPLLACONTROL2r_IBMODEf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMODEf_SET
#define ANAPLLACONTROL2r_IBMINf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMINf_GET
#define ANAPLLACONTROL2r_IBMINf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IBMINf_SET
#define ANAPLLACONTROL2r_REFH_PLLf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFH_PLLf_GET
#define ANAPLLACONTROL2r_REFH_PLLf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFH_PLLf_SET
#define ANAPLLACONTROL2r_REFL_PLLf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFL_PLLf_GET
#define ANAPLLACONTROL2r_REFL_PLLf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_REFL_PLLf_SET
#define ANAPLLACONTROL2r_IQPf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IQPf_GET
#define ANAPLLACONTROL2r_IQPf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_IQPf_SET
#define ANAPLLACONTROL2r_EN_P3f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_EN_P3f_GET
#define ANAPLLACONTROL2r_EN_P3f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_EN_P3f_SET
#define ANAPLLACONTROL2r_ENABLE_FTUNEf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ENABLE_FTUNEf_GET
#define ANAPLLACONTROL2r_ENABLE_FTUNEf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r_ENABLE_FTUNEf_SET
#define READ_ANAPLLACONTROL2r BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL2r
#define WRITE_ANAPLLACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLACONTROL3
 * BLOCKS:   TXPLL
 * REGADDR:  0x805d
 * DESC:     PLL analog controls
 * SIZE:     32
 * FIELDS:
 *     IVCO1            
 *     IVCO0            
 *     IVCO2            
 *     ICML1            
 *     ICML0            
 *     ICML2            
 *     ICOMP1           
 *     ICOMP0           
 *     ICOMP2           
 *     IOP1             
 *     IOP0             
 *     IOP2             
 *     TEST_VREF        
 *     TEST_VC          
 *     TEST_PLL         
 *     TEST_RX          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r (0x0000501d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_s {
	uint32_t v[1];
	uint32_t anapllacontrol3[1];
	uint32_t _anapllacontrol3;
} BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_CLR(r) (r).anapllacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_SET(r,d) (r).anapllacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_GET(r) (r).anapllacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_RXf_GET(r) ((((r).anapllacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_RXf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_PLLf_GET(r) ((((r).anapllacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_PLLf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VCf_GET(r) ((((r).anapllacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VCf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VREFf_GET(r) ((((r).anapllacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VREFf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP2f_GET(r) ((((r).anapllacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP0f_GET(r) ((((r).anapllacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP1f_GET(r) ((((r).anapllacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP2f_GET(r) ((((r).anapllacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP0f_GET(r) ((((r).anapllacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP1f_GET(r) ((((r).anapllacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML2f_GET(r) ((((r).anapllacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML0f_GET(r) ((((r).anapllacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML1f_GET(r) ((((r).anapllacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO2f_GET(r) ((((r).anapllacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO0f_GET(r) ((((r).anapllacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO1f_GET(r) (((r).anapllacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r,(_r._anapllacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r,(_r._anapllacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL3r BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r
#define ANAPLLACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_t ANAPLLACONTROL3r_t;
#define ANAPLLACONTROL3r_CLR BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_CLR
#define ANAPLLACONTROL3r_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_SET
#define ANAPLLACONTROL3r_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_GET
#define ANAPLLACONTROL3r_TEST_RXf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_RXf_GET
#define ANAPLLACONTROL3r_TEST_RXf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_RXf_SET
#define ANAPLLACONTROL3r_TEST_PLLf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_PLLf_GET
#define ANAPLLACONTROL3r_TEST_PLLf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_PLLf_SET
#define ANAPLLACONTROL3r_TEST_VCf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VCf_GET
#define ANAPLLACONTROL3r_TEST_VCf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VCf_SET
#define ANAPLLACONTROL3r_TEST_VREFf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VREFf_GET
#define ANAPLLACONTROL3r_TEST_VREFf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_TEST_VREFf_SET
#define ANAPLLACONTROL3r_IOP2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP2f_GET
#define ANAPLLACONTROL3r_IOP2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP2f_SET
#define ANAPLLACONTROL3r_IOP0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP0f_GET
#define ANAPLLACONTROL3r_IOP0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP0f_SET
#define ANAPLLACONTROL3r_IOP1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP1f_GET
#define ANAPLLACONTROL3r_IOP1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IOP1f_SET
#define ANAPLLACONTROL3r_ICOMP2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP2f_GET
#define ANAPLLACONTROL3r_ICOMP2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP2f_SET
#define ANAPLLACONTROL3r_ICOMP0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP0f_GET
#define ANAPLLACONTROL3r_ICOMP0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP0f_SET
#define ANAPLLACONTROL3r_ICOMP1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP1f_GET
#define ANAPLLACONTROL3r_ICOMP1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICOMP1f_SET
#define ANAPLLACONTROL3r_ICML2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML2f_GET
#define ANAPLLACONTROL3r_ICML2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML2f_SET
#define ANAPLLACONTROL3r_ICML0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML0f_GET
#define ANAPLLACONTROL3r_ICML0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML0f_SET
#define ANAPLLACONTROL3r_ICML1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML1f_GET
#define ANAPLLACONTROL3r_ICML1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_ICML1f_SET
#define ANAPLLACONTROL3r_IVCO2f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO2f_GET
#define ANAPLLACONTROL3r_IVCO2f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO2f_SET
#define ANAPLLACONTROL3r_IVCO0f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO0f_GET
#define ANAPLLACONTROL3r_IVCO0f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO0f_SET
#define ANAPLLACONTROL3r_IVCO1f_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO1f_GET
#define ANAPLLACONTROL3r_IVCO1f_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r_IVCO1f_SET
#define READ_ANAPLLACONTROL3r BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL3r
#define WRITE_ANAPLLACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANAPLLACONTROL4
 * BLOCKS:   TXPLL
 * REGADDR:  0x805e
 * DESC:     PLL analog controls
 * SIZE:     32
 * FIELDS:
 *     PTATADJ          
 *     CTATADJ          
 *     ACTRL            
 *     COMP_VTH         
 *     VDDR_BGB         
 *     KVH_FORCE        
 *     EN65G            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r (0x0000501e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_s {
	uint32_t v[1];
	uint32_t anapllacontrol4[1];
	uint32_t _anapllacontrol4;
} BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_t;

#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CLR(r) (r).anapllacontrol4[0] = 0
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_SET(r,d) (r).anapllacontrol4[0] = d
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_GET(r) (r).anapllacontrol4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_EN65Gf_GET(r) ((((r).anapllacontrol4[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_EN65Gf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_KVH_FORCEf_GET(r) ((((r).anapllacontrol4[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_KVH_FORCEf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_VDDR_BGBf_GET(r) ((((r).anapllacontrol4[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_VDDR_BGBf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_COMP_VTHf_GET(r) ((((r).anapllacontrol4[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_COMP_VTHf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_ACTRLf_GET(r) ((((r).anapllacontrol4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_ACTRLf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CTATADJf_GET(r) ((((r).anapllacontrol4[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CTATADJf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_PTATADJf_GET(r) (((r).anapllacontrol4[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_PTATADJf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access ANAPLLACONTROL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r,(_r._anapllacontrol4))
#define BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r,(_r._anapllacontrol4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL4r BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r
#define ANAPLLACONTROL4r_SIZE BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_t ANAPLLACONTROL4r_t;
#define ANAPLLACONTROL4r_CLR BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CLR
#define ANAPLLACONTROL4r_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_SET
#define ANAPLLACONTROL4r_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_GET
#define ANAPLLACONTROL4r_EN65Gf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_EN65Gf_GET
#define ANAPLLACONTROL4r_EN65Gf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_EN65Gf_SET
#define ANAPLLACONTROL4r_KVH_FORCEf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_KVH_FORCEf_GET
#define ANAPLLACONTROL4r_KVH_FORCEf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_KVH_FORCEf_SET
#define ANAPLLACONTROL4r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_VDDR_BGBf_GET
#define ANAPLLACONTROL4r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_VDDR_BGBf_SET
#define ANAPLLACONTROL4r_COMP_VTHf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_COMP_VTHf_GET
#define ANAPLLACONTROL4r_COMP_VTHf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_COMP_VTHf_SET
#define ANAPLLACONTROL4r_ACTRLf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_ACTRLf_GET
#define ANAPLLACONTROL4r_ACTRLf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_ACTRLf_SET
#define ANAPLLACONTROL4r_CTATADJf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CTATADJf_GET
#define ANAPLLACONTROL4r_CTATADJf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_CTATADJf_SET
#define ANAPLLACONTROL4r_PTATADJf_GET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_PTATADJf_GET
#define ANAPLLACONTROL4r_PTATADJf_SET BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r_PTATADJf_SET
#define READ_ANAPLLACONTROL4r BCMI_HYPERLITE_XGXS_READ_ANAPLLACONTROL4r
#define WRITE_ANAPLLACONTROL4r BCMI_HYPERLITE_XGXS_WRITE_ANAPLLACONTROL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANAPLLACONTROL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXASTATUS0
 * BLOCKS:   TX0
 * REGADDR:  0x8060
 * DESC:     Tx analog status 0 register
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK       
 *     RLTXFERR_STKY    
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r (0x00006010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program ANATXASTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_s {
	uint32_t v[1];
	uint32_t anatxastatus0[1];
	uint32_t _anatxastatus0;
} BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_CLR(r) (r).anatxastatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_SET(r,d) (r).anatxastatus0[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_GET(r) (r).anatxastatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RESERVED0f_GET(r) ((((r).anatxastatus0[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RESERVED0f_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXDISABLE_LNf_GET(r) ((((r).anatxastatus0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXDISABLE_LNf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXFERR_STKYf_GET(r) ((((r).anatxastatus0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXFERR_STKYf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TBI_MODEf_GET(r) ((((r).anatxastatus0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TBI_MODEf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_RESETf_GET(r) ((((r).anatxastatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_RESETf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_PWRDNf_GET(r) ((((r).anatxastatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_PWRDNf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RLTXFERR_STKYf_GET(r) ((((r).anatxastatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RLTXFERR_STKYf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXPLL_LOCKf_GET(r) (((r).anatxastatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXPLL_LOCKf_SET(r,f) (r).anatxastatus0[0]=(((r).anatxastatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANATXASTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXASTATUS0r,(_r._anatxastatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXASTATUS0r,(_r._anatxastatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXASTATUS0r BCMI_HYPERLITE_XGXS_ANATXASTATUS0r
#define ANATXASTATUS0r_SIZE BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_t ANATXASTATUS0r_t;
#define ANATXASTATUS0r_CLR BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_CLR
#define ANATXASTATUS0r_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_SET
#define ANATXASTATUS0r_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_GET
#define ANATXASTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RESERVED0f_GET
#define ANATXASTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RESERVED0f_SET
#define ANATXASTATUS0r_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXDISABLE_LNf_GET
#define ANATXASTATUS0r_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXDISABLE_LNf_SET
#define ANATXASTATUS0r_TXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXFERR_STKYf_GET
#define ANATXASTATUS0r_TXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXFERR_STKYf_SET
#define ANATXASTATUS0r_TBI_MODEf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TBI_MODEf_GET
#define ANATXASTATUS0r_TBI_MODEf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TBI_MODEf_SET
#define ANATXASTATUS0r_TX_RESETf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_RESETf_GET
#define ANATXASTATUS0r_TX_RESETf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_RESETf_SET
#define ANATXASTATUS0r_TX_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_PWRDNf_GET
#define ANATXASTATUS0r_TX_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TX_PWRDNf_SET
#define ANATXASTATUS0r_RLTXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RLTXFERR_STKYf_GET
#define ANATXASTATUS0r_RLTXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_RLTXFERR_STKYf_SET
#define ANATXASTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXPLL_LOCKf_GET
#define ANATXASTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS0r_TXPLL_LOCKf_SET
#define READ_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_READ_ANATXASTATUS0r
#define WRITE_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_WRITE_ANATXASTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXASTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXACONTROL0
 * BLOCKS:   TX0
 * REGADDR:  0x8061
 * DESC:     Tx analog control 0 register
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     RESERVED1        
 *     GLOOPOUTEN       
 *     TX1G_FIFO_RST    
 *     FORCE_TXCLK      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r (0x00006011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program ANATXACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_s {
	uint32_t v[1];
	uint32_t anatxacontrol0[1];
	uint32_t _anatxacontrol0;
} BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_CLR(r) (r).anatxacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_SET(r,d) (r).anatxacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GET(r) (r).anatxacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED0f_GET(r) ((((r).anatxacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED0f_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_FORCE_TXCLKf_GET(r) ((((r).anatxacontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_FORCE_TXCLKf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET(r) ((((r).anatxacontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GLOOPOUTENf_GET(r) ((((r).anatxacontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GLOOPOUTENf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED1f_GET(r) ((((r).anatxacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED1f_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PRBS_ENf_GET(r) ((((r).anatxacontrol0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PRBS_ENf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_ENf_GET(r) ((((r).anatxacontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_ENf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_STRTf_GET(r) ((((r).anatxacontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_STRTf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPOL_FLIPf_GET(r) ((((r).anatxacontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPOL_FLIPf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RTBI_FLIPf_GET(r) ((((r).anatxacontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RTBI_FLIPf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_Rf_GET(r) ((((r).anatxacontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_Rf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_FORCE_Rf_GET(r) ((((r).anatxacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_FORCE_Rf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPAT_ENf_GET(r) ((((r).anatxacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPAT_ENf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX_MDATA_ENf_GET(r) (((r).anatxacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX_MDATA_ENf_SET(r,f) (r).anatxacontrol0[0]=(((r).anatxacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANATXACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL0r,(_r._anatxacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL0r,(_r._anatxacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXACONTROL0r BCMI_HYPERLITE_XGXS_ANATXACONTROL0r
#define ANATXACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_t ANATXACONTROL0r_t;
#define ANATXACONTROL0r_CLR BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_CLR
#define ANATXACONTROL0r_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_SET
#define ANATXACONTROL0r_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GET
#define ANATXACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED0f_GET
#define ANATXACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED0f_SET
#define ANATXACONTROL0r_FORCE_TXCLKf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_FORCE_TXCLKf_GET
#define ANATXACONTROL0r_FORCE_TXCLKf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_FORCE_TXCLKf_SET
#define ANATXACONTROL0r_TX1G_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET
#define ANATXACONTROL0r_TX1G_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET
#define ANATXACONTROL0r_GLOOPOUTENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GLOOPOUTENf_GET
#define ANATXACONTROL0r_GLOOPOUTENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_GLOOPOUTENf_SET
#define ANATXACONTROL0r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED1f_GET
#define ANATXACONTROL0r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RESERVED1f_SET
#define ANATXACONTROL0r_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PRBS_ENf_GET
#define ANATXACONTROL0r_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PRBS_ENf_SET
#define ANATXACONTROL0r_PCKT_ENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_ENf_GET
#define ANATXACONTROL0r_PCKT_ENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_ENf_SET
#define ANATXACONTROL0r_PCKT_STRTf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_STRTf_GET
#define ANATXACONTROL0r_PCKT_STRTf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_PCKT_STRTf_SET
#define ANATXACONTROL0r_TXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPOL_FLIPf_GET
#define ANATXACONTROL0r_TXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPOL_FLIPf_SET
#define ANATXACONTROL0r_RTBI_FLIPf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RTBI_FLIPf_GET
#define ANATXACONTROL0r_RTBI_FLIPf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_RTBI_FLIPf_SET
#define ANATXACONTROL0r_EDEN_Rf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_Rf_GET
#define ANATXACONTROL0r_EDEN_Rf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_Rf_SET
#define ANATXACONTROL0r_EDEN_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_FORCE_Rf_GET
#define ANATXACONTROL0r_EDEN_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_EDEN_FORCE_Rf_SET
#define ANATXACONTROL0r_TXPAT_ENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPAT_ENf_GET
#define ANATXACONTROL0r_TXPAT_ENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TXPAT_ENf_SET
#define ANATXACONTROL0r_TX_MDATA_ENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX_MDATA_ENf_GET
#define ANATXACONTROL0r_TX_MDATA_ENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL0r_TX_MDATA_ENf_SET
#define READ_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL0r
#define WRITE_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXMDATA0
 * BLOCKS:   TX0
 * REGADDR:  0x8062
 * DESC:     Tx test mux data 0 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAL   
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSEL     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r (0x00006012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_SIZE 4

/*
 * This structure should be used to declare and program ANATXMDATA0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXMDATA0r_s {
	uint32_t v[1];
	uint32_t anatxmdata0[1];
	uint32_t _anatxmdata0;
} BCMI_HYPERLITE_XGXS_ANATXMDATA0r_t;

#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_CLR(r) (r).anatxmdata0[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_SET(r,d) (r).anatxmdata0[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_GET(r) (r).anatxmdata0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXTESTMUXSELf_GET(r) ((((r).anatxmdata0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXTESTMUXSELf_SET(r,f) (r).anatxmdata0[0]=(((r).anatxmdata0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_RLFIFO_TSTSELf_GET(r) ((((r).anatxmdata0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_RLFIFO_TSTSELf_SET(r,f) (r).anatxmdata0[0]=(((r).anatxmdata0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXMDIOTSTDATALf_GET(r) (((r).anatxmdata0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXMDIOTSTDATALf_SET(r,f) (r).anatxmdata0[0]=(((r).anatxmdata0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access ANATXMDATA0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXMDATA0r,(_r._anatxmdata0))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXMDATA0r,(_r._anatxmdata0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXMDATA0r BCMI_HYPERLITE_XGXS_ANATXMDATA0r
#define ANATXMDATA0r_SIZE BCMI_HYPERLITE_XGXS_ANATXMDATA0r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXMDATA0r_t ANATXMDATA0r_t;
#define ANATXMDATA0r_CLR BCMI_HYPERLITE_XGXS_ANATXMDATA0r_CLR
#define ANATXMDATA0r_SET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_SET
#define ANATXMDATA0r_GET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_GET
#define ANATXMDATA0r_TXTESTMUXSELf_GET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXTESTMUXSELf_GET
#define ANATXMDATA0r_TXTESTMUXSELf_SET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXTESTMUXSELf_SET
#define ANATXMDATA0r_RLFIFO_TSTSELf_GET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_RLFIFO_TSTSELf_GET
#define ANATXMDATA0r_RLFIFO_TSTSELf_SET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_RLFIFO_TSTSELf_SET
#define ANATXMDATA0r_TXMDIOTSTDATALf_GET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXMDIOTSTDATALf_GET
#define ANATXMDATA0r_TXMDIOTSTDATALf_SET BCMI_HYPERLITE_XGXS_ANATXMDATA0r_TXMDIOTSTDATALf_SET
#define READ_ANATXMDATA0r BCMI_HYPERLITE_XGXS_READ_ANATXMDATA0r
#define WRITE_ANATXMDATA0r BCMI_HYPERLITE_XGXS_WRITE_ANATXMDATA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXMDATA0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXMDATA1
 * BLOCKS:   TX0
 * REGADDR:  0x8063
 * DESC:     Tx test mux data 1 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAH   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r (0x00006013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_SIZE 4

/*
 * This structure should be used to declare and program ANATXMDATA1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXMDATA1r_s {
	uint32_t v[1];
	uint32_t anatxmdata1[1];
	uint32_t _anatxmdata1;
} BCMI_HYPERLITE_XGXS_ANATXMDATA1r_t;

#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_CLR(r) (r).anatxmdata1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_SET(r,d) (r).anatxmdata1[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_GET(r) (r).anatxmdata1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_RESERVED0f_GET(r) ((((r).anatxmdata1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_RESERVED0f_SET(r,f) (r).anatxmdata1[0]=(((r).anatxmdata1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_TXMDIOTSTDATAHf_GET(r) (((r).anatxmdata1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_ANATXMDATA1r_TXMDIOTSTDATAHf_SET(r,f) (r).anatxmdata1[0]=(((r).anatxmdata1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access ANATXMDATA1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXMDATA1r,(_r._anatxmdata1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXMDATA1r,(_r._anatxmdata1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXMDATA1r BCMI_HYPERLITE_XGXS_ANATXMDATA1r
#define ANATXMDATA1r_SIZE BCMI_HYPERLITE_XGXS_ANATXMDATA1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXMDATA1r_t ANATXMDATA1r_t;
#define ANATXMDATA1r_CLR BCMI_HYPERLITE_XGXS_ANATXMDATA1r_CLR
#define ANATXMDATA1r_SET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_SET
#define ANATXMDATA1r_GET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_GET
#define ANATXMDATA1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_RESERVED0f_GET
#define ANATXMDATA1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_RESERVED0f_SET
#define ANATXMDATA1r_TXMDIOTSTDATAHf_GET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_TXMDIOTSTDATAHf_GET
#define ANATXMDATA1r_TXMDIOTSTDATAHf_SET BCMI_HYPERLITE_XGXS_ANATXMDATA1r_TXMDIOTSTDATAHf_SET
#define READ_ANATXMDATA1r BCMI_HYPERLITE_XGXS_READ_ANATXMDATA1r
#define WRITE_ANATXMDATA1r BCMI_HYPERLITE_XGXS_WRITE_ANATXMDATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXMDATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXASTATUS1
 * BLOCKS:   TX0
 * REGADDR:  0x8064
 * DESC:     Tx analog status 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     TX_ID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r (0x00006014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program ANATXASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_s {
	uint32_t v[1];
	uint32_t anatxastatus1[1];
	uint32_t _anatxastatus1;
} BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_CLR(r) (r).anatxastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_SET(r,d) (r).anatxastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_GET(r) (r).anatxastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_TX_IDf_GET(r) ((((r).anatxastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_TX_IDf_SET(r,f) (r).anatxastatus1[0]=(((r).anatxastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_RESERVED0f_GET(r) (((r).anatxastatus1[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_RESERVED0f_SET(r,f) (r).anatxastatus1[0]=(((r).anatxastatus1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access ANATXASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXASTATUS1r,(_r._anatxastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXASTATUS1r,(_r._anatxastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXASTATUS1r BCMI_HYPERLITE_XGXS_ANATXASTATUS1r
#define ANATXASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_t ANATXASTATUS1r_t;
#define ANATXASTATUS1r_CLR BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_CLR
#define ANATXASTATUS1r_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_SET
#define ANATXASTATUS1r_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_GET
#define ANATXASTATUS1r_TX_IDf_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_TX_IDf_GET
#define ANATXASTATUS1r_TX_IDf_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_TX_IDf_SET
#define ANATXASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_RESERVED0f_GET
#define ANATXASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANATXASTATUS1r_RESERVED0f_SET
#define READ_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_READ_ANATXASTATUS1r
#define WRITE_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_ANATXASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXACONTROL1
 * BLOCKS:   TX0
 * REGADDR:  0x8065
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IFULLSPD         
 *     TX_SEL_HALFRATE  
 *     DRIVER_VCM       
 *     TICKSEL          
 *     VDDR_BGB         
 *     DRIVERMODE       
 *     NEWBIAS_EN       
 *     REFH_TX          
 *     REFL_TX          
 *     ID2C             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r (0x00006015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program ANATXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_s {
	uint32_t v[1];
	uint32_t anatxacontrol1[1];
	uint32_t _anatxacontrol1;
} BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_CLR(r) (r).anatxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_SET(r,d) (r).anatxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_GET(r) (r).anatxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_ID2Cf_GET(r) ((((r).anatxacontrol1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_ID2Cf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFL_TXf_GET(r) ((((r).anatxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFL_TXf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFH_TXf_GET(r) ((((r).anatxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFH_TXf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_NEWBIAS_ENf_GET(r) ((((r).anatxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_NEWBIAS_ENf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVERMODEf_GET(r) ((((r).anatxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVERMODEf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_VDDR_BGBf_GET(r) ((((r).anatxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_VDDR_BGBf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TICKSELf_GET(r) ((((r).anatxacontrol1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TICKSELf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVER_VCMf_GET(r) ((((r).anatxacontrol1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVER_VCMf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET(r) ((((r).anatxacontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_IFULLSPDf_GET(r) (((r).anatxacontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_IFULLSPDf_SET(r,f) (r).anatxacontrol1[0]=(((r).anatxacontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access ANATXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL1r,(_r._anatxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL1r,(_r._anatxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXACONTROL1r BCMI_HYPERLITE_XGXS_ANATXACONTROL1r
#define ANATXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_t ANATXACONTROL1r_t;
#define ANATXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_CLR
#define ANATXACONTROL1r_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_SET
#define ANATXACONTROL1r_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_GET
#define ANATXACONTROL1r_ID2Cf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_ID2Cf_GET
#define ANATXACONTROL1r_ID2Cf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_ID2Cf_SET
#define ANATXACONTROL1r_REFL_TXf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFL_TXf_GET
#define ANATXACONTROL1r_REFL_TXf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFL_TXf_SET
#define ANATXACONTROL1r_REFH_TXf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFH_TXf_GET
#define ANATXACONTROL1r_REFH_TXf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_REFH_TXf_SET
#define ANATXACONTROL1r_NEWBIAS_ENf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_NEWBIAS_ENf_GET
#define ANATXACONTROL1r_NEWBIAS_ENf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_NEWBIAS_ENf_SET
#define ANATXACONTROL1r_DRIVERMODEf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVERMODEf_GET
#define ANATXACONTROL1r_DRIVERMODEf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVERMODEf_SET
#define ANATXACONTROL1r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_VDDR_BGBf_GET
#define ANATXACONTROL1r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_VDDR_BGBf_SET
#define ANATXACONTROL1r_TICKSELf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TICKSELf_GET
#define ANATXACONTROL1r_TICKSELf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TICKSELf_SET
#define ANATXACONTROL1r_DRIVER_VCMf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVER_VCMf_GET
#define ANATXACONTROL1r_DRIVER_VCMf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_DRIVER_VCMf_SET
#define ANATXACONTROL1r_TX_SEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET
#define ANATXACONTROL1r_TX_SEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET
#define ANATXACONTROL1r_IFULLSPDf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_IFULLSPDf_GET
#define ANATXACONTROL1r_IFULLSPDf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL1r_IFULLSPDf_SET
#define READ_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL1r
#define WRITE_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANATXACONTROL2
 * BLOCKS:   TX0
 * REGADDR:  0x8066
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     IMODE_DRVR       
 *     IMAX_DRVR        
 *     IMIN_DRVR        
 *     I21MUX           
 *     IMODE_PREDRV     
 *     IMAX_PREDRV      
 *     IMIN_PREDRV      
 *     ICBUF2T          
 *     ICBUF1T          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r (0x00006016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program ANATXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_s {
	uint32_t v[1];
	uint32_t anatxacontrol2[1];
	uint32_t _anatxacontrol2;
} BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_CLR(r) (r).anatxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_SET(r,d) (r).anatxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_GET(r) (r).anatxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF1Tf_GET(r) ((((r).anatxacontrol2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF1Tf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF2Tf_GET(r) ((((r).anatxacontrol2[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF2Tf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_PREDRVf_GET(r) ((((r).anatxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_PREDRVf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_PREDRVf_GET(r) ((((r).anatxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_PREDRVf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_PREDRVf_GET(r) ((((r).anatxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_PREDRVf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_I21MUXf_GET(r) ((((r).anatxacontrol2[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_I21MUXf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_DRVRf_GET(r) ((((r).anatxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_DRVRf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_DRVRf_GET(r) ((((r).anatxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_DRVRf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_DRVRf_GET(r) ((((r).anatxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_DRVRf_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_RESERVED0f_GET(r) (((r).anatxacontrol2[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_RESERVED0f_SET(r,f) (r).anatxacontrol2[0]=(((r).anatxacontrol2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access ANATXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL2r,(_r._anatxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANATXACONTROL2r,(_r._anatxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXACONTROL2r BCMI_HYPERLITE_XGXS_ANATXACONTROL2r
#define ANATXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_t ANATXACONTROL2r_t;
#define ANATXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_CLR
#define ANATXACONTROL2r_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_SET
#define ANATXACONTROL2r_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_GET
#define ANATXACONTROL2r_ICBUF1Tf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF1Tf_GET
#define ANATXACONTROL2r_ICBUF1Tf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF1Tf_SET
#define ANATXACONTROL2r_ICBUF2Tf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF2Tf_GET
#define ANATXACONTROL2r_ICBUF2Tf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_ICBUF2Tf_SET
#define ANATXACONTROL2r_IMIN_PREDRVf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_PREDRVf_GET
#define ANATXACONTROL2r_IMIN_PREDRVf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_PREDRVf_SET
#define ANATXACONTROL2r_IMAX_PREDRVf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_PREDRVf_GET
#define ANATXACONTROL2r_IMAX_PREDRVf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_PREDRVf_SET
#define ANATXACONTROL2r_IMODE_PREDRVf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_PREDRVf_GET
#define ANATXACONTROL2r_IMODE_PREDRVf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_PREDRVf_SET
#define ANATXACONTROL2r_I21MUXf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_I21MUXf_GET
#define ANATXACONTROL2r_I21MUXf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_I21MUXf_SET
#define ANATXACONTROL2r_IMIN_DRVRf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_DRVRf_GET
#define ANATXACONTROL2r_IMIN_DRVRf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMIN_DRVRf_SET
#define ANATXACONTROL2r_IMAX_DRVRf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_DRVRf_GET
#define ANATXACONTROL2r_IMAX_DRVRf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMAX_DRVRf_SET
#define ANATXACONTROL2r_IMODE_DRVRf_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_DRVRf_GET
#define ANATXACONTROL2r_IMODE_DRVRf_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_IMODE_DRVRf_SET
#define ANATXACONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_RESERVED0f_GET
#define ANATXACONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANATXACONTROL2r_RESERVED0f_SET
#define READ_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_READ_ANATXACONTROL2r
#define WRITE_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_ANATXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANATXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX_OS_DRIVER
 * BLOCKS:   TX0
 * REGADDR:  0x8067
 * DESC:     Tx reserved OS analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr (0x00006017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX_OS_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx_os_driver[1];
	uint32_t _tx_os_driver;
} BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_CLR(r) (r).tx_os_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_SET(r,d) (r).tx_os_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_GET(r) (r).tx_os_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx_os_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx_os_driver[0]=(((r).tx_os_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IDRIVERf_GET(r) ((((r).tx_os_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IDRIVERf_SET(r,f) (r).tx_os_driver[0]=(((r).tx_os_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx_os_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx_os_driver[0]=(((r).tx_os_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx_os_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx_os_driver[0]=(((r).tx_os_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_ICBUF1T0f_GET(r) (((r).tx_os_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx_os_driver[0]=(((r).tx_os_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX_OS_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr,(_r._tx_os_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr,(_r._tx_os_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr
#define TX_OS_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_t TX_OS_DRIVERr_t;
#define TX_OS_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_CLR
#define TX_OS_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_SET
#define TX_OS_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_GET
#define TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX_OS_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IDRIVERf_GET
#define TX_OS_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IDRIVERf_SET
#define TX_OS_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IPREDRIVERf_GET
#define TX_OS_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_IPREDRIVERf_SET
#define TX_OS_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET
#define TX_OS_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET
#define TX_OS_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_ICBUF1T0f_GET
#define TX_OS_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr_ICBUF1T0f_SET
#define READ_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX_OS_DRIVERr
#define WRITE_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX_OS_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX_OS_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX_BR_DRIVER
 * BLOCKS:   TX0
 * REGADDR:  0x8068
 * DESC:     Tx reserved BR analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr (0x00006018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX_BR_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx_br_driver[1];
	uint32_t _tx_br_driver;
} BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_CLR(r) (r).tx_br_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_SET(r,d) (r).tx_br_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_GET(r) (r).tx_br_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx_br_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx_br_driver[0]=(((r).tx_br_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IDRIVERf_GET(r) ((((r).tx_br_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IDRIVERf_SET(r,f) (r).tx_br_driver[0]=(((r).tx_br_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx_br_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx_br_driver[0]=(((r).tx_br_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx_br_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx_br_driver[0]=(((r).tx_br_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_ICBUF1T0f_GET(r) (((r).tx_br_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx_br_driver[0]=(((r).tx_br_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX_BR_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr,(_r._tx_br_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr,(_r._tx_br_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr
#define TX_BR_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_t TX_BR_DRIVERr_t;
#define TX_BR_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_CLR
#define TX_BR_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_SET
#define TX_BR_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_GET
#define TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX_BR_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IDRIVERf_GET
#define TX_BR_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IDRIVERf_SET
#define TX_BR_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IPREDRIVERf_GET
#define TX_BR_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_IPREDRIVERf_SET
#define TX_BR_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET
#define TX_BR_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET
#define TX_BR_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_ICBUF1T0f_GET
#define TX_BR_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr_ICBUF1T0f_SET
#define READ_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX_BR_DRIVERr
#define WRITE_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX_BR_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX_BR_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXASTATUS0
 * BLOCKS:   TX1
 * REGADDR:  0x8070
 * DESC:     Tx analog status 0 register
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK       
 *     RLTXFERR_STKY    
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r (0x00007010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXASTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_s {
	uint32_t v[1];
	uint32_t tx1_anatxastatus0[1];
	uint32_t _tx1_anatxastatus0;
} BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_CLR(r) (r).tx1_anatxastatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_SET(r,d) (r).tx1_anatxastatus0[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_GET(r) (r).tx1_anatxastatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RESERVED0f_GET(r) ((((r).tx1_anatxastatus0[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RESERVED0f_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXDISABLE_LNf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXDISABLE_LNf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXFERR_STKYf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXFERR_STKYf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TBI_MODEf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TBI_MODEf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_RESETf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_RESETf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_PWRDNf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_PWRDNf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RLTXFERR_STKYf_GET(r) ((((r).tx1_anatxastatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RLTXFERR_STKYf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXPLL_LOCKf_GET(r) (((r).tx1_anatxastatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXPLL_LOCKf_SET(r,f) (r).tx1_anatxastatus0[0]=(((r).tx1_anatxastatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX1_ANATXASTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r,(_r._tx1_anatxastatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r,(_r._tx1_anatxastatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r
#define TX1_ANATXASTATUS0r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_t TX1_ANATXASTATUS0r_t;
#define TX1_ANATXASTATUS0r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_CLR
#define TX1_ANATXASTATUS0r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_SET
#define TX1_ANATXASTATUS0r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_GET
#define TX1_ANATXASTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RESERVED0f_GET
#define TX1_ANATXASTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RESERVED0f_SET
#define TX1_ANATXASTATUS0r_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXDISABLE_LNf_GET
#define TX1_ANATXASTATUS0r_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXDISABLE_LNf_SET
#define TX1_ANATXASTATUS0r_TXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXFERR_STKYf_GET
#define TX1_ANATXASTATUS0r_TXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXFERR_STKYf_SET
#define TX1_ANATXASTATUS0r_TBI_MODEf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TBI_MODEf_GET
#define TX1_ANATXASTATUS0r_TBI_MODEf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TBI_MODEf_SET
#define TX1_ANATXASTATUS0r_TX_RESETf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_RESETf_GET
#define TX1_ANATXASTATUS0r_TX_RESETf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_RESETf_SET
#define TX1_ANATXASTATUS0r_TX_PWRDNf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_PWRDNf_GET
#define TX1_ANATXASTATUS0r_TX_PWRDNf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TX_PWRDNf_SET
#define TX1_ANATXASTATUS0r_RLTXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RLTXFERR_STKYf_GET
#define TX1_ANATXASTATUS0r_RLTXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_RLTXFERR_STKYf_SET
#define TX1_ANATXASTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXPLL_LOCKf_GET
#define TX1_ANATXASTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r_TXPLL_LOCKf_SET
#define READ_TX1_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXASTATUS0r
#define WRITE_TX1_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXASTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXACONTROL0
 * BLOCKS:   TX1
 * REGADDR:  0x8071
 * DESC:     Tx analog control 0 register
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     RESERVED1        
 *     GLOOPOUTEN       
 *     TX1G_FIFO_RST    
 *     FORCE_TXCLK      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r (0x00007011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_s {
	uint32_t v[1];
	uint32_t tx1_anatxacontrol0[1];
	uint32_t _tx1_anatxacontrol0;
} BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_CLR(r) (r).tx1_anatxacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_SET(r,d) (r).tx1_anatxacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GET(r) (r).tx1_anatxacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED0f_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED0f_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_FORCE_TXCLKf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_FORCE_TXCLKf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GLOOPOUTENf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GLOOPOUTENf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED1f_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED1f_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PRBS_ENf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PRBS_ENf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_ENf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_ENf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_STRTf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_STRTf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPOL_FLIPf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPOL_FLIPf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RTBI_FLIPf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RTBI_FLIPf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_Rf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_Rf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPAT_ENf_GET(r) ((((r).tx1_anatxacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPAT_ENf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX_MDATA_ENf_GET(r) (((r).tx1_anatxacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX_MDATA_ENf_SET(r,f) (r).tx1_anatxacontrol0[0]=(((r).tx1_anatxacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX1_ANATXACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r,(_r._tx1_anatxacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r,(_r._tx1_anatxacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r
#define TX1_ANATXACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_t TX1_ANATXACONTROL0r_t;
#define TX1_ANATXACONTROL0r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_CLR
#define TX1_ANATXACONTROL0r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_SET
#define TX1_ANATXACONTROL0r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GET
#define TX1_ANATXACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED0f_GET
#define TX1_ANATXACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED0f_SET
#define TX1_ANATXACONTROL0r_FORCE_TXCLKf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_FORCE_TXCLKf_GET
#define TX1_ANATXACONTROL0r_FORCE_TXCLKf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_FORCE_TXCLKf_SET
#define TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET
#define TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET
#define TX1_ANATXACONTROL0r_GLOOPOUTENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GLOOPOUTENf_GET
#define TX1_ANATXACONTROL0r_GLOOPOUTENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_GLOOPOUTENf_SET
#define TX1_ANATXACONTROL0r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED1f_GET
#define TX1_ANATXACONTROL0r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RESERVED1f_SET
#define TX1_ANATXACONTROL0r_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PRBS_ENf_GET
#define TX1_ANATXACONTROL0r_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PRBS_ENf_SET
#define TX1_ANATXACONTROL0r_PCKT_ENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_ENf_GET
#define TX1_ANATXACONTROL0r_PCKT_ENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_ENf_SET
#define TX1_ANATXACONTROL0r_PCKT_STRTf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_STRTf_GET
#define TX1_ANATXACONTROL0r_PCKT_STRTf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_PCKT_STRTf_SET
#define TX1_ANATXACONTROL0r_TXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPOL_FLIPf_GET
#define TX1_ANATXACONTROL0r_TXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPOL_FLIPf_SET
#define TX1_ANATXACONTROL0r_RTBI_FLIPf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RTBI_FLIPf_GET
#define TX1_ANATXACONTROL0r_RTBI_FLIPf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_RTBI_FLIPf_SET
#define TX1_ANATXACONTROL0r_EDEN_Rf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_Rf_GET
#define TX1_ANATXACONTROL0r_EDEN_Rf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_Rf_SET
#define TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_GET
#define TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_EDEN_FORCE_Rf_SET
#define TX1_ANATXACONTROL0r_TXPAT_ENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPAT_ENf_GET
#define TX1_ANATXACONTROL0r_TXPAT_ENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TXPAT_ENf_SET
#define TX1_ANATXACONTROL0r_TX_MDATA_ENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX_MDATA_ENf_GET
#define TX1_ANATXACONTROL0r_TX_MDATA_ENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r_TX_MDATA_ENf_SET
#define READ_TX1_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL0r
#define WRITE_TX1_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXMDATA0
 * BLOCKS:   TX1
 * REGADDR:  0x8072
 * DESC:     Tx test mux data 0 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAL   
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSEL     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r (0x00007012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXMDATA0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_s {
	uint32_t v[1];
	uint32_t tx1_anatxmdata0[1];
	uint32_t _tx1_anatxmdata0;
} BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_CLR(r) (r).tx1_anatxmdata0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_SET(r,d) (r).tx1_anatxmdata0[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_GET(r) (r).tx1_anatxmdata0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXTESTMUXSELf_GET(r) ((((r).tx1_anatxmdata0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXTESTMUXSELf_SET(r,f) (r).tx1_anatxmdata0[0]=(((r).tx1_anatxmdata0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_RLFIFO_TSTSELf_GET(r) ((((r).tx1_anatxmdata0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_RLFIFO_TSTSELf_SET(r,f) (r).tx1_anatxmdata0[0]=(((r).tx1_anatxmdata0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXMDIOTSTDATALf_GET(r) (((r).tx1_anatxmdata0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXMDIOTSTDATALf_SET(r,f) (r).tx1_anatxmdata0[0]=(((r).tx1_anatxmdata0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX1_ANATXMDATA0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r,(_r._tx1_anatxmdata0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r,(_r._tx1_anatxmdata0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXMDATA0r BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r
#define TX1_ANATXMDATA0r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_t TX1_ANATXMDATA0r_t;
#define TX1_ANATXMDATA0r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_CLR
#define TX1_ANATXMDATA0r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_SET
#define TX1_ANATXMDATA0r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_GET
#define TX1_ANATXMDATA0r_TXTESTMUXSELf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXTESTMUXSELf_GET
#define TX1_ANATXMDATA0r_TXTESTMUXSELf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXTESTMUXSELf_SET
#define TX1_ANATXMDATA0r_RLFIFO_TSTSELf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_RLFIFO_TSTSELf_GET
#define TX1_ANATXMDATA0r_RLFIFO_TSTSELf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_RLFIFO_TSTSELf_SET
#define TX1_ANATXMDATA0r_TXMDIOTSTDATALf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXMDIOTSTDATALf_GET
#define TX1_ANATXMDATA0r_TXMDIOTSTDATALf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r_TXMDIOTSTDATALf_SET
#define READ_TX1_ANATXMDATA0r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXMDATA0r
#define WRITE_TX1_ANATXMDATA0r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXMDATA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXMDATA1
 * BLOCKS:   TX1
 * REGADDR:  0x8073
 * DESC:     Tx test mux data 1 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAH   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r (0x00007013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXMDATA1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_s {
	uint32_t v[1];
	uint32_t tx1_anatxmdata1[1];
	uint32_t _tx1_anatxmdata1;
} BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_CLR(r) (r).tx1_anatxmdata1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_SET(r,d) (r).tx1_anatxmdata1[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_GET(r) (r).tx1_anatxmdata1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_RESERVED0f_GET(r) ((((r).tx1_anatxmdata1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_RESERVED0f_SET(r,f) (r).tx1_anatxmdata1[0]=(((r).tx1_anatxmdata1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_GET(r) (((r).tx1_anatxmdata1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_SET(r,f) (r).tx1_anatxmdata1[0]=(((r).tx1_anatxmdata1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX1_ANATXMDATA1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r,(_r._tx1_anatxmdata1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r,(_r._tx1_anatxmdata1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXMDATA1r BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r
#define TX1_ANATXMDATA1r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_t TX1_ANATXMDATA1r_t;
#define TX1_ANATXMDATA1r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_CLR
#define TX1_ANATXMDATA1r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_SET
#define TX1_ANATXMDATA1r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_GET
#define TX1_ANATXMDATA1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_RESERVED0f_GET
#define TX1_ANATXMDATA1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_RESERVED0f_SET
#define TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_GET
#define TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r_TXMDIOTSTDATAHf_SET
#define READ_TX1_ANATXMDATA1r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXMDATA1r
#define WRITE_TX1_ANATXMDATA1r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXMDATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXMDATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXASTATUS1
 * BLOCKS:   TX1
 * REGADDR:  0x8074
 * DESC:     Tx analog status 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     TX_ID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r (0x00007014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_s {
	uint32_t v[1];
	uint32_t tx1_anatxastatus1[1];
	uint32_t _tx1_anatxastatus1;
} BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_CLR(r) (r).tx1_anatxastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_SET(r,d) (r).tx1_anatxastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_GET(r) (r).tx1_anatxastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_TX_IDf_GET(r) ((((r).tx1_anatxastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_TX_IDf_SET(r,f) (r).tx1_anatxastatus1[0]=(((r).tx1_anatxastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_RESERVED0f_GET(r) (((r).tx1_anatxastatus1[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_RESERVED0f_SET(r,f) (r).tx1_anatxastatus1[0]=(((r).tx1_anatxastatus1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TX1_ANATXASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r,(_r._tx1_anatxastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r,(_r._tx1_anatxastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r
#define TX1_ANATXASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_t TX1_ANATXASTATUS1r_t;
#define TX1_ANATXASTATUS1r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_CLR
#define TX1_ANATXASTATUS1r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_SET
#define TX1_ANATXASTATUS1r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_GET
#define TX1_ANATXASTATUS1r_TX_IDf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_TX_IDf_GET
#define TX1_ANATXASTATUS1r_TX_IDf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_TX_IDf_SET
#define TX1_ANATXASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_RESERVED0f_GET
#define TX1_ANATXASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r_RESERVED0f_SET
#define READ_TX1_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXASTATUS1r
#define WRITE_TX1_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXACONTROL1
 * BLOCKS:   TX1
 * REGADDR:  0x8075
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IFULLSPD         
 *     TX_SEL_HALFRATE  
 *     DRIVER_VCM       
 *     TICKSEL          
 *     VDDR_BGB         
 *     DRIVERMODE       
 *     NEWBIAS_EN       
 *     REFH_TX          
 *     REFL_TX          
 *     ID2C             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r (0x00007015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_s {
	uint32_t v[1];
	uint32_t tx1_anatxacontrol1[1];
	uint32_t _tx1_anatxacontrol1;
} BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_CLR(r) (r).tx1_anatxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_SET(r,d) (r).tx1_anatxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_GET(r) (r).tx1_anatxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_ID2Cf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_ID2Cf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFL_TXf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFL_TXf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFH_TXf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFH_TXf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_NEWBIAS_ENf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_NEWBIAS_ENf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVERMODEf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVERMODEf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_VDDR_BGBf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_VDDR_BGBf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TICKSELf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TICKSELf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVER_VCMf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVER_VCMf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET(r) ((((r).tx1_anatxacontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_IFULLSPDf_GET(r) (((r).tx1_anatxacontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_IFULLSPDf_SET(r,f) (r).tx1_anatxacontrol1[0]=(((r).tx1_anatxacontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TX1_ANATXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r,(_r._tx1_anatxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r,(_r._tx1_anatxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r
#define TX1_ANATXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_t TX1_ANATXACONTROL1r_t;
#define TX1_ANATXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_CLR
#define TX1_ANATXACONTROL1r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_SET
#define TX1_ANATXACONTROL1r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_GET
#define TX1_ANATXACONTROL1r_ID2Cf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_ID2Cf_GET
#define TX1_ANATXACONTROL1r_ID2Cf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_ID2Cf_SET
#define TX1_ANATXACONTROL1r_REFL_TXf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFL_TXf_GET
#define TX1_ANATXACONTROL1r_REFL_TXf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFL_TXf_SET
#define TX1_ANATXACONTROL1r_REFH_TXf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFH_TXf_GET
#define TX1_ANATXACONTROL1r_REFH_TXf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_REFH_TXf_SET
#define TX1_ANATXACONTROL1r_NEWBIAS_ENf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_NEWBIAS_ENf_GET
#define TX1_ANATXACONTROL1r_NEWBIAS_ENf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_NEWBIAS_ENf_SET
#define TX1_ANATXACONTROL1r_DRIVERMODEf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVERMODEf_GET
#define TX1_ANATXACONTROL1r_DRIVERMODEf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVERMODEf_SET
#define TX1_ANATXACONTROL1r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_VDDR_BGBf_GET
#define TX1_ANATXACONTROL1r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_VDDR_BGBf_SET
#define TX1_ANATXACONTROL1r_TICKSELf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TICKSELf_GET
#define TX1_ANATXACONTROL1r_TICKSELf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TICKSELf_SET
#define TX1_ANATXACONTROL1r_DRIVER_VCMf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVER_VCMf_GET
#define TX1_ANATXACONTROL1r_DRIVER_VCMf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_DRIVER_VCMf_SET
#define TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET
#define TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET
#define TX1_ANATXACONTROL1r_IFULLSPDf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_IFULLSPDf_GET
#define TX1_ANATXACONTROL1r_IFULLSPDf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r_IFULLSPDf_SET
#define READ_TX1_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL1r
#define WRITE_TX1_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_ANATXACONTROL2
 * BLOCKS:   TX1
 * REGADDR:  0x8076
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     IMODE_DRVR       
 *     IMAX_DRVR        
 *     IMIN_DRVR        
 *     I21MUX           
 *     IMODE_PREDRV     
 *     IMAX_PREDRV      
 *     IMIN_PREDRV      
 *     ICBUF2T          
 *     ICBUF1T          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r (0x00007016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program TX1_ANATXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_s {
	uint32_t v[1];
	uint32_t tx1_anatxacontrol2[1];
	uint32_t _tx1_anatxacontrol2;
} BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_CLR(r) (r).tx1_anatxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_SET(r,d) (r).tx1_anatxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_GET(r) (r).tx1_anatxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF1Tf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF1Tf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF2Tf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF2Tf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_PREDRVf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_PREDRVf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_PREDRVf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_PREDRVf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_PREDRVf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_PREDRVf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_I21MUXf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_I21MUXf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_DRVRf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_DRVRf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_DRVRf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_DRVRf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_DRVRf_GET(r) ((((r).tx1_anatxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_DRVRf_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_RESERVED0f_GET(r) (((r).tx1_anatxacontrol2[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_RESERVED0f_SET(r,f) (r).tx1_anatxacontrol2[0]=(((r).tx1_anatxacontrol2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TX1_ANATXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r,(_r._tx1_anatxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r,(_r._tx1_anatxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r
#define TX1_ANATXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_t TX1_ANATXACONTROL2r_t;
#define TX1_ANATXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_CLR
#define TX1_ANATXACONTROL2r_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_SET
#define TX1_ANATXACONTROL2r_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_GET
#define TX1_ANATXACONTROL2r_ICBUF1Tf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF1Tf_GET
#define TX1_ANATXACONTROL2r_ICBUF1Tf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF1Tf_SET
#define TX1_ANATXACONTROL2r_ICBUF2Tf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF2Tf_GET
#define TX1_ANATXACONTROL2r_ICBUF2Tf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_ICBUF2Tf_SET
#define TX1_ANATXACONTROL2r_IMIN_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_PREDRVf_GET
#define TX1_ANATXACONTROL2r_IMIN_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_PREDRVf_SET
#define TX1_ANATXACONTROL2r_IMAX_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_PREDRVf_GET
#define TX1_ANATXACONTROL2r_IMAX_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_PREDRVf_SET
#define TX1_ANATXACONTROL2r_IMODE_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_PREDRVf_GET
#define TX1_ANATXACONTROL2r_IMODE_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_PREDRVf_SET
#define TX1_ANATXACONTROL2r_I21MUXf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_I21MUXf_GET
#define TX1_ANATXACONTROL2r_I21MUXf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_I21MUXf_SET
#define TX1_ANATXACONTROL2r_IMIN_DRVRf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_DRVRf_GET
#define TX1_ANATXACONTROL2r_IMIN_DRVRf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMIN_DRVRf_SET
#define TX1_ANATXACONTROL2r_IMAX_DRVRf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_DRVRf_GET
#define TX1_ANATXACONTROL2r_IMAX_DRVRf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMAX_DRVRf_SET
#define TX1_ANATXACONTROL2r_IMODE_DRVRf_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_DRVRf_GET
#define TX1_ANATXACONTROL2r_IMODE_DRVRf_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_IMODE_DRVRf_SET
#define TX1_ANATXACONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_RESERVED0f_GET
#define TX1_ANATXACONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r_RESERVED0f_SET
#define READ_TX1_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_READ_TX1_ANATXACONTROL2r
#define WRITE_TX1_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_TX1_ANATXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_ANATXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_TX_OS_DRIVER
 * BLOCKS:   TX1
 * REGADDR:  0x8077
 * DESC:     Tx reserved OS analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr (0x00007017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX1_TX_OS_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx1_tx_os_driver[1];
	uint32_t _tx1_tx_os_driver;
} BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_CLR(r) (r).tx1_tx_os_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_SET(r,d) (r).tx1_tx_os_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_GET(r) (r).tx1_tx_os_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx1_tx_os_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx1_tx_os_driver[0]=(((r).tx1_tx_os_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IDRIVERf_GET(r) ((((r).tx1_tx_os_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IDRIVERf_SET(r,f) (r).tx1_tx_os_driver[0]=(((r).tx1_tx_os_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx1_tx_os_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx1_tx_os_driver[0]=(((r).tx1_tx_os_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx1_tx_os_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx1_tx_os_driver[0]=(((r).tx1_tx_os_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_ICBUF1T0f_GET(r) (((r).tx1_tx_os_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx1_tx_os_driver[0]=(((r).tx1_tx_os_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX1_TX_OS_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr,(_r._tx1_tx_os_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr,(_r._tx1_tx_os_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr
#define TX1_TX_OS_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_t TX1_TX_OS_DRIVERr_t;
#define TX1_TX_OS_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_CLR
#define TX1_TX_OS_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_SET
#define TX1_TX_OS_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_GET
#define TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX1_TX_OS_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IDRIVERf_GET
#define TX1_TX_OS_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IDRIVERf_SET
#define TX1_TX_OS_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IPREDRIVERf_GET
#define TX1_TX_OS_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_IPREDRIVERf_SET
#define TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET
#define TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET
#define TX1_TX_OS_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_ICBUF1T0f_GET
#define TX1_TX_OS_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr_ICBUF1T0f_SET
#define READ_TX1_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX1_TX_OS_DRIVERr
#define WRITE_TX1_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX1_TX_OS_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_TX_OS_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX1_TX_BR_DRIVER
 * BLOCKS:   TX1
 * REGADDR:  0x8078
 * DESC:     Tx reserved BR analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr (0x00007018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX1_TX_BR_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx1_tx_br_driver[1];
	uint32_t _tx1_tx_br_driver;
} BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_CLR(r) (r).tx1_tx_br_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_SET(r,d) (r).tx1_tx_br_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_GET(r) (r).tx1_tx_br_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx1_tx_br_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx1_tx_br_driver[0]=(((r).tx1_tx_br_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IDRIVERf_GET(r) ((((r).tx1_tx_br_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IDRIVERf_SET(r,f) (r).tx1_tx_br_driver[0]=(((r).tx1_tx_br_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx1_tx_br_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx1_tx_br_driver[0]=(((r).tx1_tx_br_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx1_tx_br_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx1_tx_br_driver[0]=(((r).tx1_tx_br_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_ICBUF1T0f_GET(r) (((r).tx1_tx_br_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx1_tx_br_driver[0]=(((r).tx1_tx_br_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX1_TX_BR_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX1_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr,(_r._tx1_tx_br_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX1_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr,(_r._tx1_tx_br_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX1_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr
#define TX1_TX_BR_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_t TX1_TX_BR_DRIVERr_t;
#define TX1_TX_BR_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_CLR
#define TX1_TX_BR_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_SET
#define TX1_TX_BR_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_GET
#define TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX1_TX_BR_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IDRIVERf_GET
#define TX1_TX_BR_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IDRIVERf_SET
#define TX1_TX_BR_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IPREDRIVERf_GET
#define TX1_TX_BR_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_IPREDRIVERf_SET
#define TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET
#define TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET
#define TX1_TX_BR_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_ICBUF1T0f_GET
#define TX1_TX_BR_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr_ICBUF1T0f_SET
#define READ_TX1_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX1_TX_BR_DRIVERr
#define WRITE_TX1_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX1_TX_BR_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX1_TX_BR_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXASTATUS0
 * BLOCKS:   TX2
 * REGADDR:  0x8080
 * DESC:     Tx analog status 0 register
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK       
 *     RLTXFERR_STKY    
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r (0x00008010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXASTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_s {
	uint32_t v[1];
	uint32_t tx2_anatxastatus0[1];
	uint32_t _tx2_anatxastatus0;
} BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_CLR(r) (r).tx2_anatxastatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_SET(r,d) (r).tx2_anatxastatus0[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_GET(r) (r).tx2_anatxastatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RESERVED0f_GET(r) ((((r).tx2_anatxastatus0[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RESERVED0f_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXDISABLE_LNf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXDISABLE_LNf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXFERR_STKYf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXFERR_STKYf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TBI_MODEf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TBI_MODEf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_RESETf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_RESETf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_PWRDNf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_PWRDNf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RLTXFERR_STKYf_GET(r) ((((r).tx2_anatxastatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RLTXFERR_STKYf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXPLL_LOCKf_GET(r) (((r).tx2_anatxastatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXPLL_LOCKf_SET(r,f) (r).tx2_anatxastatus0[0]=(((r).tx2_anatxastatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX2_ANATXASTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r,(_r._tx2_anatxastatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r,(_r._tx2_anatxastatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r
#define TX2_ANATXASTATUS0r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_t TX2_ANATXASTATUS0r_t;
#define TX2_ANATXASTATUS0r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_CLR
#define TX2_ANATXASTATUS0r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_SET
#define TX2_ANATXASTATUS0r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_GET
#define TX2_ANATXASTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RESERVED0f_GET
#define TX2_ANATXASTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RESERVED0f_SET
#define TX2_ANATXASTATUS0r_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXDISABLE_LNf_GET
#define TX2_ANATXASTATUS0r_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXDISABLE_LNf_SET
#define TX2_ANATXASTATUS0r_TXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXFERR_STKYf_GET
#define TX2_ANATXASTATUS0r_TXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXFERR_STKYf_SET
#define TX2_ANATXASTATUS0r_TBI_MODEf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TBI_MODEf_GET
#define TX2_ANATXASTATUS0r_TBI_MODEf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TBI_MODEf_SET
#define TX2_ANATXASTATUS0r_TX_RESETf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_RESETf_GET
#define TX2_ANATXASTATUS0r_TX_RESETf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_RESETf_SET
#define TX2_ANATXASTATUS0r_TX_PWRDNf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_PWRDNf_GET
#define TX2_ANATXASTATUS0r_TX_PWRDNf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TX_PWRDNf_SET
#define TX2_ANATXASTATUS0r_RLTXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RLTXFERR_STKYf_GET
#define TX2_ANATXASTATUS0r_RLTXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_RLTXFERR_STKYf_SET
#define TX2_ANATXASTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXPLL_LOCKf_GET
#define TX2_ANATXASTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r_TXPLL_LOCKf_SET
#define READ_TX2_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXASTATUS0r
#define WRITE_TX2_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXASTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXACONTROL0
 * BLOCKS:   TX2
 * REGADDR:  0x8081
 * DESC:     Tx analog control 0 register
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     RESERVED1        
 *     GLOOPOUTEN       
 *     TX1G_FIFO_RST    
 *     FORCE_TXCLK      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r (0x00008011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_s {
	uint32_t v[1];
	uint32_t tx2_anatxacontrol0[1];
	uint32_t _tx2_anatxacontrol0;
} BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_CLR(r) (r).tx2_anatxacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_SET(r,d) (r).tx2_anatxacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GET(r) (r).tx2_anatxacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED0f_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED0f_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_FORCE_TXCLKf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_FORCE_TXCLKf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GLOOPOUTENf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GLOOPOUTENf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED1f_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED1f_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PRBS_ENf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PRBS_ENf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_ENf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_ENf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_STRTf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_STRTf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPOL_FLIPf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPOL_FLIPf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RTBI_FLIPf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RTBI_FLIPf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_Rf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_Rf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPAT_ENf_GET(r) ((((r).tx2_anatxacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPAT_ENf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX_MDATA_ENf_GET(r) (((r).tx2_anatxacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX_MDATA_ENf_SET(r,f) (r).tx2_anatxacontrol0[0]=(((r).tx2_anatxacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX2_ANATXACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r,(_r._tx2_anatxacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r,(_r._tx2_anatxacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r
#define TX2_ANATXACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_t TX2_ANATXACONTROL0r_t;
#define TX2_ANATXACONTROL0r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_CLR
#define TX2_ANATXACONTROL0r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_SET
#define TX2_ANATXACONTROL0r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GET
#define TX2_ANATXACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED0f_GET
#define TX2_ANATXACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED0f_SET
#define TX2_ANATXACONTROL0r_FORCE_TXCLKf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_FORCE_TXCLKf_GET
#define TX2_ANATXACONTROL0r_FORCE_TXCLKf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_FORCE_TXCLKf_SET
#define TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET
#define TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET
#define TX2_ANATXACONTROL0r_GLOOPOUTENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GLOOPOUTENf_GET
#define TX2_ANATXACONTROL0r_GLOOPOUTENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_GLOOPOUTENf_SET
#define TX2_ANATXACONTROL0r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED1f_GET
#define TX2_ANATXACONTROL0r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RESERVED1f_SET
#define TX2_ANATXACONTROL0r_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PRBS_ENf_GET
#define TX2_ANATXACONTROL0r_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PRBS_ENf_SET
#define TX2_ANATXACONTROL0r_PCKT_ENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_ENf_GET
#define TX2_ANATXACONTROL0r_PCKT_ENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_ENf_SET
#define TX2_ANATXACONTROL0r_PCKT_STRTf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_STRTf_GET
#define TX2_ANATXACONTROL0r_PCKT_STRTf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_PCKT_STRTf_SET
#define TX2_ANATXACONTROL0r_TXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPOL_FLIPf_GET
#define TX2_ANATXACONTROL0r_TXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPOL_FLIPf_SET
#define TX2_ANATXACONTROL0r_RTBI_FLIPf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RTBI_FLIPf_GET
#define TX2_ANATXACONTROL0r_RTBI_FLIPf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_RTBI_FLIPf_SET
#define TX2_ANATXACONTROL0r_EDEN_Rf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_Rf_GET
#define TX2_ANATXACONTROL0r_EDEN_Rf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_Rf_SET
#define TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_GET
#define TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_EDEN_FORCE_Rf_SET
#define TX2_ANATXACONTROL0r_TXPAT_ENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPAT_ENf_GET
#define TX2_ANATXACONTROL0r_TXPAT_ENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TXPAT_ENf_SET
#define TX2_ANATXACONTROL0r_TX_MDATA_ENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX_MDATA_ENf_GET
#define TX2_ANATXACONTROL0r_TX_MDATA_ENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r_TX_MDATA_ENf_SET
#define READ_TX2_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL0r
#define WRITE_TX2_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXMDATA0
 * BLOCKS:   TX2
 * REGADDR:  0x8082
 * DESC:     Tx test mux data 0 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAL   
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSEL     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r (0x00008012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXMDATA0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_s {
	uint32_t v[1];
	uint32_t tx2_anatxmdata0[1];
	uint32_t _tx2_anatxmdata0;
} BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_CLR(r) (r).tx2_anatxmdata0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_SET(r,d) (r).tx2_anatxmdata0[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_GET(r) (r).tx2_anatxmdata0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXTESTMUXSELf_GET(r) ((((r).tx2_anatxmdata0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXTESTMUXSELf_SET(r,f) (r).tx2_anatxmdata0[0]=(((r).tx2_anatxmdata0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_RLFIFO_TSTSELf_GET(r) ((((r).tx2_anatxmdata0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_RLFIFO_TSTSELf_SET(r,f) (r).tx2_anatxmdata0[0]=(((r).tx2_anatxmdata0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXMDIOTSTDATALf_GET(r) (((r).tx2_anatxmdata0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXMDIOTSTDATALf_SET(r,f) (r).tx2_anatxmdata0[0]=(((r).tx2_anatxmdata0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX2_ANATXMDATA0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r,(_r._tx2_anatxmdata0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r,(_r._tx2_anatxmdata0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXMDATA0r BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r
#define TX2_ANATXMDATA0r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_t TX2_ANATXMDATA0r_t;
#define TX2_ANATXMDATA0r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_CLR
#define TX2_ANATXMDATA0r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_SET
#define TX2_ANATXMDATA0r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_GET
#define TX2_ANATXMDATA0r_TXTESTMUXSELf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXTESTMUXSELf_GET
#define TX2_ANATXMDATA0r_TXTESTMUXSELf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXTESTMUXSELf_SET
#define TX2_ANATXMDATA0r_RLFIFO_TSTSELf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_RLFIFO_TSTSELf_GET
#define TX2_ANATXMDATA0r_RLFIFO_TSTSELf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_RLFIFO_TSTSELf_SET
#define TX2_ANATXMDATA0r_TXMDIOTSTDATALf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXMDIOTSTDATALf_GET
#define TX2_ANATXMDATA0r_TXMDIOTSTDATALf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r_TXMDIOTSTDATALf_SET
#define READ_TX2_ANATXMDATA0r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXMDATA0r
#define WRITE_TX2_ANATXMDATA0r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXMDATA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXMDATA1
 * BLOCKS:   TX2
 * REGADDR:  0x8083
 * DESC:     Tx test mux data 1 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAH   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r (0x00008013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXMDATA1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_s {
	uint32_t v[1];
	uint32_t tx2_anatxmdata1[1];
	uint32_t _tx2_anatxmdata1;
} BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_CLR(r) (r).tx2_anatxmdata1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_SET(r,d) (r).tx2_anatxmdata1[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_GET(r) (r).tx2_anatxmdata1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_RESERVED0f_GET(r) ((((r).tx2_anatxmdata1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_RESERVED0f_SET(r,f) (r).tx2_anatxmdata1[0]=(((r).tx2_anatxmdata1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_GET(r) (((r).tx2_anatxmdata1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_SET(r,f) (r).tx2_anatxmdata1[0]=(((r).tx2_anatxmdata1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX2_ANATXMDATA1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r,(_r._tx2_anatxmdata1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r,(_r._tx2_anatxmdata1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXMDATA1r BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r
#define TX2_ANATXMDATA1r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_t TX2_ANATXMDATA1r_t;
#define TX2_ANATXMDATA1r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_CLR
#define TX2_ANATXMDATA1r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_SET
#define TX2_ANATXMDATA1r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_GET
#define TX2_ANATXMDATA1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_RESERVED0f_GET
#define TX2_ANATXMDATA1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_RESERVED0f_SET
#define TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_GET
#define TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r_TXMDIOTSTDATAHf_SET
#define READ_TX2_ANATXMDATA1r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXMDATA1r
#define WRITE_TX2_ANATXMDATA1r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXMDATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXMDATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXASTATUS1
 * BLOCKS:   TX2
 * REGADDR:  0x8084
 * DESC:     Tx analog status 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     TX_ID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r (0x00008014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_s {
	uint32_t v[1];
	uint32_t tx2_anatxastatus1[1];
	uint32_t _tx2_anatxastatus1;
} BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_CLR(r) (r).tx2_anatxastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_SET(r,d) (r).tx2_anatxastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_GET(r) (r).tx2_anatxastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_TX_IDf_GET(r) ((((r).tx2_anatxastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_TX_IDf_SET(r,f) (r).tx2_anatxastatus1[0]=(((r).tx2_anatxastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_RESERVED0f_GET(r) (((r).tx2_anatxastatus1[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_RESERVED0f_SET(r,f) (r).tx2_anatxastatus1[0]=(((r).tx2_anatxastatus1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TX2_ANATXASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r,(_r._tx2_anatxastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r,(_r._tx2_anatxastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r
#define TX2_ANATXASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_t TX2_ANATXASTATUS1r_t;
#define TX2_ANATXASTATUS1r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_CLR
#define TX2_ANATXASTATUS1r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_SET
#define TX2_ANATXASTATUS1r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_GET
#define TX2_ANATXASTATUS1r_TX_IDf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_TX_IDf_GET
#define TX2_ANATXASTATUS1r_TX_IDf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_TX_IDf_SET
#define TX2_ANATXASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_RESERVED0f_GET
#define TX2_ANATXASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r_RESERVED0f_SET
#define READ_TX2_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXASTATUS1r
#define WRITE_TX2_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXACONTROL1
 * BLOCKS:   TX2
 * REGADDR:  0x8085
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IFULLSPD         
 *     TX_SEL_HALFRATE  
 *     DRIVER_VCM       
 *     TICKSEL          
 *     VDDR_BGB         
 *     DRIVERMODE       
 *     NEWBIAS_EN       
 *     REFH_TX          
 *     REFL_TX          
 *     ID2C             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r (0x00008015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_s {
	uint32_t v[1];
	uint32_t tx2_anatxacontrol1[1];
	uint32_t _tx2_anatxacontrol1;
} BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_CLR(r) (r).tx2_anatxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_SET(r,d) (r).tx2_anatxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_GET(r) (r).tx2_anatxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_ID2Cf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_ID2Cf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFL_TXf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFL_TXf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFH_TXf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFH_TXf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_NEWBIAS_ENf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_NEWBIAS_ENf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVERMODEf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVERMODEf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_VDDR_BGBf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_VDDR_BGBf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TICKSELf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TICKSELf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVER_VCMf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVER_VCMf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET(r) ((((r).tx2_anatxacontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_IFULLSPDf_GET(r) (((r).tx2_anatxacontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_IFULLSPDf_SET(r,f) (r).tx2_anatxacontrol1[0]=(((r).tx2_anatxacontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TX2_ANATXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r,(_r._tx2_anatxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r,(_r._tx2_anatxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r
#define TX2_ANATXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_t TX2_ANATXACONTROL1r_t;
#define TX2_ANATXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_CLR
#define TX2_ANATXACONTROL1r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_SET
#define TX2_ANATXACONTROL1r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_GET
#define TX2_ANATXACONTROL1r_ID2Cf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_ID2Cf_GET
#define TX2_ANATXACONTROL1r_ID2Cf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_ID2Cf_SET
#define TX2_ANATXACONTROL1r_REFL_TXf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFL_TXf_GET
#define TX2_ANATXACONTROL1r_REFL_TXf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFL_TXf_SET
#define TX2_ANATXACONTROL1r_REFH_TXf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFH_TXf_GET
#define TX2_ANATXACONTROL1r_REFH_TXf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_REFH_TXf_SET
#define TX2_ANATXACONTROL1r_NEWBIAS_ENf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_NEWBIAS_ENf_GET
#define TX2_ANATXACONTROL1r_NEWBIAS_ENf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_NEWBIAS_ENf_SET
#define TX2_ANATXACONTROL1r_DRIVERMODEf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVERMODEf_GET
#define TX2_ANATXACONTROL1r_DRIVERMODEf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVERMODEf_SET
#define TX2_ANATXACONTROL1r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_VDDR_BGBf_GET
#define TX2_ANATXACONTROL1r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_VDDR_BGBf_SET
#define TX2_ANATXACONTROL1r_TICKSELf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TICKSELf_GET
#define TX2_ANATXACONTROL1r_TICKSELf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TICKSELf_SET
#define TX2_ANATXACONTROL1r_DRIVER_VCMf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVER_VCMf_GET
#define TX2_ANATXACONTROL1r_DRIVER_VCMf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_DRIVER_VCMf_SET
#define TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET
#define TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET
#define TX2_ANATXACONTROL1r_IFULLSPDf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_IFULLSPDf_GET
#define TX2_ANATXACONTROL1r_IFULLSPDf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r_IFULLSPDf_SET
#define READ_TX2_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL1r
#define WRITE_TX2_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_ANATXACONTROL2
 * BLOCKS:   TX2
 * REGADDR:  0x8086
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     IMODE_DRVR       
 *     IMAX_DRVR        
 *     IMIN_DRVR        
 *     I21MUX           
 *     IMODE_PREDRV     
 *     IMAX_PREDRV      
 *     IMIN_PREDRV      
 *     ICBUF2T          
 *     ICBUF1T          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r (0x00008016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program TX2_ANATXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_s {
	uint32_t v[1];
	uint32_t tx2_anatxacontrol2[1];
	uint32_t _tx2_anatxacontrol2;
} BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_CLR(r) (r).tx2_anatxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_SET(r,d) (r).tx2_anatxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_GET(r) (r).tx2_anatxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF1Tf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF1Tf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF2Tf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF2Tf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_PREDRVf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_PREDRVf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_PREDRVf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_PREDRVf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_PREDRVf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_PREDRVf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_I21MUXf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_I21MUXf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_DRVRf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_DRVRf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_DRVRf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_DRVRf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_DRVRf_GET(r) ((((r).tx2_anatxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_DRVRf_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_RESERVED0f_GET(r) (((r).tx2_anatxacontrol2[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_RESERVED0f_SET(r,f) (r).tx2_anatxacontrol2[0]=(((r).tx2_anatxacontrol2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TX2_ANATXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r,(_r._tx2_anatxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r,(_r._tx2_anatxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r
#define TX2_ANATXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_t TX2_ANATXACONTROL2r_t;
#define TX2_ANATXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_CLR
#define TX2_ANATXACONTROL2r_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_SET
#define TX2_ANATXACONTROL2r_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_GET
#define TX2_ANATXACONTROL2r_ICBUF1Tf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF1Tf_GET
#define TX2_ANATXACONTROL2r_ICBUF1Tf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF1Tf_SET
#define TX2_ANATXACONTROL2r_ICBUF2Tf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF2Tf_GET
#define TX2_ANATXACONTROL2r_ICBUF2Tf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_ICBUF2Tf_SET
#define TX2_ANATXACONTROL2r_IMIN_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_PREDRVf_GET
#define TX2_ANATXACONTROL2r_IMIN_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_PREDRVf_SET
#define TX2_ANATXACONTROL2r_IMAX_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_PREDRVf_GET
#define TX2_ANATXACONTROL2r_IMAX_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_PREDRVf_SET
#define TX2_ANATXACONTROL2r_IMODE_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_PREDRVf_GET
#define TX2_ANATXACONTROL2r_IMODE_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_PREDRVf_SET
#define TX2_ANATXACONTROL2r_I21MUXf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_I21MUXf_GET
#define TX2_ANATXACONTROL2r_I21MUXf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_I21MUXf_SET
#define TX2_ANATXACONTROL2r_IMIN_DRVRf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_DRVRf_GET
#define TX2_ANATXACONTROL2r_IMIN_DRVRf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMIN_DRVRf_SET
#define TX2_ANATXACONTROL2r_IMAX_DRVRf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_DRVRf_GET
#define TX2_ANATXACONTROL2r_IMAX_DRVRf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMAX_DRVRf_SET
#define TX2_ANATXACONTROL2r_IMODE_DRVRf_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_DRVRf_GET
#define TX2_ANATXACONTROL2r_IMODE_DRVRf_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_IMODE_DRVRf_SET
#define TX2_ANATXACONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_RESERVED0f_GET
#define TX2_ANATXACONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r_RESERVED0f_SET
#define READ_TX2_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_READ_TX2_ANATXACONTROL2r
#define WRITE_TX2_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_TX2_ANATXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_ANATXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_TX_OS_DRIVER
 * BLOCKS:   TX2
 * REGADDR:  0x8087
 * DESC:     Tx reserved OS analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr (0x00008017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX2_TX_OS_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx2_tx_os_driver[1];
	uint32_t _tx2_tx_os_driver;
} BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_CLR(r) (r).tx2_tx_os_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_SET(r,d) (r).tx2_tx_os_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_GET(r) (r).tx2_tx_os_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx2_tx_os_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx2_tx_os_driver[0]=(((r).tx2_tx_os_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IDRIVERf_GET(r) ((((r).tx2_tx_os_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IDRIVERf_SET(r,f) (r).tx2_tx_os_driver[0]=(((r).tx2_tx_os_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx2_tx_os_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx2_tx_os_driver[0]=(((r).tx2_tx_os_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx2_tx_os_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx2_tx_os_driver[0]=(((r).tx2_tx_os_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_ICBUF1T0f_GET(r) (((r).tx2_tx_os_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx2_tx_os_driver[0]=(((r).tx2_tx_os_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX2_TX_OS_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr,(_r._tx2_tx_os_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr,(_r._tx2_tx_os_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr
#define TX2_TX_OS_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_t TX2_TX_OS_DRIVERr_t;
#define TX2_TX_OS_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_CLR
#define TX2_TX_OS_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_SET
#define TX2_TX_OS_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_GET
#define TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX2_TX_OS_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IDRIVERf_GET
#define TX2_TX_OS_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IDRIVERf_SET
#define TX2_TX_OS_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IPREDRIVERf_GET
#define TX2_TX_OS_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_IPREDRIVERf_SET
#define TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET
#define TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET
#define TX2_TX_OS_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_ICBUF1T0f_GET
#define TX2_TX_OS_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr_ICBUF1T0f_SET
#define READ_TX2_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX2_TX_OS_DRIVERr
#define WRITE_TX2_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX2_TX_OS_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_TX_OS_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX2_TX_BR_DRIVER
 * BLOCKS:   TX2
 * REGADDR:  0x8088
 * DESC:     Tx reserved BR analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr (0x00008018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX2_TX_BR_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx2_tx_br_driver[1];
	uint32_t _tx2_tx_br_driver;
} BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_CLR(r) (r).tx2_tx_br_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_SET(r,d) (r).tx2_tx_br_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_GET(r) (r).tx2_tx_br_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx2_tx_br_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx2_tx_br_driver[0]=(((r).tx2_tx_br_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IDRIVERf_GET(r) ((((r).tx2_tx_br_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IDRIVERf_SET(r,f) (r).tx2_tx_br_driver[0]=(((r).tx2_tx_br_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx2_tx_br_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx2_tx_br_driver[0]=(((r).tx2_tx_br_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx2_tx_br_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx2_tx_br_driver[0]=(((r).tx2_tx_br_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_ICBUF1T0f_GET(r) (((r).tx2_tx_br_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx2_tx_br_driver[0]=(((r).tx2_tx_br_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX2_TX_BR_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX2_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr,(_r._tx2_tx_br_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX2_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr,(_r._tx2_tx_br_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX2_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr
#define TX2_TX_BR_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_t TX2_TX_BR_DRIVERr_t;
#define TX2_TX_BR_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_CLR
#define TX2_TX_BR_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_SET
#define TX2_TX_BR_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_GET
#define TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX2_TX_BR_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IDRIVERf_GET
#define TX2_TX_BR_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IDRIVERf_SET
#define TX2_TX_BR_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IPREDRIVERf_GET
#define TX2_TX_BR_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_IPREDRIVERf_SET
#define TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET
#define TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET
#define TX2_TX_BR_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_ICBUF1T0f_GET
#define TX2_TX_BR_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr_ICBUF1T0f_SET
#define READ_TX2_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX2_TX_BR_DRIVERr
#define WRITE_TX2_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX2_TX_BR_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX2_TX_BR_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXASTATUS0
 * BLOCKS:   TX3
 * REGADDR:  0x8090
 * DESC:     Tx analog status 0 register
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK       
 *     RLTXFERR_STKY    
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r (0x00009010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXASTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_s {
	uint32_t v[1];
	uint32_t tx3_anatxastatus0[1];
	uint32_t _tx3_anatxastatus0;
} BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_CLR(r) (r).tx3_anatxastatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_SET(r,d) (r).tx3_anatxastatus0[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_GET(r) (r).tx3_anatxastatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RESERVED0f_GET(r) ((((r).tx3_anatxastatus0[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RESERVED0f_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXDISABLE_LNf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXDISABLE_LNf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXFERR_STKYf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXFERR_STKYf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TBI_MODEf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TBI_MODEf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_RESETf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_RESETf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_PWRDNf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_PWRDNf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RLTXFERR_STKYf_GET(r) ((((r).tx3_anatxastatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RLTXFERR_STKYf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXPLL_LOCKf_GET(r) (((r).tx3_anatxastatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXPLL_LOCKf_SET(r,f) (r).tx3_anatxastatus0[0]=(((r).tx3_anatxastatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX3_ANATXASTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r,(_r._tx3_anatxastatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r,(_r._tx3_anatxastatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r
#define TX3_ANATXASTATUS0r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_t TX3_ANATXASTATUS0r_t;
#define TX3_ANATXASTATUS0r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_CLR
#define TX3_ANATXASTATUS0r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_SET
#define TX3_ANATXASTATUS0r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_GET
#define TX3_ANATXASTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RESERVED0f_GET
#define TX3_ANATXASTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RESERVED0f_SET
#define TX3_ANATXASTATUS0r_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXDISABLE_LNf_GET
#define TX3_ANATXASTATUS0r_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXDISABLE_LNf_SET
#define TX3_ANATXASTATUS0r_TXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXFERR_STKYf_GET
#define TX3_ANATXASTATUS0r_TXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXFERR_STKYf_SET
#define TX3_ANATXASTATUS0r_TBI_MODEf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TBI_MODEf_GET
#define TX3_ANATXASTATUS0r_TBI_MODEf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TBI_MODEf_SET
#define TX3_ANATXASTATUS0r_TX_RESETf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_RESETf_GET
#define TX3_ANATXASTATUS0r_TX_RESETf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_RESETf_SET
#define TX3_ANATXASTATUS0r_TX_PWRDNf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_PWRDNf_GET
#define TX3_ANATXASTATUS0r_TX_PWRDNf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TX_PWRDNf_SET
#define TX3_ANATXASTATUS0r_RLTXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RLTXFERR_STKYf_GET
#define TX3_ANATXASTATUS0r_RLTXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_RLTXFERR_STKYf_SET
#define TX3_ANATXASTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXPLL_LOCKf_GET
#define TX3_ANATXASTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r_TXPLL_LOCKf_SET
#define READ_TX3_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXASTATUS0r
#define WRITE_TX3_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXASTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXACONTROL0
 * BLOCKS:   TX3
 * REGADDR:  0x8091
 * DESC:     Tx analog control 0 register
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     RESERVED1        
 *     GLOOPOUTEN       
 *     TX1G_FIFO_RST    
 *     FORCE_TXCLK      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r (0x00009011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_s {
	uint32_t v[1];
	uint32_t tx3_anatxacontrol0[1];
	uint32_t _tx3_anatxacontrol0;
} BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_CLR(r) (r).tx3_anatxacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_SET(r,d) (r).tx3_anatxacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GET(r) (r).tx3_anatxacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED0f_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED0f_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_FORCE_TXCLKf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_FORCE_TXCLKf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GLOOPOUTENf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GLOOPOUTENf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED1f_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED1f_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PRBS_ENf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PRBS_ENf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_ENf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_ENf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_STRTf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_STRTf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPOL_FLIPf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPOL_FLIPf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RTBI_FLIPf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RTBI_FLIPf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_Rf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_Rf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPAT_ENf_GET(r) ((((r).tx3_anatxacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPAT_ENf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX_MDATA_ENf_GET(r) (((r).tx3_anatxacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX_MDATA_ENf_SET(r,f) (r).tx3_anatxacontrol0[0]=(((r).tx3_anatxacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX3_ANATXACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r,(_r._tx3_anatxacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r,(_r._tx3_anatxacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r
#define TX3_ANATXACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_t TX3_ANATXACONTROL0r_t;
#define TX3_ANATXACONTROL0r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_CLR
#define TX3_ANATXACONTROL0r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_SET
#define TX3_ANATXACONTROL0r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GET
#define TX3_ANATXACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED0f_GET
#define TX3_ANATXACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED0f_SET
#define TX3_ANATXACONTROL0r_FORCE_TXCLKf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_FORCE_TXCLKf_GET
#define TX3_ANATXACONTROL0r_FORCE_TXCLKf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_FORCE_TXCLKf_SET
#define TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET
#define TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET
#define TX3_ANATXACONTROL0r_GLOOPOUTENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GLOOPOUTENf_GET
#define TX3_ANATXACONTROL0r_GLOOPOUTENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_GLOOPOUTENf_SET
#define TX3_ANATXACONTROL0r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED1f_GET
#define TX3_ANATXACONTROL0r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RESERVED1f_SET
#define TX3_ANATXACONTROL0r_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PRBS_ENf_GET
#define TX3_ANATXACONTROL0r_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PRBS_ENf_SET
#define TX3_ANATXACONTROL0r_PCKT_ENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_ENf_GET
#define TX3_ANATXACONTROL0r_PCKT_ENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_ENf_SET
#define TX3_ANATXACONTROL0r_PCKT_STRTf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_STRTf_GET
#define TX3_ANATXACONTROL0r_PCKT_STRTf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_PCKT_STRTf_SET
#define TX3_ANATXACONTROL0r_TXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPOL_FLIPf_GET
#define TX3_ANATXACONTROL0r_TXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPOL_FLIPf_SET
#define TX3_ANATXACONTROL0r_RTBI_FLIPf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RTBI_FLIPf_GET
#define TX3_ANATXACONTROL0r_RTBI_FLIPf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_RTBI_FLIPf_SET
#define TX3_ANATXACONTROL0r_EDEN_Rf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_Rf_GET
#define TX3_ANATXACONTROL0r_EDEN_Rf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_Rf_SET
#define TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_GET
#define TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_EDEN_FORCE_Rf_SET
#define TX3_ANATXACONTROL0r_TXPAT_ENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPAT_ENf_GET
#define TX3_ANATXACONTROL0r_TXPAT_ENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TXPAT_ENf_SET
#define TX3_ANATXACONTROL0r_TX_MDATA_ENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX_MDATA_ENf_GET
#define TX3_ANATXACONTROL0r_TX_MDATA_ENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r_TX_MDATA_ENf_SET
#define READ_TX3_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL0r
#define WRITE_TX3_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXMDATA0
 * BLOCKS:   TX3
 * REGADDR:  0x8092
 * DESC:     Tx test mux data 0 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAL   
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSEL     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r (0x00009012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXMDATA0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_s {
	uint32_t v[1];
	uint32_t tx3_anatxmdata0[1];
	uint32_t _tx3_anatxmdata0;
} BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_CLR(r) (r).tx3_anatxmdata0[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_SET(r,d) (r).tx3_anatxmdata0[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_GET(r) (r).tx3_anatxmdata0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXTESTMUXSELf_GET(r) ((((r).tx3_anatxmdata0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXTESTMUXSELf_SET(r,f) (r).tx3_anatxmdata0[0]=(((r).tx3_anatxmdata0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_RLFIFO_TSTSELf_GET(r) ((((r).tx3_anatxmdata0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_RLFIFO_TSTSELf_SET(r,f) (r).tx3_anatxmdata0[0]=(((r).tx3_anatxmdata0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXMDIOTSTDATALf_GET(r) (((r).tx3_anatxmdata0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXMDIOTSTDATALf_SET(r,f) (r).tx3_anatxmdata0[0]=(((r).tx3_anatxmdata0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX3_ANATXMDATA0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r,(_r._tx3_anatxmdata0))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r,(_r._tx3_anatxmdata0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXMDATA0r BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r
#define TX3_ANATXMDATA0r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_t TX3_ANATXMDATA0r_t;
#define TX3_ANATXMDATA0r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_CLR
#define TX3_ANATXMDATA0r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_SET
#define TX3_ANATXMDATA0r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_GET
#define TX3_ANATXMDATA0r_TXTESTMUXSELf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXTESTMUXSELf_GET
#define TX3_ANATXMDATA0r_TXTESTMUXSELf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXTESTMUXSELf_SET
#define TX3_ANATXMDATA0r_RLFIFO_TSTSELf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_RLFIFO_TSTSELf_GET
#define TX3_ANATXMDATA0r_RLFIFO_TSTSELf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_RLFIFO_TSTSELf_SET
#define TX3_ANATXMDATA0r_TXMDIOTSTDATALf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXMDIOTSTDATALf_GET
#define TX3_ANATXMDATA0r_TXMDIOTSTDATALf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r_TXMDIOTSTDATALf_SET
#define READ_TX3_ANATXMDATA0r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXMDATA0r
#define WRITE_TX3_ANATXMDATA0r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXMDATA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXMDATA1
 * BLOCKS:   TX3
 * REGADDR:  0x8093
 * DESC:     Tx test mux data 1 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAH   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r (0x00009013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXMDATA1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_s {
	uint32_t v[1];
	uint32_t tx3_anatxmdata1[1];
	uint32_t _tx3_anatxmdata1;
} BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_CLR(r) (r).tx3_anatxmdata1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_SET(r,d) (r).tx3_anatxmdata1[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_GET(r) (r).tx3_anatxmdata1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_RESERVED0f_GET(r) ((((r).tx3_anatxmdata1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_RESERVED0f_SET(r,f) (r).tx3_anatxmdata1[0]=(((r).tx3_anatxmdata1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_GET(r) (((r).tx3_anatxmdata1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_SET(r,f) (r).tx3_anatxmdata1[0]=(((r).tx3_anatxmdata1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX3_ANATXMDATA1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r,(_r._tx3_anatxmdata1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r,(_r._tx3_anatxmdata1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXMDATA1r BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r
#define TX3_ANATXMDATA1r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_t TX3_ANATXMDATA1r_t;
#define TX3_ANATXMDATA1r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_CLR
#define TX3_ANATXMDATA1r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_SET
#define TX3_ANATXMDATA1r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_GET
#define TX3_ANATXMDATA1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_RESERVED0f_GET
#define TX3_ANATXMDATA1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_RESERVED0f_SET
#define TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_GET
#define TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r_TXMDIOTSTDATAHf_SET
#define READ_TX3_ANATXMDATA1r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXMDATA1r
#define WRITE_TX3_ANATXMDATA1r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXMDATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXMDATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXASTATUS1
 * BLOCKS:   TX3
 * REGADDR:  0x8094
 * DESC:     Tx analog status 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     TX_ID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r (0x00009014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_s {
	uint32_t v[1];
	uint32_t tx3_anatxastatus1[1];
	uint32_t _tx3_anatxastatus1;
} BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_CLR(r) (r).tx3_anatxastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_SET(r,d) (r).tx3_anatxastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_GET(r) (r).tx3_anatxastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_TX_IDf_GET(r) ((((r).tx3_anatxastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_TX_IDf_SET(r,f) (r).tx3_anatxastatus1[0]=(((r).tx3_anatxastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_RESERVED0f_GET(r) (((r).tx3_anatxastatus1[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_RESERVED0f_SET(r,f) (r).tx3_anatxastatus1[0]=(((r).tx3_anatxastatus1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TX3_ANATXASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r,(_r._tx3_anatxastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r,(_r._tx3_anatxastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r
#define TX3_ANATXASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_t TX3_ANATXASTATUS1r_t;
#define TX3_ANATXASTATUS1r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_CLR
#define TX3_ANATXASTATUS1r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_SET
#define TX3_ANATXASTATUS1r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_GET
#define TX3_ANATXASTATUS1r_TX_IDf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_TX_IDf_GET
#define TX3_ANATXASTATUS1r_TX_IDf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_TX_IDf_SET
#define TX3_ANATXASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_RESERVED0f_GET
#define TX3_ANATXASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r_RESERVED0f_SET
#define READ_TX3_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXASTATUS1r
#define WRITE_TX3_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXACONTROL1
 * BLOCKS:   TX3
 * REGADDR:  0x8095
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IFULLSPD         
 *     TX_SEL_HALFRATE  
 *     DRIVER_VCM       
 *     TICKSEL          
 *     VDDR_BGB         
 *     DRIVERMODE       
 *     NEWBIAS_EN       
 *     REFH_TX          
 *     REFL_TX          
 *     ID2C             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r (0x00009015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_s {
	uint32_t v[1];
	uint32_t tx3_anatxacontrol1[1];
	uint32_t _tx3_anatxacontrol1;
} BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_CLR(r) (r).tx3_anatxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_SET(r,d) (r).tx3_anatxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_GET(r) (r).tx3_anatxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_ID2Cf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_ID2Cf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFL_TXf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFL_TXf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFH_TXf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFH_TXf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_NEWBIAS_ENf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_NEWBIAS_ENf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVERMODEf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVERMODEf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_VDDR_BGBf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_VDDR_BGBf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TICKSELf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TICKSELf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVER_VCMf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVER_VCMf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET(r) ((((r).tx3_anatxacontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_IFULLSPDf_GET(r) (((r).tx3_anatxacontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_IFULLSPDf_SET(r,f) (r).tx3_anatxacontrol1[0]=(((r).tx3_anatxacontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TX3_ANATXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r,(_r._tx3_anatxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r,(_r._tx3_anatxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r
#define TX3_ANATXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_t TX3_ANATXACONTROL1r_t;
#define TX3_ANATXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_CLR
#define TX3_ANATXACONTROL1r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_SET
#define TX3_ANATXACONTROL1r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_GET
#define TX3_ANATXACONTROL1r_ID2Cf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_ID2Cf_GET
#define TX3_ANATXACONTROL1r_ID2Cf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_ID2Cf_SET
#define TX3_ANATXACONTROL1r_REFL_TXf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFL_TXf_GET
#define TX3_ANATXACONTROL1r_REFL_TXf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFL_TXf_SET
#define TX3_ANATXACONTROL1r_REFH_TXf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFH_TXf_GET
#define TX3_ANATXACONTROL1r_REFH_TXf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_REFH_TXf_SET
#define TX3_ANATXACONTROL1r_NEWBIAS_ENf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_NEWBIAS_ENf_GET
#define TX3_ANATXACONTROL1r_NEWBIAS_ENf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_NEWBIAS_ENf_SET
#define TX3_ANATXACONTROL1r_DRIVERMODEf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVERMODEf_GET
#define TX3_ANATXACONTROL1r_DRIVERMODEf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVERMODEf_SET
#define TX3_ANATXACONTROL1r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_VDDR_BGBf_GET
#define TX3_ANATXACONTROL1r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_VDDR_BGBf_SET
#define TX3_ANATXACONTROL1r_TICKSELf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TICKSELf_GET
#define TX3_ANATXACONTROL1r_TICKSELf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TICKSELf_SET
#define TX3_ANATXACONTROL1r_DRIVER_VCMf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVER_VCMf_GET
#define TX3_ANATXACONTROL1r_DRIVER_VCMf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_DRIVER_VCMf_SET
#define TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET
#define TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET
#define TX3_ANATXACONTROL1r_IFULLSPDf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_IFULLSPDf_GET
#define TX3_ANATXACONTROL1r_IFULLSPDf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r_IFULLSPDf_SET
#define READ_TX3_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL1r
#define WRITE_TX3_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_ANATXACONTROL2
 * BLOCKS:   TX3
 * REGADDR:  0x8096
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     IMODE_DRVR       
 *     IMAX_DRVR        
 *     IMIN_DRVR        
 *     I21MUX           
 *     IMODE_PREDRV     
 *     IMAX_PREDRV      
 *     IMIN_PREDRV      
 *     ICBUF2T          
 *     ICBUF1T          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r (0x00009016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program TX3_ANATXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_s {
	uint32_t v[1];
	uint32_t tx3_anatxacontrol2[1];
	uint32_t _tx3_anatxacontrol2;
} BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_CLR(r) (r).tx3_anatxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_SET(r,d) (r).tx3_anatxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_GET(r) (r).tx3_anatxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF1Tf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF1Tf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF2Tf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF2Tf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_PREDRVf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_PREDRVf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_PREDRVf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_PREDRVf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_PREDRVf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_PREDRVf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_I21MUXf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_I21MUXf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_DRVRf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_DRVRf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_DRVRf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_DRVRf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_DRVRf_GET(r) ((((r).tx3_anatxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_DRVRf_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_RESERVED0f_GET(r) (((r).tx3_anatxacontrol2[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_RESERVED0f_SET(r,f) (r).tx3_anatxacontrol2[0]=(((r).tx3_anatxacontrol2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TX3_ANATXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r,(_r._tx3_anatxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r,(_r._tx3_anatxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r
#define TX3_ANATXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_t TX3_ANATXACONTROL2r_t;
#define TX3_ANATXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_CLR
#define TX3_ANATXACONTROL2r_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_SET
#define TX3_ANATXACONTROL2r_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_GET
#define TX3_ANATXACONTROL2r_ICBUF1Tf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF1Tf_GET
#define TX3_ANATXACONTROL2r_ICBUF1Tf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF1Tf_SET
#define TX3_ANATXACONTROL2r_ICBUF2Tf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF2Tf_GET
#define TX3_ANATXACONTROL2r_ICBUF2Tf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_ICBUF2Tf_SET
#define TX3_ANATXACONTROL2r_IMIN_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_PREDRVf_GET
#define TX3_ANATXACONTROL2r_IMIN_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_PREDRVf_SET
#define TX3_ANATXACONTROL2r_IMAX_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_PREDRVf_GET
#define TX3_ANATXACONTROL2r_IMAX_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_PREDRVf_SET
#define TX3_ANATXACONTROL2r_IMODE_PREDRVf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_PREDRVf_GET
#define TX3_ANATXACONTROL2r_IMODE_PREDRVf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_PREDRVf_SET
#define TX3_ANATXACONTROL2r_I21MUXf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_I21MUXf_GET
#define TX3_ANATXACONTROL2r_I21MUXf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_I21MUXf_SET
#define TX3_ANATXACONTROL2r_IMIN_DRVRf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_DRVRf_GET
#define TX3_ANATXACONTROL2r_IMIN_DRVRf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMIN_DRVRf_SET
#define TX3_ANATXACONTROL2r_IMAX_DRVRf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_DRVRf_GET
#define TX3_ANATXACONTROL2r_IMAX_DRVRf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMAX_DRVRf_SET
#define TX3_ANATXACONTROL2r_IMODE_DRVRf_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_DRVRf_GET
#define TX3_ANATXACONTROL2r_IMODE_DRVRf_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_IMODE_DRVRf_SET
#define TX3_ANATXACONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_RESERVED0f_GET
#define TX3_ANATXACONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r_RESERVED0f_SET
#define READ_TX3_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_READ_TX3_ANATXACONTROL2r
#define WRITE_TX3_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_TX3_ANATXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_ANATXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_TX_OS_DRIVER
 * BLOCKS:   TX3
 * REGADDR:  0x8097
 * DESC:     Tx reserved OS analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr (0x00009017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX3_TX_OS_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx3_tx_os_driver[1];
	uint32_t _tx3_tx_os_driver;
} BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_CLR(r) (r).tx3_tx_os_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_SET(r,d) (r).tx3_tx_os_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_GET(r) (r).tx3_tx_os_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx3_tx_os_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx3_tx_os_driver[0]=(((r).tx3_tx_os_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IDRIVERf_GET(r) ((((r).tx3_tx_os_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IDRIVERf_SET(r,f) (r).tx3_tx_os_driver[0]=(((r).tx3_tx_os_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx3_tx_os_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx3_tx_os_driver[0]=(((r).tx3_tx_os_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx3_tx_os_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx3_tx_os_driver[0]=(((r).tx3_tx_os_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_ICBUF1T0f_GET(r) (((r).tx3_tx_os_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx3_tx_os_driver[0]=(((r).tx3_tx_os_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX3_TX_OS_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr,(_r._tx3_tx_os_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr,(_r._tx3_tx_os_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr
#define TX3_TX_OS_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_t TX3_TX_OS_DRIVERr_t;
#define TX3_TX_OS_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_CLR
#define TX3_TX_OS_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_SET
#define TX3_TX_OS_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_GET
#define TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX3_TX_OS_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IDRIVERf_GET
#define TX3_TX_OS_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IDRIVERf_SET
#define TX3_TX_OS_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IPREDRIVERf_GET
#define TX3_TX_OS_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_IPREDRIVERf_SET
#define TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET
#define TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET
#define TX3_TX_OS_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_ICBUF1T0f_GET
#define TX3_TX_OS_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr_ICBUF1T0f_SET
#define READ_TX3_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX3_TX_OS_DRIVERr
#define WRITE_TX3_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX3_TX_OS_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_TX_OS_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX3_TX_BR_DRIVER
 * BLOCKS:   TX3
 * REGADDR:  0x8098
 * DESC:     Tx reserved BR analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr (0x00009018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX3_TX_BR_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx3_tx_br_driver[1];
	uint32_t _tx3_tx_br_driver;
} BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_CLR(r) (r).tx3_tx_br_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_SET(r,d) (r).tx3_tx_br_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_GET(r) (r).tx3_tx_br_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).tx3_tx_br_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).tx3_tx_br_driver[0]=(((r).tx3_tx_br_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IDRIVERf_GET(r) ((((r).tx3_tx_br_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IDRIVERf_SET(r,f) (r).tx3_tx_br_driver[0]=(((r).tx3_tx_br_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IPREDRIVERf_GET(r) ((((r).tx3_tx_br_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IPREDRIVERf_SET(r,f) (r).tx3_tx_br_driver[0]=(((r).tx3_tx_br_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).tx3_tx_br_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).tx3_tx_br_driver[0]=(((r).tx3_tx_br_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_ICBUF1T0f_GET(r) (((r).tx3_tx_br_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_ICBUF1T0f_SET(r,f) (r).tx3_tx_br_driver[0]=(((r).tx3_tx_br_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX3_TX_BR_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX3_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr,(_r._tx3_tx_br_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TX3_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr,(_r._tx3_tx_br_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX3_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr
#define TX3_TX_BR_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_t TX3_TX_BR_DRIVERr_t;
#define TX3_TX_BR_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_CLR
#define TX3_TX_BR_DRIVERr_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_SET
#define TX3_TX_BR_DRIVERr_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_GET
#define TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET
#define TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET
#define TX3_TX_BR_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IDRIVERf_GET
#define TX3_TX_BR_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IDRIVERf_SET
#define TX3_TX_BR_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IPREDRIVERf_GET
#define TX3_TX_BR_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_IPREDRIVERf_SET
#define TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET
#define TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET
#define TX3_TX_BR_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_ICBUF1T0f_GET
#define TX3_TX_BR_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr_ICBUF1T0f_SET
#define READ_TX3_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_READ_TX3_TX_BR_DRIVERr
#define WRITE_TX3_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TX3_TX_BR_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX3_TX_BR_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXASTATUS0
 * BLOCKS:   TXB
 * REGADDR:  0x80a0
 * DESC:     Tx analog status 0 register
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK       
 *     RLTXFERR_STKY    
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r (0x0000a010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXASTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_s {
	uint32_t v[1];
	uint32_t txb_anatxastatus0[1];
	uint32_t _txb_anatxastatus0;
} BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_CLR(r) (r).txb_anatxastatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_SET(r,d) (r).txb_anatxastatus0[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_GET(r) (r).txb_anatxastatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RESERVED0f_GET(r) ((((r).txb_anatxastatus0[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RESERVED0f_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXDISABLE_LNf_GET(r) ((((r).txb_anatxastatus0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXDISABLE_LNf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXFERR_STKYf_GET(r) ((((r).txb_anatxastatus0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXFERR_STKYf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TBI_MODEf_GET(r) ((((r).txb_anatxastatus0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TBI_MODEf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_RESETf_GET(r) ((((r).txb_anatxastatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_RESETf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_PWRDNf_GET(r) ((((r).txb_anatxastatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_PWRDNf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RLTXFERR_STKYf_GET(r) ((((r).txb_anatxastatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RLTXFERR_STKYf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXPLL_LOCKf_GET(r) (((r).txb_anatxastatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXPLL_LOCKf_SET(r,f) (r).txb_anatxastatus0[0]=(((r).txb_anatxastatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXB_ANATXASTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r,(_r._txb_anatxastatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXASTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r,(_r._txb_anatxastatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r
#define TXB_ANATXASTATUS0r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_t TXB_ANATXASTATUS0r_t;
#define TXB_ANATXASTATUS0r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_CLR
#define TXB_ANATXASTATUS0r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_SET
#define TXB_ANATXASTATUS0r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_GET
#define TXB_ANATXASTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RESERVED0f_GET
#define TXB_ANATXASTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RESERVED0f_SET
#define TXB_ANATXASTATUS0r_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXDISABLE_LNf_GET
#define TXB_ANATXASTATUS0r_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXDISABLE_LNf_SET
#define TXB_ANATXASTATUS0r_TXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXFERR_STKYf_GET
#define TXB_ANATXASTATUS0r_TXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXFERR_STKYf_SET
#define TXB_ANATXASTATUS0r_TBI_MODEf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TBI_MODEf_GET
#define TXB_ANATXASTATUS0r_TBI_MODEf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TBI_MODEf_SET
#define TXB_ANATXASTATUS0r_TX_RESETf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_RESETf_GET
#define TXB_ANATXASTATUS0r_TX_RESETf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_RESETf_SET
#define TXB_ANATXASTATUS0r_TX_PWRDNf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_PWRDNf_GET
#define TXB_ANATXASTATUS0r_TX_PWRDNf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TX_PWRDNf_SET
#define TXB_ANATXASTATUS0r_RLTXFERR_STKYf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RLTXFERR_STKYf_GET
#define TXB_ANATXASTATUS0r_RLTXFERR_STKYf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_RLTXFERR_STKYf_SET
#define TXB_ANATXASTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXPLL_LOCKf_GET
#define TXB_ANATXASTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r_TXPLL_LOCKf_SET
#define READ_TXB_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXASTATUS0r
#define WRITE_TXB_ANATXASTATUS0r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXASTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXACONTROL0
 * BLOCKS:   TXB
 * REGADDR:  0x80a1
 * DESC:     Tx analog control 0 register
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     RESERVED1        
 *     GLOOPOUTEN       
 *     TX1G_FIFO_RST    
 *     FORCE_TXCLK      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r (0x0000a011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXACONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_s {
	uint32_t v[1];
	uint32_t txb_anatxacontrol0[1];
	uint32_t _txb_anatxacontrol0;
} BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_CLR(r) (r).txb_anatxacontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_SET(r,d) (r).txb_anatxacontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GET(r) (r).txb_anatxacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED0f_GET(r) ((((r).txb_anatxacontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED0f_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_FORCE_TXCLKf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_FORCE_TXCLKf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GLOOPOUTENf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GLOOPOUTENf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED1f_GET(r) ((((r).txb_anatxacontrol0[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED1f_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PRBS_ENf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PRBS_ENf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_ENf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_ENf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_STRTf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_STRTf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPOL_FLIPf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPOL_FLIPf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RTBI_FLIPf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RTBI_FLIPf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_Rf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_Rf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPAT_ENf_GET(r) ((((r).txb_anatxacontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPAT_ENf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX_MDATA_ENf_GET(r) (((r).txb_anatxacontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX_MDATA_ENf_SET(r,f) (r).txb_anatxacontrol0[0]=(((r).txb_anatxacontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXB_ANATXACONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r,(_r._txb_anatxacontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r,(_r._txb_anatxacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r
#define TXB_ANATXACONTROL0r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_t TXB_ANATXACONTROL0r_t;
#define TXB_ANATXACONTROL0r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_CLR
#define TXB_ANATXACONTROL0r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_SET
#define TXB_ANATXACONTROL0r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GET
#define TXB_ANATXACONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED0f_GET
#define TXB_ANATXACONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED0f_SET
#define TXB_ANATXACONTROL0r_FORCE_TXCLKf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_FORCE_TXCLKf_GET
#define TXB_ANATXACONTROL0r_FORCE_TXCLKf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_FORCE_TXCLKf_SET
#define TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_GET
#define TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX1G_FIFO_RSTf_SET
#define TXB_ANATXACONTROL0r_GLOOPOUTENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GLOOPOUTENf_GET
#define TXB_ANATXACONTROL0r_GLOOPOUTENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_GLOOPOUTENf_SET
#define TXB_ANATXACONTROL0r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED1f_GET
#define TXB_ANATXACONTROL0r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RESERVED1f_SET
#define TXB_ANATXACONTROL0r_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PRBS_ENf_GET
#define TXB_ANATXACONTROL0r_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PRBS_ENf_SET
#define TXB_ANATXACONTROL0r_PCKT_ENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_ENf_GET
#define TXB_ANATXACONTROL0r_PCKT_ENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_ENf_SET
#define TXB_ANATXACONTROL0r_PCKT_STRTf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_STRTf_GET
#define TXB_ANATXACONTROL0r_PCKT_STRTf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_PCKT_STRTf_SET
#define TXB_ANATXACONTROL0r_TXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPOL_FLIPf_GET
#define TXB_ANATXACONTROL0r_TXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPOL_FLIPf_SET
#define TXB_ANATXACONTROL0r_RTBI_FLIPf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RTBI_FLIPf_GET
#define TXB_ANATXACONTROL0r_RTBI_FLIPf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_RTBI_FLIPf_SET
#define TXB_ANATXACONTROL0r_EDEN_Rf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_Rf_GET
#define TXB_ANATXACONTROL0r_EDEN_Rf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_Rf_SET
#define TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_GET
#define TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_EDEN_FORCE_Rf_SET
#define TXB_ANATXACONTROL0r_TXPAT_ENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPAT_ENf_GET
#define TXB_ANATXACONTROL0r_TXPAT_ENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TXPAT_ENf_SET
#define TXB_ANATXACONTROL0r_TX_MDATA_ENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX_MDATA_ENf_GET
#define TXB_ANATXACONTROL0r_TX_MDATA_ENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r_TX_MDATA_ENf_SET
#define READ_TXB_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL0r
#define WRITE_TXB_ANATXACONTROL0r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXMDATA0
 * BLOCKS:   TXB
 * REGADDR:  0x80a2
 * DESC:     Tx test mux data 0 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAL   
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSEL     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r (0x0000a012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXMDATA0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_s {
	uint32_t v[1];
	uint32_t txb_anatxmdata0[1];
	uint32_t _txb_anatxmdata0;
} BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_CLR(r) (r).txb_anatxmdata0[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_SET(r,d) (r).txb_anatxmdata0[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_GET(r) (r).txb_anatxmdata0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXTESTMUXSELf_GET(r) ((((r).txb_anatxmdata0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXTESTMUXSELf_SET(r,f) (r).txb_anatxmdata0[0]=(((r).txb_anatxmdata0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_RLFIFO_TSTSELf_GET(r) ((((r).txb_anatxmdata0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_RLFIFO_TSTSELf_SET(r,f) (r).txb_anatxmdata0[0]=(((r).txb_anatxmdata0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXMDIOTSTDATALf_GET(r) (((r).txb_anatxmdata0[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXMDIOTSTDATALf_SET(r,f) (r).txb_anatxmdata0[0]=(((r).txb_anatxmdata0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXB_ANATXMDATA0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r,(_r._txb_anatxmdata0))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXMDATA0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r,(_r._txb_anatxmdata0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXMDATA0r BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r
#define TXB_ANATXMDATA0r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_t TXB_ANATXMDATA0r_t;
#define TXB_ANATXMDATA0r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_CLR
#define TXB_ANATXMDATA0r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_SET
#define TXB_ANATXMDATA0r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_GET
#define TXB_ANATXMDATA0r_TXTESTMUXSELf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXTESTMUXSELf_GET
#define TXB_ANATXMDATA0r_TXTESTMUXSELf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXTESTMUXSELf_SET
#define TXB_ANATXMDATA0r_RLFIFO_TSTSELf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_RLFIFO_TSTSELf_GET
#define TXB_ANATXMDATA0r_RLFIFO_TSTSELf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_RLFIFO_TSTSELf_SET
#define TXB_ANATXMDATA0r_TXMDIOTSTDATALf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXMDIOTSTDATALf_GET
#define TXB_ANATXMDATA0r_TXMDIOTSTDATALf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r_TXMDIOTSTDATALf_SET
#define READ_TXB_ANATXMDATA0r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXMDATA0r
#define WRITE_TXB_ANATXMDATA0r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXMDATA0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXMDATA1
 * BLOCKS:   TXB
 * REGADDR:  0x80a3
 * DESC:     Tx test mux data 1 register
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATAH   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r (0x0000a013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXMDATA1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_s {
	uint32_t v[1];
	uint32_t txb_anatxmdata1[1];
	uint32_t _txb_anatxmdata1;
} BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_CLR(r) (r).txb_anatxmdata1[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_SET(r,d) (r).txb_anatxmdata1[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_GET(r) (r).txb_anatxmdata1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_RESERVED0f_GET(r) ((((r).txb_anatxmdata1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_RESERVED0f_SET(r,f) (r).txb_anatxmdata1[0]=(((r).txb_anatxmdata1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_GET(r) (((r).txb_anatxmdata1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_SET(r,f) (r).txb_anatxmdata1[0]=(((r).txb_anatxmdata1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXB_ANATXMDATA1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r,(_r._txb_anatxmdata1))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXMDATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r,(_r._txb_anatxmdata1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXMDATA1r BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r
#define TXB_ANATXMDATA1r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_t TXB_ANATXMDATA1r_t;
#define TXB_ANATXMDATA1r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_CLR
#define TXB_ANATXMDATA1r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_SET
#define TXB_ANATXMDATA1r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_GET
#define TXB_ANATXMDATA1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_RESERVED0f_GET
#define TXB_ANATXMDATA1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_RESERVED0f_SET
#define TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_GET
#define TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r_TXMDIOTSTDATAHf_SET
#define READ_TXB_ANATXMDATA1r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXMDATA1r
#define WRITE_TXB_ANATXMDATA1r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXMDATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXMDATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXASTATUS1
 * BLOCKS:   TXB
 * REGADDR:  0x80a4
 * DESC:     Tx analog status 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     TX_ID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r (0x0000a014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXASTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_s {
	uint32_t v[1];
	uint32_t txb_anatxastatus1[1];
	uint32_t _txb_anatxastatus1;
} BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_CLR(r) (r).txb_anatxastatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_SET(r,d) (r).txb_anatxastatus1[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_GET(r) (r).txb_anatxastatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_TX_IDf_GET(r) ((((r).txb_anatxastatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_TX_IDf_SET(r,f) (r).txb_anatxastatus1[0]=(((r).txb_anatxastatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_RESERVED0f_GET(r) (((r).txb_anatxastatus1[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_RESERVED0f_SET(r,f) (r).txb_anatxastatus1[0]=(((r).txb_anatxastatus1[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TXB_ANATXASTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r,(_r._txb_anatxastatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXASTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r,(_r._txb_anatxastatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r
#define TXB_ANATXASTATUS1r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_t TXB_ANATXASTATUS1r_t;
#define TXB_ANATXASTATUS1r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_CLR
#define TXB_ANATXASTATUS1r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_SET
#define TXB_ANATXASTATUS1r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_GET
#define TXB_ANATXASTATUS1r_TX_IDf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_TX_IDf_GET
#define TXB_ANATXASTATUS1r_TX_IDf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_TX_IDf_SET
#define TXB_ANATXASTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_RESERVED0f_GET
#define TXB_ANATXASTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r_RESERVED0f_SET
#define READ_TXB_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXASTATUS1r
#define WRITE_TXB_ANATXASTATUS1r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXASTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXASTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXACONTROL1
 * BLOCKS:   TXB
 * REGADDR:  0x80a5
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IFULLSPD         
 *     TX_SEL_HALFRATE  
 *     DRIVER_VCM       
 *     TICKSEL          
 *     VDDR_BGB         
 *     DRIVERMODE       
 *     NEWBIAS_EN       
 *     REFH_TX          
 *     REFL_TX          
 *     ID2C             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r (0x0000a015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_s {
	uint32_t v[1];
	uint32_t txb_anatxacontrol1[1];
	uint32_t _txb_anatxacontrol1;
} BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_CLR(r) (r).txb_anatxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_SET(r,d) (r).txb_anatxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_GET(r) (r).txb_anatxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_ID2Cf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_ID2Cf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFL_TXf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFL_TXf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFH_TXf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFH_TXf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_NEWBIAS_ENf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_NEWBIAS_ENf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVERMODEf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVERMODEf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_VDDR_BGBf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_VDDR_BGBf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TICKSELf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TICKSELf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVER_VCMf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVER_VCMf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET(r) ((((r).txb_anatxacontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_IFULLSPDf_GET(r) (((r).txb_anatxacontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_IFULLSPDf_SET(r,f) (r).txb_anatxacontrol1[0]=(((r).txb_anatxacontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TXB_ANATXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r,(_r._txb_anatxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r,(_r._txb_anatxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r
#define TXB_ANATXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_t TXB_ANATXACONTROL1r_t;
#define TXB_ANATXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_CLR
#define TXB_ANATXACONTROL1r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_SET
#define TXB_ANATXACONTROL1r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_GET
#define TXB_ANATXACONTROL1r_ID2Cf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_ID2Cf_GET
#define TXB_ANATXACONTROL1r_ID2Cf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_ID2Cf_SET
#define TXB_ANATXACONTROL1r_REFL_TXf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFL_TXf_GET
#define TXB_ANATXACONTROL1r_REFL_TXf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFL_TXf_SET
#define TXB_ANATXACONTROL1r_REFH_TXf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFH_TXf_GET
#define TXB_ANATXACONTROL1r_REFH_TXf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_REFH_TXf_SET
#define TXB_ANATXACONTROL1r_NEWBIAS_ENf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_NEWBIAS_ENf_GET
#define TXB_ANATXACONTROL1r_NEWBIAS_ENf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_NEWBIAS_ENf_SET
#define TXB_ANATXACONTROL1r_DRIVERMODEf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVERMODEf_GET
#define TXB_ANATXACONTROL1r_DRIVERMODEf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVERMODEf_SET
#define TXB_ANATXACONTROL1r_VDDR_BGBf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_VDDR_BGBf_GET
#define TXB_ANATXACONTROL1r_VDDR_BGBf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_VDDR_BGBf_SET
#define TXB_ANATXACONTROL1r_TICKSELf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TICKSELf_GET
#define TXB_ANATXACONTROL1r_TICKSELf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TICKSELf_SET
#define TXB_ANATXACONTROL1r_DRIVER_VCMf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVER_VCMf_GET
#define TXB_ANATXACONTROL1r_DRIVER_VCMf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_DRIVER_VCMf_SET
#define TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_GET
#define TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_TX_SEL_HALFRATEf_SET
#define TXB_ANATXACONTROL1r_IFULLSPDf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_IFULLSPDf_GET
#define TXB_ANATXACONTROL1r_IFULLSPDf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r_IFULLSPDf_SET
#define READ_TXB_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL1r
#define WRITE_TXB_ANATXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_ANATXACONTROL2
 * BLOCKS:   TXB
 * REGADDR:  0x80a6
 * DESC:     Tx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     IMODE_DRVR       
 *     IMAX_DRVR        
 *     IMIN_DRVR        
 *     I21MUX           
 *     IMODE_PREDRV     
 *     IMAX_PREDRV      
 *     IMIN_PREDRV      
 *     ICBUF2T          
 *     ICBUF1T          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r (0x0000a016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program TXB_ANATXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_s {
	uint32_t v[1];
	uint32_t txb_anatxacontrol2[1];
	uint32_t _txb_anatxacontrol2;
} BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_CLR(r) (r).txb_anatxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_SET(r,d) (r).txb_anatxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_GET(r) (r).txb_anatxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF1Tf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF1Tf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF2Tf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF2Tf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_PREDRVf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_PREDRVf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_PREDRVf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_PREDRVf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_PREDRVf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_PREDRVf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_I21MUXf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 5) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_I21MUXf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_DRVRf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_DRVRf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_DRVRf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_DRVRf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_DRVRf_GET(r) ((((r).txb_anatxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_DRVRf_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_RESERVED0f_GET(r) (((r).txb_anatxacontrol2[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_RESERVED0f_SET(r,f) (r).txb_anatxacontrol2[0]=(((r).txb_anatxacontrol2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TXB_ANATXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r,(_r._txb_anatxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r,(_r._txb_anatxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r
#define TXB_ANATXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_t TXB_ANATXACONTROL2r_t;
#define TXB_ANATXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_CLR
#define TXB_ANATXACONTROL2r_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_SET
#define TXB_ANATXACONTROL2r_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_GET
#define TXB_ANATXACONTROL2r_ICBUF1Tf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF1Tf_GET
#define TXB_ANATXACONTROL2r_ICBUF1Tf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF1Tf_SET
#define TXB_ANATXACONTROL2r_ICBUF2Tf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF2Tf_GET
#define TXB_ANATXACONTROL2r_ICBUF2Tf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_ICBUF2Tf_SET
#define TXB_ANATXACONTROL2r_IMIN_PREDRVf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_PREDRVf_GET
#define TXB_ANATXACONTROL2r_IMIN_PREDRVf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_PREDRVf_SET
#define TXB_ANATXACONTROL2r_IMAX_PREDRVf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_PREDRVf_GET
#define TXB_ANATXACONTROL2r_IMAX_PREDRVf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_PREDRVf_SET
#define TXB_ANATXACONTROL2r_IMODE_PREDRVf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_PREDRVf_GET
#define TXB_ANATXACONTROL2r_IMODE_PREDRVf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_PREDRVf_SET
#define TXB_ANATXACONTROL2r_I21MUXf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_I21MUXf_GET
#define TXB_ANATXACONTROL2r_I21MUXf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_I21MUXf_SET
#define TXB_ANATXACONTROL2r_IMIN_DRVRf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_DRVRf_GET
#define TXB_ANATXACONTROL2r_IMIN_DRVRf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMIN_DRVRf_SET
#define TXB_ANATXACONTROL2r_IMAX_DRVRf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_DRVRf_GET
#define TXB_ANATXACONTROL2r_IMAX_DRVRf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMAX_DRVRf_SET
#define TXB_ANATXACONTROL2r_IMODE_DRVRf_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_DRVRf_GET
#define TXB_ANATXACONTROL2r_IMODE_DRVRf_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_IMODE_DRVRf_SET
#define TXB_ANATXACONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_RESERVED0f_GET
#define TXB_ANATXACONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r_RESERVED0f_SET
#define READ_TXB_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_READ_TXB_ANATXACONTROL2r
#define WRITE_TXB_ANATXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_TXB_ANATXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_ANATXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_TX_OS_DRIVER
 * BLOCKS:   TXB
 * REGADDR:  0x80a7
 * DESC:     Tx reserved OS analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr (0x0000a017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TXB_TX_OS_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_s {
	uint32_t v[1];
	uint32_t txb_tx_os_driver[1];
	uint32_t _txb_tx_os_driver;
} BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_CLR(r) (r).txb_tx_os_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_SET(r,d) (r).txb_tx_os_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_GET(r) (r).txb_tx_os_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).txb_tx_os_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).txb_tx_os_driver[0]=(((r).txb_tx_os_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IDRIVERf_GET(r) ((((r).txb_tx_os_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IDRIVERf_SET(r,f) (r).txb_tx_os_driver[0]=(((r).txb_tx_os_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IPREDRIVERf_GET(r) ((((r).txb_tx_os_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IPREDRIVERf_SET(r,f) (r).txb_tx_os_driver[0]=(((r).txb_tx_os_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).txb_tx_os_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).txb_tx_os_driver[0]=(((r).txb_tx_os_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_ICBUF1T0f_GET(r) (((r).txb_tx_os_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_ICBUF1T0f_SET(r,f) (r).txb_tx_os_driver[0]=(((r).txb_tx_os_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXB_TX_OS_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr,(_r._txb_tx_os_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_TX_OS_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr,(_r._txb_tx_os_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr
#define TXB_TX_OS_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_t TXB_TX_OS_DRIVERr_t;
#define TXB_TX_OS_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_CLR
#define TXB_TX_OS_DRIVERr_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_SET
#define TXB_TX_OS_DRIVERr_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_GET
#define TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_GET
#define TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_POSTf_SET
#define TXB_TX_OS_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IDRIVERf_GET
#define TXB_TX_OS_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IDRIVERf_SET
#define TXB_TX_OS_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IPREDRIVERf_GET
#define TXB_TX_OS_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_IPREDRIVERf_SET
#define TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_GET
#define TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_PREEMPHASIS_PREf_SET
#define TXB_TX_OS_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_ICBUF1T0f_GET
#define TXB_TX_OS_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr_ICBUF1T0f_SET
#define READ_TXB_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_READ_TXB_TX_OS_DRIVERr
#define WRITE_TXB_TX_OS_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TXB_TX_OS_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_TX_OS_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXB_TX_BR_DRIVER
 * BLOCKS:   TXB
 * REGADDR:  0x80a8
 * DESC:     Tx reserved BR analog control register
 * SIZE:     32
 * FIELDS:
 *     ICBUF1T0         
 *     PREEMPHASIS_PRE  
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS_POST 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr (0x0000a018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TXB_TX_BR_DRIVER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_s {
	uint32_t v[1];
	uint32_t txb_tx_br_driver[1];
	uint32_t _txb_tx_br_driver;
} BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_t;

#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_CLR(r) (r).txb_tx_br_driver[0] = 0
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_SET(r,d) (r).txb_tx_br_driver[0] = d
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_GET(r) (r).txb_tx_br_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET(r) ((((r).txb_tx_br_driver[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET(r,f) (r).txb_tx_br_driver[0]=(((r).txb_tx_br_driver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IDRIVERf_GET(r) ((((r).txb_tx_br_driver[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IDRIVERf_SET(r,f) (r).txb_tx_br_driver[0]=(((r).txb_tx_br_driver[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IPREDRIVERf_GET(r) ((((r).txb_tx_br_driver[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IPREDRIVERf_SET(r,f) (r).txb_tx_br_driver[0]=(((r).txb_tx_br_driver[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET(r) ((((r).txb_tx_br_driver[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET(r,f) (r).txb_tx_br_driver[0]=(((r).txb_tx_br_driver[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_ICBUF1T0f_GET(r) (((r).txb_tx_br_driver[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_ICBUF1T0f_SET(r,f) (r).txb_tx_br_driver[0]=(((r).txb_tx_br_driver[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXB_TX_BR_DRIVER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXB_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr,(_r._txb_tx_br_driver))
#define BCMI_HYPERLITE_XGXS_WRITE_TXB_TX_BR_DRIVERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr,(_r._txb_tx_br_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXB_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr
#define TXB_TX_BR_DRIVERr_SIZE BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_t TXB_TX_BR_DRIVERr_t;
#define TXB_TX_BR_DRIVERr_CLR BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_CLR
#define TXB_TX_BR_DRIVERr_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_SET
#define TXB_TX_BR_DRIVERr_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_GET
#define TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_GET
#define TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_POSTf_SET
#define TXB_TX_BR_DRIVERr_IDRIVERf_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IDRIVERf_GET
#define TXB_TX_BR_DRIVERr_IDRIVERf_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IDRIVERf_SET
#define TXB_TX_BR_DRIVERr_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IPREDRIVERf_GET
#define TXB_TX_BR_DRIVERr_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_IPREDRIVERf_SET
#define TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_GET
#define TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_PREEMPHASIS_PREf_SET
#define TXB_TX_BR_DRIVERr_ICBUF1T0f_GET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_ICBUF1T0f_GET
#define TXB_TX_BR_DRIVERr_ICBUF1T0f_SET BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr_ICBUF1T0f_SET
#define READ_TXB_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_READ_TXB_TX_BR_DRIVERr
#define WRITE_TXB_TX_BR_DRIVERr BCMI_HYPERLITE_XGXS_WRITE_TXB_TX_BR_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXB_TX_BR_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXSTATUS
 * BLOCKS:   RX0
 * REGADDR:  0x80b0
 * DESC:     Rx lane status register
 * SIZE:     32
 * FIELDS:
 *     ADC_CDRSTATUS12_2_WADR_TEST 
 *     INTEG_STATUS_INTEG_STATUS 
 *     ADC_CDRSTATUS8_SIGDET 
 *     ADC_CDRSTATUS12_3_PRSTB_I66_MUX 
 *     ADC_CDRSTATUS6_PWRDN_PLL 
 *     ADC_CDRSTATUS5_RESERVED0 
 *     ADC_CDRSTATUS1_PLL_BYPASS 
 *     ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODD 
 *     PRBS_STATUS_PTBS_ERRORS 
 *     ADC_CDRSTATUS12_4_RFIFO_OVFLOW 
 *     SYNC_STATUS_RXSEQDONE 
 *     ADC_CDRSTATUS10_PRBS_STATE 
 *     ADC_CDRSTATUS2_RXSEQDONE 
 *     ADC_CDRSTATUS9_RESERVED0 
 *     RXTESTSEL_1_INTEG_MODE_SM 
 *     VCO_STATUS_VCO_STATUS 
 *     SIGDET_STATUS_RESERVED1 
 *     ADC_CDRSTATUS11_RESERVED0 
 *     ADC_CDRSTATUS3_ALLOW_INCREMENT_PC 
 *     ADC_CDRSTATUS4_RESERVED1 
 *     ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVEN 
 *     SCALE_STATUS_INTEG_SCALE_ACQ 
 *     RXTESTSEL_0_RESERVED1 
 *     ADC_CDRSTATUS12_1_RADR_TEST 
 *     ADC_CDRSTATUS8_RESERVED0 
 *     ADC_CDRSTATUS1_REFCLK 
 *     ADC_CDRSTATUS12_3_RSTB_I66 
 *     ADC_CDRSTATUS7E_EN_CDET_EVEN 
 *     ADC_CDRSTATUS2_RESERVED1 
 *     ADC_CDRSTATUS3_RESERVED1 
 *     ADC_CDRSTATUS12_4_RFIFO_UNFLOW 
 *     SYNC_STATUS_CX4_SIGDET 
 *     ADC_CDRSTATUS6_PWRDN_RX 
 *     ADC_CDRSTATUS7O_EN_CDET_ODD 
 *     ADC_CDRSTATUS7O_COMDET_ODD 
 *     RXTESTSEL_0_COMMA_ADJ_EN_EXT 
 *     ADC_CDRSTATUS12_4_RFIFO_ERROR_R 
 *     SYNC_STATUS_SATURATE_STATUS 
 *     ADC_CDRSTATUS1_RXCK_I 
 *     RXTESTSEL_1_FREQ_SEL_SM 
 *     ADC_CDRSTATUS12_3_RXCK_I66_TMUX 
 *     ADC_CDRSTATUS6_RESET_ANLG 
 *     ADC_CDRSTATUS7E_COMDET_EVEN 
 *     ADC_CDRSTATUS7E_RXCK1_EVEN 
 *     ADC_CDRSTATUS1_RXCK_TST 
 *     ADC_CDRSTATUS12_3_PRSTB_66B_MUX 
 *     SYNC_STATUS_RESERVED2 
 *     RXTESTSEL_0_COMMA_ADJ_EN 
 *     ADC_CDRSTATUS6_RX_PWRDN 
 *     ADC_CDRSTATUS7O_RXCK1_ODD 
 *     RXTESTSEL_1_FREQ_SEL_PC 
 *     ADC_CDRSTATUS3_RXSEQSTART 
 *     ADC_CDRSTATUS7E_RXCK0_EVEN 
 *     ADC_CDRSTATUS10_RESERVED1 
 *     ADC_CDRSTATUS12_3_RSTB_66B 
 *     SCALE_STATUS_PROP_SCALE_ACQ 
 *     ADC_CDRSTATUS3_RESERVED0 
 *     ADC_CDRSTATUS7O_RXCK0_ODD 
 *     ADC_CDRSTATUS1_CLOCKSWITCHSEL 
 *     ADC_CDRSTATUS4_PWRDN 
 *     RXTESTSEL_0_LINK_EN_R 
 *     RXTESTSEL_1_CDRACQDONE_R2 
 *     ADC_CDRSTATUS2_RXSEQSTART 
 *     ADC_CDRSTATUS12_4_RESERVED0 
 *     ADC_CDRSTATUS6_RX_RESET 
 *     ADC_CDRSTATUS6_RESERVED0 
 *     RXTESTSEL_0_COMMA_MASK 
 *     SYNC_STATUS_RX_SIGDET 
 *     ADC_CDRSTATUS10_RSTB_TST 
 *     ADC_CDRSTATUS12_2_RESERVED0 
 *     ADC_CDRSTATUS7E_RESERVED0 
 *     ADC_CDRSTATUS2_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RXCK_66B_TMUX 
 *     ADC_CDRSTATUS4_PLL_LOCK_RSTB 
 *     ADC_CDRSTATUS1_GLPBK_COMBO 
 *     ADC_CDRSTATUS12_1_ENABLE4 
 *     ADC_CDRSTATUS7O_RESERVED0 
 *     RXTESTSEL_1_RESERVED0 
 *     ADC_CDRSTATUS1_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RESERVED0 
 *     ADC_CDRSTATUS4_FREQ_SEL 
 *     ADC_CDRSTATUS10_PRBS_EN 
 *     ADC_CDRSTATUS2_RESERVED0 
 *     RXTESTSEL_0_RXPOL_FLIP 
 *     SYNC_STATUS_SYNC_STATUS 
 *     ADC_CDRSTATUS12_1_RESERVED0 
 *     ADC_CDRSTATUS4_RX_PWRDN 
 *     RXTESTSEL_0_RX_POLARITY 
 *     ADC_CDRSTATUS1_RESERVED0 
 *     SYNC_STATUS_MUX_COMADJ_SYNC_STATUS 
 *     ADC_CDRSTATUS10_RESERVED0 
 *     SCALE_STATUS_INTEG_SCALE 
 *     SYNC_STATUS_RXSEQSTART 
 *     SIGDET_STATUS_RX_PWRDN 
 *     RXTESTSEL_0_PCI_MODE_EN 
 *     ADC_CDRSTATUS4_RESERVED0 
 *     RXTESTSEL_0_INDCK_MODE_EN 
 *     SYNC_STATUS_RESERVED1 
 *     SIGDET_STATUS_RX_RESET 
 *     RXTESTSEL_0_RESERVED0 
 *     SYNC_STATUS_TEST_ACQ_EN 
 *     SIGDET_STATUS_CS4_SIGDET_LL 
 *     SYNC_STATUS_RESERVED0 
 *     SIGDET_STATUS_RX_SIGDET_LL 
 *     SIGDET_STATUS_RXSEQDONE 
 *     SCALE_STATUS_PROP_SCALE 
 *     SIGDET_STATUS_RESERVED0 
 *     PRBS_STATUS_PRBS_STKY 
 *     PRBS_STATUS_PRBS_LOCK 
 *     SIGDET_STATUS_CX4_SIGDET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr (0x0000b010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program ANARXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXSTATUSr_s {
	uint32_t v[1];
	uint32_t anarxstatus[1];
	uint32_t _anarxstatus;
} BCMI_HYPERLITE_XGXS_ANARXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_CLR(r) (r).anarxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SET(r,d) (r).anarxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_GET(r) (r).anarxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET(r) ((((r).anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET(r) ((((r).anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 13) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET(r) ((((r).anarxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET(r) ((((r).anarxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET(r) ((((r).anarxstatus[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET(r) ((((r).anarxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET(r) ((((r).anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET(r) ((((r).anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET(r) ((((r).anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET(r) ((((r).anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET(r) ((((r).anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET(r) ((((r).anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET(r) ((((r).anarxstatus[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET(r) ((((r).anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET(r) ((((r).anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET(r) ((((r).anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET(r) ((((r).anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET(r) ((((r).anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET(r) (((r).anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET(r) ((((r).anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET(r) ((((r).anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET(r) (((r).anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET(r) ((((r).anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET(r) (((r).anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET(r) (((r).anarxstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET(r) (((r).anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET(r) (((r).anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET(r) (((r).anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET(r) (((r).anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET(r) (((r).anarxstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET(r) (((r).anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET(r) (((r).anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET(r) (((r).anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET(r) (((r).anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET(r) (((r).anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET(r) (((r).anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET(r) ((((r).anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET(r,f) (r).anarxstatus[0]=(((r).anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access ANARXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXSTATUSr,(_r._anarxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXSTATUSr,(_r._anarxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXSTATUSr BCMI_HYPERLITE_XGXS_ANARXSTATUSr
#define ANARXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXSTATUSr_t ANARXSTATUSr_t;
#define ANARXSTATUSr_CLR BCMI_HYPERLITE_XGXS_ANARXSTATUSr_CLR
#define ANARXSTATUSr_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SET
#define ANARXSTATUSr_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET
#define ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET
#define ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET
#define ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET
#define ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET
#define ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET
#define ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET
#define ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET
#define ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET
#define ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET
#define ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET
#define ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET
#define ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET
#define ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET
#define ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET
#define ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET
#define ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET
#define ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET
#define ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET
#define ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET
#define ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET
#define ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET
#define ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET
#define ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET
#define ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET
#define ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET
#define ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET
#define ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET
#define ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET
#define ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET
#define ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET
#define ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET
#define ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET
#define ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET
#define ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET
#define ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET
#define ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET
#define ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET
#define ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET
#define ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET
#define ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET
#define ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET
#define ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET
#define ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET
#define ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET
#define ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET
#define ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET
#define ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET
#define ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET
#define ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET
#define ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET
#define ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET
#define ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET
#define ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET
#define ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET
#define ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET
#define ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET
#define ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET
#define ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET
#define ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET
#define ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET
#define ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET
#define ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET
#define ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET
#define ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET
#define ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET
#define ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET
#define ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET
#define ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET
#define ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET
#define ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET
#define ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET
#define ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET
#define ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET BCMI_HYPERLITE_XGXS_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET
#define READ_ANARXSTATUSr BCMI_HYPERLITE_XGXS_READ_ANARXSTATUSr
#define WRITE_ANARXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_ANARXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXCONTROL
 * BLOCKS:   RX0
 * REGADDR:  0x80b1
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     RESERVED1        
 *     OVERRIDE_SIGDET_VAL 
 *     OVERRIDE_SIGDET_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr (0x0000b011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program ANARXCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXCONTROLr_s {
	uint32_t v[1];
	uint32_t anarxcontrol[1];
	uint32_t _anarxcontrol;
} BCMI_HYPERLITE_XGXS_ANARXCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_CLR(r) (r).anarxcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_SET(r,d) (r).anarxcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_GET(r) (r).anarxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED0f_GET(r) ((((r).anarxcontrol[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED0f_SET(r,f) (r).anarxcontrol[0]=(((r).anarxcontrol[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET(r) ((((r).anarxcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET(r,f) (r).anarxcontrol[0]=(((r).anarxcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET(r) ((((r).anarxcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET(r,f) (r).anarxcontrol[0]=(((r).anarxcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED1f_GET(r) ((((r).anarxcontrol[0]) >> 3) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED1f_SET(r,f) (r).anarxcontrol[0]=(((r).anarxcontrol[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_STATUS_SELf_GET(r) (((r).anarxcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLr_STATUS_SELf_SET(r,f) (r).anarxcontrol[0]=(((r).anarxcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access ANARXCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROLr,(_r._anarxcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROLr,(_r._anarxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXCONTROLr BCMI_HYPERLITE_XGXS_ANARXCONTROLr
#define ANARXCONTROLr_SIZE BCMI_HYPERLITE_XGXS_ANARXCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXCONTROLr_t ANARXCONTROLr_t;
#define ANARXCONTROLr_CLR BCMI_HYPERLITE_XGXS_ANARXCONTROLr_CLR
#define ANARXCONTROLr_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_SET
#define ANARXCONTROLr_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_GET
#define ANARXCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED0f_GET
#define ANARXCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED0f_SET
#define ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET
#define ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET
#define ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET
#define ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET
#define ANARXCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED1f_GET
#define ANARXCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_RESERVED1f_SET
#define ANARXCONTROLr_STATUS_SELf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_STATUS_SELf_GET
#define ANARXCONTROLr_STATUS_SELf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLr_STATUS_SELf_SET
#define READ_ANARXCONTROLr BCMI_HYPERLITE_XGXS_READ_ANARXCONTROLr
#define WRITE_ANARXCONTROLr BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXTEST
 * BLOCKS:   RX0
 * REGADDR:  0x80b8
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     TESTMUXSELECT_SM 
 *     TPCTRL_SM        
 *     RESERVED0        
 *     SIGDET_MUX_SM    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXTESTr (0x0000b018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXTESTr_SIZE 4

/*
 * This structure should be used to declare and program ANARXTEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXTESTr_s {
	uint32_t v[1];
	uint32_t anarxtest[1];
	uint32_t _anarxtest;
} BCMI_HYPERLITE_XGXS_ANARXTESTr_t;

#define BCMI_HYPERLITE_XGXS_ANARXTESTr_CLR(r) (r).anarxtest[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_SET(r,d) (r).anarxtest[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_GET(r) (r).anarxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_SIGDET_MUX_SMf_GET(r) ((((r).anarxtest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_SIGDET_MUX_SMf_SET(r,f) (r).anarxtest[0]=(((r).anarxtest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_RESERVED0f_GET(r) ((((r).anarxtest[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_RESERVED0f_SET(r,f) (r).anarxtest[0]=(((r).anarxtest[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_TPCTRL_SMf_GET(r) ((((r).anarxtest[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_TPCTRL_SMf_SET(r,f) (r).anarxtest[0]=(((r).anarxtest[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_TESTMUXSELECT_SMf_GET(r) (((r).anarxtest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_ANARXTESTr_TESTMUXSELECT_SMf_SET(r,f) (r).anarxtest[0]=(((r).anarxtest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access ANARXTEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXTESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXTESTr,(_r._anarxtest))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXTESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXTESTr,(_r._anarxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXTESTr BCMI_HYPERLITE_XGXS_ANARXTESTr
#define ANARXTESTr_SIZE BCMI_HYPERLITE_XGXS_ANARXTESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXTESTr_t ANARXTESTr_t;
#define ANARXTESTr_CLR BCMI_HYPERLITE_XGXS_ANARXTESTr_CLR
#define ANARXTESTr_SET BCMI_HYPERLITE_XGXS_ANARXTESTr_SET
#define ANARXTESTr_GET BCMI_HYPERLITE_XGXS_ANARXTESTr_GET
#define ANARXTESTr_SIGDET_MUX_SMf_GET BCMI_HYPERLITE_XGXS_ANARXTESTr_SIGDET_MUX_SMf_GET
#define ANARXTESTr_SIGDET_MUX_SMf_SET BCMI_HYPERLITE_XGXS_ANARXTESTr_SIGDET_MUX_SMf_SET
#define ANARXTESTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXTESTr_RESERVED0f_GET
#define ANARXTESTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXTESTr_RESERVED0f_SET
#define ANARXTESTr_TPCTRL_SMf_GET BCMI_HYPERLITE_XGXS_ANARXTESTr_TPCTRL_SMf_GET
#define ANARXTESTr_TPCTRL_SMf_SET BCMI_HYPERLITE_XGXS_ANARXTESTr_TPCTRL_SMf_SET
#define ANARXTESTr_TESTMUXSELECT_SMf_GET BCMI_HYPERLITE_XGXS_ANARXTESTr_TESTMUXSELECT_SMf_GET
#define ANARXTESTr_TESTMUXSELECT_SMf_SET BCMI_HYPERLITE_XGXS_ANARXTESTr_TESTMUXSELECT_SMf_SET
#define READ_ANARXTESTr BCMI_HYPERLITE_XGXS_READ_ANARXTESTr
#define WRITE_ANARXTESTr BCMI_HYPERLITE_XGXS_WRITE_ANARXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXCONTROL1G
 * BLOCKS:   RX0
 * REGADDR:  0x80b9
 * DESC:     Rx 1G Control register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     RESERVED0        
 *     COMMA_BYTE_ADJ_EN_SM 
 *     COMMA_LOW_BYTE_SM 
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr (0x0000b019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_SIZE 4

/*
 * This structure should be used to declare and program ANARXCONTROL1G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_s {
	uint32_t v[1];
	uint32_t anarxcontrol1g[1];
	uint32_t _anarxcontrol1g;
} BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_t;

#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CLR(r) (r).anarxcontrol1g[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_SET(r,d) (r).anarxcontrol1g[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_GET(r) (r).anarxcontrol1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FPAT_MDf_GET(r) ((((r).anarxcontrol1g[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FPAT_MDf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET(r) ((((r).anarxcontrol1g[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_STAMUXREGDISf_GET(r) ((((r).anarxcontrol1g[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_STAMUXREGDISf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET(r) ((((r).anarxcontrol1g[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RXD_DEC_SELf_GET(r) ((((r).anarxcontrol1g[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RXD_DEC_SELf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_TSTf_GET(r) ((((r).anarxcontrol1g[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_TSTf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_EMON_ENf_GET(r) ((((r).anarxcontrol1g[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_EMON_ENf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_ENf_GET(r) ((((r).anarxcontrol1g[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_ENf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_ENf_GET(r) ((((r).anarxcontrol1g[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_ENf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CSTRETCHf_GET(r) ((((r).anarxcontrol1g[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CSTRETCHf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET(r) ((((r).anarxcontrol1g[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET(r) ((((r).anarxcontrol1g[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RESERVED0f_GET(r) ((((r).anarxcontrol1g[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RESERVED0f_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).anarxcontrol1g[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SELf_GET(r) (((r).anarxcontrol1g[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SELf_SET(r,f) (r).anarxcontrol1g[0]=(((r).anarxcontrol1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXCONTROL1G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr,(_r._anarxcontrol1g))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr,(_r._anarxcontrol1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr
#define ANARXCONTROL1Gr_SIZE BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_t ANARXCONTROL1Gr_t;
#define ANARXCONTROL1Gr_CLR BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CLR
#define ANARXCONTROL1Gr_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_SET
#define ANARXCONTROL1Gr_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_GET
#define ANARXCONTROL1Gr_FPAT_MDf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FPAT_MDf_GET
#define ANARXCONTROL1Gr_FPAT_MDf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FPAT_MDf_SET
#define ANARXCONTROL1Gr_PKT_COUNT_ENf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET
#define ANARXCONTROL1Gr_PKT_COUNT_ENf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET
#define ANARXCONTROL1Gr_STAMUXREGDISf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_STAMUXREGDISf_GET
#define ANARXCONTROL1Gr_STAMUXREGDISf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_STAMUXREGDISf_SET
#define ANARXCONTROL1Gr_PRBS_CLR_DISf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET
#define ANARXCONTROL1Gr_PRBS_CLR_DISf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET
#define ANARXCONTROL1Gr_RXD_DEC_SELf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RXD_DEC_SELf_GET
#define ANARXCONTROL1Gr_RXD_DEC_SELf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RXD_DEC_SELf_SET
#define ANARXCONTROL1Gr_CGBAD_TSTf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_TSTf_GET
#define ANARXCONTROL1Gr_CGBAD_TSTf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_TSTf_SET
#define ANARXCONTROL1Gr_EMON_ENf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_EMON_ENf_GET
#define ANARXCONTROL1Gr_EMON_ENf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_EMON_ENf_SET
#define ANARXCONTROL1Gr_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_ENf_GET
#define ANARXCONTROL1Gr_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_PRBS_ENf_SET
#define ANARXCONTROL1Gr_CGBAD_ENf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_ENf_GET
#define ANARXCONTROL1Gr_CGBAD_ENf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CGBAD_ENf_SET
#define ANARXCONTROL1Gr_CSTRETCHf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CSTRETCHf_GET
#define ANARXCONTROL1Gr_CSTRETCHf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_CSTRETCHf_SET
#define ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET
#define ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET
#define ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET
#define ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET
#define ANARXCONTROL1Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RESERVED0f_GET
#define ANARXCONTROL1Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_RESERVED0f_SET
#define ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET
#define ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET
#define ANARXCONTROL1Gr_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SELf_GET
#define ANARXCONTROL1Gr_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr_FREQ_SELf_SET
#define READ_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_READ_ANARXCONTROL1Gr
#define WRITE_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROL1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXCONTROL1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXCONTROLPCI
 * BLOCKS:   RX0
 * REGADDR:  0x80ba
 * DESC:     Rx PCI Control register
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE_SM    
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_SM 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_SM 
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R_SM 
 *     COMMA_ADJ_EN_FORCE_SYNC_SM 
 *     COMMA_ADJ_EN_FORCE_EXT_SM 
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_R_SM 
 *     SYNC_STATUS_FORCE_SYNC_SM 
 *     COMMA_MASK_R     
 *     COMMA_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr (0x0000b01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SIZE 4

/*
 * This structure should be used to declare and program ANARXCONTROLPCI.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_s {
	uint32_t v[1];
	uint32_t anarxcontrolpci[1];
	uint32_t _anarxcontrolpci;
} BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_t;

#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_CLR(r) (r).anarxcontrolpci[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SET(r,d) (r).anarxcontrolpci[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_GET(r) (r).anarxcontrolpci[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).anarxcontrolpci[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET(r) ((((r).anarxcontrolpci[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET(r) ((((r).anarxcontrolpci[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET(r) (((r).anarxcontrolpci[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET(r,f) (r).anarxcontrolpci[0]=(((r).anarxcontrolpci[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access ANARXCONTROLPCI.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr,(_r._anarxcontrolpci))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr,(_r._anarxcontrolpci))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr
#define ANARXCONTROLPCIr_SIZE BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_t ANARXCONTROLPCIr_t;
#define ANARXCONTROLPCIr_CLR BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_CLR
#define ANARXCONTROLPCIr_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SET
#define ANARXCONTROLPCIr_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET
#define ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET
#define ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET
#define ANARXCONTROLPCIr_COMMA_MASK_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET
#define ANARXCONTROLPCIr_COMMA_MASK_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET
#define ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET
#define ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET
#define ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET
#define ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET
#define ANARXCONTROLPCIr_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_Rf_GET
#define ANARXCONTROLPCIr_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_LINK_EN_Rf_SET
#define ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET
#define ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET
#define ANARXCONTROLPCIr_RX_POLARITY_Rf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET
#define ANARXCONTROLPCIr_RX_POLARITY_Rf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET
#define ANARXCONTROLPCIr_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET
#define ANARXCONTROLPCIr_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET
#define READ_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_READ_ANARXCONTROLPCIr
#define WRITE_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_WRITE_ANARXCONTROLPCIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXCONTROLPCIr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXASTATUS
 * BLOCKS:   RX0
 * REGADDR:  0x80bb
 * DESC:     Rx analog status register
 * SIZE:     32
 * FIELDS:
 *     VGA              
 *     RESERVED0        
 *     DFE              
 *     RX_PF            
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr (0x0000b01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program ANARXASTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXASTATUSr_s {
	uint32_t v[1];
	uint32_t anarxastatus[1];
	uint32_t _anarxastatus;
} BCMI_HYPERLITE_XGXS_ANARXASTATUSr_t;

#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_CLR(r) (r).anarxastatus[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SET(r,d) (r).anarxastatus[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_GET(r) (r).anarxastatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIGDETf_GET(r) ((((r).anarxastatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIGDETf_SET(r,f) (r).anarxastatus[0]=(((r).anarxastatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RX_PFf_GET(r) ((((r).anarxastatus[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RX_PFf_SET(r,f) (r).anarxastatus[0]=(((r).anarxastatus[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_DFEf_GET(r) ((((r).anarxastatus[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_DFEf_SET(r,f) (r).anarxastatus[0]=(((r).anarxastatus[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RESERVED0f_GET(r) ((((r).anarxastatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RESERVED0f_SET(r,f) (r).anarxastatus[0]=(((r).anarxastatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_VGAf_GET(r) (((r).anarxastatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_ANARXASTATUSr_VGAf_SET(r,f) (r).anarxastatus[0]=(((r).anarxastatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access ANARXASTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXASTATUSr,(_r._anarxastatus))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXASTATUSr,(_r._anarxastatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXASTATUSr BCMI_HYPERLITE_XGXS_ANARXASTATUSr
#define ANARXASTATUSr_SIZE BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXASTATUSr_t ANARXASTATUSr_t;
#define ANARXASTATUSr_CLR BCMI_HYPERLITE_XGXS_ANARXASTATUSr_CLR
#define ANARXASTATUSr_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SET
#define ANARXASTATUSr_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_GET
#define ANARXASTATUSr_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIGDETf_GET
#define ANARXASTATUSr_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_SIGDETf_SET
#define ANARXASTATUSr_RX_PFf_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RX_PFf_GET
#define ANARXASTATUSr_RX_PFf_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RX_PFf_SET
#define ANARXASTATUSr_DFEf_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_DFEf_GET
#define ANARXASTATUSr_DFEf_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_DFEf_SET
#define ANARXASTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RESERVED0f_GET
#define ANARXASTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_RESERVED0f_SET
#define ANARXASTATUSr_VGAf_GET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_VGAf_GET
#define ANARXASTATUSr_VGAf_SET BCMI_HYPERLITE_XGXS_ANARXASTATUSr_VGAf_SET
#define READ_ANARXASTATUSr BCMI_HYPERLITE_XGXS_READ_ANARXASTATUSr
#define WRITE_ANARXASTATUSr BCMI_HYPERLITE_XGXS_WRITE_ANARXASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXACONTROL1
 * BLOCKS:   RX0
 * REGADDR:  0x80bc
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     OFFSET_SEL       
 *     OFFSET_CTRL      
 *     SIG_PWRDN        
 *     VDDRB_BG         
 *     TPORT_EN         
 *     REFL_RX          
 *     REFH_RX          
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_VCM         
 *     IMODE_VCM        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r (0x0000b01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program ANARXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_s {
	uint32_t v[1];
	uint32_t anarxacontrol1[1];
	uint32_t _anarxacontrol1;
} BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_CLR(r) (r).anarxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SET(r,d) (r).anarxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_GET(r) (r).anarxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_VCMf_GET(r) ((((r).anarxacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_VCMf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_VCMf_GET(r) ((((r).anarxacontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_VCMf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMAX_SIGDETf_GET(r) ((((r).anarxacontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMAX_SIGDETf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_SIGDETf_GET(r) ((((r).anarxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_SIGDETf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_SIGDETf_GET(r) ((((r).anarxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_SIGDETf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFH_RXf_GET(r) ((((r).anarxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFH_RXf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFL_RXf_GET(r) ((((r).anarxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFL_RXf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_TPORT_ENf_GET(r) ((((r).anarxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_TPORT_ENf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_VDDRB_BGf_GET(r) ((((r).anarxacontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_VDDRB_BGf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIG_PWRDNf_GET(r) ((((r).anarxacontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIG_PWRDNf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_CTRLf_GET(r) ((((r).anarxacontrol1[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_CTRLf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_SELf_GET(r) ((((r).anarxacontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_SELf_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_RESERVED0f_GET(r) (((r).anarxacontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_RESERVED0f_SET(r,f) (r).anarxacontrol1[0]=(((r).anarxacontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access ANARXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL1r,(_r._anarxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL1r,(_r._anarxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXACONTROL1r BCMI_HYPERLITE_XGXS_ANARXACONTROL1r
#define ANARXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_t ANARXACONTROL1r_t;
#define ANARXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_CLR
#define ANARXACONTROL1r_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SET
#define ANARXACONTROL1r_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_GET
#define ANARXACONTROL1r_IMODE_VCMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_VCMf_GET
#define ANARXACONTROL1r_IMODE_VCMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_VCMf_SET
#define ANARXACONTROL1r_IMIN_VCMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_VCMf_GET
#define ANARXACONTROL1r_IMIN_VCMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_VCMf_SET
#define ANARXACONTROL1r_IMAX_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMAX_SIGDETf_GET
#define ANARXACONTROL1r_IMAX_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMAX_SIGDETf_SET
#define ANARXACONTROL1r_IMODE_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_SIGDETf_GET
#define ANARXACONTROL1r_IMODE_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMODE_SIGDETf_SET
#define ANARXACONTROL1r_IMIN_SIGDETf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_SIGDETf_GET
#define ANARXACONTROL1r_IMIN_SIGDETf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_IMIN_SIGDETf_SET
#define ANARXACONTROL1r_REFH_RXf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFH_RXf_GET
#define ANARXACONTROL1r_REFH_RXf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFH_RXf_SET
#define ANARXACONTROL1r_REFL_RXf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFL_RXf_GET
#define ANARXACONTROL1r_REFL_RXf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_REFL_RXf_SET
#define ANARXACONTROL1r_TPORT_ENf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_TPORT_ENf_GET
#define ANARXACONTROL1r_TPORT_ENf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_TPORT_ENf_SET
#define ANARXACONTROL1r_VDDRB_BGf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_VDDRB_BGf_GET
#define ANARXACONTROL1r_VDDRB_BGf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_VDDRB_BGf_SET
#define ANARXACONTROL1r_SIG_PWRDNf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIG_PWRDNf_GET
#define ANARXACONTROL1r_SIG_PWRDNf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_SIG_PWRDNf_SET
#define ANARXACONTROL1r_OFFSET_CTRLf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_CTRLf_GET
#define ANARXACONTROL1r_OFFSET_CTRLf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_CTRLf_SET
#define ANARXACONTROL1r_OFFSET_SELf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_SELf_GET
#define ANARXACONTROL1r_OFFSET_SELf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_OFFSET_SELf_SET
#define ANARXACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_RESERVED0f_GET
#define ANARXACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL1r_RESERVED0f_SET
#define READ_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL1r
#define WRITE_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXACONTROL2
 * BLOCKS:   RX0
 * REGADDR:  0x80bd
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMAX_VCM         
 *     IMIN_INTERP      
 *     IMODE_INTERP     
 *     IMAX_INTERP      
 *     IMIN_VGA         
 *     IMODE_VGA        
 *     IMAX_VGA         
 *     IMIN_DFESUM      
 *     IMODE_DFESUM     
 *     IMAX_DFESUM      
 *     IMIN_EQFL        
 *     IMODE_EQFL       
 *     IMAX_EQFL        
 *     IMIN_CLKBUF      
 *     IMODE_CLKBUF     
 *     IMAX_CLKBUF      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r (0x0000b01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program ANARXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_s {
	uint32_t v[1];
	uint32_t anarxacontrol2[1];
	uint32_t _anarxacontrol2;
} BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_CLR(r) (r).anarxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_SET(r,d) (r).anarxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_GET(r) (r).anarxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_CLKBUFf_GET(r) ((((r).anarxacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_CLKBUFf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_CLKBUFf_GET(r) ((((r).anarxacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_CLKBUFf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_CLKBUFf_GET(r) ((((r).anarxacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_CLKBUFf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_EQFLf_GET(r) ((((r).anarxacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_EQFLf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_EQFLf_GET(r) ((((r).anarxacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_EQFLf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_EQFLf_GET(r) ((((r).anarxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_EQFLf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_DFESUMf_GET(r) ((((r).anarxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_DFESUMf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_DFESUMf_GET(r) ((((r).anarxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_DFESUMf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_DFESUMf_GET(r) ((((r).anarxacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_DFESUMf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VGAf_GET(r) ((((r).anarxacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VGAf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_VGAf_GET(r) ((((r).anarxacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_VGAf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_VGAf_GET(r) ((((r).anarxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_VGAf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_INTERPf_GET(r) ((((r).anarxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_INTERPf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_INTERPf_GET(r) ((((r).anarxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_INTERPf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_INTERPf_GET(r) ((((r).anarxacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_INTERPf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VCMf_GET(r) (((r).anarxacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VCMf_SET(r,f) (r).anarxacontrol2[0]=(((r).anarxacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL2r,(_r._anarxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL2r,(_r._anarxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXACONTROL2r BCMI_HYPERLITE_XGXS_ANARXACONTROL2r
#define ANARXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_t ANARXACONTROL2r_t;
#define ANARXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_CLR
#define ANARXACONTROL2r_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_SET
#define ANARXACONTROL2r_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_GET
#define ANARXACONTROL2r_IMAX_CLKBUFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_CLKBUFf_GET
#define ANARXACONTROL2r_IMAX_CLKBUFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_CLKBUFf_SET
#define ANARXACONTROL2r_IMODE_CLKBUFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_CLKBUFf_GET
#define ANARXACONTROL2r_IMODE_CLKBUFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_CLKBUFf_SET
#define ANARXACONTROL2r_IMIN_CLKBUFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_CLKBUFf_GET
#define ANARXACONTROL2r_IMIN_CLKBUFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_CLKBUFf_SET
#define ANARXACONTROL2r_IMAX_EQFLf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_EQFLf_GET
#define ANARXACONTROL2r_IMAX_EQFLf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_EQFLf_SET
#define ANARXACONTROL2r_IMODE_EQFLf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_EQFLf_GET
#define ANARXACONTROL2r_IMODE_EQFLf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_EQFLf_SET
#define ANARXACONTROL2r_IMIN_EQFLf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_EQFLf_GET
#define ANARXACONTROL2r_IMIN_EQFLf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_EQFLf_SET
#define ANARXACONTROL2r_IMAX_DFESUMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_DFESUMf_GET
#define ANARXACONTROL2r_IMAX_DFESUMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_DFESUMf_SET
#define ANARXACONTROL2r_IMODE_DFESUMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_DFESUMf_GET
#define ANARXACONTROL2r_IMODE_DFESUMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_DFESUMf_SET
#define ANARXACONTROL2r_IMIN_DFESUMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_DFESUMf_GET
#define ANARXACONTROL2r_IMIN_DFESUMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_DFESUMf_SET
#define ANARXACONTROL2r_IMAX_VGAf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VGAf_GET
#define ANARXACONTROL2r_IMAX_VGAf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VGAf_SET
#define ANARXACONTROL2r_IMODE_VGAf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_VGAf_GET
#define ANARXACONTROL2r_IMODE_VGAf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_VGAf_SET
#define ANARXACONTROL2r_IMIN_VGAf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_VGAf_GET
#define ANARXACONTROL2r_IMIN_VGAf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_VGAf_SET
#define ANARXACONTROL2r_IMAX_INTERPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_INTERPf_GET
#define ANARXACONTROL2r_IMAX_INTERPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_INTERPf_SET
#define ANARXACONTROL2r_IMODE_INTERPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_INTERPf_GET
#define ANARXACONTROL2r_IMODE_INTERPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMODE_INTERPf_SET
#define ANARXACONTROL2r_IMIN_INTERPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_INTERPf_GET
#define ANARXACONTROL2r_IMIN_INTERPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMIN_INTERPf_SET
#define ANARXACONTROL2r_IMAX_VCMf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VCMf_GET
#define ANARXACONTROL2r_IMAX_VCMf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL2r_IMAX_VCMf_SET
#define READ_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL2r
#define WRITE_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANARXACONTROL3
 * BLOCKS:   RX0
 * REGADDR:  0x80be
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMIN_DFEVREF     
 *     IMODE_DFEVREF    
 *     IMAX_DFEVREF     
 *     IMIN_SLCD2C      
 *     IMODE_SLCD2C     
 *     IMAX_SLCD2C      
 *     IMIN_DFETAP      
 *     IMODE_DFETAP     
 *     IMAX_DFETAP      
 *     OFFSET_PD        
 *     EN_DFECKPWR      
 *     EN_HGAIN         
 *     EN_DFECLK        
 *     EN_VCCTRL        
 *     PD_CH_P1         
 *     EN_CLK16         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r (0x0000b01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program ANARXACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_s {
	uint32_t v[1];
	uint32_t anarxacontrol3[1];
	uint32_t _anarxacontrol3;
} BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_CLR(r) (r).anarxacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_SET(r,d) (r).anarxacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_GET(r) (r).anarxacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_CLK16f_GET(r) ((((r).anarxacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_CLK16f_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_PD_CH_P1f_GET(r) ((((r).anarxacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_PD_CH_P1f_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_VCCTRLf_GET(r) ((((r).anarxacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_VCCTRLf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECLKf_GET(r) ((((r).anarxacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECLKf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_HGAINf_GET(r) ((((r).anarxacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_HGAINf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECKPWRf_GET(r) ((((r).anarxacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECKPWRf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_OFFSET_PDf_GET(r) ((((r).anarxacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_OFFSET_PDf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFETAPf_GET(r) ((((r).anarxacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFETAPf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFETAPf_GET(r) ((((r).anarxacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFETAPf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFETAPf_GET(r) ((((r).anarxacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFETAPf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_SLCD2Cf_GET(r) ((((r).anarxacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_SLCD2Cf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_SLCD2Cf_GET(r) ((((r).anarxacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_SLCD2Cf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_SLCD2Cf_GET(r) ((((r).anarxacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_SLCD2Cf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFEVREFf_GET(r) ((((r).anarxacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFEVREFf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFEVREFf_GET(r) ((((r).anarxacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFEVREFf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFEVREFf_GET(r) (((r).anarxacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFEVREFf_SET(r,f) (r).anarxacontrol3[0]=(((r).anarxacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL3r,(_r._anarxacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANARXACONTROL3r,(_r._anarxacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXACONTROL3r BCMI_HYPERLITE_XGXS_ANARXACONTROL3r
#define ANARXACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_t ANARXACONTROL3r_t;
#define ANARXACONTROL3r_CLR BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_CLR
#define ANARXACONTROL3r_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_SET
#define ANARXACONTROL3r_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_GET
#define ANARXACONTROL3r_EN_CLK16f_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_CLK16f_GET
#define ANARXACONTROL3r_EN_CLK16f_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_CLK16f_SET
#define ANARXACONTROL3r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_PD_CH_P1f_GET
#define ANARXACONTROL3r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_PD_CH_P1f_SET
#define ANARXACONTROL3r_EN_VCCTRLf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_VCCTRLf_GET
#define ANARXACONTROL3r_EN_VCCTRLf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_VCCTRLf_SET
#define ANARXACONTROL3r_EN_DFECLKf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECLKf_GET
#define ANARXACONTROL3r_EN_DFECLKf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECLKf_SET
#define ANARXACONTROL3r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_HGAINf_GET
#define ANARXACONTROL3r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_HGAINf_SET
#define ANARXACONTROL3r_EN_DFECKPWRf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECKPWRf_GET
#define ANARXACONTROL3r_EN_DFECKPWRf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_EN_DFECKPWRf_SET
#define ANARXACONTROL3r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_OFFSET_PDf_GET
#define ANARXACONTROL3r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_OFFSET_PDf_SET
#define ANARXACONTROL3r_IMAX_DFETAPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFETAPf_GET
#define ANARXACONTROL3r_IMAX_DFETAPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFETAPf_SET
#define ANARXACONTROL3r_IMODE_DFETAPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFETAPf_GET
#define ANARXACONTROL3r_IMODE_DFETAPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFETAPf_SET
#define ANARXACONTROL3r_IMIN_DFETAPf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFETAPf_GET
#define ANARXACONTROL3r_IMIN_DFETAPf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFETAPf_SET
#define ANARXACONTROL3r_IMAX_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_SLCD2Cf_GET
#define ANARXACONTROL3r_IMAX_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_SLCD2Cf_SET
#define ANARXACONTROL3r_IMODE_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_SLCD2Cf_GET
#define ANARXACONTROL3r_IMODE_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_SLCD2Cf_SET
#define ANARXACONTROL3r_IMIN_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_SLCD2Cf_GET
#define ANARXACONTROL3r_IMIN_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_SLCD2Cf_SET
#define ANARXACONTROL3r_IMAX_DFEVREFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFEVREFf_GET
#define ANARXACONTROL3r_IMAX_DFEVREFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMAX_DFEVREFf_SET
#define ANARXACONTROL3r_IMODE_DFEVREFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFEVREFf_GET
#define ANARXACONTROL3r_IMODE_DFEVREFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMODE_DFEVREFf_SET
#define ANARXACONTROL3r_IMIN_DFEVREFf_GET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFEVREFf_GET
#define ANARXACONTROL3r_IMIN_DFEVREFf_SET BCMI_HYPERLITE_XGXS_ANARXACONTROL3r_IMIN_DFEVREFf_SET
#define READ_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_READ_ANARXACONTROL3r
#define WRITE_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_ANARXACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANARXACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXSTATUS
 * BLOCKS:   RX1
 * REGADDR:  0x80c0
 * DESC:     Rx lane status register
 * SIZE:     32
 * FIELDS:
 *     ADC_CDRSTATUS12_2_WADR_TEST 
 *     INTEG_STATUS_INTEG_STATUS 
 *     ADC_CDRSTATUS8_SIGDET 
 *     ADC_CDRSTATUS12_3_PRSTB_I66_MUX 
 *     ADC_CDRSTATUS6_PWRDN_PLL 
 *     ADC_CDRSTATUS5_RESERVED0 
 *     ADC_CDRSTATUS1_PLL_BYPASS 
 *     ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODD 
 *     PRBS_STATUS_PTBS_ERRORS 
 *     ADC_CDRSTATUS12_4_RFIFO_OVFLOW 
 *     SYNC_STATUS_RXSEQDONE 
 *     ADC_CDRSTATUS10_PRBS_STATE 
 *     ADC_CDRSTATUS2_RXSEQDONE 
 *     ADC_CDRSTATUS9_RESERVED0 
 *     RXTESTSEL_1_INTEG_MODE_SM 
 *     VCO_STATUS_VCO_STATUS 
 *     SIGDET_STATUS_RESERVED1 
 *     ADC_CDRSTATUS11_RESERVED0 
 *     ADC_CDRSTATUS3_ALLOW_INCREMENT_PC 
 *     ADC_CDRSTATUS4_RESERVED1 
 *     ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVEN 
 *     SCALE_STATUS_INTEG_SCALE_ACQ 
 *     RXTESTSEL_0_RESERVED1 
 *     ADC_CDRSTATUS12_1_RADR_TEST 
 *     ADC_CDRSTATUS8_RESERVED0 
 *     ADC_CDRSTATUS1_REFCLK 
 *     ADC_CDRSTATUS12_3_RSTB_I66 
 *     ADC_CDRSTATUS7E_EN_CDET_EVEN 
 *     ADC_CDRSTATUS2_RESERVED1 
 *     ADC_CDRSTATUS3_RESERVED1 
 *     ADC_CDRSTATUS12_4_RFIFO_UNFLOW 
 *     SYNC_STATUS_CX4_SIGDET 
 *     ADC_CDRSTATUS6_PWRDN_RX 
 *     ADC_CDRSTATUS7O_EN_CDET_ODD 
 *     ADC_CDRSTATUS7O_COMDET_ODD 
 *     RXTESTSEL_0_COMMA_ADJ_EN_EXT 
 *     ADC_CDRSTATUS12_4_RFIFO_ERROR_R 
 *     SYNC_STATUS_SATURATE_STATUS 
 *     ADC_CDRSTATUS1_RXCK_I 
 *     RXTESTSEL_1_FREQ_SEL_SM 
 *     ADC_CDRSTATUS12_3_RXCK_I66_TMUX 
 *     ADC_CDRSTATUS6_RESET_ANLG 
 *     ADC_CDRSTATUS7E_COMDET_EVEN 
 *     ADC_CDRSTATUS7E_RXCK1_EVEN 
 *     ADC_CDRSTATUS1_RXCK_TST 
 *     ADC_CDRSTATUS12_3_PRSTB_66B_MUX 
 *     SYNC_STATUS_RESERVED2 
 *     RXTESTSEL_0_COMMA_ADJ_EN 
 *     ADC_CDRSTATUS6_RX_PWRDN 
 *     ADC_CDRSTATUS7O_RXCK1_ODD 
 *     RXTESTSEL_1_FREQ_SEL_PC 
 *     ADC_CDRSTATUS3_RXSEQSTART 
 *     ADC_CDRSTATUS7E_RXCK0_EVEN 
 *     ADC_CDRSTATUS10_RESERVED1 
 *     ADC_CDRSTATUS12_3_RSTB_66B 
 *     SCALE_STATUS_PROP_SCALE_ACQ 
 *     ADC_CDRSTATUS3_RESERVED0 
 *     ADC_CDRSTATUS7O_RXCK0_ODD 
 *     ADC_CDRSTATUS1_CLOCKSWITCHSEL 
 *     ADC_CDRSTATUS4_PWRDN 
 *     RXTESTSEL_0_LINK_EN_R 
 *     RXTESTSEL_1_CDRACQDONE_R2 
 *     ADC_CDRSTATUS2_RXSEQSTART 
 *     ADC_CDRSTATUS12_4_RESERVED0 
 *     ADC_CDRSTATUS6_RX_RESET 
 *     ADC_CDRSTATUS6_RESERVED0 
 *     RXTESTSEL_0_COMMA_MASK 
 *     SYNC_STATUS_RX_SIGDET 
 *     ADC_CDRSTATUS10_RSTB_TST 
 *     ADC_CDRSTATUS12_2_RESERVED0 
 *     ADC_CDRSTATUS7E_RESERVED0 
 *     ADC_CDRSTATUS2_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RXCK_66B_TMUX 
 *     ADC_CDRSTATUS4_PLL_LOCK_RSTB 
 *     ADC_CDRSTATUS1_GLPBK_COMBO 
 *     ADC_CDRSTATUS12_1_ENABLE4 
 *     ADC_CDRSTATUS7O_RESERVED0 
 *     RXTESTSEL_1_RESERVED0 
 *     ADC_CDRSTATUS1_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RESERVED0 
 *     ADC_CDRSTATUS4_FREQ_SEL 
 *     ADC_CDRSTATUS10_PRBS_EN 
 *     ADC_CDRSTATUS2_RESERVED0 
 *     RXTESTSEL_0_RXPOL_FLIP 
 *     SYNC_STATUS_SYNC_STATUS 
 *     ADC_CDRSTATUS12_1_RESERVED0 
 *     ADC_CDRSTATUS4_RX_PWRDN 
 *     RXTESTSEL_0_RX_POLARITY 
 *     ADC_CDRSTATUS1_RESERVED0 
 *     SYNC_STATUS_MUX_COMADJ_SYNC_STATUS 
 *     ADC_CDRSTATUS10_RESERVED0 
 *     SCALE_STATUS_INTEG_SCALE 
 *     SYNC_STATUS_RXSEQSTART 
 *     SIGDET_STATUS_RX_PWRDN 
 *     RXTESTSEL_0_PCI_MODE_EN 
 *     ADC_CDRSTATUS4_RESERVED0 
 *     RXTESTSEL_0_INDCK_MODE_EN 
 *     SYNC_STATUS_RESERVED1 
 *     SIGDET_STATUS_RX_RESET 
 *     RXTESTSEL_0_RESERVED0 
 *     SYNC_STATUS_TEST_ACQ_EN 
 *     SIGDET_STATUS_CS4_SIGDET_LL 
 *     SYNC_STATUS_RESERVED0 
 *     SIGDET_STATUS_RX_SIGDET_LL 
 *     SIGDET_STATUS_RXSEQDONE 
 *     SCALE_STATUS_PROP_SCALE 
 *     SIGDET_STATUS_RESERVED0 
 *     PRBS_STATUS_PRBS_STKY 
 *     PRBS_STATUS_PRBS_LOCK 
 *     SIGDET_STATUS_CX4_SIGDET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr (0x0000c010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_s {
	uint32_t v[1];
	uint32_t rx1_anarxstatus[1];
	uint32_t _rx1_anarxstatus;
} BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_CLR(r) (r).rx1_anarxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SET(r,d) (r).rx1_anarxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_GET(r) (r).rx1_anarxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET(r) ((((r).rx1_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET(r) ((((r).rx1_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 13) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET(r) ((((r).rx1_anarxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET(r) ((((r).rx1_anarxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET(r) ((((r).rx1_anarxstatus[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET(r) ((((r).rx1_anarxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET(r) ((((r).rx1_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET(r) ((((r).rx1_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET(r) ((((r).rx1_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET(r) ((((r).rx1_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET(r) ((((r).rx1_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET(r) ((((r).rx1_anarxstatus[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET(r) ((((r).rx1_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET(r) ((((r).rx1_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET(r) ((((r).rx1_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET(r) (((r).rx1_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET(r) ((((r).rx1_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET(r) (((r).rx1_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET(r) (((r).rx1_anarxstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET(r) (((r).rx1_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET(r) (((r).rx1_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET(r) (((r).rx1_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET(r) (((r).rx1_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET(r) (((r).rx1_anarxstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET(r) (((r).rx1_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET(r) (((r).rx1_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET(r) (((r).rx1_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET(r) (((r).rx1_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET(r) (((r).rx1_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET(r) ((((r).rx1_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET(r,f) (r).rx1_anarxstatus[0]=(((r).rx1_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access RX1_ANARXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr,(_r._rx1_anarxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr,(_r._rx1_anarxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXSTATUSr BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr
#define RX1_ANARXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_t RX1_ANARXSTATUSr_t;
#define RX1_ANARXSTATUSr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_CLR
#define RX1_ANARXSTATUSr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SET
#define RX1_ANARXSTATUSr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET
#define RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET
#define RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET
#define RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET
#define RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET
#define RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET
#define RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET
#define RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET
#define RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET
#define RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET
#define RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET
#define RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET
#define RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET
#define RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET
#define RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET
#define RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET
#define RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET
#define RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET
#define RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET
#define READ_RX1_ANARXSTATUSr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXSTATUSr
#define WRITE_RX1_ANARXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXCONTROL
 * BLOCKS:   RX1
 * REGADDR:  0x80c1
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     RESERVED1        
 *     OVERRIDE_SIGDET_VAL 
 *     OVERRIDE_SIGDET_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr (0x0000c011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_s {
	uint32_t v[1];
	uint32_t rx1_anarxcontrol[1];
	uint32_t _rx1_anarxcontrol;
} BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_CLR(r) (r).rx1_anarxcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_SET(r,d) (r).rx1_anarxcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_GET(r) (r).rx1_anarxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED0f_GET(r) ((((r).rx1_anarxcontrol[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED0f_SET(r,f) (r).rx1_anarxcontrol[0]=(((r).rx1_anarxcontrol[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET(r) ((((r).rx1_anarxcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET(r,f) (r).rx1_anarxcontrol[0]=(((r).rx1_anarxcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET(r) ((((r).rx1_anarxcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET(r,f) (r).rx1_anarxcontrol[0]=(((r).rx1_anarxcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED1f_GET(r) ((((r).rx1_anarxcontrol[0]) >> 3) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED1f_SET(r,f) (r).rx1_anarxcontrol[0]=(((r).rx1_anarxcontrol[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_STATUS_SELf_GET(r) (((r).rx1_anarxcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_STATUS_SELf_SET(r,f) (r).rx1_anarxcontrol[0]=(((r).rx1_anarxcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RX1_ANARXCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr,(_r._rx1_anarxcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr,(_r._rx1_anarxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXCONTROLr BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr
#define RX1_ANARXCONTROLr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_t RX1_ANARXCONTROLr_t;
#define RX1_ANARXCONTROLr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_CLR
#define RX1_ANARXCONTROLr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_SET
#define RX1_ANARXCONTROLr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_GET
#define RX1_ANARXCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED0f_GET
#define RX1_ANARXCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED0f_SET
#define RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET
#define RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET
#define RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET
#define RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET
#define RX1_ANARXCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED1f_GET
#define RX1_ANARXCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_RESERVED1f_SET
#define RX1_ANARXCONTROLr_STATUS_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_STATUS_SELf_GET
#define RX1_ANARXCONTROLr_STATUS_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr_STATUS_SELf_SET
#define READ_RX1_ANARXCONTROLr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROLr
#define WRITE_RX1_ANARXCONTROLr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXTEST
 * BLOCKS:   RX1
 * REGADDR:  0x80c8
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     TESTMUXSELECT_SM 
 *     TPCTRL_SM        
 *     RESERVED0        
 *     SIGDET_MUX_SM    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr (0x0000c018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXTEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_s {
	uint32_t v[1];
	uint32_t rx1_anarxtest[1];
	uint32_t _rx1_anarxtest;
} BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_CLR(r) (r).rx1_anarxtest[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SET(r,d) (r).rx1_anarxtest[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_GET(r) (r).rx1_anarxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIGDET_MUX_SMf_GET(r) ((((r).rx1_anarxtest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIGDET_MUX_SMf_SET(r,f) (r).rx1_anarxtest[0]=(((r).rx1_anarxtest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_RESERVED0f_GET(r) ((((r).rx1_anarxtest[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_RESERVED0f_SET(r,f) (r).rx1_anarxtest[0]=(((r).rx1_anarxtest[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TPCTRL_SMf_GET(r) ((((r).rx1_anarxtest[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TPCTRL_SMf_SET(r,f) (r).rx1_anarxtest[0]=(((r).rx1_anarxtest[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TESTMUXSELECT_SMf_GET(r) (((r).rx1_anarxtest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TESTMUXSELECT_SMf_SET(r,f) (r).rx1_anarxtest[0]=(((r).rx1_anarxtest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RX1_ANARXTEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXTESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr,(_r._rx1_anarxtest))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXTESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr,(_r._rx1_anarxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXTESTr BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr
#define RX1_ANARXTESTr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_t RX1_ANARXTESTr_t;
#define RX1_ANARXTESTr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_CLR
#define RX1_ANARXTESTr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SET
#define RX1_ANARXTESTr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_GET
#define RX1_ANARXTESTr_SIGDET_MUX_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIGDET_MUX_SMf_GET
#define RX1_ANARXTESTr_SIGDET_MUX_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_SIGDET_MUX_SMf_SET
#define RX1_ANARXTESTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_RESERVED0f_GET
#define RX1_ANARXTESTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_RESERVED0f_SET
#define RX1_ANARXTESTr_TPCTRL_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TPCTRL_SMf_GET
#define RX1_ANARXTESTr_TPCTRL_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TPCTRL_SMf_SET
#define RX1_ANARXTESTr_TESTMUXSELECT_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TESTMUXSELECT_SMf_GET
#define RX1_ANARXTESTr_TESTMUXSELECT_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr_TESTMUXSELECT_SMf_SET
#define READ_RX1_ANARXTESTr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXTESTr
#define WRITE_RX1_ANARXTESTr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXCONTROL1G
 * BLOCKS:   RX1
 * REGADDR:  0x80c9
 * DESC:     Rx 1G Control register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     RESERVED0        
 *     COMMA_BYTE_ADJ_EN_SM 
 *     COMMA_LOW_BYTE_SM 
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr (0x0000c019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXCONTROL1G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_s {
	uint32_t v[1];
	uint32_t rx1_anarxcontrol1g[1];
	uint32_t _rx1_anarxcontrol1g;
} BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CLR(r) (r).rx1_anarxcontrol1g[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_SET(r,d) (r).rx1_anarxcontrol1g[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_GET(r) (r).rx1_anarxcontrol1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FPAT_MDf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FPAT_MDf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_STAMUXREGDISf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_STAMUXREGDISf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_TSTf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_TSTf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_EMON_ENf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_EMON_ENf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_ENf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_ENf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_ENf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_ENf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CSTRETCHf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CSTRETCHf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RESERVED0f_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RESERVED0f_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).rx1_anarxcontrol1g[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SELf_GET(r) (((r).rx1_anarxcontrol1g[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SELf_SET(r,f) (r).rx1_anarxcontrol1g[0]=(((r).rx1_anarxcontrol1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX1_ANARXCONTROL1G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr,(_r._rx1_anarxcontrol1g))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr,(_r._rx1_anarxcontrol1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr
#define RX1_ANARXCONTROL1Gr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_t RX1_ANARXCONTROL1Gr_t;
#define RX1_ANARXCONTROL1Gr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CLR
#define RX1_ANARXCONTROL1Gr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_SET
#define RX1_ANARXCONTROL1Gr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_GET
#define RX1_ANARXCONTROL1Gr_FPAT_MDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FPAT_MDf_GET
#define RX1_ANARXCONTROL1Gr_FPAT_MDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FPAT_MDf_SET
#define RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET
#define RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET
#define RX1_ANARXCONTROL1Gr_STAMUXREGDISf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_STAMUXREGDISf_GET
#define RX1_ANARXCONTROL1Gr_STAMUXREGDISf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_STAMUXREGDISf_SET
#define RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET
#define RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET
#define RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_GET
#define RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RXD_DEC_SELf_SET
#define RX1_ANARXCONTROL1Gr_CGBAD_TSTf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_TSTf_GET
#define RX1_ANARXCONTROL1Gr_CGBAD_TSTf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_TSTf_SET
#define RX1_ANARXCONTROL1Gr_EMON_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_EMON_ENf_GET
#define RX1_ANARXCONTROL1Gr_EMON_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_EMON_ENf_SET
#define RX1_ANARXCONTROL1Gr_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_ENf_GET
#define RX1_ANARXCONTROL1Gr_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_PRBS_ENf_SET
#define RX1_ANARXCONTROL1Gr_CGBAD_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_ENf_GET
#define RX1_ANARXCONTROL1Gr_CGBAD_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CGBAD_ENf_SET
#define RX1_ANARXCONTROL1Gr_CSTRETCHf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CSTRETCHf_GET
#define RX1_ANARXCONTROL1Gr_CSTRETCHf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_CSTRETCHf_SET
#define RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET
#define RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET
#define RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET
#define RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET
#define RX1_ANARXCONTROL1Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RESERVED0f_GET
#define RX1_ANARXCONTROL1Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_RESERVED0f_SET
#define RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET
#define RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET
#define RX1_ANARXCONTROL1Gr_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SELf_GET
#define RX1_ANARXCONTROL1Gr_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr_FREQ_SELf_SET
#define READ_RX1_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROL1Gr
#define WRITE_RX1_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROL1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROL1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXCONTROLPCI
 * BLOCKS:   RX1
 * REGADDR:  0x80ca
 * DESC:     Rx PCI Control register
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE_SM    
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_SM 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_SM 
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R_SM 
 *     COMMA_ADJ_EN_FORCE_SYNC_SM 
 *     COMMA_ADJ_EN_FORCE_EXT_SM 
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_R_SM 
 *     SYNC_STATUS_FORCE_SYNC_SM 
 *     COMMA_MASK_R     
 *     COMMA_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr (0x0000c01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXCONTROLPCI.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_s {
	uint32_t v[1];
	uint32_t rx1_anarxcontrolpci[1];
	uint32_t _rx1_anarxcontrolpci;
} BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_CLR(r) (r).rx1_anarxcontrolpci[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SET(r,d) (r).rx1_anarxcontrolpci[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_GET(r) (r).rx1_anarxcontrolpci[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET(r) ((((r).rx1_anarxcontrolpci[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET(r) (((r).rx1_anarxcontrolpci[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET(r,f) (r).rx1_anarxcontrolpci[0]=(((r).rx1_anarxcontrolpci[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX1_ANARXCONTROLPCI.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr,(_r._rx1_anarxcontrolpci))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr,(_r._rx1_anarxcontrolpci))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr
#define RX1_ANARXCONTROLPCIr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_t RX1_ANARXCONTROLPCIr_t;
#define RX1_ANARXCONTROLPCIr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_CLR
#define RX1_ANARXCONTROLPCIr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SET
#define RX1_ANARXCONTROLPCIr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET
#define RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET
#define RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET
#define RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET
#define RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET
#define RX1_ANARXCONTROLPCIr_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_Rf_GET
#define RX1_ANARXCONTROLPCIr_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_LINK_EN_Rf_SET
#define RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET
#define RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET
#define RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET
#define RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET
#define RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET
#define RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET
#define READ_RX1_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXCONTROLPCIr
#define WRITE_RX1_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXCONTROLPCIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXCONTROLPCIr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXASTATUS
 * BLOCKS:   RX1
 * REGADDR:  0x80cb
 * DESC:     Rx analog status register
 * SIZE:     32
 * FIELDS:
 *     VGA              
 *     RESERVED0        
 *     DFE              
 *     RX_PF            
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr (0x0000c01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXASTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_s {
	uint32_t v[1];
	uint32_t rx1_anarxastatus[1];
	uint32_t _rx1_anarxastatus;
} BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_CLR(r) (r).rx1_anarxastatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SET(r,d) (r).rx1_anarxastatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_GET(r) (r).rx1_anarxastatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIGDETf_GET(r) ((((r).rx1_anarxastatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIGDETf_SET(r,f) (r).rx1_anarxastatus[0]=(((r).rx1_anarxastatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RX_PFf_GET(r) ((((r).rx1_anarxastatus[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RX_PFf_SET(r,f) (r).rx1_anarxastatus[0]=(((r).rx1_anarxastatus[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_DFEf_GET(r) ((((r).rx1_anarxastatus[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_DFEf_SET(r,f) (r).rx1_anarxastatus[0]=(((r).rx1_anarxastatus[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RESERVED0f_GET(r) ((((r).rx1_anarxastatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RESERVED0f_SET(r,f) (r).rx1_anarxastatus[0]=(((r).rx1_anarxastatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_VGAf_GET(r) (((r).rx1_anarxastatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_VGAf_SET(r,f) (r).rx1_anarxastatus[0]=(((r).rx1_anarxastatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RX1_ANARXASTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr,(_r._rx1_anarxastatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr,(_r._rx1_anarxastatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXASTATUSr BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr
#define RX1_ANARXASTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_t RX1_ANARXASTATUSr_t;
#define RX1_ANARXASTATUSr_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_CLR
#define RX1_ANARXASTATUSr_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SET
#define RX1_ANARXASTATUSr_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_GET
#define RX1_ANARXASTATUSr_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIGDETf_GET
#define RX1_ANARXASTATUSr_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_SIGDETf_SET
#define RX1_ANARXASTATUSr_RX_PFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RX_PFf_GET
#define RX1_ANARXASTATUSr_RX_PFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RX_PFf_SET
#define RX1_ANARXASTATUSr_DFEf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_DFEf_GET
#define RX1_ANARXASTATUSr_DFEf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_DFEf_SET
#define RX1_ANARXASTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RESERVED0f_GET
#define RX1_ANARXASTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_RESERVED0f_SET
#define RX1_ANARXASTATUSr_VGAf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_VGAf_GET
#define RX1_ANARXASTATUSr_VGAf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr_VGAf_SET
#define READ_RX1_ANARXASTATUSr BCMI_HYPERLITE_XGXS_READ_RX1_ANARXASTATUSr
#define WRITE_RX1_ANARXASTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXACONTROL1
 * BLOCKS:   RX1
 * REGADDR:  0x80cc
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     OFFSET_SEL       
 *     OFFSET_CTRL      
 *     SIG_PWRDN        
 *     VDDRB_BG         
 *     TPORT_EN         
 *     REFL_RX          
 *     REFH_RX          
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_VCM         
 *     IMODE_VCM        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r (0x0000c01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_s {
	uint32_t v[1];
	uint32_t rx1_anarxacontrol1[1];
	uint32_t _rx1_anarxacontrol1;
} BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_CLR(r) (r).rx1_anarxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SET(r,d) (r).rx1_anarxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_GET(r) (r).rx1_anarxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_VCMf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_VCMf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_VCMf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_VCMf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMAX_SIGDETf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMAX_SIGDETf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_SIGDETf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_SIGDETf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_SIGDETf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_SIGDETf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFH_RXf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFH_RXf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFL_RXf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFL_RXf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_TPORT_ENf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_TPORT_ENf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_VDDRB_BGf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_VDDRB_BGf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIG_PWRDNf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIG_PWRDNf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_CTRLf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_CTRLf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_SELf_GET(r) ((((r).rx1_anarxacontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_SELf_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_RESERVED0f_GET(r) (((r).rx1_anarxacontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_RESERVED0f_SET(r,f) (r).rx1_anarxacontrol1[0]=(((r).rx1_anarxacontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX1_ANARXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r,(_r._rx1_anarxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r,(_r._rx1_anarxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r
#define RX1_ANARXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_t RX1_ANARXACONTROL1r_t;
#define RX1_ANARXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_CLR
#define RX1_ANARXACONTROL1r_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SET
#define RX1_ANARXACONTROL1r_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_GET
#define RX1_ANARXACONTROL1r_IMODE_VCMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_VCMf_GET
#define RX1_ANARXACONTROL1r_IMODE_VCMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_VCMf_SET
#define RX1_ANARXACONTROL1r_IMIN_VCMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_VCMf_GET
#define RX1_ANARXACONTROL1r_IMIN_VCMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_VCMf_SET
#define RX1_ANARXACONTROL1r_IMAX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMAX_SIGDETf_GET
#define RX1_ANARXACONTROL1r_IMAX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMAX_SIGDETf_SET
#define RX1_ANARXACONTROL1r_IMODE_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_SIGDETf_GET
#define RX1_ANARXACONTROL1r_IMODE_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMODE_SIGDETf_SET
#define RX1_ANARXACONTROL1r_IMIN_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_SIGDETf_GET
#define RX1_ANARXACONTROL1r_IMIN_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_IMIN_SIGDETf_SET
#define RX1_ANARXACONTROL1r_REFH_RXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFH_RXf_GET
#define RX1_ANARXACONTROL1r_REFH_RXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFH_RXf_SET
#define RX1_ANARXACONTROL1r_REFL_RXf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFL_RXf_GET
#define RX1_ANARXACONTROL1r_REFL_RXf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_REFL_RXf_SET
#define RX1_ANARXACONTROL1r_TPORT_ENf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_TPORT_ENf_GET
#define RX1_ANARXACONTROL1r_TPORT_ENf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_TPORT_ENf_SET
#define RX1_ANARXACONTROL1r_VDDRB_BGf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_VDDRB_BGf_GET
#define RX1_ANARXACONTROL1r_VDDRB_BGf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_VDDRB_BGf_SET
#define RX1_ANARXACONTROL1r_SIG_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIG_PWRDNf_GET
#define RX1_ANARXACONTROL1r_SIG_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_SIG_PWRDNf_SET
#define RX1_ANARXACONTROL1r_OFFSET_CTRLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_CTRLf_GET
#define RX1_ANARXACONTROL1r_OFFSET_CTRLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_CTRLf_SET
#define RX1_ANARXACONTROL1r_OFFSET_SELf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_SELf_GET
#define RX1_ANARXACONTROL1r_OFFSET_SELf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_OFFSET_SELf_SET
#define RX1_ANARXACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_RESERVED0f_GET
#define RX1_ANARXACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r_RESERVED0f_SET
#define READ_RX1_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL1r
#define WRITE_RX1_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXACONTROL2
 * BLOCKS:   RX1
 * REGADDR:  0x80cd
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMAX_VCM         
 *     IMIN_INTERP      
 *     IMODE_INTERP     
 *     IMAX_INTERP      
 *     IMIN_VGA         
 *     IMODE_VGA        
 *     IMAX_VGA         
 *     IMIN_DFESUM      
 *     IMODE_DFESUM     
 *     IMAX_DFESUM      
 *     IMIN_EQFL        
 *     IMODE_EQFL       
 *     IMAX_EQFL        
 *     IMIN_CLKBUF      
 *     IMODE_CLKBUF     
 *     IMAX_CLKBUF      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r (0x0000c01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_s {
	uint32_t v[1];
	uint32_t rx1_anarxacontrol2[1];
	uint32_t _rx1_anarxacontrol2;
} BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_CLR(r) (r).rx1_anarxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_SET(r,d) (r).rx1_anarxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_GET(r) (r).rx1_anarxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_CLKBUFf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_CLKBUFf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_CLKBUFf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_CLKBUFf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_CLKBUFf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_CLKBUFf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_EQFLf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_EQFLf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_EQFLf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_EQFLf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_EQFLf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_EQFLf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_DFESUMf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_DFESUMf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_DFESUMf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_DFESUMf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_DFESUMf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_DFESUMf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VGAf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VGAf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_VGAf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_VGAf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_VGAf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_VGAf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_INTERPf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_INTERPf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_INTERPf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_INTERPf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_INTERPf_GET(r) ((((r).rx1_anarxacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_INTERPf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VCMf_GET(r) (((r).rx1_anarxacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VCMf_SET(r,f) (r).rx1_anarxacontrol2[0]=(((r).rx1_anarxacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX1_ANARXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r,(_r._rx1_anarxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r,(_r._rx1_anarxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r
#define RX1_ANARXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_t RX1_ANARXACONTROL2r_t;
#define RX1_ANARXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_CLR
#define RX1_ANARXACONTROL2r_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_SET
#define RX1_ANARXACONTROL2r_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_GET
#define RX1_ANARXACONTROL2r_IMAX_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_CLKBUFf_GET
#define RX1_ANARXACONTROL2r_IMAX_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_CLKBUFf_SET
#define RX1_ANARXACONTROL2r_IMODE_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_CLKBUFf_GET
#define RX1_ANARXACONTROL2r_IMODE_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_CLKBUFf_SET
#define RX1_ANARXACONTROL2r_IMIN_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_CLKBUFf_GET
#define RX1_ANARXACONTROL2r_IMIN_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_CLKBUFf_SET
#define RX1_ANARXACONTROL2r_IMAX_EQFLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_EQFLf_GET
#define RX1_ANARXACONTROL2r_IMAX_EQFLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_EQFLf_SET
#define RX1_ANARXACONTROL2r_IMODE_EQFLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_EQFLf_GET
#define RX1_ANARXACONTROL2r_IMODE_EQFLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_EQFLf_SET
#define RX1_ANARXACONTROL2r_IMIN_EQFLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_EQFLf_GET
#define RX1_ANARXACONTROL2r_IMIN_EQFLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_EQFLf_SET
#define RX1_ANARXACONTROL2r_IMAX_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_DFESUMf_GET
#define RX1_ANARXACONTROL2r_IMAX_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_DFESUMf_SET
#define RX1_ANARXACONTROL2r_IMODE_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_DFESUMf_GET
#define RX1_ANARXACONTROL2r_IMODE_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_DFESUMf_SET
#define RX1_ANARXACONTROL2r_IMIN_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_DFESUMf_GET
#define RX1_ANARXACONTROL2r_IMIN_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_DFESUMf_SET
#define RX1_ANARXACONTROL2r_IMAX_VGAf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VGAf_GET
#define RX1_ANARXACONTROL2r_IMAX_VGAf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VGAf_SET
#define RX1_ANARXACONTROL2r_IMODE_VGAf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_VGAf_GET
#define RX1_ANARXACONTROL2r_IMODE_VGAf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_VGAf_SET
#define RX1_ANARXACONTROL2r_IMIN_VGAf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_VGAf_GET
#define RX1_ANARXACONTROL2r_IMIN_VGAf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_VGAf_SET
#define RX1_ANARXACONTROL2r_IMAX_INTERPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_INTERPf_GET
#define RX1_ANARXACONTROL2r_IMAX_INTERPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_INTERPf_SET
#define RX1_ANARXACONTROL2r_IMODE_INTERPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_INTERPf_GET
#define RX1_ANARXACONTROL2r_IMODE_INTERPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMODE_INTERPf_SET
#define RX1_ANARXACONTROL2r_IMIN_INTERPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_INTERPf_GET
#define RX1_ANARXACONTROL2r_IMIN_INTERPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMIN_INTERPf_SET
#define RX1_ANARXACONTROL2r_IMAX_VCMf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VCMf_GET
#define RX1_ANARXACONTROL2r_IMAX_VCMf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r_IMAX_VCMf_SET
#define READ_RX1_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL2r
#define WRITE_RX1_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX1_ANARXACONTROL3
 * BLOCKS:   RX1
 * REGADDR:  0x80ce
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMIN_DFEVREF     
 *     IMODE_DFEVREF    
 *     IMAX_DFEVREF     
 *     IMIN_SLCD2C      
 *     IMODE_SLCD2C     
 *     IMAX_SLCD2C      
 *     IMIN_DFETAP      
 *     IMODE_DFETAP     
 *     IMAX_DFETAP      
 *     OFFSET_PD        
 *     EN_DFECKPWR      
 *     EN_HGAIN         
 *     EN_DFECLK        
 *     EN_VCCTRL        
 *     PD_CH_P1         
 *     EN_CLK16         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r (0x0000c01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program RX1_ANARXACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_s {
	uint32_t v[1];
	uint32_t rx1_anarxacontrol3[1];
	uint32_t _rx1_anarxacontrol3;
} BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_CLR(r) (r).rx1_anarxacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_SET(r,d) (r).rx1_anarxacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_GET(r) (r).rx1_anarxacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_CLK16f_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_CLK16f_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_PD_CH_P1f_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_PD_CH_P1f_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_VCCTRLf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_VCCTRLf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECLKf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECLKf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_HGAINf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_HGAINf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECKPWRf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECKPWRf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_OFFSET_PDf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_OFFSET_PDf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFETAPf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFETAPf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFETAPf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFETAPf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFETAPf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFETAPf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFEVREFf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFEVREFf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFEVREFf_GET(r) ((((r).rx1_anarxacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFEVREFf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFEVREFf_GET(r) (((r).rx1_anarxacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFEVREFf_SET(r,f) (r).rx1_anarxacontrol3[0]=(((r).rx1_anarxacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX1_ANARXACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r,(_r._rx1_anarxacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r,(_r._rx1_anarxacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX1_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r
#define RX1_ANARXACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_t RX1_ANARXACONTROL3r_t;
#define RX1_ANARXACONTROL3r_CLR BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_CLR
#define RX1_ANARXACONTROL3r_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_SET
#define RX1_ANARXACONTROL3r_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_GET
#define RX1_ANARXACONTROL3r_EN_CLK16f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_CLK16f_GET
#define RX1_ANARXACONTROL3r_EN_CLK16f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_CLK16f_SET
#define RX1_ANARXACONTROL3r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_PD_CH_P1f_GET
#define RX1_ANARXACONTROL3r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_PD_CH_P1f_SET
#define RX1_ANARXACONTROL3r_EN_VCCTRLf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_VCCTRLf_GET
#define RX1_ANARXACONTROL3r_EN_VCCTRLf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_VCCTRLf_SET
#define RX1_ANARXACONTROL3r_EN_DFECLKf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECLKf_GET
#define RX1_ANARXACONTROL3r_EN_DFECLKf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECLKf_SET
#define RX1_ANARXACONTROL3r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_HGAINf_GET
#define RX1_ANARXACONTROL3r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_HGAINf_SET
#define RX1_ANARXACONTROL3r_EN_DFECKPWRf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECKPWRf_GET
#define RX1_ANARXACONTROL3r_EN_DFECKPWRf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_EN_DFECKPWRf_SET
#define RX1_ANARXACONTROL3r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_OFFSET_PDf_GET
#define RX1_ANARXACONTROL3r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_OFFSET_PDf_SET
#define RX1_ANARXACONTROL3r_IMAX_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFETAPf_GET
#define RX1_ANARXACONTROL3r_IMAX_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFETAPf_SET
#define RX1_ANARXACONTROL3r_IMODE_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFETAPf_GET
#define RX1_ANARXACONTROL3r_IMODE_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFETAPf_SET
#define RX1_ANARXACONTROL3r_IMIN_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFETAPf_GET
#define RX1_ANARXACONTROL3r_IMIN_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFETAPf_SET
#define RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_GET
#define RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_SLCD2Cf_SET
#define RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_GET
#define RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_SLCD2Cf_SET
#define RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_GET
#define RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_SLCD2Cf_SET
#define RX1_ANARXACONTROL3r_IMAX_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFEVREFf_GET
#define RX1_ANARXACONTROL3r_IMAX_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMAX_DFEVREFf_SET
#define RX1_ANARXACONTROL3r_IMODE_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFEVREFf_GET
#define RX1_ANARXACONTROL3r_IMODE_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMODE_DFEVREFf_SET
#define RX1_ANARXACONTROL3r_IMIN_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFEVREFf_GET
#define RX1_ANARXACONTROL3r_IMIN_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r_IMIN_DFEVREFf_SET
#define READ_RX1_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_READ_RX1_ANARXACONTROL3r
#define WRITE_RX1_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_RX1_ANARXACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX1_ANARXACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXSTATUS
 * BLOCKS:   RX2
 * REGADDR:  0x80d0
 * DESC:     Rx lane status register
 * SIZE:     32
 * FIELDS:
 *     ADC_CDRSTATUS12_2_WADR_TEST 
 *     INTEG_STATUS_INTEG_STATUS 
 *     ADC_CDRSTATUS8_SIGDET 
 *     ADC_CDRSTATUS12_3_PRSTB_I66_MUX 
 *     ADC_CDRSTATUS6_PWRDN_PLL 
 *     ADC_CDRSTATUS5_RESERVED0 
 *     ADC_CDRSTATUS1_PLL_BYPASS 
 *     ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODD 
 *     PRBS_STATUS_PTBS_ERRORS 
 *     ADC_CDRSTATUS12_4_RFIFO_OVFLOW 
 *     SYNC_STATUS_RXSEQDONE 
 *     ADC_CDRSTATUS10_PRBS_STATE 
 *     ADC_CDRSTATUS2_RXSEQDONE 
 *     ADC_CDRSTATUS9_RESERVED0 
 *     RXTESTSEL_1_INTEG_MODE_SM 
 *     VCO_STATUS_VCO_STATUS 
 *     SIGDET_STATUS_RESERVED1 
 *     ADC_CDRSTATUS11_RESERVED0 
 *     ADC_CDRSTATUS3_ALLOW_INCREMENT_PC 
 *     ADC_CDRSTATUS4_RESERVED1 
 *     ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVEN 
 *     SCALE_STATUS_INTEG_SCALE_ACQ 
 *     RXTESTSEL_0_RESERVED1 
 *     ADC_CDRSTATUS12_1_RADR_TEST 
 *     ADC_CDRSTATUS8_RESERVED0 
 *     ADC_CDRSTATUS1_REFCLK 
 *     ADC_CDRSTATUS12_3_RSTB_I66 
 *     ADC_CDRSTATUS7E_EN_CDET_EVEN 
 *     ADC_CDRSTATUS2_RESERVED1 
 *     ADC_CDRSTATUS3_RESERVED1 
 *     ADC_CDRSTATUS12_4_RFIFO_UNFLOW 
 *     SYNC_STATUS_CX4_SIGDET 
 *     ADC_CDRSTATUS6_PWRDN_RX 
 *     ADC_CDRSTATUS7O_EN_CDET_ODD 
 *     ADC_CDRSTATUS7O_COMDET_ODD 
 *     RXTESTSEL_0_COMMA_ADJ_EN_EXT 
 *     ADC_CDRSTATUS12_4_RFIFO_ERROR_R 
 *     SYNC_STATUS_SATURATE_STATUS 
 *     ADC_CDRSTATUS1_RXCK_I 
 *     RXTESTSEL_1_FREQ_SEL_SM 
 *     ADC_CDRSTATUS12_3_RXCK_I66_TMUX 
 *     ADC_CDRSTATUS6_RESET_ANLG 
 *     ADC_CDRSTATUS7E_COMDET_EVEN 
 *     ADC_CDRSTATUS7E_RXCK1_EVEN 
 *     ADC_CDRSTATUS1_RXCK_TST 
 *     ADC_CDRSTATUS12_3_PRSTB_66B_MUX 
 *     SYNC_STATUS_RESERVED2 
 *     RXTESTSEL_0_COMMA_ADJ_EN 
 *     ADC_CDRSTATUS6_RX_PWRDN 
 *     ADC_CDRSTATUS7O_RXCK1_ODD 
 *     RXTESTSEL_1_FREQ_SEL_PC 
 *     ADC_CDRSTATUS3_RXSEQSTART 
 *     ADC_CDRSTATUS7E_RXCK0_EVEN 
 *     ADC_CDRSTATUS10_RESERVED1 
 *     ADC_CDRSTATUS12_3_RSTB_66B 
 *     SCALE_STATUS_PROP_SCALE_ACQ 
 *     ADC_CDRSTATUS3_RESERVED0 
 *     ADC_CDRSTATUS7O_RXCK0_ODD 
 *     ADC_CDRSTATUS1_CLOCKSWITCHSEL 
 *     ADC_CDRSTATUS4_PWRDN 
 *     RXTESTSEL_0_LINK_EN_R 
 *     RXTESTSEL_1_CDRACQDONE_R2 
 *     ADC_CDRSTATUS2_RXSEQSTART 
 *     ADC_CDRSTATUS12_4_RESERVED0 
 *     ADC_CDRSTATUS6_RX_RESET 
 *     ADC_CDRSTATUS6_RESERVED0 
 *     RXTESTSEL_0_COMMA_MASK 
 *     SYNC_STATUS_RX_SIGDET 
 *     ADC_CDRSTATUS10_RSTB_TST 
 *     ADC_CDRSTATUS12_2_RESERVED0 
 *     ADC_CDRSTATUS7E_RESERVED0 
 *     ADC_CDRSTATUS2_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RXCK_66B_TMUX 
 *     ADC_CDRSTATUS4_PLL_LOCK_RSTB 
 *     ADC_CDRSTATUS1_GLPBK_COMBO 
 *     ADC_CDRSTATUS12_1_ENABLE4 
 *     ADC_CDRSTATUS7O_RESERVED0 
 *     RXTESTSEL_1_RESERVED0 
 *     ADC_CDRSTATUS1_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RESERVED0 
 *     ADC_CDRSTATUS4_FREQ_SEL 
 *     ADC_CDRSTATUS10_PRBS_EN 
 *     ADC_CDRSTATUS2_RESERVED0 
 *     RXTESTSEL_0_RXPOL_FLIP 
 *     SYNC_STATUS_SYNC_STATUS 
 *     ADC_CDRSTATUS12_1_RESERVED0 
 *     ADC_CDRSTATUS4_RX_PWRDN 
 *     RXTESTSEL_0_RX_POLARITY 
 *     ADC_CDRSTATUS1_RESERVED0 
 *     SYNC_STATUS_MUX_COMADJ_SYNC_STATUS 
 *     ADC_CDRSTATUS10_RESERVED0 
 *     SCALE_STATUS_INTEG_SCALE 
 *     SYNC_STATUS_RXSEQSTART 
 *     SIGDET_STATUS_RX_PWRDN 
 *     RXTESTSEL_0_PCI_MODE_EN 
 *     ADC_CDRSTATUS4_RESERVED0 
 *     RXTESTSEL_0_INDCK_MODE_EN 
 *     SYNC_STATUS_RESERVED1 
 *     SIGDET_STATUS_RX_RESET 
 *     RXTESTSEL_0_RESERVED0 
 *     SYNC_STATUS_TEST_ACQ_EN 
 *     SIGDET_STATUS_CS4_SIGDET_LL 
 *     SYNC_STATUS_RESERVED0 
 *     SIGDET_STATUS_RX_SIGDET_LL 
 *     SIGDET_STATUS_RXSEQDONE 
 *     SCALE_STATUS_PROP_SCALE 
 *     SIGDET_STATUS_RESERVED0 
 *     PRBS_STATUS_PRBS_STKY 
 *     PRBS_STATUS_PRBS_LOCK 
 *     SIGDET_STATUS_CX4_SIGDET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr (0x0000d010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_s {
	uint32_t v[1];
	uint32_t rx2_anarxstatus[1];
	uint32_t _rx2_anarxstatus;
} BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_CLR(r) (r).rx2_anarxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SET(r,d) (r).rx2_anarxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_GET(r) (r).rx2_anarxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET(r) ((((r).rx2_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET(r) ((((r).rx2_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 13) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET(r) ((((r).rx2_anarxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET(r) ((((r).rx2_anarxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET(r) ((((r).rx2_anarxstatus[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET(r) ((((r).rx2_anarxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET(r) ((((r).rx2_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET(r) ((((r).rx2_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET(r) ((((r).rx2_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET(r) ((((r).rx2_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET(r) ((((r).rx2_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET(r) ((((r).rx2_anarxstatus[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET(r) ((((r).rx2_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET(r) ((((r).rx2_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET(r) ((((r).rx2_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET(r) (((r).rx2_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET(r) ((((r).rx2_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET(r) (((r).rx2_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET(r) (((r).rx2_anarxstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET(r) (((r).rx2_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET(r) (((r).rx2_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET(r) (((r).rx2_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET(r) (((r).rx2_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET(r) (((r).rx2_anarxstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET(r) (((r).rx2_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET(r) (((r).rx2_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET(r) (((r).rx2_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET(r) (((r).rx2_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET(r) (((r).rx2_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET(r) ((((r).rx2_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET(r,f) (r).rx2_anarxstatus[0]=(((r).rx2_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access RX2_ANARXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr,(_r._rx2_anarxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr,(_r._rx2_anarxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXSTATUSr BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr
#define RX2_ANARXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_t RX2_ANARXSTATUSr_t;
#define RX2_ANARXSTATUSr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_CLR
#define RX2_ANARXSTATUSr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SET
#define RX2_ANARXSTATUSr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET
#define RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET
#define RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET
#define RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET
#define RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET
#define RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET
#define RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET
#define RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET
#define RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET
#define RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET
#define RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET
#define RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET
#define RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET
#define RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET
#define RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET
#define RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET
#define RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET
#define RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET
#define RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET
#define READ_RX2_ANARXSTATUSr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXSTATUSr
#define WRITE_RX2_ANARXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXCONTROL
 * BLOCKS:   RX2
 * REGADDR:  0x80d1
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     RESERVED1        
 *     OVERRIDE_SIGDET_VAL 
 *     OVERRIDE_SIGDET_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr (0x0000d011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_s {
	uint32_t v[1];
	uint32_t rx2_anarxcontrol[1];
	uint32_t _rx2_anarxcontrol;
} BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_CLR(r) (r).rx2_anarxcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_SET(r,d) (r).rx2_anarxcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_GET(r) (r).rx2_anarxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED0f_GET(r) ((((r).rx2_anarxcontrol[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED0f_SET(r,f) (r).rx2_anarxcontrol[0]=(((r).rx2_anarxcontrol[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET(r) ((((r).rx2_anarxcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET(r,f) (r).rx2_anarxcontrol[0]=(((r).rx2_anarxcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET(r) ((((r).rx2_anarxcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET(r,f) (r).rx2_anarxcontrol[0]=(((r).rx2_anarxcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED1f_GET(r) ((((r).rx2_anarxcontrol[0]) >> 3) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED1f_SET(r,f) (r).rx2_anarxcontrol[0]=(((r).rx2_anarxcontrol[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_STATUS_SELf_GET(r) (((r).rx2_anarxcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_STATUS_SELf_SET(r,f) (r).rx2_anarxcontrol[0]=(((r).rx2_anarxcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RX2_ANARXCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr,(_r._rx2_anarxcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr,(_r._rx2_anarxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXCONTROLr BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr
#define RX2_ANARXCONTROLr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_t RX2_ANARXCONTROLr_t;
#define RX2_ANARXCONTROLr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_CLR
#define RX2_ANARXCONTROLr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_SET
#define RX2_ANARXCONTROLr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_GET
#define RX2_ANARXCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED0f_GET
#define RX2_ANARXCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED0f_SET
#define RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET
#define RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET
#define RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET
#define RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET
#define RX2_ANARXCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED1f_GET
#define RX2_ANARXCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_RESERVED1f_SET
#define RX2_ANARXCONTROLr_STATUS_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_STATUS_SELf_GET
#define RX2_ANARXCONTROLr_STATUS_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr_STATUS_SELf_SET
#define READ_RX2_ANARXCONTROLr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROLr
#define WRITE_RX2_ANARXCONTROLr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXTEST
 * BLOCKS:   RX2
 * REGADDR:  0x80d8
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     TESTMUXSELECT_SM 
 *     TPCTRL_SM        
 *     RESERVED0        
 *     SIGDET_MUX_SM    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr (0x0000d018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXTEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_s {
	uint32_t v[1];
	uint32_t rx2_anarxtest[1];
	uint32_t _rx2_anarxtest;
} BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_CLR(r) (r).rx2_anarxtest[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SET(r,d) (r).rx2_anarxtest[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_GET(r) (r).rx2_anarxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIGDET_MUX_SMf_GET(r) ((((r).rx2_anarxtest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIGDET_MUX_SMf_SET(r,f) (r).rx2_anarxtest[0]=(((r).rx2_anarxtest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_RESERVED0f_GET(r) ((((r).rx2_anarxtest[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_RESERVED0f_SET(r,f) (r).rx2_anarxtest[0]=(((r).rx2_anarxtest[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TPCTRL_SMf_GET(r) ((((r).rx2_anarxtest[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TPCTRL_SMf_SET(r,f) (r).rx2_anarxtest[0]=(((r).rx2_anarxtest[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TESTMUXSELECT_SMf_GET(r) (((r).rx2_anarxtest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TESTMUXSELECT_SMf_SET(r,f) (r).rx2_anarxtest[0]=(((r).rx2_anarxtest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RX2_ANARXTEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXTESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr,(_r._rx2_anarxtest))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXTESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr,(_r._rx2_anarxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXTESTr BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr
#define RX2_ANARXTESTr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_t RX2_ANARXTESTr_t;
#define RX2_ANARXTESTr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_CLR
#define RX2_ANARXTESTr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SET
#define RX2_ANARXTESTr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_GET
#define RX2_ANARXTESTr_SIGDET_MUX_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIGDET_MUX_SMf_GET
#define RX2_ANARXTESTr_SIGDET_MUX_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_SIGDET_MUX_SMf_SET
#define RX2_ANARXTESTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_RESERVED0f_GET
#define RX2_ANARXTESTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_RESERVED0f_SET
#define RX2_ANARXTESTr_TPCTRL_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TPCTRL_SMf_GET
#define RX2_ANARXTESTr_TPCTRL_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TPCTRL_SMf_SET
#define RX2_ANARXTESTr_TESTMUXSELECT_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TESTMUXSELECT_SMf_GET
#define RX2_ANARXTESTr_TESTMUXSELECT_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr_TESTMUXSELECT_SMf_SET
#define READ_RX2_ANARXTESTr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXTESTr
#define WRITE_RX2_ANARXTESTr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXCONTROL1G
 * BLOCKS:   RX2
 * REGADDR:  0x80d9
 * DESC:     Rx 1G Control register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     RESERVED0        
 *     COMMA_BYTE_ADJ_EN_SM 
 *     COMMA_LOW_BYTE_SM 
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr (0x0000d019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXCONTROL1G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_s {
	uint32_t v[1];
	uint32_t rx2_anarxcontrol1g[1];
	uint32_t _rx2_anarxcontrol1g;
} BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CLR(r) (r).rx2_anarxcontrol1g[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_SET(r,d) (r).rx2_anarxcontrol1g[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_GET(r) (r).rx2_anarxcontrol1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FPAT_MDf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FPAT_MDf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_STAMUXREGDISf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_STAMUXREGDISf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_TSTf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_TSTf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_EMON_ENf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_EMON_ENf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_ENf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_ENf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_ENf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_ENf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CSTRETCHf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CSTRETCHf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RESERVED0f_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RESERVED0f_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).rx2_anarxcontrol1g[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SELf_GET(r) (((r).rx2_anarxcontrol1g[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SELf_SET(r,f) (r).rx2_anarxcontrol1g[0]=(((r).rx2_anarxcontrol1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX2_ANARXCONTROL1G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr,(_r._rx2_anarxcontrol1g))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr,(_r._rx2_anarxcontrol1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr
#define RX2_ANARXCONTROL1Gr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_t RX2_ANARXCONTROL1Gr_t;
#define RX2_ANARXCONTROL1Gr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CLR
#define RX2_ANARXCONTROL1Gr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_SET
#define RX2_ANARXCONTROL1Gr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_GET
#define RX2_ANARXCONTROL1Gr_FPAT_MDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FPAT_MDf_GET
#define RX2_ANARXCONTROL1Gr_FPAT_MDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FPAT_MDf_SET
#define RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET
#define RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET
#define RX2_ANARXCONTROL1Gr_STAMUXREGDISf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_STAMUXREGDISf_GET
#define RX2_ANARXCONTROL1Gr_STAMUXREGDISf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_STAMUXREGDISf_SET
#define RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET
#define RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET
#define RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_GET
#define RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RXD_DEC_SELf_SET
#define RX2_ANARXCONTROL1Gr_CGBAD_TSTf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_TSTf_GET
#define RX2_ANARXCONTROL1Gr_CGBAD_TSTf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_TSTf_SET
#define RX2_ANARXCONTROL1Gr_EMON_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_EMON_ENf_GET
#define RX2_ANARXCONTROL1Gr_EMON_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_EMON_ENf_SET
#define RX2_ANARXCONTROL1Gr_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_ENf_GET
#define RX2_ANARXCONTROL1Gr_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_PRBS_ENf_SET
#define RX2_ANARXCONTROL1Gr_CGBAD_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_ENf_GET
#define RX2_ANARXCONTROL1Gr_CGBAD_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CGBAD_ENf_SET
#define RX2_ANARXCONTROL1Gr_CSTRETCHf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CSTRETCHf_GET
#define RX2_ANARXCONTROL1Gr_CSTRETCHf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_CSTRETCHf_SET
#define RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET
#define RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET
#define RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET
#define RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET
#define RX2_ANARXCONTROL1Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RESERVED0f_GET
#define RX2_ANARXCONTROL1Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_RESERVED0f_SET
#define RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET
#define RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET
#define RX2_ANARXCONTROL1Gr_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SELf_GET
#define RX2_ANARXCONTROL1Gr_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr_FREQ_SELf_SET
#define READ_RX2_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROL1Gr
#define WRITE_RX2_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROL1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROL1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXCONTROLPCI
 * BLOCKS:   RX2
 * REGADDR:  0x80da
 * DESC:     Rx PCI Control register
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE_SM    
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_SM 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_SM 
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R_SM 
 *     COMMA_ADJ_EN_FORCE_SYNC_SM 
 *     COMMA_ADJ_EN_FORCE_EXT_SM 
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_R_SM 
 *     SYNC_STATUS_FORCE_SYNC_SM 
 *     COMMA_MASK_R     
 *     COMMA_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr (0x0000d01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXCONTROLPCI.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_s {
	uint32_t v[1];
	uint32_t rx2_anarxcontrolpci[1];
	uint32_t _rx2_anarxcontrolpci;
} BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_CLR(r) (r).rx2_anarxcontrolpci[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SET(r,d) (r).rx2_anarxcontrolpci[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_GET(r) (r).rx2_anarxcontrolpci[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET(r) ((((r).rx2_anarxcontrolpci[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET(r) (((r).rx2_anarxcontrolpci[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET(r,f) (r).rx2_anarxcontrolpci[0]=(((r).rx2_anarxcontrolpci[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX2_ANARXCONTROLPCI.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr,(_r._rx2_anarxcontrolpci))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr,(_r._rx2_anarxcontrolpci))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr
#define RX2_ANARXCONTROLPCIr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_t RX2_ANARXCONTROLPCIr_t;
#define RX2_ANARXCONTROLPCIr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_CLR
#define RX2_ANARXCONTROLPCIr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SET
#define RX2_ANARXCONTROLPCIr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET
#define RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET
#define RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET
#define RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET
#define RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET
#define RX2_ANARXCONTROLPCIr_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_Rf_GET
#define RX2_ANARXCONTROLPCIr_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_LINK_EN_Rf_SET
#define RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET
#define RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET
#define RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET
#define RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET
#define RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET
#define RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET
#define READ_RX2_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXCONTROLPCIr
#define WRITE_RX2_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXCONTROLPCIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXCONTROLPCIr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXASTATUS
 * BLOCKS:   RX2
 * REGADDR:  0x80db
 * DESC:     Rx analog status register
 * SIZE:     32
 * FIELDS:
 *     VGA              
 *     RESERVED0        
 *     DFE              
 *     RX_PF            
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr (0x0000d01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXASTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_s {
	uint32_t v[1];
	uint32_t rx2_anarxastatus[1];
	uint32_t _rx2_anarxastatus;
} BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_CLR(r) (r).rx2_anarxastatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SET(r,d) (r).rx2_anarxastatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_GET(r) (r).rx2_anarxastatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIGDETf_GET(r) ((((r).rx2_anarxastatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIGDETf_SET(r,f) (r).rx2_anarxastatus[0]=(((r).rx2_anarxastatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RX_PFf_GET(r) ((((r).rx2_anarxastatus[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RX_PFf_SET(r,f) (r).rx2_anarxastatus[0]=(((r).rx2_anarxastatus[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_DFEf_GET(r) ((((r).rx2_anarxastatus[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_DFEf_SET(r,f) (r).rx2_anarxastatus[0]=(((r).rx2_anarxastatus[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RESERVED0f_GET(r) ((((r).rx2_anarxastatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RESERVED0f_SET(r,f) (r).rx2_anarxastatus[0]=(((r).rx2_anarxastatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_VGAf_GET(r) (((r).rx2_anarxastatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_VGAf_SET(r,f) (r).rx2_anarxastatus[0]=(((r).rx2_anarxastatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RX2_ANARXASTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr,(_r._rx2_anarxastatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr,(_r._rx2_anarxastatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXASTATUSr BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr
#define RX2_ANARXASTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_t RX2_ANARXASTATUSr_t;
#define RX2_ANARXASTATUSr_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_CLR
#define RX2_ANARXASTATUSr_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SET
#define RX2_ANARXASTATUSr_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_GET
#define RX2_ANARXASTATUSr_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIGDETf_GET
#define RX2_ANARXASTATUSr_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_SIGDETf_SET
#define RX2_ANARXASTATUSr_RX_PFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RX_PFf_GET
#define RX2_ANARXASTATUSr_RX_PFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RX_PFf_SET
#define RX2_ANARXASTATUSr_DFEf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_DFEf_GET
#define RX2_ANARXASTATUSr_DFEf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_DFEf_SET
#define RX2_ANARXASTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RESERVED0f_GET
#define RX2_ANARXASTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_RESERVED0f_SET
#define RX2_ANARXASTATUSr_VGAf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_VGAf_GET
#define RX2_ANARXASTATUSr_VGAf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr_VGAf_SET
#define READ_RX2_ANARXASTATUSr BCMI_HYPERLITE_XGXS_READ_RX2_ANARXASTATUSr
#define WRITE_RX2_ANARXASTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXACONTROL1
 * BLOCKS:   RX2
 * REGADDR:  0x80dc
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     OFFSET_SEL       
 *     OFFSET_CTRL      
 *     SIG_PWRDN        
 *     VDDRB_BG         
 *     TPORT_EN         
 *     REFL_RX          
 *     REFH_RX          
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_VCM         
 *     IMODE_VCM        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r (0x0000d01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_s {
	uint32_t v[1];
	uint32_t rx2_anarxacontrol1[1];
	uint32_t _rx2_anarxacontrol1;
} BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_CLR(r) (r).rx2_anarxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SET(r,d) (r).rx2_anarxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_GET(r) (r).rx2_anarxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_VCMf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_VCMf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_VCMf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_VCMf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMAX_SIGDETf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMAX_SIGDETf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_SIGDETf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_SIGDETf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_SIGDETf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_SIGDETf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFH_RXf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFH_RXf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFL_RXf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFL_RXf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_TPORT_ENf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_TPORT_ENf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_VDDRB_BGf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_VDDRB_BGf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIG_PWRDNf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIG_PWRDNf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_CTRLf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_CTRLf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_SELf_GET(r) ((((r).rx2_anarxacontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_SELf_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_RESERVED0f_GET(r) (((r).rx2_anarxacontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_RESERVED0f_SET(r,f) (r).rx2_anarxacontrol1[0]=(((r).rx2_anarxacontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX2_ANARXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r,(_r._rx2_anarxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r,(_r._rx2_anarxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r
#define RX2_ANARXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_t RX2_ANARXACONTROL1r_t;
#define RX2_ANARXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_CLR
#define RX2_ANARXACONTROL1r_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SET
#define RX2_ANARXACONTROL1r_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_GET
#define RX2_ANARXACONTROL1r_IMODE_VCMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_VCMf_GET
#define RX2_ANARXACONTROL1r_IMODE_VCMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_VCMf_SET
#define RX2_ANARXACONTROL1r_IMIN_VCMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_VCMf_GET
#define RX2_ANARXACONTROL1r_IMIN_VCMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_VCMf_SET
#define RX2_ANARXACONTROL1r_IMAX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMAX_SIGDETf_GET
#define RX2_ANARXACONTROL1r_IMAX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMAX_SIGDETf_SET
#define RX2_ANARXACONTROL1r_IMODE_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_SIGDETf_GET
#define RX2_ANARXACONTROL1r_IMODE_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMODE_SIGDETf_SET
#define RX2_ANARXACONTROL1r_IMIN_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_SIGDETf_GET
#define RX2_ANARXACONTROL1r_IMIN_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_IMIN_SIGDETf_SET
#define RX2_ANARXACONTROL1r_REFH_RXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFH_RXf_GET
#define RX2_ANARXACONTROL1r_REFH_RXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFH_RXf_SET
#define RX2_ANARXACONTROL1r_REFL_RXf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFL_RXf_GET
#define RX2_ANARXACONTROL1r_REFL_RXf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_REFL_RXf_SET
#define RX2_ANARXACONTROL1r_TPORT_ENf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_TPORT_ENf_GET
#define RX2_ANARXACONTROL1r_TPORT_ENf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_TPORT_ENf_SET
#define RX2_ANARXACONTROL1r_VDDRB_BGf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_VDDRB_BGf_GET
#define RX2_ANARXACONTROL1r_VDDRB_BGf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_VDDRB_BGf_SET
#define RX2_ANARXACONTROL1r_SIG_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIG_PWRDNf_GET
#define RX2_ANARXACONTROL1r_SIG_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_SIG_PWRDNf_SET
#define RX2_ANARXACONTROL1r_OFFSET_CTRLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_CTRLf_GET
#define RX2_ANARXACONTROL1r_OFFSET_CTRLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_CTRLf_SET
#define RX2_ANARXACONTROL1r_OFFSET_SELf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_SELf_GET
#define RX2_ANARXACONTROL1r_OFFSET_SELf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_OFFSET_SELf_SET
#define RX2_ANARXACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_RESERVED0f_GET
#define RX2_ANARXACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r_RESERVED0f_SET
#define READ_RX2_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL1r
#define WRITE_RX2_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXACONTROL2
 * BLOCKS:   RX2
 * REGADDR:  0x80dd
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMAX_VCM         
 *     IMIN_INTERP      
 *     IMODE_INTERP     
 *     IMAX_INTERP      
 *     IMIN_VGA         
 *     IMODE_VGA        
 *     IMAX_VGA         
 *     IMIN_DFESUM      
 *     IMODE_DFESUM     
 *     IMAX_DFESUM      
 *     IMIN_EQFL        
 *     IMODE_EQFL       
 *     IMAX_EQFL        
 *     IMIN_CLKBUF      
 *     IMODE_CLKBUF     
 *     IMAX_CLKBUF      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r (0x0000d01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_s {
	uint32_t v[1];
	uint32_t rx2_anarxacontrol2[1];
	uint32_t _rx2_anarxacontrol2;
} BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_CLR(r) (r).rx2_anarxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_SET(r,d) (r).rx2_anarxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_GET(r) (r).rx2_anarxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_CLKBUFf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_CLKBUFf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_CLKBUFf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_CLKBUFf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_CLKBUFf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_CLKBUFf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_EQFLf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_EQFLf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_EQFLf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_EQFLf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_EQFLf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_EQFLf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_DFESUMf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_DFESUMf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_DFESUMf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_DFESUMf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_DFESUMf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_DFESUMf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VGAf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VGAf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_VGAf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_VGAf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_VGAf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_VGAf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_INTERPf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_INTERPf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_INTERPf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_INTERPf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_INTERPf_GET(r) ((((r).rx2_anarxacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_INTERPf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VCMf_GET(r) (((r).rx2_anarxacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VCMf_SET(r,f) (r).rx2_anarxacontrol2[0]=(((r).rx2_anarxacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX2_ANARXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r,(_r._rx2_anarxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r,(_r._rx2_anarxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r
#define RX2_ANARXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_t RX2_ANARXACONTROL2r_t;
#define RX2_ANARXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_CLR
#define RX2_ANARXACONTROL2r_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_SET
#define RX2_ANARXACONTROL2r_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_GET
#define RX2_ANARXACONTROL2r_IMAX_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_CLKBUFf_GET
#define RX2_ANARXACONTROL2r_IMAX_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_CLKBUFf_SET
#define RX2_ANARXACONTROL2r_IMODE_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_CLKBUFf_GET
#define RX2_ANARXACONTROL2r_IMODE_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_CLKBUFf_SET
#define RX2_ANARXACONTROL2r_IMIN_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_CLKBUFf_GET
#define RX2_ANARXACONTROL2r_IMIN_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_CLKBUFf_SET
#define RX2_ANARXACONTROL2r_IMAX_EQFLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_EQFLf_GET
#define RX2_ANARXACONTROL2r_IMAX_EQFLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_EQFLf_SET
#define RX2_ANARXACONTROL2r_IMODE_EQFLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_EQFLf_GET
#define RX2_ANARXACONTROL2r_IMODE_EQFLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_EQFLf_SET
#define RX2_ANARXACONTROL2r_IMIN_EQFLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_EQFLf_GET
#define RX2_ANARXACONTROL2r_IMIN_EQFLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_EQFLf_SET
#define RX2_ANARXACONTROL2r_IMAX_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_DFESUMf_GET
#define RX2_ANARXACONTROL2r_IMAX_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_DFESUMf_SET
#define RX2_ANARXACONTROL2r_IMODE_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_DFESUMf_GET
#define RX2_ANARXACONTROL2r_IMODE_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_DFESUMf_SET
#define RX2_ANARXACONTROL2r_IMIN_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_DFESUMf_GET
#define RX2_ANARXACONTROL2r_IMIN_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_DFESUMf_SET
#define RX2_ANARXACONTROL2r_IMAX_VGAf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VGAf_GET
#define RX2_ANARXACONTROL2r_IMAX_VGAf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VGAf_SET
#define RX2_ANARXACONTROL2r_IMODE_VGAf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_VGAf_GET
#define RX2_ANARXACONTROL2r_IMODE_VGAf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_VGAf_SET
#define RX2_ANARXACONTROL2r_IMIN_VGAf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_VGAf_GET
#define RX2_ANARXACONTROL2r_IMIN_VGAf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_VGAf_SET
#define RX2_ANARXACONTROL2r_IMAX_INTERPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_INTERPf_GET
#define RX2_ANARXACONTROL2r_IMAX_INTERPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_INTERPf_SET
#define RX2_ANARXACONTROL2r_IMODE_INTERPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_INTERPf_GET
#define RX2_ANARXACONTROL2r_IMODE_INTERPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMODE_INTERPf_SET
#define RX2_ANARXACONTROL2r_IMIN_INTERPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_INTERPf_GET
#define RX2_ANARXACONTROL2r_IMIN_INTERPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMIN_INTERPf_SET
#define RX2_ANARXACONTROL2r_IMAX_VCMf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VCMf_GET
#define RX2_ANARXACONTROL2r_IMAX_VCMf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r_IMAX_VCMf_SET
#define READ_RX2_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL2r
#define WRITE_RX2_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX2_ANARXACONTROL3
 * BLOCKS:   RX2
 * REGADDR:  0x80de
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMIN_DFEVREF     
 *     IMODE_DFEVREF    
 *     IMAX_DFEVREF     
 *     IMIN_SLCD2C      
 *     IMODE_SLCD2C     
 *     IMAX_SLCD2C      
 *     IMIN_DFETAP      
 *     IMODE_DFETAP     
 *     IMAX_DFETAP      
 *     OFFSET_PD        
 *     EN_DFECKPWR      
 *     EN_HGAIN         
 *     EN_DFECLK        
 *     EN_VCCTRL        
 *     PD_CH_P1         
 *     EN_CLK16         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r (0x0000d01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program RX2_ANARXACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_s {
	uint32_t v[1];
	uint32_t rx2_anarxacontrol3[1];
	uint32_t _rx2_anarxacontrol3;
} BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_CLR(r) (r).rx2_anarxacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_SET(r,d) (r).rx2_anarxacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_GET(r) (r).rx2_anarxacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_CLK16f_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_CLK16f_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_PD_CH_P1f_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_PD_CH_P1f_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_VCCTRLf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_VCCTRLf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECLKf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECLKf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_HGAINf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_HGAINf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECKPWRf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECKPWRf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_OFFSET_PDf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_OFFSET_PDf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFETAPf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFETAPf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFETAPf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFETAPf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFETAPf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFETAPf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFEVREFf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFEVREFf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFEVREFf_GET(r) ((((r).rx2_anarxacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFEVREFf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFEVREFf_GET(r) (((r).rx2_anarxacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFEVREFf_SET(r,f) (r).rx2_anarxacontrol3[0]=(((r).rx2_anarxacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX2_ANARXACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r,(_r._rx2_anarxacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r,(_r._rx2_anarxacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX2_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r
#define RX2_ANARXACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_t RX2_ANARXACONTROL3r_t;
#define RX2_ANARXACONTROL3r_CLR BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_CLR
#define RX2_ANARXACONTROL3r_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_SET
#define RX2_ANARXACONTROL3r_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_GET
#define RX2_ANARXACONTROL3r_EN_CLK16f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_CLK16f_GET
#define RX2_ANARXACONTROL3r_EN_CLK16f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_CLK16f_SET
#define RX2_ANARXACONTROL3r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_PD_CH_P1f_GET
#define RX2_ANARXACONTROL3r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_PD_CH_P1f_SET
#define RX2_ANARXACONTROL3r_EN_VCCTRLf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_VCCTRLf_GET
#define RX2_ANARXACONTROL3r_EN_VCCTRLf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_VCCTRLf_SET
#define RX2_ANARXACONTROL3r_EN_DFECLKf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECLKf_GET
#define RX2_ANARXACONTROL3r_EN_DFECLKf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECLKf_SET
#define RX2_ANARXACONTROL3r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_HGAINf_GET
#define RX2_ANARXACONTROL3r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_HGAINf_SET
#define RX2_ANARXACONTROL3r_EN_DFECKPWRf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECKPWRf_GET
#define RX2_ANARXACONTROL3r_EN_DFECKPWRf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_EN_DFECKPWRf_SET
#define RX2_ANARXACONTROL3r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_OFFSET_PDf_GET
#define RX2_ANARXACONTROL3r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_OFFSET_PDf_SET
#define RX2_ANARXACONTROL3r_IMAX_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFETAPf_GET
#define RX2_ANARXACONTROL3r_IMAX_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFETAPf_SET
#define RX2_ANARXACONTROL3r_IMODE_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFETAPf_GET
#define RX2_ANARXACONTROL3r_IMODE_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFETAPf_SET
#define RX2_ANARXACONTROL3r_IMIN_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFETAPf_GET
#define RX2_ANARXACONTROL3r_IMIN_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFETAPf_SET
#define RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_GET
#define RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_SLCD2Cf_SET
#define RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_GET
#define RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_SLCD2Cf_SET
#define RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_GET
#define RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_SLCD2Cf_SET
#define RX2_ANARXACONTROL3r_IMAX_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFEVREFf_GET
#define RX2_ANARXACONTROL3r_IMAX_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMAX_DFEVREFf_SET
#define RX2_ANARXACONTROL3r_IMODE_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFEVREFf_GET
#define RX2_ANARXACONTROL3r_IMODE_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMODE_DFEVREFf_SET
#define RX2_ANARXACONTROL3r_IMIN_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFEVREFf_GET
#define RX2_ANARXACONTROL3r_IMIN_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r_IMIN_DFEVREFf_SET
#define READ_RX2_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_READ_RX2_ANARXACONTROL3r
#define WRITE_RX2_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_RX2_ANARXACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX2_ANARXACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXSTATUS
 * BLOCKS:   RX3
 * REGADDR:  0x80e0
 * DESC:     Rx lane status register
 * SIZE:     32
 * FIELDS:
 *     ADC_CDRSTATUS12_2_WADR_TEST 
 *     INTEG_STATUS_INTEG_STATUS 
 *     ADC_CDRSTATUS8_SIGDET 
 *     ADC_CDRSTATUS12_3_PRSTB_I66_MUX 
 *     ADC_CDRSTATUS6_PWRDN_PLL 
 *     ADC_CDRSTATUS5_RESERVED0 
 *     ADC_CDRSTATUS1_PLL_BYPASS 
 *     ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODD 
 *     PRBS_STATUS_PTBS_ERRORS 
 *     ADC_CDRSTATUS12_4_RFIFO_OVFLOW 
 *     SYNC_STATUS_RXSEQDONE 
 *     ADC_CDRSTATUS10_PRBS_STATE 
 *     ADC_CDRSTATUS2_RXSEQDONE 
 *     ADC_CDRSTATUS9_RESERVED0 
 *     RXTESTSEL_1_INTEG_MODE_SM 
 *     VCO_STATUS_VCO_STATUS 
 *     SIGDET_STATUS_RESERVED1 
 *     ADC_CDRSTATUS11_RESERVED0 
 *     ADC_CDRSTATUS3_ALLOW_INCREMENT_PC 
 *     ADC_CDRSTATUS4_RESERVED1 
 *     ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVEN 
 *     SCALE_STATUS_INTEG_SCALE_ACQ 
 *     RXTESTSEL_0_RESERVED1 
 *     ADC_CDRSTATUS12_1_RADR_TEST 
 *     ADC_CDRSTATUS8_RESERVED0 
 *     ADC_CDRSTATUS1_REFCLK 
 *     ADC_CDRSTATUS12_3_RSTB_I66 
 *     ADC_CDRSTATUS7E_EN_CDET_EVEN 
 *     ADC_CDRSTATUS2_RESERVED1 
 *     ADC_CDRSTATUS3_RESERVED1 
 *     ADC_CDRSTATUS12_4_RFIFO_UNFLOW 
 *     SYNC_STATUS_CX4_SIGDET 
 *     ADC_CDRSTATUS6_PWRDN_RX 
 *     ADC_CDRSTATUS7O_EN_CDET_ODD 
 *     ADC_CDRSTATUS7O_COMDET_ODD 
 *     RXTESTSEL_0_COMMA_ADJ_EN_EXT 
 *     ADC_CDRSTATUS12_4_RFIFO_ERROR_R 
 *     SYNC_STATUS_SATURATE_STATUS 
 *     ADC_CDRSTATUS1_RXCK_I 
 *     RXTESTSEL_1_FREQ_SEL_SM 
 *     ADC_CDRSTATUS12_3_RXCK_I66_TMUX 
 *     ADC_CDRSTATUS6_RESET_ANLG 
 *     ADC_CDRSTATUS7E_COMDET_EVEN 
 *     ADC_CDRSTATUS7E_RXCK1_EVEN 
 *     ADC_CDRSTATUS1_RXCK_TST 
 *     ADC_CDRSTATUS12_3_PRSTB_66B_MUX 
 *     SYNC_STATUS_RESERVED2 
 *     RXTESTSEL_0_COMMA_ADJ_EN 
 *     ADC_CDRSTATUS6_RX_PWRDN 
 *     ADC_CDRSTATUS7O_RXCK1_ODD 
 *     RXTESTSEL_1_FREQ_SEL_PC 
 *     ADC_CDRSTATUS3_RXSEQSTART 
 *     ADC_CDRSTATUS7E_RXCK0_EVEN 
 *     ADC_CDRSTATUS10_RESERVED1 
 *     ADC_CDRSTATUS12_3_RSTB_66B 
 *     SCALE_STATUS_PROP_SCALE_ACQ 
 *     ADC_CDRSTATUS3_RESERVED0 
 *     ADC_CDRSTATUS7O_RXCK0_ODD 
 *     ADC_CDRSTATUS1_CLOCKSWITCHSEL 
 *     ADC_CDRSTATUS4_PWRDN 
 *     RXTESTSEL_0_LINK_EN_R 
 *     RXTESTSEL_1_CDRACQDONE_R2 
 *     ADC_CDRSTATUS2_RXSEQSTART 
 *     ADC_CDRSTATUS12_4_RESERVED0 
 *     ADC_CDRSTATUS6_RX_RESET 
 *     ADC_CDRSTATUS6_RESERVED0 
 *     RXTESTSEL_0_COMMA_MASK 
 *     SYNC_STATUS_RX_SIGDET 
 *     ADC_CDRSTATUS10_RSTB_TST 
 *     ADC_CDRSTATUS12_2_RESERVED0 
 *     ADC_CDRSTATUS7E_RESERVED0 
 *     ADC_CDRSTATUS2_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RXCK_66B_TMUX 
 *     ADC_CDRSTATUS4_PLL_LOCK_RSTB 
 *     ADC_CDRSTATUS1_GLPBK_COMBO 
 *     ADC_CDRSTATUS12_1_ENABLE4 
 *     ADC_CDRSTATUS7O_RESERVED0 
 *     RXTESTSEL_1_RESERVED0 
 *     ADC_CDRSTATUS1_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RESERVED0 
 *     ADC_CDRSTATUS4_FREQ_SEL 
 *     ADC_CDRSTATUS10_PRBS_EN 
 *     ADC_CDRSTATUS2_RESERVED0 
 *     RXTESTSEL_0_RXPOL_FLIP 
 *     SYNC_STATUS_SYNC_STATUS 
 *     ADC_CDRSTATUS12_1_RESERVED0 
 *     ADC_CDRSTATUS4_RX_PWRDN 
 *     RXTESTSEL_0_RX_POLARITY 
 *     ADC_CDRSTATUS1_RESERVED0 
 *     SYNC_STATUS_MUX_COMADJ_SYNC_STATUS 
 *     ADC_CDRSTATUS10_RESERVED0 
 *     SCALE_STATUS_INTEG_SCALE 
 *     SYNC_STATUS_RXSEQSTART 
 *     SIGDET_STATUS_RX_PWRDN 
 *     RXTESTSEL_0_PCI_MODE_EN 
 *     ADC_CDRSTATUS4_RESERVED0 
 *     RXTESTSEL_0_INDCK_MODE_EN 
 *     SYNC_STATUS_RESERVED1 
 *     SIGDET_STATUS_RX_RESET 
 *     RXTESTSEL_0_RESERVED0 
 *     SYNC_STATUS_TEST_ACQ_EN 
 *     SIGDET_STATUS_CS4_SIGDET_LL 
 *     SYNC_STATUS_RESERVED0 
 *     SIGDET_STATUS_RX_SIGDET_LL 
 *     SIGDET_STATUS_RXSEQDONE 
 *     SCALE_STATUS_PROP_SCALE 
 *     SIGDET_STATUS_RESERVED0 
 *     PRBS_STATUS_PRBS_STKY 
 *     PRBS_STATUS_PRBS_LOCK 
 *     SIGDET_STATUS_CX4_SIGDET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr (0x0000e010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_s {
	uint32_t v[1];
	uint32_t rx3_anarxstatus[1];
	uint32_t _rx3_anarxstatus;
} BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_CLR(r) (r).rx3_anarxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SET(r,d) (r).rx3_anarxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_GET(r) (r).rx3_anarxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET(r) ((((r).rx3_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET(r) ((((r).rx3_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 13) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET(r) ((((r).rx3_anarxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET(r) ((((r).rx3_anarxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET(r) ((((r).rx3_anarxstatus[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET(r) ((((r).rx3_anarxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET(r) ((((r).rx3_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET(r) ((((r).rx3_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET(r) ((((r).rx3_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET(r) ((((r).rx3_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET(r) ((((r).rx3_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET(r) ((((r).rx3_anarxstatus[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET(r) ((((r).rx3_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET(r) ((((r).rx3_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET(r) ((((r).rx3_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET(r) (((r).rx3_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET(r) ((((r).rx3_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET(r) (((r).rx3_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET(r) (((r).rx3_anarxstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET(r) (((r).rx3_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET(r) (((r).rx3_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET(r) (((r).rx3_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET(r) (((r).rx3_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET(r) (((r).rx3_anarxstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET(r) (((r).rx3_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET(r) (((r).rx3_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET(r) (((r).rx3_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET(r) (((r).rx3_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET(r) (((r).rx3_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET(r) ((((r).rx3_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET(r,f) (r).rx3_anarxstatus[0]=(((r).rx3_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access RX3_ANARXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr,(_r._rx3_anarxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr,(_r._rx3_anarxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXSTATUSr BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr
#define RX3_ANARXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_t RX3_ANARXSTATUSr_t;
#define RX3_ANARXSTATUSr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_CLR
#define RX3_ANARXSTATUSr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SET
#define RX3_ANARXSTATUSr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET
#define RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET
#define RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET
#define RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET
#define RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET
#define RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET
#define RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET
#define RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET
#define RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET
#define RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET
#define RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET
#define RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET
#define RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET
#define RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET
#define RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET
#define RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET
#define RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET
#define RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET
#define RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET
#define READ_RX3_ANARXSTATUSr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXSTATUSr
#define WRITE_RX3_ANARXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXCONTROL
 * BLOCKS:   RX3
 * REGADDR:  0x80e1
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     RESERVED1        
 *     OVERRIDE_SIGDET_VAL 
 *     OVERRIDE_SIGDET_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr (0x0000e011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_s {
	uint32_t v[1];
	uint32_t rx3_anarxcontrol[1];
	uint32_t _rx3_anarxcontrol;
} BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_CLR(r) (r).rx3_anarxcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_SET(r,d) (r).rx3_anarxcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_GET(r) (r).rx3_anarxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED0f_GET(r) ((((r).rx3_anarxcontrol[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED0f_SET(r,f) (r).rx3_anarxcontrol[0]=(((r).rx3_anarxcontrol[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET(r) ((((r).rx3_anarxcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET(r,f) (r).rx3_anarxcontrol[0]=(((r).rx3_anarxcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET(r) ((((r).rx3_anarxcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET(r,f) (r).rx3_anarxcontrol[0]=(((r).rx3_anarxcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED1f_GET(r) ((((r).rx3_anarxcontrol[0]) >> 3) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED1f_SET(r,f) (r).rx3_anarxcontrol[0]=(((r).rx3_anarxcontrol[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_STATUS_SELf_GET(r) (((r).rx3_anarxcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_STATUS_SELf_SET(r,f) (r).rx3_anarxcontrol[0]=(((r).rx3_anarxcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RX3_ANARXCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr,(_r._rx3_anarxcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr,(_r._rx3_anarxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXCONTROLr BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr
#define RX3_ANARXCONTROLr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_t RX3_ANARXCONTROLr_t;
#define RX3_ANARXCONTROLr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_CLR
#define RX3_ANARXCONTROLr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_SET
#define RX3_ANARXCONTROLr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_GET
#define RX3_ANARXCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED0f_GET
#define RX3_ANARXCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED0f_SET
#define RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET
#define RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET
#define RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET
#define RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET
#define RX3_ANARXCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED1f_GET
#define RX3_ANARXCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_RESERVED1f_SET
#define RX3_ANARXCONTROLr_STATUS_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_STATUS_SELf_GET
#define RX3_ANARXCONTROLr_STATUS_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr_STATUS_SELf_SET
#define READ_RX3_ANARXCONTROLr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROLr
#define WRITE_RX3_ANARXCONTROLr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXTEST
 * BLOCKS:   RX3
 * REGADDR:  0x80e8
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     TESTMUXSELECT_SM 
 *     TPCTRL_SM        
 *     RESERVED0        
 *     SIGDET_MUX_SM    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr (0x0000e018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXTEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_s {
	uint32_t v[1];
	uint32_t rx3_anarxtest[1];
	uint32_t _rx3_anarxtest;
} BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_CLR(r) (r).rx3_anarxtest[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SET(r,d) (r).rx3_anarxtest[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_GET(r) (r).rx3_anarxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIGDET_MUX_SMf_GET(r) ((((r).rx3_anarxtest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIGDET_MUX_SMf_SET(r,f) (r).rx3_anarxtest[0]=(((r).rx3_anarxtest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_RESERVED0f_GET(r) ((((r).rx3_anarxtest[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_RESERVED0f_SET(r,f) (r).rx3_anarxtest[0]=(((r).rx3_anarxtest[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TPCTRL_SMf_GET(r) ((((r).rx3_anarxtest[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TPCTRL_SMf_SET(r,f) (r).rx3_anarxtest[0]=(((r).rx3_anarxtest[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TESTMUXSELECT_SMf_GET(r) (((r).rx3_anarxtest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TESTMUXSELECT_SMf_SET(r,f) (r).rx3_anarxtest[0]=(((r).rx3_anarxtest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RX3_ANARXTEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXTESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr,(_r._rx3_anarxtest))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXTESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr,(_r._rx3_anarxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXTESTr BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr
#define RX3_ANARXTESTr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_t RX3_ANARXTESTr_t;
#define RX3_ANARXTESTr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_CLR
#define RX3_ANARXTESTr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SET
#define RX3_ANARXTESTr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_GET
#define RX3_ANARXTESTr_SIGDET_MUX_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIGDET_MUX_SMf_GET
#define RX3_ANARXTESTr_SIGDET_MUX_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_SIGDET_MUX_SMf_SET
#define RX3_ANARXTESTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_RESERVED0f_GET
#define RX3_ANARXTESTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_RESERVED0f_SET
#define RX3_ANARXTESTr_TPCTRL_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TPCTRL_SMf_GET
#define RX3_ANARXTESTr_TPCTRL_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TPCTRL_SMf_SET
#define RX3_ANARXTESTr_TESTMUXSELECT_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TESTMUXSELECT_SMf_GET
#define RX3_ANARXTESTr_TESTMUXSELECT_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr_TESTMUXSELECT_SMf_SET
#define READ_RX3_ANARXTESTr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXTESTr
#define WRITE_RX3_ANARXTESTr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXCONTROL1G
 * BLOCKS:   RX3
 * REGADDR:  0x80e9
 * DESC:     Rx 1G Control register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     RESERVED0        
 *     COMMA_BYTE_ADJ_EN_SM 
 *     COMMA_LOW_BYTE_SM 
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr (0x0000e019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXCONTROL1G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_s {
	uint32_t v[1];
	uint32_t rx3_anarxcontrol1g[1];
	uint32_t _rx3_anarxcontrol1g;
} BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CLR(r) (r).rx3_anarxcontrol1g[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_SET(r,d) (r).rx3_anarxcontrol1g[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_GET(r) (r).rx3_anarxcontrol1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FPAT_MDf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FPAT_MDf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_STAMUXREGDISf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_STAMUXREGDISf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_TSTf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_TSTf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_EMON_ENf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_EMON_ENf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_ENf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_ENf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_ENf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_ENf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CSTRETCHf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CSTRETCHf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RESERVED0f_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RESERVED0f_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).rx3_anarxcontrol1g[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SELf_GET(r) (((r).rx3_anarxcontrol1g[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SELf_SET(r,f) (r).rx3_anarxcontrol1g[0]=(((r).rx3_anarxcontrol1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX3_ANARXCONTROL1G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr,(_r._rx3_anarxcontrol1g))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr,(_r._rx3_anarxcontrol1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr
#define RX3_ANARXCONTROL1Gr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_t RX3_ANARXCONTROL1Gr_t;
#define RX3_ANARXCONTROL1Gr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CLR
#define RX3_ANARXCONTROL1Gr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_SET
#define RX3_ANARXCONTROL1Gr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_GET
#define RX3_ANARXCONTROL1Gr_FPAT_MDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FPAT_MDf_GET
#define RX3_ANARXCONTROL1Gr_FPAT_MDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FPAT_MDf_SET
#define RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET
#define RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET
#define RX3_ANARXCONTROL1Gr_STAMUXREGDISf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_STAMUXREGDISf_GET
#define RX3_ANARXCONTROL1Gr_STAMUXREGDISf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_STAMUXREGDISf_SET
#define RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET
#define RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET
#define RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_GET
#define RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RXD_DEC_SELf_SET
#define RX3_ANARXCONTROL1Gr_CGBAD_TSTf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_TSTf_GET
#define RX3_ANARXCONTROL1Gr_CGBAD_TSTf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_TSTf_SET
#define RX3_ANARXCONTROL1Gr_EMON_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_EMON_ENf_GET
#define RX3_ANARXCONTROL1Gr_EMON_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_EMON_ENf_SET
#define RX3_ANARXCONTROL1Gr_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_ENf_GET
#define RX3_ANARXCONTROL1Gr_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_PRBS_ENf_SET
#define RX3_ANARXCONTROL1Gr_CGBAD_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_ENf_GET
#define RX3_ANARXCONTROL1Gr_CGBAD_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CGBAD_ENf_SET
#define RX3_ANARXCONTROL1Gr_CSTRETCHf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CSTRETCHf_GET
#define RX3_ANARXCONTROL1Gr_CSTRETCHf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_CSTRETCHf_SET
#define RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET
#define RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET
#define RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET
#define RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET
#define RX3_ANARXCONTROL1Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RESERVED0f_GET
#define RX3_ANARXCONTROL1Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_RESERVED0f_SET
#define RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET
#define RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET
#define RX3_ANARXCONTROL1Gr_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SELf_GET
#define RX3_ANARXCONTROL1Gr_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr_FREQ_SELf_SET
#define READ_RX3_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROL1Gr
#define WRITE_RX3_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROL1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROL1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXCONTROLPCI
 * BLOCKS:   RX3
 * REGADDR:  0x80ea
 * DESC:     Rx PCI Control register
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE_SM    
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_SM 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_SM 
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R_SM 
 *     COMMA_ADJ_EN_FORCE_SYNC_SM 
 *     COMMA_ADJ_EN_FORCE_EXT_SM 
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_R_SM 
 *     SYNC_STATUS_FORCE_SYNC_SM 
 *     COMMA_MASK_R     
 *     COMMA_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr (0x0000e01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXCONTROLPCI.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_s {
	uint32_t v[1];
	uint32_t rx3_anarxcontrolpci[1];
	uint32_t _rx3_anarxcontrolpci;
} BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_CLR(r) (r).rx3_anarxcontrolpci[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SET(r,d) (r).rx3_anarxcontrolpci[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_GET(r) (r).rx3_anarxcontrolpci[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET(r) ((((r).rx3_anarxcontrolpci[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET(r) (((r).rx3_anarxcontrolpci[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET(r,f) (r).rx3_anarxcontrolpci[0]=(((r).rx3_anarxcontrolpci[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX3_ANARXCONTROLPCI.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr,(_r._rx3_anarxcontrolpci))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr,(_r._rx3_anarxcontrolpci))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr
#define RX3_ANARXCONTROLPCIr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_t RX3_ANARXCONTROLPCIr_t;
#define RX3_ANARXCONTROLPCIr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_CLR
#define RX3_ANARXCONTROLPCIr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SET
#define RX3_ANARXCONTROLPCIr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET
#define RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET
#define RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET
#define RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET
#define RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET
#define RX3_ANARXCONTROLPCIr_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_Rf_GET
#define RX3_ANARXCONTROLPCIr_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_LINK_EN_Rf_SET
#define RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET
#define RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET
#define RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET
#define RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET
#define RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET
#define RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET
#define READ_RX3_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXCONTROLPCIr
#define WRITE_RX3_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXCONTROLPCIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXCONTROLPCIr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXASTATUS
 * BLOCKS:   RX3
 * REGADDR:  0x80eb
 * DESC:     Rx analog status register
 * SIZE:     32
 * FIELDS:
 *     VGA              
 *     RESERVED0        
 *     DFE              
 *     RX_PF            
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr (0x0000e01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXASTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_s {
	uint32_t v[1];
	uint32_t rx3_anarxastatus[1];
	uint32_t _rx3_anarxastatus;
} BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_CLR(r) (r).rx3_anarxastatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SET(r,d) (r).rx3_anarxastatus[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_GET(r) (r).rx3_anarxastatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIGDETf_GET(r) ((((r).rx3_anarxastatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIGDETf_SET(r,f) (r).rx3_anarxastatus[0]=(((r).rx3_anarxastatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RX_PFf_GET(r) ((((r).rx3_anarxastatus[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RX_PFf_SET(r,f) (r).rx3_anarxastatus[0]=(((r).rx3_anarxastatus[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_DFEf_GET(r) ((((r).rx3_anarxastatus[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_DFEf_SET(r,f) (r).rx3_anarxastatus[0]=(((r).rx3_anarxastatus[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RESERVED0f_GET(r) ((((r).rx3_anarxastatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RESERVED0f_SET(r,f) (r).rx3_anarxastatus[0]=(((r).rx3_anarxastatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_VGAf_GET(r) (((r).rx3_anarxastatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_VGAf_SET(r,f) (r).rx3_anarxastatus[0]=(((r).rx3_anarxastatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RX3_ANARXASTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr,(_r._rx3_anarxastatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr,(_r._rx3_anarxastatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXASTATUSr BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr
#define RX3_ANARXASTATUSr_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_t RX3_ANARXASTATUSr_t;
#define RX3_ANARXASTATUSr_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_CLR
#define RX3_ANARXASTATUSr_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SET
#define RX3_ANARXASTATUSr_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_GET
#define RX3_ANARXASTATUSr_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIGDETf_GET
#define RX3_ANARXASTATUSr_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_SIGDETf_SET
#define RX3_ANARXASTATUSr_RX_PFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RX_PFf_GET
#define RX3_ANARXASTATUSr_RX_PFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RX_PFf_SET
#define RX3_ANARXASTATUSr_DFEf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_DFEf_GET
#define RX3_ANARXASTATUSr_DFEf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_DFEf_SET
#define RX3_ANARXASTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RESERVED0f_GET
#define RX3_ANARXASTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_RESERVED0f_SET
#define RX3_ANARXASTATUSr_VGAf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_VGAf_GET
#define RX3_ANARXASTATUSr_VGAf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr_VGAf_SET
#define READ_RX3_ANARXASTATUSr BCMI_HYPERLITE_XGXS_READ_RX3_ANARXASTATUSr
#define WRITE_RX3_ANARXASTATUSr BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXACONTROL1
 * BLOCKS:   RX3
 * REGADDR:  0x80ec
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     OFFSET_SEL       
 *     OFFSET_CTRL      
 *     SIG_PWRDN        
 *     VDDRB_BG         
 *     TPORT_EN         
 *     REFL_RX          
 *     REFH_RX          
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_VCM         
 *     IMODE_VCM        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r (0x0000e01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_s {
	uint32_t v[1];
	uint32_t rx3_anarxacontrol1[1];
	uint32_t _rx3_anarxacontrol1;
} BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_CLR(r) (r).rx3_anarxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SET(r,d) (r).rx3_anarxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_GET(r) (r).rx3_anarxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_VCMf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_VCMf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_VCMf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_VCMf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMAX_SIGDETf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMAX_SIGDETf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_SIGDETf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_SIGDETf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_SIGDETf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_SIGDETf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFH_RXf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFH_RXf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFL_RXf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFL_RXf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_TPORT_ENf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_TPORT_ENf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_VDDRB_BGf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_VDDRB_BGf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIG_PWRDNf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIG_PWRDNf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_CTRLf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_CTRLf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_SELf_GET(r) ((((r).rx3_anarxacontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_SELf_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_RESERVED0f_GET(r) (((r).rx3_anarxacontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_RESERVED0f_SET(r,f) (r).rx3_anarxacontrol1[0]=(((r).rx3_anarxacontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX3_ANARXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r,(_r._rx3_anarxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r,(_r._rx3_anarxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r
#define RX3_ANARXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_t RX3_ANARXACONTROL1r_t;
#define RX3_ANARXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_CLR
#define RX3_ANARXACONTROL1r_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SET
#define RX3_ANARXACONTROL1r_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_GET
#define RX3_ANARXACONTROL1r_IMODE_VCMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_VCMf_GET
#define RX3_ANARXACONTROL1r_IMODE_VCMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_VCMf_SET
#define RX3_ANARXACONTROL1r_IMIN_VCMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_VCMf_GET
#define RX3_ANARXACONTROL1r_IMIN_VCMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_VCMf_SET
#define RX3_ANARXACONTROL1r_IMAX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMAX_SIGDETf_GET
#define RX3_ANARXACONTROL1r_IMAX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMAX_SIGDETf_SET
#define RX3_ANARXACONTROL1r_IMODE_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_SIGDETf_GET
#define RX3_ANARXACONTROL1r_IMODE_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMODE_SIGDETf_SET
#define RX3_ANARXACONTROL1r_IMIN_SIGDETf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_SIGDETf_GET
#define RX3_ANARXACONTROL1r_IMIN_SIGDETf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_IMIN_SIGDETf_SET
#define RX3_ANARXACONTROL1r_REFH_RXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFH_RXf_GET
#define RX3_ANARXACONTROL1r_REFH_RXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFH_RXf_SET
#define RX3_ANARXACONTROL1r_REFL_RXf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFL_RXf_GET
#define RX3_ANARXACONTROL1r_REFL_RXf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_REFL_RXf_SET
#define RX3_ANARXACONTROL1r_TPORT_ENf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_TPORT_ENf_GET
#define RX3_ANARXACONTROL1r_TPORT_ENf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_TPORT_ENf_SET
#define RX3_ANARXACONTROL1r_VDDRB_BGf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_VDDRB_BGf_GET
#define RX3_ANARXACONTROL1r_VDDRB_BGf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_VDDRB_BGf_SET
#define RX3_ANARXACONTROL1r_SIG_PWRDNf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIG_PWRDNf_GET
#define RX3_ANARXACONTROL1r_SIG_PWRDNf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_SIG_PWRDNf_SET
#define RX3_ANARXACONTROL1r_OFFSET_CTRLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_CTRLf_GET
#define RX3_ANARXACONTROL1r_OFFSET_CTRLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_CTRLf_SET
#define RX3_ANARXACONTROL1r_OFFSET_SELf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_SELf_GET
#define RX3_ANARXACONTROL1r_OFFSET_SELf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_OFFSET_SELf_SET
#define RX3_ANARXACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_RESERVED0f_GET
#define RX3_ANARXACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r_RESERVED0f_SET
#define READ_RX3_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL1r
#define WRITE_RX3_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXACONTROL2
 * BLOCKS:   RX3
 * REGADDR:  0x80ed
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMAX_VCM         
 *     IMIN_INTERP      
 *     IMODE_INTERP     
 *     IMAX_INTERP      
 *     IMIN_VGA         
 *     IMODE_VGA        
 *     IMAX_VGA         
 *     IMIN_DFESUM      
 *     IMODE_DFESUM     
 *     IMAX_DFESUM      
 *     IMIN_EQFL        
 *     IMODE_EQFL       
 *     IMAX_EQFL        
 *     IMIN_CLKBUF      
 *     IMODE_CLKBUF     
 *     IMAX_CLKBUF      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r (0x0000e01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_s {
	uint32_t v[1];
	uint32_t rx3_anarxacontrol2[1];
	uint32_t _rx3_anarxacontrol2;
} BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_CLR(r) (r).rx3_anarxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_SET(r,d) (r).rx3_anarxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_GET(r) (r).rx3_anarxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_CLKBUFf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_CLKBUFf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_CLKBUFf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_CLKBUFf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_CLKBUFf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_CLKBUFf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_EQFLf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_EQFLf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_EQFLf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_EQFLf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_EQFLf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_EQFLf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_DFESUMf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_DFESUMf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_DFESUMf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_DFESUMf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_DFESUMf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_DFESUMf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VGAf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VGAf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_VGAf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_VGAf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_VGAf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_VGAf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_INTERPf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_INTERPf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_INTERPf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_INTERPf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_INTERPf_GET(r) ((((r).rx3_anarxacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_INTERPf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VCMf_GET(r) (((r).rx3_anarxacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VCMf_SET(r,f) (r).rx3_anarxacontrol2[0]=(((r).rx3_anarxacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX3_ANARXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r,(_r._rx3_anarxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r,(_r._rx3_anarxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r
#define RX3_ANARXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_t RX3_ANARXACONTROL2r_t;
#define RX3_ANARXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_CLR
#define RX3_ANARXACONTROL2r_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_SET
#define RX3_ANARXACONTROL2r_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_GET
#define RX3_ANARXACONTROL2r_IMAX_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_CLKBUFf_GET
#define RX3_ANARXACONTROL2r_IMAX_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_CLKBUFf_SET
#define RX3_ANARXACONTROL2r_IMODE_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_CLKBUFf_GET
#define RX3_ANARXACONTROL2r_IMODE_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_CLKBUFf_SET
#define RX3_ANARXACONTROL2r_IMIN_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_CLKBUFf_GET
#define RX3_ANARXACONTROL2r_IMIN_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_CLKBUFf_SET
#define RX3_ANARXACONTROL2r_IMAX_EQFLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_EQFLf_GET
#define RX3_ANARXACONTROL2r_IMAX_EQFLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_EQFLf_SET
#define RX3_ANARXACONTROL2r_IMODE_EQFLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_EQFLf_GET
#define RX3_ANARXACONTROL2r_IMODE_EQFLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_EQFLf_SET
#define RX3_ANARXACONTROL2r_IMIN_EQFLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_EQFLf_GET
#define RX3_ANARXACONTROL2r_IMIN_EQFLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_EQFLf_SET
#define RX3_ANARXACONTROL2r_IMAX_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_DFESUMf_GET
#define RX3_ANARXACONTROL2r_IMAX_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_DFESUMf_SET
#define RX3_ANARXACONTROL2r_IMODE_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_DFESUMf_GET
#define RX3_ANARXACONTROL2r_IMODE_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_DFESUMf_SET
#define RX3_ANARXACONTROL2r_IMIN_DFESUMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_DFESUMf_GET
#define RX3_ANARXACONTROL2r_IMIN_DFESUMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_DFESUMf_SET
#define RX3_ANARXACONTROL2r_IMAX_VGAf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VGAf_GET
#define RX3_ANARXACONTROL2r_IMAX_VGAf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VGAf_SET
#define RX3_ANARXACONTROL2r_IMODE_VGAf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_VGAf_GET
#define RX3_ANARXACONTROL2r_IMODE_VGAf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_VGAf_SET
#define RX3_ANARXACONTROL2r_IMIN_VGAf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_VGAf_GET
#define RX3_ANARXACONTROL2r_IMIN_VGAf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_VGAf_SET
#define RX3_ANARXACONTROL2r_IMAX_INTERPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_INTERPf_GET
#define RX3_ANARXACONTROL2r_IMAX_INTERPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_INTERPf_SET
#define RX3_ANARXACONTROL2r_IMODE_INTERPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_INTERPf_GET
#define RX3_ANARXACONTROL2r_IMODE_INTERPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMODE_INTERPf_SET
#define RX3_ANARXACONTROL2r_IMIN_INTERPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_INTERPf_GET
#define RX3_ANARXACONTROL2r_IMIN_INTERPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMIN_INTERPf_SET
#define RX3_ANARXACONTROL2r_IMAX_VCMf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VCMf_GET
#define RX3_ANARXACONTROL2r_IMAX_VCMf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r_IMAX_VCMf_SET
#define READ_RX3_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL2r
#define WRITE_RX3_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX3_ANARXACONTROL3
 * BLOCKS:   RX3
 * REGADDR:  0x80ee
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMIN_DFEVREF     
 *     IMODE_DFEVREF    
 *     IMAX_DFEVREF     
 *     IMIN_SLCD2C      
 *     IMODE_SLCD2C     
 *     IMAX_SLCD2C      
 *     IMIN_DFETAP      
 *     IMODE_DFETAP     
 *     IMAX_DFETAP      
 *     OFFSET_PD        
 *     EN_DFECKPWR      
 *     EN_HGAIN         
 *     EN_DFECLK        
 *     EN_VCCTRL        
 *     PD_CH_P1         
 *     EN_CLK16         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r (0x0000e01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program RX3_ANARXACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_s {
	uint32_t v[1];
	uint32_t rx3_anarxacontrol3[1];
	uint32_t _rx3_anarxacontrol3;
} BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_CLR(r) (r).rx3_anarxacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_SET(r,d) (r).rx3_anarxacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_GET(r) (r).rx3_anarxacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_CLK16f_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_CLK16f_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_PD_CH_P1f_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_PD_CH_P1f_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_VCCTRLf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_VCCTRLf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECLKf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECLKf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_HGAINf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_HGAINf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECKPWRf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECKPWRf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_OFFSET_PDf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_OFFSET_PDf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFETAPf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFETAPf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFETAPf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFETAPf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFETAPf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFETAPf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFEVREFf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFEVREFf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFEVREFf_GET(r) ((((r).rx3_anarxacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFEVREFf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFEVREFf_GET(r) (((r).rx3_anarxacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFEVREFf_SET(r,f) (r).rx3_anarxacontrol3[0]=(((r).rx3_anarxacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX3_ANARXACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r,(_r._rx3_anarxacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r,(_r._rx3_anarxacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX3_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r
#define RX3_ANARXACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_t RX3_ANARXACONTROL3r_t;
#define RX3_ANARXACONTROL3r_CLR BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_CLR
#define RX3_ANARXACONTROL3r_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_SET
#define RX3_ANARXACONTROL3r_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_GET
#define RX3_ANARXACONTROL3r_EN_CLK16f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_CLK16f_GET
#define RX3_ANARXACONTROL3r_EN_CLK16f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_CLK16f_SET
#define RX3_ANARXACONTROL3r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_PD_CH_P1f_GET
#define RX3_ANARXACONTROL3r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_PD_CH_P1f_SET
#define RX3_ANARXACONTROL3r_EN_VCCTRLf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_VCCTRLf_GET
#define RX3_ANARXACONTROL3r_EN_VCCTRLf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_VCCTRLf_SET
#define RX3_ANARXACONTROL3r_EN_DFECLKf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECLKf_GET
#define RX3_ANARXACONTROL3r_EN_DFECLKf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECLKf_SET
#define RX3_ANARXACONTROL3r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_HGAINf_GET
#define RX3_ANARXACONTROL3r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_HGAINf_SET
#define RX3_ANARXACONTROL3r_EN_DFECKPWRf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECKPWRf_GET
#define RX3_ANARXACONTROL3r_EN_DFECKPWRf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_EN_DFECKPWRf_SET
#define RX3_ANARXACONTROL3r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_OFFSET_PDf_GET
#define RX3_ANARXACONTROL3r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_OFFSET_PDf_SET
#define RX3_ANARXACONTROL3r_IMAX_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFETAPf_GET
#define RX3_ANARXACONTROL3r_IMAX_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFETAPf_SET
#define RX3_ANARXACONTROL3r_IMODE_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFETAPf_GET
#define RX3_ANARXACONTROL3r_IMODE_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFETAPf_SET
#define RX3_ANARXACONTROL3r_IMIN_DFETAPf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFETAPf_GET
#define RX3_ANARXACONTROL3r_IMIN_DFETAPf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFETAPf_SET
#define RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_GET
#define RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_SLCD2Cf_SET
#define RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_GET
#define RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_SLCD2Cf_SET
#define RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_GET
#define RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_SLCD2Cf_SET
#define RX3_ANARXACONTROL3r_IMAX_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFEVREFf_GET
#define RX3_ANARXACONTROL3r_IMAX_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMAX_DFEVREFf_SET
#define RX3_ANARXACONTROL3r_IMODE_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFEVREFf_GET
#define RX3_ANARXACONTROL3r_IMODE_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMODE_DFEVREFf_SET
#define RX3_ANARXACONTROL3r_IMIN_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFEVREFf_GET
#define RX3_ANARXACONTROL3r_IMIN_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r_IMIN_DFEVREFf_SET
#define READ_RX3_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_READ_RX3_ANARXACONTROL3r
#define WRITE_RX3_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_RX3_ANARXACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX3_ANARXACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXSTATUS
 * BLOCKS:   RXB
 * REGADDR:  0x80f0
 * DESC:     Rx lane status register
 * SIZE:     32
 * FIELDS:
 *     ADC_CDRSTATUS12_2_WADR_TEST 
 *     INTEG_STATUS_INTEG_STATUS 
 *     ADC_CDRSTATUS8_SIGDET 
 *     ADC_CDRSTATUS12_3_PRSTB_I66_MUX 
 *     ADC_CDRSTATUS6_PWRDN_PLL 
 *     ADC_CDRSTATUS5_RESERVED0 
 *     ADC_CDRSTATUS1_PLL_BYPASS 
 *     ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODD 
 *     PRBS_STATUS_PTBS_ERRORS 
 *     ADC_CDRSTATUS12_4_RFIFO_OVFLOW 
 *     SYNC_STATUS_RXSEQDONE 
 *     ADC_CDRSTATUS10_PRBS_STATE 
 *     ADC_CDRSTATUS2_RXSEQDONE 
 *     ADC_CDRSTATUS9_RESERVED0 
 *     RXTESTSEL_1_INTEG_MODE_SM 
 *     VCO_STATUS_VCO_STATUS 
 *     SIGDET_STATUS_RESERVED1 
 *     ADC_CDRSTATUS11_RESERVED0 
 *     ADC_CDRSTATUS3_ALLOW_INCREMENT_PC 
 *     ADC_CDRSTATUS4_RESERVED1 
 *     ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVEN 
 *     SCALE_STATUS_INTEG_SCALE_ACQ 
 *     RXTESTSEL_0_RESERVED1 
 *     ADC_CDRSTATUS12_1_RADR_TEST 
 *     ADC_CDRSTATUS8_RESERVED0 
 *     ADC_CDRSTATUS1_REFCLK 
 *     ADC_CDRSTATUS12_3_RSTB_I66 
 *     ADC_CDRSTATUS7E_EN_CDET_EVEN 
 *     ADC_CDRSTATUS2_RESERVED1 
 *     ADC_CDRSTATUS3_RESERVED1 
 *     ADC_CDRSTATUS12_4_RFIFO_UNFLOW 
 *     SYNC_STATUS_CX4_SIGDET 
 *     ADC_CDRSTATUS6_PWRDN_RX 
 *     ADC_CDRSTATUS7O_EN_CDET_ODD 
 *     ADC_CDRSTATUS7O_COMDET_ODD 
 *     RXTESTSEL_0_COMMA_ADJ_EN_EXT 
 *     ADC_CDRSTATUS12_4_RFIFO_ERROR_R 
 *     SYNC_STATUS_SATURATE_STATUS 
 *     ADC_CDRSTATUS1_RXCK_I 
 *     RXTESTSEL_1_FREQ_SEL_SM 
 *     ADC_CDRSTATUS12_3_RXCK_I66_TMUX 
 *     ADC_CDRSTATUS6_RESET_ANLG 
 *     ADC_CDRSTATUS7E_COMDET_EVEN 
 *     ADC_CDRSTATUS7E_RXCK1_EVEN 
 *     ADC_CDRSTATUS1_RXCK_TST 
 *     ADC_CDRSTATUS12_3_PRSTB_66B_MUX 
 *     SYNC_STATUS_RESERVED2 
 *     RXTESTSEL_0_COMMA_ADJ_EN 
 *     ADC_CDRSTATUS6_RX_PWRDN 
 *     ADC_CDRSTATUS7O_RXCK1_ODD 
 *     RXTESTSEL_1_FREQ_SEL_PC 
 *     ADC_CDRSTATUS3_RXSEQSTART 
 *     ADC_CDRSTATUS7E_RXCK0_EVEN 
 *     ADC_CDRSTATUS10_RESERVED1 
 *     ADC_CDRSTATUS12_3_RSTB_66B 
 *     SCALE_STATUS_PROP_SCALE_ACQ 
 *     ADC_CDRSTATUS3_RESERVED0 
 *     ADC_CDRSTATUS7O_RXCK0_ODD 
 *     ADC_CDRSTATUS1_CLOCKSWITCHSEL 
 *     ADC_CDRSTATUS4_PWRDN 
 *     RXTESTSEL_0_LINK_EN_R 
 *     RXTESTSEL_1_CDRACQDONE_R2 
 *     ADC_CDRSTATUS2_RXSEQSTART 
 *     ADC_CDRSTATUS12_4_RESERVED0 
 *     ADC_CDRSTATUS6_RX_RESET 
 *     ADC_CDRSTATUS6_RESERVED0 
 *     RXTESTSEL_0_COMMA_MASK 
 *     SYNC_STATUS_RX_SIGDET 
 *     ADC_CDRSTATUS10_RSTB_TST 
 *     ADC_CDRSTATUS12_2_RESERVED0 
 *     ADC_CDRSTATUS7E_RESERVED0 
 *     ADC_CDRSTATUS2_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RXCK_66B_TMUX 
 *     ADC_CDRSTATUS4_PLL_LOCK_RSTB 
 *     ADC_CDRSTATUS1_GLPBK_COMBO 
 *     ADC_CDRSTATUS12_1_ENABLE4 
 *     ADC_CDRSTATUS7O_RESERVED0 
 *     RXTESTSEL_1_RESERVED0 
 *     ADC_CDRSTATUS1_RXMUXCKSEL 
 *     ADC_CDRSTATUS12_3_RESERVED0 
 *     ADC_CDRSTATUS4_FREQ_SEL 
 *     ADC_CDRSTATUS10_PRBS_EN 
 *     ADC_CDRSTATUS2_RESERVED0 
 *     RXTESTSEL_0_RXPOL_FLIP 
 *     SYNC_STATUS_SYNC_STATUS 
 *     ADC_CDRSTATUS12_1_RESERVED0 
 *     ADC_CDRSTATUS4_RX_PWRDN 
 *     RXTESTSEL_0_RX_POLARITY 
 *     ADC_CDRSTATUS1_RESERVED0 
 *     SYNC_STATUS_MUX_COMADJ_SYNC_STATUS 
 *     ADC_CDRSTATUS10_RESERVED0 
 *     SCALE_STATUS_INTEG_SCALE 
 *     SYNC_STATUS_RXSEQSTART 
 *     SIGDET_STATUS_RX_PWRDN 
 *     RXTESTSEL_0_PCI_MODE_EN 
 *     ADC_CDRSTATUS4_RESERVED0 
 *     RXTESTSEL_0_INDCK_MODE_EN 
 *     SYNC_STATUS_RESERVED1 
 *     SIGDET_STATUS_RX_RESET 
 *     RXTESTSEL_0_RESERVED0 
 *     SYNC_STATUS_TEST_ACQ_EN 
 *     SIGDET_STATUS_CS4_SIGDET_LL 
 *     SYNC_STATUS_RESERVED0 
 *     SIGDET_STATUS_RX_SIGDET_LL 
 *     SIGDET_STATUS_RXSEQDONE 
 *     SCALE_STATUS_PROP_SCALE 
 *     SIGDET_STATUS_RESERVED0 
 *     PRBS_STATUS_PRBS_STKY 
 *     PRBS_STATUS_PRBS_LOCK 
 *     SIGDET_STATUS_CX4_SIGDET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr (0x0000f010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_s {
	uint32_t v[1];
	uint32_t rxb_anarxstatus[1];
	uint32_t _rxb_anarxstatus;
} BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_CLR(r) (r).rxb_anarxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SET(r,d) (r).rxb_anarxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_GET(r) (r).rxb_anarxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET(r) ((((r).rxb_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET(r) ((((r).rxb_anarxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 13) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET(r) ((((r).rxb_anarxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET(r) ((((r).rxb_anarxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET(r) ((((r).rxb_anarxstatus[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET(r) ((((r).rxb_anarxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET(r) ((((r).rxb_anarxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET(r) ((((r).rxb_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET(r) ((((r).rxb_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET(r) ((((r).rxb_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET(r) ((((r).rxb_anarxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET(r) ((((r).rxb_anarxstatus[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET(r) ((((r).rxb_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET(r) ((((r).rxb_anarxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET(r) ((((r).rxb_anarxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET(r) (((r).rxb_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET(r) ((((r).rxb_anarxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET(r) (((r).rxb_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET(r) (((r).rxb_anarxstatus[0]) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET(r) (((r).rxb_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET(r) (((r).rxb_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET(r) (((r).rxb_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET(r) (((r).rxb_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET(r) (((r).rxb_anarxstatus[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET(r) (((r).rxb_anarxstatus[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET(r) (((r).rxb_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET(r) (((r).rxb_anarxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET(r) (((r).rxb_anarxstatus[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET(r) (((r).rxb_anarxstatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET(r) ((((r).rxb_anarxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET(r,f) (r).rxb_anarxstatus[0]=(((r).rxb_anarxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access RXB_ANARXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr,(_r._rxb_anarxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr,(_r._rxb_anarxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXSTATUSr BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr
#define RXB_ANARXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_t RXB_ANARXSTATUSr_t;
#define RXB_ANARXSTATUSr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_CLR
#define RXB_ANARXSTATUSr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SET
#define RXB_ANARXSTATUSr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESERVED0f_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED0f_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED0f_SET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_GET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_LOCKf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CX4_SIGDETf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED0f_SET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_GET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PRBS_STKYf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RXSEQDONEf_SET
#define RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_GET
#define RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALEf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_SIGDET_LLf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_TEST_ACQ_ENf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_CS4_SIGDET_LLf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_RESETf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_MASKf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RX_SIGDETf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RSTB_TSTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXMUXCKSELf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_66B_TMUXf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PLL_LOCK_RSTBf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_GLPBK_COMBOf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_ENABLE4f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RESERVED0f_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXMUXCKSELf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_FREQ_SELf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_ENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED0f_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RXPOL_FLIPf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SYNC_STATUSf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RX_PWRDNf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RX_POLARITYf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RESERVED0f_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_MUX_COMADJ_SYNC_STATUSf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED0f_SET
#define RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_GET
#define RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALEf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQSTARTf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RX_PWRDNf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_PCI_MODE_ENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED0f_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_INDCK_MODE_ENf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_2_WADR_TESTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK0_EVENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_66Bf_SET
#define RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_GET
#define RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_PROP_SCALE_ACQf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK0_ODDf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_CLOCKSWITCHSELf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_PWRDNf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_LINK_EN_Rf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_CDRACQDONE_R2f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQSTARTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_RESETf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_RXCK1_EVENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_ERROR_Rf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RESERVED2f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_TSTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_66B_MUXf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_ENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RX_PWRDNf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_RXCK1_ODDf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_PCf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RXSEQSTARTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMDET_ODDf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_SATURATE_STATUSf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_RXCK_If_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMDET_EVENf_SET
#define RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_GET
#define RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_INTEG_STATUS_INTEG_STATUSf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_COMMA_ADJ_EN_EXTf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_FREQ_SEL_SMf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RXCK_I66_TMUXf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_RESET_ANLGf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_SIGDETf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_PRSTB_I66_MUXf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_PLLf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS5_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_PLL_BYPASSf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_COMMA_ADJ_EN_ODDf_SET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_GET
#define RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_PRBS_STATUS_PTBS_ERRORSf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_OVFLOWf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_RXSEQDONEf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS10_PRBS_STATEf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RXSEQDONEf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS9_RESERVED0f_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_1_INTEG_MODE_SMf_SET
#define RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_GET
#define RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_VCO_STATUS_VCO_STATUSf_SET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_GET
#define RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SIGDET_STATUS_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS11_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_ALLOW_INCREMENT_PCf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS4_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_COMMA_ADJ_EN_EVENf_SET
#define RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_GET
#define RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SCALE_STATUS_INTEG_SCALE_ACQf_SET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_GET
#define RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_RXTESTSEL_0_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_1_RADR_TESTf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS8_RESERVED0f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS1_REFCLKf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_3_RSTB_I66f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7E_EN_CDET_EVENf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS2_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS3_RESERVED1f_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS12_4_RFIFO_UNFLOWf_SET
#define RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_GET
#define RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_SYNC_STATUS_CX4_SIGDETf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS6_PWRDN_RXf_SET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_GET
#define RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr_ADC_CDRSTATUS7O_EN_CDET_ODDf_SET
#define READ_RXB_ANARXSTATUSr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXSTATUSr
#define WRITE_RXB_ANARXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXCONTROL
 * BLOCKS:   RXB
 * REGADDR:  0x80f1
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     RESERVED1        
 *     OVERRIDE_SIGDET_VAL 
 *     OVERRIDE_SIGDET_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr (0x0000f011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_s {
	uint32_t v[1];
	uint32_t rxb_anarxcontrol[1];
	uint32_t _rxb_anarxcontrol;
} BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_CLR(r) (r).rxb_anarxcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_SET(r,d) (r).rxb_anarxcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_GET(r) (r).rxb_anarxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED0f_GET(r) ((((r).rxb_anarxcontrol[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED0f_SET(r,f) (r).rxb_anarxcontrol[0]=(((r).rxb_anarxcontrol[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET(r) ((((r).rxb_anarxcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET(r,f) (r).rxb_anarxcontrol[0]=(((r).rxb_anarxcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET(r) ((((r).rxb_anarxcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET(r,f) (r).rxb_anarxcontrol[0]=(((r).rxb_anarxcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED1f_GET(r) ((((r).rxb_anarxcontrol[0]) >> 3) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED1f_SET(r,f) (r).rxb_anarxcontrol[0]=(((r).rxb_anarxcontrol[0] & ~((uint32_t)0x1f << 3)) | ((((uint32_t)f) & 0x1f) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_STATUS_SELf_GET(r) (((r).rxb_anarxcontrol[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_STATUS_SELf_SET(r,f) (r).rxb_anarxcontrol[0]=(((r).rxb_anarxcontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RXB_ANARXCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr,(_r._rxb_anarxcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr,(_r._rxb_anarxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXCONTROLr BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr
#define RXB_ANARXCONTROLr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_t RXB_ANARXCONTROLr_t;
#define RXB_ANARXCONTROLr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_CLR
#define RXB_ANARXCONTROLr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_SET
#define RXB_ANARXCONTROLr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_GET
#define RXB_ANARXCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED0f_GET
#define RXB_ANARXCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED0f_SET
#define RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_GET
#define RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_ENf_SET
#define RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_GET
#define RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_OVERRIDE_SIGDET_VALf_SET
#define RXB_ANARXCONTROLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED1f_GET
#define RXB_ANARXCONTROLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_RESERVED1f_SET
#define RXB_ANARXCONTROLr_STATUS_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_STATUS_SELf_GET
#define RXB_ANARXCONTROLr_STATUS_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr_STATUS_SELf_SET
#define READ_RXB_ANARXCONTROLr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROLr
#define WRITE_RXB_ANARXCONTROLr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXTEST
 * BLOCKS:   RXB
 * REGADDR:  0x80f8
 * DESC:     Rx lane control register
 * SIZE:     32
 * FIELDS:
 *     TESTMUXSELECT_SM 
 *     TPCTRL_SM        
 *     RESERVED0        
 *     SIGDET_MUX_SM    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr (0x0000f018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXTEST.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_s {
	uint32_t v[1];
	uint32_t rxb_anarxtest[1];
	uint32_t _rxb_anarxtest;
} BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_CLR(r) (r).rxb_anarxtest[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SET(r,d) (r).rxb_anarxtest[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_GET(r) (r).rxb_anarxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIGDET_MUX_SMf_GET(r) ((((r).rxb_anarxtest[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIGDET_MUX_SMf_SET(r,f) (r).rxb_anarxtest[0]=(((r).rxb_anarxtest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_RESERVED0f_GET(r) ((((r).rxb_anarxtest[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_RESERVED0f_SET(r,f) (r).rxb_anarxtest[0]=(((r).rxb_anarxtest[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TPCTRL_SMf_GET(r) ((((r).rxb_anarxtest[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TPCTRL_SMf_SET(r,f) (r).rxb_anarxtest[0]=(((r).rxb_anarxtest[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TESTMUXSELECT_SMf_GET(r) (((r).rxb_anarxtest[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TESTMUXSELECT_SMf_SET(r,f) (r).rxb_anarxtest[0]=(((r).rxb_anarxtest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RXB_ANARXTEST.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXTESTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr,(_r._rxb_anarxtest))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXTESTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr,(_r._rxb_anarxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXTESTr BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr
#define RXB_ANARXTESTr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_t RXB_ANARXTESTr_t;
#define RXB_ANARXTESTr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_CLR
#define RXB_ANARXTESTr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SET
#define RXB_ANARXTESTr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_GET
#define RXB_ANARXTESTr_SIGDET_MUX_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIGDET_MUX_SMf_GET
#define RXB_ANARXTESTr_SIGDET_MUX_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_SIGDET_MUX_SMf_SET
#define RXB_ANARXTESTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_RESERVED0f_GET
#define RXB_ANARXTESTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_RESERVED0f_SET
#define RXB_ANARXTESTr_TPCTRL_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TPCTRL_SMf_GET
#define RXB_ANARXTESTr_TPCTRL_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TPCTRL_SMf_SET
#define RXB_ANARXTESTr_TESTMUXSELECT_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TESTMUXSELECT_SMf_GET
#define RXB_ANARXTESTr_TESTMUXSELECT_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr_TESTMUXSELECT_SMf_SET
#define READ_RXB_ANARXTESTr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXTESTr
#define WRITE_RXB_ANARXTESTr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXCONTROL1G
 * BLOCKS:   RXB
 * REGADDR:  0x80f9
 * DESC:     Rx 1G Control register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     RESERVED0        
 *     COMMA_BYTE_ADJ_EN_SM 
 *     COMMA_LOW_BYTE_SM 
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr (0x0000f019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXCONTROL1G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_s {
	uint32_t v[1];
	uint32_t rxb_anarxcontrol1g[1];
	uint32_t _rxb_anarxcontrol1g;
} BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CLR(r) (r).rxb_anarxcontrol1g[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_SET(r,d) (r).rxb_anarxcontrol1g[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_GET(r) (r).rxb_anarxcontrol1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FPAT_MDf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FPAT_MDf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_STAMUXREGDISf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_STAMUXREGDISf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_TSTf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_TSTf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_EMON_ENf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_EMON_ENf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_ENf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_ENf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_ENf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_ENf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CSTRETCHf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CSTRETCHf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RESERVED0f_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RESERVED0f_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).rxb_anarxcontrol1g[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SELf_GET(r) (((r).rxb_anarxcontrol1g[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SELf_SET(r,f) (r).rxb_anarxcontrol1g[0]=(((r).rxb_anarxcontrol1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RXB_ANARXCONTROL1G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr,(_r._rxb_anarxcontrol1g))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROL1Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr,(_r._rxb_anarxcontrol1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr
#define RXB_ANARXCONTROL1Gr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_t RXB_ANARXCONTROL1Gr_t;
#define RXB_ANARXCONTROL1Gr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CLR
#define RXB_ANARXCONTROL1Gr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_SET
#define RXB_ANARXCONTROL1Gr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_GET
#define RXB_ANARXCONTROL1Gr_FPAT_MDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FPAT_MDf_GET
#define RXB_ANARXCONTROL1Gr_FPAT_MDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FPAT_MDf_SET
#define RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_GET
#define RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PKT_COUNT_ENf_SET
#define RXB_ANARXCONTROL1Gr_STAMUXREGDISf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_STAMUXREGDISf_GET
#define RXB_ANARXCONTROL1Gr_STAMUXREGDISf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_STAMUXREGDISf_SET
#define RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_GET
#define RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_CLR_DISf_SET
#define RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_GET
#define RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RXD_DEC_SELf_SET
#define RXB_ANARXCONTROL1Gr_CGBAD_TSTf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_TSTf_GET
#define RXB_ANARXCONTROL1Gr_CGBAD_TSTf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_TSTf_SET
#define RXB_ANARXCONTROL1Gr_EMON_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_EMON_ENf_GET
#define RXB_ANARXCONTROL1Gr_EMON_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_EMON_ENf_SET
#define RXB_ANARXCONTROL1Gr_PRBS_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_ENf_GET
#define RXB_ANARXCONTROL1Gr_PRBS_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_PRBS_ENf_SET
#define RXB_ANARXCONTROL1Gr_CGBAD_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_ENf_GET
#define RXB_ANARXCONTROL1Gr_CGBAD_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CGBAD_ENf_SET
#define RXB_ANARXCONTROL1Gr_CSTRETCHf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CSTRETCHf_GET
#define RXB_ANARXCONTROL1Gr_CSTRETCHf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_CSTRETCHf_SET
#define RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_GET
#define RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_LOW_BYTE_SMf_SET
#define RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_GET
#define RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_COMMA_BYTE_ADJ_EN_SMf_SET
#define RXB_ANARXCONTROL1Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RESERVED0f_GET
#define RXB_ANARXCONTROL1Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_RESERVED0f_SET
#define RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_GET
#define RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SEL_FORCEf_SET
#define RXB_ANARXCONTROL1Gr_FREQ_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SELf_GET
#define RXB_ANARXCONTROL1Gr_FREQ_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr_FREQ_SELf_SET
#define READ_RXB_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROL1Gr
#define WRITE_RXB_ANARXCONTROL1Gr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROL1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROL1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXCONTROLPCI
 * BLOCKS:   RXB
 * REGADDR:  0x80fa
 * DESC:     Rx PCI Control register
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE_SM    
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_SM 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_SM 
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R_SM 
 *     COMMA_ADJ_EN_FORCE_SYNC_SM 
 *     COMMA_ADJ_EN_FORCE_EXT_SM 
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_R_SM 
 *     SYNC_STATUS_FORCE_SYNC_SM 
 *     COMMA_MASK_R     
 *     COMMA_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr (0x0000f01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXCONTROLPCI.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_s {
	uint32_t v[1];
	uint32_t rxb_anarxcontrolpci[1];
	uint32_t _rxb_anarxcontrolpci;
} BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_CLR(r) (r).rxb_anarxcontrolpci[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SET(r,d) (r).rxb_anarxcontrolpci[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_GET(r) (r).rxb_anarxcontrolpci[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET(r) ((((r).rxb_anarxcontrolpci[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET(r) (((r).rxb_anarxcontrolpci[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET(r,f) (r).rxb_anarxcontrolpci[0]=(((r).rxb_anarxcontrolpci[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RXB_ANARXCONTROLPCI.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr,(_r._rxb_anarxcontrolpci))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROLPCIr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr,(_r._rxb_anarxcontrolpci))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr
#define RXB_ANARXCONTROLPCIr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_t RXB_ANARXCONTROLPCIr_t;
#define RXB_ANARXCONTROLPCIr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_CLR
#define RXB_ANARXCONTROLPCIr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SET
#define RXB_ANARXCONTROLPCIr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_SYNC_SELf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_FORCE_Rf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_MASK_Rf_SET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_GET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_SYNC_SMf_SET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_GET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_R_SMf_SET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_GET
#define RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_SYNC_STATUS_FORCE_Rf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_EXT_SMf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_SYNC_SMf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_FORCE_R_SMf_SET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_GET
#define RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_COMMA_ADJ_EN_Rf_SET
#define RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_GET
#define RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_FORCE_SMf_SET
#define RXB_ANARXCONTROLPCIr_LINK_EN_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_Rf_GET
#define RXB_ANARXCONTROLPCIr_LINK_EN_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_LINK_EN_Rf_SET
#define RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_GET
#define RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_FORCE_SMf_SET
#define RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_GET
#define RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_RX_POLARITY_Rf_SET
#define RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_GET
#define RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr_INTEG_MODE_SMf_SET
#define READ_RXB_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXCONTROLPCIr
#define WRITE_RXB_ANARXCONTROLPCIr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXCONTROLPCIr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXCONTROLPCIr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXASTATUS
 * BLOCKS:   RXB
 * REGADDR:  0x80fb
 * DESC:     Rx analog status register
 * SIZE:     32
 * FIELDS:
 *     VGA              
 *     RESERVED0        
 *     DFE              
 *     RX_PF            
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr (0x0000f01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXASTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_s {
	uint32_t v[1];
	uint32_t rxb_anarxastatus[1];
	uint32_t _rxb_anarxastatus;
} BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_CLR(r) (r).rxb_anarxastatus[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SET(r,d) (r).rxb_anarxastatus[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_GET(r) (r).rxb_anarxastatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIGDETf_GET(r) ((((r).rxb_anarxastatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIGDETf_SET(r,f) (r).rxb_anarxastatus[0]=(((r).rxb_anarxastatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RX_PFf_GET(r) ((((r).rxb_anarxastatus[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RX_PFf_SET(r,f) (r).rxb_anarxastatus[0]=(((r).rxb_anarxastatus[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_DFEf_GET(r) ((((r).rxb_anarxastatus[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_DFEf_SET(r,f) (r).rxb_anarxastatus[0]=(((r).rxb_anarxastatus[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RESERVED0f_GET(r) ((((r).rxb_anarxastatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RESERVED0f_SET(r,f) (r).rxb_anarxastatus[0]=(((r).rxb_anarxastatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_VGAf_GET(r) (((r).rxb_anarxastatus[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_VGAf_SET(r,f) (r).rxb_anarxastatus[0]=(((r).rxb_anarxastatus[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RXB_ANARXASTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr,(_r._rxb_anarxastatus))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXASTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr,(_r._rxb_anarxastatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXASTATUSr BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr
#define RXB_ANARXASTATUSr_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_t RXB_ANARXASTATUSr_t;
#define RXB_ANARXASTATUSr_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_CLR
#define RXB_ANARXASTATUSr_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SET
#define RXB_ANARXASTATUSr_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_GET
#define RXB_ANARXASTATUSr_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIGDETf_GET
#define RXB_ANARXASTATUSr_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_SIGDETf_SET
#define RXB_ANARXASTATUSr_RX_PFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RX_PFf_GET
#define RXB_ANARXASTATUSr_RX_PFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RX_PFf_SET
#define RXB_ANARXASTATUSr_DFEf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_DFEf_GET
#define RXB_ANARXASTATUSr_DFEf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_DFEf_SET
#define RXB_ANARXASTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RESERVED0f_GET
#define RXB_ANARXASTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_RESERVED0f_SET
#define RXB_ANARXASTATUSr_VGAf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_VGAf_GET
#define RXB_ANARXASTATUSr_VGAf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr_VGAf_SET
#define READ_RXB_ANARXASTATUSr BCMI_HYPERLITE_XGXS_READ_RXB_ANARXASTATUSr
#define WRITE_RXB_ANARXASTATUSr BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXACONTROL1
 * BLOCKS:   RXB
 * REGADDR:  0x80fc
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     OFFSET_SEL       
 *     OFFSET_CTRL      
 *     SIG_PWRDN        
 *     VDDRB_BG         
 *     TPORT_EN         
 *     REFL_RX          
 *     REFH_RX          
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_VCM         
 *     IMODE_VCM        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r (0x0000f01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXACONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_s {
	uint32_t v[1];
	uint32_t rxb_anarxacontrol1[1];
	uint32_t _rxb_anarxacontrol1;
} BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_CLR(r) (r).rxb_anarxacontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SET(r,d) (r).rxb_anarxacontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_GET(r) (r).rxb_anarxacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_VCMf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_VCMf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_VCMf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_VCMf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMAX_SIGDETf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMAX_SIGDETf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_SIGDETf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_SIGDETf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_SIGDETf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_SIGDETf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFH_RXf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFH_RXf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFL_RXf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFL_RXf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_TPORT_ENf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_TPORT_ENf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_VDDRB_BGf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_VDDRB_BGf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIG_PWRDNf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIG_PWRDNf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_CTRLf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_CTRLf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_SELf_GET(r) ((((r).rxb_anarxacontrol1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_SELf_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_RESERVED0f_GET(r) (((r).rxb_anarxacontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_RESERVED0f_SET(r,f) (r).rxb_anarxacontrol1[0]=(((r).rxb_anarxacontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RXB_ANARXACONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r,(_r._rxb_anarxacontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r,(_r._rxb_anarxacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r
#define RXB_ANARXACONTROL1r_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_t RXB_ANARXACONTROL1r_t;
#define RXB_ANARXACONTROL1r_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_CLR
#define RXB_ANARXACONTROL1r_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SET
#define RXB_ANARXACONTROL1r_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_GET
#define RXB_ANARXACONTROL1r_IMODE_VCMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_VCMf_GET
#define RXB_ANARXACONTROL1r_IMODE_VCMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_VCMf_SET
#define RXB_ANARXACONTROL1r_IMIN_VCMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_VCMf_GET
#define RXB_ANARXACONTROL1r_IMIN_VCMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_VCMf_SET
#define RXB_ANARXACONTROL1r_IMAX_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMAX_SIGDETf_GET
#define RXB_ANARXACONTROL1r_IMAX_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMAX_SIGDETf_SET
#define RXB_ANARXACONTROL1r_IMODE_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_SIGDETf_GET
#define RXB_ANARXACONTROL1r_IMODE_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMODE_SIGDETf_SET
#define RXB_ANARXACONTROL1r_IMIN_SIGDETf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_SIGDETf_GET
#define RXB_ANARXACONTROL1r_IMIN_SIGDETf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_IMIN_SIGDETf_SET
#define RXB_ANARXACONTROL1r_REFH_RXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFH_RXf_GET
#define RXB_ANARXACONTROL1r_REFH_RXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFH_RXf_SET
#define RXB_ANARXACONTROL1r_REFL_RXf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFL_RXf_GET
#define RXB_ANARXACONTROL1r_REFL_RXf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_REFL_RXf_SET
#define RXB_ANARXACONTROL1r_TPORT_ENf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_TPORT_ENf_GET
#define RXB_ANARXACONTROL1r_TPORT_ENf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_TPORT_ENf_SET
#define RXB_ANARXACONTROL1r_VDDRB_BGf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_VDDRB_BGf_GET
#define RXB_ANARXACONTROL1r_VDDRB_BGf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_VDDRB_BGf_SET
#define RXB_ANARXACONTROL1r_SIG_PWRDNf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIG_PWRDNf_GET
#define RXB_ANARXACONTROL1r_SIG_PWRDNf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_SIG_PWRDNf_SET
#define RXB_ANARXACONTROL1r_OFFSET_CTRLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_CTRLf_GET
#define RXB_ANARXACONTROL1r_OFFSET_CTRLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_CTRLf_SET
#define RXB_ANARXACONTROL1r_OFFSET_SELf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_SELf_GET
#define RXB_ANARXACONTROL1r_OFFSET_SELf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_OFFSET_SELf_SET
#define RXB_ANARXACONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_RESERVED0f_GET
#define RXB_ANARXACONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r_RESERVED0f_SET
#define READ_RXB_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL1r
#define WRITE_RXB_ANARXACONTROL1r BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXACONTROL2
 * BLOCKS:   RXB
 * REGADDR:  0x80fd
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMAX_VCM         
 *     IMIN_INTERP      
 *     IMODE_INTERP     
 *     IMAX_INTERP      
 *     IMIN_VGA         
 *     IMODE_VGA        
 *     IMAX_VGA         
 *     IMIN_DFESUM      
 *     IMODE_DFESUM     
 *     IMAX_DFESUM      
 *     IMIN_EQFL        
 *     IMODE_EQFL       
 *     IMAX_EQFL        
 *     IMIN_CLKBUF      
 *     IMODE_CLKBUF     
 *     IMAX_CLKBUF      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r (0x0000f01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXACONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_s {
	uint32_t v[1];
	uint32_t rxb_anarxacontrol2[1];
	uint32_t _rxb_anarxacontrol2;
} BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_CLR(r) (r).rxb_anarxacontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_SET(r,d) (r).rxb_anarxacontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_GET(r) (r).rxb_anarxacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_CLKBUFf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_CLKBUFf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_CLKBUFf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_CLKBUFf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_CLKBUFf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_CLKBUFf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_EQFLf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_EQFLf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_EQFLf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_EQFLf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_EQFLf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_EQFLf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_DFESUMf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_DFESUMf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_DFESUMf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_DFESUMf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_DFESUMf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_DFESUMf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VGAf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VGAf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_VGAf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_VGAf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_VGAf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_VGAf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_INTERPf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_INTERPf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_INTERPf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_INTERPf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_INTERPf_GET(r) ((((r).rxb_anarxacontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_INTERPf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VCMf_GET(r) (((r).rxb_anarxacontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VCMf_SET(r,f) (r).rxb_anarxacontrol2[0]=(((r).rxb_anarxacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RXB_ANARXACONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r,(_r._rxb_anarxacontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r,(_r._rxb_anarxacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r
#define RXB_ANARXACONTROL2r_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_t RXB_ANARXACONTROL2r_t;
#define RXB_ANARXACONTROL2r_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_CLR
#define RXB_ANARXACONTROL2r_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_SET
#define RXB_ANARXACONTROL2r_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_GET
#define RXB_ANARXACONTROL2r_IMAX_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_CLKBUFf_GET
#define RXB_ANARXACONTROL2r_IMAX_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_CLKBUFf_SET
#define RXB_ANARXACONTROL2r_IMODE_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_CLKBUFf_GET
#define RXB_ANARXACONTROL2r_IMODE_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_CLKBUFf_SET
#define RXB_ANARXACONTROL2r_IMIN_CLKBUFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_CLKBUFf_GET
#define RXB_ANARXACONTROL2r_IMIN_CLKBUFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_CLKBUFf_SET
#define RXB_ANARXACONTROL2r_IMAX_EQFLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_EQFLf_GET
#define RXB_ANARXACONTROL2r_IMAX_EQFLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_EQFLf_SET
#define RXB_ANARXACONTROL2r_IMODE_EQFLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_EQFLf_GET
#define RXB_ANARXACONTROL2r_IMODE_EQFLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_EQFLf_SET
#define RXB_ANARXACONTROL2r_IMIN_EQFLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_EQFLf_GET
#define RXB_ANARXACONTROL2r_IMIN_EQFLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_EQFLf_SET
#define RXB_ANARXACONTROL2r_IMAX_DFESUMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_DFESUMf_GET
#define RXB_ANARXACONTROL2r_IMAX_DFESUMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_DFESUMf_SET
#define RXB_ANARXACONTROL2r_IMODE_DFESUMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_DFESUMf_GET
#define RXB_ANARXACONTROL2r_IMODE_DFESUMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_DFESUMf_SET
#define RXB_ANARXACONTROL2r_IMIN_DFESUMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_DFESUMf_GET
#define RXB_ANARXACONTROL2r_IMIN_DFESUMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_DFESUMf_SET
#define RXB_ANARXACONTROL2r_IMAX_VGAf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VGAf_GET
#define RXB_ANARXACONTROL2r_IMAX_VGAf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VGAf_SET
#define RXB_ANARXACONTROL2r_IMODE_VGAf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_VGAf_GET
#define RXB_ANARXACONTROL2r_IMODE_VGAf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_VGAf_SET
#define RXB_ANARXACONTROL2r_IMIN_VGAf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_VGAf_GET
#define RXB_ANARXACONTROL2r_IMIN_VGAf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_VGAf_SET
#define RXB_ANARXACONTROL2r_IMAX_INTERPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_INTERPf_GET
#define RXB_ANARXACONTROL2r_IMAX_INTERPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_INTERPf_SET
#define RXB_ANARXACONTROL2r_IMODE_INTERPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_INTERPf_GET
#define RXB_ANARXACONTROL2r_IMODE_INTERPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMODE_INTERPf_SET
#define RXB_ANARXACONTROL2r_IMIN_INTERPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_INTERPf_GET
#define RXB_ANARXACONTROL2r_IMIN_INTERPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMIN_INTERPf_SET
#define RXB_ANARXACONTROL2r_IMAX_VCMf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VCMf_GET
#define RXB_ANARXACONTROL2r_IMAX_VCMf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r_IMAX_VCMf_SET
#define READ_RXB_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL2r
#define WRITE_RXB_ANARXACONTROL2r BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXB_ANARXACONTROL3
 * BLOCKS:   RXB
 * REGADDR:  0x80fe
 * DESC:     Rx reserved analog control register
 * SIZE:     32
 * FIELDS:
 *     IMIN_DFEVREF     
 *     IMODE_DFEVREF    
 *     IMAX_DFEVREF     
 *     IMIN_SLCD2C      
 *     IMODE_SLCD2C     
 *     IMAX_SLCD2C      
 *     IMIN_DFETAP      
 *     IMODE_DFETAP     
 *     IMAX_DFETAP      
 *     OFFSET_PD        
 *     EN_DFECKPWR      
 *     EN_HGAIN         
 *     EN_DFECLK        
 *     EN_VCCTRL        
 *     PD_CH_P1         
 *     EN_CLK16         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r (0x0000f01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program RXB_ANARXACONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_s {
	uint32_t v[1];
	uint32_t rxb_anarxacontrol3[1];
	uint32_t _rxb_anarxacontrol3;
} BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_CLR(r) (r).rxb_anarxacontrol3[0] = 0
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_SET(r,d) (r).rxb_anarxacontrol3[0] = d
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_GET(r) (r).rxb_anarxacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_CLK16f_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_CLK16f_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_PD_CH_P1f_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_PD_CH_P1f_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_VCCTRLf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_VCCTRLf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECLKf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECLKf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_HGAINf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_HGAINf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECKPWRf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECKPWRf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_OFFSET_PDf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_OFFSET_PDf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFETAPf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFETAPf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFETAPf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFETAPf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFETAPf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFETAPf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFEVREFf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFEVREFf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFEVREFf_GET(r) ((((r).rxb_anarxacontrol3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFEVREFf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFEVREFf_GET(r) (((r).rxb_anarxacontrol3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFEVREFf_SET(r,f) (r).rxb_anarxacontrol3[0]=(((r).rxb_anarxacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RXB_ANARXACONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r,(_r._rxb_anarxacontrol3))
#define BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r,(_r._rxb_anarxacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXB_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r
#define RXB_ANARXACONTROL3r_SIZE BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_t RXB_ANARXACONTROL3r_t;
#define RXB_ANARXACONTROL3r_CLR BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_CLR
#define RXB_ANARXACONTROL3r_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_SET
#define RXB_ANARXACONTROL3r_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_GET
#define RXB_ANARXACONTROL3r_EN_CLK16f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_CLK16f_GET
#define RXB_ANARXACONTROL3r_EN_CLK16f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_CLK16f_SET
#define RXB_ANARXACONTROL3r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_PD_CH_P1f_GET
#define RXB_ANARXACONTROL3r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_PD_CH_P1f_SET
#define RXB_ANARXACONTROL3r_EN_VCCTRLf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_VCCTRLf_GET
#define RXB_ANARXACONTROL3r_EN_VCCTRLf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_VCCTRLf_SET
#define RXB_ANARXACONTROL3r_EN_DFECLKf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECLKf_GET
#define RXB_ANARXACONTROL3r_EN_DFECLKf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECLKf_SET
#define RXB_ANARXACONTROL3r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_HGAINf_GET
#define RXB_ANARXACONTROL3r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_HGAINf_SET
#define RXB_ANARXACONTROL3r_EN_DFECKPWRf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECKPWRf_GET
#define RXB_ANARXACONTROL3r_EN_DFECKPWRf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_EN_DFECKPWRf_SET
#define RXB_ANARXACONTROL3r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_OFFSET_PDf_GET
#define RXB_ANARXACONTROL3r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_OFFSET_PDf_SET
#define RXB_ANARXACONTROL3r_IMAX_DFETAPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFETAPf_GET
#define RXB_ANARXACONTROL3r_IMAX_DFETAPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFETAPf_SET
#define RXB_ANARXACONTROL3r_IMODE_DFETAPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFETAPf_GET
#define RXB_ANARXACONTROL3r_IMODE_DFETAPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFETAPf_SET
#define RXB_ANARXACONTROL3r_IMIN_DFETAPf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFETAPf_GET
#define RXB_ANARXACONTROL3r_IMIN_DFETAPf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFETAPf_SET
#define RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_GET
#define RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_SLCD2Cf_SET
#define RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_GET
#define RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_SLCD2Cf_SET
#define RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_GET
#define RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_SLCD2Cf_SET
#define RXB_ANARXACONTROL3r_IMAX_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFEVREFf_GET
#define RXB_ANARXACONTROL3r_IMAX_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMAX_DFEVREFf_SET
#define RXB_ANARXACONTROL3r_IMODE_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFEVREFf_GET
#define RXB_ANARXACONTROL3r_IMODE_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMODE_DFEVREFf_SET
#define RXB_ANARXACONTROL3r_IMIN_DFEVREFf_GET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFEVREFf_GET
#define RXB_ANARXACONTROL3r_IMIN_DFEVREFf_SET BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r_IMIN_DFEVREFf_SET
#define READ_RXB_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_READ_RXB_ANARXACONTROL3r
#define WRITE_RXB_ANARXACONTROL3r BCMI_HYPERLITE_XGXS_WRITE_RXB_ANARXACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXB_ANARXACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXLNSWAP
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8100
 * DESC:     Receiver lane swap control register
 * SIZE:     32
 * FIELDS:
 *     RX_LNSWAP_FORCE3 
 *     RX_LNSWAP_FORCE2 
 *     RX_LNSWAP_FORCE1 
 *     RX_LNSWAP_FORCE0 
 *     Q3_MSB           
 *     Q2_MSB           
 *     Q1_MSB           
 *     Q0_MSB           
 *     RX_LNSWAP_LINK_EN 
 *     QSET_PROG_EN     
 *     RX_LNSWAP_FORCE_EN 
 *     RX_LNSWAP_EN     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr (0x00010010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_SIZE 4

/*
 * This structure should be used to declare and program RXLNSWAP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXLNSWAPr_s {
	uint32_t v[1];
	uint32_t rxlnswap[1];
	uint32_t _rxlnswap;
} BCMI_HYPERLITE_XGXS_RXLNSWAPr_t;

#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_CLR(r) (r).rxlnswap[0] = 0
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_SET(r,d) (r).rxlnswap[0] = d
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_GET(r) (r).rxlnswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_ENf_GET(r) ((((r).rxlnswap[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET(r) ((((r).rxlnswap[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_QSET_PROG_ENf_GET(r) ((((r).rxlnswap[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_QSET_PROG_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET(r) ((((r).rxlnswap[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q0_MSBf_GET(r) ((((r).rxlnswap[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q0_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q1_MSBf_GET(r) ((((r).rxlnswap[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q1_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q2_MSBf_GET(r) ((((r).rxlnswap[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q2_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q3_MSBf_GET(r) ((((r).rxlnswap[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q3_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE0f_GET(r) ((((r).rxlnswap[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE0f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE1f_GET(r) ((((r).rxlnswap[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE1f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE2f_GET(r) ((((r).rxlnswap[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE2f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE3f_GET(r) (((r).rxlnswap[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE3f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RXLNSWAP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXLNSWAPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXLNSWAPr,(_r._rxlnswap))
#define BCMI_HYPERLITE_XGXS_WRITE_RXLNSWAPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXLNSWAPr,(_r._rxlnswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXLNSWAPr BCMI_HYPERLITE_XGXS_RXLNSWAPr
#define RXLNSWAPr_SIZE BCMI_HYPERLITE_XGXS_RXLNSWAPr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXLNSWAPr_t RXLNSWAPr_t;
#define RXLNSWAPr_CLR BCMI_HYPERLITE_XGXS_RXLNSWAPr_CLR
#define RXLNSWAPr_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_SET
#define RXLNSWAPr_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_GET
#define RXLNSWAPr_RX_LNSWAP_ENf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_ENf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_ENf_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET
#define RXLNSWAPr_QSET_PROG_ENf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_QSET_PROG_ENf_GET
#define RXLNSWAPr_QSET_PROG_ENf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_QSET_PROG_ENf_SET
#define RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET
#define RXLNSWAPr_Q0_MSBf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q0_MSBf_GET
#define RXLNSWAPr_Q0_MSBf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q0_MSBf_SET
#define RXLNSWAPr_Q1_MSBf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q1_MSBf_GET
#define RXLNSWAPr_Q1_MSBf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q1_MSBf_SET
#define RXLNSWAPr_Q2_MSBf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q2_MSBf_GET
#define RXLNSWAPr_Q2_MSBf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q2_MSBf_SET
#define RXLNSWAPr_Q3_MSBf_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q3_MSBf_GET
#define RXLNSWAPr_Q3_MSBf_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_Q3_MSBf_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE0f_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE0f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE0f_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE0f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE1f_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE1f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE1f_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE1f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE2f_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE2f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE2f_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE2f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE3f_GET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE3f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE3f_SET BCMI_HYPERLITE_XGXS_RXLNSWAPr_RX_LNSWAP_FORCE3f_SET
#define READ_RXLNSWAPr BCMI_HYPERLITE_XGXS_READ_RXLNSWAPr
#define WRITE_RXLNSWAPr BCMI_HYPERLITE_XGXS_WRITE_RXLNSWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXLNSWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXLNSWAP
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8101
 * DESC:     Transmit lane swap control register
 * SIZE:     32
 * FIELDS:
 *     TX_LNSWAP_FORCE3 
 *     TX_LNSWAP_FORCE2 
 *     TX_LNSWAP_FORCE1 
 *     TX_LNSWAP_FORCE0 
 *     RESERVED0        
 *     TX_LNSWAP_EN     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr (0x00010011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_SIZE 4

/*
 * This structure should be used to declare and program TXLNSWAP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXLNSWAPr_s {
	uint32_t v[1];
	uint32_t txlnswap[1];
	uint32_t _txlnswap;
} BCMI_HYPERLITE_XGXS_TXLNSWAPr_t;

#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_CLR(r) (r).txlnswap[0] = 0
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_SET(r,d) (r).txlnswap[0] = d
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_GET(r) (r).txlnswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_ENf_GET(r) ((((r).txlnswap[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_ENf_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_RESERVED0f_GET(r) ((((r).txlnswap[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_RESERVED0f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE0f_GET(r) ((((r).txlnswap[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE0f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE1f_GET(r) ((((r).txlnswap[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE1f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE2f_GET(r) ((((r).txlnswap[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE2f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE3f_GET(r) (((r).txlnswap[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE3f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TXLNSWAP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXLNSWAPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXLNSWAPr,(_r._txlnswap))
#define BCMI_HYPERLITE_XGXS_WRITE_TXLNSWAPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXLNSWAPr,(_r._txlnswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXLNSWAPr BCMI_HYPERLITE_XGXS_TXLNSWAPr
#define TXLNSWAPr_SIZE BCMI_HYPERLITE_XGXS_TXLNSWAPr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXLNSWAPr_t TXLNSWAPr_t;
#define TXLNSWAPr_CLR BCMI_HYPERLITE_XGXS_TXLNSWAPr_CLR
#define TXLNSWAPr_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_SET
#define TXLNSWAPr_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_GET
#define TXLNSWAPr_TX_LNSWAP_ENf_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_ENf_GET
#define TXLNSWAPr_TX_LNSWAP_ENf_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_ENf_SET
#define TXLNSWAPr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_RESERVED0f_GET
#define TXLNSWAPr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_RESERVED0f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE0f_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE0f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE0f_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE0f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE1f_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE1f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE1f_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE1f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE2f_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE2f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE2f_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE2f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE3f_GET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE3f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE3f_SET BCMI_HYPERLITE_XGXS_TXLNSWAPr_TX_LNSWAP_FORCE3f_SET
#define READ_TXLNSWAPr BCMI_HYPERLITE_XGXS_READ_TXLNSWAPr
#define WRITE_TXLNSWAPr BCMI_HYPERLITE_XGXS_WRITE_TXLNSWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXLNSWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  QSETLNS01
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8102
 * DESC:     ||Q|| ordered set, lanes 0 & 1 register
 * SIZE:     32
 * FIELDS:
 *     Q0               
 *     Q1               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_QSETLNS01r (0x00010012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_QSETLNS01r_SIZE 4

/*
 * This structure should be used to declare and program QSETLNS01.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_QSETLNS01r_s {
	uint32_t v[1];
	uint32_t qsetlns01[1];
	uint32_t _qsetlns01;
} BCMI_HYPERLITE_XGXS_QSETLNS01r_t;

#define BCMI_HYPERLITE_XGXS_QSETLNS01r_CLR(r) (r).qsetlns01[0] = 0
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_SET(r,d) (r).qsetlns01[0] = d
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_GET(r) (r).qsetlns01[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_Q1f_GET(r) ((((r).qsetlns01[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_Q1f_SET(r,f) (r).qsetlns01[0]=(((r).qsetlns01[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_Q0f_GET(r) (((r).qsetlns01[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_QSETLNS01r_Q0f_SET(r,f) (r).qsetlns01[0]=(((r).qsetlns01[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access QSETLNS01.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_QSETLNS01r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_QSETLNS01r,(_r._qsetlns01))
#define BCMI_HYPERLITE_XGXS_WRITE_QSETLNS01r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_QSETLNS01r,(_r._qsetlns01))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define QSETLNS01r BCMI_HYPERLITE_XGXS_QSETLNS01r
#define QSETLNS01r_SIZE BCMI_HYPERLITE_XGXS_QSETLNS01r_SIZE
typedef BCMI_HYPERLITE_XGXS_QSETLNS01r_t QSETLNS01r_t;
#define QSETLNS01r_CLR BCMI_HYPERLITE_XGXS_QSETLNS01r_CLR
#define QSETLNS01r_SET BCMI_HYPERLITE_XGXS_QSETLNS01r_SET
#define QSETLNS01r_GET BCMI_HYPERLITE_XGXS_QSETLNS01r_GET
#define QSETLNS01r_Q1f_GET BCMI_HYPERLITE_XGXS_QSETLNS01r_Q1f_GET
#define QSETLNS01r_Q1f_SET BCMI_HYPERLITE_XGXS_QSETLNS01r_Q1f_SET
#define QSETLNS01r_Q0f_GET BCMI_HYPERLITE_XGXS_QSETLNS01r_Q0f_GET
#define QSETLNS01r_Q0f_SET BCMI_HYPERLITE_XGXS_QSETLNS01r_Q0f_SET
#define READ_QSETLNS01r BCMI_HYPERLITE_XGXS_READ_QSETLNS01r
#define WRITE_QSETLNS01r BCMI_HYPERLITE_XGXS_WRITE_QSETLNS01r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_QSETLNS01r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  QSETLNS23
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8103
 * DESC:     ||Q|| ordered set, lanes 2 & 3 register
 * SIZE:     32
 * FIELDS:
 *     Q2               
 *     Q3               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_QSETLNS23r (0x00010013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_QSETLNS23r_SIZE 4

/*
 * This structure should be used to declare and program QSETLNS23.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_QSETLNS23r_s {
	uint32_t v[1];
	uint32_t qsetlns23[1];
	uint32_t _qsetlns23;
} BCMI_HYPERLITE_XGXS_QSETLNS23r_t;

#define BCMI_HYPERLITE_XGXS_QSETLNS23r_CLR(r) (r).qsetlns23[0] = 0
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_SET(r,d) (r).qsetlns23[0] = d
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_GET(r) (r).qsetlns23[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_Q3f_GET(r) ((((r).qsetlns23[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_Q3f_SET(r,f) (r).qsetlns23[0]=(((r).qsetlns23[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_Q2f_GET(r) (((r).qsetlns23[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_QSETLNS23r_Q2f_SET(r,f) (r).qsetlns23[0]=(((r).qsetlns23[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access QSETLNS23.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_QSETLNS23r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_QSETLNS23r,(_r._qsetlns23))
#define BCMI_HYPERLITE_XGXS_WRITE_QSETLNS23r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_QSETLNS23r,(_r._qsetlns23))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define QSETLNS23r BCMI_HYPERLITE_XGXS_QSETLNS23r
#define QSETLNS23r_SIZE BCMI_HYPERLITE_XGXS_QSETLNS23r_SIZE
typedef BCMI_HYPERLITE_XGXS_QSETLNS23r_t QSETLNS23r_t;
#define QSETLNS23r_CLR BCMI_HYPERLITE_XGXS_QSETLNS23r_CLR
#define QSETLNS23r_SET BCMI_HYPERLITE_XGXS_QSETLNS23r_SET
#define QSETLNS23r_GET BCMI_HYPERLITE_XGXS_QSETLNS23r_GET
#define QSETLNS23r_Q3f_GET BCMI_HYPERLITE_XGXS_QSETLNS23r_Q3f_GET
#define QSETLNS23r_Q3f_SET BCMI_HYPERLITE_XGXS_QSETLNS23r_Q3f_SET
#define QSETLNS23r_Q2f_GET BCMI_HYPERLITE_XGXS_QSETLNS23r_Q2f_GET
#define QSETLNS23r_Q2f_SET BCMI_HYPERLITE_XGXS_QSETLNS23r_Q2f_SET
#define READ_QSETLNS23r BCMI_HYPERLITE_XGXS_READ_QSETLNS23r
#define WRITE_QSETLNS23r BCMI_HYPERLITE_XGXS_WRITE_QSETLNS23r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_QSETLNS23r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  UNICOREMODE10G
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8104
 * DESC:     AN 10G resolution mode control register
 * SIZE:     32
 * FIELDS:
 *     UNICOREMODE10GCX4 
 *     UNICOREMODE10GHIG 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr (0x00010014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_SIZE 4

/*
 * This structure should be used to declare and program UNICOREMODE10G.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_s {
	uint32_t v[1];
	uint32_t unicoremode10g[1];
	uint32_t _unicoremode10g;
} BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_t;

#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_CLR(r) (r).unicoremode10g[0] = 0
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_SET(r,d) (r).unicoremode10g[0] = d
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_GET(r) (r).unicoremode10g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_RESERVED0f_GET(r) ((((r).unicoremode10g[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_RESERVED0f_SET(r,f) (r).unicoremode10g[0]=(((r).unicoremode10g[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET(r) ((((r).unicoremode10g[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET(r,f) (r).unicoremode10g[0]=(((r).unicoremode10g[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET(r) (((r).unicoremode10g[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET(r,f) (r).unicoremode10g[0]=(((r).unicoremode10g[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access UNICOREMODE10G.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_UNICOREMODE10Gr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr,(_r._unicoremode10g))
#define BCMI_HYPERLITE_XGXS_WRITE_UNICOREMODE10Gr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr,(_r._unicoremode10g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UNICOREMODE10Gr BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr
#define UNICOREMODE10Gr_SIZE BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_SIZE
typedef BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_t UNICOREMODE10Gr_t;
#define UNICOREMODE10Gr_CLR BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_CLR
#define UNICOREMODE10Gr_SET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_SET
#define UNICOREMODE10Gr_GET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_GET
#define UNICOREMODE10Gr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_RESERVED0f_GET
#define UNICOREMODE10Gr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_RESERVED0f_SET
#define UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET
#define UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET
#define UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET
#define UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET
#define READ_UNICOREMODE10Gr BCMI_HYPERLITE_XGXS_READ_UNICOREMODE10Gr
#define WRITE_UNICOREMODE10Gr BCMI_HYPERLITE_XGXS_WRITE_UNICOREMODE10Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_UNICOREMODE10Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  INDCOMBCTRL
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8105
 * DESC:     Independent Combo Control register
 * SIZE:     32
 * FIELDS:
 *     MASTERLN_INDX    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr (0x00010015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_SIZE 4

/*
 * This structure should be used to declare and program INDCOMBCTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_s {
	uint32_t v[1];
	uint32_t indcombctrl[1];
	uint32_t _indcombctrl;
} BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_t;

#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_CLR(r) (r).indcombctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_SET(r,d) (r).indcombctrl[0] = d
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_GET(r) (r).indcombctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_RESERVED0f_GET(r) ((((r).indcombctrl[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_RESERVED0f_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_MASTERLN_INDXf_GET(r) (((r).indcombctrl[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_MASTERLN_INDXf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access INDCOMBCTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_INDCOMBCTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_INDCOMBCTRLr,(_r._indcombctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_INDCOMBCTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_INDCOMBCTRLr,(_r._indcombctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define INDCOMBCTRLr BCMI_HYPERLITE_XGXS_INDCOMBCTRLr
#define INDCOMBCTRLr_SIZE BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_t INDCOMBCTRLr_t;
#define INDCOMBCTRLr_CLR BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_CLR
#define INDCOMBCTRLr_SET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_SET
#define INDCOMBCTRLr_GET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_GET
#define INDCOMBCTRLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_RESERVED0f_GET
#define INDCOMBCTRLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_RESERVED0f_SET
#define INDCOMBCTRLr_MASTERLN_INDXf_GET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_MASTERLN_INDXf_GET
#define INDCOMBCTRLr_MASTERLN_INDXf_SET BCMI_HYPERLITE_XGXS_INDCOMBCTRLr_MASTERLN_INDXf_SET
#define READ_INDCOMBCTRLr BCMI_HYPERLITE_XGXS_READ_INDCOMBCTRLr
#define WRITE_INDCOMBCTRLr BCMI_HYPERLITE_XGXS_WRITE_INDCOMBCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_INDCOMBCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTMODELANE
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8106
 * DESC:     Test mode lane select register
 * SIZE:     32
 * FIELDS:
 *     SLICE_SELECTOR   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr (0x00010016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODELANE.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTMODELANEr_s {
	uint32_t v[1];
	uint32_t testmodelane[1];
	uint32_t _testmodelane;
} BCMI_HYPERLITE_XGXS_TESTMODELANEr_t;

#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_CLR(r) (r).testmodelane[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_SET(r,d) (r).testmodelane[0] = d
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_GET(r) (r).testmodelane[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_RESERVED0f_GET(r) ((((r).testmodelane[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_RESERVED0f_SET(r,f) (r).testmodelane[0]=(((r).testmodelane[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_SLICE_SELECTORf_GET(r) (((r).testmodelane[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_TESTMODELANEr_SLICE_SELECTORf_SET(r,f) (r).testmodelane[0]=(((r).testmodelane[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TESTMODELANE.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTMODELANEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTMODELANEr,(_r._testmodelane))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTMODELANEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTMODELANEr,(_r._testmodelane))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODELANEr BCMI_HYPERLITE_XGXS_TESTMODELANEr
#define TESTMODELANEr_SIZE BCMI_HYPERLITE_XGXS_TESTMODELANEr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTMODELANEr_t TESTMODELANEr_t;
#define TESTMODELANEr_CLR BCMI_HYPERLITE_XGXS_TESTMODELANEr_CLR
#define TESTMODELANEr_SET BCMI_HYPERLITE_XGXS_TESTMODELANEr_SET
#define TESTMODELANEr_GET BCMI_HYPERLITE_XGXS_TESTMODELANEr_GET
#define TESTMODELANEr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTMODELANEr_RESERVED0f_GET
#define TESTMODELANEr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTMODELANEr_RESERVED0f_SET
#define TESTMODELANEr_SLICE_SELECTORf_GET BCMI_HYPERLITE_XGXS_TESTMODELANEr_SLICE_SELECTORf_GET
#define TESTMODELANEr_SLICE_SELECTORf_SET BCMI_HYPERLITE_XGXS_TESTMODELANEr_SLICE_SELECTORf_SET
#define READ_TESTMODELANEr BCMI_HYPERLITE_XGXS_READ_TESTMODELANEr
#define WRITE_TESTMODELANEr BCMI_HYPERLITE_XGXS_WRITE_TESTMODELANEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTMODELANEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTMODECOMBO
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8107
 * DESC:     Test mode monitor control register
 * SIZE:     32
 * FIELDS:
 *     TEST_MONITOR_MODE1 
 *     TEST_MONITOR_MODE2 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr (0x00010017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODECOMBO.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_s {
	uint32_t v[1];
	uint32_t testmodecombo[1];
	uint32_t _testmodecombo;
} BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_t;

#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_CLR(r) (r).testmodecombo[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_SET(r,d) (r).testmodecombo[0] = d
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_GET(r) (r).testmodecombo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_RESERVED0f_GET(r) ((((r).testmodecombo[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_RESERVED0f_SET(r,f) (r).testmodecombo[0]=(((r).testmodecombo[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET(r) ((((r).testmodecombo[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET(r,f) (r).testmodecombo[0]=(((r).testmodecombo[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET(r) (((r).testmodecombo[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET(r,f) (r).testmodecombo[0]=(((r).testmodecombo[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access TESTMODECOMBO.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTMODECOMBOr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTMODECOMBOr,(_r._testmodecombo))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTMODECOMBOr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTMODECOMBOr,(_r._testmodecombo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODECOMBOr BCMI_HYPERLITE_XGXS_TESTMODECOMBOr
#define TESTMODECOMBOr_SIZE BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_t TESTMODECOMBOr_t;
#define TESTMODECOMBOr_CLR BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_CLR
#define TESTMODECOMBOr_SET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_SET
#define TESTMODECOMBOr_GET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_GET
#define TESTMODECOMBOr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_RESERVED0f_GET
#define TESTMODECOMBOr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_RESERVED0f_SET
#define TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET
#define TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET
#define TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET
#define TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET BCMI_HYPERLITE_XGXS_TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET
#define READ_TESTMODECOMBOr BCMI_HYPERLITE_XGXS_READ_TESTMODECOMBOr
#define WRITE_TESTMODECOMBOr BCMI_HYPERLITE_XGXS_WRITE_TESTMODECOMBOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTMODECOMBOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTMODEMUX
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8108
 * DESC:     Test mode mux control register
 * SIZE:     32
 * FIELDS:
 *     TMUX_EN          
 *     TMUX_SEL         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr (0x00010018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODEMUX.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTMODEMUXr_s {
	uint32_t v[1];
	uint32_t testmodemux[1];
	uint32_t _testmodemux;
} BCMI_HYPERLITE_XGXS_TESTMODEMUXr_t;

#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_CLR(r) (r).testmodemux[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_SET(r,d) (r).testmodemux[0] = d
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_GET(r) (r).testmodemux[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_RESERVED0f_GET(r) ((((r).testmodemux[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_RESERVED0f_SET(r,f) (r).testmodemux[0]=(((r).testmodemux[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_SELf_GET(r) ((((r).testmodemux[0]) >> 1) & 0x7)
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_SELf_SET(r,f) (r).testmodemux[0]=(((r).testmodemux[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_ENf_GET(r) (((r).testmodemux[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_ENf_SET(r,f) (r).testmodemux[0]=(((r).testmodemux[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TESTMODEMUX.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTMODEMUXr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTMODEMUXr,(_r._testmodemux))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTMODEMUXr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTMODEMUXr,(_r._testmodemux))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODEMUXr BCMI_HYPERLITE_XGXS_TESTMODEMUXr
#define TESTMODEMUXr_SIZE BCMI_HYPERLITE_XGXS_TESTMODEMUXr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTMODEMUXr_t TESTMODEMUXr_t;
#define TESTMODEMUXr_CLR BCMI_HYPERLITE_XGXS_TESTMODEMUXr_CLR
#define TESTMODEMUXr_SET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_SET
#define TESTMODEMUXr_GET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_GET
#define TESTMODEMUXr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_RESERVED0f_GET
#define TESTMODEMUXr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_RESERVED0f_SET
#define TESTMODEMUXr_TMUX_SELf_GET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_SELf_GET
#define TESTMODEMUXr_TMUX_SELf_SET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_SELf_SET
#define TESTMODEMUXr_TMUX_ENf_GET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_ENf_GET
#define TESTMODEMUXr_TMUX_ENf_SET BCMI_HYPERLITE_XGXS_TESTMODEMUXr_TMUX_ENf_SET
#define READ_TESTMODEMUXr BCMI_HYPERLITE_XGXS_READ_TESTMODEMUXr
#define WRITE_TESTMODEMUXr BCMI_HYPERLITE_XGXS_WRITE_TESTMODEMUXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTMODEMUXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CX4SIGDETCNT
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x8109
 * DESC:     10GBASE-CX4 signal detect timeout value
 * SIZE:     32
 * FIELDS:
 *     CX4SIGDETCNT     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr (0x00010019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_SIZE 4

/*
 * This structure should be used to declare and program CX4SIGDETCNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_s {
	uint32_t v[1];
	uint32_t cx4sigdetcnt[1];
	uint32_t _cx4sigdetcnt;
} BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_t;

#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CLR(r) (r).cx4sigdetcnt[0] = 0
#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_SET(r,d) (r).cx4sigdetcnt[0] = d
#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_GET(r) (r).cx4sigdetcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CX4SIGDETCNTf_GET(r) (((r).cx4sigdetcnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CX4SIGDETCNTf_SET(r,f) (r).cx4sigdetcnt[0]=(((r).cx4sigdetcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CX4SIGDETCNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CX4SIGDETCNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr,(_r._cx4sigdetcnt))
#define BCMI_HYPERLITE_XGXS_WRITE_CX4SIGDETCNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr,(_r._cx4sigdetcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CX4SIGDETCNTr BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr
#define CX4SIGDETCNTr_SIZE BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_t CX4SIGDETCNTr_t;
#define CX4SIGDETCNTr_CLR BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CLR
#define CX4SIGDETCNTr_SET BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_SET
#define CX4SIGDETCNTr_GET BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_GET
#define CX4SIGDETCNTr_CX4SIGDETCNTf_GET BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CX4SIGDETCNTf_GET
#define CX4SIGDETCNTr_CX4SIGDETCNTf_SET BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr_CX4SIGDETCNTf_SET
#define READ_CX4SIGDETCNTr BCMI_HYPERLITE_XGXS_READ_CX4SIGDETCNTr
#define WRITE_CX4SIGDETCNTr BCMI_HYPERLITE_XGXS_WRITE_CX4SIGDETCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CX4SIGDETCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LANERESET
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x810a
 * DESC:     Lane reset register
 * SIZE:     32
 * FIELDS:
 *     RESET_RX         
 *     RESET_TX         
 *     RESET_PLL        
 *     RESERVED0        
 *     RESET_MDIO       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LANERESETr (0x0001001a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LANERESETr_SIZE 4

/*
 * This structure should be used to declare and program LANERESET.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LANERESETr_s {
	uint32_t v[1];
	uint32_t lanereset[1];
	uint32_t _lanereset;
} BCMI_HYPERLITE_XGXS_LANERESETr_t;

#define BCMI_HYPERLITE_XGXS_LANERESETr_CLR(r) (r).lanereset[0] = 0
#define BCMI_HYPERLITE_XGXS_LANERESETr_SET(r,d) (r).lanereset[0] = d
#define BCMI_HYPERLITE_XGXS_LANERESETr_GET(r) (r).lanereset[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_MDIOf_GET(r) ((((r).lanereset[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_MDIOf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESERVED0f_GET(r) ((((r).lanereset[0]) >> 9) & 0x3f)
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESERVED0f_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0x3f << 9)) | ((((uint32_t)f) & 0x3f) << 9))
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_PLLf_GET(r) ((((r).lanereset[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_PLLf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_TXf_GET(r) ((((r).lanereset[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_TXf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_RXf_GET(r) (((r).lanereset[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_LANERESETr_RESET_RXf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANERESET.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LANERESETr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LANERESETr,(_r._lanereset))
#define BCMI_HYPERLITE_XGXS_WRITE_LANERESETr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LANERESETr,(_r._lanereset))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANERESETr BCMI_HYPERLITE_XGXS_LANERESETr
#define LANERESETr_SIZE BCMI_HYPERLITE_XGXS_LANERESETr_SIZE
typedef BCMI_HYPERLITE_XGXS_LANERESETr_t LANERESETr_t;
#define LANERESETr_CLR BCMI_HYPERLITE_XGXS_LANERESETr_CLR
#define LANERESETr_SET BCMI_HYPERLITE_XGXS_LANERESETr_SET
#define LANERESETr_GET BCMI_HYPERLITE_XGXS_LANERESETr_GET
#define LANERESETr_RESET_MDIOf_GET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_MDIOf_GET
#define LANERESETr_RESET_MDIOf_SET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_MDIOf_SET
#define LANERESETr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LANERESETr_RESERVED0f_GET
#define LANERESETr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LANERESETr_RESERVED0f_SET
#define LANERESETr_RESET_PLLf_GET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_PLLf_GET
#define LANERESETr_RESET_PLLf_SET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_PLLf_SET
#define LANERESETr_RESET_TXf_GET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_TXf_GET
#define LANERESETr_RESET_TXf_SET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_TXf_SET
#define LANERESETr_RESET_RXf_GET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_RXf_GET
#define LANERESETr_RESET_RXf_SET BCMI_HYPERLITE_XGXS_LANERESETr_RESET_RXf_SET
#define READ_LANERESETr BCMI_HYPERLITE_XGXS_READ_LANERESETr
#define WRITE_LANERESETr BCMI_HYPERLITE_XGXS_WRITE_LANERESETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LANERESETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  XGXSSTATUS6
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x810b
 * DESC:     XGXS Status 6 register
 * SIZE:     32
 * FIELDS:
 *     HCD_OVER_1G      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r (0x0001001b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_SIZE 4

/*
 * This structure should be used to declare and program XGXSSTATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_s {
	uint32_t v[1];
	uint32_t xgxsstatus6[1];
	uint32_t _xgxsstatus6;
} BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_t;

#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_CLR(r) (r).xgxsstatus6[0] = 0
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_SET(r,d) (r).xgxsstatus6[0] = d
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_GET(r) (r).xgxsstatus6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_RESERVED0f_GET(r) ((((r).xgxsstatus6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_RESERVED0f_SET(r,f) (r).xgxsstatus6[0]=(((r).xgxsstatus6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_HCD_OVER_1Gf_GET(r) (((r).xgxsstatus6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_HCD_OVER_1Gf_SET(r,f) (r).xgxsstatus6[0]=(((r).xgxsstatus6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access XGXSSTATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_XGXSSTATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_XGXSSTATUS6r,(_r._xgxsstatus6))
#define BCMI_HYPERLITE_XGXS_WRITE_XGXSSTATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_XGXSSTATUS6r,(_r._xgxsstatus6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGXSSTATUS6r BCMI_HYPERLITE_XGXS_XGXSSTATUS6r
#define XGXSSTATUS6r_SIZE BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_t XGXSSTATUS6r_t;
#define XGXSSTATUS6r_CLR BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_CLR
#define XGXSSTATUS6r_SET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_SET
#define XGXSSTATUS6r_GET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_GET
#define XGXSSTATUS6r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_RESERVED0f_GET
#define XGXSSTATUS6r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_RESERVED0f_SET
#define XGXSSTATUS6r_HCD_OVER_1Gf_GET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_HCD_OVER_1Gf_GET
#define XGXSSTATUS6r_HCD_OVER_1Gf_SET BCMI_HYPERLITE_XGXS_XGXSSTATUS6r_HCD_OVER_1Gf_SET
#define READ_XGXSSTATUS6r BCMI_HYPERLITE_XGXS_READ_XGXSSTATUS6r
#define WRITE_XGXSSTATUS6r BCMI_HYPERLITE_XGXS_WRITE_XGXSSTATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_XGXSSTATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73CONTROL7
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x810d
 * DESC:     Clause 73 control 7 register
 * SIZE:     32
 * FIELDS:
 *     CL73_AN_SWITCH_CNTL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r (0x0001001d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73CONTROL7r_s {
	uint32_t v[1];
	uint32_t cl73control7[1];
	uint32_t _cl73control7;
} BCMI_HYPERLITE_XGXS_CL73CONTROL7r_t;

#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CLR(r) (r).cl73control7[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_SET(r,d) (r).cl73control7[0] = d
#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_GET(r) (r).cl73control7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_GET(r) (((r).cl73control7[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_SET(r,f) (r).cl73control7[0]=(((r).cl73control7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73CONTROL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73CONTROL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73CONTROL7r,(_r._cl73control7))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73CONTROL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73CONTROL7r,(_r._cl73control7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL7r BCMI_HYPERLITE_XGXS_CL73CONTROL7r
#define CL73CONTROL7r_SIZE BCMI_HYPERLITE_XGXS_CL73CONTROL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73CONTROL7r_t CL73CONTROL7r_t;
#define CL73CONTROL7r_CLR BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CLR
#define CL73CONTROL7r_SET BCMI_HYPERLITE_XGXS_CL73CONTROL7r_SET
#define CL73CONTROL7r_GET BCMI_HYPERLITE_XGXS_CL73CONTROL7r_GET
#define CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_GET BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_GET
#define CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_SET BCMI_HYPERLITE_XGXS_CL73CONTROL7r_CL73_AN_SWITCH_CNTLf_SET
#define READ_CL73CONTROL7r BCMI_HYPERLITE_XGXS_READ_CL73CONTROL7r
#define WRITE_CL73CONTROL7r BCMI_HYPERLITE_XGXS_WRITE_CL73CONTROL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73CONTROL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73CONTROL8
 * BLOCKS:   XGXSBLK2
 * REGADDR:  0x810e
 * DESC:     Clause 73 control 8 register
 * SIZE:     32
 * FIELDS:
 *     CL73_AN_SWITCH_CNTH 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r (0x0001001e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73CONTROL8r_s {
	uint32_t v[1];
	uint32_t cl73control8[1];
	uint32_t _cl73control8;
} BCMI_HYPERLITE_XGXS_CL73CONTROL8r_t;

#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CLR(r) (r).cl73control8[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_SET(r,d) (r).cl73control8[0] = d
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_GET(r) (r).cl73control8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_RESERVED0f_GET(r) ((((r).cl73control8[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_RESERVED0f_SET(r,f) (r).cl73control8[0]=(((r).cl73control8[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_GET(r) (((r).cl73control8[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_SET(r,f) (r).cl73control8[0]=(((r).cl73control8[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access CL73CONTROL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73CONTROL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73CONTROL8r,(_r._cl73control8))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73CONTROL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73CONTROL8r,(_r._cl73control8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL8r BCMI_HYPERLITE_XGXS_CL73CONTROL8r
#define CL73CONTROL8r_SIZE BCMI_HYPERLITE_XGXS_CL73CONTROL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73CONTROL8r_t CL73CONTROL8r_t;
#define CL73CONTROL8r_CLR BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CLR
#define CL73CONTROL8r_SET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_SET
#define CL73CONTROL8r_GET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_GET
#define CL73CONTROL8r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_RESERVED0f_GET
#define CL73CONTROL8r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_RESERVED0f_SET
#define CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_GET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_GET
#define CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_SET BCMI_HYPERLITE_XGXS_CL73CONTROL8r_CL73_AN_SWITCH_CNTHf_SET
#define READ_CL73CONTROL8r BCMI_HYPERLITE_XGXS_READ_CL73CONTROL8r
#define WRITE_CL73CONTROL8r BCMI_HYPERLITE_XGXS_WRITE_CL73CONTROL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73CONTROL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LOCALSTATUS
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8110
 * DESC:     In Band MDIO - local status register
 * SIZE:     32
 * FIELDS:
 *     LOCALMDIOEN      
 *     LOCALRDDATARDY   
 *     LOCALIACRDY      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr (0x00011010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program LOCALSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LOCALSTATUSr_s {
	uint32_t v[1];
	uint32_t localstatus[1];
	uint32_t _localstatus;
} BCMI_HYPERLITE_XGXS_LOCALSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_CLR(r) (r).localstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_SET(r,d) (r).localstatus[0] = d
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_GET(r) (r).localstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_RESERVED0f_GET(r) ((((r).localstatus[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_RESERVED0f_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALIACRDYf_GET(r) ((((r).localstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALIACRDYf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALRDDATARDYf_GET(r) ((((r).localstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALRDDATARDYf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALMDIOENf_GET(r) (((r).localstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALMDIOENf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LOCALSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LOCALSTATUSr,(_r._localstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_LOCALSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LOCALSTATUSr,(_r._localstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALSTATUSr BCMI_HYPERLITE_XGXS_LOCALSTATUSr
#define LOCALSTATUSr_SIZE BCMI_HYPERLITE_XGXS_LOCALSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_LOCALSTATUSr_t LOCALSTATUSr_t;
#define LOCALSTATUSr_CLR BCMI_HYPERLITE_XGXS_LOCALSTATUSr_CLR
#define LOCALSTATUSr_SET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_SET
#define LOCALSTATUSr_GET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_GET
#define LOCALSTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_RESERVED0f_GET
#define LOCALSTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_RESERVED0f_SET
#define LOCALSTATUSr_LOCALIACRDYf_GET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALIACRDYf_GET
#define LOCALSTATUSr_LOCALIACRDYf_SET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALIACRDYf_SET
#define LOCALSTATUSr_LOCALRDDATARDYf_GET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALRDDATARDYf_GET
#define LOCALSTATUSr_LOCALRDDATARDYf_SET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALRDDATARDYf_SET
#define LOCALSTATUSr_LOCALMDIOENf_GET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALMDIOENf_GET
#define LOCALSTATUSr_LOCALMDIOENf_SET BCMI_HYPERLITE_XGXS_LOCALSTATUSr_LOCALMDIOENf_SET
#define READ_LOCALSTATUSr BCMI_HYPERLITE_XGXS_READ_LOCALSTATUSr
#define WRITE_LOCALSTATUSr BCMI_HYPERLITE_XGXS_WRITE_LOCALSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LOCALSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LOCALCONTROL0
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8111
 * DESC:     In Band MDIO - local control 0 register
 * SIZE:     32
 * FIELDS:
 *     REMOTEMDIOEN_REG 
 *     LOCALWRITEREQ    
 *     TX_INBANDMDIO_RST 
 *     RX_INBANDMDIO_RST 
 *     EXTREMOTEMDIOEN  
 *     REMOTEMDIOENDPNT 
 *     REMOTEMDIOPASSTHRU 
 *     Q0_DETDIS        
 *     RESERVED0        
 *     REMOTEWRITE_LN0_MSB 
 *     REMOTEWRITE_LN1_MSB 
 *     REMOTEWRITE_LN2_MSB 
 *     REMOTEWRITE_LN3_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r (0x00011011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program LOCALCONTROL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_s {
	uint32_t v[1];
	uint32_t localcontrol0[1];
	uint32_t _localcontrol0;
} BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_t;

#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_CLR(r) (r).localcontrol0[0] = 0
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_SET(r,d) (r).localcontrol0[0] = d
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_GET(r) (r).localcontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET(r) ((((r).localcontrol0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET(r) ((((r).localcontrol0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET(r) ((((r).localcontrol0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET(r) ((((r).localcontrol0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RESERVED0f_GET(r) ((((r).localcontrol0[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RESERVED0f_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_Q0_DETDISf_GET(r) ((((r).localcontrol0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_Q0_DETDISf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET(r) ((((r).localcontrol0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET(r) ((((r).localcontrol0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_EXTREMOTEMDIOENf_GET(r) ((((r).localcontrol0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_EXTREMOTEMDIOENf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET(r) ((((r).localcontrol0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET(r) ((((r).localcontrol0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_LOCALWRITEREQf_GET(r) ((((r).localcontrol0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_LOCALWRITEREQf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOEN_REGf_GET(r) (((r).localcontrol0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOEN_REGf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALCONTROL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LOCALCONTROL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LOCALCONTROL0r,(_r._localcontrol0))
#define BCMI_HYPERLITE_XGXS_WRITE_LOCALCONTROL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LOCALCONTROL0r,(_r._localcontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALCONTROL0r BCMI_HYPERLITE_XGXS_LOCALCONTROL0r
#define LOCALCONTROL0r_SIZE BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_t LOCALCONTROL0r_t;
#define LOCALCONTROL0r_CLR BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_CLR
#define LOCALCONTROL0r_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_SET
#define LOCALCONTROL0r_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET
#define LOCALCONTROL0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RESERVED0f_GET
#define LOCALCONTROL0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RESERVED0f_SET
#define LOCALCONTROL0r_Q0_DETDISf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_Q0_DETDISf_GET
#define LOCALCONTROL0r_Q0_DETDISf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_Q0_DETDISf_SET
#define LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET
#define LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET
#define LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET
#define LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET
#define LOCALCONTROL0r_EXTREMOTEMDIOENf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_EXTREMOTEMDIOENf_GET
#define LOCALCONTROL0r_EXTREMOTEMDIOENf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_EXTREMOTEMDIOENf_SET
#define LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET
#define LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET
#define LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET
#define LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET
#define LOCALCONTROL0r_LOCALWRITEREQf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_LOCALWRITEREQf_GET
#define LOCALCONTROL0r_LOCALWRITEREQf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_LOCALWRITEREQf_SET
#define LOCALCONTROL0r_REMOTEMDIOEN_REGf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOEN_REGf_GET
#define LOCALCONTROL0r_REMOTEMDIOEN_REGf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL0r_REMOTEMDIOEN_REGf_SET
#define READ_LOCALCONTROL0r BCMI_HYPERLITE_XGXS_READ_LOCALCONTROL0r
#define WRITE_LOCALCONTROL0r BCMI_HYPERLITE_XGXS_WRITE_LOCALCONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LOCALCONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LOCALCONTROL1
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8112
 * DESC:     In Band MDIO - local control 1 register
 * SIZE:     32
 * FIELDS:
 *     RX_INBANDMDIOSTATSEL 
 *     LOCALREMOTEERRORCLR 
 *     RESERVED0        
 *     RX_INBANDMDIO_Q0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r (0x00011012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program LOCALCONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_s {
	uint32_t v[1];
	uint32_t localcontrol1[1];
	uint32_t _localcontrol1;
} BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_CLR(r) (r).localcontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_SET(r,d) (r).localcontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_GET(r) (r).localcontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET(r) ((((r).localcontrol1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RESERVED0f_GET(r) ((((r).localcontrol1[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RESERVED0f_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET(r) ((((r).localcontrol1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET(r) (((r).localcontrol1[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access LOCALCONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LOCALCONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LOCALCONTROL1r,(_r._localcontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_LOCALCONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LOCALCONTROL1r,(_r._localcontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALCONTROL1r BCMI_HYPERLITE_XGXS_LOCALCONTROL1r
#define LOCALCONTROL1r_SIZE BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_t LOCALCONTROL1r_t;
#define LOCALCONTROL1r_CLR BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_CLR
#define LOCALCONTROL1r_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_SET
#define LOCALCONTROL1r_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_GET
#define LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET
#define LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET
#define LOCALCONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RESERVED0f_GET
#define LOCALCONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RESERVED0f_SET
#define LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET
#define LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET
#define LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET
#define LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET BCMI_HYPERLITE_XGXS_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET
#define READ_LOCALCONTROL1r BCMI_HYPERLITE_XGXS_READ_LOCALCONTROL1r
#define WRITE_LOCALCONTROL1r BCMI_HYPERLITE_XGXS_WRITE_LOCALCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LOCALCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REMOTEWRITE03
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8113
 * DESC:     In Band MDIO - remote write ln 0 & 3 register
 * SIZE:     32
 * FIELDS:
 *     LOCALWRITE_LN3_LSB 
 *     LOCALWRITE_LN0_LSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r (0x00011013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEWRITE03.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_s {
	uint32_t v[1];
	uint32_t remotewrite03[1];
	uint32_t _remotewrite03;
} BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_t;

#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_CLR(r) (r).remotewrite03[0] = 0
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_SET(r,d) (r).remotewrite03[0] = d
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_GET(r) (r).remotewrite03[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_GET(r) ((((r).remotewrite03[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_SET(r,f) (r).remotewrite03[0]=(((r).remotewrite03[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_GET(r) (((r).remotewrite03[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_SET(r,f) (r).remotewrite03[0]=(((r).remotewrite03[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEWRITE03.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REMOTEWRITE03r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REMOTEWRITE03r,(_r._remotewrite03))
#define BCMI_HYPERLITE_XGXS_WRITE_REMOTEWRITE03r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REMOTEWRITE03r,(_r._remotewrite03))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEWRITE03r BCMI_HYPERLITE_XGXS_REMOTEWRITE03r
#define REMOTEWRITE03r_SIZE BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_SIZE
typedef BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_t REMOTEWRITE03r_t;
#define REMOTEWRITE03r_CLR BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_CLR
#define REMOTEWRITE03r_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_SET
#define REMOTEWRITE03r_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_GET
#define REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_GET
#define REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN0_LSBf_SET
#define REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_GET
#define REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE03r_LOCALWRITE_LN3_LSBf_SET
#define READ_REMOTEWRITE03r BCMI_HYPERLITE_XGXS_READ_REMOTEWRITE03r
#define WRITE_REMOTEWRITE03r BCMI_HYPERLITE_XGXS_WRITE_REMOTEWRITE03r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REMOTEWRITE03r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REMOTEWRITE12
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8114
 * DESC:     In Band MDIO - remote write ln 1 & 2 register
 * SIZE:     32
 * FIELDS:
 *     LOCALWRITE_LN2_LSB 
 *     LOCALWRITE_LN1_LSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r (0x00011014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEWRITE12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_s {
	uint32_t v[1];
	uint32_t remotewrite12[1];
	uint32_t _remotewrite12;
} BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_t;

#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_CLR(r) (r).remotewrite12[0] = 0
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_SET(r,d) (r).remotewrite12[0] = d
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_GET(r) (r).remotewrite12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_GET(r) ((((r).remotewrite12[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_SET(r,f) (r).remotewrite12[0]=(((r).remotewrite12[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_GET(r) (((r).remotewrite12[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_SET(r,f) (r).remotewrite12[0]=(((r).remotewrite12[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEWRITE12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REMOTEWRITE12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REMOTEWRITE12r,(_r._remotewrite12))
#define BCMI_HYPERLITE_XGXS_WRITE_REMOTEWRITE12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REMOTEWRITE12r,(_r._remotewrite12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEWRITE12r BCMI_HYPERLITE_XGXS_REMOTEWRITE12r
#define REMOTEWRITE12r_SIZE BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_SIZE
typedef BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_t REMOTEWRITE12r_t;
#define REMOTEWRITE12r_CLR BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_CLR
#define REMOTEWRITE12r_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_SET
#define REMOTEWRITE12r_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_GET
#define REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_GET
#define REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN1_LSBf_SET
#define REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_GET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_GET
#define REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_SET BCMI_HYPERLITE_XGXS_REMOTEWRITE12r_LOCALWRITE_LN2_LSBf_SET
#define READ_REMOTEWRITE12r BCMI_HYPERLITE_XGXS_READ_REMOTEWRITE12r
#define WRITE_REMOTEWRITE12r BCMI_HYPERLITE_XGXS_WRITE_REMOTEWRITE12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REMOTEWRITE12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REMOTEREAD12
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8115
 * DESC:     In Band MDIO - remote read ln 1 & 2 register
 * SIZE:     32
 * FIELDS:
 *     LOCALRDDATA      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r (0x00011015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEREAD12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REMOTEREAD12r_s {
	uint32_t v[1];
	uint32_t remoteread12[1];
	uint32_t _remoteread12;
} BCMI_HYPERLITE_XGXS_REMOTEREAD12r_t;

#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_CLR(r) (r).remoteread12[0] = 0
#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_SET(r,d) (r).remoteread12[0] = d
#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_GET(r) (r).remoteread12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_LOCALRDDATAf_GET(r) (((r).remoteread12[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REMOTEREAD12r_LOCALRDDATAf_SET(r,f) (r).remoteread12[0]=(((r).remoteread12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REMOTEREAD12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REMOTEREAD12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REMOTEREAD12r,(_r._remoteread12))
#define BCMI_HYPERLITE_XGXS_WRITE_REMOTEREAD12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REMOTEREAD12r,(_r._remoteread12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEREAD12r BCMI_HYPERLITE_XGXS_REMOTEREAD12r
#define REMOTEREAD12r_SIZE BCMI_HYPERLITE_XGXS_REMOTEREAD12r_SIZE
typedef BCMI_HYPERLITE_XGXS_REMOTEREAD12r_t REMOTEREAD12r_t;
#define REMOTEREAD12r_CLR BCMI_HYPERLITE_XGXS_REMOTEREAD12r_CLR
#define REMOTEREAD12r_SET BCMI_HYPERLITE_XGXS_REMOTEREAD12r_SET
#define REMOTEREAD12r_GET BCMI_HYPERLITE_XGXS_REMOTEREAD12r_GET
#define REMOTEREAD12r_LOCALRDDATAf_GET BCMI_HYPERLITE_XGXS_REMOTEREAD12r_LOCALRDDATAf_GET
#define REMOTEREAD12r_LOCALRDDATAf_SET BCMI_HYPERLITE_XGXS_REMOTEREAD12r_LOCALRDDATAf_SET
#define READ_REMOTEREAD12r BCMI_HYPERLITE_XGXS_READ_REMOTEREAD12r
#define WRITE_REMOTEREAD12r BCMI_HYPERLITE_XGXS_WRITE_REMOTEREAD12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REMOTEREAD12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REMOTEREADX3
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8116
 * DESC:     In Band MDIO - remote read ln 0 & 3 register
 * SIZE:     32
 * FIELDS:
 *     LOCALRDDATAID    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r (0x00011016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEREADX3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REMOTEREADX3r_s {
	uint32_t v[1];
	uint32_t remotereadx3[1];
	uint32_t _remotereadx3;
} BCMI_HYPERLITE_XGXS_REMOTEREADX3r_t;

#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_CLR(r) (r).remotereadx3[0] = 0
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_SET(r,d) (r).remotereadx3[0] = d
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_GET(r) (r).remotereadx3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_RESERVED0f_GET(r) ((((r).remotereadx3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_RESERVED0f_SET(r,f) (r).remotereadx3[0]=(((r).remotereadx3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_LOCALRDDATAIDf_GET(r) (((r).remotereadx3[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEREADX3r_LOCALRDDATAIDf_SET(r,f) (r).remotereadx3[0]=(((r).remotereadx3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEREADX3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REMOTEREADX3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REMOTEREADX3r,(_r._remotereadx3))
#define BCMI_HYPERLITE_XGXS_WRITE_REMOTEREADX3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REMOTEREADX3r,(_r._remotereadx3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEREADX3r BCMI_HYPERLITE_XGXS_REMOTEREADX3r
#define REMOTEREADX3r_SIZE BCMI_HYPERLITE_XGXS_REMOTEREADX3r_SIZE
typedef BCMI_HYPERLITE_XGXS_REMOTEREADX3r_t REMOTEREADX3r_t;
#define REMOTEREADX3r_CLR BCMI_HYPERLITE_XGXS_REMOTEREADX3r_CLR
#define REMOTEREADX3r_SET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_SET
#define REMOTEREADX3r_GET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_GET
#define REMOTEREADX3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_RESERVED0f_GET
#define REMOTEREADX3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_RESERVED0f_SET
#define REMOTEREADX3r_LOCALRDDATAIDf_GET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_LOCALRDDATAIDf_GET
#define REMOTEREADX3r_LOCALRDDATAIDf_SET BCMI_HYPERLITE_XGXS_REMOTEREADX3r_LOCALRDDATAIDf_SET
#define READ_REMOTEREADX3r BCMI_HYPERLITE_XGXS_READ_REMOTEREADX3r
#define WRITE_REMOTEREADX3r BCMI_HYPERLITE_XGXS_WRITE_REMOTEREADX3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REMOTEREADX3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RX_INBANDMDIOSTAT
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8117
 * DESC:     In Band MDIO - status register
 * SIZE:     32
 * FIELDS:
 *     REMOTEWRTDATA_REMOTEWRTDATA 
 *     REMOTEADDR_REMOTEADDR 
 *     RX_INBANDTESTBUS_RX_INBANDTESTBUS 
 *     REMOTEIACN_SEL_REMOTEIACN 
 *     REMOTECONTROL_REMOTECONTROL 
 *     REMOTESTATUS_REMOTESTATUS 
 *     STATUSOFF_RESERVED0 
 *     REMOTEIACN_SEL_RESERVED0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr (0x00011017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_SIZE 4

/*
 * This structure should be used to declare and program RX_INBANDMDIOSTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_s {
	uint32_t v[1];
	uint32_t rx_inbandmdiostat[1];
	uint32_t _rx_inbandmdiostat;
} BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_t;

#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_CLR(r) (r).rx_inbandmdiostat[0] = 0
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_SET(r,d) (r).rx_inbandmdiostat[0] = d
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_GET(r) (r).rx_inbandmdiostat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_GET(r) ((((r).rx_inbandmdiostat[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access RX_INBANDMDIOSTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RX_INBANDMDIOSTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr,(_r._rx_inbandmdiostat))
#define BCMI_HYPERLITE_XGXS_WRITE_RX_INBANDMDIOSTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr,(_r._rx_inbandmdiostat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_INBANDMDIOSTATr BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr
#define RX_INBANDMDIOSTATr_SIZE BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_t RX_INBANDMDIOSTATr_t;
#define RX_INBANDMDIOSTATr_CLR BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_CLR
#define RX_INBANDMDIOSTATr_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_SET
#define RX_INBANDMDIOSTATr_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_GET
#define RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_GET
#define RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEWRTDATA_REMOTEWRTDATAf_SET
#define RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_GET
#define RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTECONTROL_REMOTECONTROLf_SET
#define RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_GET
#define RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_RX_INBANDTESTBUS_RX_INBANDTESTBUSf_SET
#define RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_GET
#define RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_STATUSOFF_RESERVED0f_SET
#define RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_GET
#define RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEADDR_REMOTEADDRf_SET
#define RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_GET
#define RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTESTATUS_REMOTESTATUSf_SET
#define RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_GET
#define RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_RESERVED0f_SET
#define RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_GET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_GET
#define RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_SET BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr_REMOTEIACN_SEL_REMOTEIACNf_SET
#define READ_RX_INBANDMDIOSTATr BCMI_HYPERLITE_XGXS_READ_RX_INBANDMDIOSTATr
#define WRITE_RX_INBANDMDIOSTATr BCMI_HYPERLITE_XGXS_WRITE_RX_INBANDMDIOSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RX_INBANDMDIOSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LOCALIAC
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8118
 * DESC:     In Band MDIO - local IAC register
 * SIZE:     32
 * FIELDS:
 *     LOCALIACREQ      
 *     RESERVED0        
 *     IAC_LN1_LN2      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LOCALIACr (0x00011018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LOCALIACr_SIZE 4

/*
 * This structure should be used to declare and program LOCALIAC.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LOCALIACr_s {
	uint32_t v[1];
	uint32_t localiac[1];
	uint32_t _localiac;
} BCMI_HYPERLITE_XGXS_LOCALIACr_t;

#define BCMI_HYPERLITE_XGXS_LOCALIACr_CLR(r) (r).localiac[0] = 0
#define BCMI_HYPERLITE_XGXS_LOCALIACr_SET(r,d) (r).localiac[0] = d
#define BCMI_HYPERLITE_XGXS_LOCALIACr_GET(r) (r).localiac[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LOCALIACr_IAC_LN1_LN2f_GET(r) ((((r).localiac[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LOCALIACr_IAC_LN1_LN2f_SET(r,f) (r).localiac[0]=(((r).localiac[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LOCALIACr_RESERVED0f_GET(r) ((((r).localiac[0]) >> 1) & 0x7f)
#define BCMI_HYPERLITE_XGXS_LOCALIACr_RESERVED0f_SET(r,f) (r).localiac[0]=(((r).localiac[0] & ~((uint32_t)0x7f << 1)) | ((((uint32_t)f) & 0x7f) << 1))
#define BCMI_HYPERLITE_XGXS_LOCALIACr_LOCALIACREQf_GET(r) (((r).localiac[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LOCALIACr_LOCALIACREQf_SET(r,f) (r).localiac[0]=(((r).localiac[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALIAC.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LOCALIACr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LOCALIACr,(_r._localiac))
#define BCMI_HYPERLITE_XGXS_WRITE_LOCALIACr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LOCALIACr,(_r._localiac))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALIACr BCMI_HYPERLITE_XGXS_LOCALIACr
#define LOCALIACr_SIZE BCMI_HYPERLITE_XGXS_LOCALIACr_SIZE
typedef BCMI_HYPERLITE_XGXS_LOCALIACr_t LOCALIACr_t;
#define LOCALIACr_CLR BCMI_HYPERLITE_XGXS_LOCALIACr_CLR
#define LOCALIACr_SET BCMI_HYPERLITE_XGXS_LOCALIACr_SET
#define LOCALIACr_GET BCMI_HYPERLITE_XGXS_LOCALIACr_GET
#define LOCALIACr_IAC_LN1_LN2f_GET BCMI_HYPERLITE_XGXS_LOCALIACr_IAC_LN1_LN2f_GET
#define LOCALIACr_IAC_LN1_LN2f_SET BCMI_HYPERLITE_XGXS_LOCALIACr_IAC_LN1_LN2f_SET
#define LOCALIACr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LOCALIACr_RESERVED0f_GET
#define LOCALIACr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LOCALIACr_RESERVED0f_SET
#define LOCALIACr_LOCALIACREQf_GET BCMI_HYPERLITE_XGXS_LOCALIACr_LOCALIACREQf_GET
#define LOCALIACr_LOCALIACREQf_SET BCMI_HYPERLITE_XGXS_LOCALIACr_LOCALIACREQf_SET
#define READ_LOCALIACr BCMI_HYPERLITE_XGXS_READ_LOCALIACr
#define WRITE_LOCALIACr BCMI_HYPERLITE_XGXS_WRITE_LOCALIACr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LOCALIACr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REMOTEIACN
 * BLOCKS:   XGXSBLK3
 * REGADDR:  0x8119
 * DESC:     In Band MDIO - remote IAC register
 * SIZE:     32
 * FIELDS:
 *     LOCALIACN        
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr (0x00011019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_SIZE 4

/*
 * This structure should be used to declare and program REMOTEIACN.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REMOTEIACNr_s {
	uint32_t v[1];
	uint32_t remoteiacn[1];
	uint32_t _remoteiacn;
} BCMI_HYPERLITE_XGXS_REMOTEIACNr_t;

#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_CLR(r) (r).remoteiacn[0] = 0
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_SET(r,d) (r).remoteiacn[0] = d
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_GET(r) (r).remoteiacn[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_RESERVED0f_GET(r) ((((r).remoteiacn[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_RESERVED0f_SET(r,f) (r).remoteiacn[0]=(((r).remoteiacn[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_LOCALIACNf_GET(r) (((r).remoteiacn[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REMOTEIACNr_LOCALIACNf_SET(r,f) (r).remoteiacn[0]=(((r).remoteiacn[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEIACN.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REMOTEIACNr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REMOTEIACNr,(_r._remoteiacn))
#define BCMI_HYPERLITE_XGXS_WRITE_REMOTEIACNr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REMOTEIACNr,(_r._remoteiacn))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEIACNr BCMI_HYPERLITE_XGXS_REMOTEIACNr
#define REMOTEIACNr_SIZE BCMI_HYPERLITE_XGXS_REMOTEIACNr_SIZE
typedef BCMI_HYPERLITE_XGXS_REMOTEIACNr_t REMOTEIACNr_t;
#define REMOTEIACNr_CLR BCMI_HYPERLITE_XGXS_REMOTEIACNr_CLR
#define REMOTEIACNr_SET BCMI_HYPERLITE_XGXS_REMOTEIACNr_SET
#define REMOTEIACNr_GET BCMI_HYPERLITE_XGXS_REMOTEIACNr_GET
#define REMOTEIACNr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REMOTEIACNr_RESERVED0f_GET
#define REMOTEIACNr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REMOTEIACNr_RESERVED0f_SET
#define REMOTEIACNr_LOCALIACNf_GET BCMI_HYPERLITE_XGXS_REMOTEIACNr_LOCALIACNf_GET
#define REMOTEIACNr_LOCALIACNf_SET BCMI_HYPERLITE_XGXS_REMOTEIACNr_LOCALIACNf_SET
#define READ_REMOTEIACNr BCMI_HYPERLITE_XGXS_READ_REMOTEIACNr
#define WRITE_REMOTEIACNr BCMI_HYPERLITE_XGXS_WRITE_REMOTEIACNr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REMOTEIACNr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_MISCRXSTATUS
 * BLOCKS:   GP
 * REGADDR:  0x8120
 * DESC:     Miscellaneous Rx status register
 * SIZE:     32
 * FIELDS:
 *     STATUSSELECT1_NP_COUNT 
 *     STATUSSELECT3_KX_DETECT 
 *     STATUSSELECT0_MR_BP_LH 
 *     STATUSSELECT2_RX_CONFIG_ISNOT_0_LH 
 *     STATUSSELECT0_MR_NP_LH 
 *     STATUSSELECT3_S_CL73_RSLV_KX 
 *     STATUSSELECT2_REMOTEPHY_AUTOSEL 
 *     STATUSSELECT3_S_CL73_RSLV_KX4 
 *     STATUSSELECT2_CU_RESOLUTION_ERROR 
 *     STATUSSELECT0_NP_TOGGLE_ERR_LH 
 *     STATUSSELECT0_RX_CONFIG_IS_0_LH 
 *     STATUSSELECT3_S_MR_AN_ENABLE 
 *     STATUSSELECT2_CU_LINKDOWN 
 *     STATUSSELECT0_OVER1GMP_LH 
 *     STATUSSELECT1_RESERVED0 
 *     STATUSSELECT2_DET_TETON_MODE 
 *     STATUSSELECT3_AUTONEG_ENABLE_OV 
 *     STATUSSELECT3_SGMII_SELECTOR_MISMATCH 
 *     STATUSSELECT0_NONMATCHINGMP_LH 
 *     STATUSSELECT2_REMOTE_PHY_ENABLE 
 *     STATUSSELECT2_RESERVED0 
 *     STATUSSELECT3_RESERVED0 
 *     STATUSSELECT0_REMOTEPHYMP_LH 
 *     STATUSSELECT0_NULLMP_LH 
 *     STATUSSELECT0_INVALIDSEQ_LH 
 *     STATUSSELECT0_MATCHINGOUI_LSB_LH 
 *     STATUSSELECT0_MATCHINGOUI_MSB_LH 
 *     STATUSSELECT0_NONMATCHINGOUI_LH 
 *     STATUSSELECT0_MP5_LH 
 *     STATUSSELECT0_UP3_LH 
 *     STATUSSELECT0_TETON_BRK_LINK_LH 
 *     STATUSSELECT0_CAPTURE_NP_LH 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr (0x00012010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program STATUS_MISCRXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_s {
	uint32_t v[1];
	uint32_t status_miscrxstatus[1];
	uint32_t _status_miscrxstatus;
} BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_CLR(r) (r).status_miscrxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_SET(r,d) (r).status_miscrxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_GET(r) (r).status_miscrxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET(r) ((((r).status_miscrxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET(r) ((((r).status_miscrxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).status_miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET(r) ((((r).status_miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET(r) ((((r).status_miscrxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET(r) ((((r).status_miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET(r) ((((r).status_miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET(r) (((r).status_miscrxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET(r) ((((r).status_miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET(r) ((((r).status_miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET(r) ((((r).status_miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET(r) ((((r).status_miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET(r) ((((r).status_miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET(r) ((((r).status_miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET(r) ((((r).status_miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET(r) (((r).status_miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET(r) (((r).status_miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET(r) (((r).status_miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET(r,f) (r).status_miscrxstatus[0]=(((r).status_miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_MISCRXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_MISCRXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr,(_r._status_miscrxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_MISCRXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr,(_r._status_miscrxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_MISCRXSTATUSr BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr
#define STATUS_MISCRXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_t STATUS_MISCRXSTATUSr_t;
#define STATUS_MISCRXSTATUSr_CLR BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_CLR
#define STATUS_MISCRXSTATUSr_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_SET
#define STATUS_MISCRXSTATUSr_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET
#define STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET
#define READ_STATUS_MISCRXSTATUSr BCMI_HYPERLITE_XGXS_READ_STATUS_MISCRXSTATUSr
#define WRITE_STATUS_MISCRXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_STATUS_MISCRXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_MISCRXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_XGXSSTATUS0
 * BLOCKS:   GP
 * REGADDR:  0x8121
 * DESC:     XGXS status register
 * SIZE:     32
 * FIELDS:
 *     SKEW_STATUS      
 *     CKCMP_OVFLOW     
 *     CKCMP_UNFLOW     
 *     PLL_MODE_AFE     
 *     RXFERR           
 *     SEQUENCER_PASS   
 *     SEQUENCER_DONE   
 *     TXD_FIFO_ERR     
 *     TXPLL_LOCK       
 *     RX_REMOTE_FAULT  
 *     TX_REMOTE_FAULT  
 *     RESERVED0        
 *     STATUS_EN        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r (0x00012011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_XGXSSTATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_s {
	uint32_t v[1];
	uint32_t status_xgxsstatus0[1];
	uint32_t _status_xgxsstatus0;
} BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CLR(r) (r).status_xgxsstatus0[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SET(r,d) (r).status_xgxsstatus0[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_GET(r) (r).status_xgxsstatus0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_STATUS_ENf_GET(r) ((((r).status_xgxsstatus0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_STATUS_ENf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RESERVED0f_GET(r) ((((r).status_xgxsstatus0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RESERVED0f_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_GET(r) ((((r).status_xgxsstatus0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_GET(r) ((((r).status_xgxsstatus0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXPLL_LOCKf_GET(r) ((((r).status_xgxsstatus0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXPLL_LOCKf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_GET(r) ((((r).status_xgxsstatus0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_GET(r) ((((r).status_xgxsstatus0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_GET(r) ((((r).status_xgxsstatus0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RXFERRf_GET(r) ((((r).status_xgxsstatus0[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RXFERRf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_GET(r) ((((r).status_xgxsstatus0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_GET(r) ((((r).status_xgxsstatus0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_GET(r) ((((r).status_xgxsstatus0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SKEW_STATUSf_GET(r) (((r).status_xgxsstatus0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SKEW_STATUSf_SET(r,f) (r).status_xgxsstatus0[0]=(((r).status_xgxsstatus0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_XGXSSTATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r,(_r._status_xgxsstatus0))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r,(_r._status_xgxsstatus0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_XGXSSTATUS0r BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r
#define STATUS_XGXSSTATUS0r_SIZE BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_t STATUS_XGXSSTATUS0r_t;
#define STATUS_XGXSSTATUS0r_CLR BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CLR
#define STATUS_XGXSSTATUS0r_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SET
#define STATUS_XGXSSTATUS0r_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_GET
#define STATUS_XGXSSTATUS0r_STATUS_ENf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_STATUS_ENf_GET
#define STATUS_XGXSSTATUS0r_STATUS_ENf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_STATUS_ENf_SET
#define STATUS_XGXSSTATUS0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RESERVED0f_GET
#define STATUS_XGXSSTATUS0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RESERVED0f_SET
#define STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_GET
#define STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TX_REMOTE_FAULTf_SET
#define STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_GET
#define STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RX_REMOTE_FAULTf_SET
#define STATUS_XGXSSTATUS0r_TXPLL_LOCKf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXPLL_LOCKf_GET
#define STATUS_XGXSSTATUS0r_TXPLL_LOCKf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXPLL_LOCKf_SET
#define STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_GET
#define STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_TXD_FIFO_ERRf_SET
#define STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_GET
#define STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_DONEf_SET
#define STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_GET
#define STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SEQUENCER_PASSf_SET
#define STATUS_XGXSSTATUS0r_RXFERRf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RXFERRf_GET
#define STATUS_XGXSSTATUS0r_RXFERRf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_RXFERRf_SET
#define STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_GET
#define STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_PLL_MODE_AFEf_SET
#define STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_GET
#define STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_UNFLOWf_SET
#define STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_GET
#define STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_CKCMP_OVFLOWf_SET
#define STATUS_XGXSSTATUS0r_SKEW_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SKEW_STATUSf_GET
#define STATUS_XGXSSTATUS0r_SKEW_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r_SKEW_STATUSf_SET
#define READ_STATUS_XGXSSTATUS0r BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS0r
#define WRITE_STATUS_XGXSSTATUS0r BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_XGXSSTATUS1
 * BLOCKS:   GP
 * REGADDR:  0x8122
 * DESC:     XGXS status 1 register
 * SIZE:     32
 * FIELDS:
 *     ACTUAL_SPEED_LN0 
 *     PLL_MODE_AFE     
 *     RESERVED0        
 *     AUTONEG_COMPLETE 
 *     LINKSTAT         
 *     LINK10G          
 *     SGMII_MODE       
 *     SERDESMODE_EN_TX 
 *     MODE_10G_TX      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r (0x00012012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_XGXSSTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_s {
	uint32_t v[1];
	uint32_t status_xgxsstatus1[1];
	uint32_t _status_xgxsstatus1;
} BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_CLR(r) (r).status_xgxsstatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SET(r,d) (r).status_xgxsstatus1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_GET(r) (r).status_xgxsstatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_MODE_10G_TXf_GET(r) ((((r).status_xgxsstatus1[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_MODE_10G_TXf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET(r) ((((r).status_xgxsstatus1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SGMII_MODEf_GET(r) ((((r).status_xgxsstatus1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SGMII_MODEf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINK10Gf_GET(r) ((((r).status_xgxsstatus1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINK10Gf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINKSTATf_GET(r) ((((r).status_xgxsstatus1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINKSTATf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET(r) ((((r).status_xgxsstatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_RESERVED0f_GET(r) ((((r).status_xgxsstatus1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_RESERVED0f_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_GET(r) ((((r).status_xgxsstatus1[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_GET(r) (((r).status_xgxsstatus1[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_SET(r,f) (r).status_xgxsstatus1[0]=(((r).status_xgxsstatus1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access STATUS_XGXSSTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r,(_r._status_xgxsstatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r,(_r._status_xgxsstatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_XGXSSTATUS1r BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r
#define STATUS_XGXSSTATUS1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_t STATUS_XGXSSTATUS1r_t;
#define STATUS_XGXSSTATUS1r_CLR BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_CLR
#define STATUS_XGXSSTATUS1r_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SET
#define STATUS_XGXSSTATUS1r_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_GET
#define STATUS_XGXSSTATUS1r_MODE_10G_TXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_MODE_10G_TXf_GET
#define STATUS_XGXSSTATUS1r_MODE_10G_TXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_MODE_10G_TXf_SET
#define STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET
#define STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET
#define STATUS_XGXSSTATUS1r_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SGMII_MODEf_GET
#define STATUS_XGXSSTATUS1r_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_SGMII_MODEf_SET
#define STATUS_XGXSSTATUS1r_LINK10Gf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINK10Gf_GET
#define STATUS_XGXSSTATUS1r_LINK10Gf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINK10Gf_SET
#define STATUS_XGXSSTATUS1r_LINKSTATf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINKSTATf_GET
#define STATUS_XGXSSTATUS1r_LINKSTATf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_LINKSTATf_SET
#define STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET
#define STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET
#define STATUS_XGXSSTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_RESERVED0f_GET
#define STATUS_XGXSSTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_RESERVED0f_SET
#define STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_GET
#define STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_PLL_MODE_AFEf_SET
#define STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_GET
#define STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r_ACTUAL_SPEED_LN0f_SET
#define READ_STATUS_XGXSSTATUS1r BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS1r
#define WRITE_STATUS_XGXSSTATUS1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_XGXSSTATUS2
 * BLOCKS:   GP
 * REGADDR:  0x8123
 * DESC:     XGXS status 2 register
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL_TX      
 *     FREQ_SEL_RX      
 *     GPWRDWN_TX       
 *     GPWRDWN_RX       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r (0x00012013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_XGXSSTATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_s {
	uint32_t v[1];
	uint32_t status_xgxsstatus2[1];
	uint32_t _status_xgxsstatus2;
} BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_CLR(r) (r).status_xgxsstatus2[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_SET(r,d) (r).status_xgxsstatus2[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GET(r) (r).status_xgxsstatus2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_RXf_GET(r) ((((r).status_xgxsstatus2[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_RXf_SET(r,f) (r).status_xgxsstatus2[0]=(((r).status_xgxsstatus2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_TXf_GET(r) ((((r).status_xgxsstatus2[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_TXf_SET(r,f) (r).status_xgxsstatus2[0]=(((r).status_xgxsstatus2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_GET(r) ((((r).status_xgxsstatus2[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_SET(r,f) (r).status_xgxsstatus2[0]=(((r).status_xgxsstatus2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_GET(r) (((r).status_xgxsstatus2[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_SET(r,f) (r).status_xgxsstatus2[0]=(((r).status_xgxsstatus2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access STATUS_XGXSSTATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r,(_r._status_xgxsstatus2))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r,(_r._status_xgxsstatus2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_XGXSSTATUS2r BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r
#define STATUS_XGXSSTATUS2r_SIZE BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_t STATUS_XGXSSTATUS2r_t;
#define STATUS_XGXSSTATUS2r_CLR BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_CLR
#define STATUS_XGXSSTATUS2r_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_SET
#define STATUS_XGXSSTATUS2r_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GET
#define STATUS_XGXSSTATUS2r_GPWRDWN_RXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_RXf_GET
#define STATUS_XGXSSTATUS2r_GPWRDWN_RXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_RXf_SET
#define STATUS_XGXSSTATUS2r_GPWRDWN_TXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_TXf_GET
#define STATUS_XGXSSTATUS2r_GPWRDWN_TXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_GPWRDWN_TXf_SET
#define STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_GET
#define STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_RXf_SET
#define STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_GET
#define STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r_FREQ_SEL_TXf_SET
#define READ_STATUS_XGXSSTATUS2r BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS2r
#define WRITE_STATUS_XGXSSTATUS2r BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_STATUS1000X1
 * BLOCKS:   GP
 * REGADDR:  0x8124
 * DESC:     1000X status 1 register
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     SPEED_STATUS     
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     LINK_STATUS_CHANGE 
 *     EARLY_END_EXTENSION_DETECTED 
 *     CARRIER_EXTEND_ERR_DETECTED 
 *     RX_ERR_DETECTED  
 *     TX_ERR_DETECTED  
 *     CRC_ERR_DETECTED 
 *     FALSE_CARRIER_DETECTED 
 *     RXFIFO_ERR_DETECTED 
 *     TXFIFO_ERR_DETECTED 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r (0x00012014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_STATUS1000X1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_s {
	uint32_t v[1];
	uint32_t status_status1000x1[1];
	uint32_t _status_status1000x1;
} BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CLR(r) (r).status_status1000x1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SET(r,d) (r).status_status1000x1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_GET(r) (r).status_status1000x1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET(r) ((((r).status_status1000x1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_GET(r) ((((r).status_status1000x1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).status_status1000x1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).status_status1000x1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SPEED_STATUSf_GET(r) ((((r).status_status1000x1[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SPEED_STATUSf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_DUPLEX_STATUSf_GET(r) ((((r).status_status1000x1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_DUPLEX_STATUSf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUSf_GET(r) ((((r).status_status1000x1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUSf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SGMII_MODEf_GET(r) (((r).status_status1000x1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SGMII_MODEf_SET(r,f) (r).status_status1000x1[0]=(((r).status_status1000x1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_STATUS1000X1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r,(_r._status_status1000x1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r,(_r._status_status1000x1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_STATUS1000X1r BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r
#define STATUS_STATUS1000X1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_t STATUS_STATUS1000X1r_t;
#define STATUS_STATUS1000X1r_CLR BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CLR
#define STATUS_STATUS1000X1r_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SET
#define STATUS_STATUS1000X1r_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_GET
#define STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET
#define STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET
#define STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CRC_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_TX_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_RX_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET
#define STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET
#define STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET
#define STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET
#define STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_GET
#define STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUS_CHANGEf_SET
#define STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define STATUS_STATUS1000X1r_SPEED_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SPEED_STATUSf_GET
#define STATUS_STATUS1000X1r_SPEED_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SPEED_STATUSf_SET
#define STATUS_STATUS1000X1r_DUPLEX_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_DUPLEX_STATUSf_GET
#define STATUS_STATUS1000X1r_DUPLEX_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_DUPLEX_STATUSf_SET
#define STATUS_STATUS1000X1r_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUSf_GET
#define STATUS_STATUS1000X1r_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_LINK_STATUSf_SET
#define STATUS_STATUS1000X1r_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SGMII_MODEf_GET
#define STATUS_STATUS1000X1r_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r_SGMII_MODEf_SET
#define READ_STATUS_STATUS1000X1r BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X1r
#define WRITE_STATUS_STATUS1000X1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_STATUS1000X2
 * BLOCKS:   GP
 * REGADDR:  0x8125
 * DESC:     1000X status 2 register
 * SIZE:     32
 * FIELDS:
 *     AN_ENABLE_STATE  
 *     ANDISABLELINK_AN_DISABLE_LINK_OK_STATE 
 *     ANERROR_AN_ERROR_STATE 
 *     ABILITY_DETECT_STATE 
 *     ACKNOWLEDGE_DETECT_STATE 
 *     COMPLETE_ACKNOWLEDGE_STATE 
 *     IDLE_DETECT_STATE 
 *     LINKDOWN_SYNCLOSS 
 *     RUDI_INVALID     
 *     RUDI_I           
 *     RUDI_C           
 *     SYNC_STATUS_OK   
 *     SYNC_STATUS_FAIL 
 *     SGMII_SELECTOR_MISMATCH 
 *     AUTONEG_RESOLUTION_ERR 
 *     CONSISTENCY_MISMATCH 
 *     SGMII_MODE_CHANGE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r (0x00012015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_STATUS1000X2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_s {
	uint32_t v[1];
	uint32_t status_status1000x2[1];
	uint32_t _status_status1000x2;
} BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CLR(r) (r).status_status1000x2[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SET(r,d) (r).status_status1000x2[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_GET(r) (r).status_status1000x2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_GET(r) ((((r).status_status1000x2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET(r) ((((r).status_status1000x2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET(r) ((((r).status_status1000x2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).status_status1000x2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_GET(r) ((((r).status_status1000x2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_OKf_GET(r) ((((r).status_status1000x2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_OKf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_Cf_GET(r) ((((r).status_status1000x2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_Cf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_If_GET(r) ((((r).status_status1000x2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_If_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_INVALIDf_GET(r) ((((r).status_status1000x2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_INVALIDf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET(r) ((((r).status_status1000x2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET(r) ((((r).status_status1000x2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AN_ENABLE_STATEf_GET(r) (((r).status_status1000x2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AN_ENABLE_STATEf_SET(r,f) (r).status_status1000x2[0]=(((r).status_status1000x2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_STATUS1000X2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r,(_r._status_status1000x2))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r,(_r._status_status1000x2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_STATUS1000X2r BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r
#define STATUS_STATUS1000X2r_SIZE BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_t STATUS_STATUS1000X2r_t;
#define STATUS_STATUS1000X2r_CLR BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CLR
#define STATUS_STATUS1000X2r_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SET
#define STATUS_STATUS1000X2r_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_GET
#define STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_GET
#define STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_MODE_CHANGEf_SET
#define STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET
#define STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET
#define STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET
#define STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET
#define STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET
#define STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET
#define STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_GET
#define STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_FAILf_SET
#define STATUS_STATUS1000X2r_SYNC_STATUS_OKf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_OKf_GET
#define STATUS_STATUS1000X2r_SYNC_STATUS_OKf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_SYNC_STATUS_OKf_SET
#define STATUS_STATUS1000X2r_RUDI_Cf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_Cf_GET
#define STATUS_STATUS1000X2r_RUDI_Cf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_Cf_SET
#define STATUS_STATUS1000X2r_RUDI_If_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_If_GET
#define STATUS_STATUS1000X2r_RUDI_If_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_If_SET
#define STATUS_STATUS1000X2r_RUDI_INVALIDf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_INVALIDf_GET
#define STATUS_STATUS1000X2r_RUDI_INVALIDf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_RUDI_INVALIDf_SET
#define STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET
#define STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET
#define STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_GET
#define STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_IDLE_DETECT_STATEf_SET
#define STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET
#define STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET
#define STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET
#define STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET
#define STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_GET
#define STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ABILITY_DETECT_STATEf_SET
#define STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET
#define STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET
#define STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET
#define STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET
#define STATUS_STATUS1000X2r_AN_ENABLE_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AN_ENABLE_STATEf_GET
#define STATUS_STATUS1000X2r_AN_ENABLE_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r_AN_ENABLE_STATEf_SET
#define READ_STATUS_STATUS1000X2r BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X2r
#define WRITE_STATUS_STATUS1000X2r BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_STATUS1000X3
 * BLOCKS:   GP
 * REGADDR:  0x8126
 * DESC:     1000X status 3 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     SD_FILTER_CHG    
 *     SD_MUX           
 *     SD_FILTER        
 *     LATCH_LINKDOWN   
 *     REMOTEPHY_AUTOSEL 
 *     PD_PARK_AN       
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r (0x00012016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_STATUS1000X3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_s {
	uint32_t v[1];
	uint32_t status_status1000x3[1];
	uint32_t _status_status1000x3;
} BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_CLR(r) (r).status_status1000x3[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SET(r,d) (r).status_status1000x3[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_GET(r) (r).status_status1000x3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED0f_GET(r) ((((r).status_status1000x3[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED0f_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_PD_PARK_ANf_GET(r) ((((r).status_status1000x3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_PD_PARK_ANf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET(r) ((((r).status_status1000x3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_LATCH_LINKDOWNf_GET(r) ((((r).status_status1000x3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_LATCH_LINKDOWNf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTERf_GET(r) ((((r).status_status1000x3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTERf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_MUXf_GET(r) ((((r).status_status1000x3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_MUXf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTER_CHGf_GET(r) ((((r).status_status1000x3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTER_CHGf_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED1f_GET(r) (((r).status_status1000x3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED1f_SET(r,f) (r).status_status1000x3[0]=(((r).status_status1000x3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access STATUS_STATUS1000X3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r,(_r._status_status1000x3))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r,(_r._status_status1000x3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_STATUS1000X3r BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r
#define STATUS_STATUS1000X3r_SIZE BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_t STATUS_STATUS1000X3r_t;
#define STATUS_STATUS1000X3r_CLR BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_CLR
#define STATUS_STATUS1000X3r_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SET
#define STATUS_STATUS1000X3r_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_GET
#define STATUS_STATUS1000X3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED0f_GET
#define STATUS_STATUS1000X3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED0f_SET
#define STATUS_STATUS1000X3r_PD_PARK_ANf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_PD_PARK_ANf_GET
#define STATUS_STATUS1000X3r_PD_PARK_ANf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_PD_PARK_ANf_SET
#define STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET
#define STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET
#define STATUS_STATUS1000X3r_LATCH_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_LATCH_LINKDOWNf_GET
#define STATUS_STATUS1000X3r_LATCH_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_LATCH_LINKDOWNf_SET
#define STATUS_STATUS1000X3r_SD_FILTERf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTERf_GET
#define STATUS_STATUS1000X3r_SD_FILTERf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTERf_SET
#define STATUS_STATUS1000X3r_SD_MUXf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_MUXf_GET
#define STATUS_STATUS1000X3r_SD_MUXf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_MUXf_SET
#define STATUS_STATUS1000X3r_SD_FILTER_CHGf_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTER_CHGf_GET
#define STATUS_STATUS1000X3r_SD_FILTER_CHGf_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_SD_FILTER_CHGf_SET
#define STATUS_STATUS1000X3r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED1f_GET
#define STATUS_STATUS1000X3r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r_RESERVED1f_SET
#define READ_STATUS_STATUS1000X3r BCMI_HYPERLITE_XGXS_READ_STATUS_STATUS1000X3r
#define WRITE_STATUS_STATUS1000X3r BCMI_HYPERLITE_XGXS_WRITE_STATUS_STATUS1000X3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_STATUS1000X3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_TPOUT_1
 * BLOCKS:   GP
 * REGADDR:  0x8127
 * DESC:     Test port out bits 15:0, tpout[15:0]
 * SIZE:     32
 * FIELDS:
 *     TPOUT1           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r (0x00012017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_TPOUT_1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_s {
	uint32_t v[1];
	uint32_t status_tpout_1[1];
	uint32_t _status_tpout_1;
} BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_CLR(r) (r).status_tpout_1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_SET(r,d) (r).status_tpout_1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_GET(r) (r).status_tpout_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_TPOUT1f_GET(r) (((r).status_tpout_1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_TPOUT1f_SET(r,f) (r).status_tpout_1[0]=(((r).status_tpout_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access STATUS_TPOUT_1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_TPOUT_1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r,(_r._status_tpout_1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_TPOUT_1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r,(_r._status_tpout_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_TPOUT_1r BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r
#define STATUS_TPOUT_1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_t STATUS_TPOUT_1r_t;
#define STATUS_TPOUT_1r_CLR BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_CLR
#define STATUS_TPOUT_1r_SET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_SET
#define STATUS_TPOUT_1r_GET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_GET
#define STATUS_TPOUT_1r_TPOUT1f_GET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_TPOUT1f_GET
#define STATUS_TPOUT_1r_TPOUT1f_SET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r_TPOUT1f_SET
#define READ_STATUS_TPOUT_1r BCMI_HYPERLITE_XGXS_READ_STATUS_TPOUT_1r
#define WRITE_STATUS_TPOUT_1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_TPOUT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_TPOUT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_TPOUT_2
 * BLOCKS:   GP
 * REGADDR:  0x8128
 * DESC:     Test port out bits 23:8, tpout[23:8]
 * SIZE:     32
 * FIELDS:
 *     TPOUT2           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r (0x00012018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_TPOUT_2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_s {
	uint32_t v[1];
	uint32_t status_tpout_2[1];
	uint32_t _status_tpout_2;
} BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_CLR(r) (r).status_tpout_2[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_SET(r,d) (r).status_tpout_2[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_GET(r) (r).status_tpout_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_TPOUT2f_GET(r) (((r).status_tpout_2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_TPOUT2f_SET(r,f) (r).status_tpout_2[0]=(((r).status_tpout_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access STATUS_TPOUT_2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_TPOUT_2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r,(_r._status_tpout_2))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_TPOUT_2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r,(_r._status_tpout_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_TPOUT_2r BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r
#define STATUS_TPOUT_2r_SIZE BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_t STATUS_TPOUT_2r_t;
#define STATUS_TPOUT_2r_CLR BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_CLR
#define STATUS_TPOUT_2r_SET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_SET
#define STATUS_TPOUT_2r_GET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_GET
#define STATUS_TPOUT_2r_TPOUT2f_GET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_TPOUT2f_GET
#define STATUS_TPOUT_2r_TPOUT2f_SET BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r_TPOUT2f_SET
#define READ_STATUS_TPOUT_2r BCMI_HYPERLITE_XGXS_READ_STATUS_TPOUT_2r
#define WRITE_STATUS_TPOUT_2r BCMI_HYPERLITE_XGXS_WRITE_STATUS_TPOUT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_TPOUT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_XGXSSTATUS3
 * BLOCKS:   GP
 * REGADDR:  0x8129
 * DESC:     XGXS status 3 register
 * SIZE:     32
 * FIELDS:
 *     HCD_OVER_1G      
 *     GPWRDWN_PLL      
 *     PD_PARK_AN       
 *     LATCH_LINKDOWN_10G_O 
 *     LINK_LATCHDOWN   
 *     LINK             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r (0x00012019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_XGXSSTATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_s {
	uint32_t v[1];
	uint32_t status_xgxsstatus3[1];
	uint32_t _status_xgxsstatus3;
} BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_CLR(r) (r).status_xgxsstatus3[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_SET(r,d) (r).status_xgxsstatus3[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GET(r) (r).status_xgxsstatus3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINKf_GET(r) ((((r).status_xgxsstatus3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINKf_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_GET(r) ((((r).status_xgxsstatus3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET(r) ((((r).status_xgxsstatus3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_PD_PARK_ANf_GET(r) ((((r).status_xgxsstatus3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_PD_PARK_ANf_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_GET(r) ((((r).status_xgxsstatus3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_GET(r) (((r).status_xgxsstatus3[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_SET(r,f) (r).status_xgxsstatus3[0]=(((r).status_xgxsstatus3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access STATUS_XGXSSTATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r,(_r._status_xgxsstatus3))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r,(_r._status_xgxsstatus3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_XGXSSTATUS3r BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r
#define STATUS_XGXSSTATUS3r_SIZE BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_t STATUS_XGXSSTATUS3r_t;
#define STATUS_XGXSSTATUS3r_CLR BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_CLR
#define STATUS_XGXSSTATUS3r_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_SET
#define STATUS_XGXSSTATUS3r_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GET
#define STATUS_XGXSSTATUS3r_LINKf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINKf_GET
#define STATUS_XGXSSTATUS3r_LINKf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINKf_SET
#define STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_GET
#define STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LINK_LATCHDOWNf_SET
#define STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET
#define STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET
#define STATUS_XGXSSTATUS3r_PD_PARK_ANf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_PD_PARK_ANf_GET
#define STATUS_XGXSSTATUS3r_PD_PARK_ANf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_PD_PARK_ANf_SET
#define STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_GET
#define STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_GPWRDWN_PLLf_SET
#define STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_GET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_GET
#define STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_SET BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r_HCD_OVER_1Gf_SET
#define READ_STATUS_XGXSSTATUS3r BCMI_HYPERLITE_XGXS_READ_STATUS_XGXSSTATUS3r
#define WRITE_STATUS_XGXSSTATUS3r BCMI_HYPERLITE_XGXS_WRITE_STATUS_XGXSSTATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_XGXSSTATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_X2500STATUS1
 * BLOCKS:   GP
 * REGADDR:  0x812a
 * DESC:     2500X status register
 * SIZE:     32
 * FIELDS:
 *     FAIL_CNT         
 *     S_DEAD           
 *     S_LOSTLINK       
 *     S_COMPLETE       
 *     S_WAIT4LINK      
 *     S_PLLSWIT        
 *     S_CLOCKSWIT      
 *     S_WAIT30MS       
 *     S_WAIT2RES       
 *     S_BC_REG_RST     
 *     LATCHMDIO        
 *     LATCH_HCD_OVER_1G 
 *     HCD_OVER_1G_OR   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r (0x0001201a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_X2500STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_s {
	uint32_t v[1];
	uint32_t status_x2500status1[1];
	uint32_t _status_x2500status1;
} BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_CLR(r) (r).status_x2500status1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_SET(r,d) (r).status_x2500status1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_GET(r) (r).status_x2500status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_GET(r) ((((r).status_x2500status1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET(r) ((((r).status_x2500status1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCHMDIOf_GET(r) ((((r).status_x2500status1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCHMDIOf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_BC_REG_RSTf_GET(r) ((((r).status_x2500status1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_BC_REG_RSTf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT2RESf_GET(r) ((((r).status_x2500status1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT2RESf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT30MSf_GET(r) ((((r).status_x2500status1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT30MSf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_CLOCKSWITf_GET(r) ((((r).status_x2500status1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_CLOCKSWITf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_PLLSWITf_GET(r) ((((r).status_x2500status1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_PLLSWITf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT4LINKf_GET(r) ((((r).status_x2500status1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT4LINKf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_COMPLETEf_GET(r) ((((r).status_x2500status1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_COMPLETEf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_LOSTLINKf_GET(r) ((((r).status_x2500status1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_LOSTLINKf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_DEADf_GET(r) ((((r).status_x2500status1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_DEADf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_FAIL_CNTf_GET(r) (((r).status_x2500status1[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_FAIL_CNTf_SET(r,f) (r).status_x2500status1[0]=(((r).status_x2500status1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access STATUS_X2500STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_X2500STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r,(_r._status_x2500status1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_X2500STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r,(_r._status_x2500status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_X2500STATUS1r BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r
#define STATUS_X2500STATUS1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_t STATUS_X2500STATUS1r_t;
#define STATUS_X2500STATUS1r_CLR BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_CLR
#define STATUS_X2500STATUS1r_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_SET
#define STATUS_X2500STATUS1r_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_GET
#define STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_GET
#define STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_HCD_OVER_1G_ORf_SET
#define STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET
#define STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET
#define STATUS_X2500STATUS1r_LATCHMDIOf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCHMDIOf_GET
#define STATUS_X2500STATUS1r_LATCHMDIOf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_LATCHMDIOf_SET
#define STATUS_X2500STATUS1r_S_BC_REG_RSTf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_BC_REG_RSTf_GET
#define STATUS_X2500STATUS1r_S_BC_REG_RSTf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_BC_REG_RSTf_SET
#define STATUS_X2500STATUS1r_S_WAIT2RESf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT2RESf_GET
#define STATUS_X2500STATUS1r_S_WAIT2RESf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT2RESf_SET
#define STATUS_X2500STATUS1r_S_WAIT30MSf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT30MSf_GET
#define STATUS_X2500STATUS1r_S_WAIT30MSf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT30MSf_SET
#define STATUS_X2500STATUS1r_S_CLOCKSWITf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_CLOCKSWITf_GET
#define STATUS_X2500STATUS1r_S_CLOCKSWITf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_CLOCKSWITf_SET
#define STATUS_X2500STATUS1r_S_PLLSWITf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_PLLSWITf_GET
#define STATUS_X2500STATUS1r_S_PLLSWITf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_PLLSWITf_SET
#define STATUS_X2500STATUS1r_S_WAIT4LINKf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT4LINKf_GET
#define STATUS_X2500STATUS1r_S_WAIT4LINKf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_WAIT4LINKf_SET
#define STATUS_X2500STATUS1r_S_COMPLETEf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_COMPLETEf_GET
#define STATUS_X2500STATUS1r_S_COMPLETEf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_COMPLETEf_SET
#define STATUS_X2500STATUS1r_S_LOSTLINKf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_LOSTLINKf_GET
#define STATUS_X2500STATUS1r_S_LOSTLINKf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_LOSTLINKf_SET
#define STATUS_X2500STATUS1r_S_DEADf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_DEADf_GET
#define STATUS_X2500STATUS1r_S_DEADf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_S_DEADf_SET
#define STATUS_X2500STATUS1r_FAIL_CNTf_GET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_FAIL_CNTf_GET
#define STATUS_X2500STATUS1r_FAIL_CNTf_SET BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r_FAIL_CNTf_SET
#define READ_STATUS_X2500STATUS1r BCMI_HYPERLITE_XGXS_READ_STATUS_X2500STATUS1r
#define WRITE_STATUS_X2500STATUS1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_X2500STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_X2500STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_TOPANSTATUS1
 * BLOCKS:   GP
 * REGADDR:  0x812b
 * DESC:     CL73 AN status 1 register
 * SIZE:     32
 * FIELDS:
 *     CL73_AUTONEG_COMPLETE 
 *     CL37_AUTONEG_COMPLETE 
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     CL73_MR_LP_AUTONEG_ABLE 
 *     CL73_LP_NP_BAM_ABLE 
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     ACTUAL_SPEED     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r (0x0001201b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_TOPANSTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_s {
	uint32_t v[1];
	uint32_t status_topanstatus1[1];
	uint32_t _status_topanstatus1;
} BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CLR(r) (r).status_topanstatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_SET(r,d) (r).status_topanstatus1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_GET(r) (r).status_topanstatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_RESERVED0f_GET(r) ((((r).status_topanstatus1[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_RESERVED0f_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_GET(r) ((((r).status_topanstatus1[0]) >> 8) & 0x3f)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).status_topanstatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).status_topanstatus1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET(r) ((((r).status_topanstatus1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET(r) ((((r).status_topanstatus1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_GET(r) ((((r).status_topanstatus1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_LINK_STATUSf_GET(r) ((((r).status_topanstatus1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_LINK_STATUSf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET(r) ((((r).status_topanstatus1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET(r) (((r).status_topanstatus1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET(r,f) (r).status_topanstatus1[0]=(((r).status_topanstatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_TOPANSTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_TOPANSTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r,(_r._status_topanstatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_TOPANSTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r,(_r._status_topanstatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_TOPANSTATUS1r BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r
#define STATUS_TOPANSTATUS1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_t STATUS_TOPANSTATUS1r_t;
#define STATUS_TOPANSTATUS1r_CLR BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CLR
#define STATUS_TOPANSTATUS1r_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_SET
#define STATUS_TOPANSTATUS1r_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_GET
#define STATUS_TOPANSTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_RESERVED0f_GET
#define STATUS_TOPANSTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_RESERVED0f_SET
#define STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_GET
#define STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_ACTUAL_SPEEDf_SET
#define STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET
#define STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET
#define STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET
#define STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET
#define STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_GET
#define STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_DUPLEX_STATUSf_SET
#define STATUS_TOPANSTATUS1r_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_LINK_STATUSf_GET
#define STATUS_TOPANSTATUS1r_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_LINK_STATUSf_SET
#define STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET
#define STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET
#define STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET
#define STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET
#define READ_STATUS_TOPANSTATUS1r BCMI_HYPERLITE_XGXS_READ_STATUS_TOPANSTATUS1r
#define WRITE_STATUS_TOPANSTATUS1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_TOPANSTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_TOPANSTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_LP_UP1
 * BLOCKS:   GP
 * REGADDR:  0x812c
 * DESC:     AN link partner user page 1
 * SIZE:     32
 * FIELDS:
 *     DATARATE_2P5GX1  
 *     DATARATE_5GX4    
 *     DATARATE_6GX4    
 *     DATARATE_10GX4   
 *     DATARATE_10GCX4  
 *     DATARATE_12GX4   
 *     DATARATE_12P5GX4 
 *     DATARATE_13GX4   
 *     DATARATE_15GX4   
 *     DATARATE_16GX4   
 *     DATARATE_20GX4   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r (0x0001201c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_LP_UP1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_s {
	uint32_t v[1];
	uint32_t status_lp_up1[1];
	uint32_t _status_lp_up1;
} BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_CLR(r) (r).status_lp_up1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_SET(r,d) (r).status_lp_up1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_GET(r) (r).status_lp_up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_RESERVED0f_GET(r) ((((r).status_lp_up1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_RESERVED0f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_20GX4f_GET(r) ((((r).status_lp_up1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_20GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_16GX4f_GET(r) ((((r).status_lp_up1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_16GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_15GX4f_GET(r) ((((r).status_lp_up1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_15GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_13GX4f_GET(r) ((((r).status_lp_up1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_13GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12P5GX4f_GET(r) ((((r).status_lp_up1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12P5GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12GX4f_GET(r) ((((r).status_lp_up1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GCX4f_GET(r) ((((r).status_lp_up1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GCX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GX4f_GET(r) ((((r).status_lp_up1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_6GX4f_GET(r) ((((r).status_lp_up1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_6GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_5GX4f_GET(r) ((((r).status_lp_up1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_5GX4f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_2P5GX1f_GET(r) (((r).status_lp_up1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_2P5GX1f_SET(r,f) (r).status_lp_up1[0]=(((r).status_lp_up1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_LP_UP1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r,(_r._status_lp_up1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r,(_r._status_lp_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_LP_UP1r BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r
#define STATUS_LP_UP1r_SIZE BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_t STATUS_LP_UP1r_t;
#define STATUS_LP_UP1r_CLR BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_CLR
#define STATUS_LP_UP1r_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_SET
#define STATUS_LP_UP1r_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_GET
#define STATUS_LP_UP1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_RESERVED0f_GET
#define STATUS_LP_UP1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_RESERVED0f_SET
#define STATUS_LP_UP1r_DATARATE_20GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_20GX4f_GET
#define STATUS_LP_UP1r_DATARATE_20GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_20GX4f_SET
#define STATUS_LP_UP1r_DATARATE_16GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_16GX4f_GET
#define STATUS_LP_UP1r_DATARATE_16GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_16GX4f_SET
#define STATUS_LP_UP1r_DATARATE_15GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_15GX4f_GET
#define STATUS_LP_UP1r_DATARATE_15GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_15GX4f_SET
#define STATUS_LP_UP1r_DATARATE_13GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_13GX4f_GET
#define STATUS_LP_UP1r_DATARATE_13GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_13GX4f_SET
#define STATUS_LP_UP1r_DATARATE_12P5GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12P5GX4f_GET
#define STATUS_LP_UP1r_DATARATE_12P5GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12P5GX4f_SET
#define STATUS_LP_UP1r_DATARATE_12GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12GX4f_GET
#define STATUS_LP_UP1r_DATARATE_12GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_12GX4f_SET
#define STATUS_LP_UP1r_DATARATE_10GCX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GCX4f_GET
#define STATUS_LP_UP1r_DATARATE_10GCX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GCX4f_SET
#define STATUS_LP_UP1r_DATARATE_10GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GX4f_GET
#define STATUS_LP_UP1r_DATARATE_10GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_10GX4f_SET
#define STATUS_LP_UP1r_DATARATE_6GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_6GX4f_GET
#define STATUS_LP_UP1r_DATARATE_6GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_6GX4f_SET
#define STATUS_LP_UP1r_DATARATE_5GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_5GX4f_GET
#define STATUS_LP_UP1r_DATARATE_5GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_5GX4f_SET
#define STATUS_LP_UP1r_DATARATE_2P5GX1f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_2P5GX1f_GET
#define STATUS_LP_UP1r_DATARATE_2P5GX1f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r_DATARATE_2P5GX1f_SET
#define READ_STATUS_LP_UP1r BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP1r
#define WRITE_STATUS_LP_UP1r BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_LP_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_LP_UP2
 * BLOCKS:   GP
 * REGADDR:  0x812d
 * DESC:     AN link partner user page 2
 * SIZE:     32
 * FIELDS:
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS      
 *     VALID            
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r (0x0001201d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_LP_UP2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_s {
	uint32_t v[1];
	uint32_t status_lp_up2[1];
	uint32_t _status_lp_up2;
} BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_CLR(r) (r).status_lp_up2[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_SET(r,d) (r).status_lp_up2[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_GET(r) (r).status_lp_up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_RESERVED0f_GET(r) ((((r).status_lp_up2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_RESERVED0f_SET(r,f) (r).status_lp_up2[0]=(((r).status_lp_up2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_VALIDf_GET(r) ((((r).status_lp_up2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_VALIDf_SET(r,f) (r).status_lp_up2[0]=(((r).status_lp_up2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_PREEMPHASISf_GET(r) ((((r).status_lp_up2[0]) >> 6) & 0xf)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_PREEMPHASISf_SET(r,f) (r).status_lp_up2[0]=(((r).status_lp_up2[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IDRIVERf_GET(r) ((((r).status_lp_up2[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IDRIVERf_SET(r,f) (r).status_lp_up2[0]=(((r).status_lp_up2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IPREDRIVERf_GET(r) (((r).status_lp_up2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IPREDRIVERf_SET(r,f) (r).status_lp_up2[0]=(((r).status_lp_up2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access STATUS_LP_UP2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r,(_r._status_lp_up2))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r,(_r._status_lp_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_LP_UP2r BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r
#define STATUS_LP_UP2r_SIZE BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_t STATUS_LP_UP2r_t;
#define STATUS_LP_UP2r_CLR BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_CLR
#define STATUS_LP_UP2r_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_SET
#define STATUS_LP_UP2r_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_GET
#define STATUS_LP_UP2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_RESERVED0f_GET
#define STATUS_LP_UP2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_RESERVED0f_SET
#define STATUS_LP_UP2r_VALIDf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_VALIDf_GET
#define STATUS_LP_UP2r_VALIDf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_VALIDf_SET
#define STATUS_LP_UP2r_PREEMPHASISf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_PREEMPHASISf_GET
#define STATUS_LP_UP2r_PREEMPHASISf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_PREEMPHASISf_SET
#define STATUS_LP_UP2r_IDRIVERf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IDRIVERf_GET
#define STATUS_LP_UP2r_IDRIVERf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IDRIVERf_SET
#define STATUS_LP_UP2r_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IPREDRIVERf_GET
#define STATUS_LP_UP2r_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r_IPREDRIVERf_SET
#define READ_STATUS_LP_UP2r BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP2r
#define WRITE_STATUS_LP_UP2r BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_LP_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS_LP_UP3
 * BLOCKS:   GP
 * REGADDR:  0x812e
 * DESC:     AN link partner user page 3
 * SIZE:     32
 * FIELDS:
 *     HIGIG2           
 *     SCRAMBLE_8B10B   
 *     RESERVED1        
 *     DATARATE_25P45GX4 
 *     DATARATE_21GX4   
 *     LAST             
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r (0x0001201e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS_LP_UP3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_s {
	uint32_t v[1];
	uint32_t status_lp_up3[1];
	uint32_t _status_lp_up3;
} BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_t;

#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_CLR(r) (r).status_lp_up3[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SET(r,d) (r).status_lp_up3[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_GET(r) (r).status_lp_up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED0f_GET(r) ((((r).status_lp_up3[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED0f_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_LASTf_GET(r) ((((r).status_lp_up3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_LASTf_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_21GX4f_GET(r) ((((r).status_lp_up3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_21GX4f_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_25P45GX4f_GET(r) ((((r).status_lp_up3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_25P45GX4f_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED1f_GET(r) ((((r).status_lp_up3[0]) >> 2) & 0x3f)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED1f_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SCRAMBLE_8B10Bf_GET(r) ((((r).status_lp_up3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SCRAMBLE_8B10Bf_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_HIGIG2f_GET(r) (((r).status_lp_up3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_HIGIG2f_SET(r,f) (r).status_lp_up3[0]=(((r).status_lp_up3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS_LP_UP3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r,(_r._status_lp_up3))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r,(_r._status_lp_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS_LP_UP3r BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r
#define STATUS_LP_UP3r_SIZE BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_t STATUS_LP_UP3r_t;
#define STATUS_LP_UP3r_CLR BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_CLR
#define STATUS_LP_UP3r_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SET
#define STATUS_LP_UP3r_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_GET
#define STATUS_LP_UP3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED0f_GET
#define STATUS_LP_UP3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED0f_SET
#define STATUS_LP_UP3r_LASTf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_LASTf_GET
#define STATUS_LP_UP3r_LASTf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_LASTf_SET
#define STATUS_LP_UP3r_DATARATE_21GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_21GX4f_GET
#define STATUS_LP_UP3r_DATARATE_21GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_21GX4f_SET
#define STATUS_LP_UP3r_DATARATE_25P45GX4f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_25P45GX4f_GET
#define STATUS_LP_UP3r_DATARATE_25P45GX4f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_DATARATE_25P45GX4f_SET
#define STATUS_LP_UP3r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED1f_GET
#define STATUS_LP_UP3r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_RESERVED1f_SET
#define STATUS_LP_UP3r_SCRAMBLE_8B10Bf_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SCRAMBLE_8B10Bf_GET
#define STATUS_LP_UP3r_SCRAMBLE_8B10Bf_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_SCRAMBLE_8B10Bf_SET
#define STATUS_LP_UP3r_HIGIG2f_GET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_HIGIG2f_GET
#define STATUS_LP_UP3r_HIGIG2f_SET BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r_HIGIG2f_SET
#define READ_STATUS_LP_UP3r BCMI_HYPERLITE_XGXS_READ_STATUS_LP_UP3r
#define WRITE_STATUS_LP_UP3r BCMI_HYPERLITE_XGXS_WRITE_STATUS_LP_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS_LP_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GSTATUS
 * BLOCKS:   AN73
 * REGADDR:  0x8130
 * DESC:     10G parallel detect status register
 * SIZE:     32
 * FIELDS:
 *     PDSTATUS0_RXSEQDONE 
 *     PDSTATUS1_WAIT4LOCK_LH 
 *     PDSTATUS1_WAIT4SIGDET_LH 
 *     PDSTATUS1_WAIT4LINK10G_LH 
 *     PDSTATUS1_LINK10GRETRY_LH 
 *     PDSTATUS0_PD_LSSFAULTCOUNT 
 *     PDSTATUS1_SAMPLEFAULT_LH 
 *     PDSTATUS1_WAIT4LINK12G_LH 
 *     PDSTATUS1_LINK12GRETRY_LH 
 *     PDSTATUS1_COMPLETE_LH 
 *     PDSTATUS0_PD_PARK_AN 
 *     PDSTATUS1_FAIL_LH 
 *     PDSTATUS1_RESERVED0 
 *     PDSTATUS0_PD_BUSY 
 *     PDSTATUS0_PD_TXDLANEOFF 
 *     PDSTATUS0_PD_TUNEPLL10G 
 *     PDSTATUS0_PD_TUNEPLL12G 
 *     PDSTATUS0_PD_LSSFAULTCOUNT_EN 
 *     PDSTATUS0_PD_CX4_EN 
 *     PDSTATUS0_PD_LINK 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr (0x00013010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_s {
	uint32_t v[1];
	uint32_t pdet_pardet10gstatus[1];
	uint32_t _pdet_pardet10gstatus;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_CLR(r) (r).pdet_pardet10gstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_SET(r,d) (r).pdet_pardet10gstatus[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_GET(r) (r).pdet_pardet10gstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_GET(r) (((r).pdet_pardet10gstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_GET(r) ((((r).pdet_pardet10gstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_GET(r) (((r).pdet_pardet10gstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_SET(r,f) (r).pdet_pardet10gstatus[0]=(((r).pdet_pardet10gstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PDET_PARDET10GSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr,(_r._pdet_pardet10gstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr,(_r._pdet_pardet10gstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GSTATUSr BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr
#define PDET_PARDET10GSTATUSr_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_t PDET_PARDET10GSTATUSr_t;
#define PDET_PARDET10GSTATUSr_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_CLR
#define PDET_PARDET10GSTATUSr_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_SET
#define PDET_PARDET10GSTATUSr_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_RESERVED0f_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LINKf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_CX4_ENf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNT_ENf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL12Gf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TUNEPLL10Gf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_TXDLANEOFFf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_BUSYf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_PARK_ANf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_FAIL_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_PD_LSSFAULTCOUNTf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_COMPLETE_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK12GRETRY_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK12G_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_SAMPLEFAULT_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS0_RXSEQDONEf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_LINK10GRETRY_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LINK10G_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4SIGDET_LHf_SET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_GET
#define PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr_PDSTATUS1_WAIT4LOCK_LHf_SET
#define READ_PDET_PARDET10GSTATUSr BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GSTATUSr
#define WRITE_PDET_PARDET10GSTATUSr BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GCONTROL
 * BLOCKS:   AN73
 * REGADDR:  0x8131
 * DESC:     10G parallel detect control register
 * SIZE:     32
 * FIELDS:
 *     PARDET10G_EN     
 *     PD_FAST_TIMER_EN 
 *     PD_STAT_SEL      
 *     PD_10G_DISABLE   
 *     PD_10G_TXDON_DISABLE 
 *     PD_12G_DISABLE   
 *     PD_12G_TXDON_DISABLE 
 *     PD_SW_TXDOFF     
 *     PD_SW_LSSFAULTCOUNT_EN 
 *     PD_SW_TUNEPLL10G 
 *     PD_SW_TUNEPLL12G 
 *     PD_SW_CX4_EN     
 *     PD_SW_BUSY_AN    
 *     PD_SW_OVERIDE    
 *     PD_CX4_INIT      
 *     FORCE_PARDET10G_EN 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr (0x00013011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_s {
	uint32_t v[1];
	uint32_t pdet_pardet10gcontrol[1];
	uint32_t _pdet_pardet10gcontrol;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_CLR(r) (r).pdet_pardet10gcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_SET(r,d) (r).pdet_pardet10gcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_GET(r) (r).pdet_pardet10gcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_CX4_INITf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_CX4_INITf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_STAT_SELf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_STAT_SELf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET(r) ((((r).pdet_pardet10gcontrol[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PARDET10G_ENf_GET(r) (((r).pdet_pardet10gcontrol[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PARDET10G_ENf_SET(r,f) (r).pdet_pardet10gcontrol[0]=(((r).pdet_pardet10gcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PDET_PARDET10GCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr,(_r._pdet_pardet10gcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr,(_r._pdet_pardet10gcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GCONTROLr BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr
#define PDET_PARDET10GCONTROLr_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_t PDET_PARDET10GCONTROLr_t;
#define PDET_PARDET10GCONTROLr_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_CLR
#define PDET_PARDET10GCONTROLr_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_SET
#define PDET_PARDET10GCONTROLr_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_GET
#define PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET
#define PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET
#define PDET_PARDET10GCONTROLr_PD_CX4_INITf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_CX4_INITf_GET
#define PDET_PARDET10GCONTROLr_PD_CX4_INITf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_CX4_INITf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_OVERIDEf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_CX4_ENf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET
#define PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_GET
#define PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_SW_TXDOFFf_SET
#define PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET
#define PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET
#define PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_GET
#define PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_12G_DISABLEf_SET
#define PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET
#define PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET
#define PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_GET
#define PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_10G_DISABLEf_SET
#define PDET_PARDET10GCONTROLr_PD_STAT_SELf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_STAT_SELf_GET
#define PDET_PARDET10GCONTROLr_PD_STAT_SELf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_STAT_SELf_SET
#define PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET
#define PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET
#define PDET_PARDET10GCONTROLr_PARDET10G_ENf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PARDET10G_ENf_GET
#define PDET_PARDET10GCONTROLr_PARDET10G_ENf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr_PARDET10G_ENf_SET
#define READ_PDET_PARDET10GCONTROLr BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GCONTROLr
#define WRITE_PDET_PARDET10GCONTROLr BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GSIGDET
 * BLOCKS:   AN73
 * REGADDR:  0x8132
 * DESC:     10G parallel detect signal detect register
 * SIZE:     32
 * FIELDS:
 *     PD_SD_COUNT      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr (0x00013012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GSIGDET.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_s {
	uint32_t v[1];
	uint32_t pdet_pardet10gsigdet[1];
	uint32_t _pdet_pardet10gsigdet;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_CLR(r) (r).pdet_pardet10gsigdet[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_SET(r,d) (r).pdet_pardet10gsigdet[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_GET(r) (r).pdet_pardet10gsigdet[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_PD_SD_COUNTf_GET(r) (((r).pdet_pardet10gsigdet[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_PD_SD_COUNTf_SET(r,f) (r).pdet_pardet10gsigdet[0]=(((r).pdet_pardet10gsigdet[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PDET_PARDET10GSIGDET.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GSIGDETr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr,(_r._pdet_pardet10gsigdet))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GSIGDETr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr,(_r._pdet_pardet10gsigdet))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GSIGDETr BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr
#define PDET_PARDET10GSIGDETr_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_t PDET_PARDET10GSIGDETr_t;
#define PDET_PARDET10GSIGDETr_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_CLR
#define PDET_PARDET10GSIGDETr_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_SET
#define PDET_PARDET10GSIGDETr_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_GET
#define PDET_PARDET10GSIGDETr_PD_SD_COUNTf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_PD_SD_COUNTf_GET
#define PDET_PARDET10GSIGDETr_PD_SD_COUNTf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr_PD_SD_COUNTf_SET
#define READ_PDET_PARDET10GSIGDETr BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GSIGDETr
#define WRITE_PDET_PARDET10GSIGDETr BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GSIGDETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GSIGDETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GLINK
 * BLOCKS:   AN73
 * REGADDR:  0x8133
 * DESC:     10G parallel detect link register
 * SIZE:     32
 * FIELDS:
 *     PD_LINK_COUNT    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr (0x00013013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GLINK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_s {
	uint32_t v[1];
	uint32_t pdet_pardet10glink[1];
	uint32_t _pdet_pardet10glink;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_CLR(r) (r).pdet_pardet10glink[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_SET(r,d) (r).pdet_pardet10glink[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_GET(r) (r).pdet_pardet10glink[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_PD_LINK_COUNTf_GET(r) (((r).pdet_pardet10glink[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_PD_LINK_COUNTf_SET(r,f) (r).pdet_pardet10glink[0]=(((r).pdet_pardet10glink[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PDET_PARDET10GLINK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GLINKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr,(_r._pdet_pardet10glink))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GLINKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr,(_r._pdet_pardet10glink))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GLINKr BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr
#define PDET_PARDET10GLINKr_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_t PDET_PARDET10GLINKr_t;
#define PDET_PARDET10GLINKr_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_CLR
#define PDET_PARDET10GLINKr_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_SET
#define PDET_PARDET10GLINKr_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_GET
#define PDET_PARDET10GLINKr_PD_LINK_COUNTf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_PD_LINK_COUNTf_GET
#define PDET_PARDET10GLINKr_PD_LINK_COUNTf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr_PD_LINK_COUNTf_SET
#define READ_PDET_PARDET10GLINKr BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GLINKr
#define WRITE_PDET_PARDET10GLINKr BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GLINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GLINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GLOSTLINK
 * BLOCKS:   AN73
 * REGADDR:  0x8134
 * DESC:     10G parallel detect lost link register
 * SIZE:     32
 * FIELDS:
 *     PD_LOSTLINK_COUNT 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr (0x00013014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GLOSTLINK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_s {
	uint32_t v[1];
	uint32_t pdet_pardet10glostlink[1];
	uint32_t _pdet_pardet10glostlink;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_CLR(r) (r).pdet_pardet10glostlink[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_SET(r,d) (r).pdet_pardet10glostlink[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_GET(r) (r).pdet_pardet10glostlink[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET(r) (((r).pdet_pardet10glostlink[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET(r,f) (r).pdet_pardet10glostlink[0]=(((r).pdet_pardet10glostlink[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PDET_PARDET10GLOSTLINK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GLOSTLINKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr,(_r._pdet_pardet10glostlink))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GLOSTLINKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr,(_r._pdet_pardet10glostlink))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GLOSTLINKr BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr
#define PDET_PARDET10GLOSTLINKr_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_t PDET_PARDET10GLOSTLINKr_t;
#define PDET_PARDET10GLOSTLINKr_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_CLR
#define PDET_PARDET10GLOSTLINKr_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_SET
#define PDET_PARDET10GLOSTLINKr_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_GET
#define PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET
#define PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET
#define READ_PDET_PARDET10GLOSTLINKr BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GLOSTLINKr
#define WRITE_PDET_PARDET10GLOSTLINKr BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GLOSTLINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GLOSTLINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL1
 * BLOCKS:   AN73
 * REGADDR:  0x8135
 * DESC:     Clause 73 auto-negotiation control register 1
 * SIZE:     32
 * FIELDS:
 *     CL73_INTERNAL_10US_TIMER_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r (0x00013015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control1[1];
	uint32_t _pdet_cl73control1;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CLR(r) (r).pdet_cl73control1[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_SET(r,d) (r).pdet_cl73control1[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_GET(r) (r).pdet_cl73control1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_RESERVED0f_GET(r) ((((r).pdet_cl73control1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_RESERVED0f_SET(r,f) (r).pdet_cl73control1[0]=(((r).pdet_cl73control1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET(r) (((r).pdet_cl73control1[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET(r,f) (r).pdet_cl73control1[0]=(((r).pdet_cl73control1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PDET_CL73CONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r,(_r._pdet_cl73control1))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r,(_r._pdet_cl73control1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL1r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r
#define PDET_CL73CONTROL1r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_t PDET_CL73CONTROL1r_t;
#define PDET_CL73CONTROL1r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CLR
#define PDET_CL73CONTROL1r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_SET
#define PDET_CL73CONTROL1r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_GET
#define PDET_CL73CONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_RESERVED0f_GET
#define PDET_CL73CONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_RESERVED0f_SET
#define PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET
#define PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET
#define READ_PDET_CL73CONTROL1r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL1r
#define WRITE_PDET_CL73CONTROL1r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL2
 * BLOCKS:   AN73
 * REGADDR:  0x8136
 * DESC:     Clause 73 auto-negotiation control register 2
 * SIZE:     32
 * FIELDS:
 *     CL73_LINK_FAIL_INHIBIT_TIMER_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r (0x00013016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control2[1];
	uint32_t _pdet_cl73control2;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CLR(r) (r).pdet_cl73control2[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_SET(r,d) (r).pdet_cl73control2[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_GET(r) (r).pdet_cl73control2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_RESERVED0f_GET(r) ((((r).pdet_cl73control2[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_RESERVED0f_SET(r,f) (r).pdet_cl73control2[0]=(((r).pdet_cl73control2[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET(r) (((r).pdet_cl73control2[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET(r,f) (r).pdet_cl73control2[0]=(((r).pdet_cl73control2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PDET_CL73CONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r,(_r._pdet_cl73control2))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r,(_r._pdet_cl73control2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL2r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r
#define PDET_CL73CONTROL2r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_t PDET_CL73CONTROL2r_t;
#define PDET_CL73CONTROL2r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CLR
#define PDET_CL73CONTROL2r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_SET
#define PDET_CL73CONTROL2r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_GET
#define PDET_CL73CONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_RESERVED0f_GET
#define PDET_CL73CONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_RESERVED0f_SET
#define PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET
#define PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET
#define READ_PDET_CL73CONTROL2r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL2r
#define WRITE_PDET_CL73CONTROL2r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL3
 * BLOCKS:   AN73
 * REGADDR:  0x8137
 * DESC:     Clause 73 auto-negotiation control register 3
 * SIZE:     32
 * FIELDS:
 *     CL73_AN_WAIT_TIMER_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r (0x00013017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control3[1];
	uint32_t _pdet_cl73control3;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CLR(r) (r).pdet_cl73control3[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_SET(r,d) (r).pdet_cl73control3[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_GET(r) (r).pdet_cl73control3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_RESERVED0f_GET(r) ((((r).pdet_cl73control3[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_RESERVED0f_SET(r,f) (r).pdet_cl73control3[0]=(((r).pdet_cl73control3[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET(r) (((r).pdet_cl73control3[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET(r,f) (r).pdet_cl73control3[0]=(((r).pdet_cl73control3[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PDET_CL73CONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r,(_r._pdet_cl73control3))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r,(_r._pdet_cl73control3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL3r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r
#define PDET_CL73CONTROL3r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_t PDET_CL73CONTROL3r_t;
#define PDET_CL73CONTROL3r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CLR
#define PDET_CL73CONTROL3r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_SET
#define PDET_CL73CONTROL3r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_GET
#define PDET_CL73CONTROL3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_RESERVED0f_GET
#define PDET_CL73CONTROL3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_RESERVED0f_SET
#define PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET
#define PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET
#define READ_PDET_CL73CONTROL3r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL3r
#define WRITE_PDET_CL73CONTROL3r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL4
 * BLOCKS:   AN73
 * REGADDR:  0x8138
 * DESC:     Clause 73 auto-negotiation control register 4
 * SIZE:     32
 * FIELDS:
 *     CL73_BREAK_LINK_TIMER_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r (0x00013018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control4[1];
	uint32_t _pdet_cl73control4;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CLR(r) (r).pdet_cl73control4[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_SET(r,d) (r).pdet_cl73control4[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_GET(r) (r).pdet_cl73control4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_RESERVED0f_GET(r) ((((r).pdet_cl73control4[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_RESERVED0f_SET(r,f) (r).pdet_cl73control4[0]=(((r).pdet_cl73control4[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET(r) (((r).pdet_cl73control4[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET(r,f) (r).pdet_cl73control4[0]=(((r).pdet_cl73control4[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PDET_CL73CONTROL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r,(_r._pdet_cl73control4))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r,(_r._pdet_cl73control4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL4r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r
#define PDET_CL73CONTROL4r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_t PDET_CL73CONTROL4r_t;
#define PDET_CL73CONTROL4r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CLR
#define PDET_CL73CONTROL4r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_SET
#define PDET_CL73CONTROL4r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_GET
#define PDET_CL73CONTROL4r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_RESERVED0f_GET
#define PDET_CL73CONTROL4r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_RESERVED0f_SET
#define PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET
#define PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET
#define READ_PDET_CL73CONTROL4r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL4r
#define WRITE_PDET_CL73CONTROL4r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL5
 * BLOCKS:   AN73
 * REGADDR:  0x8139
 * DESC:     Clause 73 auto-negotiation control register 5
 * SIZE:     32
 * FIELDS:
 *     CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r (0x00013019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control5[1];
	uint32_t _pdet_cl73control5;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CLR(r) (r).pdet_cl73control5[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_SET(r,d) (r).pdet_cl73control5[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_GET(r) (r).pdet_cl73control5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_RESERVED0f_GET(r) ((((r).pdet_cl73control5[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_RESERVED0f_SET(r,f) (r).pdet_cl73control5[0]=(((r).pdet_cl73control5[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_GET(r) (((r).pdet_cl73control5[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_SET(r,f) (r).pdet_cl73control5[0]=(((r).pdet_cl73control5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PDET_CL73CONTROL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r,(_r._pdet_cl73control5))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r,(_r._pdet_cl73control5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL5r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r
#define PDET_CL73CONTROL5r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_t PDET_CL73CONTROL5r_t;
#define PDET_CL73CONTROL5r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CLR
#define PDET_CL73CONTROL5r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_SET
#define PDET_CL73CONTROL5r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_GET
#define PDET_CL73CONTROL5r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_RESERVED0f_GET
#define PDET_CL73CONTROL5r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_RESERVED0f_SET
#define PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_GET
#define PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r_CL73_LINK_FAIL_INHIBIT_TIMER_BAM_VALf_SET
#define READ_PDET_CL73CONTROL5r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL5r
#define WRITE_PDET_CL73CONTROL5r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73CONTROL6
 * BLOCKS:   AN73
 * REGADDR:  0x813a
 * DESC:     Clause 73 auto-negotiation control register 6
 * SIZE:     32
 * FIELDS:
 *     CL73_IGNORE_LINK_TIMER_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r (0x0001301a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73CONTROL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_s {
	uint32_t v[1];
	uint32_t pdet_cl73control6[1];
	uint32_t _pdet_cl73control6;
} BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CLR(r) (r).pdet_cl73control6[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_SET(r,d) (r).pdet_cl73control6[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_GET(r) (r).pdet_cl73control6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_RESERVED0f_GET(r) ((((r).pdet_cl73control6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_RESERVED0f_SET(r,f) (r).pdet_cl73control6[0]=(((r).pdet_cl73control6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET(r) (((r).pdet_cl73control6[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET(r,f) (r).pdet_cl73control6[0]=(((r).pdet_cl73control6[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PDET_CL73CONTROL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r,(_r._pdet_cl73control6))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r,(_r._pdet_cl73control6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73CONTROL6r BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r
#define PDET_CL73CONTROL6r_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_t PDET_CL73CONTROL6r_t;
#define PDET_CL73CONTROL6r_CLR BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CLR
#define PDET_CL73CONTROL6r_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_SET
#define PDET_CL73CONTROL6r_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_GET
#define PDET_CL73CONTROL6r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_RESERVED0f_GET
#define PDET_CL73CONTROL6r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_RESERVED0f_SET
#define PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET
#define PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET
#define READ_PDET_CL73CONTROL6r BCMI_HYPERLITE_XGXS_READ_PDET_CL73CONTROL6r
#define WRITE_PDET_CL73CONTROL6r BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73CONTROL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73CONTROL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_CL73DMETMRS
 * BLOCKS:   AN73
 * REGADDR:  0x813b
 * DESC:     Clause 73 auto-negotiation DME Timers Register
 * SIZE:     32
 * FIELDS:
 *     CL73_DME_PAGE_TEST_MIN_CNT_VAL 
 *     CL73_DME_PAGE_TEST_MAX_CNT_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr (0x0001301b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_SIZE 4

/*
 * This structure should be used to declare and program PDET_CL73DMETMRS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_s {
	uint32_t v[1];
	uint32_t pdet_cl73dmetmrs[1];
	uint32_t _pdet_cl73dmetmrs;
} BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_t;

#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CLR(r) (r).pdet_cl73dmetmrs[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_SET(r,d) (r).pdet_cl73dmetmrs[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_GET(r) (r).pdet_cl73dmetmrs[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET(r) ((((r).pdet_cl73dmetmrs[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET(r,f) (r).pdet_cl73dmetmrs[0]=(((r).pdet_cl73dmetmrs[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET(r) (((r).pdet_cl73dmetmrs[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET(r,f) (r).pdet_cl73dmetmrs[0]=(((r).pdet_cl73dmetmrs[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PDET_CL73DMETMRS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_CL73DMETMRSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr,(_r._pdet_cl73dmetmrs))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73DMETMRSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr,(_r._pdet_cl73dmetmrs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_CL73DMETMRSr BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr
#define PDET_CL73DMETMRSr_SIZE BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_t PDET_CL73DMETMRSr_t;
#define PDET_CL73DMETMRSr_CLR BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CLR
#define PDET_CL73DMETMRSr_SET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_SET
#define PDET_CL73DMETMRSr_GET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_GET
#define PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET
#define PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET
#define PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET
#define PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET
#define READ_PDET_CL73DMETMRSr BCMI_HYPERLITE_XGXS_READ_PDET_CL73DMETMRSr
#define WRITE_PDET_CL73DMETMRSr BCMI_HYPERLITE_XGXS_WRITE_PDET_CL73DMETMRSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_CL73DMETMRSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_XGXSSTATUS4
 * BLOCKS:   AN73
 * REGADDR:  0x813c
 * DESC:     XGXS Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     ACTUAL_SPEED_LN0 
 *     RESERVED1        
 *     PLL_MODE_AFE     
 *     LINK_STATUS      
 *     LINK10G          
 *     SGMII_MODE       
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r (0x0001301c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SIZE 4

/*
 * This structure should be used to declare and program PDET_XGXSSTATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_s {
	uint32_t v[1];
	uint32_t pdet_xgxsstatus4[1];
	uint32_t _pdet_xgxsstatus4;
} BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_t;

#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_CLR(r) (r).pdet_xgxsstatus4[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SET(r,d) (r).pdet_xgxsstatus4[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_GET(r) (r).pdet_xgxsstatus4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED0f_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED0f_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SGMII_MODEf_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SGMII_MODEf_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK10Gf_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK10Gf_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK_STATUSf_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK_STATUSf_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_PLL_MODE_AFEf_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_PLL_MODE_AFEf_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED1f_GET(r) ((((r).pdet_xgxsstatus4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED1f_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_GET(r) (((r).pdet_xgxsstatus4[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_SET(r,f) (r).pdet_xgxsstatus4[0]=(((r).pdet_xgxsstatus4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PDET_XGXSSTATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_XGXSSTATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r,(_r._pdet_xgxsstatus4))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_XGXSSTATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r,(_r._pdet_xgxsstatus4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_XGXSSTATUS4r BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r
#define PDET_XGXSSTATUS4r_SIZE BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_t PDET_XGXSSTATUS4r_t;
#define PDET_XGXSSTATUS4r_CLR BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_CLR
#define PDET_XGXSSTATUS4r_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SET
#define PDET_XGXSSTATUS4r_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_GET
#define PDET_XGXSSTATUS4r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED0f_GET
#define PDET_XGXSSTATUS4r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED0f_SET
#define PDET_XGXSSTATUS4r_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SGMII_MODEf_GET
#define PDET_XGXSSTATUS4r_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_SGMII_MODEf_SET
#define PDET_XGXSSTATUS4r_LINK10Gf_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK10Gf_GET
#define PDET_XGXSSTATUS4r_LINK10Gf_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK10Gf_SET
#define PDET_XGXSSTATUS4r_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK_STATUSf_GET
#define PDET_XGXSSTATUS4r_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_LINK_STATUSf_SET
#define PDET_XGXSSTATUS4r_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_PLL_MODE_AFEf_GET
#define PDET_XGXSSTATUS4r_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_PLL_MODE_AFEf_SET
#define PDET_XGXSSTATUS4r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED1f_GET
#define PDET_XGXSSTATUS4r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_RESERVED1f_SET
#define PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_GET
#define PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r_ACTUAL_SPEED_LN0f_SET
#define READ_PDET_XGXSSTATUS4r BCMI_HYPERLITE_XGXS_READ_PDET_XGXSSTATUS4r
#define WRITE_PDET_XGXSSTATUS4r BCMI_HYPERLITE_XGXS_WRITE_PDET_XGXSSTATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_XGXSSTATUS5
 * BLOCKS:   AN73
 * REGADDR:  0x813d
 * DESC:     XGXS Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     RX1G_MODE_LN0    
 *     RX1G_MODE_LN1    
 *     RX1G_MODE_LN2    
 *     RX1G_MODE_LN3    
 *     TX1G_MODE_LN0    
 *     TX1G_MODE_LN1    
 *     TX1G_MODE_LN2    
 *     TX1G_MODE_LN3    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r (0x0001301d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_SIZE 4

/*
 * This structure should be used to declare and program PDET_XGXSSTATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_s {
	uint32_t v[1];
	uint32_t pdet_xgxsstatus5[1];
	uint32_t _pdet_xgxsstatus5;
} BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_t;

#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_CLR(r) (r).pdet_xgxsstatus5[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_SET(r,d) (r).pdet_xgxsstatus5[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_GET(r) (r).pdet_xgxsstatus5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_GET(r) ((((r).pdet_xgxsstatus5[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_GET(r) (((r).pdet_xgxsstatus5[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_SET(r,f) (r).pdet_xgxsstatus5[0]=(((r).pdet_xgxsstatus5[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PDET_XGXSSTATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_XGXSSTATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r,(_r._pdet_xgxsstatus5))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_XGXSSTATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r,(_r._pdet_xgxsstatus5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_XGXSSTATUS5r BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r
#define PDET_XGXSSTATUS5r_SIZE BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_t PDET_XGXSSTATUS5r_t;
#define PDET_XGXSSTATUS5r_CLR BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_CLR
#define PDET_XGXSSTATUS5r_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_SET
#define PDET_XGXSSTATUS5r_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_GET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_GET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN3f_SET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_GET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN2f_SET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_GET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN1f_SET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_GET
#define PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_TX1G_MODE_LN0f_SET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_GET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN3f_SET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_GET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN2f_SET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_GET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN1f_SET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_GET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_GET
#define PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_SET BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r_RX1G_MODE_LN0f_SET
#define READ_PDET_XGXSSTATUS5r BCMI_HYPERLITE_XGXS_READ_PDET_XGXSSTATUS5r
#define WRITE_PDET_XGXSSTATUS5r BCMI_HYPERLITE_XGXS_WRITE_PDET_XGXSSTATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_XGXSSTATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PDET_PARDET10GCONTROL2
 * BLOCKS:   AN73
 * REGADDR:  0x813e
 * DESC:     10G parallel detect control 2 register
 * SIZE:     32
 * FIELDS:
 *     PD_IGNORELINK_DIS 
 *     PD_CL73_COUPLE_DIS 
 *     PD_USELINKSTATUS 
 *     PD_PARKFAIL      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r (0x0001301e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program PDET_PARDET10GCONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_s {
	uint32_t v[1];
	uint32_t pdet_pardet10gcontrol2[1];
	uint32_t _pdet_pardet10gcontrol2;
} BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_CLR(r) (r).pdet_pardet10gcontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_SET(r,d) (r).pdet_pardet10gcontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_GET(r) (r).pdet_pardet10gcontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_RESERVED0f_GET(r) ((((r).pdet_pardet10gcontrol2[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_RESERVED0f_SET(r,f) (r).pdet_pardet10gcontrol2[0]=(((r).pdet_pardet10gcontrol2[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_PARKFAILf_GET(r) ((((r).pdet_pardet10gcontrol2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_PARKFAILf_SET(r,f) (r).pdet_pardet10gcontrol2[0]=(((r).pdet_pardet10gcontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET(r) ((((r).pdet_pardet10gcontrol2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET(r,f) (r).pdet_pardet10gcontrol2[0]=(((r).pdet_pardet10gcontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET(r) ((((r).pdet_pardet10gcontrol2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET(r,f) (r).pdet_pardet10gcontrol2[0]=(((r).pdet_pardet10gcontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET(r) (((r).pdet_pardet10gcontrol2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET(r,f) (r).pdet_pardet10gcontrol2[0]=(((r).pdet_pardet10gcontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PDET_PARDET10GCONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GCONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r,(_r._pdet_pardet10gcontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GCONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r,(_r._pdet_pardet10gcontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PDET_PARDET10GCONTROL2r BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r
#define PDET_PARDET10GCONTROL2r_SIZE BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_t PDET_PARDET10GCONTROL2r_t;
#define PDET_PARDET10GCONTROL2r_CLR BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_CLR
#define PDET_PARDET10GCONTROL2r_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_SET
#define PDET_PARDET10GCONTROL2r_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_GET
#define PDET_PARDET10GCONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_RESERVED0f_GET
#define PDET_PARDET10GCONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_RESERVED0f_SET
#define PDET_PARDET10GCONTROL2r_PD_PARKFAILf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_PARKFAILf_GET
#define PDET_PARDET10GCONTROL2r_PD_PARKFAILf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_PARKFAILf_SET
#define PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET
#define PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET
#define PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET
#define PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET
#define PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET
#define PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET
#define READ_PDET_PARDET10GCONTROL2r BCMI_HYPERLITE_XGXS_READ_PDET_PARDET10GCONTROL2r
#define WRITE_PDET_PARDET10GCONTROL2r BCMI_HYPERLITE_XGXS_WRITE_PDET_PARDET10GCONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PDET_PARDET10GCONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_0_CONTROL
 * BLOCKS:   TX66
 * REGADDR:  0x8160
 * DESC:     64/66 Encoder Control Register
 * SIZE:     32
 * FIELDS:
 *     TFIFO_AFRST_EN   
 *     TFIFO_SBITCLR    
 *     SCRAMBLERCONTROL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr (0x00016010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TX66_0_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_s {
	uint32_t v[1];
	uint32_t tx66_0_control[1];
	uint32_t _tx66_0_control;
} BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_CLR(r) (r).tx66_0_control[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SET(r,d) (r).tx66_0_control[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_GET(r) (r).tx66_0_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_0_control[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_0_control[0]=(((r).tx66_0_control[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SCRAMBLERCONTROLf_GET(r) ((((r).tx66_0_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SCRAMBLERCONTROLf_SET(r,f) (r).tx66_0_control[0]=(((r).tx66_0_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_SBITCLRf_GET(r) ((((r).tx66_0_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_SBITCLRf_SET(r,f) (r).tx66_0_control[0]=(((r).tx66_0_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_AFRST_ENf_GET(r) (((r).tx66_0_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_AFRST_ENf_SET(r,f) (r).tx66_0_control[0]=(((r).tx66_0_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_0_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_0_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr,(_r._tx66_0_control))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_0_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr,(_r._tx66_0_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_0_CONTROLr BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr
#define TX66_0_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_t TX66_0_CONTROLr_t;
#define TX66_0_CONTROLr_CLR BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_CLR
#define TX66_0_CONTROLr_SET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SET
#define TX66_0_CONTROLr_GET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_GET
#define TX66_0_CONTROLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_RESERVED_FOR_ECO0f_GET
#define TX66_0_CONTROLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_RESERVED_FOR_ECO0f_SET
#define TX66_0_CONTROLr_SCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SCRAMBLERCONTROLf_GET
#define TX66_0_CONTROLr_SCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_SCRAMBLERCONTROLf_SET
#define TX66_0_CONTROLr_TFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_SBITCLRf_GET
#define TX66_0_CONTROLr_TFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_SBITCLRf_SET
#define TX66_0_CONTROLr_TFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_AFRST_ENf_GET
#define TX66_0_CONTROLr_TFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr_TFIFO_AFRST_ENf_SET
#define READ_TX66_0_CONTROLr BCMI_HYPERLITE_XGXS_READ_TX66_0_CONTROLr
#define WRITE_TX66_0_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_TX66_0_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_0_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_0_STATUS
 * BLOCKS:   TX66
 * REGADDR:  0x8161
 * DESC:     64/66 Encoder Status Register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     UNFLOW           
 *     OVFLOW           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr (0x00016011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TX66_0_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_s {
	uint32_t v[1];
	uint32_t tx66_0_status[1];
	uint32_t _tx66_0_status;
} BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_CLR(r) (r).tx66_0_status[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_SET(r,d) (r).tx66_0_status[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_GET(r) (r).tx66_0_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_0_status[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_0_status[0]=(((r).tx66_0_status[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_OVFLOWf_GET(r) ((((r).tx66_0_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_OVFLOWf_SET(r,f) (r).tx66_0_status[0]=(((r).tx66_0_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_UNFLOWf_GET(r) ((((r).tx66_0_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_UNFLOWf_SET(r,f) (r).tx66_0_status[0]=(((r).tx66_0_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_FERRf_GET(r) (((r).tx66_0_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_FERRf_SET(r,f) (r).tx66_0_status[0]=(((r).tx66_0_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_0_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_0_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_0_STATUSr,(_r._tx66_0_status))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_0_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_0_STATUSr,(_r._tx66_0_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_0_STATUSr BCMI_HYPERLITE_XGXS_TX66_0_STATUSr
#define TX66_0_STATUSr_SIZE BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_t TX66_0_STATUSr_t;
#define TX66_0_STATUSr_CLR BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_CLR
#define TX66_0_STATUSr_SET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_SET
#define TX66_0_STATUSr_GET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_GET
#define TX66_0_STATUSr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_RESERVED_FOR_ECO0f_GET
#define TX66_0_STATUSr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_RESERVED_FOR_ECO0f_SET
#define TX66_0_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_OVFLOWf_GET
#define TX66_0_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_OVFLOWf_SET
#define TX66_0_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_UNFLOWf_GET
#define TX66_0_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_UNFLOWf_SET
#define TX66_0_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_FERRf_GET
#define TX66_0_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_TX66_0_STATUSr_FERRf_SET
#define READ_TX66_0_STATUSr BCMI_HYPERLITE_XGXS_READ_TX66_0_STATUSr
#define WRITE_TX66_0_STATUSr BCMI_HYPERLITE_XGXS_WRITE_TX66_0_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_0_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_1_CONTROL
 * BLOCKS:   TX66
 * REGADDR:  0x8170
 * DESC:     64/66 Encoder Control Register
 * SIZE:     32
 * FIELDS:
 *     TFIFO_AFRST_EN   
 *     TFIFO_SBITCLR    
 *     SCRAMBLERCONTROL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr (0x00017010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TX66_1_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_s {
	uint32_t v[1];
	uint32_t tx66_1_control[1];
	uint32_t _tx66_1_control;
} BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_CLR(r) (r).tx66_1_control[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SET(r,d) (r).tx66_1_control[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_GET(r) (r).tx66_1_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_1_control[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_1_control[0]=(((r).tx66_1_control[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SCRAMBLERCONTROLf_GET(r) ((((r).tx66_1_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SCRAMBLERCONTROLf_SET(r,f) (r).tx66_1_control[0]=(((r).tx66_1_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_SBITCLRf_GET(r) ((((r).tx66_1_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_SBITCLRf_SET(r,f) (r).tx66_1_control[0]=(((r).tx66_1_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_AFRST_ENf_GET(r) (((r).tx66_1_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_AFRST_ENf_SET(r,f) (r).tx66_1_control[0]=(((r).tx66_1_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_1_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_1_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr,(_r._tx66_1_control))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_1_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr,(_r._tx66_1_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_1_CONTROLr BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr
#define TX66_1_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_t TX66_1_CONTROLr_t;
#define TX66_1_CONTROLr_CLR BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_CLR
#define TX66_1_CONTROLr_SET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SET
#define TX66_1_CONTROLr_GET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_GET
#define TX66_1_CONTROLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_RESERVED_FOR_ECO0f_GET
#define TX66_1_CONTROLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_RESERVED_FOR_ECO0f_SET
#define TX66_1_CONTROLr_SCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SCRAMBLERCONTROLf_GET
#define TX66_1_CONTROLr_SCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_SCRAMBLERCONTROLf_SET
#define TX66_1_CONTROLr_TFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_SBITCLRf_GET
#define TX66_1_CONTROLr_TFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_SBITCLRf_SET
#define TX66_1_CONTROLr_TFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_AFRST_ENf_GET
#define TX66_1_CONTROLr_TFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr_TFIFO_AFRST_ENf_SET
#define READ_TX66_1_CONTROLr BCMI_HYPERLITE_XGXS_READ_TX66_1_CONTROLr
#define WRITE_TX66_1_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_TX66_1_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_1_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_1_STATUS
 * BLOCKS:   TX66
 * REGADDR:  0x8171
 * DESC:     64/66 Encoder Status Register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     UNFLOW           
 *     OVFLOW           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr (0x00017011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TX66_1_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_s {
	uint32_t v[1];
	uint32_t tx66_1_status[1];
	uint32_t _tx66_1_status;
} BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_CLR(r) (r).tx66_1_status[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_SET(r,d) (r).tx66_1_status[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_GET(r) (r).tx66_1_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_1_status[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_1_status[0]=(((r).tx66_1_status[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_OVFLOWf_GET(r) ((((r).tx66_1_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_OVFLOWf_SET(r,f) (r).tx66_1_status[0]=(((r).tx66_1_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_UNFLOWf_GET(r) ((((r).tx66_1_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_UNFLOWf_SET(r,f) (r).tx66_1_status[0]=(((r).tx66_1_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_FERRf_GET(r) (((r).tx66_1_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_FERRf_SET(r,f) (r).tx66_1_status[0]=(((r).tx66_1_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_1_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_1_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_1_STATUSr,(_r._tx66_1_status))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_1_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_1_STATUSr,(_r._tx66_1_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_1_STATUSr BCMI_HYPERLITE_XGXS_TX66_1_STATUSr
#define TX66_1_STATUSr_SIZE BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_t TX66_1_STATUSr_t;
#define TX66_1_STATUSr_CLR BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_CLR
#define TX66_1_STATUSr_SET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_SET
#define TX66_1_STATUSr_GET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_GET
#define TX66_1_STATUSr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_RESERVED_FOR_ECO0f_GET
#define TX66_1_STATUSr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_RESERVED_FOR_ECO0f_SET
#define TX66_1_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_OVFLOWf_GET
#define TX66_1_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_OVFLOWf_SET
#define TX66_1_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_UNFLOWf_GET
#define TX66_1_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_UNFLOWf_SET
#define TX66_1_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_FERRf_GET
#define TX66_1_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_TX66_1_STATUSr_FERRf_SET
#define READ_TX66_1_STATUSr BCMI_HYPERLITE_XGXS_READ_TX66_1_STATUSr
#define WRITE_TX66_1_STATUSr BCMI_HYPERLITE_XGXS_WRITE_TX66_1_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_1_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_2_CONTROL
 * BLOCKS:   TX66
 * REGADDR:  0x8180
 * DESC:     64/66 Encoder Control Register
 * SIZE:     32
 * FIELDS:
 *     TFIFO_AFRST_EN   
 *     TFIFO_SBITCLR    
 *     SCRAMBLERCONTROL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr (0x00018010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TX66_2_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_s {
	uint32_t v[1];
	uint32_t tx66_2_control[1];
	uint32_t _tx66_2_control;
} BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_CLR(r) (r).tx66_2_control[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SET(r,d) (r).tx66_2_control[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_GET(r) (r).tx66_2_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_2_control[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_2_control[0]=(((r).tx66_2_control[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SCRAMBLERCONTROLf_GET(r) ((((r).tx66_2_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SCRAMBLERCONTROLf_SET(r,f) (r).tx66_2_control[0]=(((r).tx66_2_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_SBITCLRf_GET(r) ((((r).tx66_2_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_SBITCLRf_SET(r,f) (r).tx66_2_control[0]=(((r).tx66_2_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_AFRST_ENf_GET(r) (((r).tx66_2_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_AFRST_ENf_SET(r,f) (r).tx66_2_control[0]=(((r).tx66_2_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_2_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_2_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr,(_r._tx66_2_control))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_2_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr,(_r._tx66_2_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_2_CONTROLr BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr
#define TX66_2_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_t TX66_2_CONTROLr_t;
#define TX66_2_CONTROLr_CLR BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_CLR
#define TX66_2_CONTROLr_SET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SET
#define TX66_2_CONTROLr_GET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_GET
#define TX66_2_CONTROLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_RESERVED_FOR_ECO0f_GET
#define TX66_2_CONTROLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_RESERVED_FOR_ECO0f_SET
#define TX66_2_CONTROLr_SCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SCRAMBLERCONTROLf_GET
#define TX66_2_CONTROLr_SCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_SCRAMBLERCONTROLf_SET
#define TX66_2_CONTROLr_TFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_SBITCLRf_GET
#define TX66_2_CONTROLr_TFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_SBITCLRf_SET
#define TX66_2_CONTROLr_TFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_AFRST_ENf_GET
#define TX66_2_CONTROLr_TFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr_TFIFO_AFRST_ENf_SET
#define READ_TX66_2_CONTROLr BCMI_HYPERLITE_XGXS_READ_TX66_2_CONTROLr
#define WRITE_TX66_2_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_TX66_2_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_2_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_2_STATUS
 * BLOCKS:   TX66
 * REGADDR:  0x8181
 * DESC:     64/66 Encoder Status Register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     UNFLOW           
 *     OVFLOW           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr (0x00018011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TX66_2_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_s {
	uint32_t v[1];
	uint32_t tx66_2_status[1];
	uint32_t _tx66_2_status;
} BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_CLR(r) (r).tx66_2_status[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_SET(r,d) (r).tx66_2_status[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_GET(r) (r).tx66_2_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_2_status[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_2_status[0]=(((r).tx66_2_status[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_OVFLOWf_GET(r) ((((r).tx66_2_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_OVFLOWf_SET(r,f) (r).tx66_2_status[0]=(((r).tx66_2_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_UNFLOWf_GET(r) ((((r).tx66_2_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_UNFLOWf_SET(r,f) (r).tx66_2_status[0]=(((r).tx66_2_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_FERRf_GET(r) (((r).tx66_2_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_FERRf_SET(r,f) (r).tx66_2_status[0]=(((r).tx66_2_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_2_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_2_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_2_STATUSr,(_r._tx66_2_status))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_2_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_2_STATUSr,(_r._tx66_2_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_2_STATUSr BCMI_HYPERLITE_XGXS_TX66_2_STATUSr
#define TX66_2_STATUSr_SIZE BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_t TX66_2_STATUSr_t;
#define TX66_2_STATUSr_CLR BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_CLR
#define TX66_2_STATUSr_SET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_SET
#define TX66_2_STATUSr_GET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_GET
#define TX66_2_STATUSr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_RESERVED_FOR_ECO0f_GET
#define TX66_2_STATUSr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_RESERVED_FOR_ECO0f_SET
#define TX66_2_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_OVFLOWf_GET
#define TX66_2_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_OVFLOWf_SET
#define TX66_2_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_UNFLOWf_GET
#define TX66_2_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_UNFLOWf_SET
#define TX66_2_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_FERRf_GET
#define TX66_2_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_TX66_2_STATUSr_FERRf_SET
#define READ_TX66_2_STATUSr BCMI_HYPERLITE_XGXS_READ_TX66_2_STATUSr
#define WRITE_TX66_2_STATUSr BCMI_HYPERLITE_XGXS_WRITE_TX66_2_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_2_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_3_CONTROL
 * BLOCKS:   TX66
 * REGADDR:  0x8190
 * DESC:     64/66 Encoder Control Register
 * SIZE:     32
 * FIELDS:
 *     TFIFO_AFRST_EN   
 *     TFIFO_SBITCLR    
 *     SCRAMBLERCONTROL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr (0x00019010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TX66_3_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_s {
	uint32_t v[1];
	uint32_t tx66_3_control[1];
	uint32_t _tx66_3_control;
} BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_CLR(r) (r).tx66_3_control[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SET(r,d) (r).tx66_3_control[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_GET(r) (r).tx66_3_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_3_control[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_3_control[0]=(((r).tx66_3_control[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SCRAMBLERCONTROLf_GET(r) ((((r).tx66_3_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SCRAMBLERCONTROLf_SET(r,f) (r).tx66_3_control[0]=(((r).tx66_3_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_SBITCLRf_GET(r) ((((r).tx66_3_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_SBITCLRf_SET(r,f) (r).tx66_3_control[0]=(((r).tx66_3_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_AFRST_ENf_GET(r) (((r).tx66_3_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_AFRST_ENf_SET(r,f) (r).tx66_3_control[0]=(((r).tx66_3_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_3_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_3_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr,(_r._tx66_3_control))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_3_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr,(_r._tx66_3_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_3_CONTROLr BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr
#define TX66_3_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_t TX66_3_CONTROLr_t;
#define TX66_3_CONTROLr_CLR BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_CLR
#define TX66_3_CONTROLr_SET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SET
#define TX66_3_CONTROLr_GET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_GET
#define TX66_3_CONTROLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_RESERVED_FOR_ECO0f_GET
#define TX66_3_CONTROLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_RESERVED_FOR_ECO0f_SET
#define TX66_3_CONTROLr_SCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SCRAMBLERCONTROLf_GET
#define TX66_3_CONTROLr_SCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_SCRAMBLERCONTROLf_SET
#define TX66_3_CONTROLr_TFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_SBITCLRf_GET
#define TX66_3_CONTROLr_TFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_SBITCLRf_SET
#define TX66_3_CONTROLr_TFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_AFRST_ENf_GET
#define TX66_3_CONTROLr_TFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr_TFIFO_AFRST_ENf_SET
#define READ_TX66_3_CONTROLr BCMI_HYPERLITE_XGXS_READ_TX66_3_CONTROLr
#define WRITE_TX66_3_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_TX66_3_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_3_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_3_STATUS
 * BLOCKS:   TX66
 * REGADDR:  0x8191
 * DESC:     64/66 Encoder Status Register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     UNFLOW           
 *     OVFLOW           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr (0x00019011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TX66_3_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_s {
	uint32_t v[1];
	uint32_t tx66_3_status[1];
	uint32_t _tx66_3_status;
} BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_CLR(r) (r).tx66_3_status[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_SET(r,d) (r).tx66_3_status[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_GET(r) (r).tx66_3_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_3_status[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_3_status[0]=(((r).tx66_3_status[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_OVFLOWf_GET(r) ((((r).tx66_3_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_OVFLOWf_SET(r,f) (r).tx66_3_status[0]=(((r).tx66_3_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_UNFLOWf_GET(r) ((((r).tx66_3_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_UNFLOWf_SET(r,f) (r).tx66_3_status[0]=(((r).tx66_3_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_FERRf_GET(r) (((r).tx66_3_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_FERRf_SET(r,f) (r).tx66_3_status[0]=(((r).tx66_3_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_3_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_3_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_3_STATUSr,(_r._tx66_3_status))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_3_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_3_STATUSr,(_r._tx66_3_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_3_STATUSr BCMI_HYPERLITE_XGXS_TX66_3_STATUSr
#define TX66_3_STATUSr_SIZE BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_t TX66_3_STATUSr_t;
#define TX66_3_STATUSr_CLR BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_CLR
#define TX66_3_STATUSr_SET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_SET
#define TX66_3_STATUSr_GET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_GET
#define TX66_3_STATUSr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_RESERVED_FOR_ECO0f_GET
#define TX66_3_STATUSr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_RESERVED_FOR_ECO0f_SET
#define TX66_3_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_OVFLOWf_GET
#define TX66_3_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_OVFLOWf_SET
#define TX66_3_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_UNFLOWf_GET
#define TX66_3_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_UNFLOWf_SET
#define TX66_3_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_FERRf_GET
#define TX66_3_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_TX66_3_STATUSr_FERRf_SET
#define READ_TX66_3_STATUSr BCMI_HYPERLITE_XGXS_READ_TX66_3_STATUSr
#define WRITE_TX66_3_STATUSr BCMI_HYPERLITE_XGXS_WRITE_TX66_3_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_3_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_A_CONTROL
 * BLOCKS:   TX66
 * REGADDR:  0x81a0
 * DESC:     64/66 Encoder Control Register
 * SIZE:     32
 * FIELDS:
 *     TFIFO_AFRST_EN   
 *     TFIFO_SBITCLR    
 *     SCRAMBLERCONTROL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr (0x0001a010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TX66_A_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_s {
	uint32_t v[1];
	uint32_t tx66_a_control[1];
	uint32_t _tx66_a_control;
} BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_CLR(r) (r).tx66_a_control[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SET(r,d) (r).tx66_a_control[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_GET(r) (r).tx66_a_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_a_control[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_a_control[0]=(((r).tx66_a_control[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SCRAMBLERCONTROLf_GET(r) ((((r).tx66_a_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SCRAMBLERCONTROLf_SET(r,f) (r).tx66_a_control[0]=(((r).tx66_a_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_SBITCLRf_GET(r) ((((r).tx66_a_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_SBITCLRf_SET(r,f) (r).tx66_a_control[0]=(((r).tx66_a_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_AFRST_ENf_GET(r) (((r).tx66_a_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_AFRST_ENf_SET(r,f) (r).tx66_a_control[0]=(((r).tx66_a_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_A_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_A_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr,(_r._tx66_a_control))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_A_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr,(_r._tx66_a_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_A_CONTROLr BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr
#define TX66_A_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_t TX66_A_CONTROLr_t;
#define TX66_A_CONTROLr_CLR BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_CLR
#define TX66_A_CONTROLr_SET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SET
#define TX66_A_CONTROLr_GET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_GET
#define TX66_A_CONTROLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_RESERVED_FOR_ECO0f_GET
#define TX66_A_CONTROLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_RESERVED_FOR_ECO0f_SET
#define TX66_A_CONTROLr_SCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SCRAMBLERCONTROLf_GET
#define TX66_A_CONTROLr_SCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_SCRAMBLERCONTROLf_SET
#define TX66_A_CONTROLr_TFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_SBITCLRf_GET
#define TX66_A_CONTROLr_TFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_SBITCLRf_SET
#define TX66_A_CONTROLr_TFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_AFRST_ENf_GET
#define TX66_A_CONTROLr_TFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr_TFIFO_AFRST_ENf_SET
#define READ_TX66_A_CONTROLr BCMI_HYPERLITE_XGXS_READ_TX66_A_CONTROLr
#define WRITE_TX66_A_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_TX66_A_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_A_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TX66_A_STATUS
 * BLOCKS:   TX66
 * REGADDR:  0x81a1
 * DESC:     64/66 Encoder Status Register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     UNFLOW           
 *     OVFLOW           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr (0x0001a011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TX66_A_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_s {
	uint32_t v[1];
	uint32_t tx66_a_status[1];
	uint32_t _tx66_a_status;
} BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_CLR(r) (r).tx66_a_status[0] = 0
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_SET(r,d) (r).tx66_a_status[0] = d
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_GET(r) (r).tx66_a_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_RESERVED_FOR_ECO0f_GET(r) ((((r).tx66_a_status[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_RESERVED_FOR_ECO0f_SET(r,f) (r).tx66_a_status[0]=(((r).tx66_a_status[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_OVFLOWf_GET(r) ((((r).tx66_a_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_OVFLOWf_SET(r,f) (r).tx66_a_status[0]=(((r).tx66_a_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_UNFLOWf_GET(r) ((((r).tx66_a_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_UNFLOWf_SET(r,f) (r).tx66_a_status[0]=(((r).tx66_a_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_FERRf_GET(r) (((r).tx66_a_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_FERRf_SET(r,f) (r).tx66_a_status[0]=(((r).tx66_a_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX66_A_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TX66_A_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TX66_A_STATUSr,(_r._tx66_a_status))
#define BCMI_HYPERLITE_XGXS_WRITE_TX66_A_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TX66_A_STATUSr,(_r._tx66_a_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX66_A_STATUSr BCMI_HYPERLITE_XGXS_TX66_A_STATUSr
#define TX66_A_STATUSr_SIZE BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_t TX66_A_STATUSr_t;
#define TX66_A_STATUSr_CLR BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_CLR
#define TX66_A_STATUSr_SET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_SET
#define TX66_A_STATUSr_GET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_GET
#define TX66_A_STATUSr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_RESERVED_FOR_ECO0f_GET
#define TX66_A_STATUSr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_RESERVED_FOR_ECO0f_SET
#define TX66_A_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_OVFLOWf_GET
#define TX66_A_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_OVFLOWf_SET
#define TX66_A_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_UNFLOWf_GET
#define TX66_A_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_UNFLOWf_SET
#define TX66_A_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_FERRf_GET
#define TX66_A_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_TX66_A_STATUSr_FERRf_SET
#define READ_TX66_A_STATUSr BCMI_HYPERLITE_XGXS_READ_TX66_A_STATUSr
#define WRITE_TX66_A_STATUSr BCMI_HYPERLITE_XGXS_WRITE_TX66_A_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TX66_A_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_CONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81b0
 * DESC:     64/66 Decoder control register
 * SIZE:     32
 * FIELDS:
 *     RFIFO_AFRST_EN   
 *     RFIFO_SBITCLR    
 *     DESCRAMBLERCONTROL 
 *     CGBAD_KCODE66ERR_EN 
 *     KCODE66ERRCOUNT_EN 
 *     SYNC66ERRCOUNT_EN 
 *     CWCOUNT_EN       
 *     CWCOUNT_SEL      
 *     RXSEQDONEMASK    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr (0x0001b010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_s {
	uint32_t v[1];
	uint32_t reg_0_control[1];
	uint32_t _reg_0_control;
} BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CLR(r) (r).reg_0_control[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SET(r,d) (r).reg_0_control[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_GET(r) (r).reg_0_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RESERVED0f_GET(r) ((((r).reg_0_control[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RESERVED0f_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RXSEQDONEMASKf_GET(r) ((((r).reg_0_control[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RXSEQDONEMASKf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_SELf_GET(r) ((((r).reg_0_control[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_SELf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_ENf_GET(r) ((((r).reg_0_control[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_ENf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_GET(r) ((((r).reg_0_control[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_GET(r) ((((r).reg_0_control[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_GET(r) ((((r).reg_0_control[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_DESCRAMBLERCONTROLf_GET(r) ((((r).reg_0_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_DESCRAMBLERCONTROLf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_SBITCLRf_GET(r) ((((r).reg_0_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_SBITCLRf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_AFRST_ENf_GET(r) (((r).reg_0_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_AFRST_ENf_SET(r,f) (r).reg_0_control[0]=(((r).reg_0_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_0_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_CONTROLr,(_r._reg_0_control))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_CONTROLr,(_r._reg_0_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_CONTROLr BCMI_HYPERLITE_XGXS_REG_0_CONTROLr
#define REG_0_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_t REG_0_CONTROLr_t;
#define REG_0_CONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CLR
#define REG_0_CONTROLr_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SET
#define REG_0_CONTROLr_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_GET
#define REG_0_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RESERVED0f_GET
#define REG_0_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RESERVED0f_SET
#define REG_0_CONTROLr_RXSEQDONEMASKf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RXSEQDONEMASKf_GET
#define REG_0_CONTROLr_RXSEQDONEMASKf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RXSEQDONEMASKf_SET
#define REG_0_CONTROLr_CWCOUNT_SELf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_SELf_GET
#define REG_0_CONTROLr_CWCOUNT_SELf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_SELf_SET
#define REG_0_CONTROLr_CWCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_ENf_GET
#define REG_0_CONTROLr_CWCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CWCOUNT_ENf_SET
#define REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_GET
#define REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_SYNC66ERRCOUNT_ENf_SET
#define REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_GET
#define REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_KCODE66ERRCOUNT_ENf_SET
#define REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_GET
#define REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_CGBAD_KCODE66ERR_ENf_SET
#define REG_0_CONTROLr_DESCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_DESCRAMBLERCONTROLf_GET
#define REG_0_CONTROLr_DESCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_DESCRAMBLERCONTROLf_SET
#define REG_0_CONTROLr_RFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_SBITCLRf_GET
#define REG_0_CONTROLr_RFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_SBITCLRf_SET
#define REG_0_CONTROLr_RFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_AFRST_ENf_GET
#define REG_0_CONTROLr_RFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_REG_0_CONTROLr_RFIFO_AFRST_ENf_SET
#define READ_REG_0_CONTROLr BCMI_HYPERLITE_XGXS_READ_REG_0_CONTROLr
#define WRITE_REG_0_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_0_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_STATUS
 * BLOCKS:   RX66
 * REGADDR:  0x81b1
 * DESC:     64/66 Decoder status register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     OVFLOW           
 *     UNFLOW           
 *     SYNCDONE         
 *     RESERVED0        
 *     SYNC_ACQD2       
 *     SYNC_ACQD1       
 *     COMMA_DETECT     
 *     LOSS_OF_SYNC     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr (0x0001b011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_STATUSr_s {
	uint32_t v[1];
	uint32_t reg_0_status[1];
	uint32_t _reg_0_status;
} BCMI_HYPERLITE_XGXS_REG_0_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_CLR(r) (r).reg_0_status[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SET(r,d) (r).reg_0_status[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_GET(r) (r).reg_0_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_LOSS_OF_SYNCf_GET(r) ((((r).reg_0_status[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_LOSS_OF_SYNCf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_COMMA_DETECTf_GET(r) ((((r).reg_0_status[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_COMMA_DETECTf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD1f_GET(r) ((((r).reg_0_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD1f_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD2f_GET(r) ((((r).reg_0_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD2f_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_RESERVED0f_GET(r) ((((r).reg_0_status[0]) >> 4) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_RESERVED0f_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0xff << 4)) | ((((uint32_t)f) & 0xff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNCDONEf_GET(r) ((((r).reg_0_status[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNCDONEf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_UNFLOWf_GET(r) ((((r).reg_0_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_UNFLOWf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_OVFLOWf_GET(r) ((((r).reg_0_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_OVFLOWf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_FERRf_GET(r) (((r).reg_0_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_STATUSr_FERRf_SET(r,f) (r).reg_0_status[0]=(((r).reg_0_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_0_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_STATUSr,(_r._reg_0_status))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_STATUSr,(_r._reg_0_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_STATUSr BCMI_HYPERLITE_XGXS_REG_0_STATUSr
#define REG_0_STATUSr_SIZE BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_STATUSr_t REG_0_STATUSr_t;
#define REG_0_STATUSr_CLR BCMI_HYPERLITE_XGXS_REG_0_STATUSr_CLR
#define REG_0_STATUSr_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SET
#define REG_0_STATUSr_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_GET
#define REG_0_STATUSr_LOSS_OF_SYNCf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_LOSS_OF_SYNCf_GET
#define REG_0_STATUSr_LOSS_OF_SYNCf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_LOSS_OF_SYNCf_SET
#define REG_0_STATUSr_COMMA_DETECTf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_COMMA_DETECTf_GET
#define REG_0_STATUSr_COMMA_DETECTf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_COMMA_DETECTf_SET
#define REG_0_STATUSr_SYNC_ACQD1f_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD1f_GET
#define REG_0_STATUSr_SYNC_ACQD1f_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD1f_SET
#define REG_0_STATUSr_SYNC_ACQD2f_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD2f_GET
#define REG_0_STATUSr_SYNC_ACQD2f_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNC_ACQD2f_SET
#define REG_0_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_RESERVED0f_GET
#define REG_0_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_RESERVED0f_SET
#define REG_0_STATUSr_SYNCDONEf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNCDONEf_GET
#define REG_0_STATUSr_SYNCDONEf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_SYNCDONEf_SET
#define REG_0_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_UNFLOWf_GET
#define REG_0_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_UNFLOWf_SET
#define REG_0_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_OVFLOWf_GET
#define REG_0_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_OVFLOWf_SET
#define REG_0_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_FERRf_GET
#define REG_0_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_REG_0_STATUSr_FERRf_SET
#define READ_REG_0_STATUSr BCMI_HYPERLITE_XGXS_READ_REG_0_STATUSr
#define WRITE_REG_0_STATUSr BCMI_HYPERLITE_XGXS_WRITE_REG_0_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW0
 * BLOCKS:   RX66
 * REGADDR:  0x81b2
 * DESC:     Sync code word bits 15:0
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW0_MASK   
 *     SCW0             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r (0x0001b012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW0r_s {
	uint32_t v[1];
	uint32_t reg_0_scw0[1];
	uint32_t _reg_0_scw0;
} BCMI_HYPERLITE_XGXS_REG_0_SCW0r_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_CLR(r) (r).reg_0_scw0[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SET(r,d) (r).reg_0_scw0[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_GET(r) (r).reg_0_scw0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_MASK_SCW0_MASKf_GET(r) (((r).reg_0_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_MASK_SCW0_MASKf_SET(r,f) (r).reg_0_scw0[0]=(((r).reg_0_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SCW0f_GET(r) (((r).reg_0_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SCW0f_SET(r,f) (r).reg_0_scw0[0]=(((r).reg_0_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW0r,(_r._reg_0_scw0))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW0r,(_r._reg_0_scw0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW0r BCMI_HYPERLITE_XGXS_REG_0_SCW0r
#define REG_0_SCW0r_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW0r_t REG_0_SCW0r_t;
#define REG_0_SCW0r_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW0r_CLR
#define REG_0_SCW0r_SET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SET
#define REG_0_SCW0r_GET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_GET
#define REG_0_SCW0r_MASK_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_MASK_SCW0_MASKf_GET
#define REG_0_SCW0r_MASK_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_MASK_SCW0_MASKf_SET
#define REG_0_SCW0r_SCW0f_GET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SCW0f_GET
#define REG_0_SCW0r_SCW0f_SET BCMI_HYPERLITE_XGXS_REG_0_SCW0r_SCW0f_SET
#define READ_REG_0_SCW0r BCMI_HYPERLITE_XGXS_READ_REG_0_SCW0r
#define WRITE_REG_0_SCW0r BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW1
 * BLOCKS:   RX66
 * REGADDR:  0x81b3
 * DESC:     Sync code word bits 31;16
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW1_MASK   
 *     SCW1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r (0x0001b013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW1r_s {
	uint32_t v[1];
	uint32_t reg_0_scw1[1];
	uint32_t _reg_0_scw1;
} BCMI_HYPERLITE_XGXS_REG_0_SCW1r_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_CLR(r) (r).reg_0_scw1[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SET(r,d) (r).reg_0_scw1[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_GET(r) (r).reg_0_scw1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_MASK_SCW1_MASKf_GET(r) (((r).reg_0_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_MASK_SCW1_MASKf_SET(r,f) (r).reg_0_scw1[0]=(((r).reg_0_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SCW1f_GET(r) (((r).reg_0_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SCW1f_SET(r,f) (r).reg_0_scw1[0]=(((r).reg_0_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW1r,(_r._reg_0_scw1))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW1r,(_r._reg_0_scw1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW1r BCMI_HYPERLITE_XGXS_REG_0_SCW1r
#define REG_0_SCW1r_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW1r_t REG_0_SCW1r_t;
#define REG_0_SCW1r_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW1r_CLR
#define REG_0_SCW1r_SET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SET
#define REG_0_SCW1r_GET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_GET
#define REG_0_SCW1r_MASK_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_MASK_SCW1_MASKf_GET
#define REG_0_SCW1r_MASK_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_MASK_SCW1_MASKf_SET
#define REG_0_SCW1r_SCW1f_GET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SCW1f_GET
#define REG_0_SCW1r_SCW1f_SET BCMI_HYPERLITE_XGXS_REG_0_SCW1r_SCW1f_SET
#define READ_REG_0_SCW1r BCMI_HYPERLITE_XGXS_READ_REG_0_SCW1r
#define WRITE_REG_0_SCW1r BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW2
 * BLOCKS:   RX66
 * REGADDR:  0x81b4
 * DESC:     Sync code word bits 47:32
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW2_MASK   
 *     SCW2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r (0x0001b014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW2r_s {
	uint32_t v[1];
	uint32_t reg_0_scw2[1];
	uint32_t _reg_0_scw2;
} BCMI_HYPERLITE_XGXS_REG_0_SCW2r_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_CLR(r) (r).reg_0_scw2[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SET(r,d) (r).reg_0_scw2[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_GET(r) (r).reg_0_scw2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_MASK_SCW2_MASKf_GET(r) (((r).reg_0_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_MASK_SCW2_MASKf_SET(r,f) (r).reg_0_scw2[0]=(((r).reg_0_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SCW2f_GET(r) (((r).reg_0_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SCW2f_SET(r,f) (r).reg_0_scw2[0]=(((r).reg_0_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW2r,(_r._reg_0_scw2))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW2r,(_r._reg_0_scw2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW2r BCMI_HYPERLITE_XGXS_REG_0_SCW2r
#define REG_0_SCW2r_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW2r_t REG_0_SCW2r_t;
#define REG_0_SCW2r_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW2r_CLR
#define REG_0_SCW2r_SET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SET
#define REG_0_SCW2r_GET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_GET
#define REG_0_SCW2r_MASK_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_MASK_SCW2_MASKf_GET
#define REG_0_SCW2r_MASK_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_MASK_SCW2_MASKf_SET
#define REG_0_SCW2r_SCW2f_GET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SCW2f_GET
#define REG_0_SCW2r_SCW2f_SET BCMI_HYPERLITE_XGXS_REG_0_SCW2r_SCW2f_SET
#define READ_REG_0_SCW2r BCMI_HYPERLITE_XGXS_READ_REG_0_SCW2r
#define WRITE_REG_0_SCW2r BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW3
 * BLOCKS:   RX66
 * REGADDR:  0x81b5
 * DESC:     Sync code word bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3             
 *     MASK_SCW3_MASK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r (0x0001b015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW3r_s {
	uint32_t v[1];
	uint32_t reg_0_scw3[1];
	uint32_t _reg_0_scw3;
} BCMI_HYPERLITE_XGXS_REG_0_SCW3r_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_CLR(r) (r).reg_0_scw3[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SET(r,d) (r).reg_0_scw3[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_GET(r) (r).reg_0_scw3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SCW3f_GET(r) (((r).reg_0_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SCW3f_SET(r,f) (r).reg_0_scw3[0]=(((r).reg_0_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_MASK_SCW3_MASKf_GET(r) (((r).reg_0_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3r_MASK_SCW3_MASKf_SET(r,f) (r).reg_0_scw3[0]=(((r).reg_0_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW3r,(_r._reg_0_scw3))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW3r,(_r._reg_0_scw3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW3r BCMI_HYPERLITE_XGXS_REG_0_SCW3r
#define REG_0_SCW3r_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW3r_t REG_0_SCW3r_t;
#define REG_0_SCW3r_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW3r_CLR
#define REG_0_SCW3r_SET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SET
#define REG_0_SCW3r_GET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_GET
#define REG_0_SCW3r_SCW3f_GET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SCW3f_GET
#define REG_0_SCW3r_SCW3f_SET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_SCW3f_SET
#define REG_0_SCW3r_MASK_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_MASK_SCW3_MASKf_GET
#define REG_0_SCW3r_MASK_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW3r_MASK_SCW3_MASKf_SET
#define READ_REG_0_SCW3r BCMI_HYPERLITE_XGXS_READ_REG_0_SCW3r
#define WRITE_REG_0_SCW3r BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW0_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81b6
 * DESC:     Sync code word mask bits 15:0
 * SIZE:     32
 * FIELDS:
 *     SCW0_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr (0x0001b016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW0_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_s {
	uint32_t v[1];
	uint32_t reg_0_scw0_mask[1];
	uint32_t _reg_0_scw0_mask;
} BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_CLR(r) (r).reg_0_scw0_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SET(r,d) (r).reg_0_scw0_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_GET(r) (r).reg_0_scw0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SCW0_MASKf_GET(r) (((r).reg_0_scw0_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SCW0_MASKf_SET(r,f) (r).reg_0_scw0_mask[0]=(((r).reg_0_scw0_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW0_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW0_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr,(_r._reg_0_scw0_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW0_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr,(_r._reg_0_scw0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW0_MASKr BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr
#define REG_0_SCW0_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_t REG_0_SCW0_MASKr_t;
#define REG_0_SCW0_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_CLR
#define REG_0_SCW0_MASKr_SET BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SET
#define REG_0_SCW0_MASKr_GET BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_GET
#define REG_0_SCW0_MASKr_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SCW0_MASKf_GET
#define REG_0_SCW0_MASKr_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr_SCW0_MASKf_SET
#define READ_REG_0_SCW0_MASKr BCMI_HYPERLITE_XGXS_READ_REG_0_SCW0_MASKr
#define WRITE_REG_0_SCW0_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW1_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81b7
 * DESC:     Sync code word mask bits 31;16
 * SIZE:     32
 * FIELDS:
 *     SCW1_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr (0x0001b017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW1_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_s {
	uint32_t v[1];
	uint32_t reg_0_scw1_mask[1];
	uint32_t _reg_0_scw1_mask;
} BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_CLR(r) (r).reg_0_scw1_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SET(r,d) (r).reg_0_scw1_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_GET(r) (r).reg_0_scw1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SCW1_MASKf_GET(r) (((r).reg_0_scw1_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SCW1_MASKf_SET(r,f) (r).reg_0_scw1_mask[0]=(((r).reg_0_scw1_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW1_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW1_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr,(_r._reg_0_scw1_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW1_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr,(_r._reg_0_scw1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW1_MASKr BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr
#define REG_0_SCW1_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_t REG_0_SCW1_MASKr_t;
#define REG_0_SCW1_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_CLR
#define REG_0_SCW1_MASKr_SET BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SET
#define REG_0_SCW1_MASKr_GET BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_GET
#define REG_0_SCW1_MASKr_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SCW1_MASKf_GET
#define REG_0_SCW1_MASKr_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr_SCW1_MASKf_SET
#define READ_REG_0_SCW1_MASKr BCMI_HYPERLITE_XGXS_READ_REG_0_SCW1_MASKr
#define WRITE_REG_0_SCW1_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW2_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81b8
 * DESC:     Sync code word mask bits 47:32
 * SIZE:     32
 * FIELDS:
 *     SCW2_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr (0x0001b018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW2_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_s {
	uint32_t v[1];
	uint32_t reg_0_scw2_mask[1];
	uint32_t _reg_0_scw2_mask;
} BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_CLR(r) (r).reg_0_scw2_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SET(r,d) (r).reg_0_scw2_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_GET(r) (r).reg_0_scw2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SCW2_MASKf_GET(r) (((r).reg_0_scw2_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SCW2_MASKf_SET(r,f) (r).reg_0_scw2_mask[0]=(((r).reg_0_scw2_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW2_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW2_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr,(_r._reg_0_scw2_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW2_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr,(_r._reg_0_scw2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW2_MASKr BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr
#define REG_0_SCW2_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_t REG_0_SCW2_MASKr_t;
#define REG_0_SCW2_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_CLR
#define REG_0_SCW2_MASKr_SET BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SET
#define REG_0_SCW2_MASKr_GET BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_GET
#define REG_0_SCW2_MASKr_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SCW2_MASKf_GET
#define REG_0_SCW2_MASKr_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr_SCW2_MASKf_SET
#define READ_REG_0_SCW2_MASKr BCMI_HYPERLITE_XGXS_READ_REG_0_SCW2_MASKr
#define WRITE_REG_0_SCW2_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCW3_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81b9
 * DESC:     Sync code word mask bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr (0x0001b019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCW3_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_s {
	uint32_t v[1];
	uint32_t reg_0_scw3_mask[1];
	uint32_t _reg_0_scw3_mask;
} BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_CLR(r) (r).reg_0_scw3_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SET(r,d) (r).reg_0_scw3_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_GET(r) (r).reg_0_scw3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SCW3_MASKf_GET(r) (((r).reg_0_scw3_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SCW3_MASKf_SET(r,f) (r).reg_0_scw3_mask[0]=(((r).reg_0_scw3_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_0_SCW3_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCW3_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr,(_r._reg_0_scw3_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW3_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr,(_r._reg_0_scw3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCW3_MASKr BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr
#define REG_0_SCW3_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_t REG_0_SCW3_MASKr_t;
#define REG_0_SCW3_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_CLR
#define REG_0_SCW3_MASKr_SET BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SET
#define REG_0_SCW3_MASKr_GET BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_GET
#define REG_0_SCW3_MASKr_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SCW3_MASKf_GET
#define REG_0_SCW3_MASKr_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr_SCW3_MASKf_SET
#define READ_REG_0_SCW3_MASKr BCMI_HYPERLITE_XGXS_READ_REG_0_SCW3_MASKr
#define WRITE_REG_0_SCW3_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCW3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCW3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SYNCBITS
 * BLOCKS:   RX66
 * REGADDR:  0x81ba
 * DESC:     Sync bits and sync mask bits
 * SIZE:     32
 * FIELDS:
 *     SYNCBITS_MASK    
 *     SYNCBITS         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr (0x0001b01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SYNCBITS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_s {
	uint32_t v[1];
	uint32_t reg_0_syncbits[1];
	uint32_t _reg_0_syncbits;
} BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_CLR(r) (r).reg_0_syncbits[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SET(r,d) (r).reg_0_syncbits[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_GET(r) (r).reg_0_syncbits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_RESERVED0f_GET(r) ((((r).reg_0_syncbits[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_RESERVED0f_SET(r,f) (r).reg_0_syncbits[0]=(((r).reg_0_syncbits[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITSf_GET(r) ((((r).reg_0_syncbits[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITSf_SET(r,f) (r).reg_0_syncbits[0]=(((r).reg_0_syncbits[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITS_MASKf_GET(r) (((r).reg_0_syncbits[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITS_MASKf_SET(r,f) (r).reg_0_syncbits[0]=(((r).reg_0_syncbits[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access REG_0_SYNCBITS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SYNCBITSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr,(_r._reg_0_syncbits))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SYNCBITSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr,(_r._reg_0_syncbits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SYNCBITSr BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr
#define REG_0_SYNCBITSr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_t REG_0_SYNCBITSr_t;
#define REG_0_SYNCBITSr_CLR BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_CLR
#define REG_0_SYNCBITSr_SET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SET
#define REG_0_SYNCBITSr_GET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_GET
#define REG_0_SYNCBITSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_RESERVED0f_GET
#define REG_0_SYNCBITSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_RESERVED0f_SET
#define REG_0_SYNCBITSr_SYNCBITSf_GET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITSf_GET
#define REG_0_SYNCBITSr_SYNCBITSf_SET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITSf_SET
#define REG_0_SYNCBITSr_SYNCBITS_MASKf_GET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITS_MASKf_GET
#define REG_0_SYNCBITSr_SYNCBITS_MASKf_SET BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr_SYNCBITS_MASKf_SET
#define READ_REG_0_SYNCBITSr BCMI_HYPERLITE_XGXS_READ_REG_0_SYNCBITSr
#define WRITE_REG_0_SYNCBITSr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SYNCBITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SYNCBITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCWCONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81bb
 * DESC:     Sync code word statemachine control register
 * SIZE:     32
 * FIELDS:
 *     HYSTCOUNT        
 *     GCWCOUNT         
 *     SCWCOUNT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr (0x0001b01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCWCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_s {
	uint32_t v[1];
	uint32_t reg_0_scwcontrol[1];
	uint32_t _reg_0_scwcontrol;
} BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_CLR(r) (r).reg_0_scwcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SET(r,d) (r).reg_0_scwcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GET(r) (r).reg_0_scwcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_RESERVED0f_GET(r) ((((r).reg_0_scwcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_RESERVED0f_SET(r,f) (r).reg_0_scwcontrol[0]=(((r).reg_0_scwcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SCWCOUNTf_GET(r) ((((r).reg_0_scwcontrol[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SCWCOUNTf_SET(r,f) (r).reg_0_scwcontrol[0]=(((r).reg_0_scwcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GCWCOUNTf_GET(r) ((((r).reg_0_scwcontrol[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GCWCOUNTf_SET(r,f) (r).reg_0_scwcontrol[0]=(((r).reg_0_scwcontrol[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_HYSTCOUNTf_GET(r) (((r).reg_0_scwcontrol[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_HYSTCOUNTf_SET(r,f) (r).reg_0_scwcontrol[0]=(((r).reg_0_scwcontrol[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access REG_0_SCWCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCWCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr,(_r._reg_0_scwcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCWCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr,(_r._reg_0_scwcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCWCONTROLr BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr
#define REG_0_SCWCONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_t REG_0_SCWCONTROLr_t;
#define REG_0_SCWCONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_CLR
#define REG_0_SCWCONTROLr_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SET
#define REG_0_SCWCONTROLr_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GET
#define REG_0_SCWCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_RESERVED0f_GET
#define REG_0_SCWCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_RESERVED0f_SET
#define REG_0_SCWCONTROLr_SCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SCWCOUNTf_GET
#define REG_0_SCWCONTROLr_SCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_SCWCOUNTf_SET
#define REG_0_SCWCONTROLr_GCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GCWCOUNTf_GET
#define REG_0_SCWCONTROLr_GCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_GCWCOUNTf_SET
#define REG_0_SCWCONTROLr_HYSTCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_HYSTCOUNTf_GET
#define REG_0_SCWCONTROLr_HYSTCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr_HYSTCOUNTf_SET
#define READ_REG_0_SCWCONTROLr BCMI_HYPERLITE_XGXS_READ_REG_0_SCWCONTROLr
#define WRITE_REG_0_SCWCONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCWCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCWCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_SCWCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81bd
 * DESC:     CW=SCW counter & skew position
 * SIZE:     32
 * FIELDS:
 *     SYNC_ACQD2_CWCOUNT 
 *     COMMA_DETECT_CWCOUNT 
 *     SCWSHIFT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr (0x0001b01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_SCWCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_0_scwcount[1];
	uint32_t _reg_0_scwcount;
} BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_CLR(r) (r).reg_0_scwcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SET(r,d) (r).reg_0_scwcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_GET(r) (r).reg_0_scwcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_RESERVED0f_GET(r) ((((r).reg_0_scwcount[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_RESERVED0f_SET(r,f) (r).reg_0_scwcount[0]=(((r).reg_0_scwcount[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SCWSHIFTf_GET(r) ((((r).reg_0_scwcount[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SCWSHIFTf_SET(r,f) (r).reg_0_scwcount[0]=(((r).reg_0_scwcount[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET(r) (((r).reg_0_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET(r,f) (r).reg_0_scwcount[0]=(((r).reg_0_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET(r) (((r).reg_0_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET(r,f) (r).reg_0_scwcount[0]=(((r).reg_0_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_0_SCWCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_SCWCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr,(_r._reg_0_scwcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCWCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr,(_r._reg_0_scwcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_SCWCOUNTr BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr
#define REG_0_SCWCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_t REG_0_SCWCOUNTr_t;
#define REG_0_SCWCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_CLR
#define REG_0_SCWCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SET
#define REG_0_SCWCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_GET
#define REG_0_SCWCOUNTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_RESERVED0f_GET
#define REG_0_SCWCOUNTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_RESERVED0f_SET
#define REG_0_SCWCOUNTr_SCWSHIFTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SCWSHIFTf_GET
#define REG_0_SCWCOUNTr_SCWSHIFTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SCWSHIFTf_SET
#define REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET
#define REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET
#define REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET
#define REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET
#define READ_REG_0_SCWCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_0_SCWCOUNTr
#define WRITE_REG_0_SCWCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_0_SCWCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_SCWCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_0_ERRCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81be
 * DESC:     scw & K-code group error counters
 * SIZE:     32
 * FIELDS:
 *     KCODE66ERRCOUNT  
 *     SYNC66ERRCOUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr (0x0001b01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_0_ERRCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_0_errcount[1];
	uint32_t _reg_0_errcount;
} BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_CLR(r) (r).reg_0_errcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SET(r,d) (r).reg_0_errcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_GET(r) (r).reg_0_errcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_GET(r) ((((r).reg_0_errcount[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_SET(r,f) (r).reg_0_errcount[0]=(((r).reg_0_errcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_GET(r) (((r).reg_0_errcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_SET(r,f) (r).reg_0_errcount[0]=(((r).reg_0_errcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_0_ERRCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_0_ERRCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr,(_r._reg_0_errcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_0_ERRCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr,(_r._reg_0_errcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_0_ERRCOUNTr BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr
#define REG_0_ERRCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_t REG_0_ERRCOUNTr_t;
#define REG_0_ERRCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_CLR
#define REG_0_ERRCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SET
#define REG_0_ERRCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_GET
#define REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_GET
#define REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_SYNC66ERRCOUNTf_SET
#define REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_GET
#define REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr_KCODE66ERRCOUNTf_SET
#define READ_REG_0_ERRCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_0_ERRCOUNTr
#define WRITE_REG_0_ERRCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_0_ERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_0_ERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_CONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81c0
 * DESC:     64/66 Decoder control register
 * SIZE:     32
 * FIELDS:
 *     RFIFO_AFRST_EN   
 *     RFIFO_SBITCLR    
 *     DESCRAMBLERCONTROL 
 *     CGBAD_KCODE66ERR_EN 
 *     KCODE66ERRCOUNT_EN 
 *     SYNC66ERRCOUNT_EN 
 *     CWCOUNT_EN       
 *     CWCOUNT_SEL      
 *     RXSEQDONEMASK    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr (0x0001c010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_s {
	uint32_t v[1];
	uint32_t reg_1_control[1];
	uint32_t _reg_1_control;
} BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CLR(r) (r).reg_1_control[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SET(r,d) (r).reg_1_control[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_GET(r) (r).reg_1_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RESERVED0f_GET(r) ((((r).reg_1_control[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RESERVED0f_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RXSEQDONEMASKf_GET(r) ((((r).reg_1_control[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RXSEQDONEMASKf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_SELf_GET(r) ((((r).reg_1_control[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_SELf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_ENf_GET(r) ((((r).reg_1_control[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_ENf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_GET(r) ((((r).reg_1_control[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_GET(r) ((((r).reg_1_control[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_GET(r) ((((r).reg_1_control[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_DESCRAMBLERCONTROLf_GET(r) ((((r).reg_1_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_DESCRAMBLERCONTROLf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_SBITCLRf_GET(r) ((((r).reg_1_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_SBITCLRf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_AFRST_ENf_GET(r) (((r).reg_1_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_AFRST_ENf_SET(r,f) (r).reg_1_control[0]=(((r).reg_1_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_1_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_CONTROLr,(_r._reg_1_control))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_CONTROLr,(_r._reg_1_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_CONTROLr BCMI_HYPERLITE_XGXS_REG_1_CONTROLr
#define REG_1_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_t REG_1_CONTROLr_t;
#define REG_1_CONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CLR
#define REG_1_CONTROLr_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SET
#define REG_1_CONTROLr_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_GET
#define REG_1_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RESERVED0f_GET
#define REG_1_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RESERVED0f_SET
#define REG_1_CONTROLr_RXSEQDONEMASKf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RXSEQDONEMASKf_GET
#define REG_1_CONTROLr_RXSEQDONEMASKf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RXSEQDONEMASKf_SET
#define REG_1_CONTROLr_CWCOUNT_SELf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_SELf_GET
#define REG_1_CONTROLr_CWCOUNT_SELf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_SELf_SET
#define REG_1_CONTROLr_CWCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_ENf_GET
#define REG_1_CONTROLr_CWCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CWCOUNT_ENf_SET
#define REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_GET
#define REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_SYNC66ERRCOUNT_ENf_SET
#define REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_GET
#define REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_KCODE66ERRCOUNT_ENf_SET
#define REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_GET
#define REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_CGBAD_KCODE66ERR_ENf_SET
#define REG_1_CONTROLr_DESCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_DESCRAMBLERCONTROLf_GET
#define REG_1_CONTROLr_DESCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_DESCRAMBLERCONTROLf_SET
#define REG_1_CONTROLr_RFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_SBITCLRf_GET
#define REG_1_CONTROLr_RFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_SBITCLRf_SET
#define REG_1_CONTROLr_RFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_AFRST_ENf_GET
#define REG_1_CONTROLr_RFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_REG_1_CONTROLr_RFIFO_AFRST_ENf_SET
#define READ_REG_1_CONTROLr BCMI_HYPERLITE_XGXS_READ_REG_1_CONTROLr
#define WRITE_REG_1_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_1_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_STATUS
 * BLOCKS:   RX66
 * REGADDR:  0x81c1
 * DESC:     64/66 Decoder status register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     OVFLOW           
 *     UNFLOW           
 *     SYNCDONE         
 *     RESERVED0        
 *     SYNC_ACQD2       
 *     SYNC_ACQD1       
 *     COMMA_DETECT     
 *     LOSS_OF_SYNC     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr (0x0001c011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_STATUSr_s {
	uint32_t v[1];
	uint32_t reg_1_status[1];
	uint32_t _reg_1_status;
} BCMI_HYPERLITE_XGXS_REG_1_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_CLR(r) (r).reg_1_status[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SET(r,d) (r).reg_1_status[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_GET(r) (r).reg_1_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_LOSS_OF_SYNCf_GET(r) ((((r).reg_1_status[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_LOSS_OF_SYNCf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_COMMA_DETECTf_GET(r) ((((r).reg_1_status[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_COMMA_DETECTf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD1f_GET(r) ((((r).reg_1_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD1f_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD2f_GET(r) ((((r).reg_1_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD2f_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_RESERVED0f_GET(r) ((((r).reg_1_status[0]) >> 4) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_RESERVED0f_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0xff << 4)) | ((((uint32_t)f) & 0xff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNCDONEf_GET(r) ((((r).reg_1_status[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNCDONEf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_UNFLOWf_GET(r) ((((r).reg_1_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_UNFLOWf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_OVFLOWf_GET(r) ((((r).reg_1_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_OVFLOWf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_FERRf_GET(r) (((r).reg_1_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_STATUSr_FERRf_SET(r,f) (r).reg_1_status[0]=(((r).reg_1_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_1_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_STATUSr,(_r._reg_1_status))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_STATUSr,(_r._reg_1_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_STATUSr BCMI_HYPERLITE_XGXS_REG_1_STATUSr
#define REG_1_STATUSr_SIZE BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_STATUSr_t REG_1_STATUSr_t;
#define REG_1_STATUSr_CLR BCMI_HYPERLITE_XGXS_REG_1_STATUSr_CLR
#define REG_1_STATUSr_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SET
#define REG_1_STATUSr_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_GET
#define REG_1_STATUSr_LOSS_OF_SYNCf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_LOSS_OF_SYNCf_GET
#define REG_1_STATUSr_LOSS_OF_SYNCf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_LOSS_OF_SYNCf_SET
#define REG_1_STATUSr_COMMA_DETECTf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_COMMA_DETECTf_GET
#define REG_1_STATUSr_COMMA_DETECTf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_COMMA_DETECTf_SET
#define REG_1_STATUSr_SYNC_ACQD1f_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD1f_GET
#define REG_1_STATUSr_SYNC_ACQD1f_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD1f_SET
#define REG_1_STATUSr_SYNC_ACQD2f_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD2f_GET
#define REG_1_STATUSr_SYNC_ACQD2f_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNC_ACQD2f_SET
#define REG_1_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_RESERVED0f_GET
#define REG_1_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_RESERVED0f_SET
#define REG_1_STATUSr_SYNCDONEf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNCDONEf_GET
#define REG_1_STATUSr_SYNCDONEf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_SYNCDONEf_SET
#define REG_1_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_UNFLOWf_GET
#define REG_1_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_UNFLOWf_SET
#define REG_1_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_OVFLOWf_GET
#define REG_1_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_OVFLOWf_SET
#define REG_1_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_FERRf_GET
#define REG_1_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_REG_1_STATUSr_FERRf_SET
#define READ_REG_1_STATUSr BCMI_HYPERLITE_XGXS_READ_REG_1_STATUSr
#define WRITE_REG_1_STATUSr BCMI_HYPERLITE_XGXS_WRITE_REG_1_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW0
 * BLOCKS:   RX66
 * REGADDR:  0x81c2
 * DESC:     Sync code word bits 15:0
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW0_MASK   
 *     SCW0             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r (0x0001c012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW0r_s {
	uint32_t v[1];
	uint32_t reg_1_scw0[1];
	uint32_t _reg_1_scw0;
} BCMI_HYPERLITE_XGXS_REG_1_SCW0r_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_CLR(r) (r).reg_1_scw0[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SET(r,d) (r).reg_1_scw0[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_GET(r) (r).reg_1_scw0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_MASK_SCW0_MASKf_GET(r) (((r).reg_1_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_MASK_SCW0_MASKf_SET(r,f) (r).reg_1_scw0[0]=(((r).reg_1_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SCW0f_GET(r) (((r).reg_1_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SCW0f_SET(r,f) (r).reg_1_scw0[0]=(((r).reg_1_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW0r,(_r._reg_1_scw0))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW0r,(_r._reg_1_scw0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW0r BCMI_HYPERLITE_XGXS_REG_1_SCW0r
#define REG_1_SCW0r_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW0r_t REG_1_SCW0r_t;
#define REG_1_SCW0r_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW0r_CLR
#define REG_1_SCW0r_SET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SET
#define REG_1_SCW0r_GET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_GET
#define REG_1_SCW0r_MASK_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_MASK_SCW0_MASKf_GET
#define REG_1_SCW0r_MASK_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_MASK_SCW0_MASKf_SET
#define REG_1_SCW0r_SCW0f_GET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SCW0f_GET
#define REG_1_SCW0r_SCW0f_SET BCMI_HYPERLITE_XGXS_REG_1_SCW0r_SCW0f_SET
#define READ_REG_1_SCW0r BCMI_HYPERLITE_XGXS_READ_REG_1_SCW0r
#define WRITE_REG_1_SCW0r BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW1
 * BLOCKS:   RX66
 * REGADDR:  0x81c3
 * DESC:     Sync code word bits 31;16
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW1_MASK   
 *     SCW1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r (0x0001c013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW1r_s {
	uint32_t v[1];
	uint32_t reg_1_scw1[1];
	uint32_t _reg_1_scw1;
} BCMI_HYPERLITE_XGXS_REG_1_SCW1r_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_CLR(r) (r).reg_1_scw1[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SET(r,d) (r).reg_1_scw1[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_GET(r) (r).reg_1_scw1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_MASK_SCW1_MASKf_GET(r) (((r).reg_1_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_MASK_SCW1_MASKf_SET(r,f) (r).reg_1_scw1[0]=(((r).reg_1_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SCW1f_GET(r) (((r).reg_1_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SCW1f_SET(r,f) (r).reg_1_scw1[0]=(((r).reg_1_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW1r,(_r._reg_1_scw1))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW1r,(_r._reg_1_scw1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW1r BCMI_HYPERLITE_XGXS_REG_1_SCW1r
#define REG_1_SCW1r_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW1r_t REG_1_SCW1r_t;
#define REG_1_SCW1r_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW1r_CLR
#define REG_1_SCW1r_SET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SET
#define REG_1_SCW1r_GET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_GET
#define REG_1_SCW1r_MASK_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_MASK_SCW1_MASKf_GET
#define REG_1_SCW1r_MASK_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_MASK_SCW1_MASKf_SET
#define REG_1_SCW1r_SCW1f_GET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SCW1f_GET
#define REG_1_SCW1r_SCW1f_SET BCMI_HYPERLITE_XGXS_REG_1_SCW1r_SCW1f_SET
#define READ_REG_1_SCW1r BCMI_HYPERLITE_XGXS_READ_REG_1_SCW1r
#define WRITE_REG_1_SCW1r BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW2
 * BLOCKS:   RX66
 * REGADDR:  0x81c4
 * DESC:     Sync code word bits 47:32
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW2_MASK   
 *     SCW2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r (0x0001c014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW2r_s {
	uint32_t v[1];
	uint32_t reg_1_scw2[1];
	uint32_t _reg_1_scw2;
} BCMI_HYPERLITE_XGXS_REG_1_SCW2r_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_CLR(r) (r).reg_1_scw2[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SET(r,d) (r).reg_1_scw2[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_GET(r) (r).reg_1_scw2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_MASK_SCW2_MASKf_GET(r) (((r).reg_1_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_MASK_SCW2_MASKf_SET(r,f) (r).reg_1_scw2[0]=(((r).reg_1_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SCW2f_GET(r) (((r).reg_1_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SCW2f_SET(r,f) (r).reg_1_scw2[0]=(((r).reg_1_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW2r,(_r._reg_1_scw2))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW2r,(_r._reg_1_scw2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW2r BCMI_HYPERLITE_XGXS_REG_1_SCW2r
#define REG_1_SCW2r_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW2r_t REG_1_SCW2r_t;
#define REG_1_SCW2r_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW2r_CLR
#define REG_1_SCW2r_SET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SET
#define REG_1_SCW2r_GET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_GET
#define REG_1_SCW2r_MASK_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_MASK_SCW2_MASKf_GET
#define REG_1_SCW2r_MASK_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_MASK_SCW2_MASKf_SET
#define REG_1_SCW2r_SCW2f_GET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SCW2f_GET
#define REG_1_SCW2r_SCW2f_SET BCMI_HYPERLITE_XGXS_REG_1_SCW2r_SCW2f_SET
#define READ_REG_1_SCW2r BCMI_HYPERLITE_XGXS_READ_REG_1_SCW2r
#define WRITE_REG_1_SCW2r BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW3
 * BLOCKS:   RX66
 * REGADDR:  0x81c5
 * DESC:     Sync code word bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3             
 *     MASK_SCW3_MASK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r (0x0001c015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW3r_s {
	uint32_t v[1];
	uint32_t reg_1_scw3[1];
	uint32_t _reg_1_scw3;
} BCMI_HYPERLITE_XGXS_REG_1_SCW3r_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_CLR(r) (r).reg_1_scw3[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SET(r,d) (r).reg_1_scw3[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_GET(r) (r).reg_1_scw3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SCW3f_GET(r) (((r).reg_1_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SCW3f_SET(r,f) (r).reg_1_scw3[0]=(((r).reg_1_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_MASK_SCW3_MASKf_GET(r) (((r).reg_1_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3r_MASK_SCW3_MASKf_SET(r,f) (r).reg_1_scw3[0]=(((r).reg_1_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW3r,(_r._reg_1_scw3))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW3r,(_r._reg_1_scw3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW3r BCMI_HYPERLITE_XGXS_REG_1_SCW3r
#define REG_1_SCW3r_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW3r_t REG_1_SCW3r_t;
#define REG_1_SCW3r_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW3r_CLR
#define REG_1_SCW3r_SET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SET
#define REG_1_SCW3r_GET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_GET
#define REG_1_SCW3r_SCW3f_GET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SCW3f_GET
#define REG_1_SCW3r_SCW3f_SET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_SCW3f_SET
#define REG_1_SCW3r_MASK_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_MASK_SCW3_MASKf_GET
#define REG_1_SCW3r_MASK_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW3r_MASK_SCW3_MASKf_SET
#define READ_REG_1_SCW3r BCMI_HYPERLITE_XGXS_READ_REG_1_SCW3r
#define WRITE_REG_1_SCW3r BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW0_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81c6
 * DESC:     Sync code word mask bits 15:0
 * SIZE:     32
 * FIELDS:
 *     SCW0_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr (0x0001c016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW0_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_s {
	uint32_t v[1];
	uint32_t reg_1_scw0_mask[1];
	uint32_t _reg_1_scw0_mask;
} BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_CLR(r) (r).reg_1_scw0_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SET(r,d) (r).reg_1_scw0_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_GET(r) (r).reg_1_scw0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SCW0_MASKf_GET(r) (((r).reg_1_scw0_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SCW0_MASKf_SET(r,f) (r).reg_1_scw0_mask[0]=(((r).reg_1_scw0_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW0_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW0_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr,(_r._reg_1_scw0_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW0_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr,(_r._reg_1_scw0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW0_MASKr BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr
#define REG_1_SCW0_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_t REG_1_SCW0_MASKr_t;
#define REG_1_SCW0_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_CLR
#define REG_1_SCW0_MASKr_SET BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SET
#define REG_1_SCW0_MASKr_GET BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_GET
#define REG_1_SCW0_MASKr_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SCW0_MASKf_GET
#define REG_1_SCW0_MASKr_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr_SCW0_MASKf_SET
#define READ_REG_1_SCW0_MASKr BCMI_HYPERLITE_XGXS_READ_REG_1_SCW0_MASKr
#define WRITE_REG_1_SCW0_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW1_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81c7
 * DESC:     Sync code word mask bits 31;16
 * SIZE:     32
 * FIELDS:
 *     SCW1_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr (0x0001c017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW1_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_s {
	uint32_t v[1];
	uint32_t reg_1_scw1_mask[1];
	uint32_t _reg_1_scw1_mask;
} BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_CLR(r) (r).reg_1_scw1_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SET(r,d) (r).reg_1_scw1_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_GET(r) (r).reg_1_scw1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SCW1_MASKf_GET(r) (((r).reg_1_scw1_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SCW1_MASKf_SET(r,f) (r).reg_1_scw1_mask[0]=(((r).reg_1_scw1_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW1_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW1_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr,(_r._reg_1_scw1_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW1_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr,(_r._reg_1_scw1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW1_MASKr BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr
#define REG_1_SCW1_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_t REG_1_SCW1_MASKr_t;
#define REG_1_SCW1_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_CLR
#define REG_1_SCW1_MASKr_SET BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SET
#define REG_1_SCW1_MASKr_GET BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_GET
#define REG_1_SCW1_MASKr_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SCW1_MASKf_GET
#define REG_1_SCW1_MASKr_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr_SCW1_MASKf_SET
#define READ_REG_1_SCW1_MASKr BCMI_HYPERLITE_XGXS_READ_REG_1_SCW1_MASKr
#define WRITE_REG_1_SCW1_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW2_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81c8
 * DESC:     Sync code word mask bits 47:32
 * SIZE:     32
 * FIELDS:
 *     SCW2_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr (0x0001c018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW2_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_s {
	uint32_t v[1];
	uint32_t reg_1_scw2_mask[1];
	uint32_t _reg_1_scw2_mask;
} BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_CLR(r) (r).reg_1_scw2_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SET(r,d) (r).reg_1_scw2_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_GET(r) (r).reg_1_scw2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SCW2_MASKf_GET(r) (((r).reg_1_scw2_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SCW2_MASKf_SET(r,f) (r).reg_1_scw2_mask[0]=(((r).reg_1_scw2_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW2_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW2_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr,(_r._reg_1_scw2_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW2_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr,(_r._reg_1_scw2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW2_MASKr BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr
#define REG_1_SCW2_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_t REG_1_SCW2_MASKr_t;
#define REG_1_SCW2_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_CLR
#define REG_1_SCW2_MASKr_SET BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SET
#define REG_1_SCW2_MASKr_GET BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_GET
#define REG_1_SCW2_MASKr_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SCW2_MASKf_GET
#define REG_1_SCW2_MASKr_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr_SCW2_MASKf_SET
#define READ_REG_1_SCW2_MASKr BCMI_HYPERLITE_XGXS_READ_REG_1_SCW2_MASKr
#define WRITE_REG_1_SCW2_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCW3_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81c9
 * DESC:     Sync code word mask bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr (0x0001c019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCW3_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_s {
	uint32_t v[1];
	uint32_t reg_1_scw3_mask[1];
	uint32_t _reg_1_scw3_mask;
} BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_CLR(r) (r).reg_1_scw3_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SET(r,d) (r).reg_1_scw3_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_GET(r) (r).reg_1_scw3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SCW3_MASKf_GET(r) (((r).reg_1_scw3_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SCW3_MASKf_SET(r,f) (r).reg_1_scw3_mask[0]=(((r).reg_1_scw3_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_1_SCW3_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCW3_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr,(_r._reg_1_scw3_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW3_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr,(_r._reg_1_scw3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCW3_MASKr BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr
#define REG_1_SCW3_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_t REG_1_SCW3_MASKr_t;
#define REG_1_SCW3_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_CLR
#define REG_1_SCW3_MASKr_SET BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SET
#define REG_1_SCW3_MASKr_GET BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_GET
#define REG_1_SCW3_MASKr_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SCW3_MASKf_GET
#define REG_1_SCW3_MASKr_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr_SCW3_MASKf_SET
#define READ_REG_1_SCW3_MASKr BCMI_HYPERLITE_XGXS_READ_REG_1_SCW3_MASKr
#define WRITE_REG_1_SCW3_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCW3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCW3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SYNCBITS
 * BLOCKS:   RX66
 * REGADDR:  0x81ca
 * DESC:     Sync bits and sync mask bits
 * SIZE:     32
 * FIELDS:
 *     SYNCBITS_MASK    
 *     SYNCBITS         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr (0x0001c01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SYNCBITS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_s {
	uint32_t v[1];
	uint32_t reg_1_syncbits[1];
	uint32_t _reg_1_syncbits;
} BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_CLR(r) (r).reg_1_syncbits[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SET(r,d) (r).reg_1_syncbits[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_GET(r) (r).reg_1_syncbits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_RESERVED0f_GET(r) ((((r).reg_1_syncbits[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_RESERVED0f_SET(r,f) (r).reg_1_syncbits[0]=(((r).reg_1_syncbits[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITSf_GET(r) ((((r).reg_1_syncbits[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITSf_SET(r,f) (r).reg_1_syncbits[0]=(((r).reg_1_syncbits[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITS_MASKf_GET(r) (((r).reg_1_syncbits[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITS_MASKf_SET(r,f) (r).reg_1_syncbits[0]=(((r).reg_1_syncbits[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access REG_1_SYNCBITS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SYNCBITSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr,(_r._reg_1_syncbits))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SYNCBITSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr,(_r._reg_1_syncbits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SYNCBITSr BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr
#define REG_1_SYNCBITSr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_t REG_1_SYNCBITSr_t;
#define REG_1_SYNCBITSr_CLR BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_CLR
#define REG_1_SYNCBITSr_SET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SET
#define REG_1_SYNCBITSr_GET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_GET
#define REG_1_SYNCBITSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_RESERVED0f_GET
#define REG_1_SYNCBITSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_RESERVED0f_SET
#define REG_1_SYNCBITSr_SYNCBITSf_GET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITSf_GET
#define REG_1_SYNCBITSr_SYNCBITSf_SET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITSf_SET
#define REG_1_SYNCBITSr_SYNCBITS_MASKf_GET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITS_MASKf_GET
#define REG_1_SYNCBITSr_SYNCBITS_MASKf_SET BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr_SYNCBITS_MASKf_SET
#define READ_REG_1_SYNCBITSr BCMI_HYPERLITE_XGXS_READ_REG_1_SYNCBITSr
#define WRITE_REG_1_SYNCBITSr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SYNCBITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SYNCBITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCWCONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81cb
 * DESC:     Sync code word statemachine control register
 * SIZE:     32
 * FIELDS:
 *     HYSTCOUNT        
 *     GCWCOUNT         
 *     SCWCOUNT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr (0x0001c01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCWCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_s {
	uint32_t v[1];
	uint32_t reg_1_scwcontrol[1];
	uint32_t _reg_1_scwcontrol;
} BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_CLR(r) (r).reg_1_scwcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SET(r,d) (r).reg_1_scwcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GET(r) (r).reg_1_scwcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_RESERVED0f_GET(r) ((((r).reg_1_scwcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_RESERVED0f_SET(r,f) (r).reg_1_scwcontrol[0]=(((r).reg_1_scwcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SCWCOUNTf_GET(r) ((((r).reg_1_scwcontrol[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SCWCOUNTf_SET(r,f) (r).reg_1_scwcontrol[0]=(((r).reg_1_scwcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GCWCOUNTf_GET(r) ((((r).reg_1_scwcontrol[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GCWCOUNTf_SET(r,f) (r).reg_1_scwcontrol[0]=(((r).reg_1_scwcontrol[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_HYSTCOUNTf_GET(r) (((r).reg_1_scwcontrol[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_HYSTCOUNTf_SET(r,f) (r).reg_1_scwcontrol[0]=(((r).reg_1_scwcontrol[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access REG_1_SCWCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCWCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr,(_r._reg_1_scwcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCWCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr,(_r._reg_1_scwcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCWCONTROLr BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr
#define REG_1_SCWCONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_t REG_1_SCWCONTROLr_t;
#define REG_1_SCWCONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_CLR
#define REG_1_SCWCONTROLr_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SET
#define REG_1_SCWCONTROLr_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GET
#define REG_1_SCWCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_RESERVED0f_GET
#define REG_1_SCWCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_RESERVED0f_SET
#define REG_1_SCWCONTROLr_SCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SCWCOUNTf_GET
#define REG_1_SCWCONTROLr_SCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_SCWCOUNTf_SET
#define REG_1_SCWCONTROLr_GCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GCWCOUNTf_GET
#define REG_1_SCWCONTROLr_GCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_GCWCOUNTf_SET
#define REG_1_SCWCONTROLr_HYSTCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_HYSTCOUNTf_GET
#define REG_1_SCWCONTROLr_HYSTCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr_HYSTCOUNTf_SET
#define READ_REG_1_SCWCONTROLr BCMI_HYPERLITE_XGXS_READ_REG_1_SCWCONTROLr
#define WRITE_REG_1_SCWCONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCWCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCWCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_SCWCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81cd
 * DESC:     CW=SCW counter & skew position
 * SIZE:     32
 * FIELDS:
 *     SYNC_ACQD2_CWCOUNT 
 *     COMMA_DETECT_CWCOUNT 
 *     SCWSHIFT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr (0x0001c01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_SCWCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_1_scwcount[1];
	uint32_t _reg_1_scwcount;
} BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_CLR(r) (r).reg_1_scwcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SET(r,d) (r).reg_1_scwcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_GET(r) (r).reg_1_scwcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_RESERVED0f_GET(r) ((((r).reg_1_scwcount[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_RESERVED0f_SET(r,f) (r).reg_1_scwcount[0]=(((r).reg_1_scwcount[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SCWSHIFTf_GET(r) ((((r).reg_1_scwcount[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SCWSHIFTf_SET(r,f) (r).reg_1_scwcount[0]=(((r).reg_1_scwcount[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET(r) (((r).reg_1_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET(r,f) (r).reg_1_scwcount[0]=(((r).reg_1_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET(r) (((r).reg_1_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET(r,f) (r).reg_1_scwcount[0]=(((r).reg_1_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_1_SCWCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_SCWCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr,(_r._reg_1_scwcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCWCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr,(_r._reg_1_scwcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_SCWCOUNTr BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr
#define REG_1_SCWCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_t REG_1_SCWCOUNTr_t;
#define REG_1_SCWCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_CLR
#define REG_1_SCWCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SET
#define REG_1_SCWCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_GET
#define REG_1_SCWCOUNTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_RESERVED0f_GET
#define REG_1_SCWCOUNTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_RESERVED0f_SET
#define REG_1_SCWCOUNTr_SCWSHIFTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SCWSHIFTf_GET
#define REG_1_SCWCOUNTr_SCWSHIFTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SCWSHIFTf_SET
#define REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET
#define REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET
#define REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET
#define REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET
#define READ_REG_1_SCWCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_1_SCWCOUNTr
#define WRITE_REG_1_SCWCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_1_SCWCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_SCWCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_1_ERRCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81ce
 * DESC:     scw & K-code group error counters
 * SIZE:     32
 * FIELDS:
 *     KCODE66ERRCOUNT  
 *     SYNC66ERRCOUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr (0x0001c01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_1_ERRCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_1_errcount[1];
	uint32_t _reg_1_errcount;
} BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_CLR(r) (r).reg_1_errcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SET(r,d) (r).reg_1_errcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_GET(r) (r).reg_1_errcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_GET(r) ((((r).reg_1_errcount[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_SET(r,f) (r).reg_1_errcount[0]=(((r).reg_1_errcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_GET(r) (((r).reg_1_errcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_SET(r,f) (r).reg_1_errcount[0]=(((r).reg_1_errcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_1_ERRCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_1_ERRCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr,(_r._reg_1_errcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_1_ERRCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr,(_r._reg_1_errcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_1_ERRCOUNTr BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr
#define REG_1_ERRCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_t REG_1_ERRCOUNTr_t;
#define REG_1_ERRCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_CLR
#define REG_1_ERRCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SET
#define REG_1_ERRCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_GET
#define REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_GET
#define REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_SYNC66ERRCOUNTf_SET
#define REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_GET
#define REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr_KCODE66ERRCOUNTf_SET
#define READ_REG_1_ERRCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_1_ERRCOUNTr
#define WRITE_REG_1_ERRCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_1_ERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_1_ERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_CONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81d0
 * DESC:     64/66 Decoder control register
 * SIZE:     32
 * FIELDS:
 *     RFIFO_AFRST_EN   
 *     RFIFO_SBITCLR    
 *     DESCRAMBLERCONTROL 
 *     CGBAD_KCODE66ERR_EN 
 *     KCODE66ERRCOUNT_EN 
 *     SYNC66ERRCOUNT_EN 
 *     CWCOUNT_EN       
 *     CWCOUNT_SEL      
 *     RXSEQDONEMASK    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr (0x0001d010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_s {
	uint32_t v[1];
	uint32_t reg_2_control[1];
	uint32_t _reg_2_control;
} BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CLR(r) (r).reg_2_control[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SET(r,d) (r).reg_2_control[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_GET(r) (r).reg_2_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RESERVED0f_GET(r) ((((r).reg_2_control[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RESERVED0f_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RXSEQDONEMASKf_GET(r) ((((r).reg_2_control[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RXSEQDONEMASKf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_SELf_GET(r) ((((r).reg_2_control[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_SELf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_ENf_GET(r) ((((r).reg_2_control[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_ENf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_GET(r) ((((r).reg_2_control[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_GET(r) ((((r).reg_2_control[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_GET(r) ((((r).reg_2_control[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_DESCRAMBLERCONTROLf_GET(r) ((((r).reg_2_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_DESCRAMBLERCONTROLf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_SBITCLRf_GET(r) ((((r).reg_2_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_SBITCLRf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_AFRST_ENf_GET(r) (((r).reg_2_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_AFRST_ENf_SET(r,f) (r).reg_2_control[0]=(((r).reg_2_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_2_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_CONTROLr,(_r._reg_2_control))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_CONTROLr,(_r._reg_2_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_CONTROLr BCMI_HYPERLITE_XGXS_REG_2_CONTROLr
#define REG_2_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_t REG_2_CONTROLr_t;
#define REG_2_CONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CLR
#define REG_2_CONTROLr_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SET
#define REG_2_CONTROLr_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_GET
#define REG_2_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RESERVED0f_GET
#define REG_2_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RESERVED0f_SET
#define REG_2_CONTROLr_RXSEQDONEMASKf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RXSEQDONEMASKf_GET
#define REG_2_CONTROLr_RXSEQDONEMASKf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RXSEQDONEMASKf_SET
#define REG_2_CONTROLr_CWCOUNT_SELf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_SELf_GET
#define REG_2_CONTROLr_CWCOUNT_SELf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_SELf_SET
#define REG_2_CONTROLr_CWCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_ENf_GET
#define REG_2_CONTROLr_CWCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CWCOUNT_ENf_SET
#define REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_GET
#define REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_SYNC66ERRCOUNT_ENf_SET
#define REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_GET
#define REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_KCODE66ERRCOUNT_ENf_SET
#define REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_GET
#define REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_CGBAD_KCODE66ERR_ENf_SET
#define REG_2_CONTROLr_DESCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_DESCRAMBLERCONTROLf_GET
#define REG_2_CONTROLr_DESCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_DESCRAMBLERCONTROLf_SET
#define REG_2_CONTROLr_RFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_SBITCLRf_GET
#define REG_2_CONTROLr_RFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_SBITCLRf_SET
#define REG_2_CONTROLr_RFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_AFRST_ENf_GET
#define REG_2_CONTROLr_RFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_REG_2_CONTROLr_RFIFO_AFRST_ENf_SET
#define READ_REG_2_CONTROLr BCMI_HYPERLITE_XGXS_READ_REG_2_CONTROLr
#define WRITE_REG_2_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_2_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_STATUS
 * BLOCKS:   RX66
 * REGADDR:  0x81d1
 * DESC:     64/66 Decoder status register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     OVFLOW           
 *     UNFLOW           
 *     SYNCDONE         
 *     RESERVED0        
 *     SYNC_ACQD2       
 *     SYNC_ACQD1       
 *     COMMA_DETECT     
 *     LOSS_OF_SYNC     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr (0x0001d011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_STATUSr_s {
	uint32_t v[1];
	uint32_t reg_2_status[1];
	uint32_t _reg_2_status;
} BCMI_HYPERLITE_XGXS_REG_2_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_CLR(r) (r).reg_2_status[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SET(r,d) (r).reg_2_status[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_GET(r) (r).reg_2_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_LOSS_OF_SYNCf_GET(r) ((((r).reg_2_status[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_LOSS_OF_SYNCf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_COMMA_DETECTf_GET(r) ((((r).reg_2_status[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_COMMA_DETECTf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD1f_GET(r) ((((r).reg_2_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD1f_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD2f_GET(r) ((((r).reg_2_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD2f_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_RESERVED0f_GET(r) ((((r).reg_2_status[0]) >> 4) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_RESERVED0f_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0xff << 4)) | ((((uint32_t)f) & 0xff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNCDONEf_GET(r) ((((r).reg_2_status[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNCDONEf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_UNFLOWf_GET(r) ((((r).reg_2_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_UNFLOWf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_OVFLOWf_GET(r) ((((r).reg_2_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_OVFLOWf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_FERRf_GET(r) (((r).reg_2_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_STATUSr_FERRf_SET(r,f) (r).reg_2_status[0]=(((r).reg_2_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_2_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_STATUSr,(_r._reg_2_status))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_STATUSr,(_r._reg_2_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_STATUSr BCMI_HYPERLITE_XGXS_REG_2_STATUSr
#define REG_2_STATUSr_SIZE BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_STATUSr_t REG_2_STATUSr_t;
#define REG_2_STATUSr_CLR BCMI_HYPERLITE_XGXS_REG_2_STATUSr_CLR
#define REG_2_STATUSr_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SET
#define REG_2_STATUSr_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_GET
#define REG_2_STATUSr_LOSS_OF_SYNCf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_LOSS_OF_SYNCf_GET
#define REG_2_STATUSr_LOSS_OF_SYNCf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_LOSS_OF_SYNCf_SET
#define REG_2_STATUSr_COMMA_DETECTf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_COMMA_DETECTf_GET
#define REG_2_STATUSr_COMMA_DETECTf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_COMMA_DETECTf_SET
#define REG_2_STATUSr_SYNC_ACQD1f_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD1f_GET
#define REG_2_STATUSr_SYNC_ACQD1f_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD1f_SET
#define REG_2_STATUSr_SYNC_ACQD2f_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD2f_GET
#define REG_2_STATUSr_SYNC_ACQD2f_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNC_ACQD2f_SET
#define REG_2_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_RESERVED0f_GET
#define REG_2_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_RESERVED0f_SET
#define REG_2_STATUSr_SYNCDONEf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNCDONEf_GET
#define REG_2_STATUSr_SYNCDONEf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_SYNCDONEf_SET
#define REG_2_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_UNFLOWf_GET
#define REG_2_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_UNFLOWf_SET
#define REG_2_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_OVFLOWf_GET
#define REG_2_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_OVFLOWf_SET
#define REG_2_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_FERRf_GET
#define REG_2_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_REG_2_STATUSr_FERRf_SET
#define READ_REG_2_STATUSr BCMI_HYPERLITE_XGXS_READ_REG_2_STATUSr
#define WRITE_REG_2_STATUSr BCMI_HYPERLITE_XGXS_WRITE_REG_2_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW0
 * BLOCKS:   RX66
 * REGADDR:  0x81d2
 * DESC:     Sync code word bits 15:0
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW0_MASK   
 *     SCW0             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r (0x0001d012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW0r_s {
	uint32_t v[1];
	uint32_t reg_2_scw0[1];
	uint32_t _reg_2_scw0;
} BCMI_HYPERLITE_XGXS_REG_2_SCW0r_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_CLR(r) (r).reg_2_scw0[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SET(r,d) (r).reg_2_scw0[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_GET(r) (r).reg_2_scw0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_MASK_SCW0_MASKf_GET(r) (((r).reg_2_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_MASK_SCW0_MASKf_SET(r,f) (r).reg_2_scw0[0]=(((r).reg_2_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SCW0f_GET(r) (((r).reg_2_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SCW0f_SET(r,f) (r).reg_2_scw0[0]=(((r).reg_2_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW0r,(_r._reg_2_scw0))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW0r,(_r._reg_2_scw0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW0r BCMI_HYPERLITE_XGXS_REG_2_SCW0r
#define REG_2_SCW0r_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW0r_t REG_2_SCW0r_t;
#define REG_2_SCW0r_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW0r_CLR
#define REG_2_SCW0r_SET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SET
#define REG_2_SCW0r_GET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_GET
#define REG_2_SCW0r_MASK_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_MASK_SCW0_MASKf_GET
#define REG_2_SCW0r_MASK_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_MASK_SCW0_MASKf_SET
#define REG_2_SCW0r_SCW0f_GET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SCW0f_GET
#define REG_2_SCW0r_SCW0f_SET BCMI_HYPERLITE_XGXS_REG_2_SCW0r_SCW0f_SET
#define READ_REG_2_SCW0r BCMI_HYPERLITE_XGXS_READ_REG_2_SCW0r
#define WRITE_REG_2_SCW0r BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW1
 * BLOCKS:   RX66
 * REGADDR:  0x81d3
 * DESC:     Sync code word bits 31;16
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW1_MASK   
 *     SCW1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r (0x0001d013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW1r_s {
	uint32_t v[1];
	uint32_t reg_2_scw1[1];
	uint32_t _reg_2_scw1;
} BCMI_HYPERLITE_XGXS_REG_2_SCW1r_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_CLR(r) (r).reg_2_scw1[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SET(r,d) (r).reg_2_scw1[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_GET(r) (r).reg_2_scw1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_MASK_SCW1_MASKf_GET(r) (((r).reg_2_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_MASK_SCW1_MASKf_SET(r,f) (r).reg_2_scw1[0]=(((r).reg_2_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SCW1f_GET(r) (((r).reg_2_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SCW1f_SET(r,f) (r).reg_2_scw1[0]=(((r).reg_2_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW1r,(_r._reg_2_scw1))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW1r,(_r._reg_2_scw1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW1r BCMI_HYPERLITE_XGXS_REG_2_SCW1r
#define REG_2_SCW1r_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW1r_t REG_2_SCW1r_t;
#define REG_2_SCW1r_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW1r_CLR
#define REG_2_SCW1r_SET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SET
#define REG_2_SCW1r_GET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_GET
#define REG_2_SCW1r_MASK_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_MASK_SCW1_MASKf_GET
#define REG_2_SCW1r_MASK_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_MASK_SCW1_MASKf_SET
#define REG_2_SCW1r_SCW1f_GET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SCW1f_GET
#define REG_2_SCW1r_SCW1f_SET BCMI_HYPERLITE_XGXS_REG_2_SCW1r_SCW1f_SET
#define READ_REG_2_SCW1r BCMI_HYPERLITE_XGXS_READ_REG_2_SCW1r
#define WRITE_REG_2_SCW1r BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW2
 * BLOCKS:   RX66
 * REGADDR:  0x81d4
 * DESC:     Sync code word bits 47:32
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW2_MASK   
 *     SCW2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r (0x0001d014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW2r_s {
	uint32_t v[1];
	uint32_t reg_2_scw2[1];
	uint32_t _reg_2_scw2;
} BCMI_HYPERLITE_XGXS_REG_2_SCW2r_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_CLR(r) (r).reg_2_scw2[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SET(r,d) (r).reg_2_scw2[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_GET(r) (r).reg_2_scw2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_MASK_SCW2_MASKf_GET(r) (((r).reg_2_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_MASK_SCW2_MASKf_SET(r,f) (r).reg_2_scw2[0]=(((r).reg_2_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SCW2f_GET(r) (((r).reg_2_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SCW2f_SET(r,f) (r).reg_2_scw2[0]=(((r).reg_2_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW2r,(_r._reg_2_scw2))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW2r,(_r._reg_2_scw2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW2r BCMI_HYPERLITE_XGXS_REG_2_SCW2r
#define REG_2_SCW2r_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW2r_t REG_2_SCW2r_t;
#define REG_2_SCW2r_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW2r_CLR
#define REG_2_SCW2r_SET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SET
#define REG_2_SCW2r_GET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_GET
#define REG_2_SCW2r_MASK_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_MASK_SCW2_MASKf_GET
#define REG_2_SCW2r_MASK_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_MASK_SCW2_MASKf_SET
#define REG_2_SCW2r_SCW2f_GET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SCW2f_GET
#define REG_2_SCW2r_SCW2f_SET BCMI_HYPERLITE_XGXS_REG_2_SCW2r_SCW2f_SET
#define READ_REG_2_SCW2r BCMI_HYPERLITE_XGXS_READ_REG_2_SCW2r
#define WRITE_REG_2_SCW2r BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW3
 * BLOCKS:   RX66
 * REGADDR:  0x81d5
 * DESC:     Sync code word bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3             
 *     MASK_SCW3_MASK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r (0x0001d015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW3r_s {
	uint32_t v[1];
	uint32_t reg_2_scw3[1];
	uint32_t _reg_2_scw3;
} BCMI_HYPERLITE_XGXS_REG_2_SCW3r_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_CLR(r) (r).reg_2_scw3[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SET(r,d) (r).reg_2_scw3[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_GET(r) (r).reg_2_scw3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SCW3f_GET(r) (((r).reg_2_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SCW3f_SET(r,f) (r).reg_2_scw3[0]=(((r).reg_2_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_MASK_SCW3_MASKf_GET(r) (((r).reg_2_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3r_MASK_SCW3_MASKf_SET(r,f) (r).reg_2_scw3[0]=(((r).reg_2_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW3r,(_r._reg_2_scw3))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW3r,(_r._reg_2_scw3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW3r BCMI_HYPERLITE_XGXS_REG_2_SCW3r
#define REG_2_SCW3r_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW3r_t REG_2_SCW3r_t;
#define REG_2_SCW3r_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW3r_CLR
#define REG_2_SCW3r_SET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SET
#define REG_2_SCW3r_GET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_GET
#define REG_2_SCW3r_SCW3f_GET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SCW3f_GET
#define REG_2_SCW3r_SCW3f_SET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_SCW3f_SET
#define REG_2_SCW3r_MASK_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_MASK_SCW3_MASKf_GET
#define REG_2_SCW3r_MASK_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW3r_MASK_SCW3_MASKf_SET
#define READ_REG_2_SCW3r BCMI_HYPERLITE_XGXS_READ_REG_2_SCW3r
#define WRITE_REG_2_SCW3r BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW0_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81d6
 * DESC:     Sync code word mask bits 15:0
 * SIZE:     32
 * FIELDS:
 *     SCW0_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr (0x0001d016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW0_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_s {
	uint32_t v[1];
	uint32_t reg_2_scw0_mask[1];
	uint32_t _reg_2_scw0_mask;
} BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_CLR(r) (r).reg_2_scw0_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SET(r,d) (r).reg_2_scw0_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_GET(r) (r).reg_2_scw0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SCW0_MASKf_GET(r) (((r).reg_2_scw0_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SCW0_MASKf_SET(r,f) (r).reg_2_scw0_mask[0]=(((r).reg_2_scw0_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW0_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW0_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr,(_r._reg_2_scw0_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW0_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr,(_r._reg_2_scw0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW0_MASKr BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr
#define REG_2_SCW0_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_t REG_2_SCW0_MASKr_t;
#define REG_2_SCW0_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_CLR
#define REG_2_SCW0_MASKr_SET BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SET
#define REG_2_SCW0_MASKr_GET BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_GET
#define REG_2_SCW0_MASKr_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SCW0_MASKf_GET
#define REG_2_SCW0_MASKr_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr_SCW0_MASKf_SET
#define READ_REG_2_SCW0_MASKr BCMI_HYPERLITE_XGXS_READ_REG_2_SCW0_MASKr
#define WRITE_REG_2_SCW0_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW1_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81d7
 * DESC:     Sync code word mask bits 31;16
 * SIZE:     32
 * FIELDS:
 *     SCW1_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr (0x0001d017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW1_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_s {
	uint32_t v[1];
	uint32_t reg_2_scw1_mask[1];
	uint32_t _reg_2_scw1_mask;
} BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_CLR(r) (r).reg_2_scw1_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SET(r,d) (r).reg_2_scw1_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_GET(r) (r).reg_2_scw1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SCW1_MASKf_GET(r) (((r).reg_2_scw1_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SCW1_MASKf_SET(r,f) (r).reg_2_scw1_mask[0]=(((r).reg_2_scw1_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW1_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW1_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr,(_r._reg_2_scw1_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW1_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr,(_r._reg_2_scw1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW1_MASKr BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr
#define REG_2_SCW1_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_t REG_2_SCW1_MASKr_t;
#define REG_2_SCW1_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_CLR
#define REG_2_SCW1_MASKr_SET BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SET
#define REG_2_SCW1_MASKr_GET BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_GET
#define REG_2_SCW1_MASKr_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SCW1_MASKf_GET
#define REG_2_SCW1_MASKr_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr_SCW1_MASKf_SET
#define READ_REG_2_SCW1_MASKr BCMI_HYPERLITE_XGXS_READ_REG_2_SCW1_MASKr
#define WRITE_REG_2_SCW1_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW2_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81d8
 * DESC:     Sync code word mask bits 47:32
 * SIZE:     32
 * FIELDS:
 *     SCW2_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr (0x0001d018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW2_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_s {
	uint32_t v[1];
	uint32_t reg_2_scw2_mask[1];
	uint32_t _reg_2_scw2_mask;
} BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_CLR(r) (r).reg_2_scw2_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SET(r,d) (r).reg_2_scw2_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_GET(r) (r).reg_2_scw2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SCW2_MASKf_GET(r) (((r).reg_2_scw2_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SCW2_MASKf_SET(r,f) (r).reg_2_scw2_mask[0]=(((r).reg_2_scw2_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW2_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW2_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr,(_r._reg_2_scw2_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW2_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr,(_r._reg_2_scw2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW2_MASKr BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr
#define REG_2_SCW2_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_t REG_2_SCW2_MASKr_t;
#define REG_2_SCW2_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_CLR
#define REG_2_SCW2_MASKr_SET BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SET
#define REG_2_SCW2_MASKr_GET BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_GET
#define REG_2_SCW2_MASKr_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SCW2_MASKf_GET
#define REG_2_SCW2_MASKr_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr_SCW2_MASKf_SET
#define READ_REG_2_SCW2_MASKr BCMI_HYPERLITE_XGXS_READ_REG_2_SCW2_MASKr
#define WRITE_REG_2_SCW2_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCW3_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81d9
 * DESC:     Sync code word mask bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr (0x0001d019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCW3_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_s {
	uint32_t v[1];
	uint32_t reg_2_scw3_mask[1];
	uint32_t _reg_2_scw3_mask;
} BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_CLR(r) (r).reg_2_scw3_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SET(r,d) (r).reg_2_scw3_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_GET(r) (r).reg_2_scw3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SCW3_MASKf_GET(r) (((r).reg_2_scw3_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SCW3_MASKf_SET(r,f) (r).reg_2_scw3_mask[0]=(((r).reg_2_scw3_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_2_SCW3_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCW3_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr,(_r._reg_2_scw3_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW3_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr,(_r._reg_2_scw3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCW3_MASKr BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr
#define REG_2_SCW3_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_t REG_2_SCW3_MASKr_t;
#define REG_2_SCW3_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_CLR
#define REG_2_SCW3_MASKr_SET BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SET
#define REG_2_SCW3_MASKr_GET BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_GET
#define REG_2_SCW3_MASKr_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SCW3_MASKf_GET
#define REG_2_SCW3_MASKr_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr_SCW3_MASKf_SET
#define READ_REG_2_SCW3_MASKr BCMI_HYPERLITE_XGXS_READ_REG_2_SCW3_MASKr
#define WRITE_REG_2_SCW3_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCW3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCW3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SYNCBITS
 * BLOCKS:   RX66
 * REGADDR:  0x81da
 * DESC:     Sync bits and sync mask bits
 * SIZE:     32
 * FIELDS:
 *     SYNCBITS_MASK    
 *     SYNCBITS         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr (0x0001d01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SYNCBITS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_s {
	uint32_t v[1];
	uint32_t reg_2_syncbits[1];
	uint32_t _reg_2_syncbits;
} BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_CLR(r) (r).reg_2_syncbits[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SET(r,d) (r).reg_2_syncbits[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_GET(r) (r).reg_2_syncbits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_RESERVED0f_GET(r) ((((r).reg_2_syncbits[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_RESERVED0f_SET(r,f) (r).reg_2_syncbits[0]=(((r).reg_2_syncbits[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITSf_GET(r) ((((r).reg_2_syncbits[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITSf_SET(r,f) (r).reg_2_syncbits[0]=(((r).reg_2_syncbits[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITS_MASKf_GET(r) (((r).reg_2_syncbits[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITS_MASKf_SET(r,f) (r).reg_2_syncbits[0]=(((r).reg_2_syncbits[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access REG_2_SYNCBITS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SYNCBITSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr,(_r._reg_2_syncbits))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SYNCBITSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr,(_r._reg_2_syncbits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SYNCBITSr BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr
#define REG_2_SYNCBITSr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_t REG_2_SYNCBITSr_t;
#define REG_2_SYNCBITSr_CLR BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_CLR
#define REG_2_SYNCBITSr_SET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SET
#define REG_2_SYNCBITSr_GET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_GET
#define REG_2_SYNCBITSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_RESERVED0f_GET
#define REG_2_SYNCBITSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_RESERVED0f_SET
#define REG_2_SYNCBITSr_SYNCBITSf_GET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITSf_GET
#define REG_2_SYNCBITSr_SYNCBITSf_SET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITSf_SET
#define REG_2_SYNCBITSr_SYNCBITS_MASKf_GET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITS_MASKf_GET
#define REG_2_SYNCBITSr_SYNCBITS_MASKf_SET BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr_SYNCBITS_MASKf_SET
#define READ_REG_2_SYNCBITSr BCMI_HYPERLITE_XGXS_READ_REG_2_SYNCBITSr
#define WRITE_REG_2_SYNCBITSr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SYNCBITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SYNCBITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCWCONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81db
 * DESC:     Sync code word statemachine control register
 * SIZE:     32
 * FIELDS:
 *     HYSTCOUNT        
 *     GCWCOUNT         
 *     SCWCOUNT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr (0x0001d01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCWCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_s {
	uint32_t v[1];
	uint32_t reg_2_scwcontrol[1];
	uint32_t _reg_2_scwcontrol;
} BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_CLR(r) (r).reg_2_scwcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SET(r,d) (r).reg_2_scwcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GET(r) (r).reg_2_scwcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_RESERVED0f_GET(r) ((((r).reg_2_scwcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_RESERVED0f_SET(r,f) (r).reg_2_scwcontrol[0]=(((r).reg_2_scwcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SCWCOUNTf_GET(r) ((((r).reg_2_scwcontrol[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SCWCOUNTf_SET(r,f) (r).reg_2_scwcontrol[0]=(((r).reg_2_scwcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GCWCOUNTf_GET(r) ((((r).reg_2_scwcontrol[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GCWCOUNTf_SET(r,f) (r).reg_2_scwcontrol[0]=(((r).reg_2_scwcontrol[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_HYSTCOUNTf_GET(r) (((r).reg_2_scwcontrol[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_HYSTCOUNTf_SET(r,f) (r).reg_2_scwcontrol[0]=(((r).reg_2_scwcontrol[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access REG_2_SCWCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCWCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr,(_r._reg_2_scwcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCWCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr,(_r._reg_2_scwcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCWCONTROLr BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr
#define REG_2_SCWCONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_t REG_2_SCWCONTROLr_t;
#define REG_2_SCWCONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_CLR
#define REG_2_SCWCONTROLr_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SET
#define REG_2_SCWCONTROLr_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GET
#define REG_2_SCWCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_RESERVED0f_GET
#define REG_2_SCWCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_RESERVED0f_SET
#define REG_2_SCWCONTROLr_SCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SCWCOUNTf_GET
#define REG_2_SCWCONTROLr_SCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_SCWCOUNTf_SET
#define REG_2_SCWCONTROLr_GCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GCWCOUNTf_GET
#define REG_2_SCWCONTROLr_GCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_GCWCOUNTf_SET
#define REG_2_SCWCONTROLr_HYSTCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_HYSTCOUNTf_GET
#define REG_2_SCWCONTROLr_HYSTCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr_HYSTCOUNTf_SET
#define READ_REG_2_SCWCONTROLr BCMI_HYPERLITE_XGXS_READ_REG_2_SCWCONTROLr
#define WRITE_REG_2_SCWCONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCWCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCWCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_SCWCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81dd
 * DESC:     CW=SCW counter & skew position
 * SIZE:     32
 * FIELDS:
 *     SYNC_ACQD2_CWCOUNT 
 *     COMMA_DETECT_CWCOUNT 
 *     SCWSHIFT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr (0x0001d01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_SCWCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_2_scwcount[1];
	uint32_t _reg_2_scwcount;
} BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_CLR(r) (r).reg_2_scwcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SET(r,d) (r).reg_2_scwcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_GET(r) (r).reg_2_scwcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_RESERVED0f_GET(r) ((((r).reg_2_scwcount[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_RESERVED0f_SET(r,f) (r).reg_2_scwcount[0]=(((r).reg_2_scwcount[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SCWSHIFTf_GET(r) ((((r).reg_2_scwcount[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SCWSHIFTf_SET(r,f) (r).reg_2_scwcount[0]=(((r).reg_2_scwcount[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET(r) (((r).reg_2_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET(r,f) (r).reg_2_scwcount[0]=(((r).reg_2_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET(r) (((r).reg_2_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET(r,f) (r).reg_2_scwcount[0]=(((r).reg_2_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_2_SCWCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_SCWCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr,(_r._reg_2_scwcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCWCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr,(_r._reg_2_scwcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_SCWCOUNTr BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr
#define REG_2_SCWCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_t REG_2_SCWCOUNTr_t;
#define REG_2_SCWCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_CLR
#define REG_2_SCWCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SET
#define REG_2_SCWCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_GET
#define REG_2_SCWCOUNTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_RESERVED0f_GET
#define REG_2_SCWCOUNTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_RESERVED0f_SET
#define REG_2_SCWCOUNTr_SCWSHIFTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SCWSHIFTf_GET
#define REG_2_SCWCOUNTr_SCWSHIFTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SCWSHIFTf_SET
#define REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET
#define REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET
#define REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET
#define REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET
#define READ_REG_2_SCWCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_2_SCWCOUNTr
#define WRITE_REG_2_SCWCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_2_SCWCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_SCWCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_2_ERRCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81de
 * DESC:     scw & K-code group error counters
 * SIZE:     32
 * FIELDS:
 *     KCODE66ERRCOUNT  
 *     SYNC66ERRCOUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr (0x0001d01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_2_ERRCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_2_errcount[1];
	uint32_t _reg_2_errcount;
} BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_CLR(r) (r).reg_2_errcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SET(r,d) (r).reg_2_errcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_GET(r) (r).reg_2_errcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_GET(r) ((((r).reg_2_errcount[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_SET(r,f) (r).reg_2_errcount[0]=(((r).reg_2_errcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_GET(r) (((r).reg_2_errcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_SET(r,f) (r).reg_2_errcount[0]=(((r).reg_2_errcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_2_ERRCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_2_ERRCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr,(_r._reg_2_errcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_2_ERRCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr,(_r._reg_2_errcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_2_ERRCOUNTr BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr
#define REG_2_ERRCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_t REG_2_ERRCOUNTr_t;
#define REG_2_ERRCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_CLR
#define REG_2_ERRCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SET
#define REG_2_ERRCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_GET
#define REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_GET
#define REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_SYNC66ERRCOUNTf_SET
#define REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_GET
#define REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr_KCODE66ERRCOUNTf_SET
#define READ_REG_2_ERRCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_2_ERRCOUNTr
#define WRITE_REG_2_ERRCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_2_ERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_2_ERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_CONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81e0
 * DESC:     64/66 Decoder control register
 * SIZE:     32
 * FIELDS:
 *     RFIFO_AFRST_EN   
 *     RFIFO_SBITCLR    
 *     DESCRAMBLERCONTROL 
 *     CGBAD_KCODE66ERR_EN 
 *     KCODE66ERRCOUNT_EN 
 *     SYNC66ERRCOUNT_EN 
 *     CWCOUNT_EN       
 *     CWCOUNT_SEL      
 *     RXSEQDONEMASK    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr (0x0001e010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_s {
	uint32_t v[1];
	uint32_t reg_3_control[1];
	uint32_t _reg_3_control;
} BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CLR(r) (r).reg_3_control[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SET(r,d) (r).reg_3_control[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_GET(r) (r).reg_3_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RESERVED0f_GET(r) ((((r).reg_3_control[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RESERVED0f_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RXSEQDONEMASKf_GET(r) ((((r).reg_3_control[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RXSEQDONEMASKf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_SELf_GET(r) ((((r).reg_3_control[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_SELf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_ENf_GET(r) ((((r).reg_3_control[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_ENf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_GET(r) ((((r).reg_3_control[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_GET(r) ((((r).reg_3_control[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_GET(r) ((((r).reg_3_control[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_DESCRAMBLERCONTROLf_GET(r) ((((r).reg_3_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_DESCRAMBLERCONTROLf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_SBITCLRf_GET(r) ((((r).reg_3_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_SBITCLRf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_AFRST_ENf_GET(r) (((r).reg_3_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_AFRST_ENf_SET(r,f) (r).reg_3_control[0]=(((r).reg_3_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_3_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_CONTROLr,(_r._reg_3_control))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_CONTROLr,(_r._reg_3_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_CONTROLr BCMI_HYPERLITE_XGXS_REG_3_CONTROLr
#define REG_3_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_t REG_3_CONTROLr_t;
#define REG_3_CONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CLR
#define REG_3_CONTROLr_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SET
#define REG_3_CONTROLr_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_GET
#define REG_3_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RESERVED0f_GET
#define REG_3_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RESERVED0f_SET
#define REG_3_CONTROLr_RXSEQDONEMASKf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RXSEQDONEMASKf_GET
#define REG_3_CONTROLr_RXSEQDONEMASKf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RXSEQDONEMASKf_SET
#define REG_3_CONTROLr_CWCOUNT_SELf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_SELf_GET
#define REG_3_CONTROLr_CWCOUNT_SELf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_SELf_SET
#define REG_3_CONTROLr_CWCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_ENf_GET
#define REG_3_CONTROLr_CWCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CWCOUNT_ENf_SET
#define REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_GET
#define REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_SYNC66ERRCOUNT_ENf_SET
#define REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_GET
#define REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_KCODE66ERRCOUNT_ENf_SET
#define REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_GET
#define REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_CGBAD_KCODE66ERR_ENf_SET
#define REG_3_CONTROLr_DESCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_DESCRAMBLERCONTROLf_GET
#define REG_3_CONTROLr_DESCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_DESCRAMBLERCONTROLf_SET
#define REG_3_CONTROLr_RFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_SBITCLRf_GET
#define REG_3_CONTROLr_RFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_SBITCLRf_SET
#define REG_3_CONTROLr_RFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_AFRST_ENf_GET
#define REG_3_CONTROLr_RFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_REG_3_CONTROLr_RFIFO_AFRST_ENf_SET
#define READ_REG_3_CONTROLr BCMI_HYPERLITE_XGXS_READ_REG_3_CONTROLr
#define WRITE_REG_3_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_3_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_STATUS
 * BLOCKS:   RX66
 * REGADDR:  0x81e1
 * DESC:     64/66 Decoder status register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     OVFLOW           
 *     UNFLOW           
 *     SYNCDONE         
 *     RESERVED0        
 *     SYNC_ACQD2       
 *     SYNC_ACQD1       
 *     COMMA_DETECT     
 *     LOSS_OF_SYNC     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr (0x0001e011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_STATUSr_s {
	uint32_t v[1];
	uint32_t reg_3_status[1];
	uint32_t _reg_3_status;
} BCMI_HYPERLITE_XGXS_REG_3_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_CLR(r) (r).reg_3_status[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SET(r,d) (r).reg_3_status[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_GET(r) (r).reg_3_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_LOSS_OF_SYNCf_GET(r) ((((r).reg_3_status[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_LOSS_OF_SYNCf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_COMMA_DETECTf_GET(r) ((((r).reg_3_status[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_COMMA_DETECTf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD1f_GET(r) ((((r).reg_3_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD1f_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD2f_GET(r) ((((r).reg_3_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD2f_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_RESERVED0f_GET(r) ((((r).reg_3_status[0]) >> 4) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_RESERVED0f_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0xff << 4)) | ((((uint32_t)f) & 0xff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNCDONEf_GET(r) ((((r).reg_3_status[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNCDONEf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_UNFLOWf_GET(r) ((((r).reg_3_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_UNFLOWf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_OVFLOWf_GET(r) ((((r).reg_3_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_OVFLOWf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_FERRf_GET(r) (((r).reg_3_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_STATUSr_FERRf_SET(r,f) (r).reg_3_status[0]=(((r).reg_3_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access REG_3_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_STATUSr,(_r._reg_3_status))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_STATUSr,(_r._reg_3_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_STATUSr BCMI_HYPERLITE_XGXS_REG_3_STATUSr
#define REG_3_STATUSr_SIZE BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_STATUSr_t REG_3_STATUSr_t;
#define REG_3_STATUSr_CLR BCMI_HYPERLITE_XGXS_REG_3_STATUSr_CLR
#define REG_3_STATUSr_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SET
#define REG_3_STATUSr_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_GET
#define REG_3_STATUSr_LOSS_OF_SYNCf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_LOSS_OF_SYNCf_GET
#define REG_3_STATUSr_LOSS_OF_SYNCf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_LOSS_OF_SYNCf_SET
#define REG_3_STATUSr_COMMA_DETECTf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_COMMA_DETECTf_GET
#define REG_3_STATUSr_COMMA_DETECTf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_COMMA_DETECTf_SET
#define REG_3_STATUSr_SYNC_ACQD1f_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD1f_GET
#define REG_3_STATUSr_SYNC_ACQD1f_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD1f_SET
#define REG_3_STATUSr_SYNC_ACQD2f_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD2f_GET
#define REG_3_STATUSr_SYNC_ACQD2f_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNC_ACQD2f_SET
#define REG_3_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_RESERVED0f_GET
#define REG_3_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_RESERVED0f_SET
#define REG_3_STATUSr_SYNCDONEf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNCDONEf_GET
#define REG_3_STATUSr_SYNCDONEf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_SYNCDONEf_SET
#define REG_3_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_UNFLOWf_GET
#define REG_3_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_UNFLOWf_SET
#define REG_3_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_OVFLOWf_GET
#define REG_3_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_OVFLOWf_SET
#define REG_3_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_FERRf_GET
#define REG_3_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_REG_3_STATUSr_FERRf_SET
#define READ_REG_3_STATUSr BCMI_HYPERLITE_XGXS_READ_REG_3_STATUSr
#define WRITE_REG_3_STATUSr BCMI_HYPERLITE_XGXS_WRITE_REG_3_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW0
 * BLOCKS:   RX66
 * REGADDR:  0x81e2
 * DESC:     Sync code word bits 15:0
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW0_MASK   
 *     SCW0             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r (0x0001e012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW0r_s {
	uint32_t v[1];
	uint32_t reg_3_scw0[1];
	uint32_t _reg_3_scw0;
} BCMI_HYPERLITE_XGXS_REG_3_SCW0r_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_CLR(r) (r).reg_3_scw0[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SET(r,d) (r).reg_3_scw0[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_GET(r) (r).reg_3_scw0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_MASK_SCW0_MASKf_GET(r) (((r).reg_3_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_MASK_SCW0_MASKf_SET(r,f) (r).reg_3_scw0[0]=(((r).reg_3_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SCW0f_GET(r) (((r).reg_3_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SCW0f_SET(r,f) (r).reg_3_scw0[0]=(((r).reg_3_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW0r,(_r._reg_3_scw0))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW0r,(_r._reg_3_scw0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW0r BCMI_HYPERLITE_XGXS_REG_3_SCW0r
#define REG_3_SCW0r_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW0r_t REG_3_SCW0r_t;
#define REG_3_SCW0r_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW0r_CLR
#define REG_3_SCW0r_SET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SET
#define REG_3_SCW0r_GET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_GET
#define REG_3_SCW0r_MASK_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_MASK_SCW0_MASKf_GET
#define REG_3_SCW0r_MASK_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_MASK_SCW0_MASKf_SET
#define REG_3_SCW0r_SCW0f_GET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SCW0f_GET
#define REG_3_SCW0r_SCW0f_SET BCMI_HYPERLITE_XGXS_REG_3_SCW0r_SCW0f_SET
#define READ_REG_3_SCW0r BCMI_HYPERLITE_XGXS_READ_REG_3_SCW0r
#define WRITE_REG_3_SCW0r BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW1
 * BLOCKS:   RX66
 * REGADDR:  0x81e3
 * DESC:     Sync code word bits 31;16
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW1_MASK   
 *     SCW1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r (0x0001e013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW1r_s {
	uint32_t v[1];
	uint32_t reg_3_scw1[1];
	uint32_t _reg_3_scw1;
} BCMI_HYPERLITE_XGXS_REG_3_SCW1r_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_CLR(r) (r).reg_3_scw1[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SET(r,d) (r).reg_3_scw1[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_GET(r) (r).reg_3_scw1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_MASK_SCW1_MASKf_GET(r) (((r).reg_3_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_MASK_SCW1_MASKf_SET(r,f) (r).reg_3_scw1[0]=(((r).reg_3_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SCW1f_GET(r) (((r).reg_3_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SCW1f_SET(r,f) (r).reg_3_scw1[0]=(((r).reg_3_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW1r,(_r._reg_3_scw1))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW1r,(_r._reg_3_scw1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW1r BCMI_HYPERLITE_XGXS_REG_3_SCW1r
#define REG_3_SCW1r_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW1r_t REG_3_SCW1r_t;
#define REG_3_SCW1r_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW1r_CLR
#define REG_3_SCW1r_SET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SET
#define REG_3_SCW1r_GET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_GET
#define REG_3_SCW1r_MASK_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_MASK_SCW1_MASKf_GET
#define REG_3_SCW1r_MASK_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_MASK_SCW1_MASKf_SET
#define REG_3_SCW1r_SCW1f_GET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SCW1f_GET
#define REG_3_SCW1r_SCW1f_SET BCMI_HYPERLITE_XGXS_REG_3_SCW1r_SCW1f_SET
#define READ_REG_3_SCW1r BCMI_HYPERLITE_XGXS_READ_REG_3_SCW1r
#define WRITE_REG_3_SCW1r BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW2
 * BLOCKS:   RX66
 * REGADDR:  0x81e4
 * DESC:     Sync code word bits 47:32
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW2_MASK   
 *     SCW2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r (0x0001e014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW2r_s {
	uint32_t v[1];
	uint32_t reg_3_scw2[1];
	uint32_t _reg_3_scw2;
} BCMI_HYPERLITE_XGXS_REG_3_SCW2r_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_CLR(r) (r).reg_3_scw2[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SET(r,d) (r).reg_3_scw2[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_GET(r) (r).reg_3_scw2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_MASK_SCW2_MASKf_GET(r) (((r).reg_3_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_MASK_SCW2_MASKf_SET(r,f) (r).reg_3_scw2[0]=(((r).reg_3_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SCW2f_GET(r) (((r).reg_3_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SCW2f_SET(r,f) (r).reg_3_scw2[0]=(((r).reg_3_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW2r,(_r._reg_3_scw2))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW2r,(_r._reg_3_scw2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW2r BCMI_HYPERLITE_XGXS_REG_3_SCW2r
#define REG_3_SCW2r_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW2r_t REG_3_SCW2r_t;
#define REG_3_SCW2r_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW2r_CLR
#define REG_3_SCW2r_SET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SET
#define REG_3_SCW2r_GET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_GET
#define REG_3_SCW2r_MASK_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_MASK_SCW2_MASKf_GET
#define REG_3_SCW2r_MASK_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_MASK_SCW2_MASKf_SET
#define REG_3_SCW2r_SCW2f_GET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SCW2f_GET
#define REG_3_SCW2r_SCW2f_SET BCMI_HYPERLITE_XGXS_REG_3_SCW2r_SCW2f_SET
#define READ_REG_3_SCW2r BCMI_HYPERLITE_XGXS_READ_REG_3_SCW2r
#define WRITE_REG_3_SCW2r BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW3
 * BLOCKS:   RX66
 * REGADDR:  0x81e5
 * DESC:     Sync code word bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3             
 *     MASK_SCW3_MASK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r (0x0001e015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW3r_s {
	uint32_t v[1];
	uint32_t reg_3_scw3[1];
	uint32_t _reg_3_scw3;
} BCMI_HYPERLITE_XGXS_REG_3_SCW3r_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_CLR(r) (r).reg_3_scw3[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SET(r,d) (r).reg_3_scw3[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_GET(r) (r).reg_3_scw3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SCW3f_GET(r) (((r).reg_3_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SCW3f_SET(r,f) (r).reg_3_scw3[0]=(((r).reg_3_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_MASK_SCW3_MASKf_GET(r) (((r).reg_3_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3r_MASK_SCW3_MASKf_SET(r,f) (r).reg_3_scw3[0]=(((r).reg_3_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW3r,(_r._reg_3_scw3))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW3r,(_r._reg_3_scw3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW3r BCMI_HYPERLITE_XGXS_REG_3_SCW3r
#define REG_3_SCW3r_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW3r_t REG_3_SCW3r_t;
#define REG_3_SCW3r_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW3r_CLR
#define REG_3_SCW3r_SET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SET
#define REG_3_SCW3r_GET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_GET
#define REG_3_SCW3r_SCW3f_GET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SCW3f_GET
#define REG_3_SCW3r_SCW3f_SET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_SCW3f_SET
#define REG_3_SCW3r_MASK_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_MASK_SCW3_MASKf_GET
#define REG_3_SCW3r_MASK_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW3r_MASK_SCW3_MASKf_SET
#define READ_REG_3_SCW3r BCMI_HYPERLITE_XGXS_READ_REG_3_SCW3r
#define WRITE_REG_3_SCW3r BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW0_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81e6
 * DESC:     Sync code word mask bits 15:0
 * SIZE:     32
 * FIELDS:
 *     SCW0_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr (0x0001e016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW0_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_s {
	uint32_t v[1];
	uint32_t reg_3_scw0_mask[1];
	uint32_t _reg_3_scw0_mask;
} BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_CLR(r) (r).reg_3_scw0_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SET(r,d) (r).reg_3_scw0_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_GET(r) (r).reg_3_scw0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SCW0_MASKf_GET(r) (((r).reg_3_scw0_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SCW0_MASKf_SET(r,f) (r).reg_3_scw0_mask[0]=(((r).reg_3_scw0_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW0_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW0_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr,(_r._reg_3_scw0_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW0_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr,(_r._reg_3_scw0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW0_MASKr BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr
#define REG_3_SCW0_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_t REG_3_SCW0_MASKr_t;
#define REG_3_SCW0_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_CLR
#define REG_3_SCW0_MASKr_SET BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SET
#define REG_3_SCW0_MASKr_GET BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_GET
#define REG_3_SCW0_MASKr_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SCW0_MASKf_GET
#define REG_3_SCW0_MASKr_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr_SCW0_MASKf_SET
#define READ_REG_3_SCW0_MASKr BCMI_HYPERLITE_XGXS_READ_REG_3_SCW0_MASKr
#define WRITE_REG_3_SCW0_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW1_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81e7
 * DESC:     Sync code word mask bits 31;16
 * SIZE:     32
 * FIELDS:
 *     SCW1_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr (0x0001e017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW1_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_s {
	uint32_t v[1];
	uint32_t reg_3_scw1_mask[1];
	uint32_t _reg_3_scw1_mask;
} BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_CLR(r) (r).reg_3_scw1_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SET(r,d) (r).reg_3_scw1_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_GET(r) (r).reg_3_scw1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SCW1_MASKf_GET(r) (((r).reg_3_scw1_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SCW1_MASKf_SET(r,f) (r).reg_3_scw1_mask[0]=(((r).reg_3_scw1_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW1_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW1_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr,(_r._reg_3_scw1_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW1_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr,(_r._reg_3_scw1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW1_MASKr BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr
#define REG_3_SCW1_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_t REG_3_SCW1_MASKr_t;
#define REG_3_SCW1_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_CLR
#define REG_3_SCW1_MASKr_SET BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SET
#define REG_3_SCW1_MASKr_GET BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_GET
#define REG_3_SCW1_MASKr_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SCW1_MASKf_GET
#define REG_3_SCW1_MASKr_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr_SCW1_MASKf_SET
#define READ_REG_3_SCW1_MASKr BCMI_HYPERLITE_XGXS_READ_REG_3_SCW1_MASKr
#define WRITE_REG_3_SCW1_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW2_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81e8
 * DESC:     Sync code word mask bits 47:32
 * SIZE:     32
 * FIELDS:
 *     SCW2_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr (0x0001e018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW2_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_s {
	uint32_t v[1];
	uint32_t reg_3_scw2_mask[1];
	uint32_t _reg_3_scw2_mask;
} BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_CLR(r) (r).reg_3_scw2_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SET(r,d) (r).reg_3_scw2_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_GET(r) (r).reg_3_scw2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SCW2_MASKf_GET(r) (((r).reg_3_scw2_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SCW2_MASKf_SET(r,f) (r).reg_3_scw2_mask[0]=(((r).reg_3_scw2_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW2_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW2_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr,(_r._reg_3_scw2_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW2_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr,(_r._reg_3_scw2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW2_MASKr BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr
#define REG_3_SCW2_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_t REG_3_SCW2_MASKr_t;
#define REG_3_SCW2_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_CLR
#define REG_3_SCW2_MASKr_SET BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SET
#define REG_3_SCW2_MASKr_GET BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_GET
#define REG_3_SCW2_MASKr_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SCW2_MASKf_GET
#define REG_3_SCW2_MASKr_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr_SCW2_MASKf_SET
#define READ_REG_3_SCW2_MASKr BCMI_HYPERLITE_XGXS_READ_REG_3_SCW2_MASKr
#define WRITE_REG_3_SCW2_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCW3_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81e9
 * DESC:     Sync code word mask bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr (0x0001e019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCW3_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_s {
	uint32_t v[1];
	uint32_t reg_3_scw3_mask[1];
	uint32_t _reg_3_scw3_mask;
} BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_CLR(r) (r).reg_3_scw3_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SET(r,d) (r).reg_3_scw3_mask[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_GET(r) (r).reg_3_scw3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SCW3_MASKf_GET(r) (((r).reg_3_scw3_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SCW3_MASKf_SET(r,f) (r).reg_3_scw3_mask[0]=(((r).reg_3_scw3_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REG_3_SCW3_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCW3_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr,(_r._reg_3_scw3_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW3_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr,(_r._reg_3_scw3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCW3_MASKr BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr
#define REG_3_SCW3_MASKr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_t REG_3_SCW3_MASKr_t;
#define REG_3_SCW3_MASKr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_CLR
#define REG_3_SCW3_MASKr_SET BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SET
#define REG_3_SCW3_MASKr_GET BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_GET
#define REG_3_SCW3_MASKr_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SCW3_MASKf_GET
#define REG_3_SCW3_MASKr_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr_SCW3_MASKf_SET
#define READ_REG_3_SCW3_MASKr BCMI_HYPERLITE_XGXS_READ_REG_3_SCW3_MASKr
#define WRITE_REG_3_SCW3_MASKr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCW3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCW3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SYNCBITS
 * BLOCKS:   RX66
 * REGADDR:  0x81ea
 * DESC:     Sync bits and sync mask bits
 * SIZE:     32
 * FIELDS:
 *     SYNCBITS_MASK    
 *     SYNCBITS         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr (0x0001e01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SYNCBITS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_s {
	uint32_t v[1];
	uint32_t reg_3_syncbits[1];
	uint32_t _reg_3_syncbits;
} BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_CLR(r) (r).reg_3_syncbits[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SET(r,d) (r).reg_3_syncbits[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_GET(r) (r).reg_3_syncbits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_RESERVED0f_GET(r) ((((r).reg_3_syncbits[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_RESERVED0f_SET(r,f) (r).reg_3_syncbits[0]=(((r).reg_3_syncbits[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITSf_GET(r) ((((r).reg_3_syncbits[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITSf_SET(r,f) (r).reg_3_syncbits[0]=(((r).reg_3_syncbits[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITS_MASKf_GET(r) (((r).reg_3_syncbits[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITS_MASKf_SET(r,f) (r).reg_3_syncbits[0]=(((r).reg_3_syncbits[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access REG_3_SYNCBITS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SYNCBITSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr,(_r._reg_3_syncbits))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SYNCBITSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr,(_r._reg_3_syncbits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SYNCBITSr BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr
#define REG_3_SYNCBITSr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_t REG_3_SYNCBITSr_t;
#define REG_3_SYNCBITSr_CLR BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_CLR
#define REG_3_SYNCBITSr_SET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SET
#define REG_3_SYNCBITSr_GET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_GET
#define REG_3_SYNCBITSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_RESERVED0f_GET
#define REG_3_SYNCBITSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_RESERVED0f_SET
#define REG_3_SYNCBITSr_SYNCBITSf_GET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITSf_GET
#define REG_3_SYNCBITSr_SYNCBITSf_SET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITSf_SET
#define REG_3_SYNCBITSr_SYNCBITS_MASKf_GET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITS_MASKf_GET
#define REG_3_SYNCBITSr_SYNCBITS_MASKf_SET BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr_SYNCBITS_MASKf_SET
#define READ_REG_3_SYNCBITSr BCMI_HYPERLITE_XGXS_READ_REG_3_SYNCBITSr
#define WRITE_REG_3_SYNCBITSr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SYNCBITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SYNCBITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCWCONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81eb
 * DESC:     Sync code word statemachine control register
 * SIZE:     32
 * FIELDS:
 *     HYSTCOUNT        
 *     GCWCOUNT         
 *     SCWCOUNT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr (0x0001e01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCWCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_s {
	uint32_t v[1];
	uint32_t reg_3_scwcontrol[1];
	uint32_t _reg_3_scwcontrol;
} BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_CLR(r) (r).reg_3_scwcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SET(r,d) (r).reg_3_scwcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GET(r) (r).reg_3_scwcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_RESERVED0f_GET(r) ((((r).reg_3_scwcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_RESERVED0f_SET(r,f) (r).reg_3_scwcontrol[0]=(((r).reg_3_scwcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SCWCOUNTf_GET(r) ((((r).reg_3_scwcontrol[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SCWCOUNTf_SET(r,f) (r).reg_3_scwcontrol[0]=(((r).reg_3_scwcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GCWCOUNTf_GET(r) ((((r).reg_3_scwcontrol[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GCWCOUNTf_SET(r,f) (r).reg_3_scwcontrol[0]=(((r).reg_3_scwcontrol[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_HYSTCOUNTf_GET(r) (((r).reg_3_scwcontrol[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_HYSTCOUNTf_SET(r,f) (r).reg_3_scwcontrol[0]=(((r).reg_3_scwcontrol[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access REG_3_SCWCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCWCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr,(_r._reg_3_scwcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCWCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr,(_r._reg_3_scwcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCWCONTROLr BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr
#define REG_3_SCWCONTROLr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_t REG_3_SCWCONTROLr_t;
#define REG_3_SCWCONTROLr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_CLR
#define REG_3_SCWCONTROLr_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SET
#define REG_3_SCWCONTROLr_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GET
#define REG_3_SCWCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_RESERVED0f_GET
#define REG_3_SCWCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_RESERVED0f_SET
#define REG_3_SCWCONTROLr_SCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SCWCOUNTf_GET
#define REG_3_SCWCONTROLr_SCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_SCWCOUNTf_SET
#define REG_3_SCWCONTROLr_GCWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GCWCOUNTf_GET
#define REG_3_SCWCONTROLr_GCWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_GCWCOUNTf_SET
#define REG_3_SCWCONTROLr_HYSTCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_HYSTCOUNTf_GET
#define REG_3_SCWCONTROLr_HYSTCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr_HYSTCOUNTf_SET
#define READ_REG_3_SCWCONTROLr BCMI_HYPERLITE_XGXS_READ_REG_3_SCWCONTROLr
#define WRITE_REG_3_SCWCONTROLr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCWCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCWCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_SCWCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81ed
 * DESC:     CW=SCW counter & skew position
 * SIZE:     32
 * FIELDS:
 *     SYNC_ACQD2_CWCOUNT 
 *     COMMA_DETECT_CWCOUNT 
 *     SCWSHIFT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr (0x0001e01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_SCWCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_3_scwcount[1];
	uint32_t _reg_3_scwcount;
} BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_CLR(r) (r).reg_3_scwcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SET(r,d) (r).reg_3_scwcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_GET(r) (r).reg_3_scwcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_RESERVED0f_GET(r) ((((r).reg_3_scwcount[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_RESERVED0f_SET(r,f) (r).reg_3_scwcount[0]=(((r).reg_3_scwcount[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SCWSHIFTf_GET(r) ((((r).reg_3_scwcount[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SCWSHIFTf_SET(r,f) (r).reg_3_scwcount[0]=(((r).reg_3_scwcount[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET(r) (((r).reg_3_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET(r,f) (r).reg_3_scwcount[0]=(((r).reg_3_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET(r) (((r).reg_3_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET(r,f) (r).reg_3_scwcount[0]=(((r).reg_3_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_3_SCWCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_SCWCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr,(_r._reg_3_scwcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCWCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr,(_r._reg_3_scwcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_SCWCOUNTr BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr
#define REG_3_SCWCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_t REG_3_SCWCOUNTr_t;
#define REG_3_SCWCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_CLR
#define REG_3_SCWCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SET
#define REG_3_SCWCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_GET
#define REG_3_SCWCOUNTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_RESERVED0f_GET
#define REG_3_SCWCOUNTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_RESERVED0f_SET
#define REG_3_SCWCOUNTr_SCWSHIFTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SCWSHIFTf_GET
#define REG_3_SCWCOUNTr_SCWSHIFTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SCWSHIFTf_SET
#define REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET
#define REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET
#define REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET
#define REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET
#define READ_REG_3_SCWCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_3_SCWCOUNTr
#define WRITE_REG_3_SCWCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_3_SCWCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_SCWCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  REG_3_ERRCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81ee
 * DESC:     scw & K-code group error counters
 * SIZE:     32
 * FIELDS:
 *     KCODE66ERRCOUNT  
 *     SYNC66ERRCOUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr (0x0001e01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program REG_3_ERRCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_s {
	uint32_t v[1];
	uint32_t reg_3_errcount[1];
	uint32_t _reg_3_errcount;
} BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_CLR(r) (r).reg_3_errcount[0] = 0
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SET(r,d) (r).reg_3_errcount[0] = d
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_GET(r) (r).reg_3_errcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_GET(r) ((((r).reg_3_errcount[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_SET(r,f) (r).reg_3_errcount[0]=(((r).reg_3_errcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_GET(r) (((r).reg_3_errcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_SET(r,f) (r).reg_3_errcount[0]=(((r).reg_3_errcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REG_3_ERRCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_REG_3_ERRCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr,(_r._reg_3_errcount))
#define BCMI_HYPERLITE_XGXS_WRITE_REG_3_ERRCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr,(_r._reg_3_errcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REG_3_ERRCOUNTr BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr
#define REG_3_ERRCOUNTr_SIZE BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_t REG_3_ERRCOUNTr_t;
#define REG_3_ERRCOUNTr_CLR BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_CLR
#define REG_3_ERRCOUNTr_SET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SET
#define REG_3_ERRCOUNTr_GET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_GET
#define REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_GET
#define REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_SYNC66ERRCOUNTf_SET
#define REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_GET
#define REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr_KCODE66ERRCOUNTf_SET
#define READ_REG_3_ERRCOUNTr BCMI_HYPERLITE_XGXS_READ_REG_3_ERRCOUNTr
#define WRITE_REG_3_ERRCOUNTr BCMI_HYPERLITE_XGXS_WRITE_REG_3_ERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_REG_3_ERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_CONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81f0
 * DESC:     64/66 Decoder control register
 * SIZE:     32
 * FIELDS:
 *     RFIFO_AFRST_EN   
 *     RFIFO_SBITCLR    
 *     DESCRAMBLERCONTROL 
 *     CGBAD_KCODE66ERR_EN 
 *     KCODE66ERRCOUNT_EN 
 *     SYNC66ERRCOUNT_EN 
 *     CWCOUNT_EN       
 *     CWCOUNT_SEL      
 *     RXSEQDONEMASK    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_CONTROLr (0x0001f010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program A_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_CONTROLr_s {
	uint32_t v[1];
	uint32_t a_control[1];
	uint32_t _a_control;
} BCMI_HYPERLITE_XGXS_A_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CLR(r) (r).a_control[0] = 0
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_SET(r,d) (r).a_control[0] = d
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_GET(r) (r).a_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RESERVED0f_GET(r) ((((r).a_control[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RESERVED0f_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RXSEQDONEMASKf_GET(r) ((((r).a_control[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RXSEQDONEMASKf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_SELf_GET(r) ((((r).a_control[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_SELf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_ENf_GET(r) ((((r).a_control[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_ENf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_SYNC66ERRCOUNT_ENf_GET(r) ((((r).a_control[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_SYNC66ERRCOUNT_ENf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_KCODE66ERRCOUNT_ENf_GET(r) ((((r).a_control[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_KCODE66ERRCOUNT_ENf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CGBAD_KCODE66ERR_ENf_GET(r) ((((r).a_control[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_CGBAD_KCODE66ERR_ENf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_DESCRAMBLERCONTROLf_GET(r) ((((r).a_control[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_DESCRAMBLERCONTROLf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_SBITCLRf_GET(r) ((((r).a_control[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_SBITCLRf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_AFRST_ENf_GET(r) (((r).a_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_AFRST_ENf_SET(r,f) (r).a_control[0]=(((r).a_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access A_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_CONTROLr,(_r._a_control))
#define BCMI_HYPERLITE_XGXS_WRITE_A_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_CONTROLr,(_r._a_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_CONTROLr BCMI_HYPERLITE_XGXS_A_CONTROLr
#define A_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_A_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_CONTROLr_t A_CONTROLr_t;
#define A_CONTROLr_CLR BCMI_HYPERLITE_XGXS_A_CONTROLr_CLR
#define A_CONTROLr_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_SET
#define A_CONTROLr_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_GET
#define A_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_RESERVED0f_GET
#define A_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_RESERVED0f_SET
#define A_CONTROLr_RXSEQDONEMASKf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_RXSEQDONEMASKf_GET
#define A_CONTROLr_RXSEQDONEMASKf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_RXSEQDONEMASKf_SET
#define A_CONTROLr_CWCOUNT_SELf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_SELf_GET
#define A_CONTROLr_CWCOUNT_SELf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_SELf_SET
#define A_CONTROLr_CWCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_ENf_GET
#define A_CONTROLr_CWCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_CWCOUNT_ENf_SET
#define A_CONTROLr_SYNC66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_SYNC66ERRCOUNT_ENf_GET
#define A_CONTROLr_SYNC66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_SYNC66ERRCOUNT_ENf_SET
#define A_CONTROLr_KCODE66ERRCOUNT_ENf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_KCODE66ERRCOUNT_ENf_GET
#define A_CONTROLr_KCODE66ERRCOUNT_ENf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_KCODE66ERRCOUNT_ENf_SET
#define A_CONTROLr_CGBAD_KCODE66ERR_ENf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_CGBAD_KCODE66ERR_ENf_GET
#define A_CONTROLr_CGBAD_KCODE66ERR_ENf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_CGBAD_KCODE66ERR_ENf_SET
#define A_CONTROLr_DESCRAMBLERCONTROLf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_DESCRAMBLERCONTROLf_GET
#define A_CONTROLr_DESCRAMBLERCONTROLf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_DESCRAMBLERCONTROLf_SET
#define A_CONTROLr_RFIFO_SBITCLRf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_SBITCLRf_GET
#define A_CONTROLr_RFIFO_SBITCLRf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_SBITCLRf_SET
#define A_CONTROLr_RFIFO_AFRST_ENf_GET BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_AFRST_ENf_GET
#define A_CONTROLr_RFIFO_AFRST_ENf_SET BCMI_HYPERLITE_XGXS_A_CONTROLr_RFIFO_AFRST_ENf_SET
#define READ_A_CONTROLr BCMI_HYPERLITE_XGXS_READ_A_CONTROLr
#define WRITE_A_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_A_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_STATUS
 * BLOCKS:   RX66
 * REGADDR:  0x81f1
 * DESC:     64/66 Decoder status register
 * SIZE:     32
 * FIELDS:
 *     FERR             
 *     OVFLOW           
 *     UNFLOW           
 *     SYNCDONE         
 *     RESERVED0        
 *     SYNC_ACQD2       
 *     SYNC_ACQD1       
 *     COMMA_DETECT     
 *     LOSS_OF_SYNC     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_STATUSr (0x0001f011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program A_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_STATUSr_s {
	uint32_t v[1];
	uint32_t a_status[1];
	uint32_t _a_status;
} BCMI_HYPERLITE_XGXS_A_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_A_STATUSr_CLR(r) (r).a_status[0] = 0
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SET(r,d) (r).a_status[0] = d
#define BCMI_HYPERLITE_XGXS_A_STATUSr_GET(r) (r).a_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_STATUSr_LOSS_OF_SYNCf_GET(r) ((((r).a_status[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_LOSS_OF_SYNCf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_COMMA_DETECTf_GET(r) ((((r).a_status[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_COMMA_DETECTf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD1f_GET(r) ((((r).a_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD1f_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD2f_GET(r) ((((r).a_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD2f_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_RESERVED0f_GET(r) ((((r).a_status[0]) >> 4) & 0xff)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_RESERVED0f_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0xff << 4)) | ((((uint32_t)f) & 0xff) << 4))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNCDONEf_GET(r) ((((r).a_status[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_SYNCDONEf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_UNFLOWf_GET(r) ((((r).a_status[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_UNFLOWf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_OVFLOWf_GET(r) ((((r).a_status[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_OVFLOWf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_A_STATUSr_FERRf_GET(r) (((r).a_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_STATUSr_FERRf_SET(r,f) (r).a_status[0]=(((r).a_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access A_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_STATUSr,(_r._a_status))
#define BCMI_HYPERLITE_XGXS_WRITE_A_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_STATUSr,(_r._a_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_STATUSr BCMI_HYPERLITE_XGXS_A_STATUSr
#define A_STATUSr_SIZE BCMI_HYPERLITE_XGXS_A_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_STATUSr_t A_STATUSr_t;
#define A_STATUSr_CLR BCMI_HYPERLITE_XGXS_A_STATUSr_CLR
#define A_STATUSr_SET BCMI_HYPERLITE_XGXS_A_STATUSr_SET
#define A_STATUSr_GET BCMI_HYPERLITE_XGXS_A_STATUSr_GET
#define A_STATUSr_LOSS_OF_SYNCf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_LOSS_OF_SYNCf_GET
#define A_STATUSr_LOSS_OF_SYNCf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_LOSS_OF_SYNCf_SET
#define A_STATUSr_COMMA_DETECTf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_COMMA_DETECTf_GET
#define A_STATUSr_COMMA_DETECTf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_COMMA_DETECTf_SET
#define A_STATUSr_SYNC_ACQD1f_GET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD1f_GET
#define A_STATUSr_SYNC_ACQD1f_SET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD1f_SET
#define A_STATUSr_SYNC_ACQD2f_GET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD2f_GET
#define A_STATUSr_SYNC_ACQD2f_SET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNC_ACQD2f_SET
#define A_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_A_STATUSr_RESERVED0f_GET
#define A_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_A_STATUSr_RESERVED0f_SET
#define A_STATUSr_SYNCDONEf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNCDONEf_GET
#define A_STATUSr_SYNCDONEf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_SYNCDONEf_SET
#define A_STATUSr_UNFLOWf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_UNFLOWf_GET
#define A_STATUSr_UNFLOWf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_UNFLOWf_SET
#define A_STATUSr_OVFLOWf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_OVFLOWf_GET
#define A_STATUSr_OVFLOWf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_OVFLOWf_SET
#define A_STATUSr_FERRf_GET BCMI_HYPERLITE_XGXS_A_STATUSr_FERRf_GET
#define A_STATUSr_FERRf_SET BCMI_HYPERLITE_XGXS_A_STATUSr_FERRf_SET
#define READ_A_STATUSr BCMI_HYPERLITE_XGXS_READ_A_STATUSr
#define WRITE_A_STATUSr BCMI_HYPERLITE_XGXS_WRITE_A_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW0
 * BLOCKS:   RX66
 * REGADDR:  0x81f2
 * DESC:     Sync code word bits 15:0
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW0_MASK   
 *     SCW0             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW0r (0x0001f012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW0r_SIZE 4

/*
 * This structure should be used to declare and program A_SCW0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW0r_s {
	uint32_t v[1];
	uint32_t a_scw0[1];
	uint32_t _a_scw0;
} BCMI_HYPERLITE_XGXS_A_SCW0r_t;

#define BCMI_HYPERLITE_XGXS_A_SCW0r_CLR(r) (r).a_scw0[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW0r_SET(r,d) (r).a_scw0[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW0r_GET(r) (r).a_scw0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW0r_MASK_SCW0_MASKf_GET(r) (((r).a_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW0r_MASK_SCW0_MASKf_SET(r,f) (r).a_scw0[0]=(((r).a_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_A_SCW0r_SCW0f_GET(r) (((r).a_scw0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW0r_SCW0f_SET(r,f) (r).a_scw0[0]=(((r).a_scw0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW0r,(_r._a_scw0))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW0r,(_r._a_scw0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW0r BCMI_HYPERLITE_XGXS_A_SCW0r
#define A_SCW0r_SIZE BCMI_HYPERLITE_XGXS_A_SCW0r_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW0r_t A_SCW0r_t;
#define A_SCW0r_CLR BCMI_HYPERLITE_XGXS_A_SCW0r_CLR
#define A_SCW0r_SET BCMI_HYPERLITE_XGXS_A_SCW0r_SET
#define A_SCW0r_GET BCMI_HYPERLITE_XGXS_A_SCW0r_GET
#define A_SCW0r_MASK_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW0r_MASK_SCW0_MASKf_GET
#define A_SCW0r_MASK_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW0r_MASK_SCW0_MASKf_SET
#define A_SCW0r_SCW0f_GET BCMI_HYPERLITE_XGXS_A_SCW0r_SCW0f_GET
#define A_SCW0r_SCW0f_SET BCMI_HYPERLITE_XGXS_A_SCW0r_SCW0f_SET
#define READ_A_SCW0r BCMI_HYPERLITE_XGXS_READ_A_SCW0r
#define WRITE_A_SCW0r BCMI_HYPERLITE_XGXS_WRITE_A_SCW0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW1
 * BLOCKS:   RX66
 * REGADDR:  0x81f3
 * DESC:     Sync code word bits 31;16
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW1_MASK   
 *     SCW1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW1r (0x0001f013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW1r_SIZE 4

/*
 * This structure should be used to declare and program A_SCW1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW1r_s {
	uint32_t v[1];
	uint32_t a_scw1[1];
	uint32_t _a_scw1;
} BCMI_HYPERLITE_XGXS_A_SCW1r_t;

#define BCMI_HYPERLITE_XGXS_A_SCW1r_CLR(r) (r).a_scw1[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW1r_SET(r,d) (r).a_scw1[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW1r_GET(r) (r).a_scw1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW1r_MASK_SCW1_MASKf_GET(r) (((r).a_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW1r_MASK_SCW1_MASKf_SET(r,f) (r).a_scw1[0]=(((r).a_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_A_SCW1r_SCW1f_GET(r) (((r).a_scw1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW1r_SCW1f_SET(r,f) (r).a_scw1[0]=(((r).a_scw1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW1r,(_r._a_scw1))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW1r,(_r._a_scw1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW1r BCMI_HYPERLITE_XGXS_A_SCW1r
#define A_SCW1r_SIZE BCMI_HYPERLITE_XGXS_A_SCW1r_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW1r_t A_SCW1r_t;
#define A_SCW1r_CLR BCMI_HYPERLITE_XGXS_A_SCW1r_CLR
#define A_SCW1r_SET BCMI_HYPERLITE_XGXS_A_SCW1r_SET
#define A_SCW1r_GET BCMI_HYPERLITE_XGXS_A_SCW1r_GET
#define A_SCW1r_MASK_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW1r_MASK_SCW1_MASKf_GET
#define A_SCW1r_MASK_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW1r_MASK_SCW1_MASKf_SET
#define A_SCW1r_SCW1f_GET BCMI_HYPERLITE_XGXS_A_SCW1r_SCW1f_GET
#define A_SCW1r_SCW1f_SET BCMI_HYPERLITE_XGXS_A_SCW1r_SCW1f_SET
#define READ_A_SCW1r BCMI_HYPERLITE_XGXS_READ_A_SCW1r
#define WRITE_A_SCW1r BCMI_HYPERLITE_XGXS_WRITE_A_SCW1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW2
 * BLOCKS:   RX66
 * REGADDR:  0x81f4
 * DESC:     Sync code word bits 47:32
 * SIZE:     32
 * FIELDS:
 *     MASK_SCW2_MASK   
 *     SCW2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW2r (0x0001f014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW2r_SIZE 4

/*
 * This structure should be used to declare and program A_SCW2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW2r_s {
	uint32_t v[1];
	uint32_t a_scw2[1];
	uint32_t _a_scw2;
} BCMI_HYPERLITE_XGXS_A_SCW2r_t;

#define BCMI_HYPERLITE_XGXS_A_SCW2r_CLR(r) (r).a_scw2[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW2r_SET(r,d) (r).a_scw2[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW2r_GET(r) (r).a_scw2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW2r_MASK_SCW2_MASKf_GET(r) (((r).a_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW2r_MASK_SCW2_MASKf_SET(r,f) (r).a_scw2[0]=(((r).a_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_A_SCW2r_SCW2f_GET(r) (((r).a_scw2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW2r_SCW2f_SET(r,f) (r).a_scw2[0]=(((r).a_scw2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW2r,(_r._a_scw2))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW2r,(_r._a_scw2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW2r BCMI_HYPERLITE_XGXS_A_SCW2r
#define A_SCW2r_SIZE BCMI_HYPERLITE_XGXS_A_SCW2r_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW2r_t A_SCW2r_t;
#define A_SCW2r_CLR BCMI_HYPERLITE_XGXS_A_SCW2r_CLR
#define A_SCW2r_SET BCMI_HYPERLITE_XGXS_A_SCW2r_SET
#define A_SCW2r_GET BCMI_HYPERLITE_XGXS_A_SCW2r_GET
#define A_SCW2r_MASK_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW2r_MASK_SCW2_MASKf_GET
#define A_SCW2r_MASK_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW2r_MASK_SCW2_MASKf_SET
#define A_SCW2r_SCW2f_GET BCMI_HYPERLITE_XGXS_A_SCW2r_SCW2f_GET
#define A_SCW2r_SCW2f_SET BCMI_HYPERLITE_XGXS_A_SCW2r_SCW2f_SET
#define READ_A_SCW2r BCMI_HYPERLITE_XGXS_READ_A_SCW2r
#define WRITE_A_SCW2r BCMI_HYPERLITE_XGXS_WRITE_A_SCW2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW3
 * BLOCKS:   RX66
 * REGADDR:  0x81f5
 * DESC:     Sync code word bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3             
 *     MASK_SCW3_MASK   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW3r (0x0001f015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW3r_SIZE 4

/*
 * This structure should be used to declare and program A_SCW3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW3r_s {
	uint32_t v[1];
	uint32_t a_scw3[1];
	uint32_t _a_scw3;
} BCMI_HYPERLITE_XGXS_A_SCW3r_t;

#define BCMI_HYPERLITE_XGXS_A_SCW3r_CLR(r) (r).a_scw3[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW3r_SET(r,d) (r).a_scw3[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW3r_GET(r) (r).a_scw3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW3r_SCW3f_GET(r) (((r).a_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW3r_SCW3f_SET(r,f) (r).a_scw3[0]=(((r).a_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_A_SCW3r_MASK_SCW3_MASKf_GET(r) (((r).a_scw3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW3r_MASK_SCW3_MASKf_SET(r,f) (r).a_scw3[0]=(((r).a_scw3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW3r,(_r._a_scw3))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW3r,(_r._a_scw3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW3r BCMI_HYPERLITE_XGXS_A_SCW3r
#define A_SCW3r_SIZE BCMI_HYPERLITE_XGXS_A_SCW3r_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW3r_t A_SCW3r_t;
#define A_SCW3r_CLR BCMI_HYPERLITE_XGXS_A_SCW3r_CLR
#define A_SCW3r_SET BCMI_HYPERLITE_XGXS_A_SCW3r_SET
#define A_SCW3r_GET BCMI_HYPERLITE_XGXS_A_SCW3r_GET
#define A_SCW3r_SCW3f_GET BCMI_HYPERLITE_XGXS_A_SCW3r_SCW3f_GET
#define A_SCW3r_SCW3f_SET BCMI_HYPERLITE_XGXS_A_SCW3r_SCW3f_SET
#define A_SCW3r_MASK_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW3r_MASK_SCW3_MASKf_GET
#define A_SCW3r_MASK_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW3r_MASK_SCW3_MASKf_SET
#define READ_A_SCW3r BCMI_HYPERLITE_XGXS_READ_A_SCW3r
#define WRITE_A_SCW3r BCMI_HYPERLITE_XGXS_WRITE_A_SCW3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW0_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81f6
 * DESC:     Sync code word mask bits 15:0
 * SIZE:     32
 * FIELDS:
 *     SCW0_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr (0x0001f016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program A_SCW0_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_s {
	uint32_t v[1];
	uint32_t a_scw0_mask[1];
	uint32_t _a_scw0_mask;
} BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_t;

#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_CLR(r) (r).a_scw0_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SET(r,d) (r).a_scw0_mask[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_GET(r) (r).a_scw0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SCW0_MASKf_GET(r) (((r).a_scw0_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SCW0_MASKf_SET(r,f) (r).a_scw0_mask[0]=(((r).a_scw0_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW0_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW0_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW0_MASKr,(_r._a_scw0_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW0_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW0_MASKr,(_r._a_scw0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW0_MASKr BCMI_HYPERLITE_XGXS_A_SCW0_MASKr
#define A_SCW0_MASKr_SIZE BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_t A_SCW0_MASKr_t;
#define A_SCW0_MASKr_CLR BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_CLR
#define A_SCW0_MASKr_SET BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SET
#define A_SCW0_MASKr_GET BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_GET
#define A_SCW0_MASKr_SCW0_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SCW0_MASKf_GET
#define A_SCW0_MASKr_SCW0_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW0_MASKr_SCW0_MASKf_SET
#define READ_A_SCW0_MASKr BCMI_HYPERLITE_XGXS_READ_A_SCW0_MASKr
#define WRITE_A_SCW0_MASKr BCMI_HYPERLITE_XGXS_WRITE_A_SCW0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW1_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81f7
 * DESC:     Sync code word mask bits 31;16
 * SIZE:     32
 * FIELDS:
 *     SCW1_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr (0x0001f017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program A_SCW1_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_s {
	uint32_t v[1];
	uint32_t a_scw1_mask[1];
	uint32_t _a_scw1_mask;
} BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_t;

#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_CLR(r) (r).a_scw1_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SET(r,d) (r).a_scw1_mask[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_GET(r) (r).a_scw1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SCW1_MASKf_GET(r) (((r).a_scw1_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SCW1_MASKf_SET(r,f) (r).a_scw1_mask[0]=(((r).a_scw1_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW1_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW1_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW1_MASKr,(_r._a_scw1_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW1_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW1_MASKr,(_r._a_scw1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW1_MASKr BCMI_HYPERLITE_XGXS_A_SCW1_MASKr
#define A_SCW1_MASKr_SIZE BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_t A_SCW1_MASKr_t;
#define A_SCW1_MASKr_CLR BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_CLR
#define A_SCW1_MASKr_SET BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SET
#define A_SCW1_MASKr_GET BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_GET
#define A_SCW1_MASKr_SCW1_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SCW1_MASKf_GET
#define A_SCW1_MASKr_SCW1_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW1_MASKr_SCW1_MASKf_SET
#define READ_A_SCW1_MASKr BCMI_HYPERLITE_XGXS_READ_A_SCW1_MASKr
#define WRITE_A_SCW1_MASKr BCMI_HYPERLITE_XGXS_WRITE_A_SCW1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW2_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81f8
 * DESC:     Sync code word mask bits 47:32
 * SIZE:     32
 * FIELDS:
 *     SCW2_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr (0x0001f018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program A_SCW2_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_s {
	uint32_t v[1];
	uint32_t a_scw2_mask[1];
	uint32_t _a_scw2_mask;
} BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_t;

#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_CLR(r) (r).a_scw2_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SET(r,d) (r).a_scw2_mask[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_GET(r) (r).a_scw2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SCW2_MASKf_GET(r) (((r).a_scw2_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SCW2_MASKf_SET(r,f) (r).a_scw2_mask[0]=(((r).a_scw2_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW2_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW2_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW2_MASKr,(_r._a_scw2_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW2_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW2_MASKr,(_r._a_scw2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW2_MASKr BCMI_HYPERLITE_XGXS_A_SCW2_MASKr
#define A_SCW2_MASKr_SIZE BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_t A_SCW2_MASKr_t;
#define A_SCW2_MASKr_CLR BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_CLR
#define A_SCW2_MASKr_SET BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SET
#define A_SCW2_MASKr_GET BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_GET
#define A_SCW2_MASKr_SCW2_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SCW2_MASKf_GET
#define A_SCW2_MASKr_SCW2_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW2_MASKr_SCW2_MASKf_SET
#define READ_A_SCW2_MASKr BCMI_HYPERLITE_XGXS_READ_A_SCW2_MASKr
#define WRITE_A_SCW2_MASKr BCMI_HYPERLITE_XGXS_WRITE_A_SCW2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCW3_MASK
 * BLOCKS:   RX66
 * REGADDR:  0x81f9
 * DESC:     Sync code word mask bits 63:48
 * SIZE:     32
 * FIELDS:
 *     SCW3_MASK        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr (0x0001f019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program A_SCW3_MASK.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_s {
	uint32_t v[1];
	uint32_t a_scw3_mask[1];
	uint32_t _a_scw3_mask;
} BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_t;

#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_CLR(r) (r).a_scw3_mask[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SET(r,d) (r).a_scw3_mask[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_GET(r) (r).a_scw3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SCW3_MASKf_GET(r) (((r).a_scw3_mask[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SCW3_MASKf_SET(r,f) (r).a_scw3_mask[0]=(((r).a_scw3_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access A_SCW3_MASK.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCW3_MASKr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCW3_MASKr,(_r._a_scw3_mask))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCW3_MASKr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCW3_MASKr,(_r._a_scw3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCW3_MASKr BCMI_HYPERLITE_XGXS_A_SCW3_MASKr
#define A_SCW3_MASKr_SIZE BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_t A_SCW3_MASKr_t;
#define A_SCW3_MASKr_CLR BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_CLR
#define A_SCW3_MASKr_SET BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SET
#define A_SCW3_MASKr_GET BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_GET
#define A_SCW3_MASKr_SCW3_MASKf_GET BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SCW3_MASKf_GET
#define A_SCW3_MASKr_SCW3_MASKf_SET BCMI_HYPERLITE_XGXS_A_SCW3_MASKr_SCW3_MASKf_SET
#define READ_A_SCW3_MASKr BCMI_HYPERLITE_XGXS_READ_A_SCW3_MASKr
#define WRITE_A_SCW3_MASKr BCMI_HYPERLITE_XGXS_WRITE_A_SCW3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCW3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SYNCBITS
 * BLOCKS:   RX66
 * REGADDR:  0x81fa
 * DESC:     Sync bits and sync mask bits
 * SIZE:     32
 * FIELDS:
 *     SYNCBITS_MASK    
 *     SYNCBITS         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr (0x0001f01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SIZE 4

/*
 * This structure should be used to declare and program A_SYNCBITS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SYNCBITSr_s {
	uint32_t v[1];
	uint32_t a_syncbits[1];
	uint32_t _a_syncbits;
} BCMI_HYPERLITE_XGXS_A_SYNCBITSr_t;

#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_CLR(r) (r).a_syncbits[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SET(r,d) (r).a_syncbits[0] = d
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_GET(r) (r).a_syncbits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_RESERVED0f_GET(r) ((((r).a_syncbits[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_RESERVED0f_SET(r,f) (r).a_syncbits[0]=(((r).a_syncbits[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITSf_GET(r) ((((r).a_syncbits[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITSf_SET(r,f) (r).a_syncbits[0]=(((r).a_syncbits[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITS_MASKf_GET(r) (((r).a_syncbits[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITS_MASKf_SET(r,f) (r).a_syncbits[0]=(((r).a_syncbits[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access A_SYNCBITS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SYNCBITSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SYNCBITSr,(_r._a_syncbits))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SYNCBITSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SYNCBITSr,(_r._a_syncbits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SYNCBITSr BCMI_HYPERLITE_XGXS_A_SYNCBITSr
#define A_SYNCBITSr_SIZE BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SYNCBITSr_t A_SYNCBITSr_t;
#define A_SYNCBITSr_CLR BCMI_HYPERLITE_XGXS_A_SYNCBITSr_CLR
#define A_SYNCBITSr_SET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SET
#define A_SYNCBITSr_GET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_GET
#define A_SYNCBITSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_RESERVED0f_GET
#define A_SYNCBITSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_RESERVED0f_SET
#define A_SYNCBITSr_SYNCBITSf_GET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITSf_GET
#define A_SYNCBITSr_SYNCBITSf_SET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITSf_SET
#define A_SYNCBITSr_SYNCBITS_MASKf_GET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITS_MASKf_GET
#define A_SYNCBITSr_SYNCBITS_MASKf_SET BCMI_HYPERLITE_XGXS_A_SYNCBITSr_SYNCBITS_MASKf_SET
#define READ_A_SYNCBITSr BCMI_HYPERLITE_XGXS_READ_A_SYNCBITSr
#define WRITE_A_SYNCBITSr BCMI_HYPERLITE_XGXS_WRITE_A_SYNCBITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SYNCBITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCWCONTROL
 * BLOCKS:   RX66
 * REGADDR:  0x81fb
 * DESC:     Sync code word statemachine control register
 * SIZE:     32
 * FIELDS:
 *     HYSTCOUNT        
 *     GCWCOUNT         
 *     SCWCOUNT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr (0x0001f01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program A_SCWCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_s {
	uint32_t v[1];
	uint32_t a_scwcontrol[1];
	uint32_t _a_scwcontrol;
} BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_CLR(r) (r).a_scwcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SET(r,d) (r).a_scwcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GET(r) (r).a_scwcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_RESERVED0f_GET(r) ((((r).a_scwcontrol[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_RESERVED0f_SET(r,f) (r).a_scwcontrol[0]=(((r).a_scwcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SCWCOUNTf_GET(r) ((((r).a_scwcontrol[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SCWCOUNTf_SET(r,f) (r).a_scwcontrol[0]=(((r).a_scwcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GCWCOUNTf_GET(r) ((((r).a_scwcontrol[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GCWCOUNTf_SET(r,f) (r).a_scwcontrol[0]=(((r).a_scwcontrol[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_HYSTCOUNTf_GET(r) (((r).a_scwcontrol[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_HYSTCOUNTf_SET(r,f) (r).a_scwcontrol[0]=(((r).a_scwcontrol[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access A_SCWCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCWCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCWCONTROLr,(_r._a_scwcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCWCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCWCONTROLr,(_r._a_scwcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCWCONTROLr BCMI_HYPERLITE_XGXS_A_SCWCONTROLr
#define A_SCWCONTROLr_SIZE BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_t A_SCWCONTROLr_t;
#define A_SCWCONTROLr_CLR BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_CLR
#define A_SCWCONTROLr_SET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SET
#define A_SCWCONTROLr_GET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GET
#define A_SCWCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_RESERVED0f_GET
#define A_SCWCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_RESERVED0f_SET
#define A_SCWCONTROLr_SCWCOUNTf_GET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SCWCOUNTf_GET
#define A_SCWCONTROLr_SCWCOUNTf_SET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_SCWCOUNTf_SET
#define A_SCWCONTROLr_GCWCOUNTf_GET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GCWCOUNTf_GET
#define A_SCWCONTROLr_GCWCOUNTf_SET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_GCWCOUNTf_SET
#define A_SCWCONTROLr_HYSTCOUNTf_GET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_HYSTCOUNTf_GET
#define A_SCWCONTROLr_HYSTCOUNTf_SET BCMI_HYPERLITE_XGXS_A_SCWCONTROLr_HYSTCOUNTf_SET
#define READ_A_SCWCONTROLr BCMI_HYPERLITE_XGXS_READ_A_SCWCONTROLr
#define WRITE_A_SCWCONTROLr BCMI_HYPERLITE_XGXS_WRITE_A_SCWCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCWCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_SCWCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81fd
 * DESC:     CW=SCW counter & skew position
 * SIZE:     32
 * FIELDS:
 *     SYNC_ACQD2_CWCOUNT 
 *     COMMA_DETECT_CWCOUNT 
 *     SCWSHIFT         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr (0x0001f01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program A_SCWCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_s {
	uint32_t v[1];
	uint32_t a_scwcount[1];
	uint32_t _a_scwcount;
} BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_CLR(r) (r).a_scwcount[0] = 0
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SET(r,d) (r).a_scwcount[0] = d
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_GET(r) (r).a_scwcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_RESERVED0f_GET(r) ((((r).a_scwcount[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_RESERVED0f_SET(r,f) (r).a_scwcount[0]=(((r).a_scwcount[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SCWSHIFTf_GET(r) ((((r).a_scwcount[0]) >> 8) & 0x7f)
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SCWSHIFTf_SET(r,f) (r).a_scwcount[0]=(((r).a_scwcount[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET(r) (((r).a_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET(r,f) (r).a_scwcount[0]=(((r).a_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET(r) (((r).a_scwcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET(r,f) (r).a_scwcount[0]=(((r).a_scwcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access A_SCWCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_SCWCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_SCWCOUNTr,(_r._a_scwcount))
#define BCMI_HYPERLITE_XGXS_WRITE_A_SCWCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_SCWCOUNTr,(_r._a_scwcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_SCWCOUNTr BCMI_HYPERLITE_XGXS_A_SCWCOUNTr
#define A_SCWCOUNTr_SIZE BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_t A_SCWCOUNTr_t;
#define A_SCWCOUNTr_CLR BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_CLR
#define A_SCWCOUNTr_SET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SET
#define A_SCWCOUNTr_GET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_GET
#define A_SCWCOUNTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_RESERVED0f_GET
#define A_SCWCOUNTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_RESERVED0f_SET
#define A_SCWCOUNTr_SCWSHIFTf_GET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SCWSHIFTf_GET
#define A_SCWCOUNTr_SCWSHIFTf_SET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SCWSHIFTf_SET
#define A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_GET
#define A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_SYNC_ACQD2_CWCOUNTf_SET
#define A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_GET
#define A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET BCMI_HYPERLITE_XGXS_A_SCWCOUNTr_COMMA_DETECT_CWCOUNTf_SET
#define READ_A_SCWCOUNTr BCMI_HYPERLITE_XGXS_READ_A_SCWCOUNTr
#define WRITE_A_SCWCOUNTr BCMI_HYPERLITE_XGXS_WRITE_A_SCWCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_SCWCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  A_ERRCOUNT
 * BLOCKS:   RX66
 * REGADDR:  0x81fe
 * DESC:     scw & K-code group error counters
 * SIZE:     32
 * FIELDS:
 *     KCODE66ERRCOUNT  
 *     SYNC66ERRCOUNT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr (0x0001f01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program A_ERRCOUNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_s {
	uint32_t v[1];
	uint32_t a_errcount[1];
	uint32_t _a_errcount;
} BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_t;

#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_CLR(r) (r).a_errcount[0] = 0
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SET(r,d) (r).a_errcount[0] = d
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_GET(r) (r).a_errcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SYNC66ERRCOUNTf_GET(r) ((((r).a_errcount[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SYNC66ERRCOUNTf_SET(r,f) (r).a_errcount[0]=(((r).a_errcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_KCODE66ERRCOUNTf_GET(r) (((r).a_errcount[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_KCODE66ERRCOUNTf_SET(r,f) (r).a_errcount[0]=(((r).a_errcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access A_ERRCOUNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_A_ERRCOUNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_A_ERRCOUNTr,(_r._a_errcount))
#define BCMI_HYPERLITE_XGXS_WRITE_A_ERRCOUNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_A_ERRCOUNTr,(_r._a_errcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define A_ERRCOUNTr BCMI_HYPERLITE_XGXS_A_ERRCOUNTr
#define A_ERRCOUNTr_SIZE BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_t A_ERRCOUNTr_t;
#define A_ERRCOUNTr_CLR BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_CLR
#define A_ERRCOUNTr_SET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SET
#define A_ERRCOUNTr_GET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_GET
#define A_ERRCOUNTr_SYNC66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SYNC66ERRCOUNTf_GET
#define A_ERRCOUNTr_SYNC66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_SYNC66ERRCOUNTf_SET
#define A_ERRCOUNTr_KCODE66ERRCOUNTf_GET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_KCODE66ERRCOUNTf_GET
#define A_ERRCOUNTr_KCODE66ERRCOUNTf_SET BCMI_HYPERLITE_XGXS_A_ERRCOUNTr_KCODE66ERRCOUNTf_SET
#define READ_A_ERRCOUNTr BCMI_HYPERLITE_XGXS_READ_A_ERRCOUNTr
#define WRITE_A_ERRCOUNTr BCMI_HYPERLITE_XGXS_WRITE_A_ERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_A_ERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_CTRL0
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8210
 * DESC:     CDR Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_EN 
 *     CDR_FREQ_EN      
 *     CDR_FREQ_UPD_EN  
 *     CDR_INTEG_REG_CLR 
 *     CDR_PHASE_ERR_FRZ 
 *     CDROS_ZERO_POLARITY 
 *     CDROS_PEAK_POLARITY 
 *     CDROS_PHASE_SAT_CTRL 
 *     CDROS_FALLING_EDGE 
 *     CDROS_RISING_EDGE 
 *     CDRBR_THIRD_VEC_EN 
 *     CDRBR_POLARITY   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r (0x00021010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program CDR_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_CTRL0r_s {
	uint32_t v[1];
	uint32_t cdr_ctrl0[1];
	uint32_t _cdr_ctrl0;
} BCMI_HYPERLITE_XGXS_CDR_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CLR(r) (r).cdr_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_SET(r,d) (r).cdr_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_GET(r) (r).cdr_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).cdr_ctrl0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_POLARITYf_GET(r) ((((r).cdr_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_POLARITYf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET(r) ((((r).cdr_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_RISING_EDGEf_GET(r) ((((r).cdr_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_RISING_EDGEf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET(r) ((((r).cdr_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET(r) ((((r).cdr_ctrl0[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET(r) ((((r).cdr_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET(r) ((((r).cdr_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).cdr_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).cdr_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET(r) ((((r).cdr_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_ENf_GET(r) ((((r).cdr_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_ENf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) (((r).cdr_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).cdr_ctrl0[0]=(((r).cdr_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CDR_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL0r,(_r._cdr_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL0r,(_r._cdr_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_CTRL0r BCMI_HYPERLITE_XGXS_CDR_CTRL0r
#define CDR_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_CDR_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_CTRL0r_t CDR_CTRL0r_t;
#define CDR_CTRL0r_CLR BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CLR
#define CDR_CTRL0r_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_SET
#define CDR_CTRL0r_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_GET
#define CDR_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET
#define CDR_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET
#define CDR_CTRL0r_CDRBR_POLARITYf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_POLARITYf_GET
#define CDR_CTRL0r_CDRBR_POLARITYf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_POLARITYf_SET
#define CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET
#define CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET
#define CDR_CTRL0r_CDROS_RISING_EDGEf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_RISING_EDGEf_GET
#define CDR_CTRL0r_CDROS_RISING_EDGEf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_RISING_EDGEf_SET
#define CDR_CTRL0r_CDROS_FALLING_EDGEf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET
#define CDR_CTRL0r_CDROS_FALLING_EDGEf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET
#define CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET
#define CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET
#define CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET
#define CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET
#define CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET
#define CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET
#define CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET
#define CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET
#define CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET
#define CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET
#define CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET
#define CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET
#define CDR_CTRL0r_CDR_FREQ_ENf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_ENf_GET
#define CDR_CTRL0r_CDR_FREQ_ENf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_ENf_SET
#define CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define READ_CDR_CTRL0r BCMI_HYPERLITE_XGXS_READ_CDR_CTRL0r
#define WRITE_CDR_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_CTRL1
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8211
 * DESC:     CDR Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r (0x00021011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program CDR_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_CTRL1r_s {
	uint32_t v[1];
	uint32_t cdr_ctrl1[1];
	uint32_t _cdr_ctrl1;
} BCMI_HYPERLITE_XGXS_CDR_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CLR(r) (r).cdr_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_SET(r,d) (r).cdr_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_GET(r) (r).cdr_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) (((r).cdr_ctrl1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).cdr_ctrl1[0]=(((r).cdr_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CDR_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL1r,(_r._cdr_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL1r,(_r._cdr_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_CTRL1r BCMI_HYPERLITE_XGXS_CDR_CTRL1r
#define CDR_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_CDR_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_CTRL1r_t CDR_CTRL1r_t;
#define CDR_CTRL1r_CLR BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CLR
#define CDR_CTRL1r_SET BCMI_HYPERLITE_XGXS_CDR_CTRL1r_SET
#define CDR_CTRL1r_GET BCMI_HYPERLITE_XGXS_CDR_CTRL1r_GET
#define CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_CDR_CTRL1r BCMI_HYPERLITE_XGXS_READ_CDR_CTRL1r
#define WRITE_CDR_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_CTRL2
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8212
 * DESC:     CDR Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_PHASE_ERR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r (0x00021012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program CDR_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_CTRL2r_s {
	uint32_t v[1];
	uint32_t cdr_ctrl2[1];
	uint32_t _cdr_ctrl2;
} BCMI_HYPERLITE_XGXS_CDR_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CLR(r) (r).cdr_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_SET(r,d) (r).cdr_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_GET(r) (r).cdr_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).cdr_ctrl2[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).cdr_ctrl2[0]=(((r).cdr_ctrl2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET(r) (((r).cdr_ctrl2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET(r,f) (r).cdr_ctrl2[0]=(((r).cdr_ctrl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access CDR_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL2r,(_r._cdr_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_CTRL2r,(_r._cdr_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_CTRL2r BCMI_HYPERLITE_XGXS_CDR_CTRL2r
#define CDR_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_CDR_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_CTRL2r_t CDR_CTRL2r_t;
#define CDR_CTRL2r_CLR BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CLR
#define CDR_CTRL2r_SET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_SET
#define CDR_CTRL2r_GET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_GET
#define CDR_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET
#define CDR_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET
#define CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET
#define CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET BCMI_HYPERLITE_XGXS_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET
#define READ_CDR_CTRL2r BCMI_HYPERLITE_XGXS_READ_CDR_CTRL2r
#define WRITE_CDR_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_CDR_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PI_CTRL0
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8213
 * DESC:     Phase Interpolator Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     PI_PHASE_STEP_MULT 
 *     PI_PHASE_DELTA   
 *     PI_PHASE_STROBE  
 *     PI_PHASE_INC     
 *     PI_PHASE_DEC     
 *     PI_CLK90_OFFSET_OVERRIDE 
 *     PI_DUAL_PHASE_OVERRIDE 
 *     PI_PHASE_INVERT  
 *     RESERVED_FOR_ECO0 
 *     INTRP_TMUXSELECT 
 *     PI_CW_RST        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r (0x00021013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program PI_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PI_CTRL0r_s {
	uint32_t v[1];
	uint32_t pi_ctrl0[1];
	uint32_t _pi_ctrl0;
} BCMI_HYPERLITE_XGXS_PI_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_CLR(r) (r).pi_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_SET(r,d) (r).pi_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_GET(r) (r).pi_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CW_RSTf_GET(r) ((((r).pi_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CW_RSTf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_INTRP_TMUXSELECTf_GET(r) ((((r).pi_ctrl0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_INTRP_TMUXSELECTf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).pi_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INVERTf_GET(r) ((((r).pi_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INVERTf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET(r) ((((r).pi_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET(r) ((((r).pi_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DECf_GET(r) ((((r).pi_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DECf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INCf_GET(r) ((((r).pi_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INCf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STROBEf_GET(r) ((((r).pi_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STROBEf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DELTAf_GET(r) ((((r).pi_ctrl0[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DELTAf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET(r) (((r).pi_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET(r,f) (r).pi_ctrl0[0]=(((r).pi_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PI_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PI_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PI_CTRL0r,(_r._pi_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_PI_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PI_CTRL0r,(_r._pi_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PI_CTRL0r BCMI_HYPERLITE_XGXS_PI_CTRL0r
#define PI_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_PI_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_PI_CTRL0r_t PI_CTRL0r_t;
#define PI_CTRL0r_CLR BCMI_HYPERLITE_XGXS_PI_CTRL0r_CLR
#define PI_CTRL0r_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_SET
#define PI_CTRL0r_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_GET
#define PI_CTRL0r_PI_CW_RSTf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CW_RSTf_GET
#define PI_CTRL0r_PI_CW_RSTf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CW_RSTf_SET
#define PI_CTRL0r_INTRP_TMUXSELECTf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_INTRP_TMUXSELECTf_GET
#define PI_CTRL0r_INTRP_TMUXSELECTf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_INTRP_TMUXSELECTf_SET
#define PI_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_RESERVED_FOR_ECO0f_GET
#define PI_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_RESERVED_FOR_ECO0f_SET
#define PI_CTRL0r_PI_PHASE_INVERTf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INVERTf_GET
#define PI_CTRL0r_PI_PHASE_INVERTf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INVERTf_SET
#define PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET
#define PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET
#define PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET
#define PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET
#define PI_CTRL0r_PI_PHASE_DECf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DECf_GET
#define PI_CTRL0r_PI_PHASE_DECf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DECf_SET
#define PI_CTRL0r_PI_PHASE_INCf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INCf_GET
#define PI_CTRL0r_PI_PHASE_INCf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_INCf_SET
#define PI_CTRL0r_PI_PHASE_STROBEf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STROBEf_GET
#define PI_CTRL0r_PI_PHASE_STROBEf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STROBEf_SET
#define PI_CTRL0r_PI_PHASE_DELTAf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DELTAf_GET
#define PI_CTRL0r_PI_PHASE_DELTAf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_DELTAf_SET
#define PI_CTRL0r_PI_PHASE_STEP_MULTf_GET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET
#define PI_CTRL0r_PI_PHASE_STEP_MULTf_SET BCMI_HYPERLITE_XGXS_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET
#define READ_PI_CTRL0r BCMI_HYPERLITE_XGXS_READ_PI_CTRL0r
#define WRITE_PI_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_PI_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PI_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL0
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8214
 * DESC:     DFE VGA Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_VGA_CLKEN    
 *     TRNSUM_EN        
 *     SUM_M1ERR        
 *     TRNSUM_TAP0_ONLY 
 *     DFE_POLARITY     
 *     VGA_POLARITY     
 *     VGA_TIMER_CTRL   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r (0x00021014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl0[1];
	uint32_t _dfe_vga_ctrl0;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_CLR(r) (r).dfe_vga_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SET(r,d) (r).dfe_vga_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_GET(r) (r).dfe_vga_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_POLARITYf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_POLARITYf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_POLARITYf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_POLARITYf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SUM_M1ERRf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SUM_M1ERRf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_ENf_GET(r) ((((r).dfe_vga_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_ENf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET(r) (((r).dfe_vga_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET(r,f) (r).dfe_vga_ctrl0[0]=(((r).dfe_vga_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DFE_VGA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r,(_r._dfe_vga_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r,(_r._dfe_vga_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r
#define DFE_VGA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_t DFE_VGA_CTRL0r_t;
#define DFE_VGA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_CLR
#define DFE_VGA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SET
#define DFE_VGA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_GET
#define DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET
#define DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET
#define DFE_VGA_CTRL0r_VGA_POLARITYf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_POLARITYf_GET
#define DFE_VGA_CTRL0r_VGA_POLARITYf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_VGA_POLARITYf_SET
#define DFE_VGA_CTRL0r_DFE_POLARITYf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_POLARITYf_GET
#define DFE_VGA_CTRL0r_DFE_POLARITYf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_POLARITYf_SET
#define DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET
#define DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET
#define DFE_VGA_CTRL0r_SUM_M1ERRf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SUM_M1ERRf_GET
#define DFE_VGA_CTRL0r_SUM_M1ERRf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_SUM_M1ERRf_SET
#define DFE_VGA_CTRL0r_TRNSUM_ENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_ENf_GET
#define DFE_VGA_CTRL0r_TRNSUM_ENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_TRNSUM_ENf_SET
#define DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET
#define DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET
#define READ_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL0r
#define WRITE_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL1
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8215
 * DESC:     DFE VGA Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_WRITE_EN     
 *     VGA_WRITE_VAL    
 *     DFE_WRITE_EN     
 *     DFE_WRITE_VAL    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r (0x00021015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl1[1];
	uint32_t _dfe_vga_ctrl1;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_CLR(r) (r).dfe_vga_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_SET(r,d) (r).dfe_vga_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_GET(r) (r).dfe_vga_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl1[0]=(((r).dfe_vga_ctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET(r) ((((r).dfe_vga_ctrl1[0]) >> 7) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET(r,f) (r).dfe_vga_ctrl1[0]=(((r).dfe_vga_ctrl1[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET(r) ((((r).dfe_vga_ctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET(r,f) (r).dfe_vga_ctrl1[0]=(((r).dfe_vga_ctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET(r) ((((r).dfe_vga_ctrl1[0]) >> 1) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET(r,f) (r).dfe_vga_ctrl1[0]=(((r).dfe_vga_ctrl1[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET(r) (((r).dfe_vga_ctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET(r,f) (r).dfe_vga_ctrl1[0]=(((r).dfe_vga_ctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DFE_VGA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r,(_r._dfe_vga_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r,(_r._dfe_vga_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r
#define DFE_VGA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_t DFE_VGA_CTRL1r_t;
#define DFE_VGA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_CLR
#define DFE_VGA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_SET
#define DFE_VGA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_GET
#define DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET
#define DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET
#define DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET
#define DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET
#define DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET
#define DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET
#define DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET
#define DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET
#define READ_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL1r
#define WRITE_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL2
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8216
 * DESC:     DFE VGA Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_EN   
 *     TRNSUM_OTAP_EN   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r (0x00021016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl2[1];
	uint32_t _dfe_vga_ctrl2;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_CLR(r) (r).dfe_vga_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_SET(r,d) (r).dfe_vga_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_GET(r) (r).dfe_vga_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl2[0]=(((r).dfe_vga_ctrl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET(r) ((((r).dfe_vga_ctrl2[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET(r,f) (r).dfe_vga_ctrl2[0]=(((r).dfe_vga_ctrl2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET(r) (((r).dfe_vga_ctrl2[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET(r,f) (r).dfe_vga_ctrl2[0]=(((r).dfe_vga_ctrl2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DFE_VGA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r,(_r._dfe_vga_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r,(_r._dfe_vga_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r
#define DFE_VGA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_t DFE_VGA_CTRL2r_t;
#define DFE_VGA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_CLR
#define DFE_VGA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_SET
#define DFE_VGA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_GET
#define DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET
#define DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET
#define DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET
#define DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET
#define READ_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL2r
#define WRITE_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL3
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8217
 * DESC:     DFE VGA Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_SIGN 
 *     TRNSUM_OTAP_SIGN 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r (0x00021017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl3[1];
	uint32_t _dfe_vga_ctrl3;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_CLR(r) (r).dfe_vga_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_SET(r,d) (r).dfe_vga_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_GET(r) (r).dfe_vga_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl3[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl3[0]=(((r).dfe_vga_ctrl3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET(r) ((((r).dfe_vga_ctrl3[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET(r,f) (r).dfe_vga_ctrl3[0]=(((r).dfe_vga_ctrl3[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET(r) (((r).dfe_vga_ctrl3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET(r,f) (r).dfe_vga_ctrl3[0]=(((r).dfe_vga_ctrl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DFE_VGA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r,(_r._dfe_vga_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r,(_r._dfe_vga_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r
#define DFE_VGA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_t DFE_VGA_CTRL3r_t;
#define DFE_VGA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_CLR
#define DFE_VGA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_SET
#define DFE_VGA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_GET
#define DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET
#define DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET
#define DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET
#define DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET
#define READ_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL3r
#define WRITE_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL4
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8218
 * DESC:     DFE VGA Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_COR_SEL_O    
 *     VGA_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r (0x00021018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl4[1];
	uint32_t _dfe_vga_ctrl4;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_CLR(r) (r).dfe_vga_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_SET(r,d) (r).dfe_vga_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_GET(r) (r).dfe_vga_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl4[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl4[0]=(((r).dfe_vga_ctrl4[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET(r) ((((r).dfe_vga_ctrl4[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET(r,f) (r).dfe_vga_ctrl4[0]=(((r).dfe_vga_ctrl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET(r) (((r).dfe_vga_ctrl4[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET(r,f) (r).dfe_vga_ctrl4[0]=(((r).dfe_vga_ctrl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DFE_VGA_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r,(_r._dfe_vga_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r,(_r._dfe_vga_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r
#define DFE_VGA_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_t DFE_VGA_CTRL4r_t;
#define DFE_VGA_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_CLR
#define DFE_VGA_CTRL4r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_SET
#define DFE_VGA_CTRL4r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_GET
#define DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET
#define DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET
#define DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET
#define DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET
#define READ_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL4r
#define WRITE_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_CTRL5
 * BLOCKS:   DSC1B0
 * REGADDR:  0x8219
 * DESC:     DFE VGA Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_COR_SEL_O    
 *     DFE_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r (0x00021019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_s {
	uint32_t v[1];
	uint32_t dfe_vga_ctrl5[1];
	uint32_t _dfe_vga_ctrl5;
} BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_CLR(r) (r).dfe_vga_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_SET(r,d) (r).dfe_vga_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_GET(r) (r).dfe_vga_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_ctrl5[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_ctrl5[0]=(((r).dfe_vga_ctrl5[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET(r) ((((r).dfe_vga_ctrl5[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET(r,f) (r).dfe_vga_ctrl5[0]=(((r).dfe_vga_ctrl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET(r) (((r).dfe_vga_ctrl5[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET(r,f) (r).dfe_vga_ctrl5[0]=(((r).dfe_vga_ctrl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DFE_VGA_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r,(_r._dfe_vga_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r,(_r._dfe_vga_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r
#define DFE_VGA_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_t DFE_VGA_CTRL5r_t;
#define DFE_VGA_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_CLR
#define DFE_VGA_CTRL5r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_SET
#define DFE_VGA_CTRL5r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_GET
#define DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET
#define DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET
#define DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET
#define DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET
#define READ_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_CTRL5r
#define WRITE_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_ANA_CTRL0
 * BLOCKS:   DSC1B0
 * REGADDR:  0x821a
 * DESC:     DSC Analog Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     M1_ODD_CTRL      
 *     D_ODD_CTRL       
 *     P1_ODD_CTRL      
 *     FORCE_ODD_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r (0x0002101a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_ANA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc_ana_ctrl0[1];
	uint32_t _dsc_ana_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_CLR(r) (r).dsc_ana_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_SET(r,d) (r).dsc_ana_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_GET(r) (r).dsc_ana_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET(r) ((((r).dsc_ana_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl0[0]=(((r).dsc_ana_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET(r) ((((r).dsc_ana_ctrl0[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl0[0]=(((r).dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET(r) ((((r).dsc_ana_ctrl0[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl0[0]=(((r).dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET(r) (((r).dsc_ana_ctrl0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl0[0]=(((r).dsc_ana_ctrl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC_ANA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r,(_r._dsc_ana_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r,(_r._dsc_ana_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r
#define DSC_ANA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_t DSC_ANA_CTRL0r_t;
#define DSC_ANA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_CLR
#define DSC_ANA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_SET
#define DSC_ANA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_GET
#define DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET
#define DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET
#define DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET
#define DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET
#define DSC_ANA_CTRL0r_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET
#define DSC_ANA_CTRL0r_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET
#define DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET
#define DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET
#define READ_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL0r
#define WRITE_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_ANA_CTRL1
 * BLOCKS:   DSC1B0
 * REGADDR:  0x821b
 * DESC:     DSC Analog Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     M1_EVN_CTRL      
 *     D_EVN_CTRL       
 *     P1_EVN_CTRL      
 *     FORCE_EVN_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r (0x0002101b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC_ANA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc_ana_ctrl1[1];
	uint32_t _dsc_ana_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_CLR(r) (r).dsc_ana_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_SET(r,d) (r).dsc_ana_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_GET(r) (r).dsc_ana_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl1[0]=(((r).dsc_ana_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl1[0]=(((r).dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl1[0]=(((r).dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET(r) (((r).dsc_ana_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl1[0]=(((r).dsc_ana_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC_ANA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r,(_r._dsc_ana_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r,(_r._dsc_ana_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r
#define DSC_ANA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_t DSC_ANA_CTRL1r_t;
#define DSC_ANA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_CLR
#define DSC_ANA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_SET
#define DSC_ANA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_GET
#define DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET
#define DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET
#define DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET
#define DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET
#define DSC_ANA_CTRL1r_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET
#define DSC_ANA_CTRL1r_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET
#define DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET
#define DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET
#define READ_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL1r
#define WRITE_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_ANA_CTRL2
 * BLOCKS:   DSC1B0
 * REGADDR:  0x821c
 * DESC:     DSC Analog Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     RX_PF_CTRL       
 *     FORCE_RX_PF_CTRL 
 *     RX_THRESH_SEL    
 *     RX_M1_THRESH_ZERO 
 *     FORCE_RX_M1_THRESH_ZERO 
 *     OSR_PD_CH_P1     
 *     OSR_EN_DFE_CLK   
 *     OSR_EN_HGAIN     
 *     OSR_OFFSET_PD    
 *     BR_PD_CH_P1      
 *     BR_EN_DFE_CLK    
 *     BR_EN_HGAIN      
 *     BR_OFFSET_PD     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r (0x0002101c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC_ANA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc_ana_ctrl2[1];
	uint32_t _dsc_ana_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_CLR(r) (r).dsc_ana_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_SET(r,d) (r).dsc_ana_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_GET(r) (r).dsc_ana_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET(r) ((((r).dsc_ana_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET(r) (((r).dsc_ana_ctrl2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET(r,f) (r).dsc_ana_ctrl2[0]=(((r).dsc_ana_ctrl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC_ANA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r,(_r._dsc_ana_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r,(_r._dsc_ana_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r
#define DSC_ANA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_t DSC_ANA_CTRL2r_t;
#define DSC_ANA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_CLR
#define DSC_ANA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_SET
#define DSC_ANA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_GET
#define DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET
#define DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET
#define DSC_ANA_CTRL2r_BR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET
#define DSC_ANA_CTRL2r_BR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET
#define DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET
#define DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET
#define DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET
#define DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET
#define DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET
#define DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET
#define DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET
#define DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET
#define DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET
#define DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET
#define DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET
#define DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET
#define DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET
#define DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET
#define DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET
#define DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET
#define DSC_ANA_CTRL2r_RX_THRESH_SELf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET
#define DSC_ANA_CTRL2r_RX_THRESH_SELf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET
#define DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET
#define DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET
#define DSC_ANA_CTRL2r_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET
#define DSC_ANA_CTRL2r_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET
#define READ_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL2r
#define WRITE_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_100FX_CTRL
 * BLOCKS:   DSC1B0
 * REGADDR:  0x821d
 * DESC:     DSC 100FX Control Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_100FX 
 *     CDROS_BWSEL_INTEG_100FX 
 *     PI_PHASE_STEP_MULT_100FX 
 *     PHASE_SAT_CTRL_100FX 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr (0x0002101d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program DSC_100FX_CTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_s {
	uint32_t v[1];
	uint32_t dsc_100fx_ctrl[1];
	uint32_t _dsc_100fx_ctrl;
} BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_t;

#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CLR(r) (r).dsc_100fx_ctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_SET(r,d) (r).dsc_100fx_ctrl[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_GET(r) (r).dsc_100fx_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc_100fx_ctrl[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc_100fx_ctrl[0]=(((r).dsc_100fx_ctrl[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET(r) ((((r).dsc_100fx_ctrl[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET(r,f) (r).dsc_100fx_ctrl[0]=(((r).dsc_100fx_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET(r) ((((r).dsc_100fx_ctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET(r,f) (r).dsc_100fx_ctrl[0]=(((r).dsc_100fx_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET(r) ((((r).dsc_100fx_ctrl[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET(r,f) (r).dsc_100fx_ctrl[0]=(((r).dsc_100fx_ctrl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET(r) (((r).dsc_100fx_ctrl[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET(r,f) (r).dsc_100fx_ctrl[0]=(((r).dsc_100fx_ctrl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC_100FX_CTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr,(_r._dsc_100fx_ctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr,(_r._dsc_100fx_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr
#define DSC_100FX_CTRLr_SIZE BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_t DSC_100FX_CTRLr_t;
#define DSC_100FX_CTRLr_CLR BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CLR
#define DSC_100FX_CTRLr_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_SET
#define DSC_100FX_CTRLr_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_GET
#define DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET
#define DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET
#define DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET
#define DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET
#define DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET
#define DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET
#define DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET
#define DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET
#define DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET
#define DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET
#define READ_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_READ_DSC_100FX_CTRLr
#define WRITE_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_WRITE_DSC_100FX_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_100FX_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_ANA_CTRL3
 * BLOCKS:   DSC1B0
 * REGADDR:  0x821e
 * DESC:     DSC Analog Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     FORCE_M1_ODD_CTRL 
 *     FORCE_D_ODD_CTRL 
 *     FORCE_P1_ODD_CTRL 
 *     FORCE_M1_EVN_CTRL 
 *     FORCE_D_EVN_CTRL 
 *     FORCE_P1_EVN_CTRL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r (0x0002101e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC_ANA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc_ana_ctrl3[1];
	uint32_t _dsc_ana_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_CLR(r) (r).dsc_ana_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_SET(r,d) (r).dsc_ana_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_GET(r) (r).dsc_ana_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET(r) ((((r).dsc_ana_ctrl3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET(r) (((r).dsc_ana_ctrl3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET(r,f) (r).dsc_ana_ctrl3[0]=(((r).dsc_ana_ctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC_ANA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r,(_r._dsc_ana_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r,(_r._dsc_ana_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r
#define DSC_ANA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_t DSC_ANA_CTRL3r_t;
#define DSC_ANA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_CLR
#define DSC_ANA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_SET
#define DSC_ANA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_GET
#define DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET
#define DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET
#define DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET
#define DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET
#define DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET
#define DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET
#define DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET
#define READ_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC_ANA_CTRL3r
#define WRITE_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC_ANA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_ANA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_CDR_CTRL0
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8220
 * DESC:     CDR Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_EN 
 *     CDR_FREQ_EN      
 *     CDR_FREQ_UPD_EN  
 *     CDR_INTEG_REG_CLR 
 *     CDR_PHASE_ERR_FRZ 
 *     CDROS_ZERO_POLARITY 
 *     CDROS_PEAK_POLARITY 
 *     CDROS_PHASE_SAT_CTRL 
 *     CDROS_FALLING_EDGE 
 *     CDROS_RISING_EDGE 
 *     CDRBR_THIRD_VEC_EN 
 *     CDRBR_POLARITY   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r (0x00022010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_CDR_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b1_cdr_ctrl0[1];
	uint32_t _dsc1b1_cdr_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CLR(r) (r).dsc1b1_cdr_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_SET(r,d) (r).dsc1b1_cdr_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_GET(r) (r).dsc1b1_cdr_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_GET(r) ((((r).dsc1b1_cdr_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) (((r).dsc1b1_cdr_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc1b1_cdr_ctrl0[0]=(((r).dsc1b1_cdr_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B1_CDR_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r,(_r._dsc1b1_cdr_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r,(_r._dsc1b1_cdr_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_CDR_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r
#define DSC1B1_CDR_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_t DSC1B1_CDR_CTRL0r_t;
#define DSC1B1_CDR_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CLR
#define DSC1B1_CDR_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_SET
#define DSC1B1_CDR_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_GET
#define DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_GET
#define DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_POLARITYf_SET
#define DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET
#define DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET
#define DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_GET
#define DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_RISING_EDGEf_SET
#define DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET
#define DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET
#define DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET
#define DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET
#define DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET
#define DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET
#define DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET
#define DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET
#define DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET
#define DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET
#define DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET
#define DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_GET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_ENf_SET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define READ_DSC1B1_CDR_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL0r
#define WRITE_DSC1B1_CDR_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_CDR_CTRL1
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8221
 * DESC:     CDR Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r (0x00022011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_CDR_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b1_cdr_ctrl1[1];
	uint32_t _dsc1b1_cdr_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CLR(r) (r).dsc1b1_cdr_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_SET(r,d) (r).dsc1b1_cdr_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_GET(r) (r).dsc1b1_cdr_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) (((r).dsc1b1_cdr_ctrl1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc1b1_cdr_ctrl1[0]=(((r).dsc1b1_cdr_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC1B1_CDR_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r,(_r._dsc1b1_cdr_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r,(_r._dsc1b1_cdr_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_CDR_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r
#define DSC1B1_CDR_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_t DSC1B1_CDR_CTRL1r_t;
#define DSC1B1_CDR_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CLR
#define DSC1B1_CDR_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_SET
#define DSC1B1_CDR_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_GET
#define DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC1B1_CDR_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL1r
#define WRITE_DSC1B1_CDR_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_CDR_CTRL2
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8222
 * DESC:     CDR Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_PHASE_ERR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r (0x00022012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_CDR_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b1_cdr_ctrl2[1];
	uint32_t _dsc1b1_cdr_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CLR(r) (r).dsc1b1_cdr_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_SET(r,d) (r).dsc1b1_cdr_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_GET(r) (r).dsc1b1_cdr_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_cdr_ctrl2[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_cdr_ctrl2[0]=(((r).dsc1b1_cdr_ctrl2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET(r) (((r).dsc1b1_cdr_ctrl2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc1b1_cdr_ctrl2[0]=(((r).dsc1b1_cdr_ctrl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC1B1_CDR_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r,(_r._dsc1b1_cdr_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r,(_r._dsc1b1_cdr_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_CDR_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r
#define DSC1B1_CDR_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_t DSC1B1_CDR_CTRL2r_t;
#define DSC1B1_CDR_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CLR
#define DSC1B1_CDR_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_SET
#define DSC1B1_CDR_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_GET
#define DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET
#define DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET
#define READ_DSC1B1_CDR_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B1_CDR_CTRL2r
#define WRITE_DSC1B1_CDR_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_CDR_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_CDR_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_PI_CTRL0
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8223
 * DESC:     Phase Interpolator Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     PI_PHASE_STEP_MULT 
 *     PI_PHASE_DELTA   
 *     PI_PHASE_STROBE  
 *     PI_PHASE_INC     
 *     PI_PHASE_DEC     
 *     PI_CLK90_OFFSET_OVERRIDE 
 *     PI_DUAL_PHASE_OVERRIDE 
 *     PI_PHASE_INVERT  
 *     RESERVED_FOR_ECO0 
 *     INTRP_TMUXSELECT 
 *     PI_CW_RST        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r (0x00022013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_PI_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b1_pi_ctrl0[1];
	uint32_t _dsc1b1_pi_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_CLR(r) (r).dsc1b1_pi_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_SET(r,d) (r).dsc1b1_pi_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_GET(r) (r).dsc1b1_pi_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CW_RSTf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CW_RSTf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DECf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DECf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INCf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INCf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_GET(r) ((((r).dsc1b1_pi_ctrl0[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET(r) (((r).dsc1b1_pi_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET(r,f) (r).dsc1b1_pi_ctrl0[0]=(((r).dsc1b1_pi_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B1_PI_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_PI_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r,(_r._dsc1b1_pi_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_PI_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r,(_r._dsc1b1_pi_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_PI_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r
#define DSC1B1_PI_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_t DSC1B1_PI_CTRL0r_t;
#define DSC1B1_PI_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_CLR
#define DSC1B1_PI_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_SET
#define DSC1B1_PI_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_GET
#define DSC1B1_PI_CTRL0r_PI_CW_RSTf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CW_RSTf_GET
#define DSC1B1_PI_CTRL0r_PI_CW_RSTf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CW_RSTf_SET
#define DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_GET
#define DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_INTRP_TMUXSELECTf_SET
#define DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INVERTf_SET
#define DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET
#define DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET
#define DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET
#define DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_DECf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DECf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_DECf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DECf_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_INCf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INCf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_INCf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_INCf_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STROBEf_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_DELTAf_SET
#define DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET
#define DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET
#define READ_DSC1B1_PI_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B1_PI_CTRL0r
#define WRITE_DSC1B1_PI_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_PI_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_PI_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL0
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8224
 * DESC:     DFE VGA Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_VGA_CLKEN    
 *     TRNSUM_EN        
 *     SUM_M1ERR        
 *     TRNSUM_TAP0_ONLY 
 *     DFE_POLARITY     
 *     VGA_POLARITY     
 *     VGA_TIMER_CTRL   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r (0x00022014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl0[1];
	uint32_t _dsc1b1_dfe_vga_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_CLR(r) (r).dsc1b1_dfe_vga_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_GET(r) (r).dsc1b1_dfe_vga_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET(r) (((r).dsc1b1_dfe_vga_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl0[0]=(((r).dsc1b1_dfe_vga_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r,(_r._dsc1b1_dfe_vga_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r,(_r._dsc1b1_dfe_vga_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r
#define DSC1B1_DFE_VGA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_t DSC1B1_DFE_VGA_CTRL0r_t;
#define DSC1B1_DFE_VGA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_CLR
#define DSC1B1_DFE_VGA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SET
#define DSC1B1_DFE_VGA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_GET
#define DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET
#define DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET
#define DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_GET
#define DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_VGA_POLARITYf_SET
#define DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_GET
#define DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_POLARITYf_SET
#define DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET
#define DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET
#define DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_GET
#define DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_SUM_M1ERRf_SET
#define DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_GET
#define DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_TRNSUM_ENf_SET
#define DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET
#define DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET
#define READ_DSC1B1_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL0r
#define WRITE_DSC1B1_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL1
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8225
 * DESC:     DFE VGA Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_WRITE_EN     
 *     VGA_WRITE_VAL    
 *     DFE_WRITE_EN     
 *     DFE_WRITE_VAL    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r (0x00022015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl1[1];
	uint32_t _dsc1b1_dfe_vga_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_CLR(r) (r).dsc1b1_dfe_vga_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_GET(r) (r).dsc1b1_dfe_vga_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl1[0]=(((r).dsc1b1_dfe_vga_ctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl1[0]) >> 7) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl1[0]=(((r).dsc1b1_dfe_vga_ctrl1[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl1[0]=(((r).dsc1b1_dfe_vga_ctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl1[0]) >> 1) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl1[0]=(((r).dsc1b1_dfe_vga_ctrl1[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET(r) (((r).dsc1b1_dfe_vga_ctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl1[0]=(((r).dsc1b1_dfe_vga_ctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r,(_r._dsc1b1_dfe_vga_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r,(_r._dsc1b1_dfe_vga_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r
#define DSC1B1_DFE_VGA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_t DSC1B1_DFE_VGA_CTRL1r_t;
#define DSC1B1_DFE_VGA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_CLR
#define DSC1B1_DFE_VGA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_SET
#define DSC1B1_DFE_VGA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_GET
#define DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET
#define DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET
#define DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET
#define DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET
#define DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET
#define DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET
#define DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET
#define DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET
#define READ_DSC1B1_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL1r
#define WRITE_DSC1B1_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL2
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8226
 * DESC:     DFE VGA Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_EN   
 *     TRNSUM_OTAP_EN   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r (0x00022016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl2[1];
	uint32_t _dsc1b1_dfe_vga_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_CLR(r) (r).dsc1b1_dfe_vga_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_GET(r) (r).dsc1b1_dfe_vga_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl2[0]=(((r).dsc1b1_dfe_vga_ctrl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl2[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl2[0]=(((r).dsc1b1_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET(r) (((r).dsc1b1_dfe_vga_ctrl2[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl2[0]=(((r).dsc1b1_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r,(_r._dsc1b1_dfe_vga_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r,(_r._dsc1b1_dfe_vga_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r
#define DSC1B1_DFE_VGA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_t DSC1B1_DFE_VGA_CTRL2r_t;
#define DSC1B1_DFE_VGA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_CLR
#define DSC1B1_DFE_VGA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_SET
#define DSC1B1_DFE_VGA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_GET
#define DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET
#define DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET
#define DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET
#define DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET
#define READ_DSC1B1_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL2r
#define WRITE_DSC1B1_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL3
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8227
 * DESC:     DFE VGA Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_SIGN 
 *     TRNSUM_OTAP_SIGN 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r (0x00022017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl3[1];
	uint32_t _dsc1b1_dfe_vga_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_CLR(r) (r).dsc1b1_dfe_vga_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_GET(r) (r).dsc1b1_dfe_vga_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl3[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl3[0]=(((r).dsc1b1_dfe_vga_ctrl3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET(r) ((((r).dsc1b1_dfe_vga_ctrl3[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl3[0]=(((r).dsc1b1_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET(r) (((r).dsc1b1_dfe_vga_ctrl3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET(r,f) (r).dsc1b1_dfe_vga_ctrl3[0]=(((r).dsc1b1_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r,(_r._dsc1b1_dfe_vga_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r,(_r._dsc1b1_dfe_vga_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r
#define DSC1B1_DFE_VGA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_t DSC1B1_DFE_VGA_CTRL3r_t;
#define DSC1B1_DFE_VGA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_CLR
#define DSC1B1_DFE_VGA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_SET
#define DSC1B1_DFE_VGA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_GET
#define DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET
#define DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET
#define DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET
#define DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET
#define READ_DSC1B1_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL3r
#define WRITE_DSC1B1_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL4
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8228
 * DESC:     DFE VGA Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_COR_SEL_O    
 *     VGA_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r (0x00022018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl4[1];
	uint32_t _dsc1b1_dfe_vga_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_CLR(r) (r).dsc1b1_dfe_vga_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_GET(r) (r).dsc1b1_dfe_vga_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl4[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl4[0]=(((r).dsc1b1_dfe_vga_ctrl4[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET(r) ((((r).dsc1b1_dfe_vga_ctrl4[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET(r,f) (r).dsc1b1_dfe_vga_ctrl4[0]=(((r).dsc1b1_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET(r) (((r).dsc1b1_dfe_vga_ctrl4[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET(r,f) (r).dsc1b1_dfe_vga_ctrl4[0]=(((r).dsc1b1_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r,(_r._dsc1b1_dfe_vga_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r,(_r._dsc1b1_dfe_vga_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r
#define DSC1B1_DFE_VGA_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_t DSC1B1_DFE_VGA_CTRL4r_t;
#define DSC1B1_DFE_VGA_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_CLR
#define DSC1B1_DFE_VGA_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_SET
#define DSC1B1_DFE_VGA_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_GET
#define DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET
#define DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET
#define DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET
#define DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET
#define READ_DSC1B1_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL4r
#define WRITE_DSC1B1_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DFE_VGA_CTRL5
 * BLOCKS:   DSC1B1
 * REGADDR:  0x8229
 * DESC:     DFE VGA Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_COR_SEL_O    
 *     DFE_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r (0x00022019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DFE_VGA_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dfe_vga_ctrl5[1];
	uint32_t _dsc1b1_dfe_vga_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_CLR(r) (r).dsc1b1_dfe_vga_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_SET(r,d) (r).dsc1b1_dfe_vga_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_GET(r) (r).dsc1b1_dfe_vga_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dfe_vga_ctrl5[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dfe_vga_ctrl5[0]=(((r).dsc1b1_dfe_vga_ctrl5[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET(r) ((((r).dsc1b1_dfe_vga_ctrl5[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET(r,f) (r).dsc1b1_dfe_vga_ctrl5[0]=(((r).dsc1b1_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET(r) (((r).dsc1b1_dfe_vga_ctrl5[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET(r,f) (r).dsc1b1_dfe_vga_ctrl5[0]=(((r).dsc1b1_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B1_DFE_VGA_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r,(_r._dsc1b1_dfe_vga_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r,(_r._dsc1b1_dfe_vga_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r
#define DSC1B1_DFE_VGA_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_t DSC1B1_DFE_VGA_CTRL5r_t;
#define DSC1B1_DFE_VGA_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_CLR
#define DSC1B1_DFE_VGA_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_SET
#define DSC1B1_DFE_VGA_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_GET
#define DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET
#define DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET
#define DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET
#define DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET
#define READ_DSC1B1_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DFE_VGA_CTRL5r
#define WRITE_DSC1B1_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DFE_VGA_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DFE_VGA_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DSC_ANA_CTRL0
 * BLOCKS:   DSC1B1
 * REGADDR:  0x822a
 * DESC:     DSC Analog Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     M1_ODD_CTRL      
 *     D_ODD_CTRL       
 *     P1_ODD_CTRL      
 *     FORCE_ODD_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r (0x0002201a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DSC_ANA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dsc_ana_ctrl0[1];
	uint32_t _dsc1b1_dsc_ana_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_CLR(r) (r).dsc1b1_dsc_ana_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_SET(r,d) (r).dsc1b1_dsc_ana_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_GET(r) (r).dsc1b1_dsc_ana_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl0[0]=(((r).dsc1b1_dsc_ana_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl0[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl0[0]=(((r).dsc1b1_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl0[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl0[0]=(((r).dsc1b1_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET(r) (((r).dsc1b1_dsc_ana_ctrl0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl0[0]=(((r).dsc1b1_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B1_DSC_ANA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r,(_r._dsc1b1_dsc_ana_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r,(_r._dsc1b1_dsc_ana_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r
#define DSC1B1_DSC_ANA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_t DSC1B1_DSC_ANA_CTRL0r_t;
#define DSC1B1_DSC_ANA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_CLR
#define DSC1B1_DSC_ANA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_SET
#define DSC1B1_DSC_ANA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_GET
#define DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET
#define READ_DSC1B1_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL0r
#define WRITE_DSC1B1_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DSC_ANA_CTRL1
 * BLOCKS:   DSC1B1
 * REGADDR:  0x822b
 * DESC:     DSC Analog Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     M1_EVN_CTRL      
 *     D_EVN_CTRL       
 *     P1_EVN_CTRL      
 *     FORCE_EVN_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r (0x0002201b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DSC_ANA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dsc_ana_ctrl1[1];
	uint32_t _dsc1b1_dsc_ana_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_CLR(r) (r).dsc1b1_dsc_ana_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_SET(r,d) (r).dsc1b1_dsc_ana_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_GET(r) (r).dsc1b1_dsc_ana_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl1[0]=(((r).dsc1b1_dsc_ana_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl1[0]=(((r).dsc1b1_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl1[0]=(((r).dsc1b1_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET(r) (((r).dsc1b1_dsc_ana_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl1[0]=(((r).dsc1b1_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B1_DSC_ANA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r,(_r._dsc1b1_dsc_ana_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r,(_r._dsc1b1_dsc_ana_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r
#define DSC1B1_DSC_ANA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_t DSC1B1_DSC_ANA_CTRL1r_t;
#define DSC1B1_DSC_ANA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_CLR
#define DSC1B1_DSC_ANA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_SET
#define DSC1B1_DSC_ANA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_GET
#define DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET
#define READ_DSC1B1_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL1r
#define WRITE_DSC1B1_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DSC_ANA_CTRL2
 * BLOCKS:   DSC1B1
 * REGADDR:  0x822c
 * DESC:     DSC Analog Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     RX_PF_CTRL       
 *     FORCE_RX_PF_CTRL 
 *     RX_THRESH_SEL    
 *     RX_M1_THRESH_ZERO 
 *     FORCE_RX_M1_THRESH_ZERO 
 *     OSR_PD_CH_P1     
 *     OSR_EN_DFE_CLK   
 *     OSR_EN_HGAIN     
 *     OSR_OFFSET_PD    
 *     BR_PD_CH_P1      
 *     BR_EN_DFE_CLK    
 *     BR_EN_HGAIN      
 *     BR_OFFSET_PD     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r (0x0002201c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DSC_ANA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dsc_ana_ctrl2[1];
	uint32_t _dsc1b1_dsc_ana_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_CLR(r) (r).dsc1b1_dsc_ana_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_SET(r,d) (r).dsc1b1_dsc_ana_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_GET(r) (r).dsc1b1_dsc_ana_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET(r) (((r).dsc1b1_dsc_ana_ctrl2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl2[0]=(((r).dsc1b1_dsc_ana_ctrl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC1B1_DSC_ANA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r,(_r._dsc1b1_dsc_ana_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r,(_r._dsc1b1_dsc_ana_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r
#define DSC1B1_DSC_ANA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_t DSC1B1_DSC_ANA_CTRL2r_t;
#define DSC1B1_DSC_ANA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_CLR
#define DSC1B1_DSC_ANA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_SET
#define DSC1B1_DSC_ANA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_GET
#define DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET
#define DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET
#define DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET
#define DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET
#define DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET
#define DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET
#define DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET
#define DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET
#define DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET
#define DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET
#define DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET
#define DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET
#define DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET
#define DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET
#define DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET
#define DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET
#define READ_DSC1B1_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL2r
#define WRITE_DSC1B1_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DSC_100FX_CTRL
 * BLOCKS:   DSC1B1
 * REGADDR:  0x822d
 * DESC:     DSC 100FX Control Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_100FX 
 *     CDROS_BWSEL_INTEG_100FX 
 *     PI_PHASE_STEP_MULT_100FX 
 *     PHASE_SAT_CTRL_100FX 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr (0x0002201d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DSC_100FX_CTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_s {
	uint32_t v[1];
	uint32_t dsc1b1_dsc_100fx_ctrl[1];
	uint32_t _dsc1b1_dsc_100fx_ctrl;
} BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CLR(r) (r).dsc1b1_dsc_100fx_ctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_SET(r,d) (r).dsc1b1_dsc_100fx_ctrl[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_GET(r) (r).dsc1b1_dsc_100fx_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dsc_100fx_ctrl[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dsc_100fx_ctrl[0]=(((r).dsc1b1_dsc_100fx_ctrl[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET(r) ((((r).dsc1b1_dsc_100fx_ctrl[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET(r,f) (r).dsc1b1_dsc_100fx_ctrl[0]=(((r).dsc1b1_dsc_100fx_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET(r) ((((r).dsc1b1_dsc_100fx_ctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET(r,f) (r).dsc1b1_dsc_100fx_ctrl[0]=(((r).dsc1b1_dsc_100fx_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET(r) ((((r).dsc1b1_dsc_100fx_ctrl[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET(r,f) (r).dsc1b1_dsc_100fx_ctrl[0]=(((r).dsc1b1_dsc_100fx_ctrl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET(r) (((r).dsc1b1_dsc_100fx_ctrl[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET(r,f) (r).dsc1b1_dsc_100fx_ctrl[0]=(((r).dsc1b1_dsc_100fx_ctrl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC1B1_DSC_100FX_CTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr,(_r._dsc1b1_dsc_100fx_ctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr,(_r._dsc1b1_dsc_100fx_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr
#define DSC1B1_DSC_100FX_CTRLr_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_t DSC1B1_DSC_100FX_CTRLr_t;
#define DSC1B1_DSC_100FX_CTRLr_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CLR
#define DSC1B1_DSC_100FX_CTRLr_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_SET
#define DSC1B1_DSC_100FX_CTRLr_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_GET
#define DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET
#define DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET
#define DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET
#define DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET
#define DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET
#define DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET
#define DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET
#define DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET
#define READ_DSC1B1_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_100FX_CTRLr
#define WRITE_DSC1B1_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_100FX_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DSC_100FX_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B1_DSC_ANA_CTRL3
 * BLOCKS:   DSC1B1
 * REGADDR:  0x822e
 * DESC:     DSC Analog Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     FORCE_M1_ODD_CTRL 
 *     FORCE_D_ODD_CTRL 
 *     FORCE_P1_ODD_CTRL 
 *     FORCE_M1_EVN_CTRL 
 *     FORCE_D_EVN_CTRL 
 *     FORCE_P1_EVN_CTRL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r (0x0002201e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B1_DSC_ANA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b1_dsc_ana_ctrl3[1];
	uint32_t _dsc1b1_dsc_ana_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_CLR(r) (r).dsc1b1_dsc_ana_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_SET(r,d) (r).dsc1b1_dsc_ana_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_GET(r) (r).dsc1b1_dsc_ana_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET(r) ((((r).dsc1b1_dsc_ana_ctrl3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET(r) (((r).dsc1b1_dsc_ana_ctrl3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET(r,f) (r).dsc1b1_dsc_ana_ctrl3[0]=(((r).dsc1b1_dsc_ana_ctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B1_DSC_ANA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r,(_r._dsc1b1_dsc_ana_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r,(_r._dsc1b1_dsc_ana_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B1_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r
#define DSC1B1_DSC_ANA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_t DSC1B1_DSC_ANA_CTRL3r_t;
#define DSC1B1_DSC_ANA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_CLR
#define DSC1B1_DSC_ANA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_SET
#define DSC1B1_DSC_ANA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_GET
#define DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET
#define DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET
#define READ_DSC1B1_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B1_DSC_ANA_CTRL3r
#define WRITE_DSC1B1_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B1_DSC_ANA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B1_DSC_ANA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_CDR_CTRL0
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8230
 * DESC:     CDR Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_EN 
 *     CDR_FREQ_EN      
 *     CDR_FREQ_UPD_EN  
 *     CDR_INTEG_REG_CLR 
 *     CDR_PHASE_ERR_FRZ 
 *     CDROS_ZERO_POLARITY 
 *     CDROS_PEAK_POLARITY 
 *     CDROS_PHASE_SAT_CTRL 
 *     CDROS_FALLING_EDGE 
 *     CDROS_RISING_EDGE 
 *     CDRBR_THIRD_VEC_EN 
 *     CDRBR_POLARITY   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r (0x00023010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_CDR_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b2_cdr_ctrl0[1];
	uint32_t _dsc1b2_cdr_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CLR(r) (r).dsc1b2_cdr_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_SET(r,d) (r).dsc1b2_cdr_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_GET(r) (r).dsc1b2_cdr_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_GET(r) ((((r).dsc1b2_cdr_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) (((r).dsc1b2_cdr_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc1b2_cdr_ctrl0[0]=(((r).dsc1b2_cdr_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B2_CDR_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r,(_r._dsc1b2_cdr_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r,(_r._dsc1b2_cdr_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_CDR_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r
#define DSC1B2_CDR_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_t DSC1B2_CDR_CTRL0r_t;
#define DSC1B2_CDR_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CLR
#define DSC1B2_CDR_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_SET
#define DSC1B2_CDR_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_GET
#define DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_GET
#define DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_POLARITYf_SET
#define DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET
#define DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET
#define DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_GET
#define DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_RISING_EDGEf_SET
#define DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET
#define DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET
#define DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET
#define DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET
#define DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET
#define DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET
#define DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET
#define DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET
#define DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET
#define DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET
#define DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET
#define DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_GET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_ENf_SET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define READ_DSC1B2_CDR_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL0r
#define WRITE_DSC1B2_CDR_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_CDR_CTRL1
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8231
 * DESC:     CDR Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r (0x00023011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_CDR_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b2_cdr_ctrl1[1];
	uint32_t _dsc1b2_cdr_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CLR(r) (r).dsc1b2_cdr_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_SET(r,d) (r).dsc1b2_cdr_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_GET(r) (r).dsc1b2_cdr_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) (((r).dsc1b2_cdr_ctrl1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc1b2_cdr_ctrl1[0]=(((r).dsc1b2_cdr_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC1B2_CDR_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r,(_r._dsc1b2_cdr_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r,(_r._dsc1b2_cdr_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_CDR_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r
#define DSC1B2_CDR_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_t DSC1B2_CDR_CTRL1r_t;
#define DSC1B2_CDR_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CLR
#define DSC1B2_CDR_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_SET
#define DSC1B2_CDR_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_GET
#define DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC1B2_CDR_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL1r
#define WRITE_DSC1B2_CDR_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_CDR_CTRL2
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8232
 * DESC:     CDR Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_PHASE_ERR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r (0x00023012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_CDR_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b2_cdr_ctrl2[1];
	uint32_t _dsc1b2_cdr_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CLR(r) (r).dsc1b2_cdr_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_SET(r,d) (r).dsc1b2_cdr_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_GET(r) (r).dsc1b2_cdr_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_cdr_ctrl2[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_cdr_ctrl2[0]=(((r).dsc1b2_cdr_ctrl2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET(r) (((r).dsc1b2_cdr_ctrl2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc1b2_cdr_ctrl2[0]=(((r).dsc1b2_cdr_ctrl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC1B2_CDR_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r,(_r._dsc1b2_cdr_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r,(_r._dsc1b2_cdr_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_CDR_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r
#define DSC1B2_CDR_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_t DSC1B2_CDR_CTRL2r_t;
#define DSC1B2_CDR_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CLR
#define DSC1B2_CDR_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_SET
#define DSC1B2_CDR_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_GET
#define DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET
#define DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET
#define READ_DSC1B2_CDR_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B2_CDR_CTRL2r
#define WRITE_DSC1B2_CDR_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_CDR_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_CDR_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_PI_CTRL0
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8233
 * DESC:     Phase Interpolator Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     PI_PHASE_STEP_MULT 
 *     PI_PHASE_DELTA   
 *     PI_PHASE_STROBE  
 *     PI_PHASE_INC     
 *     PI_PHASE_DEC     
 *     PI_CLK90_OFFSET_OVERRIDE 
 *     PI_DUAL_PHASE_OVERRIDE 
 *     PI_PHASE_INVERT  
 *     RESERVED_FOR_ECO0 
 *     INTRP_TMUXSELECT 
 *     PI_CW_RST        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r (0x00023013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_PI_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b2_pi_ctrl0[1];
	uint32_t _dsc1b2_pi_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_CLR(r) (r).dsc1b2_pi_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_SET(r,d) (r).dsc1b2_pi_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_GET(r) (r).dsc1b2_pi_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CW_RSTf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CW_RSTf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DECf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DECf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INCf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INCf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_GET(r) ((((r).dsc1b2_pi_ctrl0[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET(r) (((r).dsc1b2_pi_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET(r,f) (r).dsc1b2_pi_ctrl0[0]=(((r).dsc1b2_pi_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B2_PI_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_PI_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r,(_r._dsc1b2_pi_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_PI_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r,(_r._dsc1b2_pi_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_PI_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r
#define DSC1B2_PI_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_t DSC1B2_PI_CTRL0r_t;
#define DSC1B2_PI_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_CLR
#define DSC1B2_PI_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_SET
#define DSC1B2_PI_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_GET
#define DSC1B2_PI_CTRL0r_PI_CW_RSTf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CW_RSTf_GET
#define DSC1B2_PI_CTRL0r_PI_CW_RSTf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CW_RSTf_SET
#define DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_GET
#define DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_INTRP_TMUXSELECTf_SET
#define DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INVERTf_SET
#define DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET
#define DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET
#define DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET
#define DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_DECf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DECf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_DECf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DECf_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_INCf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INCf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_INCf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_INCf_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STROBEf_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_DELTAf_SET
#define DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET
#define DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET
#define READ_DSC1B2_PI_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B2_PI_CTRL0r
#define WRITE_DSC1B2_PI_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_PI_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_PI_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL0
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8234
 * DESC:     DFE VGA Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_VGA_CLKEN    
 *     TRNSUM_EN        
 *     SUM_M1ERR        
 *     TRNSUM_TAP0_ONLY 
 *     DFE_POLARITY     
 *     VGA_POLARITY     
 *     VGA_TIMER_CTRL   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r (0x00023014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl0[1];
	uint32_t _dsc1b2_dfe_vga_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_CLR(r) (r).dsc1b2_dfe_vga_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_GET(r) (r).dsc1b2_dfe_vga_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET(r) (((r).dsc1b2_dfe_vga_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl0[0]=(((r).dsc1b2_dfe_vga_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r,(_r._dsc1b2_dfe_vga_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r,(_r._dsc1b2_dfe_vga_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r
#define DSC1B2_DFE_VGA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_t DSC1B2_DFE_VGA_CTRL0r_t;
#define DSC1B2_DFE_VGA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_CLR
#define DSC1B2_DFE_VGA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SET
#define DSC1B2_DFE_VGA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_GET
#define DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET
#define DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET
#define DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_GET
#define DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_VGA_POLARITYf_SET
#define DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_GET
#define DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_POLARITYf_SET
#define DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET
#define DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET
#define DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_GET
#define DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_SUM_M1ERRf_SET
#define DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_GET
#define DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_TRNSUM_ENf_SET
#define DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET
#define DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET
#define READ_DSC1B2_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL0r
#define WRITE_DSC1B2_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL1
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8235
 * DESC:     DFE VGA Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_WRITE_EN     
 *     VGA_WRITE_VAL    
 *     DFE_WRITE_EN     
 *     DFE_WRITE_VAL    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r (0x00023015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl1[1];
	uint32_t _dsc1b2_dfe_vga_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_CLR(r) (r).dsc1b2_dfe_vga_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_GET(r) (r).dsc1b2_dfe_vga_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl1[0]=(((r).dsc1b2_dfe_vga_ctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl1[0]) >> 7) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl1[0]=(((r).dsc1b2_dfe_vga_ctrl1[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl1[0]=(((r).dsc1b2_dfe_vga_ctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl1[0]) >> 1) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl1[0]=(((r).dsc1b2_dfe_vga_ctrl1[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET(r) (((r).dsc1b2_dfe_vga_ctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl1[0]=(((r).dsc1b2_dfe_vga_ctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r,(_r._dsc1b2_dfe_vga_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r,(_r._dsc1b2_dfe_vga_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r
#define DSC1B2_DFE_VGA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_t DSC1B2_DFE_VGA_CTRL1r_t;
#define DSC1B2_DFE_VGA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_CLR
#define DSC1B2_DFE_VGA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_SET
#define DSC1B2_DFE_VGA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_GET
#define DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET
#define DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET
#define DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET
#define DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET
#define DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET
#define DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET
#define DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET
#define DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET
#define READ_DSC1B2_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL1r
#define WRITE_DSC1B2_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL2
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8236
 * DESC:     DFE VGA Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_EN   
 *     TRNSUM_OTAP_EN   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r (0x00023016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl2[1];
	uint32_t _dsc1b2_dfe_vga_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_CLR(r) (r).dsc1b2_dfe_vga_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_GET(r) (r).dsc1b2_dfe_vga_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl2[0]=(((r).dsc1b2_dfe_vga_ctrl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl2[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl2[0]=(((r).dsc1b2_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET(r) (((r).dsc1b2_dfe_vga_ctrl2[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl2[0]=(((r).dsc1b2_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r,(_r._dsc1b2_dfe_vga_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r,(_r._dsc1b2_dfe_vga_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r
#define DSC1B2_DFE_VGA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_t DSC1B2_DFE_VGA_CTRL2r_t;
#define DSC1B2_DFE_VGA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_CLR
#define DSC1B2_DFE_VGA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_SET
#define DSC1B2_DFE_VGA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_GET
#define DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET
#define DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET
#define DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET
#define DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET
#define READ_DSC1B2_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL2r
#define WRITE_DSC1B2_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL3
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8237
 * DESC:     DFE VGA Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_SIGN 
 *     TRNSUM_OTAP_SIGN 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r (0x00023017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl3[1];
	uint32_t _dsc1b2_dfe_vga_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_CLR(r) (r).dsc1b2_dfe_vga_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_GET(r) (r).dsc1b2_dfe_vga_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl3[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl3[0]=(((r).dsc1b2_dfe_vga_ctrl3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET(r) ((((r).dsc1b2_dfe_vga_ctrl3[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl3[0]=(((r).dsc1b2_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET(r) (((r).dsc1b2_dfe_vga_ctrl3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET(r,f) (r).dsc1b2_dfe_vga_ctrl3[0]=(((r).dsc1b2_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r,(_r._dsc1b2_dfe_vga_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r,(_r._dsc1b2_dfe_vga_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r
#define DSC1B2_DFE_VGA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_t DSC1B2_DFE_VGA_CTRL3r_t;
#define DSC1B2_DFE_VGA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_CLR
#define DSC1B2_DFE_VGA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_SET
#define DSC1B2_DFE_VGA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_GET
#define DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET
#define DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET
#define DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET
#define DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET
#define READ_DSC1B2_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL3r
#define WRITE_DSC1B2_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL4
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8238
 * DESC:     DFE VGA Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_COR_SEL_O    
 *     VGA_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r (0x00023018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl4[1];
	uint32_t _dsc1b2_dfe_vga_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_CLR(r) (r).dsc1b2_dfe_vga_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_GET(r) (r).dsc1b2_dfe_vga_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl4[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl4[0]=(((r).dsc1b2_dfe_vga_ctrl4[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET(r) ((((r).dsc1b2_dfe_vga_ctrl4[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET(r,f) (r).dsc1b2_dfe_vga_ctrl4[0]=(((r).dsc1b2_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET(r) (((r).dsc1b2_dfe_vga_ctrl4[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET(r,f) (r).dsc1b2_dfe_vga_ctrl4[0]=(((r).dsc1b2_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r,(_r._dsc1b2_dfe_vga_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r,(_r._dsc1b2_dfe_vga_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r
#define DSC1B2_DFE_VGA_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_t DSC1B2_DFE_VGA_CTRL4r_t;
#define DSC1B2_DFE_VGA_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_CLR
#define DSC1B2_DFE_VGA_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_SET
#define DSC1B2_DFE_VGA_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_GET
#define DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET
#define DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET
#define DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET
#define DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET
#define READ_DSC1B2_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL4r
#define WRITE_DSC1B2_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DFE_VGA_CTRL5
 * BLOCKS:   DSC1B2
 * REGADDR:  0x8239
 * DESC:     DFE VGA Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_COR_SEL_O    
 *     DFE_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r (0x00023019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DFE_VGA_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dfe_vga_ctrl5[1];
	uint32_t _dsc1b2_dfe_vga_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_CLR(r) (r).dsc1b2_dfe_vga_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_SET(r,d) (r).dsc1b2_dfe_vga_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_GET(r) (r).dsc1b2_dfe_vga_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dfe_vga_ctrl5[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dfe_vga_ctrl5[0]=(((r).dsc1b2_dfe_vga_ctrl5[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET(r) ((((r).dsc1b2_dfe_vga_ctrl5[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET(r,f) (r).dsc1b2_dfe_vga_ctrl5[0]=(((r).dsc1b2_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET(r) (((r).dsc1b2_dfe_vga_ctrl5[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET(r,f) (r).dsc1b2_dfe_vga_ctrl5[0]=(((r).dsc1b2_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B2_DFE_VGA_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r,(_r._dsc1b2_dfe_vga_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r,(_r._dsc1b2_dfe_vga_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r
#define DSC1B2_DFE_VGA_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_t DSC1B2_DFE_VGA_CTRL5r_t;
#define DSC1B2_DFE_VGA_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_CLR
#define DSC1B2_DFE_VGA_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_SET
#define DSC1B2_DFE_VGA_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_GET
#define DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET
#define DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET
#define DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET
#define DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET
#define READ_DSC1B2_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DFE_VGA_CTRL5r
#define WRITE_DSC1B2_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DFE_VGA_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DFE_VGA_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DSC_ANA_CTRL0
 * BLOCKS:   DSC1B2
 * REGADDR:  0x823a
 * DESC:     DSC Analog Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     M1_ODD_CTRL      
 *     D_ODD_CTRL       
 *     P1_ODD_CTRL      
 *     FORCE_ODD_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r (0x0002301a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DSC_ANA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dsc_ana_ctrl0[1];
	uint32_t _dsc1b2_dsc_ana_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_CLR(r) (r).dsc1b2_dsc_ana_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_SET(r,d) (r).dsc1b2_dsc_ana_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_GET(r) (r).dsc1b2_dsc_ana_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl0[0]=(((r).dsc1b2_dsc_ana_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl0[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl0[0]=(((r).dsc1b2_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl0[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl0[0]=(((r).dsc1b2_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET(r) (((r).dsc1b2_dsc_ana_ctrl0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl0[0]=(((r).dsc1b2_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B2_DSC_ANA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r,(_r._dsc1b2_dsc_ana_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r,(_r._dsc1b2_dsc_ana_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r
#define DSC1B2_DSC_ANA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_t DSC1B2_DSC_ANA_CTRL0r_t;
#define DSC1B2_DSC_ANA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_CLR
#define DSC1B2_DSC_ANA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_SET
#define DSC1B2_DSC_ANA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_GET
#define DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET
#define READ_DSC1B2_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL0r
#define WRITE_DSC1B2_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DSC_ANA_CTRL1
 * BLOCKS:   DSC1B2
 * REGADDR:  0x823b
 * DESC:     DSC Analog Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     M1_EVN_CTRL      
 *     D_EVN_CTRL       
 *     P1_EVN_CTRL      
 *     FORCE_EVN_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r (0x0002301b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DSC_ANA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dsc_ana_ctrl1[1];
	uint32_t _dsc1b2_dsc_ana_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_CLR(r) (r).dsc1b2_dsc_ana_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_SET(r,d) (r).dsc1b2_dsc_ana_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_GET(r) (r).dsc1b2_dsc_ana_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl1[0]=(((r).dsc1b2_dsc_ana_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl1[0]=(((r).dsc1b2_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl1[0]=(((r).dsc1b2_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET(r) (((r).dsc1b2_dsc_ana_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl1[0]=(((r).dsc1b2_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B2_DSC_ANA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r,(_r._dsc1b2_dsc_ana_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r,(_r._dsc1b2_dsc_ana_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r
#define DSC1B2_DSC_ANA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_t DSC1B2_DSC_ANA_CTRL1r_t;
#define DSC1B2_DSC_ANA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_CLR
#define DSC1B2_DSC_ANA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_SET
#define DSC1B2_DSC_ANA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_GET
#define DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET
#define READ_DSC1B2_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL1r
#define WRITE_DSC1B2_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DSC_ANA_CTRL2
 * BLOCKS:   DSC1B2
 * REGADDR:  0x823c
 * DESC:     DSC Analog Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     RX_PF_CTRL       
 *     FORCE_RX_PF_CTRL 
 *     RX_THRESH_SEL    
 *     RX_M1_THRESH_ZERO 
 *     FORCE_RX_M1_THRESH_ZERO 
 *     OSR_PD_CH_P1     
 *     OSR_EN_DFE_CLK   
 *     OSR_EN_HGAIN     
 *     OSR_OFFSET_PD    
 *     BR_PD_CH_P1      
 *     BR_EN_DFE_CLK    
 *     BR_EN_HGAIN      
 *     BR_OFFSET_PD     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r (0x0002301c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DSC_ANA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dsc_ana_ctrl2[1];
	uint32_t _dsc1b2_dsc_ana_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_CLR(r) (r).dsc1b2_dsc_ana_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_SET(r,d) (r).dsc1b2_dsc_ana_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_GET(r) (r).dsc1b2_dsc_ana_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET(r) (((r).dsc1b2_dsc_ana_ctrl2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl2[0]=(((r).dsc1b2_dsc_ana_ctrl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC1B2_DSC_ANA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r,(_r._dsc1b2_dsc_ana_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r,(_r._dsc1b2_dsc_ana_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r
#define DSC1B2_DSC_ANA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_t DSC1B2_DSC_ANA_CTRL2r_t;
#define DSC1B2_DSC_ANA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_CLR
#define DSC1B2_DSC_ANA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_SET
#define DSC1B2_DSC_ANA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_GET
#define DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET
#define DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET
#define DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET
#define DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET
#define DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET
#define DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET
#define DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET
#define DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET
#define DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET
#define DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET
#define DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET
#define DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET
#define DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET
#define DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET
#define DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET
#define DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET
#define READ_DSC1B2_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL2r
#define WRITE_DSC1B2_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DSC_100FX_CTRL
 * BLOCKS:   DSC1B2
 * REGADDR:  0x823d
 * DESC:     DSC 100FX Control Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_100FX 
 *     CDROS_BWSEL_INTEG_100FX 
 *     PI_PHASE_STEP_MULT_100FX 
 *     PHASE_SAT_CTRL_100FX 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr (0x0002301d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DSC_100FX_CTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_s {
	uint32_t v[1];
	uint32_t dsc1b2_dsc_100fx_ctrl[1];
	uint32_t _dsc1b2_dsc_100fx_ctrl;
} BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CLR(r) (r).dsc1b2_dsc_100fx_ctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_SET(r,d) (r).dsc1b2_dsc_100fx_ctrl[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_GET(r) (r).dsc1b2_dsc_100fx_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dsc_100fx_ctrl[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dsc_100fx_ctrl[0]=(((r).dsc1b2_dsc_100fx_ctrl[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET(r) ((((r).dsc1b2_dsc_100fx_ctrl[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET(r,f) (r).dsc1b2_dsc_100fx_ctrl[0]=(((r).dsc1b2_dsc_100fx_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET(r) ((((r).dsc1b2_dsc_100fx_ctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET(r,f) (r).dsc1b2_dsc_100fx_ctrl[0]=(((r).dsc1b2_dsc_100fx_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET(r) ((((r).dsc1b2_dsc_100fx_ctrl[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET(r,f) (r).dsc1b2_dsc_100fx_ctrl[0]=(((r).dsc1b2_dsc_100fx_ctrl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET(r) (((r).dsc1b2_dsc_100fx_ctrl[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET(r,f) (r).dsc1b2_dsc_100fx_ctrl[0]=(((r).dsc1b2_dsc_100fx_ctrl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC1B2_DSC_100FX_CTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr,(_r._dsc1b2_dsc_100fx_ctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr,(_r._dsc1b2_dsc_100fx_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr
#define DSC1B2_DSC_100FX_CTRLr_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_t DSC1B2_DSC_100FX_CTRLr_t;
#define DSC1B2_DSC_100FX_CTRLr_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CLR
#define DSC1B2_DSC_100FX_CTRLr_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_SET
#define DSC1B2_DSC_100FX_CTRLr_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_GET
#define DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET
#define DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET
#define DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET
#define DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET
#define DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET
#define DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET
#define DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET
#define DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET
#define READ_DSC1B2_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_100FX_CTRLr
#define WRITE_DSC1B2_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_100FX_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DSC_100FX_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B2_DSC_ANA_CTRL3
 * BLOCKS:   DSC1B2
 * REGADDR:  0x823e
 * DESC:     DSC Analog Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     FORCE_M1_ODD_CTRL 
 *     FORCE_D_ODD_CTRL 
 *     FORCE_P1_ODD_CTRL 
 *     FORCE_M1_EVN_CTRL 
 *     FORCE_D_EVN_CTRL 
 *     FORCE_P1_EVN_CTRL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r (0x0002301e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B2_DSC_ANA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b2_dsc_ana_ctrl3[1];
	uint32_t _dsc1b2_dsc_ana_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_CLR(r) (r).dsc1b2_dsc_ana_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_SET(r,d) (r).dsc1b2_dsc_ana_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_GET(r) (r).dsc1b2_dsc_ana_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET(r) ((((r).dsc1b2_dsc_ana_ctrl3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET(r) (((r).dsc1b2_dsc_ana_ctrl3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET(r,f) (r).dsc1b2_dsc_ana_ctrl3[0]=(((r).dsc1b2_dsc_ana_ctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B2_DSC_ANA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r,(_r._dsc1b2_dsc_ana_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r,(_r._dsc1b2_dsc_ana_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B2_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r
#define DSC1B2_DSC_ANA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_t DSC1B2_DSC_ANA_CTRL3r_t;
#define DSC1B2_DSC_ANA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_CLR
#define DSC1B2_DSC_ANA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_SET
#define DSC1B2_DSC_ANA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_GET
#define DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET
#define DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET
#define READ_DSC1B2_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B2_DSC_ANA_CTRL3r
#define WRITE_DSC1B2_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B2_DSC_ANA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B2_DSC_ANA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_CDR_CTRL0
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8240
 * DESC:     CDR Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_EN 
 *     CDR_FREQ_EN      
 *     CDR_FREQ_UPD_EN  
 *     CDR_INTEG_REG_CLR 
 *     CDR_PHASE_ERR_FRZ 
 *     CDROS_ZERO_POLARITY 
 *     CDROS_PEAK_POLARITY 
 *     CDROS_PHASE_SAT_CTRL 
 *     CDROS_FALLING_EDGE 
 *     CDROS_RISING_EDGE 
 *     CDRBR_THIRD_VEC_EN 
 *     CDRBR_POLARITY   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r (0x00024010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_CDR_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b3_cdr_ctrl0[1];
	uint32_t _dsc1b3_cdr_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CLR(r) (r).dsc1b3_cdr_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_SET(r,d) (r).dsc1b3_cdr_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_GET(r) (r).dsc1b3_cdr_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_GET(r) ((((r).dsc1b3_cdr_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) (((r).dsc1b3_cdr_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc1b3_cdr_ctrl0[0]=(((r).dsc1b3_cdr_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B3_CDR_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r,(_r._dsc1b3_cdr_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r,(_r._dsc1b3_cdr_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_CDR_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r
#define DSC1B3_CDR_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_t DSC1B3_CDR_CTRL0r_t;
#define DSC1B3_CDR_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CLR
#define DSC1B3_CDR_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_SET
#define DSC1B3_CDR_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_GET
#define DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_GET
#define DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_POLARITYf_SET
#define DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET
#define DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET
#define DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_GET
#define DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_RISING_EDGEf_SET
#define DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET
#define DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET
#define DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET
#define DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET
#define DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET
#define DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET
#define DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET
#define DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET
#define DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET
#define DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET
#define DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET
#define DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_GET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_ENf_SET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define READ_DSC1B3_CDR_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL0r
#define WRITE_DSC1B3_CDR_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_CDR_CTRL1
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8241
 * DESC:     CDR Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r (0x00024011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_CDR_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b3_cdr_ctrl1[1];
	uint32_t _dsc1b3_cdr_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CLR(r) (r).dsc1b3_cdr_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_SET(r,d) (r).dsc1b3_cdr_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_GET(r) (r).dsc1b3_cdr_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) (((r).dsc1b3_cdr_ctrl1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc1b3_cdr_ctrl1[0]=(((r).dsc1b3_cdr_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC1B3_CDR_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r,(_r._dsc1b3_cdr_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r,(_r._dsc1b3_cdr_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_CDR_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r
#define DSC1B3_CDR_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_t DSC1B3_CDR_CTRL1r_t;
#define DSC1B3_CDR_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CLR
#define DSC1B3_CDR_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_SET
#define DSC1B3_CDR_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_GET
#define DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC1B3_CDR_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL1r
#define WRITE_DSC1B3_CDR_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_CDR_CTRL2
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8242
 * DESC:     CDR Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_PHASE_ERR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r (0x00024012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_CDR_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b3_cdr_ctrl2[1];
	uint32_t _dsc1b3_cdr_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CLR(r) (r).dsc1b3_cdr_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_SET(r,d) (r).dsc1b3_cdr_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_GET(r) (r).dsc1b3_cdr_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_cdr_ctrl2[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_cdr_ctrl2[0]=(((r).dsc1b3_cdr_ctrl2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET(r) (((r).dsc1b3_cdr_ctrl2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc1b3_cdr_ctrl2[0]=(((r).dsc1b3_cdr_ctrl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC1B3_CDR_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r,(_r._dsc1b3_cdr_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r,(_r._dsc1b3_cdr_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_CDR_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r
#define DSC1B3_CDR_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_t DSC1B3_CDR_CTRL2r_t;
#define DSC1B3_CDR_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CLR
#define DSC1B3_CDR_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_SET
#define DSC1B3_CDR_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_GET
#define DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET
#define DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET
#define READ_DSC1B3_CDR_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B3_CDR_CTRL2r
#define WRITE_DSC1B3_CDR_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_CDR_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_CDR_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_PI_CTRL0
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8243
 * DESC:     Phase Interpolator Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     PI_PHASE_STEP_MULT 
 *     PI_PHASE_DELTA   
 *     PI_PHASE_STROBE  
 *     PI_PHASE_INC     
 *     PI_PHASE_DEC     
 *     PI_CLK90_OFFSET_OVERRIDE 
 *     PI_DUAL_PHASE_OVERRIDE 
 *     PI_PHASE_INVERT  
 *     RESERVED_FOR_ECO0 
 *     INTRP_TMUXSELECT 
 *     PI_CW_RST        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r (0x00024013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_PI_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b3_pi_ctrl0[1];
	uint32_t _dsc1b3_pi_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_CLR(r) (r).dsc1b3_pi_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_SET(r,d) (r).dsc1b3_pi_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_GET(r) (r).dsc1b3_pi_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CW_RSTf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CW_RSTf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DECf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DECf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INCf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INCf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_GET(r) ((((r).dsc1b3_pi_ctrl0[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET(r) (((r).dsc1b3_pi_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET(r,f) (r).dsc1b3_pi_ctrl0[0]=(((r).dsc1b3_pi_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B3_PI_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_PI_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r,(_r._dsc1b3_pi_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_PI_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r,(_r._dsc1b3_pi_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_PI_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r
#define DSC1B3_PI_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_t DSC1B3_PI_CTRL0r_t;
#define DSC1B3_PI_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_CLR
#define DSC1B3_PI_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_SET
#define DSC1B3_PI_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_GET
#define DSC1B3_PI_CTRL0r_PI_CW_RSTf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CW_RSTf_GET
#define DSC1B3_PI_CTRL0r_PI_CW_RSTf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CW_RSTf_SET
#define DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_GET
#define DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_INTRP_TMUXSELECTf_SET
#define DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INVERTf_SET
#define DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET
#define DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET
#define DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET
#define DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_DECf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DECf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_DECf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DECf_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_INCf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INCf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_INCf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_INCf_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STROBEf_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_DELTAf_SET
#define DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET
#define DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET
#define READ_DSC1B3_PI_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B3_PI_CTRL0r
#define WRITE_DSC1B3_PI_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_PI_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_PI_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL0
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8244
 * DESC:     DFE VGA Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_VGA_CLKEN    
 *     TRNSUM_EN        
 *     SUM_M1ERR        
 *     TRNSUM_TAP0_ONLY 
 *     DFE_POLARITY     
 *     VGA_POLARITY     
 *     VGA_TIMER_CTRL   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r (0x00024014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl0[1];
	uint32_t _dsc1b3_dfe_vga_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_CLR(r) (r).dsc1b3_dfe_vga_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_GET(r) (r).dsc1b3_dfe_vga_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET(r) (((r).dsc1b3_dfe_vga_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl0[0]=(((r).dsc1b3_dfe_vga_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r,(_r._dsc1b3_dfe_vga_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r,(_r._dsc1b3_dfe_vga_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r
#define DSC1B3_DFE_VGA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_t DSC1B3_DFE_VGA_CTRL0r_t;
#define DSC1B3_DFE_VGA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_CLR
#define DSC1B3_DFE_VGA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SET
#define DSC1B3_DFE_VGA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_GET
#define DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET
#define DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET
#define DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_GET
#define DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_VGA_POLARITYf_SET
#define DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_GET
#define DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_POLARITYf_SET
#define DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET
#define DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET
#define DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_GET
#define DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_SUM_M1ERRf_SET
#define DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_GET
#define DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_TRNSUM_ENf_SET
#define DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET
#define DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET
#define READ_DSC1B3_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL0r
#define WRITE_DSC1B3_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL1
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8245
 * DESC:     DFE VGA Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_WRITE_EN     
 *     VGA_WRITE_VAL    
 *     DFE_WRITE_EN     
 *     DFE_WRITE_VAL    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r (0x00024015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl1[1];
	uint32_t _dsc1b3_dfe_vga_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_CLR(r) (r).dsc1b3_dfe_vga_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_GET(r) (r).dsc1b3_dfe_vga_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl1[0]=(((r).dsc1b3_dfe_vga_ctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl1[0]) >> 7) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl1[0]=(((r).dsc1b3_dfe_vga_ctrl1[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl1[0]=(((r).dsc1b3_dfe_vga_ctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl1[0]) >> 1) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl1[0]=(((r).dsc1b3_dfe_vga_ctrl1[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET(r) (((r).dsc1b3_dfe_vga_ctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl1[0]=(((r).dsc1b3_dfe_vga_ctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r,(_r._dsc1b3_dfe_vga_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r,(_r._dsc1b3_dfe_vga_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r
#define DSC1B3_DFE_VGA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_t DSC1B3_DFE_VGA_CTRL1r_t;
#define DSC1B3_DFE_VGA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_CLR
#define DSC1B3_DFE_VGA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_SET
#define DSC1B3_DFE_VGA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_GET
#define DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET
#define DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET
#define DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET
#define DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET
#define DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET
#define DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET
#define DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET
#define DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET
#define READ_DSC1B3_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL1r
#define WRITE_DSC1B3_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL2
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8246
 * DESC:     DFE VGA Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_EN   
 *     TRNSUM_OTAP_EN   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r (0x00024016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl2[1];
	uint32_t _dsc1b3_dfe_vga_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_CLR(r) (r).dsc1b3_dfe_vga_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_GET(r) (r).dsc1b3_dfe_vga_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl2[0]=(((r).dsc1b3_dfe_vga_ctrl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl2[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl2[0]=(((r).dsc1b3_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET(r) (((r).dsc1b3_dfe_vga_ctrl2[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl2[0]=(((r).dsc1b3_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r,(_r._dsc1b3_dfe_vga_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r,(_r._dsc1b3_dfe_vga_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r
#define DSC1B3_DFE_VGA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_t DSC1B3_DFE_VGA_CTRL2r_t;
#define DSC1B3_DFE_VGA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_CLR
#define DSC1B3_DFE_VGA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_SET
#define DSC1B3_DFE_VGA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_GET
#define DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET
#define DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET
#define DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET
#define DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET
#define READ_DSC1B3_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL2r
#define WRITE_DSC1B3_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL3
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8247
 * DESC:     DFE VGA Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_SIGN 
 *     TRNSUM_OTAP_SIGN 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r (0x00024017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl3[1];
	uint32_t _dsc1b3_dfe_vga_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_CLR(r) (r).dsc1b3_dfe_vga_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_GET(r) (r).dsc1b3_dfe_vga_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl3[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl3[0]=(((r).dsc1b3_dfe_vga_ctrl3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET(r) ((((r).dsc1b3_dfe_vga_ctrl3[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl3[0]=(((r).dsc1b3_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET(r) (((r).dsc1b3_dfe_vga_ctrl3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET(r,f) (r).dsc1b3_dfe_vga_ctrl3[0]=(((r).dsc1b3_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r,(_r._dsc1b3_dfe_vga_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r,(_r._dsc1b3_dfe_vga_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r
#define DSC1B3_DFE_VGA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_t DSC1B3_DFE_VGA_CTRL3r_t;
#define DSC1B3_DFE_VGA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_CLR
#define DSC1B3_DFE_VGA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_SET
#define DSC1B3_DFE_VGA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_GET
#define DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET
#define DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET
#define DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET
#define DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET
#define READ_DSC1B3_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL3r
#define WRITE_DSC1B3_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL4
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8248
 * DESC:     DFE VGA Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_COR_SEL_O    
 *     VGA_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r (0x00024018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl4[1];
	uint32_t _dsc1b3_dfe_vga_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_CLR(r) (r).dsc1b3_dfe_vga_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_GET(r) (r).dsc1b3_dfe_vga_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl4[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl4[0]=(((r).dsc1b3_dfe_vga_ctrl4[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET(r) ((((r).dsc1b3_dfe_vga_ctrl4[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET(r,f) (r).dsc1b3_dfe_vga_ctrl4[0]=(((r).dsc1b3_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET(r) (((r).dsc1b3_dfe_vga_ctrl4[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET(r,f) (r).dsc1b3_dfe_vga_ctrl4[0]=(((r).dsc1b3_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r,(_r._dsc1b3_dfe_vga_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r,(_r._dsc1b3_dfe_vga_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r
#define DSC1B3_DFE_VGA_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_t DSC1B3_DFE_VGA_CTRL4r_t;
#define DSC1B3_DFE_VGA_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_CLR
#define DSC1B3_DFE_VGA_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_SET
#define DSC1B3_DFE_VGA_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_GET
#define DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET
#define DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET
#define DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET
#define DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET
#define READ_DSC1B3_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL4r
#define WRITE_DSC1B3_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DFE_VGA_CTRL5
 * BLOCKS:   DSC1B3
 * REGADDR:  0x8249
 * DESC:     DFE VGA Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_COR_SEL_O    
 *     DFE_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r (0x00024019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DFE_VGA_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dfe_vga_ctrl5[1];
	uint32_t _dsc1b3_dfe_vga_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_CLR(r) (r).dsc1b3_dfe_vga_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_SET(r,d) (r).dsc1b3_dfe_vga_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_GET(r) (r).dsc1b3_dfe_vga_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dfe_vga_ctrl5[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dfe_vga_ctrl5[0]=(((r).dsc1b3_dfe_vga_ctrl5[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET(r) ((((r).dsc1b3_dfe_vga_ctrl5[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET(r,f) (r).dsc1b3_dfe_vga_ctrl5[0]=(((r).dsc1b3_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET(r) (((r).dsc1b3_dfe_vga_ctrl5[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET(r,f) (r).dsc1b3_dfe_vga_ctrl5[0]=(((r).dsc1b3_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B3_DFE_VGA_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r,(_r._dsc1b3_dfe_vga_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r,(_r._dsc1b3_dfe_vga_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r
#define DSC1B3_DFE_VGA_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_t DSC1B3_DFE_VGA_CTRL5r_t;
#define DSC1B3_DFE_VGA_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_CLR
#define DSC1B3_DFE_VGA_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_SET
#define DSC1B3_DFE_VGA_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_GET
#define DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET
#define DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET
#define DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET
#define DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET
#define READ_DSC1B3_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DFE_VGA_CTRL5r
#define WRITE_DSC1B3_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DFE_VGA_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DFE_VGA_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DSC_ANA_CTRL0
 * BLOCKS:   DSC1B3
 * REGADDR:  0x824a
 * DESC:     DSC Analog Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     M1_ODD_CTRL      
 *     D_ODD_CTRL       
 *     P1_ODD_CTRL      
 *     FORCE_ODD_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r (0x0002401a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DSC_ANA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dsc_ana_ctrl0[1];
	uint32_t _dsc1b3_dsc_ana_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_CLR(r) (r).dsc1b3_dsc_ana_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_SET(r,d) (r).dsc1b3_dsc_ana_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_GET(r) (r).dsc1b3_dsc_ana_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl0[0]=(((r).dsc1b3_dsc_ana_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl0[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl0[0]=(((r).dsc1b3_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl0[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl0[0]=(((r).dsc1b3_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET(r) (((r).dsc1b3_dsc_ana_ctrl0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl0[0]=(((r).dsc1b3_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B3_DSC_ANA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r,(_r._dsc1b3_dsc_ana_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r,(_r._dsc1b3_dsc_ana_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r
#define DSC1B3_DSC_ANA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_t DSC1B3_DSC_ANA_CTRL0r_t;
#define DSC1B3_DSC_ANA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_CLR
#define DSC1B3_DSC_ANA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_SET
#define DSC1B3_DSC_ANA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_GET
#define DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET
#define READ_DSC1B3_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL0r
#define WRITE_DSC1B3_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DSC_ANA_CTRL1
 * BLOCKS:   DSC1B3
 * REGADDR:  0x824b
 * DESC:     DSC Analog Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     M1_EVN_CTRL      
 *     D_EVN_CTRL       
 *     P1_EVN_CTRL      
 *     FORCE_EVN_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r (0x0002401b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DSC_ANA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dsc_ana_ctrl1[1];
	uint32_t _dsc1b3_dsc_ana_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_CLR(r) (r).dsc1b3_dsc_ana_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_SET(r,d) (r).dsc1b3_dsc_ana_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_GET(r) (r).dsc1b3_dsc_ana_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl1[0]=(((r).dsc1b3_dsc_ana_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl1[0]=(((r).dsc1b3_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl1[0]=(((r).dsc1b3_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET(r) (((r).dsc1b3_dsc_ana_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl1[0]=(((r).dsc1b3_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1B3_DSC_ANA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r,(_r._dsc1b3_dsc_ana_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r,(_r._dsc1b3_dsc_ana_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r
#define DSC1B3_DSC_ANA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_t DSC1B3_DSC_ANA_CTRL1r_t;
#define DSC1B3_DSC_ANA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_CLR
#define DSC1B3_DSC_ANA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_SET
#define DSC1B3_DSC_ANA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_GET
#define DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET
#define READ_DSC1B3_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL1r
#define WRITE_DSC1B3_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DSC_ANA_CTRL2
 * BLOCKS:   DSC1B3
 * REGADDR:  0x824c
 * DESC:     DSC Analog Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     RX_PF_CTRL       
 *     FORCE_RX_PF_CTRL 
 *     RX_THRESH_SEL    
 *     RX_M1_THRESH_ZERO 
 *     FORCE_RX_M1_THRESH_ZERO 
 *     OSR_PD_CH_P1     
 *     OSR_EN_DFE_CLK   
 *     OSR_EN_HGAIN     
 *     OSR_OFFSET_PD    
 *     BR_PD_CH_P1      
 *     BR_EN_DFE_CLK    
 *     BR_EN_HGAIN      
 *     BR_OFFSET_PD     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r (0x0002401c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DSC_ANA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dsc_ana_ctrl2[1];
	uint32_t _dsc1b3_dsc_ana_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_CLR(r) (r).dsc1b3_dsc_ana_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_SET(r,d) (r).dsc1b3_dsc_ana_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_GET(r) (r).dsc1b3_dsc_ana_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET(r) (((r).dsc1b3_dsc_ana_ctrl2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl2[0]=(((r).dsc1b3_dsc_ana_ctrl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC1B3_DSC_ANA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r,(_r._dsc1b3_dsc_ana_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r,(_r._dsc1b3_dsc_ana_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r
#define DSC1B3_DSC_ANA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_t DSC1B3_DSC_ANA_CTRL2r_t;
#define DSC1B3_DSC_ANA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_CLR
#define DSC1B3_DSC_ANA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_SET
#define DSC1B3_DSC_ANA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_GET
#define DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET
#define DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET
#define DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET
#define DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET
#define DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET
#define DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET
#define DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET
#define DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET
#define DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET
#define DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET
#define DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET
#define DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET
#define DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET
#define DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET
#define DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET
#define DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET
#define READ_DSC1B3_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL2r
#define WRITE_DSC1B3_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DSC_100FX_CTRL
 * BLOCKS:   DSC1B3
 * REGADDR:  0x824d
 * DESC:     DSC 100FX Control Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_100FX 
 *     CDROS_BWSEL_INTEG_100FX 
 *     PI_PHASE_STEP_MULT_100FX 
 *     PHASE_SAT_CTRL_100FX 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr (0x0002401d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DSC_100FX_CTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_s {
	uint32_t v[1];
	uint32_t dsc1b3_dsc_100fx_ctrl[1];
	uint32_t _dsc1b3_dsc_100fx_ctrl;
} BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CLR(r) (r).dsc1b3_dsc_100fx_ctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_SET(r,d) (r).dsc1b3_dsc_100fx_ctrl[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_GET(r) (r).dsc1b3_dsc_100fx_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dsc_100fx_ctrl[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dsc_100fx_ctrl[0]=(((r).dsc1b3_dsc_100fx_ctrl[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET(r) ((((r).dsc1b3_dsc_100fx_ctrl[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET(r,f) (r).dsc1b3_dsc_100fx_ctrl[0]=(((r).dsc1b3_dsc_100fx_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET(r) ((((r).dsc1b3_dsc_100fx_ctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET(r,f) (r).dsc1b3_dsc_100fx_ctrl[0]=(((r).dsc1b3_dsc_100fx_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET(r) ((((r).dsc1b3_dsc_100fx_ctrl[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET(r,f) (r).dsc1b3_dsc_100fx_ctrl[0]=(((r).dsc1b3_dsc_100fx_ctrl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET(r) (((r).dsc1b3_dsc_100fx_ctrl[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET(r,f) (r).dsc1b3_dsc_100fx_ctrl[0]=(((r).dsc1b3_dsc_100fx_ctrl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC1B3_DSC_100FX_CTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr,(_r._dsc1b3_dsc_100fx_ctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr,(_r._dsc1b3_dsc_100fx_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr
#define DSC1B3_DSC_100FX_CTRLr_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_t DSC1B3_DSC_100FX_CTRLr_t;
#define DSC1B3_DSC_100FX_CTRLr_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CLR
#define DSC1B3_DSC_100FX_CTRLr_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_SET
#define DSC1B3_DSC_100FX_CTRLr_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_GET
#define DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET
#define DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET
#define DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET
#define DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET
#define DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET
#define DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET
#define DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET
#define DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET
#define READ_DSC1B3_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_100FX_CTRLr
#define WRITE_DSC1B3_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_100FX_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DSC_100FX_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1B3_DSC_ANA_CTRL3
 * BLOCKS:   DSC1B3
 * REGADDR:  0x824e
 * DESC:     DSC Analog Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     FORCE_M1_ODD_CTRL 
 *     FORCE_D_ODD_CTRL 
 *     FORCE_P1_ODD_CTRL 
 *     FORCE_M1_EVN_CTRL 
 *     FORCE_D_EVN_CTRL 
 *     FORCE_P1_EVN_CTRL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r (0x0002401e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1B3_DSC_ANA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1b3_dsc_ana_ctrl3[1];
	uint32_t _dsc1b3_dsc_ana_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_CLR(r) (r).dsc1b3_dsc_ana_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_SET(r,d) (r).dsc1b3_dsc_ana_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_GET(r) (r).dsc1b3_dsc_ana_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET(r) ((((r).dsc1b3_dsc_ana_ctrl3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET(r) (((r).dsc1b3_dsc_ana_ctrl3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET(r,f) (r).dsc1b3_dsc_ana_ctrl3[0]=(((r).dsc1b3_dsc_ana_ctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1B3_DSC_ANA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r,(_r._dsc1b3_dsc_ana_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r,(_r._dsc1b3_dsc_ana_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1B3_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r
#define DSC1B3_DSC_ANA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_t DSC1B3_DSC_ANA_CTRL3r_t;
#define DSC1B3_DSC_ANA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_CLR
#define DSC1B3_DSC_ANA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_SET
#define DSC1B3_DSC_ANA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_GET
#define DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET
#define DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET
#define READ_DSC1B3_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1B3_DSC_ANA_CTRL3r
#define WRITE_DSC1B3_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1B3_DSC_ANA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1B3_DSC_ANA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_CDR_CTRL0
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8250
 * DESC:     CDR Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_EN 
 *     CDR_FREQ_EN      
 *     CDR_FREQ_UPD_EN  
 *     CDR_INTEG_REG_CLR 
 *     CDR_PHASE_ERR_FRZ 
 *     CDROS_ZERO_POLARITY 
 *     CDROS_PEAK_POLARITY 
 *     CDROS_PHASE_SAT_CTRL 
 *     CDROS_FALLING_EDGE 
 *     CDROS_RISING_EDGE 
 *     CDRBR_THIRD_VEC_EN 
 *     CDRBR_POLARITY   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r (0x00025010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_CDR_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1bb_cdr_ctrl0[1];
	uint32_t _dsc1bb_cdr_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CLR(r) (r).dsc1bb_cdr_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_SET(r,d) (r).dsc1bb_cdr_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_GET(r) (r).dsc1bb_cdr_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_GET(r) ((((r).dsc1bb_cdr_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET(r) (((r).dsc1bb_cdr_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET(r,f) (r).dsc1bb_cdr_ctrl0[0]=(((r).dsc1bb_cdr_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1BB_CDR_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r,(_r._dsc1bb_cdr_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r,(_r._dsc1bb_cdr_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_CDR_CTRL0r BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r
#define DSC1BB_CDR_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_t DSC1BB_CDR_CTRL0r_t;
#define DSC1BB_CDR_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CLR
#define DSC1BB_CDR_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_SET
#define DSC1BB_CDR_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_GET
#define DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_GET
#define DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_POLARITYf_SET
#define DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_GET
#define DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDRBR_THIRD_VEC_ENf_SET
#define DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_GET
#define DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_RISING_EDGEf_SET
#define DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_GET
#define DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_FALLING_EDGEf_SET
#define DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_GET
#define DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PHASE_SAT_CTRLf_SET
#define DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_GET
#define DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_PEAK_POLARITYf_SET
#define DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_GET
#define DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDROS_ZERO_POLARITYf_SET
#define DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_GET
#define DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_PHASE_ERR_FRZf_SET
#define DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_GET
#define DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_INTEG_REG_CLRf_SET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_GET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_UPD_ENf_SET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_GET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_ENf_SET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_GET
#define DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r_CDR_FREQ_OVERRIDE_ENf_SET
#define READ_DSC1BB_CDR_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL0r
#define WRITE_DSC1BB_CDR_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_CDR_CTRL1
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8251
 * DESC:     CDR Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     CDR_FREQ_OVERRIDE_VAL 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r (0x00025011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_CDR_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1bb_cdr_ctrl1[1];
	uint32_t _dsc1bb_cdr_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CLR(r) (r).dsc1bb_cdr_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_SET(r,d) (r).dsc1bb_cdr_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_GET(r) (r).dsc1bb_cdr_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET(r) (((r).dsc1bb_cdr_ctrl1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET(r,f) (r).dsc1bb_cdr_ctrl1[0]=(((r).dsc1bb_cdr_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC1BB_CDR_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r,(_r._dsc1bb_cdr_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r,(_r._dsc1bb_cdr_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_CDR_CTRL1r BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r
#define DSC1BB_CDR_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_t DSC1BB_CDR_CTRL1r_t;
#define DSC1BB_CDR_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CLR
#define DSC1BB_CDR_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_SET
#define DSC1BB_CDR_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_GET
#define DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_GET
#define DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r_CDR_FREQ_OVERRIDE_VALf_SET
#define READ_DSC1BB_CDR_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL1r
#define WRITE_DSC1BB_CDR_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_CDR_CTRL2
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8252
 * DESC:     CDR Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_PHASE_ERR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r (0x00025012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_CDR_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1bb_cdr_ctrl2[1];
	uint32_t _dsc1bb_cdr_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CLR(r) (r).dsc1bb_cdr_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_SET(r,d) (r).dsc1bb_cdr_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_GET(r) (r).dsc1bb_cdr_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_cdr_ctrl2[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_cdr_ctrl2[0]=(((r).dsc1bb_cdr_ctrl2[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET(r) (((r).dsc1bb_cdr_ctrl2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET(r,f) (r).dsc1bb_cdr_ctrl2[0]=(((r).dsc1bb_cdr_ctrl2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC1BB_CDR_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r,(_r._dsc1bb_cdr_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r,(_r._dsc1bb_cdr_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_CDR_CTRL2r BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r
#define DSC1BB_CDR_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_t DSC1BB_CDR_CTRL2r_t;
#define DSC1BB_CDR_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CLR
#define DSC1BB_CDR_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_SET
#define DSC1BB_CDR_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_GET
#define DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_GET
#define DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r_CDRBR_PHASE_ERR_OFFSETf_SET
#define READ_DSC1BB_CDR_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1BB_CDR_CTRL2r
#define WRITE_DSC1BB_CDR_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_CDR_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_CDR_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_PI_CTRL0
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8253
 * DESC:     Phase Interpolator Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     PI_PHASE_STEP_MULT 
 *     PI_PHASE_DELTA   
 *     PI_PHASE_STROBE  
 *     PI_PHASE_INC     
 *     PI_PHASE_DEC     
 *     PI_CLK90_OFFSET_OVERRIDE 
 *     PI_DUAL_PHASE_OVERRIDE 
 *     PI_PHASE_INVERT  
 *     RESERVED_FOR_ECO0 
 *     INTRP_TMUXSELECT 
 *     PI_CW_RST        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r (0x00025013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_PI_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1bb_pi_ctrl0[1];
	uint32_t _dsc1bb_pi_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_CLR(r) (r).dsc1bb_pi_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_SET(r,d) (r).dsc1bb_pi_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_GET(r) (r).dsc1bb_pi_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CW_RSTf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CW_RSTf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DECf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DECf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INCf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INCf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_GET(r) ((((r).dsc1bb_pi_ctrl0[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET(r) (((r).dsc1bb_pi_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET(r,f) (r).dsc1bb_pi_ctrl0[0]=(((r).dsc1bb_pi_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1BB_PI_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_PI_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r,(_r._dsc1bb_pi_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_PI_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r,(_r._dsc1bb_pi_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_PI_CTRL0r BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r
#define DSC1BB_PI_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_t DSC1BB_PI_CTRL0r_t;
#define DSC1BB_PI_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_CLR
#define DSC1BB_PI_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_SET
#define DSC1BB_PI_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_GET
#define DSC1BB_PI_CTRL0r_PI_CW_RSTf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CW_RSTf_GET
#define DSC1BB_PI_CTRL0r_PI_CW_RSTf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CW_RSTf_SET
#define DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_GET
#define DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_INTRP_TMUXSELECTf_SET
#define DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INVERTf_SET
#define DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_GET
#define DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_DUAL_PHASE_OVERRIDEf_SET
#define DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_GET
#define DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_CLK90_OFFSET_OVERRIDEf_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_DECf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DECf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_DECf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DECf_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_INCf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INCf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_INCf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_INCf_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STROBEf_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_DELTAf_SET
#define DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_GET
#define DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r_PI_PHASE_STEP_MULTf_SET
#define READ_DSC1BB_PI_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1BB_PI_CTRL0r
#define WRITE_DSC1BB_PI_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_PI_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_PI_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL0
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8254
 * DESC:     DFE VGA Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_VGA_CLKEN    
 *     TRNSUM_EN        
 *     SUM_M1ERR        
 *     TRNSUM_TAP0_ONLY 
 *     DFE_POLARITY     
 *     VGA_POLARITY     
 *     VGA_TIMER_CTRL   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r (0x00025014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl0[1];
	uint32_t _dsc1bb_dfe_vga_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_CLR(r) (r).dsc1bb_dfe_vga_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_GET(r) (r).dsc1bb_dfe_vga_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET(r) (((r).dsc1bb_dfe_vga_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl0[0]=(((r).dsc1bb_dfe_vga_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r,(_r._dsc1bb_dfe_vga_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r,(_r._dsc1bb_dfe_vga_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r
#define DSC1BB_DFE_VGA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_t DSC1BB_DFE_VGA_CTRL0r_t;
#define DSC1BB_DFE_VGA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_CLR
#define DSC1BB_DFE_VGA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SET
#define DSC1BB_DFE_VGA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_GET
#define DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_GET
#define DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_TIMER_CTRLf_SET
#define DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_GET
#define DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_VGA_POLARITYf_SET
#define DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_GET
#define DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_POLARITYf_SET
#define DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_GET
#define DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_TAP0_ONLYf_SET
#define DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_GET
#define DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_SUM_M1ERRf_SET
#define DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_GET
#define DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_TRNSUM_ENf_SET
#define DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_GET
#define DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r_DFE_VGA_CLKENf_SET
#define READ_DSC1BB_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL0r
#define WRITE_DSC1BB_DFE_VGA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL1
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8255
 * DESC:     DFE VGA Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_WRITE_EN     
 *     VGA_WRITE_VAL    
 *     DFE_WRITE_EN     
 *     DFE_WRITE_VAL    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r (0x00025015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl1[1];
	uint32_t _dsc1bb_dfe_vga_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_CLR(r) (r).dsc1bb_dfe_vga_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_GET(r) (r).dsc1bb_dfe_vga_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl1[0]=(((r).dsc1bb_dfe_vga_ctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl1[0]) >> 7) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl1[0]=(((r).dsc1bb_dfe_vga_ctrl1[0] & ~((uint32_t)0x3f << 7)) | ((((uint32_t)f) & 0x3f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl1[0]=(((r).dsc1bb_dfe_vga_ctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl1[0]) >> 1) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl1[0]=(((r).dsc1bb_dfe_vga_ctrl1[0] & ~((uint32_t)0x1f << 1)) | ((((uint32_t)f) & 0x1f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET(r) (((r).dsc1bb_dfe_vga_ctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl1[0]=(((r).dsc1bb_dfe_vga_ctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r,(_r._dsc1bb_dfe_vga_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r,(_r._dsc1bb_dfe_vga_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r
#define DSC1BB_DFE_VGA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_t DSC1BB_DFE_VGA_CTRL1r_t;
#define DSC1BB_DFE_VGA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_CLR
#define DSC1BB_DFE_VGA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_SET
#define DSC1BB_DFE_VGA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_GET
#define DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_GET
#define DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_VALf_SET
#define DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_GET
#define DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_DFE_WRITE_ENf_SET
#define DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_GET
#define DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_VALf_SET
#define DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_GET
#define DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r_VGA_WRITE_ENf_SET
#define READ_DSC1BB_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL1r
#define WRITE_DSC1BB_DFE_VGA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL2
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8256
 * DESC:     DFE VGA Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_EN   
 *     TRNSUM_OTAP_EN   
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r (0x00025016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl2[1];
	uint32_t _dsc1bb_dfe_vga_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_CLR(r) (r).dsc1bb_dfe_vga_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_GET(r) (r).dsc1bb_dfe_vga_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl2[0]=(((r).dsc1bb_dfe_vga_ctrl2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl2[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl2[0]=(((r).dsc1bb_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET(r) (((r).dsc1bb_dfe_vga_ctrl2[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl2[0]=(((r).dsc1bb_dfe_vga_ctrl2[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r,(_r._dsc1bb_dfe_vga_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r,(_r._dsc1bb_dfe_vga_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r
#define DSC1BB_DFE_VGA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_t DSC1BB_DFE_VGA_CTRL2r_t;
#define DSC1BB_DFE_VGA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_CLR
#define DSC1BB_DFE_VGA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_SET
#define DSC1BB_DFE_VGA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_GET
#define DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_GET
#define DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_OTAP_ENf_SET
#define DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_GET
#define DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r_TRNSUM_ETAP_ENf_SET
#define READ_DSC1BB_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL2r
#define WRITE_DSC1BB_DFE_VGA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL3
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8257
 * DESC:     DFE VGA Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_ETAP_SIGN 
 *     TRNSUM_OTAP_SIGN 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r (0x00025017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl3[1];
	uint32_t _dsc1bb_dfe_vga_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_CLR(r) (r).dsc1bb_dfe_vga_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_GET(r) (r).dsc1bb_dfe_vga_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl3[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl3[0]=(((r).dsc1bb_dfe_vga_ctrl3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET(r) ((((r).dsc1bb_dfe_vga_ctrl3[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl3[0]=(((r).dsc1bb_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET(r) (((r).dsc1bb_dfe_vga_ctrl3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET(r,f) (r).dsc1bb_dfe_vga_ctrl3[0]=(((r).dsc1bb_dfe_vga_ctrl3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r,(_r._dsc1bb_dfe_vga_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r,(_r._dsc1bb_dfe_vga_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r
#define DSC1BB_DFE_VGA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_t DSC1BB_DFE_VGA_CTRL3r_t;
#define DSC1BB_DFE_VGA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_CLR
#define DSC1BB_DFE_VGA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_SET
#define DSC1BB_DFE_VGA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_GET
#define DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_GET
#define DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_OTAP_SIGNf_SET
#define DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_GET
#define DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r_TRNSUM_ETAP_SIGNf_SET
#define READ_DSC1BB_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL3r
#define WRITE_DSC1BB_DFE_VGA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL4
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8258
 * DESC:     DFE VGA Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_COR_SEL_O    
 *     VGA_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r (0x00025018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl4[1];
	uint32_t _dsc1bb_dfe_vga_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_CLR(r) (r).dsc1bb_dfe_vga_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_GET(r) (r).dsc1bb_dfe_vga_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl4[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl4[0]=(((r).dsc1bb_dfe_vga_ctrl4[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET(r) ((((r).dsc1bb_dfe_vga_ctrl4[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET(r,f) (r).dsc1bb_dfe_vga_ctrl4[0]=(((r).dsc1bb_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET(r) (((r).dsc1bb_dfe_vga_ctrl4[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET(r,f) (r).dsc1bb_dfe_vga_ctrl4[0]=(((r).dsc1bb_dfe_vga_ctrl4[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r,(_r._dsc1bb_dfe_vga_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r,(_r._dsc1bb_dfe_vga_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r
#define DSC1BB_DFE_VGA_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_t DSC1BB_DFE_VGA_CTRL4r_t;
#define DSC1BB_DFE_VGA_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_CLR
#define DSC1BB_DFE_VGA_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_SET
#define DSC1BB_DFE_VGA_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_GET
#define DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_GET
#define DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Ef_SET
#define DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_GET
#define DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r_VGA_COR_SEL_Of_SET
#define READ_DSC1BB_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL4r
#define WRITE_DSC1BB_DFE_VGA_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DFE_VGA_CTRL5
 * BLOCKS:   DSC1BB
 * REGADDR:  0x8259
 * DESC:     DFE VGA Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_COR_SEL_O    
 *     DFE_COR_SEL_E    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r (0x00025019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DFE_VGA_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dfe_vga_ctrl5[1];
	uint32_t _dsc1bb_dfe_vga_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_CLR(r) (r).dsc1bb_dfe_vga_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_SET(r,d) (r).dsc1bb_dfe_vga_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_GET(r) (r).dsc1bb_dfe_vga_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dfe_vga_ctrl5[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dfe_vga_ctrl5[0]=(((r).dsc1bb_dfe_vga_ctrl5[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET(r) ((((r).dsc1bb_dfe_vga_ctrl5[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET(r,f) (r).dsc1bb_dfe_vga_ctrl5[0]=(((r).dsc1bb_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET(r) (((r).dsc1bb_dfe_vga_ctrl5[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET(r,f) (r).dsc1bb_dfe_vga_ctrl5[0]=(((r).dsc1bb_dfe_vga_ctrl5[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1BB_DFE_VGA_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r,(_r._dsc1bb_dfe_vga_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r,(_r._dsc1bb_dfe_vga_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r
#define DSC1BB_DFE_VGA_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_t DSC1BB_DFE_VGA_CTRL5r_t;
#define DSC1BB_DFE_VGA_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_CLR
#define DSC1BB_DFE_VGA_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_SET
#define DSC1BB_DFE_VGA_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_GET
#define DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_GET
#define DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Ef_SET
#define DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_GET
#define DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r_DFE_COR_SEL_Of_SET
#define READ_DSC1BB_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DFE_VGA_CTRL5r
#define WRITE_DSC1BB_DFE_VGA_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DFE_VGA_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DFE_VGA_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DSC_ANA_CTRL0
 * BLOCKS:   DSC1BB
 * REGADDR:  0x825a
 * DESC:     DSC Analog Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     M1_ODD_CTRL      
 *     D_ODD_CTRL       
 *     P1_ODD_CTRL      
 *     FORCE_ODD_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r (0x0002501a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DSC_ANA_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dsc_ana_ctrl0[1];
	uint32_t _dsc1bb_dsc_ana_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_CLR(r) (r).dsc1bb_dsc_ana_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_SET(r,d) (r).dsc1bb_dsc_ana_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_GET(r) (r).dsc1bb_dsc_ana_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl0[0]=(((r).dsc1bb_dsc_ana_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl0[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl0[0]=(((r).dsc1bb_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl0[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl0[0]=(((r).dsc1bb_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET(r) (((r).dsc1bb_dsc_ana_ctrl0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl0[0]=(((r).dsc1bb_dsc_ana_ctrl0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1BB_DSC_ANA_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r,(_r._dsc1bb_dsc_ana_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r,(_r._dsc1bb_dsc_ana_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r
#define DSC1BB_DSC_ANA_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_t DSC1BB_DSC_ANA_CTRL0r_t;
#define DSC1BB_DSC_ANA_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_CLR
#define DSC1BB_DSC_ANA_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_SET
#define DSC1BB_DSC_ANA_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_GET
#define DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_FORCE_ODD_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_P1_ODD_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_D_ODD_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r_M1_ODD_CTRLf_SET
#define READ_DSC1BB_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL0r
#define WRITE_DSC1BB_DSC_ANA_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DSC_ANA_CTRL1
 * BLOCKS:   DSC1BB
 * REGADDR:  0x825b
 * DESC:     DSC Analog Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     M1_EVN_CTRL      
 *     D_EVN_CTRL       
 *     P1_EVN_CTRL      
 *     FORCE_EVN_CTRL   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r (0x0002501b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DSC_ANA_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dsc_ana_ctrl1[1];
	uint32_t _dsc1bb_dsc_ana_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_CLR(r) (r).dsc1bb_dsc_ana_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_SET(r,d) (r).dsc1bb_dsc_ana_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_GET(r) (r).dsc1bb_dsc_ana_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl1[0]=(((r).dsc1bb_dsc_ana_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl1[0]=(((r).dsc1bb_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl1[0]=(((r).dsc1bb_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET(r) (((r).dsc1bb_dsc_ana_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl1[0]=(((r).dsc1bb_dsc_ana_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC1BB_DSC_ANA_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r,(_r._dsc1bb_dsc_ana_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r,(_r._dsc1bb_dsc_ana_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r
#define DSC1BB_DSC_ANA_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_t DSC1BB_DSC_ANA_CTRL1r_t;
#define DSC1BB_DSC_ANA_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_CLR
#define DSC1BB_DSC_ANA_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_SET
#define DSC1BB_DSC_ANA_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_GET
#define DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_FORCE_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_P1_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_D_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r_M1_EVN_CTRLf_SET
#define READ_DSC1BB_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL1r
#define WRITE_DSC1BB_DSC_ANA_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DSC_ANA_CTRL2
 * BLOCKS:   DSC1BB
 * REGADDR:  0x825c
 * DESC:     DSC Analog Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     RX_PF_CTRL       
 *     FORCE_RX_PF_CTRL 
 *     RX_THRESH_SEL    
 *     RX_M1_THRESH_ZERO 
 *     FORCE_RX_M1_THRESH_ZERO 
 *     OSR_PD_CH_P1     
 *     OSR_EN_DFE_CLK   
 *     OSR_EN_HGAIN     
 *     OSR_OFFSET_PD    
 *     BR_PD_CH_P1      
 *     BR_EN_DFE_CLK    
 *     BR_EN_HGAIN      
 *     BR_OFFSET_PD     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r (0x0002501c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DSC_ANA_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dsc_ana_ctrl2[1];
	uint32_t _dsc1bb_dsc_ana_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_CLR(r) (r).dsc1bb_dsc_ana_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_SET(r,d) (r).dsc1bb_dsc_ana_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_GET(r) (r).dsc1bb_dsc_ana_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET(r) (((r).dsc1bb_dsc_ana_ctrl2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl2[0]=(((r).dsc1bb_dsc_ana_ctrl2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC1BB_DSC_ANA_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r,(_r._dsc1bb_dsc_ana_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r,(_r._dsc1bb_dsc_ana_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r
#define DSC1BB_DSC_ANA_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_t DSC1BB_DSC_ANA_CTRL2r_t;
#define DSC1BB_DSC_ANA_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_CLR
#define DSC1BB_DSC_ANA_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_SET
#define DSC1BB_DSC_ANA_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_GET
#define DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_GET
#define DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_OFFSET_PDf_SET
#define DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_GET
#define DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_HGAINf_SET
#define DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_GET
#define DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_EN_DFE_CLKf_SET
#define DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_GET
#define DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_BR_PD_CH_P1f_SET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_GET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_OFFSET_PDf_SET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_GET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_HGAINf_SET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_GET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_EN_DFE_CLKf_SET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_GET
#define DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_OSR_PD_CH_P1f_SET
#define DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_GET
#define DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_M1_THRESH_ZEROf_SET
#define DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_GET
#define DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_M1_THRESH_ZEROf_SET
#define DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_GET
#define DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_THRESH_SELf_SET
#define DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_FORCE_RX_PF_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r_RX_PF_CTRLf_SET
#define READ_DSC1BB_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL2r
#define WRITE_DSC1BB_DSC_ANA_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DSC_100FX_CTRL
 * BLOCKS:   DSC1BB
 * REGADDR:  0x825d
 * DESC:     DSC 100FX Control Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_100FX 
 *     CDROS_BWSEL_INTEG_100FX 
 *     PI_PHASE_STEP_MULT_100FX 
 *     PHASE_SAT_CTRL_100FX 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr (0x0002501d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DSC_100FX_CTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_s {
	uint32_t v[1];
	uint32_t dsc1bb_dsc_100fx_ctrl[1];
	uint32_t _dsc1bb_dsc_100fx_ctrl;
} BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CLR(r) (r).dsc1bb_dsc_100fx_ctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_SET(r,d) (r).dsc1bb_dsc_100fx_ctrl[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_GET(r) (r).dsc1bb_dsc_100fx_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dsc_100fx_ctrl[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dsc_100fx_ctrl[0]=(((r).dsc1bb_dsc_100fx_ctrl[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET(r) ((((r).dsc1bb_dsc_100fx_ctrl[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET(r,f) (r).dsc1bb_dsc_100fx_ctrl[0]=(((r).dsc1bb_dsc_100fx_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET(r) ((((r).dsc1bb_dsc_100fx_ctrl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET(r,f) (r).dsc1bb_dsc_100fx_ctrl[0]=(((r).dsc1bb_dsc_100fx_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET(r) ((((r).dsc1bb_dsc_100fx_ctrl[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET(r,f) (r).dsc1bb_dsc_100fx_ctrl[0]=(((r).dsc1bb_dsc_100fx_ctrl[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET(r) (((r).dsc1bb_dsc_100fx_ctrl[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET(r,f) (r).dsc1bb_dsc_100fx_ctrl[0]=(((r).dsc1bb_dsc_100fx_ctrl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC1BB_DSC_100FX_CTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr,(_r._dsc1bb_dsc_100fx_ctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_100FX_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr,(_r._dsc1bb_dsc_100fx_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr
#define DSC1BB_DSC_100FX_CTRLr_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_t DSC1BB_DSC_100FX_CTRLr_t;
#define DSC1BB_DSC_100FX_CTRLr_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CLR
#define DSC1BB_DSC_100FX_CTRLr_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_SET
#define DSC1BB_DSC_100FX_CTRLr_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_GET
#define DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_GET
#define DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PHASE_SAT_CTRL_100FXf_SET
#define DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_GET
#define DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_PI_PHASE_STEP_MULT_100FXf_SET
#define DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_GET
#define DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_INTEG_100FXf_SET
#define DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_GET
#define DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr_CDROS_BWSEL_PROP_100FXf_SET
#define READ_DSC1BB_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_100FX_CTRLr
#define WRITE_DSC1BB_DSC_100FX_CTRLr BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_100FX_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DSC_100FX_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC1BB_DSC_ANA_CTRL3
 * BLOCKS:   DSC1BB
 * REGADDR:  0x825e
 * DESC:     DSC Analog Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     FORCE_M1_ODD_CTRL 
 *     FORCE_D_ODD_CTRL 
 *     FORCE_P1_ODD_CTRL 
 *     FORCE_M1_EVN_CTRL 
 *     FORCE_D_EVN_CTRL 
 *     FORCE_P1_EVN_CTRL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r (0x0002501e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC1BB_DSC_ANA_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc1bb_dsc_ana_ctrl3[1];
	uint32_t _dsc1bb_dsc_ana_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_CLR(r) (r).dsc1bb_dsc_ana_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_SET(r,d) (r).dsc1bb_dsc_ana_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_GET(r) (r).dsc1bb_dsc_ana_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET(r) ((((r).dsc1bb_dsc_ana_ctrl3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET(r) (((r).dsc1bb_dsc_ana_ctrl3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET(r,f) (r).dsc1bb_dsc_ana_ctrl3[0]=(((r).dsc1bb_dsc_ana_ctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC1BB_DSC_ANA_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r,(_r._dsc1bb_dsc_ana_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r,(_r._dsc1bb_dsc_ana_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC1BB_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r
#define DSC1BB_DSC_ANA_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_t DSC1BB_DSC_ANA_CTRL3r_t;
#define DSC1BB_DSC_ANA_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_CLR
#define DSC1BB_DSC_ANA_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_SET
#define DSC1BB_DSC_ANA_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_GET
#define DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_EVN_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_P1_ODD_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_D_ODD_CTRLf_SET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_GET
#define DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r_FORCE_M1_ODD_CTRLf_SET
#define READ_DSC1BB_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC1BB_DSC_ANA_CTRL3r
#define WRITE_DSC1BB_DSC_ANA_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC1BB_DSC_ANA_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC1BB_DSC_ANA_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL0
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8260
 * DESC:     State Machine Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_SM_EN     
 *     RESTART_TUNING   
 *     BYPASS_OS_DATA_SLICER_CAL 
 *     BYPASS_BR_DATA_SLICER_CAL 
 *     BYPASS_PHASE_SLICER_CAL 
 *     BYPASS_OSX45_SLICER_CAL 
 *     BYPASS_DATA_SLICER_RECAL 
 *     BYPASS_OSX1_PF_CAL 
 *     BYPASS_OSX2_PF_CAL 
 *     BYPASS_BR_PF_CAL 
 *     SLICER_CAL_LINEAR_SRCH 
 *     HYSTERESIS_EN    
 *     POSTC_METRIC_CTRL 
 *     BYPASS_BR_VGA    
 *     BYPASS_TX_POSTC_CAL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r (0x00026010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL0r_s {
	uint32_t v[1];
	uint32_t sm_ctrl0[1];
	uint32_t _sm_ctrl0;
} BCMI_HYPERLITE_XGXS_SM_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_CLR(r) (r).sm_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_SET(r,d) (r).sm_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_GET(r) (r).sm_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_VGAf_GET(r) ((((r).sm_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_VGAf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_POSTC_METRIC_CTRLf_GET(r) ((((r).sm_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_POSTC_METRIC_CTRLf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_HYSTERESIS_ENf_GET(r) ((((r).sm_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_HYSTERESIS_ENf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET(r) ((((r).sm_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_PF_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_PF_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET(r) ((((r).sm_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET(r) ((((r).sm_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESTART_TUNINGf_GET(r) ((((r).sm_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESTART_TUNINGf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_TUNING_SM_ENf_GET(r) (((r).sm_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL0r_TUNING_SM_ENf_SET(r,f) (r).sm_ctrl0[0]=(((r).sm_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL0r,(_r._sm_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL0r,(_r._sm_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL0r BCMI_HYPERLITE_XGXS_SM_CTRL0r
#define SM_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL0r_t SM_CTRL0r_t;
#define SM_CTRL0r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL0r_CLR
#define SM_CTRL0r_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_SET
#define SM_CTRL0r_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_GET
#define SM_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET
#define SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET
#define SM_CTRL0r_BYPASS_BR_VGAf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_VGAf_GET
#define SM_CTRL0r_BYPASS_BR_VGAf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_VGAf_SET
#define SM_CTRL0r_POSTC_METRIC_CTRLf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_POSTC_METRIC_CTRLf_GET
#define SM_CTRL0r_POSTC_METRIC_CTRLf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_POSTC_METRIC_CTRLf_SET
#define SM_CTRL0r_HYSTERESIS_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_HYSTERESIS_ENf_GET
#define SM_CTRL0r_HYSTERESIS_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_HYSTERESIS_ENf_SET
#define SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET
#define SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET
#define SM_CTRL0r_BYPASS_BR_PF_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_PF_CALf_GET
#define SM_CTRL0r_BYPASS_BR_PF_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_PF_CALf_SET
#define SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET
#define SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET
#define SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET
#define SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET
#define SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET
#define SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET
#define SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET
#define SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET
#define SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET
#define SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET
#define SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET
#define SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET
#define SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET
#define SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET
#define SM_CTRL0r_RESTART_TUNINGf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESTART_TUNINGf_GET
#define SM_CTRL0r_RESTART_TUNINGf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_RESTART_TUNINGf_SET
#define SM_CTRL0r_TUNING_SM_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL0r_TUNING_SM_ENf_GET
#define SM_CTRL0r_TUNING_SM_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL0r_TUNING_SM_ENf_SET
#define READ_SM_CTRL0r BCMI_HYPERLITE_XGXS_READ_SM_CTRL0r
#define WRITE_SM_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL1
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8261
 * DESC:     State Machine Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     ACQCDR_TIMEOUT   
 *     ACQ1_TIMEOUT     
 *     ACQ2_TIMEOUT     
 *     FAST_TIMER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r (0x00026011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL1r_s {
	uint32_t v[1];
	uint32_t sm_ctrl1[1];
	uint32_t _sm_ctrl1;
} BCMI_HYPERLITE_XGXS_SM_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_CLR(r) (r).sm_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_SET(r,d) (r).sm_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_GET(r) (r).sm_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_FAST_TIMERf_GET(r) ((((r).sm_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_FAST_TIMERf_SET(r,f) (r).sm_ctrl1[0]=(((r).sm_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ2_TIMEOUTf_GET(r) ((((r).sm_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ2_TIMEOUTf_SET(r,f) (r).sm_ctrl1[0]=(((r).sm_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ1_TIMEOUTf_GET(r) ((((r).sm_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ1_TIMEOUTf_SET(r,f) (r).sm_ctrl1[0]=(((r).sm_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQCDR_TIMEOUTf_GET(r) (((r).sm_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQCDR_TIMEOUTf_SET(r,f) (r).sm_ctrl1[0]=(((r).sm_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL1r,(_r._sm_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL1r,(_r._sm_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL1r BCMI_HYPERLITE_XGXS_SM_CTRL1r
#define SM_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL1r_t SM_CTRL1r_t;
#define SM_CTRL1r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL1r_CLR
#define SM_CTRL1r_SET BCMI_HYPERLITE_XGXS_SM_CTRL1r_SET
#define SM_CTRL1r_GET BCMI_HYPERLITE_XGXS_SM_CTRL1r_GET
#define SM_CTRL1r_FAST_TIMERf_GET BCMI_HYPERLITE_XGXS_SM_CTRL1r_FAST_TIMERf_GET
#define SM_CTRL1r_FAST_TIMERf_SET BCMI_HYPERLITE_XGXS_SM_CTRL1r_FAST_TIMERf_SET
#define SM_CTRL1r_ACQ2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ2_TIMEOUTf_GET
#define SM_CTRL1r_ACQ2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ2_TIMEOUTf_SET
#define SM_CTRL1r_ACQ1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ1_TIMEOUTf_GET
#define SM_CTRL1r_ACQ1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQ1_TIMEOUTf_SET
#define SM_CTRL1r_ACQCDR_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQCDR_TIMEOUTf_GET
#define SM_CTRL1r_ACQCDR_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL1r_ACQCDR_TIMEOUTf_SET
#define READ_SM_CTRL1r BCMI_HYPERLITE_XGXS_READ_SM_CTRL1r
#define WRITE_SM_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL2
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8262
 * DESC:     State Machine Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRAIN_MODE_EN    
 *     SOFT_ACK         
 *     TRAIN1_REQ       
 *     TRAIN2_REQ       
 *     DSC_CLR_FRC      
 *     DSC_CLR_VAL      
 *     DFE_FRCFRZ       
 *     DFE_FRZVAL       
 *     VGA_FRCFRZ       
 *     VGA_FRZVAL       
 *     BYPASS_OS_INTEG_XFER 
 *     ACQVGA_TIMEOUT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r (0x00026012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL2r_s {
	uint32_t v[1];
	uint32_t sm_ctrl2[1];
	uint32_t _sm_ctrl2;
} BCMI_HYPERLITE_XGXS_SM_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_CLR(r) (r).sm_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_SET(r,d) (r).sm_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_GET(r) (r).sm_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_ACQVGA_TIMEOUTf_GET(r) ((((r).sm_ctrl2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_ACQVGA_TIMEOUTf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET(r) ((((r).sm_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRZVALf_GET(r) ((((r).sm_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRZVALf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRCFRZf_GET(r) ((((r).sm_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRCFRZf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRZVALf_GET(r) ((((r).sm_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRZVALf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRCFRZf_GET(r) ((((r).sm_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRCFRZf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_VALf_GET(r) ((((r).sm_ctrl2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_VALf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_FRCf_GET(r) ((((r).sm_ctrl2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_FRCf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN2_REQf_GET(r) ((((r).sm_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN2_REQf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN1_REQf_GET(r) ((((r).sm_ctrl2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN1_REQf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_SOFT_ACKf_GET(r) ((((r).sm_ctrl2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_SOFT_ACKf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN_MODE_ENf_GET(r) (((r).sm_ctrl2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN_MODE_ENf_SET(r,f) (r).sm_ctrl2[0]=(((r).sm_ctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL2r,(_r._sm_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL2r,(_r._sm_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL2r BCMI_HYPERLITE_XGXS_SM_CTRL2r
#define SM_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL2r_t SM_CTRL2r_t;
#define SM_CTRL2r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL2r_CLR
#define SM_CTRL2r_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_SET
#define SM_CTRL2r_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_GET
#define SM_CTRL2r_ACQVGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_ACQVGA_TIMEOUTf_GET
#define SM_CTRL2r_ACQVGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_ACQVGA_TIMEOUTf_SET
#define SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET
#define SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET
#define SM_CTRL2r_VGA_FRZVALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRZVALf_GET
#define SM_CTRL2r_VGA_FRZVALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRZVALf_SET
#define SM_CTRL2r_VGA_FRCFRZf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRCFRZf_GET
#define SM_CTRL2r_VGA_FRCFRZf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_VGA_FRCFRZf_SET
#define SM_CTRL2r_DFE_FRZVALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRZVALf_GET
#define SM_CTRL2r_DFE_FRZVALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRZVALf_SET
#define SM_CTRL2r_DFE_FRCFRZf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRCFRZf_GET
#define SM_CTRL2r_DFE_FRCFRZf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DFE_FRCFRZf_SET
#define SM_CTRL2r_DSC_CLR_VALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_VALf_GET
#define SM_CTRL2r_DSC_CLR_VALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_VALf_SET
#define SM_CTRL2r_DSC_CLR_FRCf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_FRCf_GET
#define SM_CTRL2r_DSC_CLR_FRCf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_DSC_CLR_FRCf_SET
#define SM_CTRL2r_TRAIN2_REQf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN2_REQf_GET
#define SM_CTRL2r_TRAIN2_REQf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN2_REQf_SET
#define SM_CTRL2r_TRAIN1_REQf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN1_REQf_GET
#define SM_CTRL2r_TRAIN1_REQf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN1_REQf_SET
#define SM_CTRL2r_SOFT_ACKf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_SOFT_ACKf_GET
#define SM_CTRL2r_SOFT_ACKf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_SOFT_ACKf_SET
#define SM_CTRL2r_TRAIN_MODE_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN_MODE_ENf_GET
#define SM_CTRL2r_TRAIN_MODE_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL2r_TRAIN_MODE_ENf_SET
#define READ_SM_CTRL2r BCMI_HYPERLITE_XGXS_READ_SM_CTRL2r
#define WRITE_SM_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL3
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8263
 * DESC:     State Machine Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_GAIN_ACQVGA  
 *     VGA_GAIN_ACQCDR  
 *     VGA_GAIN_ACQ1    
 *     VGA_GAIN_ACQ2    
 *     DFE_GAIN_ACQ1    
 *     DFE_GAIN_ACQ2    
 *     CDRBR_BWSEL_PROP_ACQCDR 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r (0x00026013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL3r_s {
	uint32_t v[1];
	uint32_t sm_ctrl3[1];
	uint32_t _sm_ctrl3;
} BCMI_HYPERLITE_XGXS_SM_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_CLR(r) (r).sm_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_SET(r,d) (r).sm_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_GET(r) (r).sm_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).sm_ctrl3[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ2f_GET(r) ((((r).sm_ctrl3[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ2f_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ1f_GET(r) ((((r).sm_ctrl3[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ1f_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ2f_GET(r) ((((r).sm_ctrl3[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ2f_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ1f_GET(r) ((((r).sm_ctrl3[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ1f_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET(r) ((((r).sm_ctrl3[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET(r) (((r).sm_ctrl3[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET(r,f) (r).sm_ctrl3[0]=(((r).sm_ctrl3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access SM_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL3r,(_r._sm_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL3r,(_r._sm_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL3r BCMI_HYPERLITE_XGXS_SM_CTRL3r
#define SM_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL3r_t SM_CTRL3r_t;
#define SM_CTRL3r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL3r_CLR
#define SM_CTRL3r_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_SET
#define SM_CTRL3r_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_GET
#define SM_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET
#define SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET
#define SM_CTRL3r_DFE_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ2f_GET
#define SM_CTRL3r_DFE_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ2f_SET
#define SM_CTRL3r_DFE_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ1f_GET
#define SM_CTRL3r_DFE_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_DFE_GAIN_ACQ1f_SET
#define SM_CTRL3r_VGA_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ2f_GET
#define SM_CTRL3r_VGA_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ2f_SET
#define SM_CTRL3r_VGA_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ1f_GET
#define SM_CTRL3r_VGA_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQ1f_SET
#define SM_CTRL3r_VGA_GAIN_ACQCDRf_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET
#define SM_CTRL3r_VGA_GAIN_ACQCDRf_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET
#define SM_CTRL3r_VGA_GAIN_ACQVGAf_GET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET
#define SM_CTRL3r_VGA_GAIN_ACQVGAf_SET BCMI_HYPERLITE_XGXS_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET
#define READ_SM_CTRL3r BCMI_HYPERLITE_XGXS_READ_SM_CTRL3r
#define WRITE_SM_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL4
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8264
 * DESC:     State Machine Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_BWSEL_PROP_ACQ1 
 *     CDRBR_BWSEL_PROP_ACQ2 
 *     CDRBR_BWSEL_INTEG_ACQCDR 
 *     CDRBR_BWSEL_INTEG_ACQ1 
 *     CDRBR_BWSEL_INTEG_ACQ2 
 *     CDROS45_BWSEL_INTEG_OFFSET 
 *     CDROS45_BWSEL_PROP_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r (0x00026014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL4r_s {
	uint32_t v[1];
	uint32_t sm_ctrl4[1];
	uint32_t _sm_ctrl4;
} BCMI_HYPERLITE_XGXS_SM_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CLR(r) (r).sm_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_SET(r,d) (r).sm_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_GET(r) (r).sm_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET(r) ((((r).sm_ctrl4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET(r) ((((r).sm_ctrl4[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET(r) ((((r).sm_ctrl4[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET(r) ((((r).sm_ctrl4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).sm_ctrl4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET(r) ((((r).sm_ctrl4[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET(r) (((r).sm_ctrl4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET(r,f) (r).sm_ctrl4[0]=(((r).sm_ctrl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SM_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL4r,(_r._sm_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL4r,(_r._sm_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL4r BCMI_HYPERLITE_XGXS_SM_CTRL4r
#define SM_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL4r_t SM_CTRL4r_t;
#define SM_CTRL4r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL4r_CLR
#define SM_CTRL4r_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_SET
#define SM_CTRL4r_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_GET
#define SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET
#define SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET
#define SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET
#define SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET
#define SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET
#define SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET
#define SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET
#define SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET
#define SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET BCMI_HYPERLITE_XGXS_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET
#define READ_SM_CTRL4r BCMI_HYPERLITE_XGXS_READ_SM_CTRL4r
#define WRITE_SM_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL5
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8265
 * DESC:     State Machine Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQCDR 
 *     CDROS_BWSEL_PROP_ACQ1_2 
 *     CDROS_BWSEL_INTEG_ACQCDR 
 *     CDROS_BWSEL_INTEG_ACQ1_2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r (0x00026015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL5r_s {
	uint32_t v[1];
	uint32_t sm_ctrl5[1];
	uint32_t _sm_ctrl5;
} BCMI_HYPERLITE_XGXS_SM_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CLR(r) (r).sm_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_SET(r,d) (r).sm_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_GET(r) (r).sm_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET(r) ((((r).sm_ctrl5[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET(r,f) (r).sm_ctrl5[0]=(((r).sm_ctrl5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).sm_ctrl5[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).sm_ctrl5[0]=(((r).sm_ctrl5[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET(r) ((((r).sm_ctrl5[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET(r,f) (r).sm_ctrl5[0]=(((r).sm_ctrl5[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET(r) (((r).sm_ctrl5[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET(r,f) (r).sm_ctrl5[0]=(((r).sm_ctrl5[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SM_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL5r,(_r._sm_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL5r,(_r._sm_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL5r BCMI_HYPERLITE_XGXS_SM_CTRL5r
#define SM_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL5r_t SM_CTRL5r_t;
#define SM_CTRL5r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL5r_CLR
#define SM_CTRL5r_SET BCMI_HYPERLITE_XGXS_SM_CTRL5r_SET
#define SM_CTRL5r_GET BCMI_HYPERLITE_XGXS_SM_CTRL5r_GET
#define SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET
#define SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET
#define SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET
#define SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET
#define SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET
#define SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET
#define SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET
#define SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET
#define READ_SM_CTRL5r BCMI_HYPERLITE_XGXS_READ_SM_CTRL5r
#define WRITE_SM_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL6
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8266
 * DESC:     State Machine Control 6 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQVGA 
 *     CDROS_BWSEL_INTEG_ACQVGA 
 *     CDRBR_BWSEL_PROP_ACQPHASE 
 *     CDRBR_BWSEL_INTEG_ACQPHASE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r (0x00026016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL6r_s {
	uint32_t v[1];
	uint32_t sm_ctrl6[1];
	uint32_t _sm_ctrl6;
} BCMI_HYPERLITE_XGXS_SM_CTRL6r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CLR(r) (r).sm_ctrl6[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_SET(r,d) (r).sm_ctrl6[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_GET(r) (r).sm_ctrl6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl6[0]=(((r).sm_ctrl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET(r) ((((r).sm_ctrl6[0]) >> 11) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET(r,f) (r).sm_ctrl6[0]=(((r).sm_ctrl6[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET(r) ((((r).sm_ctrl6[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET(r,f) (r).sm_ctrl6[0]=(((r).sm_ctrl6[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET(r) ((((r).sm_ctrl6[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET(r,f) (r).sm_ctrl6[0]=(((r).sm_ctrl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET(r) (((r).sm_ctrl6[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET(r,f) (r).sm_ctrl6[0]=(((r).sm_ctrl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SM_CTRL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL6r,(_r._sm_ctrl6))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL6r,(_r._sm_ctrl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL6r BCMI_HYPERLITE_XGXS_SM_CTRL6r
#define SM_CTRL6r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL6r_t SM_CTRL6r_t;
#define SM_CTRL6r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL6r_CLR
#define SM_CTRL6r_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_SET
#define SM_CTRL6r_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_GET
#define SM_CTRL6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET
#define SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET
#define SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET
#define SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET
#define SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET
#define SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET
#define SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET
#define SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET BCMI_HYPERLITE_XGXS_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET
#define READ_SM_CTRL6r BCMI_HYPERLITE_XGXS_READ_SM_CTRL6r
#define WRITE_SM_CTRL6r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL7
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8267
 * DESC:     State Machine Control 7 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL_OS_INIT  
 *     PF_CTRL_BR_INIT  
 *     PF_CTRL_OSX2_OFFSET 
 *     PF_CTRL_OSX1_OFFSET 
 *     PF_CTRL_BR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r (0x00026017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL7r_s {
	uint32_t v[1];
	uint32_t sm_ctrl7[1];
	uint32_t _sm_ctrl7;
} BCMI_HYPERLITE_XGXS_SM_CTRL7r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_CLR(r) (r).sm_ctrl7[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_SET(r,d) (r).sm_ctrl7[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_GET(r) (r).sm_ctrl7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl7[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET(r) ((((r).sm_ctrl7[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET(r) ((((r).sm_ctrl7[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET(r) ((((r).sm_ctrl7[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_INITf_GET(r) ((((r).sm_ctrl7[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_INITf_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OS_INITf_GET(r) (((r).sm_ctrl7[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OS_INITf_SET(r,f) (r).sm_ctrl7[0]=(((r).sm_ctrl7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SM_CTRL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL7r,(_r._sm_ctrl7))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL7r,(_r._sm_ctrl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL7r BCMI_HYPERLITE_XGXS_SM_CTRL7r
#define SM_CTRL7r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL7r_t SM_CTRL7r_t;
#define SM_CTRL7r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL7r_CLR
#define SM_CTRL7r_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_SET
#define SM_CTRL7r_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_GET
#define SM_CTRL7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET
#define SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET
#define SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET
#define SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET
#define SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET
#define SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET
#define SM_CTRL7r_PF_CTRL_BR_INITf_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_INITf_GET
#define SM_CTRL7r_PF_CTRL_BR_INITf_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_BR_INITf_SET
#define SM_CTRL7r_PF_CTRL_OS_INITf_GET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OS_INITf_GET
#define SM_CTRL7r_PF_CTRL_OS_INITf_SET BCMI_HYPERLITE_XGXS_SM_CTRL7r_PF_CTRL_OS_INITf_SET
#define READ_SM_CTRL7r BCMI_HYPERLITE_XGXS_READ_SM_CTRL7r
#define WRITE_SM_CTRL7r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL8
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8268
 * DESC:     State Machine Control 8 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_MIN_VAL      
 *     VGA_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r (0x00026018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL8r_s {
	uint32_t v[1];
	uint32_t sm_ctrl8[1];
	uint32_t _sm_ctrl8;
} BCMI_HYPERLITE_XGXS_SM_CTRL8r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_CLR(r) (r).sm_ctrl8[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_SET(r,d) (r).sm_ctrl8[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_GET(r) (r).sm_ctrl8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl8[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl8[0]=(((r).sm_ctrl8[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MAX_VALf_GET(r) ((((r).sm_ctrl8[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MAX_VALf_SET(r,f) (r).sm_ctrl8[0]=(((r).sm_ctrl8[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MIN_VALf_GET(r) (((r).sm_ctrl8[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MIN_VALf_SET(r,f) (r).sm_ctrl8[0]=(((r).sm_ctrl8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL8r,(_r._sm_ctrl8))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL8r,(_r._sm_ctrl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL8r BCMI_HYPERLITE_XGXS_SM_CTRL8r
#define SM_CTRL8r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL8r_t SM_CTRL8r_t;
#define SM_CTRL8r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL8r_CLR
#define SM_CTRL8r_SET BCMI_HYPERLITE_XGXS_SM_CTRL8r_SET
#define SM_CTRL8r_GET BCMI_HYPERLITE_XGXS_SM_CTRL8r_GET
#define SM_CTRL8r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL8r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL8r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL8r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL8r_VGA_MAX_VALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MAX_VALf_GET
#define SM_CTRL8r_VGA_MAX_VALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MAX_VALf_SET
#define SM_CTRL8r_VGA_MIN_VALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MIN_VALf_GET
#define SM_CTRL8r_VGA_MIN_VALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL8r_VGA_MIN_VALf_SET
#define READ_SM_CTRL8r BCMI_HYPERLITE_XGXS_READ_SM_CTRL8r
#define WRITE_SM_CTRL8r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL9
 * BLOCKS:   DSC2B0
 * REGADDR:  0x8269
 * DESC:     State Machine Control 9 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_MIN_VAL      
 *     DFE_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r (0x00026019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL9r_s {
	uint32_t v[1];
	uint32_t sm_ctrl9[1];
	uint32_t _sm_ctrl9;
} BCMI_HYPERLITE_XGXS_SM_CTRL9r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_CLR(r) (r).sm_ctrl9[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_SET(r,d) (r).sm_ctrl9[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_GET(r) (r).sm_ctrl9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl9[0]=(((r).sm_ctrl9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MAX_VALf_GET(r) ((((r).sm_ctrl9[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MAX_VALf_SET(r,f) (r).sm_ctrl9[0]=(((r).sm_ctrl9[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MIN_VALf_GET(r) (((r).sm_ctrl9[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MIN_VALf_SET(r,f) (r).sm_ctrl9[0]=(((r).sm_ctrl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access SM_CTRL9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL9r,(_r._sm_ctrl9))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL9r,(_r._sm_ctrl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL9r BCMI_HYPERLITE_XGXS_SM_CTRL9r
#define SM_CTRL9r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL9r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL9r_t SM_CTRL9r_t;
#define SM_CTRL9r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL9r_CLR
#define SM_CTRL9r_SET BCMI_HYPERLITE_XGXS_SM_CTRL9r_SET
#define SM_CTRL9r_GET BCMI_HYPERLITE_XGXS_SM_CTRL9r_GET
#define SM_CTRL9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL9r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL9r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL9r_DFE_MAX_VALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MAX_VALf_GET
#define SM_CTRL9r_DFE_MAX_VALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MAX_VALf_SET
#define SM_CTRL9r_DFE_MIN_VALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MIN_VALf_GET
#define SM_CTRL9r_DFE_MIN_VALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL9r_DFE_MIN_VALf_SET
#define READ_SM_CTRL9r BCMI_HYPERLITE_XGXS_READ_SM_CTRL9r
#define WRITE_SM_CTRL9r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL10
 * BLOCKS:   DSC2B0
 * REGADDR:  0x826a
 * DESC:     State Machine Control 10 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_PF_TAP_EN   
 *     BR_PF_TAP_EN     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r (0x0002601a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL10.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL10r_s {
	uint32_t v[1];
	uint32_t sm_ctrl10[1];
	uint32_t _sm_ctrl10;
} BCMI_HYPERLITE_XGXS_SM_CTRL10r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_CLR(r) (r).sm_ctrl10[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_SET(r,d) (r).sm_ctrl10[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_GET(r) (r).sm_ctrl10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl10[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl10[0]=(((r).sm_ctrl10[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_BR_PF_TAP_ENf_GET(r) ((((r).sm_ctrl10[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_BR_PF_TAP_ENf_SET(r,f) (r).sm_ctrl10[0]=(((r).sm_ctrl10[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_OSX1_PF_TAP_ENf_GET(r) (((r).sm_ctrl10[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL10r_OSX1_PF_TAP_ENf_SET(r,f) (r).sm_ctrl10[0]=(((r).sm_ctrl10[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access SM_CTRL10.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL10r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL10r,(_r._sm_ctrl10))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL10r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL10r,(_r._sm_ctrl10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL10r BCMI_HYPERLITE_XGXS_SM_CTRL10r
#define SM_CTRL10r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL10r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL10r_t SM_CTRL10r_t;
#define SM_CTRL10r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL10r_CLR
#define SM_CTRL10r_SET BCMI_HYPERLITE_XGXS_SM_CTRL10r_SET
#define SM_CTRL10r_GET BCMI_HYPERLITE_XGXS_SM_CTRL10r_GET
#define SM_CTRL10r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL10r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL10r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL10r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL10r_BR_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL10r_BR_PF_TAP_ENf_GET
#define SM_CTRL10r_BR_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL10r_BR_PF_TAP_ENf_SET
#define SM_CTRL10r_OSX1_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL10r_OSX1_PF_TAP_ENf_GET
#define SM_CTRL10r_OSX1_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL10r_OSX1_PF_TAP_ENf_SET
#define READ_SM_CTRL10r BCMI_HYPERLITE_XGXS_READ_SM_CTRL10r
#define WRITE_SM_CTRL10r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL11
 * BLOCKS:   DSC2B0
 * REGADDR:  0x826b
 * DESC:     State Machine Control 11 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_POSTC_TIMEOUT 
 *     HYSTERESIS_TIMEOUT 
 *     MSR_BR_VGA_TIMEOUT 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r (0x0002601b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL11.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL11r_s {
	uint32_t v[1];
	uint32_t sm_ctrl11[1];
	uint32_t _sm_ctrl11;
} BCMI_HYPERLITE_XGXS_SM_CTRL11r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_CLR(r) (r).sm_ctrl11[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_SET(r,d) (r).sm_ctrl11[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_GET(r) (r).sm_ctrl11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl11[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl11[0]=(((r).sm_ctrl11[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET(r) ((((r).sm_ctrl11[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET(r,f) (r).sm_ctrl11[0]=(((r).sm_ctrl11[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET(r) ((((r).sm_ctrl11[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET(r,f) (r).sm_ctrl11[0]=(((r).sm_ctrl11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET(r) (((r).sm_ctrl11[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET(r,f) (r).sm_ctrl11[0]=(((r).sm_ctrl11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL11.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL11r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL11r,(_r._sm_ctrl11))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL11r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL11r,(_r._sm_ctrl11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL11r BCMI_HYPERLITE_XGXS_SM_CTRL11r
#define SM_CTRL11r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL11r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL11r_t SM_CTRL11r_t;
#define SM_CTRL11r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL11r_CLR
#define SM_CTRL11r_SET BCMI_HYPERLITE_XGXS_SM_CTRL11r_SET
#define SM_CTRL11r_GET BCMI_HYPERLITE_XGXS_SM_CTRL11r_GET
#define SM_CTRL11r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL11r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL11r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL11r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET
#define SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET
#define SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET
#define SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET
#define SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET
#define SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET
#define READ_SM_CTRL11r BCMI_HYPERLITE_XGXS_READ_SM_CTRL11r
#define WRITE_SM_CTRL11r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL12
 * BLOCKS:   DSC2B0
 * REGADDR:  0x826c
 * DESC:     State Machine Control 12 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_PF_TIMEOUT   
 *     CDR_PHASE_INVERSION_TIMEOUT 
 *     POSTC_DFE_LMS_GAIN 
 *     BR_VGA_LMS_GAIN  
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r (0x0002601c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL12r_s {
	uint32_t v[1];
	uint32_t sm_ctrl12[1];
	uint32_t _sm_ctrl12;
} BCMI_HYPERLITE_XGXS_SM_CTRL12r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_CLR(r) (r).sm_ctrl12[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_SET(r,d) (r).sm_ctrl12[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_GET(r) (r).sm_ctrl12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_ctrl12[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_ctrl12[0]=(((r).sm_ctrl12[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_BR_VGA_LMS_GAINf_GET(r) ((((r).sm_ctrl12[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_BR_VGA_LMS_GAINf_SET(r,f) (r).sm_ctrl12[0]=(((r).sm_ctrl12[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET(r) ((((r).sm_ctrl12[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET(r,f) (r).sm_ctrl12[0]=(((r).sm_ctrl12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET(r) ((((r).sm_ctrl12[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET(r,f) (r).sm_ctrl12[0]=(((r).sm_ctrl12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_MSR_PF_TIMEOUTf_GET(r) (((r).sm_ctrl12[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL12r_MSR_PF_TIMEOUTf_SET(r,f) (r).sm_ctrl12[0]=(((r).sm_ctrl12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL12r,(_r._sm_ctrl12))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL12r,(_r._sm_ctrl12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL12r BCMI_HYPERLITE_XGXS_SM_CTRL12r
#define SM_CTRL12r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL12r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL12r_t SM_CTRL12r_t;
#define SM_CTRL12r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL12r_CLR
#define SM_CTRL12r_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_SET
#define SM_CTRL12r_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_GET
#define SM_CTRL12r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_RESERVED_FOR_ECO0f_GET
#define SM_CTRL12r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_RESERVED_FOR_ECO0f_SET
#define SM_CTRL12r_BR_VGA_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_BR_VGA_LMS_GAINf_GET
#define SM_CTRL12r_BR_VGA_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_BR_VGA_LMS_GAINf_SET
#define SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET
#define SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET
#define SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET
#define SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET
#define SM_CTRL12r_MSR_PF_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL12r_MSR_PF_TIMEOUTf_GET
#define SM_CTRL12r_MSR_PF_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL12r_MSR_PF_TIMEOUTf_SET
#define READ_SM_CTRL12r BCMI_HYPERLITE_XGXS_READ_SM_CTRL12r
#define WRITE_SM_CTRL12r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_DIAG_CTRL0
 * BLOCKS:   DSC2B0
 * REGADDR:  0x826d
 * DESC:     DSC Diagnostics Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DIAGNOSTICS_EN   
 *     HOFFSET          
 *     VOFFSET          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r (0x0002601d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_DIAG_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc_diag_ctrl0[1];
	uint32_t _dsc_diag_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_CLR(r) (r).dsc_diag_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_SET(r,d) (r).dsc_diag_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_GET(r) (r).dsc_diag_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc_diag_ctrl0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc_diag_ctrl0[0]=(((r).dsc_diag_ctrl0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_VOFFSETf_GET(r) ((((r).dsc_diag_ctrl0[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_VOFFSETf_SET(r,f) (r).dsc_diag_ctrl0[0]=(((r).dsc_diag_ctrl0[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_HOFFSETf_GET(r) ((((r).dsc_diag_ctrl0[0]) >> 1) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_HOFFSETf_SET(r,f) (r).dsc_diag_ctrl0[0]=(((r).dsc_diag_ctrl0[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET(r) (((r).dsc_diag_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET(r,f) (r).dsc_diag_ctrl0[0]=(((r).dsc_diag_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC_DIAG_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r,(_r._dsc_diag_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r,(_r._dsc_diag_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r
#define DSC_DIAG_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_t DSC_DIAG_CTRL0r_t;
#define DSC_DIAG_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_CLR
#define DSC_DIAG_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_SET
#define DSC_DIAG_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_GET
#define DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC_DIAG_CTRL0r_VOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_VOFFSETf_GET
#define DSC_DIAG_CTRL0r_VOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_VOFFSETf_SET
#define DSC_DIAG_CTRL0r_HOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_HOFFSETf_GET
#define DSC_DIAG_CTRL0r_HOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_HOFFSETf_SET
#define DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET
#define DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET
#define READ_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC_DIAG_CTRL0r
#define WRITE_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC_DIAG_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_DIAG_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC_MISC_CTRL0
 * BLOCKS:   DSC2B0
 * REGADDR:  0x826e
 * DESC:     DSC Misc Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TEST_BUS_SEL     
 *     OSR_MODE_FORCE_VAL 
 *     OSR_MODE_FORCE   
 *     CDRBR_SEL_FORCE_VAL 
 *     CDRBR_SEL_FORCE  
 *     RESERVED_FOR_ECO0 
 *     ENABLE_ACOR_PICW 
 *     FORCERXSEQDONE   
 *     RXSEQSTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r (0x0002601e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC_MISC_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc_misc_ctrl0[1];
	uint32_t _dsc_misc_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CLR(r) (r).dsc_misc_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_SET(r,d) (r).dsc_misc_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_GET(r) (r).dsc_misc_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RXSEQSTARTf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RXSEQSTARTf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET(r) ((((r).dsc_misc_ctrl0[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET(r) (((r).dsc_misc_ctrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET(r,f) (r).dsc_misc_ctrl0[0]=(((r).dsc_misc_ctrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC_MISC_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r,(_r._dsc_misc_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r,(_r._dsc_misc_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r
#define DSC_MISC_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_t DSC_MISC_CTRL0r_t;
#define DSC_MISC_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CLR
#define DSC_MISC_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_SET
#define DSC_MISC_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_GET
#define DSC_MISC_CTRL0r_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RXSEQSTARTf_GET
#define DSC_MISC_CTRL0r_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RXSEQSTARTf_SET
#define DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET
#define DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET
#define DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET
#define DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET
#define DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET
#define DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET
#define DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET
#define DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET
#define DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET
#define DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET
#define DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET
#define DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET
#define DSC_MISC_CTRL0r_TEST_BUS_SELf_GET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET
#define DSC_MISC_CTRL0r_TEST_BUS_SELf_SET BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET
#define READ_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC_MISC_CTRL0r
#define WRITE_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC_MISC_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC_MISC_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL0
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8270
 * DESC:     State Machine Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_SM_EN     
 *     RESTART_TUNING   
 *     BYPASS_OS_DATA_SLICER_CAL 
 *     BYPASS_BR_DATA_SLICER_CAL 
 *     BYPASS_PHASE_SLICER_CAL 
 *     BYPASS_OSX45_SLICER_CAL 
 *     BYPASS_DATA_SLICER_RECAL 
 *     BYPASS_OSX1_PF_CAL 
 *     BYPASS_OSX2_PF_CAL 
 *     BYPASS_BR_PF_CAL 
 *     SLICER_CAL_LINEAR_SRCH 
 *     HYSTERESIS_EN    
 *     POSTC_METRIC_CTRL 
 *     BYPASS_BR_VGA    
 *     BYPASS_TX_POSTC_CAL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r (0x00027010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl0[1];
	uint32_t _dsc2b1_sm_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_CLR(r) (r).dsc2b1_sm_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SET(r,d) (r).dsc2b1_sm_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_GET(r) (r).dsc2b1_sm_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESTART_TUNINGf_GET(r) ((((r).dsc2b1_sm_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESTART_TUNINGf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_TUNING_SM_ENf_GET(r) (((r).dsc2b1_sm_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_TUNING_SM_ENf_SET(r,f) (r).dsc2b1_sm_ctrl0[0]=(((r).dsc2b1_sm_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B1_SM_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r,(_r._dsc2b1_sm_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r,(_r._dsc2b1_sm_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r
#define DSC2B1_SM_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_t DSC2B1_SM_CTRL0r_t;
#define DSC2B1_SM_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_CLR
#define DSC2B1_SM_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SET
#define DSC2B1_SM_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_GET
#define DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_VGAf_SET
#define DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_GET
#define DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_POSTC_METRIC_CTRLf_SET
#define DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_GET
#define DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_HYSTERESIS_ENf_SET
#define DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET
#define DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_PF_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET
#define DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET
#define DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET
#define DSC2B1_SM_CTRL0r_RESTART_TUNINGf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESTART_TUNINGf_GET
#define DSC2B1_SM_CTRL0r_RESTART_TUNINGf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_RESTART_TUNINGf_SET
#define DSC2B1_SM_CTRL0r_TUNING_SM_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_TUNING_SM_ENf_GET
#define DSC2B1_SM_CTRL0r_TUNING_SM_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r_TUNING_SM_ENf_SET
#define READ_DSC2B1_SM_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL0r
#define WRITE_DSC2B1_SM_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL1
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8271
 * DESC:     State Machine Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     ACQCDR_TIMEOUT   
 *     ACQ1_TIMEOUT     
 *     ACQ2_TIMEOUT     
 *     FAST_TIMER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r (0x00027011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl1[1];
	uint32_t _dsc2b1_sm_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_CLR(r) (r).dsc2b1_sm_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_SET(r,d) (r).dsc2b1_sm_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_GET(r) (r).dsc2b1_sm_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_FAST_TIMERf_GET(r) ((((r).dsc2b1_sm_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_FAST_TIMERf_SET(r,f) (r).dsc2b1_sm_ctrl1[0]=(((r).dsc2b1_sm_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl1[0]=(((r).dsc2b1_sm_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl1[0]=(((r).dsc2b1_sm_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_GET(r) (((r).dsc2b1_sm_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl1[0]=(((r).dsc2b1_sm_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r,(_r._dsc2b1_sm_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r,(_r._dsc2b1_sm_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL1r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r
#define DSC2B1_SM_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_t DSC2B1_SM_CTRL1r_t;
#define DSC2B1_SM_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_CLR
#define DSC2B1_SM_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_SET
#define DSC2B1_SM_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_GET
#define DSC2B1_SM_CTRL1r_FAST_TIMERf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_FAST_TIMERf_GET
#define DSC2B1_SM_CTRL1r_FAST_TIMERf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_FAST_TIMERf_SET
#define DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_GET
#define DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ2_TIMEOUTf_SET
#define DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_GET
#define DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQ1_TIMEOUTf_SET
#define DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_GET
#define DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r_ACQCDR_TIMEOUTf_SET
#define READ_DSC2B1_SM_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL1r
#define WRITE_DSC2B1_SM_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL2
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8272
 * DESC:     State Machine Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRAIN_MODE_EN    
 *     SOFT_ACK         
 *     TRAIN1_REQ       
 *     TRAIN2_REQ       
 *     DSC_CLR_FRC      
 *     DSC_CLR_VAL      
 *     DFE_FRCFRZ       
 *     DFE_FRZVAL       
 *     VGA_FRCFRZ       
 *     VGA_FRZVAL       
 *     BYPASS_OS_INTEG_XFER 
 *     ACQVGA_TIMEOUT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r (0x00027012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl2[1];
	uint32_t _dsc2b1_sm_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_CLR(r) (r).dsc2b1_sm_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SET(r,d) (r).dsc2b1_sm_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_GET(r) (r).dsc2b1_sm_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRZVALf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRZVALf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRCFRZf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRCFRZf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRZVALf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRZVALf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRCFRZf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRCFRZf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_VALf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_VALf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN2_REQf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN2_REQf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN1_REQf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN1_REQf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SOFT_ACKf_GET(r) ((((r).dsc2b1_sm_ctrl2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SOFT_ACKf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_GET(r) (((r).dsc2b1_sm_ctrl2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_SET(r,f) (r).dsc2b1_sm_ctrl2[0]=(((r).dsc2b1_sm_ctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B1_SM_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r,(_r._dsc2b1_sm_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r,(_r._dsc2b1_sm_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL2r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r
#define DSC2B1_SM_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_t DSC2B1_SM_CTRL2r_t;
#define DSC2B1_SM_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_CLR
#define DSC2B1_SM_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SET
#define DSC2B1_SM_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_GET
#define DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_GET
#define DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_ACQVGA_TIMEOUTf_SET
#define DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET
#define DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET
#define DSC2B1_SM_CTRL2r_VGA_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRZVALf_GET
#define DSC2B1_SM_CTRL2r_VGA_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRZVALf_SET
#define DSC2B1_SM_CTRL2r_VGA_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRCFRZf_GET
#define DSC2B1_SM_CTRL2r_VGA_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_VGA_FRCFRZf_SET
#define DSC2B1_SM_CTRL2r_DFE_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRZVALf_GET
#define DSC2B1_SM_CTRL2r_DFE_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRZVALf_SET
#define DSC2B1_SM_CTRL2r_DFE_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRCFRZf_GET
#define DSC2B1_SM_CTRL2r_DFE_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DFE_FRCFRZf_SET
#define DSC2B1_SM_CTRL2r_DSC_CLR_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_VALf_GET
#define DSC2B1_SM_CTRL2r_DSC_CLR_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_VALf_SET
#define DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_GET
#define DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_DSC_CLR_FRCf_SET
#define DSC2B1_SM_CTRL2r_TRAIN2_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN2_REQf_GET
#define DSC2B1_SM_CTRL2r_TRAIN2_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN2_REQf_SET
#define DSC2B1_SM_CTRL2r_TRAIN1_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN1_REQf_GET
#define DSC2B1_SM_CTRL2r_TRAIN1_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN1_REQf_SET
#define DSC2B1_SM_CTRL2r_SOFT_ACKf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SOFT_ACKf_GET
#define DSC2B1_SM_CTRL2r_SOFT_ACKf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_SOFT_ACKf_SET
#define DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_GET
#define DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r_TRAIN_MODE_ENf_SET
#define READ_DSC2B1_SM_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL2r
#define WRITE_DSC2B1_SM_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL3
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8273
 * DESC:     State Machine Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_GAIN_ACQVGA  
 *     VGA_GAIN_ACQCDR  
 *     VGA_GAIN_ACQ1    
 *     VGA_GAIN_ACQ2    
 *     DFE_GAIN_ACQ1    
 *     DFE_GAIN_ACQ2    
 *     CDRBR_BWSEL_PROP_ACQCDR 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r (0x00027013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl3[1];
	uint32_t _dsc2b1_sm_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CLR(r) (r).dsc2b1_sm_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_SET(r,d) (r).dsc2b1_sm_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_GET(r) (r).dsc2b1_sm_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET(r) ((((r).dsc2b1_sm_ctrl3[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET(r) (((r).dsc2b1_sm_ctrl3[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET(r,f) (r).dsc2b1_sm_ctrl3[0]=(((r).dsc2b1_sm_ctrl3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DSC2B1_SM_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r,(_r._dsc2b1_sm_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r,(_r._dsc2b1_sm_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL3r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r
#define DSC2B1_SM_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_t DSC2B1_SM_CTRL3r_t;
#define DSC2B1_SM_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CLR
#define DSC2B1_SM_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_SET
#define DSC2B1_SM_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_GET
#define DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET
#define DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET
#define DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_GET
#define DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ2f_SET
#define DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_GET
#define DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_DFE_GAIN_ACQ1f_SET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_GET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ2f_SET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_GET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQ1f_SET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET
#define DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET
#define READ_DSC2B1_SM_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL3r
#define WRITE_DSC2B1_SM_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL4
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8274
 * DESC:     State Machine Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_BWSEL_PROP_ACQ1 
 *     CDRBR_BWSEL_PROP_ACQ2 
 *     CDRBR_BWSEL_INTEG_ACQCDR 
 *     CDRBR_BWSEL_INTEG_ACQ1 
 *     CDRBR_BWSEL_INTEG_ACQ2 
 *     CDROS45_BWSEL_INTEG_OFFSET 
 *     CDROS45_BWSEL_PROP_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r (0x00027014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl4[1];
	uint32_t _dsc2b1_sm_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CLR(r) (r).dsc2b1_sm_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_SET(r,d) (r).dsc2b1_sm_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_GET(r) (r).dsc2b1_sm_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET(r) ((((r).dsc2b1_sm_ctrl4[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET(r) (((r).dsc2b1_sm_ctrl4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET(r,f) (r).dsc2b1_sm_ctrl4[0]=(((r).dsc2b1_sm_ctrl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B1_SM_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r,(_r._dsc2b1_sm_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r,(_r._dsc2b1_sm_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL4r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r
#define DSC2B1_SM_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_t DSC2B1_SM_CTRL4r_t;
#define DSC2B1_SM_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CLR
#define DSC2B1_SM_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_SET
#define DSC2B1_SM_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_GET
#define DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET
#define DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET
#define DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET
#define DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET
#define DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET
#define READ_DSC2B1_SM_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL4r
#define WRITE_DSC2B1_SM_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL5
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8275
 * DESC:     State Machine Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQCDR 
 *     CDROS_BWSEL_PROP_ACQ1_2 
 *     CDROS_BWSEL_INTEG_ACQCDR 
 *     CDROS_BWSEL_INTEG_ACQ1_2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r (0x00027015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl5[1];
	uint32_t _dsc2b1_sm_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CLR(r) (r).dsc2b1_sm_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_SET(r,d) (r).dsc2b1_sm_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_GET(r) (r).dsc2b1_sm_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET(r) ((((r).dsc2b1_sm_ctrl5[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET(r,f) (r).dsc2b1_sm_ctrl5[0]=(((r).dsc2b1_sm_ctrl5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b1_sm_ctrl5[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b1_sm_ctrl5[0]=(((r).dsc2b1_sm_ctrl5[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET(r) ((((r).dsc2b1_sm_ctrl5[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET(r,f) (r).dsc2b1_sm_ctrl5[0]=(((r).dsc2b1_sm_ctrl5[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET(r) (((r).dsc2b1_sm_ctrl5[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b1_sm_ctrl5[0]=(((r).dsc2b1_sm_ctrl5[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B1_SM_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r,(_r._dsc2b1_sm_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r,(_r._dsc2b1_sm_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL5r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r
#define DSC2B1_SM_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_t DSC2B1_SM_CTRL5r_t;
#define DSC2B1_SM_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CLR
#define DSC2B1_SM_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_SET
#define DSC2B1_SM_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_GET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET
#define DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET
#define READ_DSC2B1_SM_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL5r
#define WRITE_DSC2B1_SM_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL6
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8276
 * DESC:     State Machine Control 6 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQVGA 
 *     CDROS_BWSEL_INTEG_ACQVGA 
 *     CDRBR_BWSEL_PROP_ACQPHASE 
 *     CDRBR_BWSEL_INTEG_ACQPHASE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r (0x00027016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl6[1];
	uint32_t _dsc2b1_sm_ctrl6;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CLR(r) (r).dsc2b1_sm_ctrl6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_SET(r,d) (r).dsc2b1_sm_ctrl6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_GET(r) (r).dsc2b1_sm_ctrl6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl6[0]=(((r).dsc2b1_sm_ctrl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET(r) ((((r).dsc2b1_sm_ctrl6[0]) >> 11) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET(r,f) (r).dsc2b1_sm_ctrl6[0]=(((r).dsc2b1_sm_ctrl6[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET(r) ((((r).dsc2b1_sm_ctrl6[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET(r,f) (r).dsc2b1_sm_ctrl6[0]=(((r).dsc2b1_sm_ctrl6[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET(r) ((((r).dsc2b1_sm_ctrl6[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET(r,f) (r).dsc2b1_sm_ctrl6[0]=(((r).dsc2b1_sm_ctrl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET(r) (((r).dsc2b1_sm_ctrl6[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET(r,f) (r).dsc2b1_sm_ctrl6[0]=(((r).dsc2b1_sm_ctrl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B1_SM_CTRL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r,(_r._dsc2b1_sm_ctrl6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r,(_r._dsc2b1_sm_ctrl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL6r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r
#define DSC2B1_SM_CTRL6r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_t DSC2B1_SM_CTRL6r_t;
#define DSC2B1_SM_CTRL6r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CLR
#define DSC2B1_SM_CTRL6r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_SET
#define DSC2B1_SM_CTRL6r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_GET
#define DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET
#define DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET
#define DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET
#define DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET
#define DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET
#define DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET
#define DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET
#define DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET
#define READ_DSC2B1_SM_CTRL6r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL6r
#define WRITE_DSC2B1_SM_CTRL6r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL7
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8277
 * DESC:     State Machine Control 7 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL_OS_INIT  
 *     PF_CTRL_BR_INIT  
 *     PF_CTRL_OSX2_OFFSET 
 *     PF_CTRL_OSX1_OFFSET 
 *     PF_CTRL_BR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r (0x00027017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl7[1];
	uint32_t _dsc2b1_sm_ctrl7;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_CLR(r) (r).dsc2b1_sm_ctrl7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_SET(r,d) (r).dsc2b1_sm_ctrl7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_GET(r) (r).dsc2b1_sm_ctrl7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl7[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET(r) ((((r).dsc2b1_sm_ctrl7[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET(r) ((((r).dsc2b1_sm_ctrl7[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET(r) ((((r).dsc2b1_sm_ctrl7[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_GET(r) ((((r).dsc2b1_sm_ctrl7[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_GET(r) (((r).dsc2b1_sm_ctrl7[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_SET(r,f) (r).dsc2b1_sm_ctrl7[0]=(((r).dsc2b1_sm_ctrl7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B1_SM_CTRL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r,(_r._dsc2b1_sm_ctrl7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r,(_r._dsc2b1_sm_ctrl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL7r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r
#define DSC2B1_SM_CTRL7r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_t DSC2B1_SM_CTRL7r_t;
#define DSC2B1_SM_CTRL7r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_CLR
#define DSC2B1_SM_CTRL7r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_SET
#define DSC2B1_SM_CTRL7r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_GET
#define DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET
#define DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET
#define DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_GET
#define DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_BR_INITf_SET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_GET
#define DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r_PF_CTRL_OS_INITf_SET
#define READ_DSC2B1_SM_CTRL7r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL7r
#define WRITE_DSC2B1_SM_CTRL7r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL8
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8278
 * DESC:     State Machine Control 8 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_MIN_VAL      
 *     VGA_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r (0x00027018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl8[1];
	uint32_t _dsc2b1_sm_ctrl8;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_CLR(r) (r).dsc2b1_sm_ctrl8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_SET(r,d) (r).dsc2b1_sm_ctrl8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_GET(r) (r).dsc2b1_sm_ctrl8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl8[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl8[0]=(((r).dsc2b1_sm_ctrl8[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MAX_VALf_GET(r) ((((r).dsc2b1_sm_ctrl8[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MAX_VALf_SET(r,f) (r).dsc2b1_sm_ctrl8[0]=(((r).dsc2b1_sm_ctrl8[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MIN_VALf_GET(r) (((r).dsc2b1_sm_ctrl8[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MIN_VALf_SET(r,f) (r).dsc2b1_sm_ctrl8[0]=(((r).dsc2b1_sm_ctrl8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r,(_r._dsc2b1_sm_ctrl8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r,(_r._dsc2b1_sm_ctrl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL8r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r
#define DSC2B1_SM_CTRL8r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_t DSC2B1_SM_CTRL8r_t;
#define DSC2B1_SM_CTRL8r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_CLR
#define DSC2B1_SM_CTRL8r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_SET
#define DSC2B1_SM_CTRL8r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_GET
#define DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL8r_VGA_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MAX_VALf_GET
#define DSC2B1_SM_CTRL8r_VGA_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MAX_VALf_SET
#define DSC2B1_SM_CTRL8r_VGA_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MIN_VALf_GET
#define DSC2B1_SM_CTRL8r_VGA_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r_VGA_MIN_VALf_SET
#define READ_DSC2B1_SM_CTRL8r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL8r
#define WRITE_DSC2B1_SM_CTRL8r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL9
 * BLOCKS:   DSC2B1
 * REGADDR:  0x8279
 * DESC:     State Machine Control 9 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_MIN_VAL      
 *     DFE_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r (0x00027019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl9[1];
	uint32_t _dsc2b1_sm_ctrl9;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_CLR(r) (r).dsc2b1_sm_ctrl9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_SET(r,d) (r).dsc2b1_sm_ctrl9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_GET(r) (r).dsc2b1_sm_ctrl9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl9[0]=(((r).dsc2b1_sm_ctrl9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MAX_VALf_GET(r) ((((r).dsc2b1_sm_ctrl9[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MAX_VALf_SET(r,f) (r).dsc2b1_sm_ctrl9[0]=(((r).dsc2b1_sm_ctrl9[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MIN_VALf_GET(r) (((r).dsc2b1_sm_ctrl9[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MIN_VALf_SET(r,f) (r).dsc2b1_sm_ctrl9[0]=(((r).dsc2b1_sm_ctrl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r,(_r._dsc2b1_sm_ctrl9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r,(_r._dsc2b1_sm_ctrl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL9r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r
#define DSC2B1_SM_CTRL9r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_t DSC2B1_SM_CTRL9r_t;
#define DSC2B1_SM_CTRL9r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_CLR
#define DSC2B1_SM_CTRL9r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_SET
#define DSC2B1_SM_CTRL9r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_GET
#define DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL9r_DFE_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MAX_VALf_GET
#define DSC2B1_SM_CTRL9r_DFE_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MAX_VALf_SET
#define DSC2B1_SM_CTRL9r_DFE_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MIN_VALf_GET
#define DSC2B1_SM_CTRL9r_DFE_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r_DFE_MIN_VALf_SET
#define READ_DSC2B1_SM_CTRL9r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL9r
#define WRITE_DSC2B1_SM_CTRL9r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL10
 * BLOCKS:   DSC2B1
 * REGADDR:  0x827a
 * DESC:     State Machine Control 10 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_PF_TAP_EN   
 *     BR_PF_TAP_EN     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r (0x0002701a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL10.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl10[1];
	uint32_t _dsc2b1_sm_ctrl10;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_CLR(r) (r).dsc2b1_sm_ctrl10[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_SET(r,d) (r).dsc2b1_sm_ctrl10[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_GET(r) (r).dsc2b1_sm_ctrl10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl10[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl10[0]=(((r).dsc2b1_sm_ctrl10[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_GET(r) ((((r).dsc2b1_sm_ctrl10[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_SET(r,f) (r).dsc2b1_sm_ctrl10[0]=(((r).dsc2b1_sm_ctrl10[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_GET(r) (((r).dsc2b1_sm_ctrl10[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_SET(r,f) (r).dsc2b1_sm_ctrl10[0]=(((r).dsc2b1_sm_ctrl10[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL10.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL10r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r,(_r._dsc2b1_sm_ctrl10))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL10r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r,(_r._dsc2b1_sm_ctrl10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL10r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r
#define DSC2B1_SM_CTRL10r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_t DSC2B1_SM_CTRL10r_t;
#define DSC2B1_SM_CTRL10r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_CLR
#define DSC2B1_SM_CTRL10r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_SET
#define DSC2B1_SM_CTRL10r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_GET
#define DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_GET
#define DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_BR_PF_TAP_ENf_SET
#define DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_GET
#define DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r_OSX1_PF_TAP_ENf_SET
#define READ_DSC2B1_SM_CTRL10r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL10r
#define WRITE_DSC2B1_SM_CTRL10r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL11
 * BLOCKS:   DSC2B1
 * REGADDR:  0x827b
 * DESC:     State Machine Control 11 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_POSTC_TIMEOUT 
 *     HYSTERESIS_TIMEOUT 
 *     MSR_BR_VGA_TIMEOUT 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r (0x0002701b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL11.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl11[1];
	uint32_t _dsc2b1_sm_ctrl11;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_CLR(r) (r).dsc2b1_sm_ctrl11[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_SET(r,d) (r).dsc2b1_sm_ctrl11[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_GET(r) (r).dsc2b1_sm_ctrl11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl11[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl11[0]=(((r).dsc2b1_sm_ctrl11[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl11[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl11[0]=(((r).dsc2b1_sm_ctrl11[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl11[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl11[0]=(((r).dsc2b1_sm_ctrl11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET(r) (((r).dsc2b1_sm_ctrl11[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl11[0]=(((r).dsc2b1_sm_ctrl11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL11.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL11r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r,(_r._dsc2b1_sm_ctrl11))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL11r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r,(_r._dsc2b1_sm_ctrl11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL11r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r
#define DSC2B1_SM_CTRL11r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_t DSC2B1_SM_CTRL11r_t;
#define DSC2B1_SM_CTRL11r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_CLR
#define DSC2B1_SM_CTRL11r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_SET
#define DSC2B1_SM_CTRL11r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_GET
#define DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET
#define DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET
#define DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET
#define DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET
#define DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET
#define DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET
#define READ_DSC2B1_SM_CTRL11r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL11r
#define WRITE_DSC2B1_SM_CTRL11r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_SM_CTRL12
 * BLOCKS:   DSC2B1
 * REGADDR:  0x827c
 * DESC:     State Machine Control 12 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_PF_TIMEOUT   
 *     CDR_PHASE_INVERSION_TIMEOUT 
 *     POSTC_DFE_LMS_GAIN 
 *     BR_VGA_LMS_GAIN  
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r (0x0002701c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_SM_CTRL12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_s {
	uint32_t v[1];
	uint32_t dsc2b1_sm_ctrl12[1];
	uint32_t _dsc2b1_sm_ctrl12;
} BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CLR(r) (r).dsc2b1_sm_ctrl12[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_SET(r,d) (r).dsc2b1_sm_ctrl12[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_GET(r) (r).dsc2b1_sm_ctrl12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_sm_ctrl12[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_sm_ctrl12[0]=(((r).dsc2b1_sm_ctrl12[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_GET(r) ((((r).dsc2b1_sm_ctrl12[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_SET(r,f) (r).dsc2b1_sm_ctrl12[0]=(((r).dsc2b1_sm_ctrl12[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET(r) ((((r).dsc2b1_sm_ctrl12[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET(r,f) (r).dsc2b1_sm_ctrl12[0]=(((r).dsc2b1_sm_ctrl12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET(r) ((((r).dsc2b1_sm_ctrl12[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl12[0]=(((r).dsc2b1_sm_ctrl12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_GET(r) (((r).dsc2b1_sm_ctrl12[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_SET(r,f) (r).dsc2b1_sm_ctrl12[0]=(((r).dsc2b1_sm_ctrl12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B1_SM_CTRL12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r,(_r._dsc2b1_sm_ctrl12))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r,(_r._dsc2b1_sm_ctrl12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_SM_CTRL12r BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r
#define DSC2B1_SM_CTRL12r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_t DSC2B1_SM_CTRL12r_t;
#define DSC2B1_SM_CTRL12r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CLR
#define DSC2B1_SM_CTRL12r_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_SET
#define DSC2B1_SM_CTRL12r_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_GET
#define DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_GET
#define DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_BR_VGA_LMS_GAINf_SET
#define DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET
#define DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET
#define DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET
#define DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET
#define DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_GET
#define DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r_MSR_PF_TIMEOUTf_SET
#define READ_DSC2B1_SM_CTRL12r BCMI_HYPERLITE_XGXS_READ_DSC2B1_SM_CTRL12r
#define WRITE_DSC2B1_SM_CTRL12r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_SM_CTRL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_SM_CTRL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_DSC_DIAG_CTRL0
 * BLOCKS:   DSC2B1
 * REGADDR:  0x827d
 * DESC:     DSC Diagnostics Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DIAGNOSTICS_EN   
 *     HOFFSET          
 *     VOFFSET          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r (0x0002701d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_DSC_DIAG_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b1_dsc_diag_ctrl0[1];
	uint32_t _dsc2b1_dsc_diag_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_CLR(r) (r).dsc2b1_dsc_diag_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_SET(r,d) (r).dsc2b1_dsc_diag_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_GET(r) (r).dsc2b1_dsc_diag_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_dsc_diag_ctrl0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_dsc_diag_ctrl0[0]=(((r).dsc2b1_dsc_diag_ctrl0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_GET(r) ((((r).dsc2b1_dsc_diag_ctrl0[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_SET(r,f) (r).dsc2b1_dsc_diag_ctrl0[0]=(((r).dsc2b1_dsc_diag_ctrl0[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_GET(r) ((((r).dsc2b1_dsc_diag_ctrl0[0]) >> 1) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_SET(r,f) (r).dsc2b1_dsc_diag_ctrl0[0]=(((r).dsc2b1_dsc_diag_ctrl0[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET(r) (((r).dsc2b1_dsc_diag_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET(r,f) (r).dsc2b1_dsc_diag_ctrl0[0]=(((r).dsc2b1_dsc_diag_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B1_DSC_DIAG_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r,(_r._dsc2b1_dsc_diag_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r,(_r._dsc2b1_dsc_diag_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r
#define DSC2B1_DSC_DIAG_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_t DSC2B1_DSC_DIAG_CTRL0r_t;
#define DSC2B1_DSC_DIAG_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_CLR
#define DSC2B1_DSC_DIAG_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_SET
#define DSC2B1_DSC_DIAG_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_GET
#define DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_GET
#define DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_VOFFSETf_SET
#define DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_GET
#define DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_HOFFSETf_SET
#define DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET
#define DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET
#define READ_DSC2B1_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B1_DSC_DIAG_CTRL0r
#define WRITE_DSC2B1_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_DSC_DIAG_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_DSC_DIAG_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B1_DSC_MISC_CTRL0
 * BLOCKS:   DSC2B1
 * REGADDR:  0x827e
 * DESC:     DSC Misc Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TEST_BUS_SEL     
 *     OSR_MODE_FORCE_VAL 
 *     OSR_MODE_FORCE   
 *     CDRBR_SEL_FORCE_VAL 
 *     CDRBR_SEL_FORCE  
 *     RESERVED_FOR_ECO0 
 *     ENABLE_ACOR_PICW 
 *     FORCERXSEQDONE   
 *     RXSEQSTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r (0x0002701e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B1_DSC_MISC_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b1_dsc_misc_ctrl0[1];
	uint32_t _dsc2b1_dsc_misc_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CLR(r) (r).dsc2b1_dsc_misc_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_SET(r,d) (r).dsc2b1_dsc_misc_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_GET(r) (r).dsc2b1_dsc_misc_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET(r) ((((r).dsc2b1_dsc_misc_ctrl0[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET(r) (((r).dsc2b1_dsc_misc_ctrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET(r,f) (r).dsc2b1_dsc_misc_ctrl0[0]=(((r).dsc2b1_dsc_misc_ctrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B1_DSC_MISC_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B1_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r,(_r._dsc2b1_dsc_misc_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r,(_r._dsc2b1_dsc_misc_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B1_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r
#define DSC2B1_DSC_MISC_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_t DSC2B1_DSC_MISC_CTRL0r_t;
#define DSC2B1_DSC_MISC_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CLR
#define DSC2B1_DSC_MISC_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_SET
#define DSC2B1_DSC_MISC_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_GET
#define DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_GET
#define DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RXSEQSTARTf_SET
#define DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET
#define DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET
#define DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET
#define DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET
#define DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET
#define DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET
#define DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET
#define DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET
#define DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET
#define DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET
#define DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET
#define DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET
#define DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET
#define DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET
#define READ_DSC2B1_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B1_DSC_MISC_CTRL0r
#define WRITE_DSC2B1_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B1_DSC_MISC_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B1_DSC_MISC_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL0
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8280
 * DESC:     State Machine Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_SM_EN     
 *     RESTART_TUNING   
 *     BYPASS_OS_DATA_SLICER_CAL 
 *     BYPASS_BR_DATA_SLICER_CAL 
 *     BYPASS_PHASE_SLICER_CAL 
 *     BYPASS_OSX45_SLICER_CAL 
 *     BYPASS_DATA_SLICER_RECAL 
 *     BYPASS_OSX1_PF_CAL 
 *     BYPASS_OSX2_PF_CAL 
 *     BYPASS_BR_PF_CAL 
 *     SLICER_CAL_LINEAR_SRCH 
 *     HYSTERESIS_EN    
 *     POSTC_METRIC_CTRL 
 *     BYPASS_BR_VGA    
 *     BYPASS_TX_POSTC_CAL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r (0x00028010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl0[1];
	uint32_t _dsc2b2_sm_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_CLR(r) (r).dsc2b2_sm_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SET(r,d) (r).dsc2b2_sm_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_GET(r) (r).dsc2b2_sm_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESTART_TUNINGf_GET(r) ((((r).dsc2b2_sm_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESTART_TUNINGf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_TUNING_SM_ENf_GET(r) (((r).dsc2b2_sm_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_TUNING_SM_ENf_SET(r,f) (r).dsc2b2_sm_ctrl0[0]=(((r).dsc2b2_sm_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B2_SM_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r,(_r._dsc2b2_sm_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r,(_r._dsc2b2_sm_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r
#define DSC2B2_SM_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_t DSC2B2_SM_CTRL0r_t;
#define DSC2B2_SM_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_CLR
#define DSC2B2_SM_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SET
#define DSC2B2_SM_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_GET
#define DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_VGAf_SET
#define DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_GET
#define DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_POSTC_METRIC_CTRLf_SET
#define DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_GET
#define DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_HYSTERESIS_ENf_SET
#define DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET
#define DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_PF_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET
#define DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET
#define DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET
#define DSC2B2_SM_CTRL0r_RESTART_TUNINGf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESTART_TUNINGf_GET
#define DSC2B2_SM_CTRL0r_RESTART_TUNINGf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_RESTART_TUNINGf_SET
#define DSC2B2_SM_CTRL0r_TUNING_SM_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_TUNING_SM_ENf_GET
#define DSC2B2_SM_CTRL0r_TUNING_SM_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r_TUNING_SM_ENf_SET
#define READ_DSC2B2_SM_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL0r
#define WRITE_DSC2B2_SM_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL1
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8281
 * DESC:     State Machine Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     ACQCDR_TIMEOUT   
 *     ACQ1_TIMEOUT     
 *     ACQ2_TIMEOUT     
 *     FAST_TIMER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r (0x00028011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl1[1];
	uint32_t _dsc2b2_sm_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_CLR(r) (r).dsc2b2_sm_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_SET(r,d) (r).dsc2b2_sm_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_GET(r) (r).dsc2b2_sm_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_FAST_TIMERf_GET(r) ((((r).dsc2b2_sm_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_FAST_TIMERf_SET(r,f) (r).dsc2b2_sm_ctrl1[0]=(((r).dsc2b2_sm_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl1[0]=(((r).dsc2b2_sm_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl1[0]=(((r).dsc2b2_sm_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_GET(r) (((r).dsc2b2_sm_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl1[0]=(((r).dsc2b2_sm_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r,(_r._dsc2b2_sm_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r,(_r._dsc2b2_sm_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL1r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r
#define DSC2B2_SM_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_t DSC2B2_SM_CTRL1r_t;
#define DSC2B2_SM_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_CLR
#define DSC2B2_SM_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_SET
#define DSC2B2_SM_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_GET
#define DSC2B2_SM_CTRL1r_FAST_TIMERf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_FAST_TIMERf_GET
#define DSC2B2_SM_CTRL1r_FAST_TIMERf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_FAST_TIMERf_SET
#define DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_GET
#define DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ2_TIMEOUTf_SET
#define DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_GET
#define DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQ1_TIMEOUTf_SET
#define DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_GET
#define DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r_ACQCDR_TIMEOUTf_SET
#define READ_DSC2B2_SM_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL1r
#define WRITE_DSC2B2_SM_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL2
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8282
 * DESC:     State Machine Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRAIN_MODE_EN    
 *     SOFT_ACK         
 *     TRAIN1_REQ       
 *     TRAIN2_REQ       
 *     DSC_CLR_FRC      
 *     DSC_CLR_VAL      
 *     DFE_FRCFRZ       
 *     DFE_FRZVAL       
 *     VGA_FRCFRZ       
 *     VGA_FRZVAL       
 *     BYPASS_OS_INTEG_XFER 
 *     ACQVGA_TIMEOUT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r (0x00028012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl2[1];
	uint32_t _dsc2b2_sm_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_CLR(r) (r).dsc2b2_sm_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SET(r,d) (r).dsc2b2_sm_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_GET(r) (r).dsc2b2_sm_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRZVALf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRZVALf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRCFRZf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRCFRZf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRZVALf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRZVALf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRCFRZf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRCFRZf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_VALf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_VALf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN2_REQf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN2_REQf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN1_REQf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN1_REQf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SOFT_ACKf_GET(r) ((((r).dsc2b2_sm_ctrl2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SOFT_ACKf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_GET(r) (((r).dsc2b2_sm_ctrl2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_SET(r,f) (r).dsc2b2_sm_ctrl2[0]=(((r).dsc2b2_sm_ctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B2_SM_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r,(_r._dsc2b2_sm_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r,(_r._dsc2b2_sm_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL2r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r
#define DSC2B2_SM_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_t DSC2B2_SM_CTRL2r_t;
#define DSC2B2_SM_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_CLR
#define DSC2B2_SM_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SET
#define DSC2B2_SM_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_GET
#define DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_GET
#define DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_ACQVGA_TIMEOUTf_SET
#define DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET
#define DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET
#define DSC2B2_SM_CTRL2r_VGA_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRZVALf_GET
#define DSC2B2_SM_CTRL2r_VGA_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRZVALf_SET
#define DSC2B2_SM_CTRL2r_VGA_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRCFRZf_GET
#define DSC2B2_SM_CTRL2r_VGA_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_VGA_FRCFRZf_SET
#define DSC2B2_SM_CTRL2r_DFE_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRZVALf_GET
#define DSC2B2_SM_CTRL2r_DFE_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRZVALf_SET
#define DSC2B2_SM_CTRL2r_DFE_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRCFRZf_GET
#define DSC2B2_SM_CTRL2r_DFE_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DFE_FRCFRZf_SET
#define DSC2B2_SM_CTRL2r_DSC_CLR_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_VALf_GET
#define DSC2B2_SM_CTRL2r_DSC_CLR_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_VALf_SET
#define DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_GET
#define DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_DSC_CLR_FRCf_SET
#define DSC2B2_SM_CTRL2r_TRAIN2_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN2_REQf_GET
#define DSC2B2_SM_CTRL2r_TRAIN2_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN2_REQf_SET
#define DSC2B2_SM_CTRL2r_TRAIN1_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN1_REQf_GET
#define DSC2B2_SM_CTRL2r_TRAIN1_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN1_REQf_SET
#define DSC2B2_SM_CTRL2r_SOFT_ACKf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SOFT_ACKf_GET
#define DSC2B2_SM_CTRL2r_SOFT_ACKf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_SOFT_ACKf_SET
#define DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_GET
#define DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r_TRAIN_MODE_ENf_SET
#define READ_DSC2B2_SM_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL2r
#define WRITE_DSC2B2_SM_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL3
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8283
 * DESC:     State Machine Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_GAIN_ACQVGA  
 *     VGA_GAIN_ACQCDR  
 *     VGA_GAIN_ACQ1    
 *     VGA_GAIN_ACQ2    
 *     DFE_GAIN_ACQ1    
 *     DFE_GAIN_ACQ2    
 *     CDRBR_BWSEL_PROP_ACQCDR 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r (0x00028013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl3[1];
	uint32_t _dsc2b2_sm_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CLR(r) (r).dsc2b2_sm_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_SET(r,d) (r).dsc2b2_sm_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_GET(r) (r).dsc2b2_sm_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET(r) ((((r).dsc2b2_sm_ctrl3[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET(r) (((r).dsc2b2_sm_ctrl3[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET(r,f) (r).dsc2b2_sm_ctrl3[0]=(((r).dsc2b2_sm_ctrl3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DSC2B2_SM_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r,(_r._dsc2b2_sm_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r,(_r._dsc2b2_sm_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL3r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r
#define DSC2B2_SM_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_t DSC2B2_SM_CTRL3r_t;
#define DSC2B2_SM_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CLR
#define DSC2B2_SM_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_SET
#define DSC2B2_SM_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_GET
#define DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET
#define DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET
#define DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_GET
#define DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ2f_SET
#define DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_GET
#define DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_DFE_GAIN_ACQ1f_SET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_GET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ2f_SET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_GET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQ1f_SET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET
#define DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET
#define READ_DSC2B2_SM_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL3r
#define WRITE_DSC2B2_SM_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL4
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8284
 * DESC:     State Machine Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_BWSEL_PROP_ACQ1 
 *     CDRBR_BWSEL_PROP_ACQ2 
 *     CDRBR_BWSEL_INTEG_ACQCDR 
 *     CDRBR_BWSEL_INTEG_ACQ1 
 *     CDRBR_BWSEL_INTEG_ACQ2 
 *     CDROS45_BWSEL_INTEG_OFFSET 
 *     CDROS45_BWSEL_PROP_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r (0x00028014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl4[1];
	uint32_t _dsc2b2_sm_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CLR(r) (r).dsc2b2_sm_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_SET(r,d) (r).dsc2b2_sm_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_GET(r) (r).dsc2b2_sm_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET(r) ((((r).dsc2b2_sm_ctrl4[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET(r) (((r).dsc2b2_sm_ctrl4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET(r,f) (r).dsc2b2_sm_ctrl4[0]=(((r).dsc2b2_sm_ctrl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B2_SM_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r,(_r._dsc2b2_sm_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r,(_r._dsc2b2_sm_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL4r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r
#define DSC2B2_SM_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_t DSC2B2_SM_CTRL4r_t;
#define DSC2B2_SM_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CLR
#define DSC2B2_SM_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_SET
#define DSC2B2_SM_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_GET
#define DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET
#define DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET
#define DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET
#define DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET
#define DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET
#define READ_DSC2B2_SM_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL4r
#define WRITE_DSC2B2_SM_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL5
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8285
 * DESC:     State Machine Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQCDR 
 *     CDROS_BWSEL_PROP_ACQ1_2 
 *     CDROS_BWSEL_INTEG_ACQCDR 
 *     CDROS_BWSEL_INTEG_ACQ1_2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r (0x00028015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl5[1];
	uint32_t _dsc2b2_sm_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CLR(r) (r).dsc2b2_sm_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_SET(r,d) (r).dsc2b2_sm_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_GET(r) (r).dsc2b2_sm_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET(r) ((((r).dsc2b2_sm_ctrl5[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET(r,f) (r).dsc2b2_sm_ctrl5[0]=(((r).dsc2b2_sm_ctrl5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b2_sm_ctrl5[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b2_sm_ctrl5[0]=(((r).dsc2b2_sm_ctrl5[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET(r) ((((r).dsc2b2_sm_ctrl5[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET(r,f) (r).dsc2b2_sm_ctrl5[0]=(((r).dsc2b2_sm_ctrl5[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET(r) (((r).dsc2b2_sm_ctrl5[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b2_sm_ctrl5[0]=(((r).dsc2b2_sm_ctrl5[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B2_SM_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r,(_r._dsc2b2_sm_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r,(_r._dsc2b2_sm_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL5r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r
#define DSC2B2_SM_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_t DSC2B2_SM_CTRL5r_t;
#define DSC2B2_SM_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CLR
#define DSC2B2_SM_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_SET
#define DSC2B2_SM_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_GET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET
#define DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET
#define READ_DSC2B2_SM_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL5r
#define WRITE_DSC2B2_SM_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL6
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8286
 * DESC:     State Machine Control 6 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQVGA 
 *     CDROS_BWSEL_INTEG_ACQVGA 
 *     CDRBR_BWSEL_PROP_ACQPHASE 
 *     CDRBR_BWSEL_INTEG_ACQPHASE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r (0x00028016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl6[1];
	uint32_t _dsc2b2_sm_ctrl6;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CLR(r) (r).dsc2b2_sm_ctrl6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_SET(r,d) (r).dsc2b2_sm_ctrl6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_GET(r) (r).dsc2b2_sm_ctrl6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl6[0]=(((r).dsc2b2_sm_ctrl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET(r) ((((r).dsc2b2_sm_ctrl6[0]) >> 11) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET(r,f) (r).dsc2b2_sm_ctrl6[0]=(((r).dsc2b2_sm_ctrl6[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET(r) ((((r).dsc2b2_sm_ctrl6[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET(r,f) (r).dsc2b2_sm_ctrl6[0]=(((r).dsc2b2_sm_ctrl6[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET(r) ((((r).dsc2b2_sm_ctrl6[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET(r,f) (r).dsc2b2_sm_ctrl6[0]=(((r).dsc2b2_sm_ctrl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET(r) (((r).dsc2b2_sm_ctrl6[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET(r,f) (r).dsc2b2_sm_ctrl6[0]=(((r).dsc2b2_sm_ctrl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B2_SM_CTRL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r,(_r._dsc2b2_sm_ctrl6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r,(_r._dsc2b2_sm_ctrl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL6r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r
#define DSC2B2_SM_CTRL6r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_t DSC2B2_SM_CTRL6r_t;
#define DSC2B2_SM_CTRL6r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CLR
#define DSC2B2_SM_CTRL6r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_SET
#define DSC2B2_SM_CTRL6r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_GET
#define DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET
#define DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET
#define DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET
#define DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET
#define DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET
#define DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET
#define DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET
#define DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET
#define READ_DSC2B2_SM_CTRL6r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL6r
#define WRITE_DSC2B2_SM_CTRL6r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL7
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8287
 * DESC:     State Machine Control 7 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL_OS_INIT  
 *     PF_CTRL_BR_INIT  
 *     PF_CTRL_OSX2_OFFSET 
 *     PF_CTRL_OSX1_OFFSET 
 *     PF_CTRL_BR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r (0x00028017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl7[1];
	uint32_t _dsc2b2_sm_ctrl7;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_CLR(r) (r).dsc2b2_sm_ctrl7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_SET(r,d) (r).dsc2b2_sm_ctrl7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_GET(r) (r).dsc2b2_sm_ctrl7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl7[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET(r) ((((r).dsc2b2_sm_ctrl7[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET(r) ((((r).dsc2b2_sm_ctrl7[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET(r) ((((r).dsc2b2_sm_ctrl7[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_GET(r) ((((r).dsc2b2_sm_ctrl7[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_GET(r) (((r).dsc2b2_sm_ctrl7[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_SET(r,f) (r).dsc2b2_sm_ctrl7[0]=(((r).dsc2b2_sm_ctrl7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B2_SM_CTRL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r,(_r._dsc2b2_sm_ctrl7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r,(_r._dsc2b2_sm_ctrl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL7r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r
#define DSC2B2_SM_CTRL7r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_t DSC2B2_SM_CTRL7r_t;
#define DSC2B2_SM_CTRL7r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_CLR
#define DSC2B2_SM_CTRL7r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_SET
#define DSC2B2_SM_CTRL7r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_GET
#define DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET
#define DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET
#define DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_GET
#define DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_BR_INITf_SET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_GET
#define DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r_PF_CTRL_OS_INITf_SET
#define READ_DSC2B2_SM_CTRL7r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL7r
#define WRITE_DSC2B2_SM_CTRL7r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL8
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8288
 * DESC:     State Machine Control 8 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_MIN_VAL      
 *     VGA_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r (0x00028018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl8[1];
	uint32_t _dsc2b2_sm_ctrl8;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_CLR(r) (r).dsc2b2_sm_ctrl8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_SET(r,d) (r).dsc2b2_sm_ctrl8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_GET(r) (r).dsc2b2_sm_ctrl8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl8[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl8[0]=(((r).dsc2b2_sm_ctrl8[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MAX_VALf_GET(r) ((((r).dsc2b2_sm_ctrl8[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MAX_VALf_SET(r,f) (r).dsc2b2_sm_ctrl8[0]=(((r).dsc2b2_sm_ctrl8[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MIN_VALf_GET(r) (((r).dsc2b2_sm_ctrl8[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MIN_VALf_SET(r,f) (r).dsc2b2_sm_ctrl8[0]=(((r).dsc2b2_sm_ctrl8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r,(_r._dsc2b2_sm_ctrl8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r,(_r._dsc2b2_sm_ctrl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL8r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r
#define DSC2B2_SM_CTRL8r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_t DSC2B2_SM_CTRL8r_t;
#define DSC2B2_SM_CTRL8r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_CLR
#define DSC2B2_SM_CTRL8r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_SET
#define DSC2B2_SM_CTRL8r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_GET
#define DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL8r_VGA_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MAX_VALf_GET
#define DSC2B2_SM_CTRL8r_VGA_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MAX_VALf_SET
#define DSC2B2_SM_CTRL8r_VGA_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MIN_VALf_GET
#define DSC2B2_SM_CTRL8r_VGA_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r_VGA_MIN_VALf_SET
#define READ_DSC2B2_SM_CTRL8r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL8r
#define WRITE_DSC2B2_SM_CTRL8r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL9
 * BLOCKS:   DSC2B2
 * REGADDR:  0x8289
 * DESC:     State Machine Control 9 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_MIN_VAL      
 *     DFE_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r (0x00028019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl9[1];
	uint32_t _dsc2b2_sm_ctrl9;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_CLR(r) (r).dsc2b2_sm_ctrl9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_SET(r,d) (r).dsc2b2_sm_ctrl9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_GET(r) (r).dsc2b2_sm_ctrl9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl9[0]=(((r).dsc2b2_sm_ctrl9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MAX_VALf_GET(r) ((((r).dsc2b2_sm_ctrl9[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MAX_VALf_SET(r,f) (r).dsc2b2_sm_ctrl9[0]=(((r).dsc2b2_sm_ctrl9[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MIN_VALf_GET(r) (((r).dsc2b2_sm_ctrl9[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MIN_VALf_SET(r,f) (r).dsc2b2_sm_ctrl9[0]=(((r).dsc2b2_sm_ctrl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r,(_r._dsc2b2_sm_ctrl9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r,(_r._dsc2b2_sm_ctrl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL9r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r
#define DSC2B2_SM_CTRL9r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_t DSC2B2_SM_CTRL9r_t;
#define DSC2B2_SM_CTRL9r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_CLR
#define DSC2B2_SM_CTRL9r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_SET
#define DSC2B2_SM_CTRL9r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_GET
#define DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL9r_DFE_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MAX_VALf_GET
#define DSC2B2_SM_CTRL9r_DFE_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MAX_VALf_SET
#define DSC2B2_SM_CTRL9r_DFE_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MIN_VALf_GET
#define DSC2B2_SM_CTRL9r_DFE_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r_DFE_MIN_VALf_SET
#define READ_DSC2B2_SM_CTRL9r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL9r
#define WRITE_DSC2B2_SM_CTRL9r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL10
 * BLOCKS:   DSC2B2
 * REGADDR:  0x828a
 * DESC:     State Machine Control 10 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_PF_TAP_EN   
 *     BR_PF_TAP_EN     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r (0x0002801a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL10.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl10[1];
	uint32_t _dsc2b2_sm_ctrl10;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_CLR(r) (r).dsc2b2_sm_ctrl10[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_SET(r,d) (r).dsc2b2_sm_ctrl10[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_GET(r) (r).dsc2b2_sm_ctrl10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl10[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl10[0]=(((r).dsc2b2_sm_ctrl10[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_GET(r) ((((r).dsc2b2_sm_ctrl10[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_SET(r,f) (r).dsc2b2_sm_ctrl10[0]=(((r).dsc2b2_sm_ctrl10[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_GET(r) (((r).dsc2b2_sm_ctrl10[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_SET(r,f) (r).dsc2b2_sm_ctrl10[0]=(((r).dsc2b2_sm_ctrl10[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL10.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL10r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r,(_r._dsc2b2_sm_ctrl10))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL10r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r,(_r._dsc2b2_sm_ctrl10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL10r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r
#define DSC2B2_SM_CTRL10r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_t DSC2B2_SM_CTRL10r_t;
#define DSC2B2_SM_CTRL10r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_CLR
#define DSC2B2_SM_CTRL10r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_SET
#define DSC2B2_SM_CTRL10r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_GET
#define DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_GET
#define DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_BR_PF_TAP_ENf_SET
#define DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_GET
#define DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r_OSX1_PF_TAP_ENf_SET
#define READ_DSC2B2_SM_CTRL10r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL10r
#define WRITE_DSC2B2_SM_CTRL10r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL11
 * BLOCKS:   DSC2B2
 * REGADDR:  0x828b
 * DESC:     State Machine Control 11 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_POSTC_TIMEOUT 
 *     HYSTERESIS_TIMEOUT 
 *     MSR_BR_VGA_TIMEOUT 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r (0x0002801b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL11.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl11[1];
	uint32_t _dsc2b2_sm_ctrl11;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_CLR(r) (r).dsc2b2_sm_ctrl11[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_SET(r,d) (r).dsc2b2_sm_ctrl11[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_GET(r) (r).dsc2b2_sm_ctrl11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl11[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl11[0]=(((r).dsc2b2_sm_ctrl11[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl11[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl11[0]=(((r).dsc2b2_sm_ctrl11[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl11[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl11[0]=(((r).dsc2b2_sm_ctrl11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET(r) (((r).dsc2b2_sm_ctrl11[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl11[0]=(((r).dsc2b2_sm_ctrl11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL11.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL11r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r,(_r._dsc2b2_sm_ctrl11))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL11r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r,(_r._dsc2b2_sm_ctrl11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL11r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r
#define DSC2B2_SM_CTRL11r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_t DSC2B2_SM_CTRL11r_t;
#define DSC2B2_SM_CTRL11r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_CLR
#define DSC2B2_SM_CTRL11r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_SET
#define DSC2B2_SM_CTRL11r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_GET
#define DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET
#define DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET
#define DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET
#define DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET
#define DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET
#define DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET
#define READ_DSC2B2_SM_CTRL11r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL11r
#define WRITE_DSC2B2_SM_CTRL11r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_SM_CTRL12
 * BLOCKS:   DSC2B2
 * REGADDR:  0x828c
 * DESC:     State Machine Control 12 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_PF_TIMEOUT   
 *     CDR_PHASE_INVERSION_TIMEOUT 
 *     POSTC_DFE_LMS_GAIN 
 *     BR_VGA_LMS_GAIN  
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r (0x0002801c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_SM_CTRL12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_s {
	uint32_t v[1];
	uint32_t dsc2b2_sm_ctrl12[1];
	uint32_t _dsc2b2_sm_ctrl12;
} BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CLR(r) (r).dsc2b2_sm_ctrl12[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_SET(r,d) (r).dsc2b2_sm_ctrl12[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_GET(r) (r).dsc2b2_sm_ctrl12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_sm_ctrl12[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_sm_ctrl12[0]=(((r).dsc2b2_sm_ctrl12[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_GET(r) ((((r).dsc2b2_sm_ctrl12[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_SET(r,f) (r).dsc2b2_sm_ctrl12[0]=(((r).dsc2b2_sm_ctrl12[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET(r) ((((r).dsc2b2_sm_ctrl12[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET(r,f) (r).dsc2b2_sm_ctrl12[0]=(((r).dsc2b2_sm_ctrl12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET(r) ((((r).dsc2b2_sm_ctrl12[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl12[0]=(((r).dsc2b2_sm_ctrl12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_GET(r) (((r).dsc2b2_sm_ctrl12[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_SET(r,f) (r).dsc2b2_sm_ctrl12[0]=(((r).dsc2b2_sm_ctrl12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B2_SM_CTRL12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r,(_r._dsc2b2_sm_ctrl12))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r,(_r._dsc2b2_sm_ctrl12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_SM_CTRL12r BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r
#define DSC2B2_SM_CTRL12r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_t DSC2B2_SM_CTRL12r_t;
#define DSC2B2_SM_CTRL12r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CLR
#define DSC2B2_SM_CTRL12r_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_SET
#define DSC2B2_SM_CTRL12r_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_GET
#define DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_GET
#define DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_BR_VGA_LMS_GAINf_SET
#define DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET
#define DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET
#define DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET
#define DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET
#define DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_GET
#define DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r_MSR_PF_TIMEOUTf_SET
#define READ_DSC2B2_SM_CTRL12r BCMI_HYPERLITE_XGXS_READ_DSC2B2_SM_CTRL12r
#define WRITE_DSC2B2_SM_CTRL12r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_SM_CTRL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_SM_CTRL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_DSC_DIAG_CTRL0
 * BLOCKS:   DSC2B2
 * REGADDR:  0x828d
 * DESC:     DSC Diagnostics Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DIAGNOSTICS_EN   
 *     HOFFSET          
 *     VOFFSET          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r (0x0002801d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_DSC_DIAG_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b2_dsc_diag_ctrl0[1];
	uint32_t _dsc2b2_dsc_diag_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_CLR(r) (r).dsc2b2_dsc_diag_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_SET(r,d) (r).dsc2b2_dsc_diag_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_GET(r) (r).dsc2b2_dsc_diag_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_dsc_diag_ctrl0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_dsc_diag_ctrl0[0]=(((r).dsc2b2_dsc_diag_ctrl0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_GET(r) ((((r).dsc2b2_dsc_diag_ctrl0[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_SET(r,f) (r).dsc2b2_dsc_diag_ctrl0[0]=(((r).dsc2b2_dsc_diag_ctrl0[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_GET(r) ((((r).dsc2b2_dsc_diag_ctrl0[0]) >> 1) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_SET(r,f) (r).dsc2b2_dsc_diag_ctrl0[0]=(((r).dsc2b2_dsc_diag_ctrl0[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET(r) (((r).dsc2b2_dsc_diag_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET(r,f) (r).dsc2b2_dsc_diag_ctrl0[0]=(((r).dsc2b2_dsc_diag_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B2_DSC_DIAG_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r,(_r._dsc2b2_dsc_diag_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r,(_r._dsc2b2_dsc_diag_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r
#define DSC2B2_DSC_DIAG_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_t DSC2B2_DSC_DIAG_CTRL0r_t;
#define DSC2B2_DSC_DIAG_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_CLR
#define DSC2B2_DSC_DIAG_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_SET
#define DSC2B2_DSC_DIAG_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_GET
#define DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_GET
#define DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_VOFFSETf_SET
#define DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_GET
#define DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_HOFFSETf_SET
#define DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET
#define DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET
#define READ_DSC2B2_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B2_DSC_DIAG_CTRL0r
#define WRITE_DSC2B2_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_DSC_DIAG_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_DSC_DIAG_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B2_DSC_MISC_CTRL0
 * BLOCKS:   DSC2B2
 * REGADDR:  0x828e
 * DESC:     DSC Misc Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TEST_BUS_SEL     
 *     OSR_MODE_FORCE_VAL 
 *     OSR_MODE_FORCE   
 *     CDRBR_SEL_FORCE_VAL 
 *     CDRBR_SEL_FORCE  
 *     RESERVED_FOR_ECO0 
 *     ENABLE_ACOR_PICW 
 *     FORCERXSEQDONE   
 *     RXSEQSTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r (0x0002801e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B2_DSC_MISC_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b2_dsc_misc_ctrl0[1];
	uint32_t _dsc2b2_dsc_misc_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CLR(r) (r).dsc2b2_dsc_misc_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_SET(r,d) (r).dsc2b2_dsc_misc_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_GET(r) (r).dsc2b2_dsc_misc_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET(r) ((((r).dsc2b2_dsc_misc_ctrl0[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET(r) (((r).dsc2b2_dsc_misc_ctrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET(r,f) (r).dsc2b2_dsc_misc_ctrl0[0]=(((r).dsc2b2_dsc_misc_ctrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B2_DSC_MISC_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B2_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r,(_r._dsc2b2_dsc_misc_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r,(_r._dsc2b2_dsc_misc_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B2_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r
#define DSC2B2_DSC_MISC_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_t DSC2B2_DSC_MISC_CTRL0r_t;
#define DSC2B2_DSC_MISC_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CLR
#define DSC2B2_DSC_MISC_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_SET
#define DSC2B2_DSC_MISC_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_GET
#define DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_GET
#define DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RXSEQSTARTf_SET
#define DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET
#define DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET
#define DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET
#define DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET
#define DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET
#define DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET
#define DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET
#define DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET
#define DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET
#define DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET
#define DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET
#define DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET
#define DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET
#define DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET
#define READ_DSC2B2_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B2_DSC_MISC_CTRL0r
#define WRITE_DSC2B2_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B2_DSC_MISC_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B2_DSC_MISC_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL0
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8290
 * DESC:     State Machine Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_SM_EN     
 *     RESTART_TUNING   
 *     BYPASS_OS_DATA_SLICER_CAL 
 *     BYPASS_BR_DATA_SLICER_CAL 
 *     BYPASS_PHASE_SLICER_CAL 
 *     BYPASS_OSX45_SLICER_CAL 
 *     BYPASS_DATA_SLICER_RECAL 
 *     BYPASS_OSX1_PF_CAL 
 *     BYPASS_OSX2_PF_CAL 
 *     BYPASS_BR_PF_CAL 
 *     SLICER_CAL_LINEAR_SRCH 
 *     HYSTERESIS_EN    
 *     POSTC_METRIC_CTRL 
 *     BYPASS_BR_VGA    
 *     BYPASS_TX_POSTC_CAL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r (0x00029010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl0[1];
	uint32_t _dsc2b3_sm_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_CLR(r) (r).dsc2b3_sm_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SET(r,d) (r).dsc2b3_sm_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_GET(r) (r).dsc2b3_sm_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESTART_TUNINGf_GET(r) ((((r).dsc2b3_sm_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESTART_TUNINGf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_TUNING_SM_ENf_GET(r) (((r).dsc2b3_sm_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_TUNING_SM_ENf_SET(r,f) (r).dsc2b3_sm_ctrl0[0]=(((r).dsc2b3_sm_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B3_SM_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r,(_r._dsc2b3_sm_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r,(_r._dsc2b3_sm_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r
#define DSC2B3_SM_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_t DSC2B3_SM_CTRL0r_t;
#define DSC2B3_SM_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_CLR
#define DSC2B3_SM_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SET
#define DSC2B3_SM_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_GET
#define DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_VGAf_SET
#define DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_GET
#define DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_POSTC_METRIC_CTRLf_SET
#define DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_GET
#define DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_HYSTERESIS_ENf_SET
#define DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET
#define DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_PF_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET
#define DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET
#define DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET
#define DSC2B3_SM_CTRL0r_RESTART_TUNINGf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESTART_TUNINGf_GET
#define DSC2B3_SM_CTRL0r_RESTART_TUNINGf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_RESTART_TUNINGf_SET
#define DSC2B3_SM_CTRL0r_TUNING_SM_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_TUNING_SM_ENf_GET
#define DSC2B3_SM_CTRL0r_TUNING_SM_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r_TUNING_SM_ENf_SET
#define READ_DSC2B3_SM_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL0r
#define WRITE_DSC2B3_SM_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL1
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8291
 * DESC:     State Machine Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     ACQCDR_TIMEOUT   
 *     ACQ1_TIMEOUT     
 *     ACQ2_TIMEOUT     
 *     FAST_TIMER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r (0x00029011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl1[1];
	uint32_t _dsc2b3_sm_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_CLR(r) (r).dsc2b3_sm_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_SET(r,d) (r).dsc2b3_sm_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_GET(r) (r).dsc2b3_sm_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_FAST_TIMERf_GET(r) ((((r).dsc2b3_sm_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_FAST_TIMERf_SET(r,f) (r).dsc2b3_sm_ctrl1[0]=(((r).dsc2b3_sm_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl1[0]=(((r).dsc2b3_sm_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl1[0]=(((r).dsc2b3_sm_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_GET(r) (((r).dsc2b3_sm_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl1[0]=(((r).dsc2b3_sm_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r,(_r._dsc2b3_sm_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r,(_r._dsc2b3_sm_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL1r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r
#define DSC2B3_SM_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_t DSC2B3_SM_CTRL1r_t;
#define DSC2B3_SM_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_CLR
#define DSC2B3_SM_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_SET
#define DSC2B3_SM_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_GET
#define DSC2B3_SM_CTRL1r_FAST_TIMERf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_FAST_TIMERf_GET
#define DSC2B3_SM_CTRL1r_FAST_TIMERf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_FAST_TIMERf_SET
#define DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_GET
#define DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ2_TIMEOUTf_SET
#define DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_GET
#define DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQ1_TIMEOUTf_SET
#define DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_GET
#define DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r_ACQCDR_TIMEOUTf_SET
#define READ_DSC2B3_SM_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL1r
#define WRITE_DSC2B3_SM_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL2
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8292
 * DESC:     State Machine Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRAIN_MODE_EN    
 *     SOFT_ACK         
 *     TRAIN1_REQ       
 *     TRAIN2_REQ       
 *     DSC_CLR_FRC      
 *     DSC_CLR_VAL      
 *     DFE_FRCFRZ       
 *     DFE_FRZVAL       
 *     VGA_FRCFRZ       
 *     VGA_FRZVAL       
 *     BYPASS_OS_INTEG_XFER 
 *     ACQVGA_TIMEOUT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r (0x00029012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl2[1];
	uint32_t _dsc2b3_sm_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_CLR(r) (r).dsc2b3_sm_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SET(r,d) (r).dsc2b3_sm_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_GET(r) (r).dsc2b3_sm_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRZVALf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRZVALf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRCFRZf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRCFRZf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRZVALf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRZVALf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRCFRZf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRCFRZf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_VALf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_VALf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN2_REQf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN2_REQf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN1_REQf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN1_REQf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SOFT_ACKf_GET(r) ((((r).dsc2b3_sm_ctrl2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SOFT_ACKf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_GET(r) (((r).dsc2b3_sm_ctrl2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_SET(r,f) (r).dsc2b3_sm_ctrl2[0]=(((r).dsc2b3_sm_ctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B3_SM_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r,(_r._dsc2b3_sm_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r,(_r._dsc2b3_sm_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL2r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r
#define DSC2B3_SM_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_t DSC2B3_SM_CTRL2r_t;
#define DSC2B3_SM_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_CLR
#define DSC2B3_SM_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SET
#define DSC2B3_SM_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_GET
#define DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_GET
#define DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_ACQVGA_TIMEOUTf_SET
#define DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET
#define DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET
#define DSC2B3_SM_CTRL2r_VGA_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRZVALf_GET
#define DSC2B3_SM_CTRL2r_VGA_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRZVALf_SET
#define DSC2B3_SM_CTRL2r_VGA_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRCFRZf_GET
#define DSC2B3_SM_CTRL2r_VGA_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_VGA_FRCFRZf_SET
#define DSC2B3_SM_CTRL2r_DFE_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRZVALf_GET
#define DSC2B3_SM_CTRL2r_DFE_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRZVALf_SET
#define DSC2B3_SM_CTRL2r_DFE_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRCFRZf_GET
#define DSC2B3_SM_CTRL2r_DFE_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DFE_FRCFRZf_SET
#define DSC2B3_SM_CTRL2r_DSC_CLR_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_VALf_GET
#define DSC2B3_SM_CTRL2r_DSC_CLR_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_VALf_SET
#define DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_GET
#define DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_DSC_CLR_FRCf_SET
#define DSC2B3_SM_CTRL2r_TRAIN2_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN2_REQf_GET
#define DSC2B3_SM_CTRL2r_TRAIN2_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN2_REQf_SET
#define DSC2B3_SM_CTRL2r_TRAIN1_REQf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN1_REQf_GET
#define DSC2B3_SM_CTRL2r_TRAIN1_REQf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN1_REQf_SET
#define DSC2B3_SM_CTRL2r_SOFT_ACKf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SOFT_ACKf_GET
#define DSC2B3_SM_CTRL2r_SOFT_ACKf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_SOFT_ACKf_SET
#define DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_GET
#define DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r_TRAIN_MODE_ENf_SET
#define READ_DSC2B3_SM_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL2r
#define WRITE_DSC2B3_SM_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL3
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8293
 * DESC:     State Machine Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_GAIN_ACQVGA  
 *     VGA_GAIN_ACQCDR  
 *     VGA_GAIN_ACQ1    
 *     VGA_GAIN_ACQ2    
 *     DFE_GAIN_ACQ1    
 *     DFE_GAIN_ACQ2    
 *     CDRBR_BWSEL_PROP_ACQCDR 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r (0x00029013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl3[1];
	uint32_t _dsc2b3_sm_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CLR(r) (r).dsc2b3_sm_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_SET(r,d) (r).dsc2b3_sm_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_GET(r) (r).dsc2b3_sm_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET(r) ((((r).dsc2b3_sm_ctrl3[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET(r) (((r).dsc2b3_sm_ctrl3[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET(r,f) (r).dsc2b3_sm_ctrl3[0]=(((r).dsc2b3_sm_ctrl3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DSC2B3_SM_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r,(_r._dsc2b3_sm_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r,(_r._dsc2b3_sm_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL3r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r
#define DSC2B3_SM_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_t DSC2B3_SM_CTRL3r_t;
#define DSC2B3_SM_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CLR
#define DSC2B3_SM_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_SET
#define DSC2B3_SM_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_GET
#define DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET
#define DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET
#define DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_GET
#define DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ2f_SET
#define DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_GET
#define DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_DFE_GAIN_ACQ1f_SET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_GET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ2f_SET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_GET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQ1f_SET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET
#define DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET
#define READ_DSC2B3_SM_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL3r
#define WRITE_DSC2B3_SM_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL4
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8294
 * DESC:     State Machine Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_BWSEL_PROP_ACQ1 
 *     CDRBR_BWSEL_PROP_ACQ2 
 *     CDRBR_BWSEL_INTEG_ACQCDR 
 *     CDRBR_BWSEL_INTEG_ACQ1 
 *     CDRBR_BWSEL_INTEG_ACQ2 
 *     CDROS45_BWSEL_INTEG_OFFSET 
 *     CDROS45_BWSEL_PROP_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r (0x00029014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl4[1];
	uint32_t _dsc2b3_sm_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CLR(r) (r).dsc2b3_sm_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_SET(r,d) (r).dsc2b3_sm_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_GET(r) (r).dsc2b3_sm_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET(r) ((((r).dsc2b3_sm_ctrl4[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET(r) (((r).dsc2b3_sm_ctrl4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET(r,f) (r).dsc2b3_sm_ctrl4[0]=(((r).dsc2b3_sm_ctrl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B3_SM_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r,(_r._dsc2b3_sm_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r,(_r._dsc2b3_sm_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL4r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r
#define DSC2B3_SM_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_t DSC2B3_SM_CTRL4r_t;
#define DSC2B3_SM_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CLR
#define DSC2B3_SM_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_SET
#define DSC2B3_SM_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_GET
#define DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET
#define DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET
#define DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET
#define DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET
#define DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET
#define READ_DSC2B3_SM_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL4r
#define WRITE_DSC2B3_SM_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL5
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8295
 * DESC:     State Machine Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQCDR 
 *     CDROS_BWSEL_PROP_ACQ1_2 
 *     CDROS_BWSEL_INTEG_ACQCDR 
 *     CDROS_BWSEL_INTEG_ACQ1_2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r (0x00029015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl5[1];
	uint32_t _dsc2b3_sm_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CLR(r) (r).dsc2b3_sm_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_SET(r,d) (r).dsc2b3_sm_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_GET(r) (r).dsc2b3_sm_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET(r) ((((r).dsc2b3_sm_ctrl5[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET(r,f) (r).dsc2b3_sm_ctrl5[0]=(((r).dsc2b3_sm_ctrl5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2b3_sm_ctrl5[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2b3_sm_ctrl5[0]=(((r).dsc2b3_sm_ctrl5[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET(r) ((((r).dsc2b3_sm_ctrl5[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET(r,f) (r).dsc2b3_sm_ctrl5[0]=(((r).dsc2b3_sm_ctrl5[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET(r) (((r).dsc2b3_sm_ctrl5[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2b3_sm_ctrl5[0]=(((r).dsc2b3_sm_ctrl5[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B3_SM_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r,(_r._dsc2b3_sm_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r,(_r._dsc2b3_sm_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL5r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r
#define DSC2B3_SM_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_t DSC2B3_SM_CTRL5r_t;
#define DSC2B3_SM_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CLR
#define DSC2B3_SM_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_SET
#define DSC2B3_SM_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_GET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET
#define DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET
#define READ_DSC2B3_SM_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL5r
#define WRITE_DSC2B3_SM_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL6
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8296
 * DESC:     State Machine Control 6 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQVGA 
 *     CDROS_BWSEL_INTEG_ACQVGA 
 *     CDRBR_BWSEL_PROP_ACQPHASE 
 *     CDRBR_BWSEL_INTEG_ACQPHASE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r (0x00029016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl6[1];
	uint32_t _dsc2b3_sm_ctrl6;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CLR(r) (r).dsc2b3_sm_ctrl6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_SET(r,d) (r).dsc2b3_sm_ctrl6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_GET(r) (r).dsc2b3_sm_ctrl6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl6[0]=(((r).dsc2b3_sm_ctrl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET(r) ((((r).dsc2b3_sm_ctrl6[0]) >> 11) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET(r,f) (r).dsc2b3_sm_ctrl6[0]=(((r).dsc2b3_sm_ctrl6[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET(r) ((((r).dsc2b3_sm_ctrl6[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET(r,f) (r).dsc2b3_sm_ctrl6[0]=(((r).dsc2b3_sm_ctrl6[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET(r) ((((r).dsc2b3_sm_ctrl6[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET(r,f) (r).dsc2b3_sm_ctrl6[0]=(((r).dsc2b3_sm_ctrl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET(r) (((r).dsc2b3_sm_ctrl6[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET(r,f) (r).dsc2b3_sm_ctrl6[0]=(((r).dsc2b3_sm_ctrl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B3_SM_CTRL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r,(_r._dsc2b3_sm_ctrl6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r,(_r._dsc2b3_sm_ctrl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL6r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r
#define DSC2B3_SM_CTRL6r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_t DSC2B3_SM_CTRL6r_t;
#define DSC2B3_SM_CTRL6r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CLR
#define DSC2B3_SM_CTRL6r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_SET
#define DSC2B3_SM_CTRL6r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_GET
#define DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET
#define DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET
#define DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET
#define DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET
#define DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET
#define DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET
#define DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET
#define DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET
#define READ_DSC2B3_SM_CTRL6r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL6r
#define WRITE_DSC2B3_SM_CTRL6r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL7
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8297
 * DESC:     State Machine Control 7 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL_OS_INIT  
 *     PF_CTRL_BR_INIT  
 *     PF_CTRL_OSX2_OFFSET 
 *     PF_CTRL_OSX1_OFFSET 
 *     PF_CTRL_BR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r (0x00029017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl7[1];
	uint32_t _dsc2b3_sm_ctrl7;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_CLR(r) (r).dsc2b3_sm_ctrl7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_SET(r,d) (r).dsc2b3_sm_ctrl7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_GET(r) (r).dsc2b3_sm_ctrl7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl7[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET(r) ((((r).dsc2b3_sm_ctrl7[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET(r) ((((r).dsc2b3_sm_ctrl7[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET(r) ((((r).dsc2b3_sm_ctrl7[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_GET(r) ((((r).dsc2b3_sm_ctrl7[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_GET(r) (((r).dsc2b3_sm_ctrl7[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_SET(r,f) (r).dsc2b3_sm_ctrl7[0]=(((r).dsc2b3_sm_ctrl7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2B3_SM_CTRL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r,(_r._dsc2b3_sm_ctrl7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r,(_r._dsc2b3_sm_ctrl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL7r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r
#define DSC2B3_SM_CTRL7r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_t DSC2B3_SM_CTRL7r_t;
#define DSC2B3_SM_CTRL7r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_CLR
#define DSC2B3_SM_CTRL7r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_SET
#define DSC2B3_SM_CTRL7r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_GET
#define DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET
#define DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET
#define DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_GET
#define DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_BR_INITf_SET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_GET
#define DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r_PF_CTRL_OS_INITf_SET
#define READ_DSC2B3_SM_CTRL7r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL7r
#define WRITE_DSC2B3_SM_CTRL7r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL8
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8298
 * DESC:     State Machine Control 8 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_MIN_VAL      
 *     VGA_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r (0x00029018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl8[1];
	uint32_t _dsc2b3_sm_ctrl8;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_CLR(r) (r).dsc2b3_sm_ctrl8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_SET(r,d) (r).dsc2b3_sm_ctrl8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_GET(r) (r).dsc2b3_sm_ctrl8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl8[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl8[0]=(((r).dsc2b3_sm_ctrl8[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MAX_VALf_GET(r) ((((r).dsc2b3_sm_ctrl8[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MAX_VALf_SET(r,f) (r).dsc2b3_sm_ctrl8[0]=(((r).dsc2b3_sm_ctrl8[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MIN_VALf_GET(r) (((r).dsc2b3_sm_ctrl8[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MIN_VALf_SET(r,f) (r).dsc2b3_sm_ctrl8[0]=(((r).dsc2b3_sm_ctrl8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r,(_r._dsc2b3_sm_ctrl8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r,(_r._dsc2b3_sm_ctrl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL8r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r
#define DSC2B3_SM_CTRL8r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_t DSC2B3_SM_CTRL8r_t;
#define DSC2B3_SM_CTRL8r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_CLR
#define DSC2B3_SM_CTRL8r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_SET
#define DSC2B3_SM_CTRL8r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_GET
#define DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL8r_VGA_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MAX_VALf_GET
#define DSC2B3_SM_CTRL8r_VGA_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MAX_VALf_SET
#define DSC2B3_SM_CTRL8r_VGA_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MIN_VALf_GET
#define DSC2B3_SM_CTRL8r_VGA_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r_VGA_MIN_VALf_SET
#define READ_DSC2B3_SM_CTRL8r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL8r
#define WRITE_DSC2B3_SM_CTRL8r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL9
 * BLOCKS:   DSC2B3
 * REGADDR:  0x8299
 * DESC:     State Machine Control 9 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_MIN_VAL      
 *     DFE_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r (0x00029019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl9[1];
	uint32_t _dsc2b3_sm_ctrl9;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_CLR(r) (r).dsc2b3_sm_ctrl9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_SET(r,d) (r).dsc2b3_sm_ctrl9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_GET(r) (r).dsc2b3_sm_ctrl9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl9[0]=(((r).dsc2b3_sm_ctrl9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MAX_VALf_GET(r) ((((r).dsc2b3_sm_ctrl9[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MAX_VALf_SET(r,f) (r).dsc2b3_sm_ctrl9[0]=(((r).dsc2b3_sm_ctrl9[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MIN_VALf_GET(r) (((r).dsc2b3_sm_ctrl9[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MIN_VALf_SET(r,f) (r).dsc2b3_sm_ctrl9[0]=(((r).dsc2b3_sm_ctrl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r,(_r._dsc2b3_sm_ctrl9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r,(_r._dsc2b3_sm_ctrl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL9r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r
#define DSC2B3_SM_CTRL9r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_t DSC2B3_SM_CTRL9r_t;
#define DSC2B3_SM_CTRL9r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_CLR
#define DSC2B3_SM_CTRL9r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_SET
#define DSC2B3_SM_CTRL9r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_GET
#define DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL9r_DFE_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MAX_VALf_GET
#define DSC2B3_SM_CTRL9r_DFE_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MAX_VALf_SET
#define DSC2B3_SM_CTRL9r_DFE_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MIN_VALf_GET
#define DSC2B3_SM_CTRL9r_DFE_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r_DFE_MIN_VALf_SET
#define READ_DSC2B3_SM_CTRL9r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL9r
#define WRITE_DSC2B3_SM_CTRL9r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL10
 * BLOCKS:   DSC2B3
 * REGADDR:  0x829a
 * DESC:     State Machine Control 10 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_PF_TAP_EN   
 *     BR_PF_TAP_EN     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r (0x0002901a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL10.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl10[1];
	uint32_t _dsc2b3_sm_ctrl10;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_CLR(r) (r).dsc2b3_sm_ctrl10[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_SET(r,d) (r).dsc2b3_sm_ctrl10[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_GET(r) (r).dsc2b3_sm_ctrl10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl10[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl10[0]=(((r).dsc2b3_sm_ctrl10[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_GET(r) ((((r).dsc2b3_sm_ctrl10[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_SET(r,f) (r).dsc2b3_sm_ctrl10[0]=(((r).dsc2b3_sm_ctrl10[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_GET(r) (((r).dsc2b3_sm_ctrl10[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_SET(r,f) (r).dsc2b3_sm_ctrl10[0]=(((r).dsc2b3_sm_ctrl10[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL10.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL10r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r,(_r._dsc2b3_sm_ctrl10))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL10r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r,(_r._dsc2b3_sm_ctrl10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL10r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r
#define DSC2B3_SM_CTRL10r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_t DSC2B3_SM_CTRL10r_t;
#define DSC2B3_SM_CTRL10r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_CLR
#define DSC2B3_SM_CTRL10r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_SET
#define DSC2B3_SM_CTRL10r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_GET
#define DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_GET
#define DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_BR_PF_TAP_ENf_SET
#define DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_GET
#define DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r_OSX1_PF_TAP_ENf_SET
#define READ_DSC2B3_SM_CTRL10r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL10r
#define WRITE_DSC2B3_SM_CTRL10r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL11
 * BLOCKS:   DSC2B3
 * REGADDR:  0x829b
 * DESC:     State Machine Control 11 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_POSTC_TIMEOUT 
 *     HYSTERESIS_TIMEOUT 
 *     MSR_BR_VGA_TIMEOUT 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r (0x0002901b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL11.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl11[1];
	uint32_t _dsc2b3_sm_ctrl11;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_CLR(r) (r).dsc2b3_sm_ctrl11[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_SET(r,d) (r).dsc2b3_sm_ctrl11[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_GET(r) (r).dsc2b3_sm_ctrl11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl11[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl11[0]=(((r).dsc2b3_sm_ctrl11[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl11[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl11[0]=(((r).dsc2b3_sm_ctrl11[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl11[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl11[0]=(((r).dsc2b3_sm_ctrl11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET(r) (((r).dsc2b3_sm_ctrl11[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl11[0]=(((r).dsc2b3_sm_ctrl11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL11.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL11r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r,(_r._dsc2b3_sm_ctrl11))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL11r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r,(_r._dsc2b3_sm_ctrl11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL11r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r
#define DSC2B3_SM_CTRL11r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_t DSC2B3_SM_CTRL11r_t;
#define DSC2B3_SM_CTRL11r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_CLR
#define DSC2B3_SM_CTRL11r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_SET
#define DSC2B3_SM_CTRL11r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_GET
#define DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET
#define DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET
#define DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET
#define DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET
#define DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET
#define DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET
#define READ_DSC2B3_SM_CTRL11r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL11r
#define WRITE_DSC2B3_SM_CTRL11r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_SM_CTRL12
 * BLOCKS:   DSC2B3
 * REGADDR:  0x829c
 * DESC:     State Machine Control 12 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_PF_TIMEOUT   
 *     CDR_PHASE_INVERSION_TIMEOUT 
 *     POSTC_DFE_LMS_GAIN 
 *     BR_VGA_LMS_GAIN  
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r (0x0002901c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_SM_CTRL12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_s {
	uint32_t v[1];
	uint32_t dsc2b3_sm_ctrl12[1];
	uint32_t _dsc2b3_sm_ctrl12;
} BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CLR(r) (r).dsc2b3_sm_ctrl12[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_SET(r,d) (r).dsc2b3_sm_ctrl12[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_GET(r) (r).dsc2b3_sm_ctrl12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_sm_ctrl12[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_sm_ctrl12[0]=(((r).dsc2b3_sm_ctrl12[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_GET(r) ((((r).dsc2b3_sm_ctrl12[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_SET(r,f) (r).dsc2b3_sm_ctrl12[0]=(((r).dsc2b3_sm_ctrl12[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET(r) ((((r).dsc2b3_sm_ctrl12[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET(r,f) (r).dsc2b3_sm_ctrl12[0]=(((r).dsc2b3_sm_ctrl12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET(r) ((((r).dsc2b3_sm_ctrl12[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl12[0]=(((r).dsc2b3_sm_ctrl12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_GET(r) (((r).dsc2b3_sm_ctrl12[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_SET(r,f) (r).dsc2b3_sm_ctrl12[0]=(((r).dsc2b3_sm_ctrl12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2B3_SM_CTRL12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r,(_r._dsc2b3_sm_ctrl12))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r,(_r._dsc2b3_sm_ctrl12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_SM_CTRL12r BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r
#define DSC2B3_SM_CTRL12r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_t DSC2B3_SM_CTRL12r_t;
#define DSC2B3_SM_CTRL12r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CLR
#define DSC2B3_SM_CTRL12r_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_SET
#define DSC2B3_SM_CTRL12r_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_GET
#define DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_GET
#define DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_BR_VGA_LMS_GAINf_SET
#define DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET
#define DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET
#define DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET
#define DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET
#define DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_GET
#define DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r_MSR_PF_TIMEOUTf_SET
#define READ_DSC2B3_SM_CTRL12r BCMI_HYPERLITE_XGXS_READ_DSC2B3_SM_CTRL12r
#define WRITE_DSC2B3_SM_CTRL12r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_SM_CTRL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_SM_CTRL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_DSC_DIAG_CTRL0
 * BLOCKS:   DSC2B3
 * REGADDR:  0x829d
 * DESC:     DSC Diagnostics Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DIAGNOSTICS_EN   
 *     HOFFSET          
 *     VOFFSET          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r (0x0002901d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_DSC_DIAG_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b3_dsc_diag_ctrl0[1];
	uint32_t _dsc2b3_dsc_diag_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_CLR(r) (r).dsc2b3_dsc_diag_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_SET(r,d) (r).dsc2b3_dsc_diag_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_GET(r) (r).dsc2b3_dsc_diag_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_dsc_diag_ctrl0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_dsc_diag_ctrl0[0]=(((r).dsc2b3_dsc_diag_ctrl0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_GET(r) ((((r).dsc2b3_dsc_diag_ctrl0[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_SET(r,f) (r).dsc2b3_dsc_diag_ctrl0[0]=(((r).dsc2b3_dsc_diag_ctrl0[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_GET(r) ((((r).dsc2b3_dsc_diag_ctrl0[0]) >> 1) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_SET(r,f) (r).dsc2b3_dsc_diag_ctrl0[0]=(((r).dsc2b3_dsc_diag_ctrl0[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET(r) (((r).dsc2b3_dsc_diag_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET(r,f) (r).dsc2b3_dsc_diag_ctrl0[0]=(((r).dsc2b3_dsc_diag_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2B3_DSC_DIAG_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r,(_r._dsc2b3_dsc_diag_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r,(_r._dsc2b3_dsc_diag_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r
#define DSC2B3_DSC_DIAG_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_t DSC2B3_DSC_DIAG_CTRL0r_t;
#define DSC2B3_DSC_DIAG_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_CLR
#define DSC2B3_DSC_DIAG_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_SET
#define DSC2B3_DSC_DIAG_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_GET
#define DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_GET
#define DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_VOFFSETf_SET
#define DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_GET
#define DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_HOFFSETf_SET
#define DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET
#define DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET
#define READ_DSC2B3_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B3_DSC_DIAG_CTRL0r
#define WRITE_DSC2B3_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_DSC_DIAG_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_DSC_DIAG_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2B3_DSC_MISC_CTRL0
 * BLOCKS:   DSC2B3
 * REGADDR:  0x829e
 * DESC:     DSC Misc Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TEST_BUS_SEL     
 *     OSR_MODE_FORCE_VAL 
 *     OSR_MODE_FORCE   
 *     CDRBR_SEL_FORCE_VAL 
 *     CDRBR_SEL_FORCE  
 *     RESERVED_FOR_ECO0 
 *     ENABLE_ACOR_PICW 
 *     FORCERXSEQDONE   
 *     RXSEQSTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r (0x0002901e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2B3_DSC_MISC_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2b3_dsc_misc_ctrl0[1];
	uint32_t _dsc2b3_dsc_misc_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CLR(r) (r).dsc2b3_dsc_misc_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_SET(r,d) (r).dsc2b3_dsc_misc_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_GET(r) (r).dsc2b3_dsc_misc_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET(r) ((((r).dsc2b3_dsc_misc_ctrl0[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET(r) (((r).dsc2b3_dsc_misc_ctrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET(r,f) (r).dsc2b3_dsc_misc_ctrl0[0]=(((r).dsc2b3_dsc_misc_ctrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2B3_DSC_MISC_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2B3_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r,(_r._dsc2b3_dsc_misc_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r,(_r._dsc2b3_dsc_misc_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2B3_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r
#define DSC2B3_DSC_MISC_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_t DSC2B3_DSC_MISC_CTRL0r_t;
#define DSC2B3_DSC_MISC_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CLR
#define DSC2B3_DSC_MISC_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_SET
#define DSC2B3_DSC_MISC_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_GET
#define DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_GET
#define DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RXSEQSTARTf_SET
#define DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET
#define DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET
#define DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET
#define DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET
#define DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET
#define DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET
#define DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET
#define DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET
#define DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET
#define DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET
#define DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET
#define DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET
#define DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET
#define DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET
#define READ_DSC2B3_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2B3_DSC_MISC_CTRL0r
#define WRITE_DSC2B3_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2B3_DSC_MISC_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2B3_DSC_MISC_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL0
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a0
 * DESC:     State Machine Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_SM_EN     
 *     RESTART_TUNING   
 *     BYPASS_OS_DATA_SLICER_CAL 
 *     BYPASS_BR_DATA_SLICER_CAL 
 *     BYPASS_PHASE_SLICER_CAL 
 *     BYPASS_OSX45_SLICER_CAL 
 *     BYPASS_DATA_SLICER_RECAL 
 *     BYPASS_OSX1_PF_CAL 
 *     BYPASS_OSX2_PF_CAL 
 *     BYPASS_BR_PF_CAL 
 *     SLICER_CAL_LINEAR_SRCH 
 *     HYSTERESIS_EN    
 *     POSTC_METRIC_CTRL 
 *     BYPASS_BR_VGA    
 *     BYPASS_TX_POSTC_CAL 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r (0x0002a010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl0[1];
	uint32_t _dsc2bb_sm_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_CLR(r) (r).dsc2bb_sm_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SET(r,d) (r).dsc2bb_sm_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_GET(r) (r).dsc2bb_sm_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESTART_TUNINGf_GET(r) ((((r).dsc2bb_sm_ctrl0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESTART_TUNINGf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_TUNING_SM_ENf_GET(r) (((r).dsc2bb_sm_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_TUNING_SM_ENf_SET(r,f) (r).dsc2bb_sm_ctrl0[0]=(((r).dsc2bb_sm_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2BB_SM_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r,(_r._dsc2bb_sm_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r,(_r._dsc2bb_sm_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL0r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r
#define DSC2BB_SM_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_t DSC2BB_SM_CTRL0r_t;
#define DSC2BB_SM_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_CLR
#define DSC2BB_SM_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SET
#define DSC2BB_SM_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_GET
#define DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_TX_POSTC_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_VGAf_SET
#define DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_GET
#define DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_POSTC_METRIC_CTRLf_SET
#define DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_GET
#define DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_HYSTERESIS_ENf_SET
#define DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_GET
#define DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_SLICER_CAL_LINEAR_SRCHf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_PF_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX2_PF_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX1_PF_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_DATA_SLICER_RECALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OSX45_SLICER_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_PHASE_SLICER_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_BR_DATA_SLICER_CALf_SET
#define DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_GET
#define DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_BYPASS_OS_DATA_SLICER_CALf_SET
#define DSC2BB_SM_CTRL0r_RESTART_TUNINGf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESTART_TUNINGf_GET
#define DSC2BB_SM_CTRL0r_RESTART_TUNINGf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_RESTART_TUNINGf_SET
#define DSC2BB_SM_CTRL0r_TUNING_SM_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_TUNING_SM_ENf_GET
#define DSC2BB_SM_CTRL0r_TUNING_SM_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r_TUNING_SM_ENf_SET
#define READ_DSC2BB_SM_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL0r
#define WRITE_DSC2BB_SM_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL1
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a1
 * DESC:     State Machine Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     ACQCDR_TIMEOUT   
 *     ACQ1_TIMEOUT     
 *     ACQ2_TIMEOUT     
 *     FAST_TIMER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r (0x0002a011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl1[1];
	uint32_t _dsc2bb_sm_ctrl1;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_CLR(r) (r).dsc2bb_sm_ctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_SET(r,d) (r).dsc2bb_sm_ctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_GET(r) (r).dsc2bb_sm_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_FAST_TIMERf_GET(r) ((((r).dsc2bb_sm_ctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_FAST_TIMERf_SET(r,f) (r).dsc2bb_sm_ctrl1[0]=(((r).dsc2bb_sm_ctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl1[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl1[0]=(((r).dsc2bb_sm_ctrl1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl1[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl1[0]=(((r).dsc2bb_sm_ctrl1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_GET(r) (((r).dsc2bb_sm_ctrl1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl1[0]=(((r).dsc2bb_sm_ctrl1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r,(_r._dsc2bb_sm_ctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r,(_r._dsc2bb_sm_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL1r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r
#define DSC2BB_SM_CTRL1r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_t DSC2BB_SM_CTRL1r_t;
#define DSC2BB_SM_CTRL1r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_CLR
#define DSC2BB_SM_CTRL1r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_SET
#define DSC2BB_SM_CTRL1r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_GET
#define DSC2BB_SM_CTRL1r_FAST_TIMERf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_FAST_TIMERf_GET
#define DSC2BB_SM_CTRL1r_FAST_TIMERf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_FAST_TIMERf_SET
#define DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_GET
#define DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ2_TIMEOUTf_SET
#define DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_GET
#define DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQ1_TIMEOUTf_SET
#define DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_GET
#define DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r_ACQCDR_TIMEOUTf_SET
#define READ_DSC2BB_SM_CTRL1r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL1r
#define WRITE_DSC2BB_SM_CTRL1r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL2
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a2
 * DESC:     State Machine Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     TRAIN_MODE_EN    
 *     SOFT_ACK         
 *     TRAIN1_REQ       
 *     TRAIN2_REQ       
 *     DSC_CLR_FRC      
 *     DSC_CLR_VAL      
 *     DFE_FRCFRZ       
 *     DFE_FRZVAL       
 *     VGA_FRCFRZ       
 *     VGA_FRZVAL       
 *     BYPASS_OS_INTEG_XFER 
 *     ACQVGA_TIMEOUT   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r (0x0002a012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl2[1];
	uint32_t _dsc2bb_sm_ctrl2;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_CLR(r) (r).dsc2bb_sm_ctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SET(r,d) (r).dsc2bb_sm_ctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_GET(r) (r).dsc2bb_sm_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRZVALf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRZVALf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRCFRZf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRCFRZf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRZVALf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRZVALf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRCFRZf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRCFRZf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_VALf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_VALf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN2_REQf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN2_REQf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN1_REQf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN1_REQf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SOFT_ACKf_GET(r) ((((r).dsc2bb_sm_ctrl2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SOFT_ACKf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_GET(r) (((r).dsc2bb_sm_ctrl2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_SET(r,f) (r).dsc2bb_sm_ctrl2[0]=(((r).dsc2bb_sm_ctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2BB_SM_CTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r,(_r._dsc2bb_sm_ctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r,(_r._dsc2bb_sm_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL2r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r
#define DSC2BB_SM_CTRL2r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_t DSC2BB_SM_CTRL2r_t;
#define DSC2BB_SM_CTRL2r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_CLR
#define DSC2BB_SM_CTRL2r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SET
#define DSC2BB_SM_CTRL2r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_GET
#define DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_GET
#define DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_ACQVGA_TIMEOUTf_SET
#define DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_GET
#define DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_BYPASS_OS_INTEG_XFERf_SET
#define DSC2BB_SM_CTRL2r_VGA_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRZVALf_GET
#define DSC2BB_SM_CTRL2r_VGA_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRZVALf_SET
#define DSC2BB_SM_CTRL2r_VGA_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRCFRZf_GET
#define DSC2BB_SM_CTRL2r_VGA_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_VGA_FRCFRZf_SET
#define DSC2BB_SM_CTRL2r_DFE_FRZVALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRZVALf_GET
#define DSC2BB_SM_CTRL2r_DFE_FRZVALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRZVALf_SET
#define DSC2BB_SM_CTRL2r_DFE_FRCFRZf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRCFRZf_GET
#define DSC2BB_SM_CTRL2r_DFE_FRCFRZf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DFE_FRCFRZf_SET
#define DSC2BB_SM_CTRL2r_DSC_CLR_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_VALf_GET
#define DSC2BB_SM_CTRL2r_DSC_CLR_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_VALf_SET
#define DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_GET
#define DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_DSC_CLR_FRCf_SET
#define DSC2BB_SM_CTRL2r_TRAIN2_REQf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN2_REQf_GET
#define DSC2BB_SM_CTRL2r_TRAIN2_REQf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN2_REQf_SET
#define DSC2BB_SM_CTRL2r_TRAIN1_REQf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN1_REQf_GET
#define DSC2BB_SM_CTRL2r_TRAIN1_REQf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN1_REQf_SET
#define DSC2BB_SM_CTRL2r_SOFT_ACKf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SOFT_ACKf_GET
#define DSC2BB_SM_CTRL2r_SOFT_ACKf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_SOFT_ACKf_SET
#define DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_GET
#define DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r_TRAIN_MODE_ENf_SET
#define READ_DSC2BB_SM_CTRL2r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL2r
#define WRITE_DSC2BB_SM_CTRL2r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL3
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a3
 * DESC:     State Machine Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_GAIN_ACQVGA  
 *     VGA_GAIN_ACQCDR  
 *     VGA_GAIN_ACQ1    
 *     VGA_GAIN_ACQ2    
 *     DFE_GAIN_ACQ1    
 *     DFE_GAIN_ACQ2    
 *     CDRBR_BWSEL_PROP_ACQCDR 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r (0x0002a013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl3[1];
	uint32_t _dsc2bb_sm_ctrl3;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CLR(r) (r).dsc2bb_sm_ctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_SET(r,d) (r).dsc2bb_sm_ctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_GET(r) (r).dsc2bb_sm_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 4) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET(r) ((((r).dsc2bb_sm_ctrl3[0]) >> 2) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET(r) (((r).dsc2bb_sm_ctrl3[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET(r,f) (r).dsc2bb_sm_ctrl3[0]=(((r).dsc2bb_sm_ctrl3[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DSC2BB_SM_CTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r,(_r._dsc2bb_sm_ctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r,(_r._dsc2bb_sm_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL3r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r
#define DSC2BB_SM_CTRL3r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_t DSC2BB_SM_CTRL3r_t;
#define DSC2BB_SM_CTRL3r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CLR
#define DSC2BB_SM_CTRL3r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_SET
#define DSC2BB_SM_CTRL3r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_GET
#define DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_GET
#define DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_CDRBR_BWSEL_PROP_ACQCDRf_SET
#define DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_GET
#define DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ2f_SET
#define DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_GET
#define DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_DFE_GAIN_ACQ1f_SET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_GET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ2f_SET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_GET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQ1f_SET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_GET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQCDRf_SET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_GET
#define DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r_VGA_GAIN_ACQVGAf_SET
#define READ_DSC2BB_SM_CTRL3r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL3r
#define WRITE_DSC2BB_SM_CTRL3r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL4
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a4
 * DESC:     State Machine Control 4 Register
 * SIZE:     32
 * FIELDS:
 *     CDRBR_BWSEL_PROP_ACQ1 
 *     CDRBR_BWSEL_PROP_ACQ2 
 *     CDRBR_BWSEL_INTEG_ACQCDR 
 *     CDRBR_BWSEL_INTEG_ACQ1 
 *     CDRBR_BWSEL_INTEG_ACQ2 
 *     CDROS45_BWSEL_INTEG_OFFSET 
 *     CDROS45_BWSEL_PROP_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r (0x0002a014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl4[1];
	uint32_t _dsc2bb_sm_ctrl4;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CLR(r) (r).dsc2bb_sm_ctrl4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_SET(r,d) (r).dsc2bb_sm_ctrl4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_GET(r) (r).dsc2bb_sm_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 8) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 6) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET(r) ((((r).dsc2bb_sm_ctrl4[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET(r) (((r).dsc2bb_sm_ctrl4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET(r,f) (r).dsc2bb_sm_ctrl4[0]=(((r).dsc2bb_sm_ctrl4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2BB_SM_CTRL4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r,(_r._dsc2bb_sm_ctrl4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r,(_r._dsc2bb_sm_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL4r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r
#define DSC2BB_SM_CTRL4r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_t DSC2BB_SM_CTRL4r_t;
#define DSC2BB_SM_CTRL4r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CLR
#define DSC2BB_SM_CTRL4r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_SET
#define DSC2BB_SM_CTRL4r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_GET
#define DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_GET
#define DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_PROP_OFFSETf_SET
#define DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_GET
#define DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDROS45_BWSEL_INTEG_OFFSETf_SET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_GET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ2f_SET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_GET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQ1f_SET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_GET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_INTEG_ACQCDRf_SET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_GET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ2f_SET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_GET
#define DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r_CDRBR_BWSEL_PROP_ACQ1f_SET
#define READ_DSC2BB_SM_CTRL4r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL4r
#define WRITE_DSC2BB_SM_CTRL4r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL5
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a5
 * DESC:     State Machine Control 5 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQCDR 
 *     CDROS_BWSEL_PROP_ACQ1_2 
 *     CDROS_BWSEL_INTEG_ACQCDR 
 *     CDROS_BWSEL_INTEG_ACQ1_2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r (0x0002a015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl5[1];
	uint32_t _dsc2bb_sm_ctrl5;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CLR(r) (r).dsc2bb_sm_ctrl5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_SET(r,d) (r).dsc2bb_sm_ctrl5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_GET(r) (r).dsc2bb_sm_ctrl5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET(r) ((((r).dsc2bb_sm_ctrl5[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET(r,f) (r).dsc2bb_sm_ctrl5[0]=(((r).dsc2bb_sm_ctrl5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET(r) ((((r).dsc2bb_sm_ctrl5[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET(r,f) (r).dsc2bb_sm_ctrl5[0]=(((r).dsc2bb_sm_ctrl5[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET(r) ((((r).dsc2bb_sm_ctrl5[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET(r,f) (r).dsc2bb_sm_ctrl5[0]=(((r).dsc2bb_sm_ctrl5[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET(r) (((r).dsc2bb_sm_ctrl5[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET(r,f) (r).dsc2bb_sm_ctrl5[0]=(((r).dsc2bb_sm_ctrl5[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2BB_SM_CTRL5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r,(_r._dsc2bb_sm_ctrl5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r,(_r._dsc2bb_sm_ctrl5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL5r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r
#define DSC2BB_SM_CTRL5r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_t DSC2BB_SM_CTRL5r_t;
#define DSC2BB_SM_CTRL5r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CLR
#define DSC2BB_SM_CTRL5r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_SET
#define DSC2BB_SM_CTRL5r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_GET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_GET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQ1_2f_SET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_GET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_INTEG_ACQCDRf_SET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_GET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQ1_2f_SET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_GET
#define DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r_CDROS_BWSEL_PROP_ACQCDRf_SET
#define READ_DSC2BB_SM_CTRL5r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL5r
#define WRITE_DSC2BB_SM_CTRL5r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL6
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a6
 * DESC:     State Machine Control 6 Register
 * SIZE:     32
 * FIELDS:
 *     CDROS_BWSEL_PROP_ACQVGA 
 *     CDROS_BWSEL_INTEG_ACQVGA 
 *     CDRBR_BWSEL_PROP_ACQPHASE 
 *     CDRBR_BWSEL_INTEG_ACQPHASE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r (0x0002a016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl6[1];
	uint32_t _dsc2bb_sm_ctrl6;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CLR(r) (r).dsc2bb_sm_ctrl6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_SET(r,d) (r).dsc2bb_sm_ctrl6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_GET(r) (r).dsc2bb_sm_ctrl6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl6[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl6[0]=(((r).dsc2bb_sm_ctrl6[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET(r) ((((r).dsc2bb_sm_ctrl6[0]) >> 11) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET(r,f) (r).dsc2bb_sm_ctrl6[0]=(((r).dsc2bb_sm_ctrl6[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET(r) ((((r).dsc2bb_sm_ctrl6[0]) >> 8) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET(r,f) (r).dsc2bb_sm_ctrl6[0]=(((r).dsc2bb_sm_ctrl6[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET(r) ((((r).dsc2bb_sm_ctrl6[0]) >> 4) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET(r,f) (r).dsc2bb_sm_ctrl6[0]=(((r).dsc2bb_sm_ctrl6[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET(r) (((r).dsc2bb_sm_ctrl6[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET(r,f) (r).dsc2bb_sm_ctrl6[0]=(((r).dsc2bb_sm_ctrl6[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2BB_SM_CTRL6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r,(_r._dsc2bb_sm_ctrl6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r,(_r._dsc2bb_sm_ctrl6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL6r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r
#define DSC2BB_SM_CTRL6r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_t DSC2BB_SM_CTRL6r_t;
#define DSC2BB_SM_CTRL6r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CLR
#define DSC2BB_SM_CTRL6r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_SET
#define DSC2BB_SM_CTRL6r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_GET
#define DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_GET
#define DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_INTEG_ACQPHASEf_SET
#define DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_GET
#define DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDRBR_BWSEL_PROP_ACQPHASEf_SET
#define DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_GET
#define DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_INTEG_ACQVGAf_SET
#define DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_GET
#define DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r_CDROS_BWSEL_PROP_ACQVGAf_SET
#define READ_DSC2BB_SM_CTRL6r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL6r
#define WRITE_DSC2BB_SM_CTRL6r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL7
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a7
 * DESC:     State Machine Control 7 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL_OS_INIT  
 *     PF_CTRL_BR_INIT  
 *     PF_CTRL_OSX2_OFFSET 
 *     PF_CTRL_OSX1_OFFSET 
 *     PF_CTRL_BR_OFFSET 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r (0x0002a017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl7[1];
	uint32_t _dsc2bb_sm_ctrl7;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_CLR(r) (r).dsc2bb_sm_ctrl7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_SET(r,d) (r).dsc2bb_sm_ctrl7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_GET(r) (r).dsc2bb_sm_ctrl7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl7[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET(r) ((((r).dsc2bb_sm_ctrl7[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET(r) ((((r).dsc2bb_sm_ctrl7[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET(r) ((((r).dsc2bb_sm_ctrl7[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_GET(r) ((((r).dsc2bb_sm_ctrl7[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_GET(r) (((r).dsc2bb_sm_ctrl7[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_SET(r,f) (r).dsc2bb_sm_ctrl7[0]=(((r).dsc2bb_sm_ctrl7[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC2BB_SM_CTRL7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r,(_r._dsc2bb_sm_ctrl7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r,(_r._dsc2bb_sm_ctrl7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL7r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r
#define DSC2BB_SM_CTRL7r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_t DSC2BB_SM_CTRL7r_t;
#define DSC2BB_SM_CTRL7r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_CLR
#define DSC2BB_SM_CTRL7r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_SET
#define DSC2BB_SM_CTRL7r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_GET
#define DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_GET
#define DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_OFFSETf_SET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_GET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX1_OFFSETf_SET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_GET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OSX2_OFFSETf_SET
#define DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_GET
#define DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_BR_INITf_SET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_GET
#define DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r_PF_CTRL_OS_INITf_SET
#define READ_DSC2BB_SM_CTRL7r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL7r
#define WRITE_DSC2BB_SM_CTRL7r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL8
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a8
 * DESC:     State Machine Control 8 Register
 * SIZE:     32
 * FIELDS:
 *     VGA_MIN_VAL      
 *     VGA_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r (0x0002a018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl8[1];
	uint32_t _dsc2bb_sm_ctrl8;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_CLR(r) (r).dsc2bb_sm_ctrl8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_SET(r,d) (r).dsc2bb_sm_ctrl8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_GET(r) (r).dsc2bb_sm_ctrl8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl8[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl8[0]=(((r).dsc2bb_sm_ctrl8[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MAX_VALf_GET(r) ((((r).dsc2bb_sm_ctrl8[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MAX_VALf_SET(r,f) (r).dsc2bb_sm_ctrl8[0]=(((r).dsc2bb_sm_ctrl8[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MIN_VALf_GET(r) (((r).dsc2bb_sm_ctrl8[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MIN_VALf_SET(r,f) (r).dsc2bb_sm_ctrl8[0]=(((r).dsc2bb_sm_ctrl8[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r,(_r._dsc2bb_sm_ctrl8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r,(_r._dsc2bb_sm_ctrl8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL8r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r
#define DSC2BB_SM_CTRL8r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_t DSC2BB_SM_CTRL8r_t;
#define DSC2BB_SM_CTRL8r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_CLR
#define DSC2BB_SM_CTRL8r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_SET
#define DSC2BB_SM_CTRL8r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_GET
#define DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL8r_VGA_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MAX_VALf_GET
#define DSC2BB_SM_CTRL8r_VGA_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MAX_VALf_SET
#define DSC2BB_SM_CTRL8r_VGA_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MIN_VALf_GET
#define DSC2BB_SM_CTRL8r_VGA_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r_VGA_MIN_VALf_SET
#define READ_DSC2BB_SM_CTRL8r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL8r
#define WRITE_DSC2BB_SM_CTRL8r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL9
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82a9
 * DESC:     State Machine Control 9 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_MIN_VAL      
 *     DFE_MAX_VAL      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r (0x0002a019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl9[1];
	uint32_t _dsc2bb_sm_ctrl9;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_CLR(r) (r).dsc2bb_sm_ctrl9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_SET(r,d) (r).dsc2bb_sm_ctrl9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_GET(r) (r).dsc2bb_sm_ctrl9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl9[0]=(((r).dsc2bb_sm_ctrl9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MAX_VALf_GET(r) ((((r).dsc2bb_sm_ctrl9[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MAX_VALf_SET(r,f) (r).dsc2bb_sm_ctrl9[0]=(((r).dsc2bb_sm_ctrl9[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MIN_VALf_GET(r) (((r).dsc2bb_sm_ctrl9[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MIN_VALf_SET(r,f) (r).dsc2bb_sm_ctrl9[0]=(((r).dsc2bb_sm_ctrl9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r,(_r._dsc2bb_sm_ctrl9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r,(_r._dsc2bb_sm_ctrl9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL9r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r
#define DSC2BB_SM_CTRL9r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_t DSC2BB_SM_CTRL9r_t;
#define DSC2BB_SM_CTRL9r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_CLR
#define DSC2BB_SM_CTRL9r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_SET
#define DSC2BB_SM_CTRL9r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_GET
#define DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL9r_DFE_MAX_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MAX_VALf_GET
#define DSC2BB_SM_CTRL9r_DFE_MAX_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MAX_VALf_SET
#define DSC2BB_SM_CTRL9r_DFE_MIN_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MIN_VALf_GET
#define DSC2BB_SM_CTRL9r_DFE_MIN_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r_DFE_MIN_VALf_SET
#define READ_DSC2BB_SM_CTRL9r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL9r
#define WRITE_DSC2BB_SM_CTRL9r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL10
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82aa
 * DESC:     State Machine Control 10 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_PF_TAP_EN   
 *     BR_PF_TAP_EN     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r (0x0002a01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL10.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl10[1];
	uint32_t _dsc2bb_sm_ctrl10;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_CLR(r) (r).dsc2bb_sm_ctrl10[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_SET(r,d) (r).dsc2bb_sm_ctrl10[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_GET(r) (r).dsc2bb_sm_ctrl10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl10[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl10[0]=(((r).dsc2bb_sm_ctrl10[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_GET(r) ((((r).dsc2bb_sm_ctrl10[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_SET(r,f) (r).dsc2bb_sm_ctrl10[0]=(((r).dsc2bb_sm_ctrl10[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_GET(r) (((r).dsc2bb_sm_ctrl10[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_SET(r,f) (r).dsc2bb_sm_ctrl10[0]=(((r).dsc2bb_sm_ctrl10[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL10.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL10r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r,(_r._dsc2bb_sm_ctrl10))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL10r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r,(_r._dsc2bb_sm_ctrl10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL10r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r
#define DSC2BB_SM_CTRL10r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_t DSC2BB_SM_CTRL10r_t;
#define DSC2BB_SM_CTRL10r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_CLR
#define DSC2BB_SM_CTRL10r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_SET
#define DSC2BB_SM_CTRL10r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_GET
#define DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_GET
#define DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_BR_PF_TAP_ENf_SET
#define DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_GET
#define DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r_OSX1_PF_TAP_ENf_SET
#define READ_DSC2BB_SM_CTRL10r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL10r
#define WRITE_DSC2BB_SM_CTRL10r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL11
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82ab
 * DESC:     State Machine Control 11 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_POSTC_TIMEOUT 
 *     HYSTERESIS_TIMEOUT 
 *     MSR_BR_VGA_TIMEOUT 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r (0x0002a01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL11.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl11[1];
	uint32_t _dsc2bb_sm_ctrl11;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_CLR(r) (r).dsc2bb_sm_ctrl11[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_SET(r,d) (r).dsc2bb_sm_ctrl11[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_GET(r) (r).dsc2bb_sm_ctrl11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl11[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl11[0]=(((r).dsc2bb_sm_ctrl11[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl11[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl11[0]=(((r).dsc2bb_sm_ctrl11[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl11[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl11[0]=(((r).dsc2bb_sm_ctrl11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET(r) (((r).dsc2bb_sm_ctrl11[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl11[0]=(((r).dsc2bb_sm_ctrl11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL11.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL11r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r,(_r._dsc2bb_sm_ctrl11))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL11r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r,(_r._dsc2bb_sm_ctrl11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL11r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r
#define DSC2BB_SM_CTRL11r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_t DSC2BB_SM_CTRL11r_t;
#define DSC2BB_SM_CTRL11r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_CLR
#define DSC2BB_SM_CTRL11r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_SET
#define DSC2BB_SM_CTRL11r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_GET
#define DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_GET
#define DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_BR_VGA_TIMEOUTf_SET
#define DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_GET
#define DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_HYSTERESIS_TIMEOUTf_SET
#define DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_GET
#define DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r_MSR_POSTC_TIMEOUTf_SET
#define READ_DSC2BB_SM_CTRL11r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL11r
#define WRITE_DSC2BB_SM_CTRL11r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_SM_CTRL12
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82ac
 * DESC:     State Machine Control 12 Register
 * SIZE:     32
 * FIELDS:
 *     MSR_PF_TIMEOUT   
 *     CDR_PHASE_INVERSION_TIMEOUT 
 *     POSTC_DFE_LMS_GAIN 
 *     BR_VGA_LMS_GAIN  
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r (0x0002a01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_SM_CTRL12.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_s {
	uint32_t v[1];
	uint32_t dsc2bb_sm_ctrl12[1];
	uint32_t _dsc2bb_sm_ctrl12;
} BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CLR(r) (r).dsc2bb_sm_ctrl12[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_SET(r,d) (r).dsc2bb_sm_ctrl12[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_GET(r) (r).dsc2bb_sm_ctrl12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_sm_ctrl12[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_sm_ctrl12[0]=(((r).dsc2bb_sm_ctrl12[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_GET(r) ((((r).dsc2bb_sm_ctrl12[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_SET(r,f) (r).dsc2bb_sm_ctrl12[0]=(((r).dsc2bb_sm_ctrl12[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET(r) ((((r).dsc2bb_sm_ctrl12[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET(r,f) (r).dsc2bb_sm_ctrl12[0]=(((r).dsc2bb_sm_ctrl12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET(r) ((((r).dsc2bb_sm_ctrl12[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl12[0]=(((r).dsc2bb_sm_ctrl12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_GET(r) (((r).dsc2bb_sm_ctrl12[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_SET(r,f) (r).dsc2bb_sm_ctrl12[0]=(((r).dsc2bb_sm_ctrl12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC2BB_SM_CTRL12.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL12r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r,(_r._dsc2bb_sm_ctrl12))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL12r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r,(_r._dsc2bb_sm_ctrl12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_SM_CTRL12r BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r
#define DSC2BB_SM_CTRL12r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_t DSC2BB_SM_CTRL12r_t;
#define DSC2BB_SM_CTRL12r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CLR
#define DSC2BB_SM_CTRL12r_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_SET
#define DSC2BB_SM_CTRL12r_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_GET
#define DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_GET
#define DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_BR_VGA_LMS_GAINf_SET
#define DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_GET
#define DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_POSTC_DFE_LMS_GAINf_SET
#define DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_GET
#define DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_CDR_PHASE_INVERSION_TIMEOUTf_SET
#define DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_GET
#define DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r_MSR_PF_TIMEOUTf_SET
#define READ_DSC2BB_SM_CTRL12r BCMI_HYPERLITE_XGXS_READ_DSC2BB_SM_CTRL12r
#define WRITE_DSC2BB_SM_CTRL12r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_SM_CTRL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_SM_CTRL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_DSC_DIAG_CTRL0
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82ad
 * DESC:     DSC Diagnostics Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     DIAGNOSTICS_EN   
 *     HOFFSET          
 *     VOFFSET          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r (0x0002a01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_DSC_DIAG_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2bb_dsc_diag_ctrl0[1];
	uint32_t _dsc2bb_dsc_diag_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_CLR(r) (r).dsc2bb_dsc_diag_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_SET(r,d) (r).dsc2bb_dsc_diag_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_GET(r) (r).dsc2bb_dsc_diag_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_dsc_diag_ctrl0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_dsc_diag_ctrl0[0]=(((r).dsc2bb_dsc_diag_ctrl0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_GET(r) ((((r).dsc2bb_dsc_diag_ctrl0[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_SET(r,f) (r).dsc2bb_dsc_diag_ctrl0[0]=(((r).dsc2bb_dsc_diag_ctrl0[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_GET(r) ((((r).dsc2bb_dsc_diag_ctrl0[0]) >> 1) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_SET(r,f) (r).dsc2bb_dsc_diag_ctrl0[0]=(((r).dsc2bb_dsc_diag_ctrl0[0] & ~((uint32_t)0x3f << 1)) | ((((uint32_t)f) & 0x3f) << 1))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET(r) (((r).dsc2bb_dsc_diag_ctrl0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET(r,f) (r).dsc2bb_dsc_diag_ctrl0[0]=(((r).dsc2bb_dsc_diag_ctrl0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC2BB_DSC_DIAG_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r,(_r._dsc2bb_dsc_diag_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_DSC_DIAG_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r,(_r._dsc2bb_dsc_diag_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r
#define DSC2BB_DSC_DIAG_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_t DSC2BB_DSC_DIAG_CTRL0r_t;
#define DSC2BB_DSC_DIAG_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_CLR
#define DSC2BB_DSC_DIAG_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_SET
#define DSC2BB_DSC_DIAG_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_GET
#define DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_GET
#define DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_VOFFSETf_SET
#define DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_GET
#define DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_HOFFSETf_SET
#define DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_GET
#define DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r_DIAGNOSTICS_ENf_SET
#define READ_DSC2BB_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2BB_DSC_DIAG_CTRL0r
#define WRITE_DSC2BB_DSC_DIAG_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_DSC_DIAG_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_DSC_DIAG_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC2BB_DSC_MISC_CTRL0
 * BLOCKS:   DSC2BB
 * REGADDR:  0x82ae
 * DESC:     DSC Misc Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     TEST_BUS_SEL     
 *     OSR_MODE_FORCE_VAL 
 *     OSR_MODE_FORCE   
 *     CDRBR_SEL_FORCE_VAL 
 *     CDRBR_SEL_FORCE  
 *     RESERVED_FOR_ECO0 
 *     ENABLE_ACOR_PICW 
 *     FORCERXSEQDONE   
 *     RXSEQSTART       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r (0x0002a01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_SIZE 4

/*
 * This structure should be used to declare and program DSC2BB_DSC_MISC_CTRL0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_s {
	uint32_t v[1];
	uint32_t dsc2bb_dsc_misc_ctrl0[1];
	uint32_t _dsc2bb_dsc_misc_ctrl0;
} BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_t;

#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CLR(r) (r).dsc2bb_dsc_misc_ctrl0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_SET(r,d) (r).dsc2bb_dsc_misc_ctrl0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_GET(r) (r).dsc2bb_dsc_misc_ctrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 10) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET(r) ((((r).dsc2bb_dsc_misc_ctrl0[0]) >> 4) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET(r) (((r).dsc2bb_dsc_misc_ctrl0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET(r,f) (r).dsc2bb_dsc_misc_ctrl0[0]=(((r).dsc2bb_dsc_misc_ctrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC2BB_DSC_MISC_CTRL0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC2BB_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r,(_r._dsc2bb_dsc_misc_ctrl0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_DSC_MISC_CTRL0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r,(_r._dsc2bb_dsc_misc_ctrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC2BB_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r
#define DSC2BB_DSC_MISC_CTRL0r_SIZE BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_t DSC2BB_DSC_MISC_CTRL0r_t;
#define DSC2BB_DSC_MISC_CTRL0r_CLR BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CLR
#define DSC2BB_DSC_MISC_CTRL0r_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_SET
#define DSC2BB_DSC_MISC_CTRL0r_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_GET
#define DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_GET
#define DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RXSEQSTARTf_SET
#define DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_GET
#define DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_FORCERXSEQDONEf_SET
#define DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_GET
#define DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_ENABLE_ACOR_PICWf_SET
#define DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_GET
#define DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_RESERVED_FOR_ECO0f_SET
#define DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_GET
#define DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCEf_SET
#define DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_GET
#define DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_CDRBR_SEL_FORCE_VALf_SET
#define DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_GET
#define DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCEf_SET
#define DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_GET
#define DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_OSR_MODE_FORCE_VALf_SET
#define DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_GET
#define DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r_TEST_BUS_SELf_SET
#define READ_DSC2BB_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_READ_DSC2BB_DSC_MISC_CTRL0r
#define WRITE_DSC2BB_DSC_MISC_CTRL0r BCMI_HYPERLITE_XGXS_WRITE_DSC2BB_DSC_MISC_CTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC2BB_DSC_MISC_CTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_STATUS0
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b0
 * DESC:     CDR Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r (0x0002b010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program CDR_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_STATUS0r_s {
	uint32_t v[1];
	uint32_t cdr_status0[1];
	uint32_t _cdr_status0;
} BCMI_HYPERLITE_XGXS_CDR_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_CLR(r) (r).cdr_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_SET(r,d) (r).cdr_status0[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_GET(r) (r).cdr_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_INTEG_REGf_GET(r) (((r).cdr_status0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS0r_INTEG_REGf_SET(r,f) (r).cdr_status0[0]=(((r).cdr_status0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CDR_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS0r,(_r._cdr_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS0r,(_r._cdr_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_STATUS0r BCMI_HYPERLITE_XGXS_CDR_STATUS0r
#define CDR_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_CDR_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_STATUS0r_t CDR_STATUS0r_t;
#define CDR_STATUS0r_CLR BCMI_HYPERLITE_XGXS_CDR_STATUS0r_CLR
#define CDR_STATUS0r_SET BCMI_HYPERLITE_XGXS_CDR_STATUS0r_SET
#define CDR_STATUS0r_GET BCMI_HYPERLITE_XGXS_CDR_STATUS0r_GET
#define CDR_STATUS0r_INTEG_REGf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS0r_INTEG_REGf_GET
#define CDR_STATUS0r_INTEG_REGf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS0r_INTEG_REGf_SET
#define READ_CDR_STATUS0r BCMI_HYPERLITE_XGXS_READ_CDR_STATUS0r
#define WRITE_CDR_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_STATUS1
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b1
 * DESC:     CDR Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG_XFER   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r (0x0002b011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program CDR_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_STATUS1r_s {
	uint32_t v[1];
	uint32_t cdr_status1[1];
	uint32_t _cdr_status1;
} BCMI_HYPERLITE_XGXS_CDR_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_CLR(r) (r).cdr_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_SET(r,d) (r).cdr_status1[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_GET(r) (r).cdr_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_INTEG_REG_XFERf_GET(r) (((r).cdr_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS1r_INTEG_REG_XFERf_SET(r,f) (r).cdr_status1[0]=(((r).cdr_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CDR_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS1r,(_r._cdr_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS1r,(_r._cdr_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_STATUS1r BCMI_HYPERLITE_XGXS_CDR_STATUS1r
#define CDR_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_CDR_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_STATUS1r_t CDR_STATUS1r_t;
#define CDR_STATUS1r_CLR BCMI_HYPERLITE_XGXS_CDR_STATUS1r_CLR
#define CDR_STATUS1r_SET BCMI_HYPERLITE_XGXS_CDR_STATUS1r_SET
#define CDR_STATUS1r_GET BCMI_HYPERLITE_XGXS_CDR_STATUS1r_GET
#define CDR_STATUS1r_INTEG_REG_XFERf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS1r_INTEG_REG_XFERf_GET
#define CDR_STATUS1r_INTEG_REG_XFERf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS1r_INTEG_REG_XFERf_SET
#define READ_CDR_STATUS1r BCMI_HYPERLITE_XGXS_READ_CDR_STATUS1r
#define WRITE_CDR_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CDR_STATUS2
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b2
 * DESC:     CDR Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_ERR        
 *     OSCDR_MODE       
 *     BR_CDR_ENABLED   
 *     SM_BR_CDR_ENABLED 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r (0x0002b012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program CDR_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CDR_STATUS2r_s {
	uint32_t v[1];
	uint32_t cdr_status2[1];
	uint32_t _cdr_status2;
} BCMI_HYPERLITE_XGXS_CDR_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_CLR(r) (r).cdr_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SET(r,d) (r).cdr_status2[0] = d
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_GET(r) (r).cdr_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).cdr_status2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).cdr_status2[0]=(((r).cdr_status2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET(r) ((((r).cdr_status2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET(r,f) (r).cdr_status2[0]=(((r).cdr_status2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_BR_CDR_ENABLEDf_GET(r) ((((r).cdr_status2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_BR_CDR_ENABLEDf_SET(r,f) (r).cdr_status2[0]=(((r).cdr_status2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_OSCDR_MODEf_GET(r) ((((r).cdr_status2[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_OSCDR_MODEf_SET(r,f) (r).cdr_status2[0]=(((r).cdr_status2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_PHASE_ERRf_GET(r) (((r).cdr_status2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_CDR_STATUS2r_PHASE_ERRf_SET(r,f) (r).cdr_status2[0]=(((r).cdr_status2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access CDR_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS2r,(_r._cdr_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CDR_STATUS2r,(_r._cdr_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CDR_STATUS2r BCMI_HYPERLITE_XGXS_CDR_STATUS2r
#define CDR_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CDR_STATUS2r_t CDR_STATUS2r_t;
#define CDR_STATUS2r_CLR BCMI_HYPERLITE_XGXS_CDR_STATUS2r_CLR
#define CDR_STATUS2r_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SET
#define CDR_STATUS2r_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_GET
#define CDR_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET
#define CDR_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET
#define CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET
#define CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET
#define CDR_STATUS2r_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_BR_CDR_ENABLEDf_GET
#define CDR_STATUS2r_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_BR_CDR_ENABLEDf_SET
#define CDR_STATUS2r_OSCDR_MODEf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_OSCDR_MODEf_GET
#define CDR_STATUS2r_OSCDR_MODEf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_OSCDR_MODEf_SET
#define CDR_STATUS2r_PHASE_ERRf_GET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_PHASE_ERRf_GET
#define CDR_STATUS2r_PHASE_ERRf_SET BCMI_HYPERLITE_XGXS_CDR_STATUS2r_PHASE_ERRf_SET
#define READ_CDR_STATUS2r BCMI_HYPERLITE_XGXS_READ_CDR_STATUS2r
#define WRITE_CDR_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_CDR_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CDR_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PI_STATUS0
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b3
 * DESC:     Phase Interpolator Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_CNTR       
 *     CLK90_PHASE_OFFSET 
 *     INVALID_INTRP_CTRL90 
 *     INVALID_INTRP_CTRL0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r (0x0002b013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program PI_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PI_STATUS0r_s {
	uint32_t v[1];
	uint32_t pi_status0[1];
	uint32_t _pi_status0;
} BCMI_HYPERLITE_XGXS_PI_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLR(r) (r).pi_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_SET(r,d) (r).pi_status0[0] = d
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_GET(r) (r).pi_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET(r) ((((r).pi_status0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET(r,f) (r).pi_status0[0]=(((r).pi_status0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET(r) ((((r).pi_status0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET(r,f) (r).pi_status0[0]=(((r).pi_status0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET(r) ((((r).pi_status0[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET(r,f) (r).pi_status0[0]=(((r).pi_status0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_PHASE_CNTRf_GET(r) (((r).pi_status0[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_PI_STATUS0r_PHASE_CNTRf_SET(r,f) (r).pi_status0[0]=(((r).pi_status0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PI_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PI_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PI_STATUS0r,(_r._pi_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_PI_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PI_STATUS0r,(_r._pi_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PI_STATUS0r BCMI_HYPERLITE_XGXS_PI_STATUS0r
#define PI_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_PI_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_PI_STATUS0r_t PI_STATUS0r_t;
#define PI_STATUS0r_CLR BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLR
#define PI_STATUS0r_SET BCMI_HYPERLITE_XGXS_PI_STATUS0r_SET
#define PI_STATUS0r_GET BCMI_HYPERLITE_XGXS_PI_STATUS0r_GET
#define PI_STATUS0r_INVALID_INTRP_CTRL0f_GET BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET
#define PI_STATUS0r_INVALID_INTRP_CTRL0f_SET BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET
#define PI_STATUS0r_INVALID_INTRP_CTRL90f_GET BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET
#define PI_STATUS0r_INVALID_INTRP_CTRL90f_SET BCMI_HYPERLITE_XGXS_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET
#define PI_STATUS0r_CLK90_PHASE_OFFSETf_GET BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET
#define PI_STATUS0r_CLK90_PHASE_OFFSETf_SET BCMI_HYPERLITE_XGXS_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET
#define PI_STATUS0r_PHASE_CNTRf_GET BCMI_HYPERLITE_XGXS_PI_STATUS0r_PHASE_CNTRf_GET
#define PI_STATUS0r_PHASE_CNTRf_SET BCMI_HYPERLITE_XGXS_PI_STATUS0r_PHASE_CNTRf_SET
#define READ_PI_STATUS0r BCMI_HYPERLITE_XGXS_READ_PI_STATUS0r
#define WRITE_PI_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_PI_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PI_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PI_STATUS1
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b4
 * DESC:     Phase Interpolator Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     PI_SINGLE90_MSB_SINGLE90_MSB 
 *     PI_SINGLE0_LSB_SINGLE0_LSB 
 *     PI_SEQUENCE90_MSB_SEQUENCE90_MSB 
 *     PI_SINGLE90_LSB_SINGLE90_LSB 
 *     PI_SEQUENCE0_LSB_SEQUENCE0_LSB 
 *     PI_SEQUENCE90_LSB_SEQUENCE90_LSB 
 *     PI_SEQUENCE0_MSB_SEQUENCE0_MSB 
 *     PI_SINGLE0_MSB_SINGLE0_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r (0x0002b014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program PI_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PI_STATUS1r_s {
	uint32_t v[1];
	uint32_t pi_status1[1];
	uint32_t _pi_status1;
} BCMI_HYPERLITE_XGXS_PI_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_CLR(r) (r).pi_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_SET(r,d) (r).pi_status1[0] = d
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_GET(r) (r).pi_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET(r) (((r).pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET(r,f) (r).pi_status1[0]=(((r).pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PI_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PI_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PI_STATUS1r,(_r._pi_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_PI_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PI_STATUS1r,(_r._pi_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PI_STATUS1r BCMI_HYPERLITE_XGXS_PI_STATUS1r
#define PI_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_PI_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PI_STATUS1r_t PI_STATUS1r_t;
#define PI_STATUS1r_CLR BCMI_HYPERLITE_XGXS_PI_STATUS1r_CLR
#define PI_STATUS1r_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_SET
#define PI_STATUS1r_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_GET
#define PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET
#define PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET
#define PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET
#define PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET
#define PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET
#define PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET
#define PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET
#define PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET
#define PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET
#define PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET
#define PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET
#define PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET
#define PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET
#define PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET
#define PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET
#define PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET BCMI_HYPERLITE_XGXS_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET
#define READ_PI_STATUS1r BCMI_HYPERLITE_XGXS_READ_PI_STATUS1r
#define WRITE_PI_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_PI_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PI_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_STATUS0
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b5
 * DESC:     DFE VGA Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_TAP_BIN      
 *     VGA_SUM          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r (0x0002b015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dfe_vga_status0[1];
	uint32_t _dfe_vga_status0;
} BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_CLR(r) (r).dfe_vga_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_SET(r,d) (r).dfe_vga_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_GET(r) (r).dfe_vga_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_status0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_status0[0]=(((r).dfe_vga_status0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_VGA_SUMf_GET(r) ((((r).dfe_vga_status0[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_VGA_SUMf_SET(r,f) (r).dfe_vga_status0[0]=(((r).dfe_vga_status0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET(r) (((r).dfe_vga_status0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET(r,f) (r).dfe_vga_status0[0]=(((r).dfe_vga_status0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DFE_VGA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r,(_r._dfe_vga_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r,(_r._dfe_vga_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r
#define DFE_VGA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_t DFE_VGA_STATUS0r_t;
#define DFE_VGA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_CLR
#define DFE_VGA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_SET
#define DFE_VGA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_GET
#define DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_STATUS0r_VGA_SUMf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_VGA_SUMf_GET
#define DFE_VGA_STATUS0r_VGA_SUMf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_VGA_SUMf_SET
#define DFE_VGA_STATUS0r_DFE_TAP_BINf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET
#define DFE_VGA_STATUS0r_DFE_TAP_BINf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET
#define READ_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_STATUS0r
#define WRITE_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DFE_VGA_STATUS1
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b6
 * DESC:     DFE VGA Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r (0x0002b016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DFE_VGA_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_s {
	uint32_t v[1];
	uint32_t dfe_vga_status1[1];
	uint32_t _dfe_vga_status1;
} BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_CLR(r) (r).dfe_vga_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_SET(r,d) (r).dfe_vga_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_GET(r) (r).dfe_vga_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dfe_vga_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dfe_vga_status1[0]=(((r).dfe_vga_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_TRNSUMf_GET(r) (((r).dfe_vga_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_TRNSUMf_SET(r,f) (r).dfe_vga_status1[0]=(((r).dfe_vga_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DFE_VGA_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r,(_r._dfe_vga_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r,(_r._dfe_vga_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r
#define DFE_VGA_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_t DFE_VGA_STATUS1r_t;
#define DFE_VGA_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_CLR
#define DFE_VGA_STATUS1r_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_SET
#define DFE_VGA_STATUS1r_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_GET
#define DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DFE_VGA_STATUS1r_TRNSUMf_GET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_TRNSUMf_GET
#define DFE_VGA_STATUS1r_TRNSUMf_SET BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r_TRNSUMf_SET
#define READ_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_READ_DFE_VGA_STATUS1r
#define WRITE_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DFE_VGA_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DFE_VGA_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS0
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b7
 * DESC:     State Machine Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE        
 *     TUNING_STATE     
 *     SRCH_STATE       
 *     TUNING_DONE      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r (0x0002b017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS0r_s {
	uint32_t v[1];
	uint32_t sm_status0[1];
	uint32_t _sm_status0;
} BCMI_HYPERLITE_XGXS_SM_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_CLR(r) (r).sm_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_SET(r,d) (r).sm_status0[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_GET(r) (r).sm_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status0[0]=(((r).sm_status0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_DONEf_GET(r) ((((r).sm_status0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_DONEf_SET(r,f) (r).sm_status0[0]=(((r).sm_status0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_SRCH_STATEf_GET(r) ((((r).sm_status0[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_SRCH_STATEf_SET(r,f) (r).sm_status0[0]=(((r).sm_status0[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_STATEf_GET(r) ((((r).sm_status0[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_STATEf_SET(r,f) (r).sm_status0[0]=(((r).sm_status0[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_DSC_STATEf_GET(r) (((r).sm_status0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_STATUS0r_DSC_STATEf_SET(r,f) (r).sm_status0[0]=(((r).sm_status0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SM_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS0r,(_r._sm_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS0r,(_r._sm_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS0r BCMI_HYPERLITE_XGXS_SM_STATUS0r
#define SM_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS0r_t SM_STATUS0r_t;
#define SM_STATUS0r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS0r_CLR
#define SM_STATUS0r_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_SET
#define SM_STATUS0r_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_GET
#define SM_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS0r_TUNING_DONEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_DONEf_GET
#define SM_STATUS0r_TUNING_DONEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_DONEf_SET
#define SM_STATUS0r_SRCH_STATEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_SRCH_STATEf_GET
#define SM_STATUS0r_SRCH_STATEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_SRCH_STATEf_SET
#define SM_STATUS0r_TUNING_STATEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_STATEf_GET
#define SM_STATUS0r_TUNING_STATEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_TUNING_STATEf_SET
#define SM_STATUS0r_DSC_STATEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS0r_DSC_STATEf_GET
#define SM_STATUS0r_DSC_STATEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS0r_DSC_STATEf_SET
#define READ_SM_STATUS0r BCMI_HYPERLITE_XGXS_READ_SM_STATUS0r
#define WRITE_SM_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS1
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b8
 * DESC:     State Machine Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     POSTC_METRIC     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r (0x0002b018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS1r_s {
	uint32_t v[1];
	uint32_t sm_status1[1];
	uint32_t _sm_status1;
} BCMI_HYPERLITE_XGXS_SM_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_CLR(r) (r).sm_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_SET(r,d) (r).sm_status1[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_GET(r) (r).sm_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status1[0]=(((r).sm_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_POSTC_METRICf_GET(r) (((r).sm_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_SM_STATUS1r_POSTC_METRICf_SET(r,f) (r).sm_status1[0]=(((r).sm_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access SM_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS1r,(_r._sm_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS1r,(_r._sm_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS1r BCMI_HYPERLITE_XGXS_SM_STATUS1r
#define SM_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS1r_t SM_STATUS1r_t;
#define SM_STATUS1r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS1r_CLR
#define SM_STATUS1r_SET BCMI_HYPERLITE_XGXS_SM_STATUS1r_SET
#define SM_STATUS1r_GET BCMI_HYPERLITE_XGXS_SM_STATUS1r_GET
#define SM_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS1r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS1r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS1r_POSTC_METRICf_GET BCMI_HYPERLITE_XGXS_SM_STATUS1r_POSTC_METRICf_GET
#define SM_STATUS1r_POSTC_METRICf_SET BCMI_HYPERLITE_XGXS_SM_STATUS1r_POSTC_METRICf_SET
#define READ_SM_STATUS1r BCMI_HYPERLITE_XGXS_READ_SM_STATUS1r
#define WRITE_SM_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS2
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82b9
 * DESC:     State Machine Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_MO 
 *     SLICER_OFFSET_ZO 
 *     SLICER_OFFSET_PO 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r (0x0002b019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS2r_s {
	uint32_t v[1];
	uint32_t sm_status2[1];
	uint32_t _sm_status2;
} BCMI_HYPERLITE_XGXS_SM_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_CLR(r) (r).sm_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SET(r,d) (r).sm_status2[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_GET(r) (r).sm_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status2[0]=(((r).sm_status2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_POf_GET(r) ((((r).sm_status2[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_POf_SET(r,f) (r).sm_status2[0]=(((r).sm_status2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_ZOf_GET(r) ((((r).sm_status2[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_ZOf_SET(r,f) (r).sm_status2[0]=(((r).sm_status2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_MOf_GET(r) (((r).sm_status2[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_MOf_SET(r,f) (r).sm_status2[0]=(((r).sm_status2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS2r,(_r._sm_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS2r,(_r._sm_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS2r BCMI_HYPERLITE_XGXS_SM_STATUS2r
#define SM_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS2r_t SM_STATUS2r_t;
#define SM_STATUS2r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS2r_CLR
#define SM_STATUS2r_SET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SET
#define SM_STATUS2r_GET BCMI_HYPERLITE_XGXS_SM_STATUS2r_GET
#define SM_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS2r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS2r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS2r_SLICER_OFFSET_POf_GET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_POf_GET
#define SM_STATUS2r_SLICER_OFFSET_POf_SET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_POf_SET
#define SM_STATUS2r_SLICER_OFFSET_ZOf_GET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_ZOf_GET
#define SM_STATUS2r_SLICER_OFFSET_ZOf_SET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_ZOf_SET
#define SM_STATUS2r_SLICER_OFFSET_MOf_GET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_MOf_GET
#define SM_STATUS2r_SLICER_OFFSET_MOf_SET BCMI_HYPERLITE_XGXS_SM_STATUS2r_SLICER_OFFSET_MOf_SET
#define READ_SM_STATUS2r BCMI_HYPERLITE_XGXS_READ_SM_STATUS2r
#define WRITE_SM_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS3
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82ba
 * DESC:     State Machine Status 3 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_ME 
 *     SLICER_OFFSET_ZE 
 *     SLICER_OFFSET_PE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r (0x0002b01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS3r_s {
	uint32_t v[1];
	uint32_t sm_status3[1];
	uint32_t _sm_status3;
} BCMI_HYPERLITE_XGXS_SM_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_CLR(r) (r).sm_status3[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SET(r,d) (r).sm_status3[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_GET(r) (r).sm_status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status3[0]=(((r).sm_status3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_PEf_GET(r) ((((r).sm_status3[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_PEf_SET(r,f) (r).sm_status3[0]=(((r).sm_status3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_ZEf_GET(r) ((((r).sm_status3[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_ZEf_SET(r,f) (r).sm_status3[0]=(((r).sm_status3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_MEf_GET(r) (((r).sm_status3[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_MEf_SET(r,f) (r).sm_status3[0]=(((r).sm_status3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS3r,(_r._sm_status3))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS3r,(_r._sm_status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS3r BCMI_HYPERLITE_XGXS_SM_STATUS3r
#define SM_STATUS3r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS3r_t SM_STATUS3r_t;
#define SM_STATUS3r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS3r_CLR
#define SM_STATUS3r_SET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SET
#define SM_STATUS3r_GET BCMI_HYPERLITE_XGXS_SM_STATUS3r_GET
#define SM_STATUS3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS3r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS3r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS3r_SLICER_OFFSET_PEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_PEf_GET
#define SM_STATUS3r_SLICER_OFFSET_PEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_PEf_SET
#define SM_STATUS3r_SLICER_OFFSET_ZEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_ZEf_GET
#define SM_STATUS3r_SLICER_OFFSET_ZEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_ZEf_SET
#define SM_STATUS3r_SLICER_OFFSET_MEf_GET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_MEf_GET
#define SM_STATUS3r_SLICER_OFFSET_MEf_SET BCMI_HYPERLITE_XGXS_SM_STATUS3r_SLICER_OFFSET_MEf_SET
#define READ_SM_STATUS3r BCMI_HYPERLITE_XGXS_READ_SM_STATUS3r
#define WRITE_SM_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS4
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82bb
 * DESC:     State Machine Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL          
 *     PF_MIN           
 *     PF_MAX           
 *     VGA_MIN          
 *     VGA_MAX          
 *     DFE_MIN          
 *     DFE_MAX          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r (0x0002b01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS4r_s {
	uint32_t v[1];
	uint32_t sm_status4[1];
	uint32_t _sm_status4;
} BCMI_HYPERLITE_XGXS_SM_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_CLR(r) (r).sm_status4[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_SET(r,d) (r).sm_status4[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_GET(r) (r).sm_status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status4[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MAXf_GET(r) ((((r).sm_status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MAXf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MINf_GET(r) ((((r).sm_status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MINf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MAXf_GET(r) ((((r).sm_status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MAXf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MINf_GET(r) ((((r).sm_status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MINf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MAXf_GET(r) ((((r).sm_status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MAXf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MINf_GET(r) ((((r).sm_status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MINf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_CTRLf_GET(r) (((r).sm_status4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_CTRLf_SET(r,f) (r).sm_status4[0]=(((r).sm_status4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SM_STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS4r,(_r._sm_status4))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS4r,(_r._sm_status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS4r BCMI_HYPERLITE_XGXS_SM_STATUS4r
#define SM_STATUS4r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS4r_t SM_STATUS4r_t;
#define SM_STATUS4r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS4r_CLR
#define SM_STATUS4r_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_SET
#define SM_STATUS4r_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_GET
#define SM_STATUS4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS4r_DFE_MAXf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MAXf_GET
#define SM_STATUS4r_DFE_MAXf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MAXf_SET
#define SM_STATUS4r_DFE_MINf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MINf_GET
#define SM_STATUS4r_DFE_MINf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_DFE_MINf_SET
#define SM_STATUS4r_VGA_MAXf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MAXf_GET
#define SM_STATUS4r_VGA_MAXf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MAXf_SET
#define SM_STATUS4r_VGA_MINf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MINf_GET
#define SM_STATUS4r_VGA_MINf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_VGA_MINf_SET
#define SM_STATUS4r_PF_MAXf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MAXf_GET
#define SM_STATUS4r_PF_MAXf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MAXf_SET
#define SM_STATUS4r_PF_MINf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MINf_GET
#define SM_STATUS4r_PF_MINf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_MINf_SET
#define SM_STATUS4r_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_CTRLf_GET
#define SM_STATUS4r_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_SM_STATUS4r_PF_CTRLf_SET
#define READ_SM_STATUS4r BCMI_HYPERLITE_XGXS_READ_SM_STATUS4r
#define WRITE_SM_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ANA_STATUS0
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82bc
 * DESC:     DSC Analog Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET_PD        
 *     EN_HGAIN         
 *     EN_DFE_CLK       
 *     PD_CH_P1         
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r (0x0002b01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program ANA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ANA_STATUS0r_s {
	uint32_t v[1];
	uint32_t ana_status0[1];
	uint32_t _ana_status0;
} BCMI_HYPERLITE_XGXS_ANA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_CLR(r) (r).ana_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_SET(r,d) (r).ana_status0[0] = d
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_GET(r) (r).ana_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).ana_status0[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).ana_status0[0]=(((r).ana_status0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_PD_CH_P1f_GET(r) ((((r).ana_status0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_PD_CH_P1f_SET(r,f) (r).ana_status0[0]=(((r).ana_status0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_DFE_CLKf_GET(r) ((((r).ana_status0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_DFE_CLKf_SET(r,f) (r).ana_status0[0]=(((r).ana_status0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_HGAINf_GET(r) ((((r).ana_status0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_HGAINf_SET(r,f) (r).ana_status0[0]=(((r).ana_status0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_OFFSET_PDf_GET(r) (((r).ana_status0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_ANA_STATUS0r_OFFSET_PDf_SET(r,f) (r).ana_status0[0]=(((r).ana_status0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ANA_STATUS0r,(_r._ana_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ANA_STATUS0r,(_r._ana_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANA_STATUS0r BCMI_HYPERLITE_XGXS_ANA_STATUS0r
#define ANA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_ANA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_ANA_STATUS0r_t ANA_STATUS0r_t;
#define ANA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_ANA_STATUS0r_CLR
#define ANA_STATUS0r_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_SET
#define ANA_STATUS0r_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_GET
#define ANA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define ANA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define ANA_STATUS0r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_PD_CH_P1f_GET
#define ANA_STATUS0r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_PD_CH_P1f_SET
#define ANA_STATUS0r_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_DFE_CLKf_GET
#define ANA_STATUS0r_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_DFE_CLKf_SET
#define ANA_STATUS0r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_HGAINf_GET
#define ANA_STATUS0r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_EN_HGAINf_SET
#define ANA_STATUS0r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_OFFSET_PDf_GET
#define ANA_STATUS0r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_ANA_STATUS0r_OFFSET_PDf_SET
#define READ_ANA_STATUS0r BCMI_HYPERLITE_XGXS_READ_ANA_STATUS0r
#define WRITE_ANA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_ANA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ANA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS5
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82bd
 * DESC:     State Machine Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_BR_VGA    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r (0x0002b01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS5r_s {
	uint32_t v[1];
	uint32_t sm_status5[1];
	uint32_t _sm_status5;
} BCMI_HYPERLITE_XGXS_SM_STATUS5r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_CLR(r) (r).sm_status5[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_SET(r,d) (r).sm_status5[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_GET(r) (r).sm_status5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status5[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status5[0]=(((r).sm_status5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_TRNSUM_BR_VGAf_GET(r) (((r).sm_status5[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_SM_STATUS5r_TRNSUM_BR_VGAf_SET(r,f) (r).sm_status5[0]=(((r).sm_status5[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access SM_STATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS5r,(_r._sm_status5))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS5r,(_r._sm_status5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS5r BCMI_HYPERLITE_XGXS_SM_STATUS5r
#define SM_STATUS5r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS5r_t SM_STATUS5r_t;
#define SM_STATUS5r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS5r_CLR
#define SM_STATUS5r_SET BCMI_HYPERLITE_XGXS_SM_STATUS5r_SET
#define SM_STATUS5r_GET BCMI_HYPERLITE_XGXS_SM_STATUS5r_GET
#define SM_STATUS5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS5r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS5r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS5r_TRNSUM_BR_VGAf_GET BCMI_HYPERLITE_XGXS_SM_STATUS5r_TRNSUM_BR_VGAf_GET
#define SM_STATUS5r_TRNSUM_BR_VGAf_SET BCMI_HYPERLITE_XGXS_SM_STATUS5r_TRNSUM_BR_VGAf_SET
#define READ_SM_STATUS5r BCMI_HYPERLITE_XGXS_READ_SM_STATUS5r
#define WRITE_SM_STATUS5r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS6
 * BLOCKS:   DSC3B0
 * REGADDR:  0x82be
 * DESC:     State Machine Status 6 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_PF        
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r (0x0002b01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS6r_s {
	uint32_t v[1];
	uint32_t sm_status6[1];
	uint32_t _sm_status6;
} BCMI_HYPERLITE_XGXS_SM_STATUS6r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_CLR(r) (r).sm_status6[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_SET(r,d) (r).sm_status6[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_GET(r) (r).sm_status6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status6[0]=(((r).sm_status6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_TRNSUM_PFf_GET(r) (((r).sm_status6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_SM_STATUS6r_TRNSUM_PFf_SET(r,f) (r).sm_status6[0]=(((r).sm_status6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access SM_STATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS6r,(_r._sm_status6))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS6r,(_r._sm_status6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS6r BCMI_HYPERLITE_XGXS_SM_STATUS6r
#define SM_STATUS6r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS6r_t SM_STATUS6r_t;
#define SM_STATUS6r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS6r_CLR
#define SM_STATUS6r_SET BCMI_HYPERLITE_XGXS_SM_STATUS6r_SET
#define SM_STATUS6r_GET BCMI_HYPERLITE_XGXS_SM_STATUS6r_GET
#define SM_STATUS6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS6r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS6r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS6r_TRNSUM_PFf_GET BCMI_HYPERLITE_XGXS_SM_STATUS6r_TRNSUM_PFf_GET
#define SM_STATUS6r_TRNSUM_PFf_SET BCMI_HYPERLITE_XGXS_SM_STATUS6r_TRNSUM_PFf_SET
#define READ_SM_STATUS6r BCMI_HYPERLITE_XGXS_READ_SM_STATUS6r
#define WRITE_SM_STATUS6r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_CDR_STATUS0
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c0
 * DESC:     CDR Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r (0x0002c010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_CDR_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b1_cdr_status0[1];
	uint32_t _dsc3b1_cdr_status0;
} BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_CLR(r) (r).dsc3b1_cdr_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_SET(r,d) (r).dsc3b1_cdr_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_GET(r) (r).dsc3b1_cdr_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_INTEG_REGf_GET(r) (((r).dsc3b1_cdr_status0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_INTEG_REGf_SET(r,f) (r).dsc3b1_cdr_status0[0]=(((r).dsc3b1_cdr_status0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B1_CDR_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r,(_r._dsc3b1_cdr_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r,(_r._dsc3b1_cdr_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_CDR_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r
#define DSC3B1_CDR_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_t DSC3B1_CDR_STATUS0r_t;
#define DSC3B1_CDR_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_CLR
#define DSC3B1_CDR_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_SET
#define DSC3B1_CDR_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_GET
#define DSC3B1_CDR_STATUS0r_INTEG_REGf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_INTEG_REGf_GET
#define DSC3B1_CDR_STATUS0r_INTEG_REGf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r_INTEG_REGf_SET
#define READ_DSC3B1_CDR_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS0r
#define WRITE_DSC3B1_CDR_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_CDR_STATUS1
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c1
 * DESC:     CDR Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG_XFER   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r (0x0002c011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_CDR_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b1_cdr_status1[1];
	uint32_t _dsc3b1_cdr_status1;
} BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_CLR(r) (r).dsc3b1_cdr_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_SET(r,d) (r).dsc3b1_cdr_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_GET(r) (r).dsc3b1_cdr_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_GET(r) (((r).dsc3b1_cdr_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_SET(r,f) (r).dsc3b1_cdr_status1[0]=(((r).dsc3b1_cdr_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B1_CDR_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r,(_r._dsc3b1_cdr_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r,(_r._dsc3b1_cdr_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_CDR_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r
#define DSC3B1_CDR_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_t DSC3B1_CDR_STATUS1r_t;
#define DSC3B1_CDR_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_CLR
#define DSC3B1_CDR_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_SET
#define DSC3B1_CDR_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_GET
#define DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_GET
#define DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r_INTEG_REG_XFERf_SET
#define READ_DSC3B1_CDR_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS1r
#define WRITE_DSC3B1_CDR_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_CDR_STATUS2
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c2
 * DESC:     CDR Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_ERR        
 *     OSCDR_MODE       
 *     BR_CDR_ENABLED   
 *     SM_BR_CDR_ENABLED 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r (0x0002c012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_CDR_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b1_cdr_status2[1];
	uint32_t _dsc3b1_cdr_status2;
} BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_CLR(r) (r).dsc3b1_cdr_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SET(r,d) (r).dsc3b1_cdr_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_GET(r) (r).dsc3b1_cdr_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_cdr_status2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_cdr_status2[0]=(((r).dsc3b1_cdr_status2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b1_cdr_status2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b1_cdr_status2[0]=(((r).dsc3b1_cdr_status2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b1_cdr_status2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b1_cdr_status2[0]=(((r).dsc3b1_cdr_status2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_OSCDR_MODEf_GET(r) ((((r).dsc3b1_cdr_status2[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_OSCDR_MODEf_SET(r,f) (r).dsc3b1_cdr_status2[0]=(((r).dsc3b1_cdr_status2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_PHASE_ERRf_GET(r) (((r).dsc3b1_cdr_status2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_PHASE_ERRf_SET(r,f) (r).dsc3b1_cdr_status2[0]=(((r).dsc3b1_cdr_status2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B1_CDR_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r,(_r._dsc3b1_cdr_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r,(_r._dsc3b1_cdr_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_CDR_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r
#define DSC3B1_CDR_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_t DSC3B1_CDR_STATUS2r_t;
#define DSC3B1_CDR_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_CLR
#define DSC3B1_CDR_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SET
#define DSC3B1_CDR_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_GET
#define DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET
#define DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET
#define DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_GET
#define DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_BR_CDR_ENABLEDf_SET
#define DSC3B1_CDR_STATUS2r_OSCDR_MODEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_OSCDR_MODEf_GET
#define DSC3B1_CDR_STATUS2r_OSCDR_MODEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_OSCDR_MODEf_SET
#define DSC3B1_CDR_STATUS2r_PHASE_ERRf_GET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_PHASE_ERRf_GET
#define DSC3B1_CDR_STATUS2r_PHASE_ERRf_SET BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r_PHASE_ERRf_SET
#define READ_DSC3B1_CDR_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B1_CDR_STATUS2r
#define WRITE_DSC3B1_CDR_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_CDR_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_CDR_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_PI_STATUS0
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c3
 * DESC:     Phase Interpolator Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_CNTR       
 *     CLK90_PHASE_OFFSET 
 *     INVALID_INTRP_CTRL90 
 *     INVALID_INTRP_CTRL0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r (0x0002c013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_PI_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b1_pi_status0[1];
	uint32_t _dsc3b1_pi_status0;
} BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLR(r) (r).dsc3b1_pi_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_SET(r,d) (r).dsc3b1_pi_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_GET(r) (r).dsc3b1_pi_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET(r) ((((r).dsc3b1_pi_status0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET(r,f) (r).dsc3b1_pi_status0[0]=(((r).dsc3b1_pi_status0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET(r) ((((r).dsc3b1_pi_status0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET(r,f) (r).dsc3b1_pi_status0[0]=(((r).dsc3b1_pi_status0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET(r) ((((r).dsc3b1_pi_status0[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET(r,f) (r).dsc3b1_pi_status0[0]=(((r).dsc3b1_pi_status0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_PHASE_CNTRf_GET(r) (((r).dsc3b1_pi_status0[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_PHASE_CNTRf_SET(r,f) (r).dsc3b1_pi_status0[0]=(((r).dsc3b1_pi_status0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC3B1_PI_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_PI_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r,(_r._dsc3b1_pi_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_PI_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r,(_r._dsc3b1_pi_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_PI_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r
#define DSC3B1_PI_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_t DSC3B1_PI_STATUS0r_t;
#define DSC3B1_PI_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLR
#define DSC3B1_PI_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_SET
#define DSC3B1_PI_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_GET
#define DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET
#define DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET
#define DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET
#define DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET
#define DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET
#define DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET
#define DSC3B1_PI_STATUS0r_PHASE_CNTRf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_PHASE_CNTRf_GET
#define DSC3B1_PI_STATUS0r_PHASE_CNTRf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r_PHASE_CNTRf_SET
#define READ_DSC3B1_PI_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B1_PI_STATUS0r
#define WRITE_DSC3B1_PI_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_PI_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_PI_STATUS1
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c4
 * DESC:     Phase Interpolator Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     PI_SINGLE90_MSB_SINGLE90_MSB 
 *     PI_SINGLE0_LSB_SINGLE0_LSB 
 *     PI_SEQUENCE90_MSB_SEQUENCE90_MSB 
 *     PI_SINGLE90_LSB_SINGLE90_LSB 
 *     PI_SEQUENCE0_LSB_SEQUENCE0_LSB 
 *     PI_SEQUENCE90_LSB_SEQUENCE90_LSB 
 *     PI_SEQUENCE0_MSB_SEQUENCE0_MSB 
 *     PI_SINGLE0_MSB_SINGLE0_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r (0x0002c014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_PI_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b1_pi_status1[1];
	uint32_t _dsc3b1_pi_status1;
} BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_CLR(r) (r).dsc3b1_pi_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_SET(r,d) (r).dsc3b1_pi_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_GET(r) (r).dsc3b1_pi_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET(r) (((r).dsc3b1_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET(r,f) (r).dsc3b1_pi_status1[0]=(((r).dsc3b1_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B1_PI_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_PI_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r,(_r._dsc3b1_pi_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_PI_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r,(_r._dsc3b1_pi_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_PI_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r
#define DSC3B1_PI_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_t DSC3B1_PI_STATUS1r_t;
#define DSC3B1_PI_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_CLR
#define DSC3B1_PI_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_SET
#define DSC3B1_PI_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_GET
#define DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET
#define DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET
#define DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET
#define READ_DSC3B1_PI_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B1_PI_STATUS1r
#define WRITE_DSC3B1_PI_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_PI_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_PI_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_DFE_VGA_STATUS0
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c5
 * DESC:     DFE VGA Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_TAP_BIN      
 *     VGA_SUM          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r (0x0002c015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_DFE_VGA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b1_dfe_vga_status0[1];
	uint32_t _dsc3b1_dfe_vga_status0;
} BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_CLR(r) (r).dsc3b1_dfe_vga_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_SET(r,d) (r).dsc3b1_dfe_vga_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_GET(r) (r).dsc3b1_dfe_vga_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_dfe_vga_status0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_dfe_vga_status0[0]=(((r).dsc3b1_dfe_vga_status0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_GET(r) ((((r).dsc3b1_dfe_vga_status0[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_SET(r,f) (r).dsc3b1_dfe_vga_status0[0]=(((r).dsc3b1_dfe_vga_status0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET(r) (((r).dsc3b1_dfe_vga_status0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET(r,f) (r).dsc3b1_dfe_vga_status0[0]=(((r).dsc3b1_dfe_vga_status0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B1_DFE_VGA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r,(_r._dsc3b1_dfe_vga_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r,(_r._dsc3b1_dfe_vga_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r
#define DSC3B1_DFE_VGA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_t DSC3B1_DFE_VGA_STATUS0r_t;
#define DSC3B1_DFE_VGA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_CLR
#define DSC3B1_DFE_VGA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_SET
#define DSC3B1_DFE_VGA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_GET
#define DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_GET
#define DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_VGA_SUMf_SET
#define DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET
#define DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET
#define READ_DSC3B1_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B1_DFE_VGA_STATUS0r
#define WRITE_DSC3B1_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_DFE_VGA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_DFE_VGA_STATUS1
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c6
 * DESC:     DFE VGA Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r (0x0002c016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_DFE_VGA_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b1_dfe_vga_status1[1];
	uint32_t _dsc3b1_dfe_vga_status1;
} BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_CLR(r) (r).dsc3b1_dfe_vga_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_SET(r,d) (r).dsc3b1_dfe_vga_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_GET(r) (r).dsc3b1_dfe_vga_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_dfe_vga_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_dfe_vga_status1[0]=(((r).dsc3b1_dfe_vga_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_GET(r) (((r).dsc3b1_dfe_vga_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_SET(r,f) (r).dsc3b1_dfe_vga_status1[0]=(((r).dsc3b1_dfe_vga_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B1_DFE_VGA_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r,(_r._dsc3b1_dfe_vga_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r,(_r._dsc3b1_dfe_vga_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r
#define DSC3B1_DFE_VGA_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_t DSC3B1_DFE_VGA_STATUS1r_t;
#define DSC3B1_DFE_VGA_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_CLR
#define DSC3B1_DFE_VGA_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_SET
#define DSC3B1_DFE_VGA_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_GET
#define DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_GET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_GET
#define DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_SET BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r_TRNSUMf_SET
#define READ_DSC3B1_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B1_DFE_VGA_STATUS1r
#define WRITE_DSC3B1_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_DFE_VGA_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_DFE_VGA_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS0
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c7
 * DESC:     State Machine Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE        
 *     TUNING_STATE     
 *     SRCH_STATE       
 *     TUNING_DONE      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r (0x0002c017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status0[1];
	uint32_t _dsc3b1_sm_status0;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_CLR(r) (r).dsc3b1_sm_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SET(r,d) (r).dsc3b1_sm_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_GET(r) (r).dsc3b1_sm_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status0[0]=(((r).dsc3b1_sm_status0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_DONEf_GET(r) ((((r).dsc3b1_sm_status0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_DONEf_SET(r,f) (r).dsc3b1_sm_status0[0]=(((r).dsc3b1_sm_status0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SRCH_STATEf_GET(r) ((((r).dsc3b1_sm_status0[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SRCH_STATEf_SET(r,f) (r).dsc3b1_sm_status0[0]=(((r).dsc3b1_sm_status0[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_STATEf_GET(r) ((((r).dsc3b1_sm_status0[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_STATEf_SET(r,f) (r).dsc3b1_sm_status0[0]=(((r).dsc3b1_sm_status0[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_DSC_STATEf_GET(r) (((r).dsc3b1_sm_status0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_DSC_STATEf_SET(r,f) (r).dsc3b1_sm_status0[0]=(((r).dsc3b1_sm_status0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC3B1_SM_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r,(_r._dsc3b1_sm_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r,(_r._dsc3b1_sm_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r
#define DSC3B1_SM_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_t DSC3B1_SM_STATUS0r_t;
#define DSC3B1_SM_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_CLR
#define DSC3B1_SM_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SET
#define DSC3B1_SM_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_GET
#define DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS0r_TUNING_DONEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_DONEf_GET
#define DSC3B1_SM_STATUS0r_TUNING_DONEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_DONEf_SET
#define DSC3B1_SM_STATUS0r_SRCH_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SRCH_STATEf_GET
#define DSC3B1_SM_STATUS0r_SRCH_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_SRCH_STATEf_SET
#define DSC3B1_SM_STATUS0r_TUNING_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_STATEf_GET
#define DSC3B1_SM_STATUS0r_TUNING_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_TUNING_STATEf_SET
#define DSC3B1_SM_STATUS0r_DSC_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_DSC_STATEf_GET
#define DSC3B1_SM_STATUS0r_DSC_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r_DSC_STATEf_SET
#define READ_DSC3B1_SM_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS0r
#define WRITE_DSC3B1_SM_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS1
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c8
 * DESC:     State Machine Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     POSTC_METRIC     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r (0x0002c018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status1[1];
	uint32_t _dsc3b1_sm_status1;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_CLR(r) (r).dsc3b1_sm_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_SET(r,d) (r).dsc3b1_sm_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_GET(r) (r).dsc3b1_sm_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status1[0]=(((r).dsc3b1_sm_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_POSTC_METRICf_GET(r) (((r).dsc3b1_sm_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_POSTC_METRICf_SET(r,f) (r).dsc3b1_sm_status1[0]=(((r).dsc3b1_sm_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B1_SM_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r,(_r._dsc3b1_sm_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r,(_r._dsc3b1_sm_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r
#define DSC3B1_SM_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_t DSC3B1_SM_STATUS1r_t;
#define DSC3B1_SM_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_CLR
#define DSC3B1_SM_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_SET
#define DSC3B1_SM_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_GET
#define DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS1r_POSTC_METRICf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_POSTC_METRICf_GET
#define DSC3B1_SM_STATUS1r_POSTC_METRICf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r_POSTC_METRICf_SET
#define READ_DSC3B1_SM_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS1r
#define WRITE_DSC3B1_SM_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS2
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82c9
 * DESC:     State Machine Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_MO 
 *     SLICER_OFFSET_ZO 
 *     SLICER_OFFSET_PO 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r (0x0002c019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status2[1];
	uint32_t _dsc3b1_sm_status2;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_CLR(r) (r).dsc3b1_sm_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SET(r,d) (r).dsc3b1_sm_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_GET(r) (r).dsc3b1_sm_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status2[0]=(((r).dsc3b1_sm_status2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_GET(r) ((((r).dsc3b1_sm_status2[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_SET(r,f) (r).dsc3b1_sm_status2[0]=(((r).dsc3b1_sm_status2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_GET(r) ((((r).dsc3b1_sm_status2[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_SET(r,f) (r).dsc3b1_sm_status2[0]=(((r).dsc3b1_sm_status2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_GET(r) (((r).dsc3b1_sm_status2[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_SET(r,f) (r).dsc3b1_sm_status2[0]=(((r).dsc3b1_sm_status2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B1_SM_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r,(_r._dsc3b1_sm_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r,(_r._dsc3b1_sm_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r
#define DSC3B1_SM_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_t DSC3B1_SM_STATUS2r_t;
#define DSC3B1_SM_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_CLR
#define DSC3B1_SM_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SET
#define DSC3B1_SM_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_GET
#define DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_GET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_POf_SET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_GET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_ZOf_SET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_GET
#define DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r_SLICER_OFFSET_MOf_SET
#define READ_DSC3B1_SM_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS2r
#define WRITE_DSC3B1_SM_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS3
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82ca
 * DESC:     State Machine Status 3 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_ME 
 *     SLICER_OFFSET_ZE 
 *     SLICER_OFFSET_PE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r (0x0002c01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status3[1];
	uint32_t _dsc3b1_sm_status3;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_CLR(r) (r).dsc3b1_sm_status3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SET(r,d) (r).dsc3b1_sm_status3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_GET(r) (r).dsc3b1_sm_status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status3[0]=(((r).dsc3b1_sm_status3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_GET(r) ((((r).dsc3b1_sm_status3[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_SET(r,f) (r).dsc3b1_sm_status3[0]=(((r).dsc3b1_sm_status3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_GET(r) ((((r).dsc3b1_sm_status3[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_SET(r,f) (r).dsc3b1_sm_status3[0]=(((r).dsc3b1_sm_status3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_GET(r) (((r).dsc3b1_sm_status3[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_SET(r,f) (r).dsc3b1_sm_status3[0]=(((r).dsc3b1_sm_status3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B1_SM_STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r,(_r._dsc3b1_sm_status3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r,(_r._dsc3b1_sm_status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS3r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r
#define DSC3B1_SM_STATUS3r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_t DSC3B1_SM_STATUS3r_t;
#define DSC3B1_SM_STATUS3r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_CLR
#define DSC3B1_SM_STATUS3r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SET
#define DSC3B1_SM_STATUS3r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_GET
#define DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_GET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_PEf_SET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_GET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_ZEf_SET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_GET
#define DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r_SLICER_OFFSET_MEf_SET
#define READ_DSC3B1_SM_STATUS3r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS3r
#define WRITE_DSC3B1_SM_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS4
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82cb
 * DESC:     State Machine Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL          
 *     PF_MIN           
 *     PF_MAX           
 *     VGA_MIN          
 *     VGA_MAX          
 *     DFE_MIN          
 *     DFE_MAX          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r (0x0002c01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status4[1];
	uint32_t _dsc3b1_sm_status4;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_CLR(r) (r).dsc3b1_sm_status4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_SET(r,d) (r).dsc3b1_sm_status4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_GET(r) (r).dsc3b1_sm_status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MAXf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MAXf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MINf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MINf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MAXf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MAXf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MINf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MINf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MAXf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MAXf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MINf_GET(r) ((((r).dsc3b1_sm_status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MINf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_CTRLf_GET(r) (((r).dsc3b1_sm_status4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_CTRLf_SET(r,f) (r).dsc3b1_sm_status4[0]=(((r).dsc3b1_sm_status4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC3B1_SM_STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r,(_r._dsc3b1_sm_status4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r,(_r._dsc3b1_sm_status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS4r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r
#define DSC3B1_SM_STATUS4r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_t DSC3B1_SM_STATUS4r_t;
#define DSC3B1_SM_STATUS4r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_CLR
#define DSC3B1_SM_STATUS4r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_SET
#define DSC3B1_SM_STATUS4r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_GET
#define DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS4r_DFE_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MAXf_GET
#define DSC3B1_SM_STATUS4r_DFE_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MAXf_SET
#define DSC3B1_SM_STATUS4r_DFE_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MINf_GET
#define DSC3B1_SM_STATUS4r_DFE_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_DFE_MINf_SET
#define DSC3B1_SM_STATUS4r_VGA_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MAXf_GET
#define DSC3B1_SM_STATUS4r_VGA_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MAXf_SET
#define DSC3B1_SM_STATUS4r_VGA_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MINf_GET
#define DSC3B1_SM_STATUS4r_VGA_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_VGA_MINf_SET
#define DSC3B1_SM_STATUS4r_PF_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MAXf_GET
#define DSC3B1_SM_STATUS4r_PF_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MAXf_SET
#define DSC3B1_SM_STATUS4r_PF_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MINf_GET
#define DSC3B1_SM_STATUS4r_PF_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_MINf_SET
#define DSC3B1_SM_STATUS4r_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_CTRLf_GET
#define DSC3B1_SM_STATUS4r_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r_PF_CTRLf_SET
#define READ_DSC3B1_SM_STATUS4r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS4r
#define WRITE_DSC3B1_SM_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_ANA_STATUS0
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82cc
 * DESC:     DSC Analog Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET_PD        
 *     EN_HGAIN         
 *     EN_DFE_CLK       
 *     PD_CH_P1         
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r (0x0002c01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_ANA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b1_ana_status0[1];
	uint32_t _dsc3b1_ana_status0;
} BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_CLR(r) (r).dsc3b1_ana_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_SET(r,d) (r).dsc3b1_ana_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_GET(r) (r).dsc3b1_ana_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_ana_status0[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_ana_status0[0]=(((r).dsc3b1_ana_status0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_PD_CH_P1f_GET(r) ((((r).dsc3b1_ana_status0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_PD_CH_P1f_SET(r,f) (r).dsc3b1_ana_status0[0]=(((r).dsc3b1_ana_status0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_GET(r) ((((r).dsc3b1_ana_status0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_SET(r,f) (r).dsc3b1_ana_status0[0]=(((r).dsc3b1_ana_status0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_HGAINf_GET(r) ((((r).dsc3b1_ana_status0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_HGAINf_SET(r,f) (r).dsc3b1_ana_status0[0]=(((r).dsc3b1_ana_status0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_OFFSET_PDf_GET(r) (((r).dsc3b1_ana_status0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_OFFSET_PDf_SET(r,f) (r).dsc3b1_ana_status0[0]=(((r).dsc3b1_ana_status0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC3B1_ANA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r,(_r._dsc3b1_ana_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r,(_r._dsc3b1_ana_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_ANA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r
#define DSC3B1_ANA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_t DSC3B1_ANA_STATUS0r_t;
#define DSC3B1_ANA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_CLR
#define DSC3B1_ANA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_SET
#define DSC3B1_ANA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_GET
#define DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_ANA_STATUS0r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_PD_CH_P1f_GET
#define DSC3B1_ANA_STATUS0r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_PD_CH_P1f_SET
#define DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_GET
#define DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_DFE_CLKf_SET
#define DSC3B1_ANA_STATUS0r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_HGAINf_GET
#define DSC3B1_ANA_STATUS0r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_EN_HGAINf_SET
#define DSC3B1_ANA_STATUS0r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_OFFSET_PDf_GET
#define DSC3B1_ANA_STATUS0r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r_OFFSET_PDf_SET
#define READ_DSC3B1_ANA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B1_ANA_STATUS0r
#define WRITE_DSC3B1_ANA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_ANA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_ANA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS5
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82cd
 * DESC:     State Machine Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_BR_VGA    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r (0x0002c01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status5[1];
	uint32_t _dsc3b1_sm_status5;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_CLR(r) (r).dsc3b1_sm_status5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_SET(r,d) (r).dsc3b1_sm_status5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_GET(r) (r).dsc3b1_sm_status5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status5[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status5[0]=(((r).dsc3b1_sm_status5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_GET(r) (((r).dsc3b1_sm_status5[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_SET(r,f) (r).dsc3b1_sm_status5[0]=(((r).dsc3b1_sm_status5[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B1_SM_STATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r,(_r._dsc3b1_sm_status5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r,(_r._dsc3b1_sm_status5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS5r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r
#define DSC3B1_SM_STATUS5r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_t DSC3B1_SM_STATUS5r_t;
#define DSC3B1_SM_STATUS5r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_CLR
#define DSC3B1_SM_STATUS5r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_SET
#define DSC3B1_SM_STATUS5r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_GET
#define DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_GET
#define DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r_TRNSUM_BR_VGAf_SET
#define READ_DSC3B1_SM_STATUS5r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS5r
#define WRITE_DSC3B1_SM_STATUS5r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B1_SM_STATUS6
 * BLOCKS:   DSC3B1
 * REGADDR:  0x82ce
 * DESC:     State Machine Status 6 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_PF        
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r (0x0002c01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B1_SM_STATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_s {
	uint32_t v[1];
	uint32_t dsc3b1_sm_status6[1];
	uint32_t _dsc3b1_sm_status6;
} BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_CLR(r) (r).dsc3b1_sm_status6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_SET(r,d) (r).dsc3b1_sm_status6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_GET(r) (r).dsc3b1_sm_status6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b1_sm_status6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b1_sm_status6[0]=(((r).dsc3b1_sm_status6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_TRNSUM_PFf_GET(r) (((r).dsc3b1_sm_status6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_TRNSUM_PFf_SET(r,f) (r).dsc3b1_sm_status6[0]=(((r).dsc3b1_sm_status6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B1_SM_STATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r,(_r._dsc3b1_sm_status6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r,(_r._dsc3b1_sm_status6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B1_SM_STATUS6r BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r
#define DSC3B1_SM_STATUS6r_SIZE BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_t DSC3B1_SM_STATUS6r_t;
#define DSC3B1_SM_STATUS6r_CLR BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_CLR
#define DSC3B1_SM_STATUS6r_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_SET
#define DSC3B1_SM_STATUS6r_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_GET
#define DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_GET
#define DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_RESERVED_FOR_ECO0f_SET
#define DSC3B1_SM_STATUS6r_TRNSUM_PFf_GET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_TRNSUM_PFf_GET
#define DSC3B1_SM_STATUS6r_TRNSUM_PFf_SET BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r_TRNSUM_PFf_SET
#define READ_DSC3B1_SM_STATUS6r BCMI_HYPERLITE_XGXS_READ_DSC3B1_SM_STATUS6r
#define WRITE_DSC3B1_SM_STATUS6r BCMI_HYPERLITE_XGXS_WRITE_DSC3B1_SM_STATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B1_SM_STATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_CDR_STATUS0
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d0
 * DESC:     CDR Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r (0x0002d010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_CDR_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b2_cdr_status0[1];
	uint32_t _dsc3b2_cdr_status0;
} BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_CLR(r) (r).dsc3b2_cdr_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_SET(r,d) (r).dsc3b2_cdr_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_GET(r) (r).dsc3b2_cdr_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_INTEG_REGf_GET(r) (((r).dsc3b2_cdr_status0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_INTEG_REGf_SET(r,f) (r).dsc3b2_cdr_status0[0]=(((r).dsc3b2_cdr_status0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B2_CDR_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r,(_r._dsc3b2_cdr_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r,(_r._dsc3b2_cdr_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_CDR_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r
#define DSC3B2_CDR_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_t DSC3B2_CDR_STATUS0r_t;
#define DSC3B2_CDR_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_CLR
#define DSC3B2_CDR_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_SET
#define DSC3B2_CDR_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_GET
#define DSC3B2_CDR_STATUS0r_INTEG_REGf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_INTEG_REGf_GET
#define DSC3B2_CDR_STATUS0r_INTEG_REGf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r_INTEG_REGf_SET
#define READ_DSC3B2_CDR_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS0r
#define WRITE_DSC3B2_CDR_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_CDR_STATUS1
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d1
 * DESC:     CDR Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG_XFER   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r (0x0002d011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_CDR_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b2_cdr_status1[1];
	uint32_t _dsc3b2_cdr_status1;
} BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_CLR(r) (r).dsc3b2_cdr_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_SET(r,d) (r).dsc3b2_cdr_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_GET(r) (r).dsc3b2_cdr_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_GET(r) (((r).dsc3b2_cdr_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_SET(r,f) (r).dsc3b2_cdr_status1[0]=(((r).dsc3b2_cdr_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B2_CDR_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r,(_r._dsc3b2_cdr_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r,(_r._dsc3b2_cdr_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_CDR_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r
#define DSC3B2_CDR_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_t DSC3B2_CDR_STATUS1r_t;
#define DSC3B2_CDR_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_CLR
#define DSC3B2_CDR_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_SET
#define DSC3B2_CDR_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_GET
#define DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_GET
#define DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r_INTEG_REG_XFERf_SET
#define READ_DSC3B2_CDR_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS1r
#define WRITE_DSC3B2_CDR_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_CDR_STATUS2
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d2
 * DESC:     CDR Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_ERR        
 *     OSCDR_MODE       
 *     BR_CDR_ENABLED   
 *     SM_BR_CDR_ENABLED 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r (0x0002d012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_CDR_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b2_cdr_status2[1];
	uint32_t _dsc3b2_cdr_status2;
} BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_CLR(r) (r).dsc3b2_cdr_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SET(r,d) (r).dsc3b2_cdr_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_GET(r) (r).dsc3b2_cdr_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_cdr_status2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_cdr_status2[0]=(((r).dsc3b2_cdr_status2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b2_cdr_status2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b2_cdr_status2[0]=(((r).dsc3b2_cdr_status2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b2_cdr_status2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b2_cdr_status2[0]=(((r).dsc3b2_cdr_status2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_OSCDR_MODEf_GET(r) ((((r).dsc3b2_cdr_status2[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_OSCDR_MODEf_SET(r,f) (r).dsc3b2_cdr_status2[0]=(((r).dsc3b2_cdr_status2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_PHASE_ERRf_GET(r) (((r).dsc3b2_cdr_status2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_PHASE_ERRf_SET(r,f) (r).dsc3b2_cdr_status2[0]=(((r).dsc3b2_cdr_status2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B2_CDR_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r,(_r._dsc3b2_cdr_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r,(_r._dsc3b2_cdr_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_CDR_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r
#define DSC3B2_CDR_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_t DSC3B2_CDR_STATUS2r_t;
#define DSC3B2_CDR_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_CLR
#define DSC3B2_CDR_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SET
#define DSC3B2_CDR_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_GET
#define DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET
#define DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET
#define DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_GET
#define DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_BR_CDR_ENABLEDf_SET
#define DSC3B2_CDR_STATUS2r_OSCDR_MODEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_OSCDR_MODEf_GET
#define DSC3B2_CDR_STATUS2r_OSCDR_MODEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_OSCDR_MODEf_SET
#define DSC3B2_CDR_STATUS2r_PHASE_ERRf_GET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_PHASE_ERRf_GET
#define DSC3B2_CDR_STATUS2r_PHASE_ERRf_SET BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r_PHASE_ERRf_SET
#define READ_DSC3B2_CDR_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B2_CDR_STATUS2r
#define WRITE_DSC3B2_CDR_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_CDR_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_CDR_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_PI_STATUS0
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d3
 * DESC:     Phase Interpolator Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_CNTR       
 *     CLK90_PHASE_OFFSET 
 *     INVALID_INTRP_CTRL90 
 *     INVALID_INTRP_CTRL0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r (0x0002d013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_PI_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b2_pi_status0[1];
	uint32_t _dsc3b2_pi_status0;
} BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLR(r) (r).dsc3b2_pi_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_SET(r,d) (r).dsc3b2_pi_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_GET(r) (r).dsc3b2_pi_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET(r) ((((r).dsc3b2_pi_status0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET(r,f) (r).dsc3b2_pi_status0[0]=(((r).dsc3b2_pi_status0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET(r) ((((r).dsc3b2_pi_status0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET(r,f) (r).dsc3b2_pi_status0[0]=(((r).dsc3b2_pi_status0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET(r) ((((r).dsc3b2_pi_status0[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET(r,f) (r).dsc3b2_pi_status0[0]=(((r).dsc3b2_pi_status0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_PHASE_CNTRf_GET(r) (((r).dsc3b2_pi_status0[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_PHASE_CNTRf_SET(r,f) (r).dsc3b2_pi_status0[0]=(((r).dsc3b2_pi_status0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC3B2_PI_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_PI_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r,(_r._dsc3b2_pi_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_PI_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r,(_r._dsc3b2_pi_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_PI_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r
#define DSC3B2_PI_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_t DSC3B2_PI_STATUS0r_t;
#define DSC3B2_PI_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLR
#define DSC3B2_PI_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_SET
#define DSC3B2_PI_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_GET
#define DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET
#define DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET
#define DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET
#define DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET
#define DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET
#define DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET
#define DSC3B2_PI_STATUS0r_PHASE_CNTRf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_PHASE_CNTRf_GET
#define DSC3B2_PI_STATUS0r_PHASE_CNTRf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r_PHASE_CNTRf_SET
#define READ_DSC3B2_PI_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B2_PI_STATUS0r
#define WRITE_DSC3B2_PI_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_PI_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_PI_STATUS1
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d4
 * DESC:     Phase Interpolator Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     PI_SINGLE90_MSB_SINGLE90_MSB 
 *     PI_SINGLE0_LSB_SINGLE0_LSB 
 *     PI_SEQUENCE90_MSB_SEQUENCE90_MSB 
 *     PI_SINGLE90_LSB_SINGLE90_LSB 
 *     PI_SEQUENCE0_LSB_SEQUENCE0_LSB 
 *     PI_SEQUENCE90_LSB_SEQUENCE90_LSB 
 *     PI_SEQUENCE0_MSB_SEQUENCE0_MSB 
 *     PI_SINGLE0_MSB_SINGLE0_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r (0x0002d014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_PI_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b2_pi_status1[1];
	uint32_t _dsc3b2_pi_status1;
} BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_CLR(r) (r).dsc3b2_pi_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_SET(r,d) (r).dsc3b2_pi_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_GET(r) (r).dsc3b2_pi_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET(r) (((r).dsc3b2_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET(r,f) (r).dsc3b2_pi_status1[0]=(((r).dsc3b2_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B2_PI_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_PI_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r,(_r._dsc3b2_pi_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_PI_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r,(_r._dsc3b2_pi_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_PI_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r
#define DSC3B2_PI_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_t DSC3B2_PI_STATUS1r_t;
#define DSC3B2_PI_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_CLR
#define DSC3B2_PI_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_SET
#define DSC3B2_PI_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_GET
#define DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET
#define DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET
#define DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET
#define READ_DSC3B2_PI_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B2_PI_STATUS1r
#define WRITE_DSC3B2_PI_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_PI_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_PI_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_DFE_VGA_STATUS0
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d5
 * DESC:     DFE VGA Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_TAP_BIN      
 *     VGA_SUM          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r (0x0002d015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_DFE_VGA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b2_dfe_vga_status0[1];
	uint32_t _dsc3b2_dfe_vga_status0;
} BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_CLR(r) (r).dsc3b2_dfe_vga_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_SET(r,d) (r).dsc3b2_dfe_vga_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_GET(r) (r).dsc3b2_dfe_vga_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_dfe_vga_status0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_dfe_vga_status0[0]=(((r).dsc3b2_dfe_vga_status0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_GET(r) ((((r).dsc3b2_dfe_vga_status0[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_SET(r,f) (r).dsc3b2_dfe_vga_status0[0]=(((r).dsc3b2_dfe_vga_status0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET(r) (((r).dsc3b2_dfe_vga_status0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET(r,f) (r).dsc3b2_dfe_vga_status0[0]=(((r).dsc3b2_dfe_vga_status0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B2_DFE_VGA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r,(_r._dsc3b2_dfe_vga_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r,(_r._dsc3b2_dfe_vga_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r
#define DSC3B2_DFE_VGA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_t DSC3B2_DFE_VGA_STATUS0r_t;
#define DSC3B2_DFE_VGA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_CLR
#define DSC3B2_DFE_VGA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_SET
#define DSC3B2_DFE_VGA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_GET
#define DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_GET
#define DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_VGA_SUMf_SET
#define DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET
#define DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET
#define READ_DSC3B2_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B2_DFE_VGA_STATUS0r
#define WRITE_DSC3B2_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_DFE_VGA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_DFE_VGA_STATUS1
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d6
 * DESC:     DFE VGA Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r (0x0002d016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_DFE_VGA_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b2_dfe_vga_status1[1];
	uint32_t _dsc3b2_dfe_vga_status1;
} BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_CLR(r) (r).dsc3b2_dfe_vga_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_SET(r,d) (r).dsc3b2_dfe_vga_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_GET(r) (r).dsc3b2_dfe_vga_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_dfe_vga_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_dfe_vga_status1[0]=(((r).dsc3b2_dfe_vga_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_GET(r) (((r).dsc3b2_dfe_vga_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_SET(r,f) (r).dsc3b2_dfe_vga_status1[0]=(((r).dsc3b2_dfe_vga_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B2_DFE_VGA_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r,(_r._dsc3b2_dfe_vga_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r,(_r._dsc3b2_dfe_vga_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r
#define DSC3B2_DFE_VGA_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_t DSC3B2_DFE_VGA_STATUS1r_t;
#define DSC3B2_DFE_VGA_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_CLR
#define DSC3B2_DFE_VGA_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_SET
#define DSC3B2_DFE_VGA_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_GET
#define DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_GET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_GET
#define DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_SET BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r_TRNSUMf_SET
#define READ_DSC3B2_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B2_DFE_VGA_STATUS1r
#define WRITE_DSC3B2_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_DFE_VGA_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_DFE_VGA_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS0
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d7
 * DESC:     State Machine Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE        
 *     TUNING_STATE     
 *     SRCH_STATE       
 *     TUNING_DONE      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r (0x0002d017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status0[1];
	uint32_t _dsc3b2_sm_status0;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_CLR(r) (r).dsc3b2_sm_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SET(r,d) (r).dsc3b2_sm_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_GET(r) (r).dsc3b2_sm_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status0[0]=(((r).dsc3b2_sm_status0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_DONEf_GET(r) ((((r).dsc3b2_sm_status0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_DONEf_SET(r,f) (r).dsc3b2_sm_status0[0]=(((r).dsc3b2_sm_status0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SRCH_STATEf_GET(r) ((((r).dsc3b2_sm_status0[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SRCH_STATEf_SET(r,f) (r).dsc3b2_sm_status0[0]=(((r).dsc3b2_sm_status0[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_STATEf_GET(r) ((((r).dsc3b2_sm_status0[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_STATEf_SET(r,f) (r).dsc3b2_sm_status0[0]=(((r).dsc3b2_sm_status0[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_DSC_STATEf_GET(r) (((r).dsc3b2_sm_status0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_DSC_STATEf_SET(r,f) (r).dsc3b2_sm_status0[0]=(((r).dsc3b2_sm_status0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC3B2_SM_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r,(_r._dsc3b2_sm_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r,(_r._dsc3b2_sm_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r
#define DSC3B2_SM_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_t DSC3B2_SM_STATUS0r_t;
#define DSC3B2_SM_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_CLR
#define DSC3B2_SM_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SET
#define DSC3B2_SM_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_GET
#define DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS0r_TUNING_DONEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_DONEf_GET
#define DSC3B2_SM_STATUS0r_TUNING_DONEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_DONEf_SET
#define DSC3B2_SM_STATUS0r_SRCH_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SRCH_STATEf_GET
#define DSC3B2_SM_STATUS0r_SRCH_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_SRCH_STATEf_SET
#define DSC3B2_SM_STATUS0r_TUNING_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_STATEf_GET
#define DSC3B2_SM_STATUS0r_TUNING_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_TUNING_STATEf_SET
#define DSC3B2_SM_STATUS0r_DSC_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_DSC_STATEf_GET
#define DSC3B2_SM_STATUS0r_DSC_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r_DSC_STATEf_SET
#define READ_DSC3B2_SM_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS0r
#define WRITE_DSC3B2_SM_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS1
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d8
 * DESC:     State Machine Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     POSTC_METRIC     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r (0x0002d018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status1[1];
	uint32_t _dsc3b2_sm_status1;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_CLR(r) (r).dsc3b2_sm_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_SET(r,d) (r).dsc3b2_sm_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_GET(r) (r).dsc3b2_sm_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status1[0]=(((r).dsc3b2_sm_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_POSTC_METRICf_GET(r) (((r).dsc3b2_sm_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_POSTC_METRICf_SET(r,f) (r).dsc3b2_sm_status1[0]=(((r).dsc3b2_sm_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B2_SM_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r,(_r._dsc3b2_sm_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r,(_r._dsc3b2_sm_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r
#define DSC3B2_SM_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_t DSC3B2_SM_STATUS1r_t;
#define DSC3B2_SM_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_CLR
#define DSC3B2_SM_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_SET
#define DSC3B2_SM_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_GET
#define DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS1r_POSTC_METRICf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_POSTC_METRICf_GET
#define DSC3B2_SM_STATUS1r_POSTC_METRICf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r_POSTC_METRICf_SET
#define READ_DSC3B2_SM_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS1r
#define WRITE_DSC3B2_SM_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS2
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82d9
 * DESC:     State Machine Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_MO 
 *     SLICER_OFFSET_ZO 
 *     SLICER_OFFSET_PO 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r (0x0002d019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status2[1];
	uint32_t _dsc3b2_sm_status2;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_CLR(r) (r).dsc3b2_sm_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SET(r,d) (r).dsc3b2_sm_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_GET(r) (r).dsc3b2_sm_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status2[0]=(((r).dsc3b2_sm_status2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_GET(r) ((((r).dsc3b2_sm_status2[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_SET(r,f) (r).dsc3b2_sm_status2[0]=(((r).dsc3b2_sm_status2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_GET(r) ((((r).dsc3b2_sm_status2[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_SET(r,f) (r).dsc3b2_sm_status2[0]=(((r).dsc3b2_sm_status2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_GET(r) (((r).dsc3b2_sm_status2[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_SET(r,f) (r).dsc3b2_sm_status2[0]=(((r).dsc3b2_sm_status2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B2_SM_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r,(_r._dsc3b2_sm_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r,(_r._dsc3b2_sm_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r
#define DSC3B2_SM_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_t DSC3B2_SM_STATUS2r_t;
#define DSC3B2_SM_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_CLR
#define DSC3B2_SM_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SET
#define DSC3B2_SM_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_GET
#define DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_GET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_POf_SET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_GET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_ZOf_SET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_GET
#define DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r_SLICER_OFFSET_MOf_SET
#define READ_DSC3B2_SM_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS2r
#define WRITE_DSC3B2_SM_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS3
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82da
 * DESC:     State Machine Status 3 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_ME 
 *     SLICER_OFFSET_ZE 
 *     SLICER_OFFSET_PE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r (0x0002d01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status3[1];
	uint32_t _dsc3b2_sm_status3;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_CLR(r) (r).dsc3b2_sm_status3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SET(r,d) (r).dsc3b2_sm_status3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_GET(r) (r).dsc3b2_sm_status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status3[0]=(((r).dsc3b2_sm_status3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_GET(r) ((((r).dsc3b2_sm_status3[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_SET(r,f) (r).dsc3b2_sm_status3[0]=(((r).dsc3b2_sm_status3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_GET(r) ((((r).dsc3b2_sm_status3[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_SET(r,f) (r).dsc3b2_sm_status3[0]=(((r).dsc3b2_sm_status3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_GET(r) (((r).dsc3b2_sm_status3[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_SET(r,f) (r).dsc3b2_sm_status3[0]=(((r).dsc3b2_sm_status3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B2_SM_STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r,(_r._dsc3b2_sm_status3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r,(_r._dsc3b2_sm_status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS3r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r
#define DSC3B2_SM_STATUS3r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_t DSC3B2_SM_STATUS3r_t;
#define DSC3B2_SM_STATUS3r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_CLR
#define DSC3B2_SM_STATUS3r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SET
#define DSC3B2_SM_STATUS3r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_GET
#define DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_GET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_PEf_SET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_GET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_ZEf_SET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_GET
#define DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r_SLICER_OFFSET_MEf_SET
#define READ_DSC3B2_SM_STATUS3r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS3r
#define WRITE_DSC3B2_SM_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS4
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82db
 * DESC:     State Machine Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL          
 *     PF_MIN           
 *     PF_MAX           
 *     VGA_MIN          
 *     VGA_MAX          
 *     DFE_MIN          
 *     DFE_MAX          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r (0x0002d01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status4[1];
	uint32_t _dsc3b2_sm_status4;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_CLR(r) (r).dsc3b2_sm_status4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_SET(r,d) (r).dsc3b2_sm_status4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_GET(r) (r).dsc3b2_sm_status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MAXf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MAXf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MINf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MINf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MAXf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MAXf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MINf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MINf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MAXf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MAXf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MINf_GET(r) ((((r).dsc3b2_sm_status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MINf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_CTRLf_GET(r) (((r).dsc3b2_sm_status4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_CTRLf_SET(r,f) (r).dsc3b2_sm_status4[0]=(((r).dsc3b2_sm_status4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC3B2_SM_STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r,(_r._dsc3b2_sm_status4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r,(_r._dsc3b2_sm_status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS4r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r
#define DSC3B2_SM_STATUS4r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_t DSC3B2_SM_STATUS4r_t;
#define DSC3B2_SM_STATUS4r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_CLR
#define DSC3B2_SM_STATUS4r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_SET
#define DSC3B2_SM_STATUS4r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_GET
#define DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS4r_DFE_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MAXf_GET
#define DSC3B2_SM_STATUS4r_DFE_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MAXf_SET
#define DSC3B2_SM_STATUS4r_DFE_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MINf_GET
#define DSC3B2_SM_STATUS4r_DFE_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_DFE_MINf_SET
#define DSC3B2_SM_STATUS4r_VGA_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MAXf_GET
#define DSC3B2_SM_STATUS4r_VGA_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MAXf_SET
#define DSC3B2_SM_STATUS4r_VGA_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MINf_GET
#define DSC3B2_SM_STATUS4r_VGA_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_VGA_MINf_SET
#define DSC3B2_SM_STATUS4r_PF_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MAXf_GET
#define DSC3B2_SM_STATUS4r_PF_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MAXf_SET
#define DSC3B2_SM_STATUS4r_PF_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MINf_GET
#define DSC3B2_SM_STATUS4r_PF_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_MINf_SET
#define DSC3B2_SM_STATUS4r_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_CTRLf_GET
#define DSC3B2_SM_STATUS4r_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r_PF_CTRLf_SET
#define READ_DSC3B2_SM_STATUS4r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS4r
#define WRITE_DSC3B2_SM_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_ANA_STATUS0
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82dc
 * DESC:     DSC Analog Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET_PD        
 *     EN_HGAIN         
 *     EN_DFE_CLK       
 *     PD_CH_P1         
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r (0x0002d01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_ANA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b2_ana_status0[1];
	uint32_t _dsc3b2_ana_status0;
} BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_CLR(r) (r).dsc3b2_ana_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_SET(r,d) (r).dsc3b2_ana_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_GET(r) (r).dsc3b2_ana_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_ana_status0[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_ana_status0[0]=(((r).dsc3b2_ana_status0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_PD_CH_P1f_GET(r) ((((r).dsc3b2_ana_status0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_PD_CH_P1f_SET(r,f) (r).dsc3b2_ana_status0[0]=(((r).dsc3b2_ana_status0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_GET(r) ((((r).dsc3b2_ana_status0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_SET(r,f) (r).dsc3b2_ana_status0[0]=(((r).dsc3b2_ana_status0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_HGAINf_GET(r) ((((r).dsc3b2_ana_status0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_HGAINf_SET(r,f) (r).dsc3b2_ana_status0[0]=(((r).dsc3b2_ana_status0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_OFFSET_PDf_GET(r) (((r).dsc3b2_ana_status0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_OFFSET_PDf_SET(r,f) (r).dsc3b2_ana_status0[0]=(((r).dsc3b2_ana_status0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC3B2_ANA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r,(_r._dsc3b2_ana_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r,(_r._dsc3b2_ana_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_ANA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r
#define DSC3B2_ANA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_t DSC3B2_ANA_STATUS0r_t;
#define DSC3B2_ANA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_CLR
#define DSC3B2_ANA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_SET
#define DSC3B2_ANA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_GET
#define DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_ANA_STATUS0r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_PD_CH_P1f_GET
#define DSC3B2_ANA_STATUS0r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_PD_CH_P1f_SET
#define DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_GET
#define DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_DFE_CLKf_SET
#define DSC3B2_ANA_STATUS0r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_HGAINf_GET
#define DSC3B2_ANA_STATUS0r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_EN_HGAINf_SET
#define DSC3B2_ANA_STATUS0r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_OFFSET_PDf_GET
#define DSC3B2_ANA_STATUS0r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r_OFFSET_PDf_SET
#define READ_DSC3B2_ANA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B2_ANA_STATUS0r
#define WRITE_DSC3B2_ANA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_ANA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_ANA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS5
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82dd
 * DESC:     State Machine Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_BR_VGA    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r (0x0002d01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status5[1];
	uint32_t _dsc3b2_sm_status5;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_CLR(r) (r).dsc3b2_sm_status5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_SET(r,d) (r).dsc3b2_sm_status5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_GET(r) (r).dsc3b2_sm_status5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status5[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status5[0]=(((r).dsc3b2_sm_status5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_GET(r) (((r).dsc3b2_sm_status5[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_SET(r,f) (r).dsc3b2_sm_status5[0]=(((r).dsc3b2_sm_status5[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B2_SM_STATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r,(_r._dsc3b2_sm_status5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r,(_r._dsc3b2_sm_status5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS5r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r
#define DSC3B2_SM_STATUS5r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_t DSC3B2_SM_STATUS5r_t;
#define DSC3B2_SM_STATUS5r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_CLR
#define DSC3B2_SM_STATUS5r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_SET
#define DSC3B2_SM_STATUS5r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_GET
#define DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_GET
#define DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r_TRNSUM_BR_VGAf_SET
#define READ_DSC3B2_SM_STATUS5r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS5r
#define WRITE_DSC3B2_SM_STATUS5r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B2_SM_STATUS6
 * BLOCKS:   DSC3B2
 * REGADDR:  0x82de
 * DESC:     State Machine Status 6 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_PF        
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r (0x0002d01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B2_SM_STATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_s {
	uint32_t v[1];
	uint32_t dsc3b2_sm_status6[1];
	uint32_t _dsc3b2_sm_status6;
} BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_CLR(r) (r).dsc3b2_sm_status6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_SET(r,d) (r).dsc3b2_sm_status6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_GET(r) (r).dsc3b2_sm_status6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b2_sm_status6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b2_sm_status6[0]=(((r).dsc3b2_sm_status6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_TRNSUM_PFf_GET(r) (((r).dsc3b2_sm_status6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_TRNSUM_PFf_SET(r,f) (r).dsc3b2_sm_status6[0]=(((r).dsc3b2_sm_status6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B2_SM_STATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r,(_r._dsc3b2_sm_status6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r,(_r._dsc3b2_sm_status6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B2_SM_STATUS6r BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r
#define DSC3B2_SM_STATUS6r_SIZE BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_t DSC3B2_SM_STATUS6r_t;
#define DSC3B2_SM_STATUS6r_CLR BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_CLR
#define DSC3B2_SM_STATUS6r_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_SET
#define DSC3B2_SM_STATUS6r_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_GET
#define DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_GET
#define DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_RESERVED_FOR_ECO0f_SET
#define DSC3B2_SM_STATUS6r_TRNSUM_PFf_GET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_TRNSUM_PFf_GET
#define DSC3B2_SM_STATUS6r_TRNSUM_PFf_SET BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r_TRNSUM_PFf_SET
#define READ_DSC3B2_SM_STATUS6r BCMI_HYPERLITE_XGXS_READ_DSC3B2_SM_STATUS6r
#define WRITE_DSC3B2_SM_STATUS6r BCMI_HYPERLITE_XGXS_WRITE_DSC3B2_SM_STATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B2_SM_STATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_CDR_STATUS0
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e0
 * DESC:     CDR Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r (0x0002e010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_CDR_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b3_cdr_status0[1];
	uint32_t _dsc3b3_cdr_status0;
} BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_CLR(r) (r).dsc3b3_cdr_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_SET(r,d) (r).dsc3b3_cdr_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_GET(r) (r).dsc3b3_cdr_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_INTEG_REGf_GET(r) (((r).dsc3b3_cdr_status0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_INTEG_REGf_SET(r,f) (r).dsc3b3_cdr_status0[0]=(((r).dsc3b3_cdr_status0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B3_CDR_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r,(_r._dsc3b3_cdr_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r,(_r._dsc3b3_cdr_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_CDR_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r
#define DSC3B3_CDR_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_t DSC3B3_CDR_STATUS0r_t;
#define DSC3B3_CDR_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_CLR
#define DSC3B3_CDR_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_SET
#define DSC3B3_CDR_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_GET
#define DSC3B3_CDR_STATUS0r_INTEG_REGf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_INTEG_REGf_GET
#define DSC3B3_CDR_STATUS0r_INTEG_REGf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r_INTEG_REGf_SET
#define READ_DSC3B3_CDR_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS0r
#define WRITE_DSC3B3_CDR_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_CDR_STATUS1
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e1
 * DESC:     CDR Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG_XFER   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r (0x0002e011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_CDR_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b3_cdr_status1[1];
	uint32_t _dsc3b3_cdr_status1;
} BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_CLR(r) (r).dsc3b3_cdr_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_SET(r,d) (r).dsc3b3_cdr_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_GET(r) (r).dsc3b3_cdr_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_GET(r) (((r).dsc3b3_cdr_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_SET(r,f) (r).dsc3b3_cdr_status1[0]=(((r).dsc3b3_cdr_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B3_CDR_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r,(_r._dsc3b3_cdr_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r,(_r._dsc3b3_cdr_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_CDR_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r
#define DSC3B3_CDR_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_t DSC3B3_CDR_STATUS1r_t;
#define DSC3B3_CDR_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_CLR
#define DSC3B3_CDR_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_SET
#define DSC3B3_CDR_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_GET
#define DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_GET
#define DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r_INTEG_REG_XFERf_SET
#define READ_DSC3B3_CDR_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS1r
#define WRITE_DSC3B3_CDR_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_CDR_STATUS2
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e2
 * DESC:     CDR Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_ERR        
 *     OSCDR_MODE       
 *     BR_CDR_ENABLED   
 *     SM_BR_CDR_ENABLED 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r (0x0002e012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_CDR_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b3_cdr_status2[1];
	uint32_t _dsc3b3_cdr_status2;
} BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_CLR(r) (r).dsc3b3_cdr_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SET(r,d) (r).dsc3b3_cdr_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_GET(r) (r).dsc3b3_cdr_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_cdr_status2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_cdr_status2[0]=(((r).dsc3b3_cdr_status2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b3_cdr_status2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b3_cdr_status2[0]=(((r).dsc3b3_cdr_status2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3b3_cdr_status2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3b3_cdr_status2[0]=(((r).dsc3b3_cdr_status2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_OSCDR_MODEf_GET(r) ((((r).dsc3b3_cdr_status2[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_OSCDR_MODEf_SET(r,f) (r).dsc3b3_cdr_status2[0]=(((r).dsc3b3_cdr_status2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_PHASE_ERRf_GET(r) (((r).dsc3b3_cdr_status2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_PHASE_ERRf_SET(r,f) (r).dsc3b3_cdr_status2[0]=(((r).dsc3b3_cdr_status2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B3_CDR_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r,(_r._dsc3b3_cdr_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r,(_r._dsc3b3_cdr_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_CDR_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r
#define DSC3B3_CDR_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_t DSC3B3_CDR_STATUS2r_t;
#define DSC3B3_CDR_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_CLR
#define DSC3B3_CDR_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SET
#define DSC3B3_CDR_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_GET
#define DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET
#define DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET
#define DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_GET
#define DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_BR_CDR_ENABLEDf_SET
#define DSC3B3_CDR_STATUS2r_OSCDR_MODEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_OSCDR_MODEf_GET
#define DSC3B3_CDR_STATUS2r_OSCDR_MODEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_OSCDR_MODEf_SET
#define DSC3B3_CDR_STATUS2r_PHASE_ERRf_GET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_PHASE_ERRf_GET
#define DSC3B3_CDR_STATUS2r_PHASE_ERRf_SET BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r_PHASE_ERRf_SET
#define READ_DSC3B3_CDR_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B3_CDR_STATUS2r
#define WRITE_DSC3B3_CDR_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_CDR_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_CDR_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_PI_STATUS0
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e3
 * DESC:     Phase Interpolator Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_CNTR       
 *     CLK90_PHASE_OFFSET 
 *     INVALID_INTRP_CTRL90 
 *     INVALID_INTRP_CTRL0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r (0x0002e013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_PI_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b3_pi_status0[1];
	uint32_t _dsc3b3_pi_status0;
} BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLR(r) (r).dsc3b3_pi_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_SET(r,d) (r).dsc3b3_pi_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_GET(r) (r).dsc3b3_pi_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET(r) ((((r).dsc3b3_pi_status0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET(r,f) (r).dsc3b3_pi_status0[0]=(((r).dsc3b3_pi_status0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET(r) ((((r).dsc3b3_pi_status0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET(r,f) (r).dsc3b3_pi_status0[0]=(((r).dsc3b3_pi_status0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET(r) ((((r).dsc3b3_pi_status0[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET(r,f) (r).dsc3b3_pi_status0[0]=(((r).dsc3b3_pi_status0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_PHASE_CNTRf_GET(r) (((r).dsc3b3_pi_status0[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_PHASE_CNTRf_SET(r,f) (r).dsc3b3_pi_status0[0]=(((r).dsc3b3_pi_status0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC3B3_PI_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_PI_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r,(_r._dsc3b3_pi_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_PI_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r,(_r._dsc3b3_pi_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_PI_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r
#define DSC3B3_PI_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_t DSC3B3_PI_STATUS0r_t;
#define DSC3B3_PI_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLR
#define DSC3B3_PI_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_SET
#define DSC3B3_PI_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_GET
#define DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET
#define DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET
#define DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET
#define DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET
#define DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET
#define DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET
#define DSC3B3_PI_STATUS0r_PHASE_CNTRf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_PHASE_CNTRf_GET
#define DSC3B3_PI_STATUS0r_PHASE_CNTRf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r_PHASE_CNTRf_SET
#define READ_DSC3B3_PI_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B3_PI_STATUS0r
#define WRITE_DSC3B3_PI_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_PI_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_PI_STATUS1
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e4
 * DESC:     Phase Interpolator Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     PI_SINGLE90_MSB_SINGLE90_MSB 
 *     PI_SINGLE0_LSB_SINGLE0_LSB 
 *     PI_SEQUENCE90_MSB_SEQUENCE90_MSB 
 *     PI_SINGLE90_LSB_SINGLE90_LSB 
 *     PI_SEQUENCE0_LSB_SEQUENCE0_LSB 
 *     PI_SEQUENCE90_LSB_SEQUENCE90_LSB 
 *     PI_SEQUENCE0_MSB_SEQUENCE0_MSB 
 *     PI_SINGLE0_MSB_SINGLE0_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r (0x0002e014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_PI_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b3_pi_status1[1];
	uint32_t _dsc3b3_pi_status1;
} BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_CLR(r) (r).dsc3b3_pi_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_SET(r,d) (r).dsc3b3_pi_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_GET(r) (r).dsc3b3_pi_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET(r) (((r).dsc3b3_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET(r,f) (r).dsc3b3_pi_status1[0]=(((r).dsc3b3_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3B3_PI_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_PI_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r,(_r._dsc3b3_pi_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_PI_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r,(_r._dsc3b3_pi_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_PI_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r
#define DSC3B3_PI_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_t DSC3B3_PI_STATUS1r_t;
#define DSC3B3_PI_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_CLR
#define DSC3B3_PI_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_SET
#define DSC3B3_PI_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_GET
#define DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET
#define DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET
#define DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET
#define READ_DSC3B3_PI_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B3_PI_STATUS1r
#define WRITE_DSC3B3_PI_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_PI_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_PI_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_DFE_VGA_STATUS0
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e5
 * DESC:     DFE VGA Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_TAP_BIN      
 *     VGA_SUM          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r (0x0002e015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_DFE_VGA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b3_dfe_vga_status0[1];
	uint32_t _dsc3b3_dfe_vga_status0;
} BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_CLR(r) (r).dsc3b3_dfe_vga_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_SET(r,d) (r).dsc3b3_dfe_vga_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_GET(r) (r).dsc3b3_dfe_vga_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_dfe_vga_status0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_dfe_vga_status0[0]=(((r).dsc3b3_dfe_vga_status0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_GET(r) ((((r).dsc3b3_dfe_vga_status0[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_SET(r,f) (r).dsc3b3_dfe_vga_status0[0]=(((r).dsc3b3_dfe_vga_status0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET(r) (((r).dsc3b3_dfe_vga_status0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET(r,f) (r).dsc3b3_dfe_vga_status0[0]=(((r).dsc3b3_dfe_vga_status0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3B3_DFE_VGA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r,(_r._dsc3b3_dfe_vga_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r,(_r._dsc3b3_dfe_vga_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r
#define DSC3B3_DFE_VGA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_t DSC3B3_DFE_VGA_STATUS0r_t;
#define DSC3B3_DFE_VGA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_CLR
#define DSC3B3_DFE_VGA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_SET
#define DSC3B3_DFE_VGA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_GET
#define DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_GET
#define DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_VGA_SUMf_SET
#define DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET
#define DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET
#define READ_DSC3B3_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B3_DFE_VGA_STATUS0r
#define WRITE_DSC3B3_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_DFE_VGA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_DFE_VGA_STATUS1
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e6
 * DESC:     DFE VGA Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r (0x0002e016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_DFE_VGA_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b3_dfe_vga_status1[1];
	uint32_t _dsc3b3_dfe_vga_status1;
} BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_CLR(r) (r).dsc3b3_dfe_vga_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_SET(r,d) (r).dsc3b3_dfe_vga_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_GET(r) (r).dsc3b3_dfe_vga_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_dfe_vga_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_dfe_vga_status1[0]=(((r).dsc3b3_dfe_vga_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_GET(r) (((r).dsc3b3_dfe_vga_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_SET(r,f) (r).dsc3b3_dfe_vga_status1[0]=(((r).dsc3b3_dfe_vga_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B3_DFE_VGA_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r,(_r._dsc3b3_dfe_vga_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r,(_r._dsc3b3_dfe_vga_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r
#define DSC3B3_DFE_VGA_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_t DSC3B3_DFE_VGA_STATUS1r_t;
#define DSC3B3_DFE_VGA_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_CLR
#define DSC3B3_DFE_VGA_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_SET
#define DSC3B3_DFE_VGA_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_GET
#define DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_GET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_GET
#define DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_SET BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r_TRNSUMf_SET
#define READ_DSC3B3_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B3_DFE_VGA_STATUS1r
#define WRITE_DSC3B3_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_DFE_VGA_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_DFE_VGA_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS0
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e7
 * DESC:     State Machine Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE        
 *     TUNING_STATE     
 *     SRCH_STATE       
 *     TUNING_DONE      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r (0x0002e017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status0[1];
	uint32_t _dsc3b3_sm_status0;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_CLR(r) (r).dsc3b3_sm_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SET(r,d) (r).dsc3b3_sm_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_GET(r) (r).dsc3b3_sm_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status0[0]=(((r).dsc3b3_sm_status0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_DONEf_GET(r) ((((r).dsc3b3_sm_status0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_DONEf_SET(r,f) (r).dsc3b3_sm_status0[0]=(((r).dsc3b3_sm_status0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SRCH_STATEf_GET(r) ((((r).dsc3b3_sm_status0[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SRCH_STATEf_SET(r,f) (r).dsc3b3_sm_status0[0]=(((r).dsc3b3_sm_status0[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_STATEf_GET(r) ((((r).dsc3b3_sm_status0[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_STATEf_SET(r,f) (r).dsc3b3_sm_status0[0]=(((r).dsc3b3_sm_status0[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_DSC_STATEf_GET(r) (((r).dsc3b3_sm_status0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_DSC_STATEf_SET(r,f) (r).dsc3b3_sm_status0[0]=(((r).dsc3b3_sm_status0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC3B3_SM_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r,(_r._dsc3b3_sm_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r,(_r._dsc3b3_sm_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r
#define DSC3B3_SM_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_t DSC3B3_SM_STATUS0r_t;
#define DSC3B3_SM_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_CLR
#define DSC3B3_SM_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SET
#define DSC3B3_SM_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_GET
#define DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS0r_TUNING_DONEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_DONEf_GET
#define DSC3B3_SM_STATUS0r_TUNING_DONEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_DONEf_SET
#define DSC3B3_SM_STATUS0r_SRCH_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SRCH_STATEf_GET
#define DSC3B3_SM_STATUS0r_SRCH_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_SRCH_STATEf_SET
#define DSC3B3_SM_STATUS0r_TUNING_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_STATEf_GET
#define DSC3B3_SM_STATUS0r_TUNING_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_TUNING_STATEf_SET
#define DSC3B3_SM_STATUS0r_DSC_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_DSC_STATEf_GET
#define DSC3B3_SM_STATUS0r_DSC_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r_DSC_STATEf_SET
#define READ_DSC3B3_SM_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS0r
#define WRITE_DSC3B3_SM_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS1
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e8
 * DESC:     State Machine Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     POSTC_METRIC     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r (0x0002e018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status1[1];
	uint32_t _dsc3b3_sm_status1;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_CLR(r) (r).dsc3b3_sm_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_SET(r,d) (r).dsc3b3_sm_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_GET(r) (r).dsc3b3_sm_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status1[0]=(((r).dsc3b3_sm_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_POSTC_METRICf_GET(r) (((r).dsc3b3_sm_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_POSTC_METRICf_SET(r,f) (r).dsc3b3_sm_status1[0]=(((r).dsc3b3_sm_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B3_SM_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r,(_r._dsc3b3_sm_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r,(_r._dsc3b3_sm_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS1r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r
#define DSC3B3_SM_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_t DSC3B3_SM_STATUS1r_t;
#define DSC3B3_SM_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_CLR
#define DSC3B3_SM_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_SET
#define DSC3B3_SM_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_GET
#define DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS1r_POSTC_METRICf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_POSTC_METRICf_GET
#define DSC3B3_SM_STATUS1r_POSTC_METRICf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r_POSTC_METRICf_SET
#define READ_DSC3B3_SM_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS1r
#define WRITE_DSC3B3_SM_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS2
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82e9
 * DESC:     State Machine Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_MO 
 *     SLICER_OFFSET_ZO 
 *     SLICER_OFFSET_PO 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r (0x0002e019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status2[1];
	uint32_t _dsc3b3_sm_status2;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_CLR(r) (r).dsc3b3_sm_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SET(r,d) (r).dsc3b3_sm_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_GET(r) (r).dsc3b3_sm_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status2[0]=(((r).dsc3b3_sm_status2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_GET(r) ((((r).dsc3b3_sm_status2[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_SET(r,f) (r).dsc3b3_sm_status2[0]=(((r).dsc3b3_sm_status2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_GET(r) ((((r).dsc3b3_sm_status2[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_SET(r,f) (r).dsc3b3_sm_status2[0]=(((r).dsc3b3_sm_status2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_GET(r) (((r).dsc3b3_sm_status2[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_SET(r,f) (r).dsc3b3_sm_status2[0]=(((r).dsc3b3_sm_status2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B3_SM_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r,(_r._dsc3b3_sm_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r,(_r._dsc3b3_sm_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS2r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r
#define DSC3B3_SM_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_t DSC3B3_SM_STATUS2r_t;
#define DSC3B3_SM_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_CLR
#define DSC3B3_SM_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SET
#define DSC3B3_SM_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_GET
#define DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_GET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_POf_SET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_GET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_ZOf_SET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_GET
#define DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r_SLICER_OFFSET_MOf_SET
#define READ_DSC3B3_SM_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS2r
#define WRITE_DSC3B3_SM_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS3
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82ea
 * DESC:     State Machine Status 3 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_ME 
 *     SLICER_OFFSET_ZE 
 *     SLICER_OFFSET_PE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r (0x0002e01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status3[1];
	uint32_t _dsc3b3_sm_status3;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_CLR(r) (r).dsc3b3_sm_status3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SET(r,d) (r).dsc3b3_sm_status3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_GET(r) (r).dsc3b3_sm_status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status3[0]=(((r).dsc3b3_sm_status3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_GET(r) ((((r).dsc3b3_sm_status3[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_SET(r,f) (r).dsc3b3_sm_status3[0]=(((r).dsc3b3_sm_status3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_GET(r) ((((r).dsc3b3_sm_status3[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_SET(r,f) (r).dsc3b3_sm_status3[0]=(((r).dsc3b3_sm_status3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_GET(r) (((r).dsc3b3_sm_status3[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_SET(r,f) (r).dsc3b3_sm_status3[0]=(((r).dsc3b3_sm_status3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3B3_SM_STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r,(_r._dsc3b3_sm_status3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r,(_r._dsc3b3_sm_status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS3r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r
#define DSC3B3_SM_STATUS3r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_t DSC3B3_SM_STATUS3r_t;
#define DSC3B3_SM_STATUS3r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_CLR
#define DSC3B3_SM_STATUS3r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SET
#define DSC3B3_SM_STATUS3r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_GET
#define DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_GET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_PEf_SET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_GET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_ZEf_SET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_GET
#define DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r_SLICER_OFFSET_MEf_SET
#define READ_DSC3B3_SM_STATUS3r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS3r
#define WRITE_DSC3B3_SM_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS4
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82eb
 * DESC:     State Machine Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL          
 *     PF_MIN           
 *     PF_MAX           
 *     VGA_MIN          
 *     VGA_MAX          
 *     DFE_MIN          
 *     DFE_MAX          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r (0x0002e01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status4[1];
	uint32_t _dsc3b3_sm_status4;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_CLR(r) (r).dsc3b3_sm_status4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_SET(r,d) (r).dsc3b3_sm_status4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_GET(r) (r).dsc3b3_sm_status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MAXf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MAXf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MINf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MINf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MAXf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MAXf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MINf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MINf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MAXf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MAXf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MINf_GET(r) ((((r).dsc3b3_sm_status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MINf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_CTRLf_GET(r) (((r).dsc3b3_sm_status4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_CTRLf_SET(r,f) (r).dsc3b3_sm_status4[0]=(((r).dsc3b3_sm_status4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC3B3_SM_STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r,(_r._dsc3b3_sm_status4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r,(_r._dsc3b3_sm_status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS4r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r
#define DSC3B3_SM_STATUS4r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_t DSC3B3_SM_STATUS4r_t;
#define DSC3B3_SM_STATUS4r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_CLR
#define DSC3B3_SM_STATUS4r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_SET
#define DSC3B3_SM_STATUS4r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_GET
#define DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS4r_DFE_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MAXf_GET
#define DSC3B3_SM_STATUS4r_DFE_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MAXf_SET
#define DSC3B3_SM_STATUS4r_DFE_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MINf_GET
#define DSC3B3_SM_STATUS4r_DFE_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_DFE_MINf_SET
#define DSC3B3_SM_STATUS4r_VGA_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MAXf_GET
#define DSC3B3_SM_STATUS4r_VGA_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MAXf_SET
#define DSC3B3_SM_STATUS4r_VGA_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MINf_GET
#define DSC3B3_SM_STATUS4r_VGA_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_VGA_MINf_SET
#define DSC3B3_SM_STATUS4r_PF_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MAXf_GET
#define DSC3B3_SM_STATUS4r_PF_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MAXf_SET
#define DSC3B3_SM_STATUS4r_PF_MINf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MINf_GET
#define DSC3B3_SM_STATUS4r_PF_MINf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_MINf_SET
#define DSC3B3_SM_STATUS4r_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_CTRLf_GET
#define DSC3B3_SM_STATUS4r_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r_PF_CTRLf_SET
#define READ_DSC3B3_SM_STATUS4r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS4r
#define WRITE_DSC3B3_SM_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_ANA_STATUS0
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82ec
 * DESC:     DSC Analog Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET_PD        
 *     EN_HGAIN         
 *     EN_DFE_CLK       
 *     PD_CH_P1         
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r (0x0002e01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_ANA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3b3_ana_status0[1];
	uint32_t _dsc3b3_ana_status0;
} BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_CLR(r) (r).dsc3b3_ana_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_SET(r,d) (r).dsc3b3_ana_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_GET(r) (r).dsc3b3_ana_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_ana_status0[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_ana_status0[0]=(((r).dsc3b3_ana_status0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_PD_CH_P1f_GET(r) ((((r).dsc3b3_ana_status0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_PD_CH_P1f_SET(r,f) (r).dsc3b3_ana_status0[0]=(((r).dsc3b3_ana_status0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_GET(r) ((((r).dsc3b3_ana_status0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_SET(r,f) (r).dsc3b3_ana_status0[0]=(((r).dsc3b3_ana_status0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_HGAINf_GET(r) ((((r).dsc3b3_ana_status0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_HGAINf_SET(r,f) (r).dsc3b3_ana_status0[0]=(((r).dsc3b3_ana_status0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_OFFSET_PDf_GET(r) (((r).dsc3b3_ana_status0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_OFFSET_PDf_SET(r,f) (r).dsc3b3_ana_status0[0]=(((r).dsc3b3_ana_status0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC3B3_ANA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r,(_r._dsc3b3_ana_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r,(_r._dsc3b3_ana_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_ANA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r
#define DSC3B3_ANA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_t DSC3B3_ANA_STATUS0r_t;
#define DSC3B3_ANA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_CLR
#define DSC3B3_ANA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_SET
#define DSC3B3_ANA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_GET
#define DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_ANA_STATUS0r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_PD_CH_P1f_GET
#define DSC3B3_ANA_STATUS0r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_PD_CH_P1f_SET
#define DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_GET
#define DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_DFE_CLKf_SET
#define DSC3B3_ANA_STATUS0r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_HGAINf_GET
#define DSC3B3_ANA_STATUS0r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_EN_HGAINf_SET
#define DSC3B3_ANA_STATUS0r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_OFFSET_PDf_GET
#define DSC3B3_ANA_STATUS0r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r_OFFSET_PDf_SET
#define READ_DSC3B3_ANA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3B3_ANA_STATUS0r
#define WRITE_DSC3B3_ANA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_ANA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_ANA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS5
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82ed
 * DESC:     State Machine Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_BR_VGA    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r (0x0002e01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status5[1];
	uint32_t _dsc3b3_sm_status5;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_CLR(r) (r).dsc3b3_sm_status5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_SET(r,d) (r).dsc3b3_sm_status5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_GET(r) (r).dsc3b3_sm_status5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status5[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status5[0]=(((r).dsc3b3_sm_status5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_GET(r) (((r).dsc3b3_sm_status5[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_SET(r,f) (r).dsc3b3_sm_status5[0]=(((r).dsc3b3_sm_status5[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B3_SM_STATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r,(_r._dsc3b3_sm_status5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r,(_r._dsc3b3_sm_status5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS5r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r
#define DSC3B3_SM_STATUS5r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_t DSC3B3_SM_STATUS5r_t;
#define DSC3B3_SM_STATUS5r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_CLR
#define DSC3B3_SM_STATUS5r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_SET
#define DSC3B3_SM_STATUS5r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_GET
#define DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_GET
#define DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r_TRNSUM_BR_VGAf_SET
#define READ_DSC3B3_SM_STATUS5r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS5r
#define WRITE_DSC3B3_SM_STATUS5r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3B3_SM_STATUS6
 * BLOCKS:   DSC3B3
 * REGADDR:  0x82ee
 * DESC:     State Machine Status 6 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_PF        
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r (0x0002e01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_SIZE 4

/*
 * This structure should be used to declare and program DSC3B3_SM_STATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_s {
	uint32_t v[1];
	uint32_t dsc3b3_sm_status6[1];
	uint32_t _dsc3b3_sm_status6;
} BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_t;

#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_CLR(r) (r).dsc3b3_sm_status6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_SET(r,d) (r).dsc3b3_sm_status6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_GET(r) (r).dsc3b3_sm_status6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3b3_sm_status6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3b3_sm_status6[0]=(((r).dsc3b3_sm_status6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_TRNSUM_PFf_GET(r) (((r).dsc3b3_sm_status6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_TRNSUM_PFf_SET(r,f) (r).dsc3b3_sm_status6[0]=(((r).dsc3b3_sm_status6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3B3_SM_STATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r,(_r._dsc3b3_sm_status6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r,(_r._dsc3b3_sm_status6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3B3_SM_STATUS6r BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r
#define DSC3B3_SM_STATUS6r_SIZE BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_t DSC3B3_SM_STATUS6r_t;
#define DSC3B3_SM_STATUS6r_CLR BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_CLR
#define DSC3B3_SM_STATUS6r_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_SET
#define DSC3B3_SM_STATUS6r_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_GET
#define DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_GET
#define DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_RESERVED_FOR_ECO0f_SET
#define DSC3B3_SM_STATUS6r_TRNSUM_PFf_GET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_TRNSUM_PFf_GET
#define DSC3B3_SM_STATUS6r_TRNSUM_PFf_SET BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r_TRNSUM_PFf_SET
#define READ_DSC3B3_SM_STATUS6r BCMI_HYPERLITE_XGXS_READ_DSC3B3_SM_STATUS6r
#define WRITE_DSC3B3_SM_STATUS6r BCMI_HYPERLITE_XGXS_WRITE_DSC3B3_SM_STATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3B3_SM_STATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_CDR_STATUS0
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f0
 * DESC:     CDR Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r (0x0002f010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_CDR_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3bb_cdr_status0[1];
	uint32_t _dsc3bb_cdr_status0;
} BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_CLR(r) (r).dsc3bb_cdr_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_SET(r,d) (r).dsc3bb_cdr_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_GET(r) (r).dsc3bb_cdr_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_INTEG_REGf_GET(r) (((r).dsc3bb_cdr_status0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_INTEG_REGf_SET(r,f) (r).dsc3bb_cdr_status0[0]=(((r).dsc3bb_cdr_status0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3BB_CDR_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r,(_r._dsc3bb_cdr_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r,(_r._dsc3bb_cdr_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_CDR_STATUS0r BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r
#define DSC3BB_CDR_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_t DSC3BB_CDR_STATUS0r_t;
#define DSC3BB_CDR_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_CLR
#define DSC3BB_CDR_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_SET
#define DSC3BB_CDR_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_GET
#define DSC3BB_CDR_STATUS0r_INTEG_REGf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_INTEG_REGf_GET
#define DSC3BB_CDR_STATUS0r_INTEG_REGf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r_INTEG_REGf_SET
#define READ_DSC3BB_CDR_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS0r
#define WRITE_DSC3BB_CDR_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_CDR_STATUS1
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f1
 * DESC:     CDR Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     INTEG_REG_XFER   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r (0x0002f011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_CDR_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3bb_cdr_status1[1];
	uint32_t _dsc3bb_cdr_status1;
} BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_CLR(r) (r).dsc3bb_cdr_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_SET(r,d) (r).dsc3bb_cdr_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_GET(r) (r).dsc3bb_cdr_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_GET(r) (((r).dsc3bb_cdr_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_SET(r,f) (r).dsc3bb_cdr_status1[0]=(((r).dsc3bb_cdr_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3BB_CDR_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r,(_r._dsc3bb_cdr_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r,(_r._dsc3bb_cdr_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_CDR_STATUS1r BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r
#define DSC3BB_CDR_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_t DSC3BB_CDR_STATUS1r_t;
#define DSC3BB_CDR_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_CLR
#define DSC3BB_CDR_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_SET
#define DSC3BB_CDR_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_GET
#define DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_GET
#define DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r_INTEG_REG_XFERf_SET
#define READ_DSC3BB_CDR_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS1r
#define WRITE_DSC3BB_CDR_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_CDR_STATUS2
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f2
 * DESC:     CDR Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_ERR        
 *     OSCDR_MODE       
 *     BR_CDR_ENABLED   
 *     SM_BR_CDR_ENABLED 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r (0x0002f012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_CDR_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3bb_cdr_status2[1];
	uint32_t _dsc3bb_cdr_status2;
} BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_CLR(r) (r).dsc3bb_cdr_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SET(r,d) (r).dsc3bb_cdr_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_GET(r) (r).dsc3bb_cdr_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_cdr_status2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_cdr_status2[0]=(((r).dsc3bb_cdr_status2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3bb_cdr_status2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3bb_cdr_status2[0]=(((r).dsc3bb_cdr_status2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_GET(r) ((((r).dsc3bb_cdr_status2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_SET(r,f) (r).dsc3bb_cdr_status2[0]=(((r).dsc3bb_cdr_status2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_OSCDR_MODEf_GET(r) ((((r).dsc3bb_cdr_status2[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_OSCDR_MODEf_SET(r,f) (r).dsc3bb_cdr_status2[0]=(((r).dsc3bb_cdr_status2[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_PHASE_ERRf_GET(r) (((r).dsc3bb_cdr_status2[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_PHASE_ERRf_SET(r,f) (r).dsc3bb_cdr_status2[0]=(((r).dsc3bb_cdr_status2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3BB_CDR_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r,(_r._dsc3bb_cdr_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r,(_r._dsc3bb_cdr_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_CDR_STATUS2r BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r
#define DSC3BB_CDR_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_t DSC3BB_CDR_STATUS2r_t;
#define DSC3BB_CDR_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_CLR
#define DSC3BB_CDR_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SET
#define DSC3BB_CDR_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_GET
#define DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_GET
#define DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_SM_BR_CDR_ENABLEDf_SET
#define DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_GET
#define DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_BR_CDR_ENABLEDf_SET
#define DSC3BB_CDR_STATUS2r_OSCDR_MODEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_OSCDR_MODEf_GET
#define DSC3BB_CDR_STATUS2r_OSCDR_MODEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_OSCDR_MODEf_SET
#define DSC3BB_CDR_STATUS2r_PHASE_ERRf_GET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_PHASE_ERRf_GET
#define DSC3BB_CDR_STATUS2r_PHASE_ERRf_SET BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r_PHASE_ERRf_SET
#define READ_DSC3BB_CDR_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3BB_CDR_STATUS2r
#define WRITE_DSC3BB_CDR_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_CDR_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_CDR_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_PI_STATUS0
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f3
 * DESC:     Phase Interpolator Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     PHASE_CNTR       
 *     CLK90_PHASE_OFFSET 
 *     INVALID_INTRP_CTRL90 
 *     INVALID_INTRP_CTRL0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r (0x0002f013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_PI_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3bb_pi_status0[1];
	uint32_t _dsc3bb_pi_status0;
} BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLR(r) (r).dsc3bb_pi_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_SET(r,d) (r).dsc3bb_pi_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_GET(r) (r).dsc3bb_pi_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET(r) ((((r).dsc3bb_pi_status0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET(r,f) (r).dsc3bb_pi_status0[0]=(((r).dsc3bb_pi_status0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET(r) ((((r).dsc3bb_pi_status0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET(r,f) (r).dsc3bb_pi_status0[0]=(((r).dsc3bb_pi_status0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET(r) ((((r).dsc3bb_pi_status0[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET(r,f) (r).dsc3bb_pi_status0[0]=(((r).dsc3bb_pi_status0[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_PHASE_CNTRf_GET(r) (((r).dsc3bb_pi_status0[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_PHASE_CNTRf_SET(r,f) (r).dsc3bb_pi_status0[0]=(((r).dsc3bb_pi_status0[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC3BB_PI_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_PI_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r,(_r._dsc3bb_pi_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_PI_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r,(_r._dsc3bb_pi_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_PI_STATUS0r BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r
#define DSC3BB_PI_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_t DSC3BB_PI_STATUS0r_t;
#define DSC3BB_PI_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLR
#define DSC3BB_PI_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_SET
#define DSC3BB_PI_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_GET
#define DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_GET
#define DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL0f_SET
#define DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_GET
#define DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_INVALID_INTRP_CTRL90f_SET
#define DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_GET
#define DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_CLK90_PHASE_OFFSETf_SET
#define DSC3BB_PI_STATUS0r_PHASE_CNTRf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_PHASE_CNTRf_GET
#define DSC3BB_PI_STATUS0r_PHASE_CNTRf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r_PHASE_CNTRf_SET
#define READ_DSC3BB_PI_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3BB_PI_STATUS0r
#define WRITE_DSC3BB_PI_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_PI_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_PI_STATUS1
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f4
 * DESC:     Phase Interpolator Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     PI_SINGLE90_MSB_SINGLE90_MSB 
 *     PI_SINGLE0_LSB_SINGLE0_LSB 
 *     PI_SEQUENCE90_MSB_SEQUENCE90_MSB 
 *     PI_SINGLE90_LSB_SINGLE90_LSB 
 *     PI_SEQUENCE0_LSB_SEQUENCE0_LSB 
 *     PI_SEQUENCE90_LSB_SEQUENCE90_LSB 
 *     PI_SEQUENCE0_MSB_SEQUENCE0_MSB 
 *     PI_SINGLE0_MSB_SINGLE0_MSB 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r (0x0002f014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_PI_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3bb_pi_status1[1];
	uint32_t _dsc3bb_pi_status1;
} BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_CLR(r) (r).dsc3bb_pi_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_SET(r,d) (r).dsc3bb_pi_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_GET(r) (r).dsc3bb_pi_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET(r) (((r).dsc3bb_pi_status1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET(r,f) (r).dsc3bb_pi_status1[0]=(((r).dsc3bb_pi_status1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSC3BB_PI_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_PI_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r,(_r._dsc3bb_pi_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_PI_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r,(_r._dsc3bb_pi_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_PI_STATUS1r BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r
#define DSC3BB_PI_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_t DSC3BB_PI_STATUS1r_t;
#define DSC3BB_PI_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_CLR
#define DSC3BB_PI_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_SET
#define DSC3BB_PI_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_GET
#define DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_MSB_SINGLE90_MSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_LSB_SEQUENCE0_LSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_MSB_SEQUENCE90_MSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE0_MSB_SEQUENCE0_MSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_LSB_SINGLE0_LSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SEQUENCE90_LSB_SEQUENCE90_LSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE90_LSB_SINGLE90_LSBf_SET
#define DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_GET
#define DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r_PI_SINGLE0_MSB_SINGLE0_MSBf_SET
#define READ_DSC3BB_PI_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3BB_PI_STATUS1r
#define WRITE_DSC3BB_PI_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_PI_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_PI_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_DFE_VGA_STATUS0
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f5
 * DESC:     DFE VGA Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DFE_TAP_BIN      
 *     VGA_SUM          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r (0x0002f015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_DFE_VGA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3bb_dfe_vga_status0[1];
	uint32_t _dsc3bb_dfe_vga_status0;
} BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_CLR(r) (r).dsc3bb_dfe_vga_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_SET(r,d) (r).dsc3bb_dfe_vga_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_GET(r) (r).dsc3bb_dfe_vga_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_dfe_vga_status0[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_dfe_vga_status0[0]=(((r).dsc3bb_dfe_vga_status0[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_GET(r) ((((r).dsc3bb_dfe_vga_status0[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_SET(r,f) (r).dsc3bb_dfe_vga_status0[0]=(((r).dsc3bb_dfe_vga_status0[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET(r) (((r).dsc3bb_dfe_vga_status0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET(r,f) (r).dsc3bb_dfe_vga_status0[0]=(((r).dsc3bb_dfe_vga_status0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access DSC3BB_DFE_VGA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r,(_r._dsc3bb_dfe_vga_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_DFE_VGA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r,(_r._dsc3bb_dfe_vga_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r
#define DSC3BB_DFE_VGA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_t DSC3BB_DFE_VGA_STATUS0r_t;
#define DSC3BB_DFE_VGA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_CLR
#define DSC3BB_DFE_VGA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_SET
#define DSC3BB_DFE_VGA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_GET
#define DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_GET
#define DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_VGA_SUMf_SET
#define DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_GET
#define DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r_DFE_TAP_BINf_SET
#define READ_DSC3BB_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3BB_DFE_VGA_STATUS0r
#define WRITE_DSC3BB_DFE_VGA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_DFE_VGA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_DFE_VGA_STATUS1
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f6
 * DESC:     DFE VGA Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM           
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r (0x0002f016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_DFE_VGA_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3bb_dfe_vga_status1[1];
	uint32_t _dsc3bb_dfe_vga_status1;
} BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_CLR(r) (r).dsc3bb_dfe_vga_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_SET(r,d) (r).dsc3bb_dfe_vga_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_GET(r) (r).dsc3bb_dfe_vga_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_dfe_vga_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_dfe_vga_status1[0]=(((r).dsc3bb_dfe_vga_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_GET(r) (((r).dsc3bb_dfe_vga_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_SET(r,f) (r).dsc3bb_dfe_vga_status1[0]=(((r).dsc3bb_dfe_vga_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3BB_DFE_VGA_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r,(_r._dsc3bb_dfe_vga_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_DFE_VGA_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r,(_r._dsc3bb_dfe_vga_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r
#define DSC3BB_DFE_VGA_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_t DSC3BB_DFE_VGA_STATUS1r_t;
#define DSC3BB_DFE_VGA_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_CLR
#define DSC3BB_DFE_VGA_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_SET
#define DSC3BB_DFE_VGA_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_GET
#define DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_GET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_GET
#define DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_SET BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r_TRNSUMf_SET
#define READ_DSC3BB_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3BB_DFE_VGA_STATUS1r
#define WRITE_DSC3BB_DFE_VGA_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_DFE_VGA_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_DFE_VGA_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS0
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f7
 * DESC:     State Machine Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE        
 *     TUNING_STATE     
 *     SRCH_STATE       
 *     TUNING_DONE      
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r (0x0002f017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status0[1];
	uint32_t _dsc3bb_sm_status0;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_CLR(r) (r).dsc3bb_sm_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SET(r,d) (r).dsc3bb_sm_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_GET(r) (r).dsc3bb_sm_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status0[0]=(((r).dsc3bb_sm_status0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_DONEf_GET(r) ((((r).dsc3bb_sm_status0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_DONEf_SET(r,f) (r).dsc3bb_sm_status0[0]=(((r).dsc3bb_sm_status0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SRCH_STATEf_GET(r) ((((r).dsc3bb_sm_status0[0]) >> 9) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SRCH_STATEf_SET(r,f) (r).dsc3bb_sm_status0[0]=(((r).dsc3bb_sm_status0[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_STATEf_GET(r) ((((r).dsc3bb_sm_status0[0]) >> 4) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_STATEf_SET(r,f) (r).dsc3bb_sm_status0[0]=(((r).dsc3bb_sm_status0[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_DSC_STATEf_GET(r) (((r).dsc3bb_sm_status0[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_DSC_STATEf_SET(r,f) (r).dsc3bb_sm_status0[0]=(((r).dsc3bb_sm_status0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DSC3BB_SM_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r,(_r._dsc3bb_sm_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r,(_r._dsc3bb_sm_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS0r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r
#define DSC3BB_SM_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_t DSC3BB_SM_STATUS0r_t;
#define DSC3BB_SM_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_CLR
#define DSC3BB_SM_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SET
#define DSC3BB_SM_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_GET
#define DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS0r_TUNING_DONEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_DONEf_GET
#define DSC3BB_SM_STATUS0r_TUNING_DONEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_DONEf_SET
#define DSC3BB_SM_STATUS0r_SRCH_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SRCH_STATEf_GET
#define DSC3BB_SM_STATUS0r_SRCH_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_SRCH_STATEf_SET
#define DSC3BB_SM_STATUS0r_TUNING_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_STATEf_GET
#define DSC3BB_SM_STATUS0r_TUNING_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_TUNING_STATEf_SET
#define DSC3BB_SM_STATUS0r_DSC_STATEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_DSC_STATEf_GET
#define DSC3BB_SM_STATUS0r_DSC_STATEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r_DSC_STATEf_SET
#define READ_DSC3BB_SM_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS0r
#define WRITE_DSC3BB_SM_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS1
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f8
 * DESC:     State Machine Status 1 Register
 * SIZE:     32
 * FIELDS:
 *     POSTC_METRIC     
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r (0x0002f018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status1[1];
	uint32_t _dsc3bb_sm_status1;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_CLR(r) (r).dsc3bb_sm_status1[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_SET(r,d) (r).dsc3bb_sm_status1[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_GET(r) (r).dsc3bb_sm_status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status1[0]=(((r).dsc3bb_sm_status1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_POSTC_METRICf_GET(r) (((r).dsc3bb_sm_status1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_POSTC_METRICf_SET(r,f) (r).dsc3bb_sm_status1[0]=(((r).dsc3bb_sm_status1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3BB_SM_STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r,(_r._dsc3bb_sm_status1))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r,(_r._dsc3bb_sm_status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS1r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r
#define DSC3BB_SM_STATUS1r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_t DSC3BB_SM_STATUS1r_t;
#define DSC3BB_SM_STATUS1r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_CLR
#define DSC3BB_SM_STATUS1r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_SET
#define DSC3BB_SM_STATUS1r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_GET
#define DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS1r_POSTC_METRICf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_POSTC_METRICf_GET
#define DSC3BB_SM_STATUS1r_POSTC_METRICf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r_POSTC_METRICf_SET
#define READ_DSC3BB_SM_STATUS1r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS1r
#define WRITE_DSC3BB_SM_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS2
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82f9
 * DESC:     State Machine Status 2 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_MO 
 *     SLICER_OFFSET_ZO 
 *     SLICER_OFFSET_PO 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r (0x0002f019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status2[1];
	uint32_t _dsc3bb_sm_status2;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_CLR(r) (r).dsc3bb_sm_status2[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SET(r,d) (r).dsc3bb_sm_status2[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_GET(r) (r).dsc3bb_sm_status2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status2[0]=(((r).dsc3bb_sm_status2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_GET(r) ((((r).dsc3bb_sm_status2[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_SET(r,f) (r).dsc3bb_sm_status2[0]=(((r).dsc3bb_sm_status2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_GET(r) ((((r).dsc3bb_sm_status2[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_SET(r,f) (r).dsc3bb_sm_status2[0]=(((r).dsc3bb_sm_status2[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_GET(r) (((r).dsc3bb_sm_status2[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_SET(r,f) (r).dsc3bb_sm_status2[0]=(((r).dsc3bb_sm_status2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3BB_SM_STATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r,(_r._dsc3bb_sm_status2))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r,(_r._dsc3bb_sm_status2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS2r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r
#define DSC3BB_SM_STATUS2r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_t DSC3BB_SM_STATUS2r_t;
#define DSC3BB_SM_STATUS2r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_CLR
#define DSC3BB_SM_STATUS2r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SET
#define DSC3BB_SM_STATUS2r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_GET
#define DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_GET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_POf_SET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_GET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_ZOf_SET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_GET
#define DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r_SLICER_OFFSET_MOf_SET
#define READ_DSC3BB_SM_STATUS2r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS2r
#define WRITE_DSC3BB_SM_STATUS2r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS3
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82fa
 * DESC:     State Machine Status 3 Register
 * SIZE:     32
 * FIELDS:
 *     SLICER_OFFSET_ME 
 *     SLICER_OFFSET_ZE 
 *     SLICER_OFFSET_PE 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r (0x0002f01a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status3[1];
	uint32_t _dsc3bb_sm_status3;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_CLR(r) (r).dsc3bb_sm_status3[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SET(r,d) (r).dsc3bb_sm_status3[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_GET(r) (r).dsc3bb_sm_status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status3[0]=(((r).dsc3bb_sm_status3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_GET(r) ((((r).dsc3bb_sm_status3[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_SET(r,f) (r).dsc3bb_sm_status3[0]=(((r).dsc3bb_sm_status3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_GET(r) ((((r).dsc3bb_sm_status3[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_SET(r,f) (r).dsc3bb_sm_status3[0]=(((r).dsc3bb_sm_status3[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_GET(r) (((r).dsc3bb_sm_status3[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_SET(r,f) (r).dsc3bb_sm_status3[0]=(((r).dsc3bb_sm_status3[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC3BB_SM_STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r,(_r._dsc3bb_sm_status3))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r,(_r._dsc3bb_sm_status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS3r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r
#define DSC3BB_SM_STATUS3r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_t DSC3BB_SM_STATUS3r_t;
#define DSC3BB_SM_STATUS3r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_CLR
#define DSC3BB_SM_STATUS3r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SET
#define DSC3BB_SM_STATUS3r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_GET
#define DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_GET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_PEf_SET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_GET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_ZEf_SET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_GET
#define DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r_SLICER_OFFSET_MEf_SET
#define READ_DSC3BB_SM_STATUS3r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS3r
#define WRITE_DSC3BB_SM_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS4
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82fb
 * DESC:     State Machine Status 4 Register
 * SIZE:     32
 * FIELDS:
 *     PF_CTRL          
 *     PF_MIN           
 *     PF_MAX           
 *     VGA_MIN          
 *     VGA_MAX          
 *     DFE_MIN          
 *     DFE_MAX          
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r (0x0002f01b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status4[1];
	uint32_t _dsc3bb_sm_status4;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_CLR(r) (r).dsc3bb_sm_status4[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_SET(r,d) (r).dsc3bb_sm_status4[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_GET(r) (r).dsc3bb_sm_status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MAXf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MAXf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MINf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MINf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MAXf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MAXf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MINf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MINf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MAXf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MAXf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MINf_GET(r) ((((r).dsc3bb_sm_status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MINf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_CTRLf_GET(r) (((r).dsc3bb_sm_status4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_CTRLf_SET(r,f) (r).dsc3bb_sm_status4[0]=(((r).dsc3bb_sm_status4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access DSC3BB_SM_STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r,(_r._dsc3bb_sm_status4))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r,(_r._dsc3bb_sm_status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS4r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r
#define DSC3BB_SM_STATUS4r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_t DSC3BB_SM_STATUS4r_t;
#define DSC3BB_SM_STATUS4r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_CLR
#define DSC3BB_SM_STATUS4r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_SET
#define DSC3BB_SM_STATUS4r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_GET
#define DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS4r_DFE_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MAXf_GET
#define DSC3BB_SM_STATUS4r_DFE_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MAXf_SET
#define DSC3BB_SM_STATUS4r_DFE_MINf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MINf_GET
#define DSC3BB_SM_STATUS4r_DFE_MINf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_DFE_MINf_SET
#define DSC3BB_SM_STATUS4r_VGA_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MAXf_GET
#define DSC3BB_SM_STATUS4r_VGA_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MAXf_SET
#define DSC3BB_SM_STATUS4r_VGA_MINf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MINf_GET
#define DSC3BB_SM_STATUS4r_VGA_MINf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_VGA_MINf_SET
#define DSC3BB_SM_STATUS4r_PF_MAXf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MAXf_GET
#define DSC3BB_SM_STATUS4r_PF_MAXf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MAXf_SET
#define DSC3BB_SM_STATUS4r_PF_MINf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MINf_GET
#define DSC3BB_SM_STATUS4r_PF_MINf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_MINf_SET
#define DSC3BB_SM_STATUS4r_PF_CTRLf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_CTRLf_GET
#define DSC3BB_SM_STATUS4r_PF_CTRLf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r_PF_CTRLf_SET
#define READ_DSC3BB_SM_STATUS4r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS4r
#define WRITE_DSC3BB_SM_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_ANA_STATUS0
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82fc
 * DESC:     DSC Analog Status 0 Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET_PD        
 *     EN_HGAIN         
 *     EN_DFE_CLK       
 *     PD_CH_P1         
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r (0x0002f01c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_ANA_STATUS0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_s {
	uint32_t v[1];
	uint32_t dsc3bb_ana_status0[1];
	uint32_t _dsc3bb_ana_status0;
} BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_CLR(r) (r).dsc3bb_ana_status0[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_SET(r,d) (r).dsc3bb_ana_status0[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_GET(r) (r).dsc3bb_ana_status0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_ana_status0[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_ana_status0[0]=(((r).dsc3bb_ana_status0[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_PD_CH_P1f_GET(r) ((((r).dsc3bb_ana_status0[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_PD_CH_P1f_SET(r,f) (r).dsc3bb_ana_status0[0]=(((r).dsc3bb_ana_status0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_GET(r) ((((r).dsc3bb_ana_status0[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_SET(r,f) (r).dsc3bb_ana_status0[0]=(((r).dsc3bb_ana_status0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_HGAINf_GET(r) ((((r).dsc3bb_ana_status0[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_HGAINf_SET(r,f) (r).dsc3bb_ana_status0[0]=(((r).dsc3bb_ana_status0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_OFFSET_PDf_GET(r) (((r).dsc3bb_ana_status0[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_OFFSET_PDf_SET(r,f) (r).dsc3bb_ana_status0[0]=(((r).dsc3bb_ana_status0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC3BB_ANA_STATUS0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r,(_r._dsc3bb_ana_status0))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_ANA_STATUS0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r,(_r._dsc3bb_ana_status0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_ANA_STATUS0r BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r
#define DSC3BB_ANA_STATUS0r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_t DSC3BB_ANA_STATUS0r_t;
#define DSC3BB_ANA_STATUS0r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_CLR
#define DSC3BB_ANA_STATUS0r_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_SET
#define DSC3BB_ANA_STATUS0r_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_GET
#define DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_ANA_STATUS0r_PD_CH_P1f_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_PD_CH_P1f_GET
#define DSC3BB_ANA_STATUS0r_PD_CH_P1f_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_PD_CH_P1f_SET
#define DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_GET
#define DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_DFE_CLKf_SET
#define DSC3BB_ANA_STATUS0r_EN_HGAINf_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_HGAINf_GET
#define DSC3BB_ANA_STATUS0r_EN_HGAINf_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_EN_HGAINf_SET
#define DSC3BB_ANA_STATUS0r_OFFSET_PDf_GET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_OFFSET_PDf_GET
#define DSC3BB_ANA_STATUS0r_OFFSET_PDf_SET BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r_OFFSET_PDf_SET
#define READ_DSC3BB_ANA_STATUS0r BCMI_HYPERLITE_XGXS_READ_DSC3BB_ANA_STATUS0r
#define WRITE_DSC3BB_ANA_STATUS0r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_ANA_STATUS0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_ANA_STATUS0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS5
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82fd
 * DESC:     State Machine Status 5 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_BR_VGA    
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r (0x0002f01d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status5[1];
	uint32_t _dsc3bb_sm_status5;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_CLR(r) (r).dsc3bb_sm_status5[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_SET(r,d) (r).dsc3bb_sm_status5[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_GET(r) (r).dsc3bb_sm_status5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status5[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status5[0]=(((r).dsc3bb_sm_status5[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_GET(r) (((r).dsc3bb_sm_status5[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_SET(r,f) (r).dsc3bb_sm_status5[0]=(((r).dsc3bb_sm_status5[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3BB_SM_STATUS5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r,(_r._dsc3bb_sm_status5))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r,(_r._dsc3bb_sm_status5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS5r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r
#define DSC3BB_SM_STATUS5r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_t DSC3BB_SM_STATUS5r_t;
#define DSC3BB_SM_STATUS5r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_CLR
#define DSC3BB_SM_STATUS5r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_SET
#define DSC3BB_SM_STATUS5r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_GET
#define DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_GET
#define DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r_TRNSUM_BR_VGAf_SET
#define READ_DSC3BB_SM_STATUS5r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS5r
#define WRITE_DSC3BB_SM_STATUS5r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC3BB_SM_STATUS6
 * BLOCKS:   DSC3BB
 * REGADDR:  0x82fe
 * DESC:     State Machine Status 6 Register
 * SIZE:     32
 * FIELDS:
 *     TRNSUM_PF        
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r (0x0002f01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_SIZE 4

/*
 * This structure should be used to declare and program DSC3BB_SM_STATUS6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_s {
	uint32_t v[1];
	uint32_t dsc3bb_sm_status6[1];
	uint32_t _dsc3bb_sm_status6;
} BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_t;

#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_CLR(r) (r).dsc3bb_sm_status6[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_SET(r,d) (r).dsc3bb_sm_status6[0] = d
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_GET(r) (r).dsc3bb_sm_status6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc3bb_sm_status6[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc3bb_sm_status6[0]=(((r).dsc3bb_sm_status6[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_TRNSUM_PFf_GET(r) (((r).dsc3bb_sm_status6[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_TRNSUM_PFf_SET(r,f) (r).dsc3bb_sm_status6[0]=(((r).dsc3bb_sm_status6[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access DSC3BB_SM_STATUS6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r,(_r._dsc3bb_sm_status6))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r,(_r._dsc3bb_sm_status6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC3BB_SM_STATUS6r BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r
#define DSC3BB_SM_STATUS6r_SIZE BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_t DSC3BB_SM_STATUS6r_t;
#define DSC3BB_SM_STATUS6r_CLR BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_CLR
#define DSC3BB_SM_STATUS6r_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_SET
#define DSC3BB_SM_STATUS6r_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_GET
#define DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_GET
#define DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_RESERVED_FOR_ECO0f_SET
#define DSC3BB_SM_STATUS6r_TRNSUM_PFf_GET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_TRNSUM_PFf_GET
#define DSC3BB_SM_STATUS6r_TRNSUM_PFf_SET BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r_TRNSUM_PFf_SET
#define READ_DSC3BB_SM_STATUS6r BCMI_HYPERLITE_XGXS_READ_DSC3BB_SM_STATUS6r
#define WRITE_DSC3BB_SM_STATUS6r BCMI_HYPERLITE_XGXS_WRITE_DSC3BB_SM_STATUS6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC3BB_SM_STATUS6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL1000X1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8300
 * DESC:     1000X control 1 register
 * SIZE:     32
 * FIELDS:
 *     FIBER_MODE_1000X 
 *     TBI_INTERFACE    
 *     SIGNAL_DETECT_EN 
 *     INVERT_SIGNAL_DETECT 
 *     AUTODET_EN       
 *     SGMII_MASTER_MODE 
 *     DISABLE_PLL_PWRDWN 
 *     CRC_CHECKER_DISABLE 
 *     COMMA_DET_EN     
 *     ZERO_COMMA_DETECTOR_PHASE 
 *     REMOTE_LOOPBACK  
 *     SEL_RX_PKTS_FOR_CNTR 
 *     RESERVED1        
 *     DISABLE_SIGNAL_DETECT_FILTER 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r (0x00030010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL1000X1r_s {
	uint32_t v[1];
	uint32_t control1000x1[1];
	uint32_t _control1000x1;
} BCMI_HYPERLITE_XGXS_CONTROL1000X1r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CLR(r) (r).control1000x1[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SET(r,d) (r).control1000x1[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_GET(r) (r).control1000x1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED0f_GET(r) ((((r).control1000x1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED0f_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_GET(r) ((((r).control1000x1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED1f_GET(r) ((((r).control1000x1[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED1f_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET(r) ((((r).control1000x1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_REMOTE_LOOPBACKf_GET(r) ((((r).control1000x1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_REMOTE_LOOPBACKf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET(r) ((((r).control1000x1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_COMMA_DET_ENf_GET(r) ((((r).control1000x1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_COMMA_DET_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET(r) ((((r).control1000x1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET(r) ((((r).control1000x1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SGMII_MASTER_MODEf_GET(r) ((((r).control1000x1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SGMII_MASTER_MODEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_AUTODET_ENf_GET(r) ((((r).control1000x1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_AUTODET_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET(r) ((((r).control1000x1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIGNAL_DETECT_ENf_GET(r) ((((r).control1000x1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIGNAL_DETECT_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_TBI_INTERFACEf_GET(r) ((((r).control1000x1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_TBI_INTERFACEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_FIBER_MODE_1000Xf_GET(r) (((r).control1000x1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X1r_FIBER_MODE_1000Xf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL1000X1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X1r,(_r._control1000x1))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X1r,(_r._control1000x1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X1r BCMI_HYPERLITE_XGXS_CONTROL1000X1r
#define CONTROL1000X1r_SIZE BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL1000X1r_t CONTROL1000X1r_t;
#define CONTROL1000X1r_CLR BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CLR
#define CONTROL1000X1r_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SET
#define CONTROL1000X1r_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_GET
#define CONTROL1000X1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED0f_GET
#define CONTROL1000X1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED0f_SET
#define CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_GET
#define CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_SIGNAL_DETECT_FILTERf_SET
#define CONTROL1000X1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED1f_GET
#define CONTROL1000X1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_RESERVED1f_SET
#define CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET
#define CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET
#define CONTROL1000X1r_REMOTE_LOOPBACKf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_REMOTE_LOOPBACKf_GET
#define CONTROL1000X1r_REMOTE_LOOPBACKf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_REMOTE_LOOPBACKf_SET
#define CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET
#define CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET
#define CONTROL1000X1r_COMMA_DET_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_COMMA_DET_ENf_GET
#define CONTROL1000X1r_COMMA_DET_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_COMMA_DET_ENf_SET
#define CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET
#define CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET
#define CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET
#define CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET
#define CONTROL1000X1r_SGMII_MASTER_MODEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SGMII_MASTER_MODEf_GET
#define CONTROL1000X1r_SGMII_MASTER_MODEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SGMII_MASTER_MODEf_SET
#define CONTROL1000X1r_AUTODET_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_AUTODET_ENf_GET
#define CONTROL1000X1r_AUTODET_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_AUTODET_ENf_SET
#define CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET
#define CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET
#define CONTROL1000X1r_SIGNAL_DETECT_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIGNAL_DETECT_ENf_GET
#define CONTROL1000X1r_SIGNAL_DETECT_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_SIGNAL_DETECT_ENf_SET
#define CONTROL1000X1r_TBI_INTERFACEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_TBI_INTERFACEf_GET
#define CONTROL1000X1r_TBI_INTERFACEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_TBI_INTERFACEf_SET
#define CONTROL1000X1r_FIBER_MODE_1000Xf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_FIBER_MODE_1000Xf_GET
#define CONTROL1000X1r_FIBER_MODE_1000Xf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X1r_FIBER_MODE_1000Xf_SET
#define READ_CONTROL1000X1r BCMI_HYPERLITE_XGXS_READ_CONTROL1000X1r
#define WRITE_CONTROL1000X1r BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL1000X1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL1000X2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8301
 * DESC:     1000X control 2 register
 * SIZE:     32
 * FIELDS:
 *     ENABLE_PARALLEL_DETECTION 
 *     DISABLE_FALSE_LINK 
 *     FILTER_FORCE_LINK 
 *     ENABLE_AUTONEG_ERR_TIMER 
 *     DISABLE_REMOTE_FAULT_SENSING 
 *     FORCE_XMIT_DATA_ON_TXSIDE 
 *     AUTONEG_FAST_TIMERS 
 *     DISABLE_CARRIER_EXTEND 
 *     DISABLE_TRRR_GENERATION 
 *     BYPASS_PCS_RX    
 *     BYPASS_PCS_TX    
 *     TEST_CNTR        
 *     TRANSMIT_PACKET_SEQ_TEST 
 *     TRANSMIT_IDLEJAM_SEQ_TEST 
 *     CLEAR_BER_COUNTER 
 *     DISABLE_EXTEND_FDX_ONLY 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r (0x00030011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL1000X2r_s {
	uint32_t v[1];
	uint32_t control1000x2[1];
	uint32_t _control1000x2;
} BCMI_HYPERLITE_XGXS_CONTROL1000X2r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLR(r) (r).control1000x2[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_SET(r,d) (r).control1000x2[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_GET(r) (r).control1000x2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET(r) ((((r).control1000x2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLEAR_BER_COUNTERf_GET(r) ((((r).control1000x2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLEAR_BER_COUNTERf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET(r) ((((r).control1000x2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET(r) ((((r).control1000x2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TEST_CNTRf_GET(r) ((((r).control1000x2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TEST_CNTRf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_TXf_GET(r) ((((r).control1000x2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_TXf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_RXf_GET(r) ((((r).control1000x2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_RXf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET(r) ((((r).control1000x2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET(r) ((((r).control1000x2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET(r) ((((r).control1000x2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET(r) ((((r).control1000x2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET(r) ((((r).control1000x2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET(r) ((((r).control1000x2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FILTER_FORCE_LINKf_GET(r) ((((r).control1000x2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FILTER_FORCE_LINKf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_FALSE_LINKf_GET(r) ((((r).control1000x2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_FALSE_LINKf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET(r) (((r).control1000x2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL1000X2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X2r,(_r._control1000x2))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X2r,(_r._control1000x2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X2r BCMI_HYPERLITE_XGXS_CONTROL1000X2r
#define CONTROL1000X2r_SIZE BCMI_HYPERLITE_XGXS_CONTROL1000X2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL1000X2r_t CONTROL1000X2r_t;
#define CONTROL1000X2r_CLR BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLR
#define CONTROL1000X2r_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_SET
#define CONTROL1000X2r_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_GET
#define CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET
#define CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET
#define CONTROL1000X2r_CLEAR_BER_COUNTERf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLEAR_BER_COUNTERf_GET
#define CONTROL1000X2r_CLEAR_BER_COUNTERf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_CLEAR_BER_COUNTERf_SET
#define CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET
#define CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET
#define CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET
#define CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET
#define CONTROL1000X2r_TEST_CNTRf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TEST_CNTRf_GET
#define CONTROL1000X2r_TEST_CNTRf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_TEST_CNTRf_SET
#define CONTROL1000X2r_BYPASS_PCS_TXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_TXf_GET
#define CONTROL1000X2r_BYPASS_PCS_TXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_TXf_SET
#define CONTROL1000X2r_BYPASS_PCS_RXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_RXf_GET
#define CONTROL1000X2r_BYPASS_PCS_RXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_BYPASS_PCS_RXf_SET
#define CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET
#define CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET
#define CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET
#define CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET
#define CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET
#define CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET
#define CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET
#define CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET
#define CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET
#define CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET
#define CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET
#define CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET
#define CONTROL1000X2r_FILTER_FORCE_LINKf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FILTER_FORCE_LINKf_GET
#define CONTROL1000X2r_FILTER_FORCE_LINKf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_FILTER_FORCE_LINKf_SET
#define CONTROL1000X2r_DISABLE_FALSE_LINKf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_FALSE_LINKf_GET
#define CONTROL1000X2r_DISABLE_FALSE_LINKf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_DISABLE_FALSE_LINKf_SET
#define CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET
#define CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET
#define READ_CONTROL1000X2r BCMI_HYPERLITE_XGXS_READ_CONTROL1000X2r
#define WRITE_CONTROL1000X2r BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL1000X2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL1000X3
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8302
 * DESC:     1000X control 3 register
 * SIZE:     32
 * FIELDS:
 *     TX_FIFO_RST      
 *     FIFO_ELASICITY_TX_RX 
 *     EARLY_PREAMBLE_TX 
 *     EARLY_PREAMBLE_RX 
 *     FREQ_LOCK_ELASTICITY_RX 
 *     FREQ_LOCK_ELASTICITY_TX 
 *     BYPASS_TXFIFO1000 
 *     FORCE_TXFIFO_ON  
 *     BLOCK_TXEN_MODE  
 *     JAM_FALSE_CARRIER_MODE 
 *     EXT_PHY_CRS_MODE 
 *     INVERT_EXT_PHY_CRS 
 *     DISABLE_TX_CRS   
 *     RXFIFO_GMII_RESET 
 *     DISABLE_PACKET_MISALIGN 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r (0x00030012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL1000X3r_s {
	uint32_t v[1];
	uint32_t control1000x3[1];
	uint32_t _control1000x3;
} BCMI_HYPERLITE_XGXS_CONTROL1000X3r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_CLR(r) (r).control1000x3[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_SET(r,d) (r).control1000x3[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_GET(r) (r).control1000x3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET(r) ((((r).control1000x3[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_RXFIFO_GMII_RESETf_GET(r) ((((r).control1000x3[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_RXFIFO_GMII_RESETf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_TX_CRSf_GET(r) ((((r).control1000x3[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_TX_CRSf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET(r) ((((r).control1000x3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET(r) ((((r).control1000x3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET(r) ((((r).control1000x3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BLOCK_TXEN_MODEf_GET(r) ((((r).control1000x3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BLOCK_TXEN_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FORCE_TXFIFO_ONf_GET(r) ((((r).control1000x3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FORCE_TXFIFO_ONf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BYPASS_TXFIFO1000f_GET(r) ((((r).control1000x3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BYPASS_TXFIFO1000f_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET(r) ((((r).control1000x3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET(r) ((((r).control1000x3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET(r) ((((r).control1000x3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET(r) ((((r).control1000x3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_GET(r) ((((r).control1000x3[0]) >> 1) & 0x3)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_TX_FIFO_RSTf_GET(r) (((r).control1000x3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X3r_TX_FIFO_RSTf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL1000X3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X3r,(_r._control1000x3))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X3r,(_r._control1000x3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X3r BCMI_HYPERLITE_XGXS_CONTROL1000X3r
#define CONTROL1000X3r_SIZE BCMI_HYPERLITE_XGXS_CONTROL1000X3r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL1000X3r_t CONTROL1000X3r_t;
#define CONTROL1000X3r_CLR BCMI_HYPERLITE_XGXS_CONTROL1000X3r_CLR
#define CONTROL1000X3r_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_SET
#define CONTROL1000X3r_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_GET
#define CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET
#define CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET
#define CONTROL1000X3r_RXFIFO_GMII_RESETf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_RXFIFO_GMII_RESETf_GET
#define CONTROL1000X3r_RXFIFO_GMII_RESETf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_RXFIFO_GMII_RESETf_SET
#define CONTROL1000X3r_DISABLE_TX_CRSf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_TX_CRSf_GET
#define CONTROL1000X3r_DISABLE_TX_CRSf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_DISABLE_TX_CRSf_SET
#define CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET
#define CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET
#define CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET
#define CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET
#define CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET
#define CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET
#define CONTROL1000X3r_BLOCK_TXEN_MODEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BLOCK_TXEN_MODEf_GET
#define CONTROL1000X3r_BLOCK_TXEN_MODEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BLOCK_TXEN_MODEf_SET
#define CONTROL1000X3r_FORCE_TXFIFO_ONf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FORCE_TXFIFO_ONf_GET
#define CONTROL1000X3r_FORCE_TXFIFO_ONf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FORCE_TXFIFO_ONf_SET
#define CONTROL1000X3r_BYPASS_TXFIFO1000f_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BYPASS_TXFIFO1000f_GET
#define CONTROL1000X3r_BYPASS_TXFIFO1000f_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_BYPASS_TXFIFO1000f_SET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET
#define CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET
#define CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET
#define CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET
#define CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET
#define CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_GET
#define CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_FIFO_ELASICITY_TX_RXf_SET
#define CONTROL1000X3r_TX_FIFO_RSTf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_TX_FIFO_RSTf_GET
#define CONTROL1000X3r_TX_FIFO_RSTf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X3r_TX_FIFO_RSTf_SET
#define READ_CONTROL1000X3r BCMI_HYPERLITE_XGXS_READ_CONTROL1000X3r
#define WRITE_CONTROL1000X3r BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL1000X3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL1000X4
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8303
 * DESC:     1000X control 4 register
 * SIZE:     32
 * FIELDS:
 *     MISCRXSTATUS_SEL 
 *     NP_COUNT_CLRNRD  
 *     NP_COUNT_CLRNBP  
 *     LP_NEXT_PAGE_SEL 
 *     RESERVED1        
 *     LINK_FORCE       
 *     LATCH_LINKDOWN_ENABLE 
 *     CLEAR_LINKDOWN   
 *     ZERO_RXDGMII     
 *     TX_CONFIG_REG_SEL 
 *     ENABLE_LAST_RESOLUTION_ERR 
 *     DISABLE_RESOLUTION_ERR_RESTART 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r (0x00030013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL1000X4r_s {
	uint32_t v[1];
	uint32_t control1000x4[1];
	uint32_t _control1000x4;
} BCMI_HYPERLITE_XGXS_CONTROL1000X4r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLR(r) (r).control1000x4[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_SET(r,d) (r).control1000x4[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_GET(r) (r).control1000x4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED0f_GET(r) ((((r).control1000x4[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED0f_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET(r) ((((r).control1000x4[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET(r) ((((r).control1000x4[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_TX_CONFIG_REG_SELf_GET(r) ((((r).control1000x4[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_TX_CONFIG_REG_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ZERO_RXDGMIIf_GET(r) ((((r).control1000x4[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ZERO_RXDGMIIf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLEAR_LINKDOWNf_GET(r) ((((r).control1000x4[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLEAR_LINKDOWNf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET(r) ((((r).control1000x4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LINK_FORCEf_GET(r) ((((r).control1000x4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LINK_FORCEf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED1f_GET(r) ((((r).control1000x4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED1f_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET(r) ((((r).control1000x4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNBPf_GET(r) ((((r).control1000x4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNBPf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNRDf_GET(r) ((((r).control1000x4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNRDf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_MISCRXSTATUS_SELf_GET(r) (((r).control1000x4[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_CONTROL1000X4r_MISCRXSTATUS_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access CONTROL1000X4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL1000X4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X4r,(_r._control1000x4))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL1000X4r,(_r._control1000x4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X4r BCMI_HYPERLITE_XGXS_CONTROL1000X4r
#define CONTROL1000X4r_SIZE BCMI_HYPERLITE_XGXS_CONTROL1000X4r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL1000X4r_t CONTROL1000X4r_t;
#define CONTROL1000X4r_CLR BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLR
#define CONTROL1000X4r_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_SET
#define CONTROL1000X4r_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_GET
#define CONTROL1000X4r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED0f_GET
#define CONTROL1000X4r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED0f_SET
#define CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET
#define CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET
#define CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET
#define CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET
#define CONTROL1000X4r_TX_CONFIG_REG_SELf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_TX_CONFIG_REG_SELf_GET
#define CONTROL1000X4r_TX_CONFIG_REG_SELf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_TX_CONFIG_REG_SELf_SET
#define CONTROL1000X4r_ZERO_RXDGMIIf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ZERO_RXDGMIIf_GET
#define CONTROL1000X4r_ZERO_RXDGMIIf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_ZERO_RXDGMIIf_SET
#define CONTROL1000X4r_CLEAR_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLEAR_LINKDOWNf_GET
#define CONTROL1000X4r_CLEAR_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_CLEAR_LINKDOWNf_SET
#define CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET
#define CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET
#define CONTROL1000X4r_LINK_FORCEf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LINK_FORCEf_GET
#define CONTROL1000X4r_LINK_FORCEf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LINK_FORCEf_SET
#define CONTROL1000X4r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED1f_GET
#define CONTROL1000X4r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_RESERVED1f_SET
#define CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET
#define CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET
#define CONTROL1000X4r_NP_COUNT_CLRNBPf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNBPf_GET
#define CONTROL1000X4r_NP_COUNT_CLRNBPf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNBPf_SET
#define CONTROL1000X4r_NP_COUNT_CLRNRDf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNRDf_GET
#define CONTROL1000X4r_NP_COUNT_CLRNRDf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_NP_COUNT_CLRNRDf_SET
#define CONTROL1000X4r_MISCRXSTATUS_SELf_GET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_MISCRXSTATUS_SELf_GET
#define CONTROL1000X4r_MISCRXSTATUS_SELf_SET BCMI_HYPERLITE_XGXS_CONTROL1000X4r_MISCRXSTATUS_SELf_SET
#define READ_CONTROL1000X4r BCMI_HYPERLITE_XGXS_READ_CONTROL1000X4r
#define WRITE_CONTROL1000X4r BCMI_HYPERLITE_XGXS_WRITE_CONTROL1000X4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL1000X4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS1000X1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8304
 * DESC:     1000X status 1 register
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     SPEED_STATUS     
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     LINK_STATUS_CHANGE 
 *     EARLY_END_EXTENSION_DETECTED 
 *     CARRIER_EXTEND_ERR_DETECTED 
 *     RX_ERR_DETECTED  
 *     TX_ERR_DETECTED  
 *     CRC_ERR_DETECTED 
 *     FALSE_CARRIER_DETECTED 
 *     RXFIFO_ERR_DETECTED 
 *     TXFIFO_ERR_DETECTED 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r (0x00030014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS1000X1r_s {
	uint32_t v[1];
	uint32_t status1000x1[1];
	uint32_t _status1000x1;
} BCMI_HYPERLITE_XGXS_STATUS1000X1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_CLR(r) (r).status1000x1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SET(r,d) (r).status1000x1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_GET(r) (r).status1000x1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_CRC_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_CRC_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_TX_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_TX_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_RX_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_RX_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUS_CHANGEf_GET(r) ((((r).status1000x1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUS_CHANGEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).status1000x1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).status1000x1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SPEED_STATUSf_GET(r) ((((r).status1000x1[0]) >> 3) & 0x3)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SPEED_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_DUPLEX_STATUSf_GET(r) ((((r).status1000x1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_DUPLEX_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUSf_GET(r) ((((r).status1000x1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SGMII_MODEf_GET(r) (((r).status1000x1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X1r_SGMII_MODEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS1000X1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS1000X1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X1r,(_r._status1000x1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X1r,(_r._status1000x1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X1r BCMI_HYPERLITE_XGXS_STATUS1000X1r
#define STATUS1000X1r_SIZE BCMI_HYPERLITE_XGXS_STATUS1000X1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS1000X1r_t STATUS1000X1r_t;
#define STATUS1000X1r_CLR BCMI_HYPERLITE_XGXS_STATUS1000X1r_CLR
#define STATUS1000X1r_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_SET
#define STATUS1000X1r_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_GET
#define STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET
#define STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET
#define STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET
#define STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET
#define STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET
#define STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET
#define STATUS1000X1r_CRC_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_CRC_ERR_DETECTEDf_GET
#define STATUS1000X1r_CRC_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_CRC_ERR_DETECTEDf_SET
#define STATUS1000X1r_TX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_TX_ERR_DETECTEDf_GET
#define STATUS1000X1r_TX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_TX_ERR_DETECTEDf_SET
#define STATUS1000X1r_RX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_RX_ERR_DETECTEDf_GET
#define STATUS1000X1r_RX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_RX_ERR_DETECTEDf_SET
#define STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET
#define STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET
#define STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET
#define STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET
#define STATUS1000X1r_LINK_STATUS_CHANGEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUS_CHANGEf_GET
#define STATUS1000X1r_LINK_STATUS_CHANGEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUS_CHANGEf_SET
#define STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define STATUS1000X1r_SPEED_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_SPEED_STATUSf_GET
#define STATUS1000X1r_SPEED_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_SPEED_STATUSf_SET
#define STATUS1000X1r_DUPLEX_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_DUPLEX_STATUSf_GET
#define STATUS1000X1r_DUPLEX_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_DUPLEX_STATUSf_SET
#define STATUS1000X1r_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUSf_GET
#define STATUS1000X1r_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_LINK_STATUSf_SET
#define STATUS1000X1r_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X1r_SGMII_MODEf_GET
#define STATUS1000X1r_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X1r_SGMII_MODEf_SET
#define READ_STATUS1000X1r BCMI_HYPERLITE_XGXS_READ_STATUS1000X1r
#define WRITE_STATUS1000X1r BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS1000X1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS1000X2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8305
 * DESC:     1000X status 2 register
 * SIZE:     32
 * FIELDS:
 *     AN_ENABLE_STATE  
 *     ANDISABLELINK_AN_DISABLE_LINK_OK_STATE 
 *     ANERROR_AN_ERROR_STATE 
 *     ABILITY_DETECT_STATE 
 *     ACKNOWLEDGE_DETECT_STATE 
 *     COMPLETE_ACKNOWLEDGE_STATE 
 *     IDLE_DETECT_STATE 
 *     LINKDOWN_SYNCLOSS 
 *     RUDI_INVALID     
 *     RUDI_I           
 *     RUDI_C           
 *     SYNC_STATUS_OK   
 *     SYNC_STATUS_FAIL 
 *     SGMII_SELECTOR_MISMATCH 
 *     AUTONEG_RESOLUTION_ERR 
 *     CONSISTENCY_MISMATCH 
 *     SGMII_MODE_CHANGE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r (0x00030015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS1000X2r_s {
	uint32_t v[1];
	uint32_t status1000x2[1];
	uint32_t _status1000x2;
} BCMI_HYPERLITE_XGXS_STATUS1000X2r_t;

#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_CLR(r) (r).status1000x2[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SET(r,d) (r).status1000x2[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_GET(r) (r).status1000x2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_MODE_CHANGEf_GET(r) ((((r).status1000x2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_MODE_CHANGEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET(r) ((((r).status1000x2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET(r) ((((r).status1000x2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).status1000x2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_FAILf_GET(r) ((((r).status1000x2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_FAILf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_OKf_GET(r) ((((r).status1000x2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_OKf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_Cf_GET(r) ((((r).status1000x2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_Cf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_If_GET(r) ((((r).status1000x2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_If_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_INVALIDf_GET(r) ((((r).status1000x2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_INVALIDf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET(r) ((((r).status1000x2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_IDLE_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_IDLE_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET(r) ((((r).status1000x2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ABILITY_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ABILITY_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET(r) ((((r).status1000x2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET(r) ((((r).status1000x2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_AN_ENABLE_STATEf_GET(r) (((r).status1000x2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X2r_AN_ENABLE_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS1000X2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS1000X2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X2r,(_r._status1000x2))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X2r,(_r._status1000x2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X2r BCMI_HYPERLITE_XGXS_STATUS1000X2r
#define STATUS1000X2r_SIZE BCMI_HYPERLITE_XGXS_STATUS1000X2r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS1000X2r_t STATUS1000X2r_t;
#define STATUS1000X2r_CLR BCMI_HYPERLITE_XGXS_STATUS1000X2r_CLR
#define STATUS1000X2r_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SET
#define STATUS1000X2r_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_GET
#define STATUS1000X2r_SGMII_MODE_CHANGEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_MODE_CHANGEf_GET
#define STATUS1000X2r_SGMII_MODE_CHANGEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_MODE_CHANGEf_SET
#define STATUS1000X2r_CONSISTENCY_MISMATCHf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET
#define STATUS1000X2r_CONSISTENCY_MISMATCHf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET
#define STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET
#define STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET
#define STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET
#define STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET
#define STATUS1000X2r_SYNC_STATUS_FAILf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_FAILf_GET
#define STATUS1000X2r_SYNC_STATUS_FAILf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_FAILf_SET
#define STATUS1000X2r_SYNC_STATUS_OKf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_OKf_GET
#define STATUS1000X2r_SYNC_STATUS_OKf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_SYNC_STATUS_OKf_SET
#define STATUS1000X2r_RUDI_Cf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_Cf_GET
#define STATUS1000X2r_RUDI_Cf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_Cf_SET
#define STATUS1000X2r_RUDI_If_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_If_GET
#define STATUS1000X2r_RUDI_If_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_If_SET
#define STATUS1000X2r_RUDI_INVALIDf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_INVALIDf_GET
#define STATUS1000X2r_RUDI_INVALIDf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_RUDI_INVALIDf_SET
#define STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_GET
#define STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_LINKDOWN_SYNCLOSSf_SET
#define STATUS1000X2r_IDLE_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_IDLE_DETECT_STATEf_GET
#define STATUS1000X2r_IDLE_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_IDLE_DETECT_STATEf_SET
#define STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET
#define STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET
#define STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET
#define STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET
#define STATUS1000X2r_ABILITY_DETECT_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ABILITY_DETECT_STATEf_GET
#define STATUS1000X2r_ABILITY_DETECT_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ABILITY_DETECT_STATEf_SET
#define STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_GET
#define STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANDISABLELINK_AN_DISABLE_LINK_OK_STATEf_SET
#define STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_GET
#define STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_ANERROR_AN_ERROR_STATEf_SET
#define STATUS1000X2r_AN_ENABLE_STATEf_GET BCMI_HYPERLITE_XGXS_STATUS1000X2r_AN_ENABLE_STATEf_GET
#define STATUS1000X2r_AN_ENABLE_STATEf_SET BCMI_HYPERLITE_XGXS_STATUS1000X2r_AN_ENABLE_STATEf_SET
#define READ_STATUS1000X2r BCMI_HYPERLITE_XGXS_READ_STATUS1000X2r
#define WRITE_STATUS1000X2r BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS1000X2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS1000X3
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8306
 * DESC:     1000X status 3 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     SD_FILTER_CHG    
 *     SD_MUX           
 *     SD_FILTER        
 *     LATCH_LINKDOWN   
 *     REMOTEPHY_AUTOSEL 
 *     PD_PARK_AN       
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r (0x00030016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS1000X3r_s {
	uint32_t v[1];
	uint32_t status1000x3[1];
	uint32_t _status1000x3;
} BCMI_HYPERLITE_XGXS_STATUS1000X3r_t;

#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_CLR(r) (r).status1000x3[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SET(r,d) (r).status1000x3[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_GET(r) (r).status1000x3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED0f_GET(r) ((((r).status1000x3[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED0f_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_PD_PARK_ANf_GET(r) ((((r).status1000x3[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_PD_PARK_ANf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET(r) ((((r).status1000x3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_LATCH_LINKDOWNf_GET(r) ((((r).status1000x3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_LATCH_LINKDOWNf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTERf_GET(r) ((((r).status1000x3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTERf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_MUXf_GET(r) ((((r).status1000x3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_MUXf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTER_CHGf_GET(r) ((((r).status1000x3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTER_CHGf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED1f_GET(r) (((r).status1000x3[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED1f_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access STATUS1000X3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS1000X3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X3r,(_r._status1000x3))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS1000X3r,(_r._status1000x3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X3r BCMI_HYPERLITE_XGXS_STATUS1000X3r
#define STATUS1000X3r_SIZE BCMI_HYPERLITE_XGXS_STATUS1000X3r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS1000X3r_t STATUS1000X3r_t;
#define STATUS1000X3r_CLR BCMI_HYPERLITE_XGXS_STATUS1000X3r_CLR
#define STATUS1000X3r_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SET
#define STATUS1000X3r_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_GET
#define STATUS1000X3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED0f_GET
#define STATUS1000X3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED0f_SET
#define STATUS1000X3r_PD_PARK_ANf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_PD_PARK_ANf_GET
#define STATUS1000X3r_PD_PARK_ANf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_PD_PARK_ANf_SET
#define STATUS1000X3r_REMOTEPHY_AUTOSELf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET
#define STATUS1000X3r_REMOTEPHY_AUTOSELf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET
#define STATUS1000X3r_LATCH_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_LATCH_LINKDOWNf_GET
#define STATUS1000X3r_LATCH_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_LATCH_LINKDOWNf_SET
#define STATUS1000X3r_SD_FILTERf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTERf_GET
#define STATUS1000X3r_SD_FILTERf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTERf_SET
#define STATUS1000X3r_SD_MUXf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_MUXf_GET
#define STATUS1000X3r_SD_MUXf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_MUXf_SET
#define STATUS1000X3r_SD_FILTER_CHGf_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTER_CHGf_GET
#define STATUS1000X3r_SD_FILTER_CHGf_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_SD_FILTER_CHGf_SET
#define STATUS1000X3r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED1f_GET
#define STATUS1000X3r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_STATUS1000X3r_RESERVED1f_SET
#define READ_STATUS1000X3r BCMI_HYPERLITE_XGXS_READ_STATUS1000X3r
#define WRITE_STATUS1000X3r BCMI_HYPERLITE_XGXS_WRITE_STATUS1000X3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS1000X3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  BADCODEGROUP
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8307
 * DESC:     Invalid code group count register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     BADCODEGROUPS    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr (0x00030017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_SIZE 4

/*
 * This structure should be used to declare and program BADCODEGROUP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_BADCODEGROUPr_s {
	uint32_t v[1];
	uint32_t badcodegroup[1];
	uint32_t _badcodegroup;
} BCMI_HYPERLITE_XGXS_BADCODEGROUPr_t;

#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_CLR(r) (r).badcodegroup[0] = 0
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_SET(r,d) (r).badcodegroup[0] = d
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_GET(r) (r).badcodegroup[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_BADCODEGROUPSf_GET(r) ((((r).badcodegroup[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_BADCODEGROUPSf_SET(r,f) (r).badcodegroup[0]=(((r).badcodegroup[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_RESERVED0f_GET(r) (((r).badcodegroup[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_BADCODEGROUPr_RESERVED0f_SET(r,f) (r).badcodegroup[0]=(((r).badcodegroup[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access BADCODEGROUP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_BADCODEGROUPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_BADCODEGROUPr,(_r._badcodegroup))
#define BCMI_HYPERLITE_XGXS_WRITE_BADCODEGROUPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_BADCODEGROUPr,(_r._badcodegroup))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BADCODEGROUPr BCMI_HYPERLITE_XGXS_BADCODEGROUPr
#define BADCODEGROUPr_SIZE BCMI_HYPERLITE_XGXS_BADCODEGROUPr_SIZE
typedef BCMI_HYPERLITE_XGXS_BADCODEGROUPr_t BADCODEGROUPr_t;
#define BADCODEGROUPr_CLR BCMI_HYPERLITE_XGXS_BADCODEGROUPr_CLR
#define BADCODEGROUPr_SET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_SET
#define BADCODEGROUPr_GET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_GET
#define BADCODEGROUPr_BADCODEGROUPSf_GET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_BADCODEGROUPSf_GET
#define BADCODEGROUPr_BADCODEGROUPSf_SET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_BADCODEGROUPSf_SET
#define BADCODEGROUPr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_RESERVED0f_GET
#define BADCODEGROUPr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_BADCODEGROUPr_RESERVED0f_SET
#define READ_BADCODEGROUPr BCMI_HYPERLITE_XGXS_READ_BADCODEGROUPr
#define WRITE_BADCODEGROUPr BCMI_HYPERLITE_XGXS_WRITE_BADCODEGROUPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_BADCODEGROUPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MISC1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8308
 * DESC:     Miscellaneous 1 control register
 * SIZE:     32
 * FIELDS:
 *     FORCE_SPEED      
 *     FORCE_LN_MODE    
 *     TX_UNDERRUN_1000_DIS 
 *     FORCE_TICK0_SW2  
 *     FORCE_PLL_MODE_AFE 
 *     FORCE_PLL_MODE_AFE_SEL 
 *     REFCLK_SEL       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MISC1r (0x00030018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MISC1r_SIZE 4

/*
 * This structure should be used to declare and program MISC1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MISC1r_s {
	uint32_t v[1];
	uint32_t misc1[1];
	uint32_t _misc1;
} BCMI_HYPERLITE_XGXS_MISC1r_t;

#define BCMI_HYPERLITE_XGXS_MISC1r_CLR(r) (r).misc1[0] = 0
#define BCMI_HYPERLITE_XGXS_MISC1r_SET(r,d) (r).misc1[0] = d
#define BCMI_HYPERLITE_XGXS_MISC1r_GET(r) (r).misc1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MISC1r_REFCLK_SELf_GET(r) ((((r).misc1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_MISC1r_REFCLK_SELf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFE_SELf_GET(r) ((((r).misc1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFE_SELf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFEf_GET(r) ((((r).misc1[0]) >> 8) & 0xf)
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFEf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_TICK0_SW2f_GET(r) ((((r).misc1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_TICK0_SW2f_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MISC1r_TX_UNDERRUN_1000_DISf_GET(r) ((((r).misc1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC1r_TX_UNDERRUN_1000_DISf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_LN_MODEf_GET(r) ((((r).misc1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_LN_MODEf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_SPEEDf_GET(r) (((r).misc1[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_MISC1r_FORCE_SPEEDf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access MISC1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MISC1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MISC1r,(_r._misc1))
#define BCMI_HYPERLITE_XGXS_WRITE_MISC1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MISC1r,(_r._misc1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC1r BCMI_HYPERLITE_XGXS_MISC1r
#define MISC1r_SIZE BCMI_HYPERLITE_XGXS_MISC1r_SIZE
typedef BCMI_HYPERLITE_XGXS_MISC1r_t MISC1r_t;
#define MISC1r_CLR BCMI_HYPERLITE_XGXS_MISC1r_CLR
#define MISC1r_SET BCMI_HYPERLITE_XGXS_MISC1r_SET
#define MISC1r_GET BCMI_HYPERLITE_XGXS_MISC1r_GET
#define MISC1r_REFCLK_SELf_GET BCMI_HYPERLITE_XGXS_MISC1r_REFCLK_SELf_GET
#define MISC1r_REFCLK_SELf_SET BCMI_HYPERLITE_XGXS_MISC1r_REFCLK_SELf_SET
#define MISC1r_FORCE_PLL_MODE_AFE_SELf_GET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFE_SELf_GET
#define MISC1r_FORCE_PLL_MODE_AFE_SELf_SET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFE_SELf_SET
#define MISC1r_FORCE_PLL_MODE_AFEf_GET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFEf_GET
#define MISC1r_FORCE_PLL_MODE_AFEf_SET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_PLL_MODE_AFEf_SET
#define MISC1r_FORCE_TICK0_SW2f_GET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_TICK0_SW2f_GET
#define MISC1r_FORCE_TICK0_SW2f_SET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_TICK0_SW2f_SET
#define MISC1r_TX_UNDERRUN_1000_DISf_GET BCMI_HYPERLITE_XGXS_MISC1r_TX_UNDERRUN_1000_DISf_GET
#define MISC1r_TX_UNDERRUN_1000_DISf_SET BCMI_HYPERLITE_XGXS_MISC1r_TX_UNDERRUN_1000_DISf_SET
#define MISC1r_FORCE_LN_MODEf_GET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_LN_MODEf_GET
#define MISC1r_FORCE_LN_MODEf_SET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_LN_MODEf_SET
#define MISC1r_FORCE_SPEEDf_GET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_SPEEDf_GET
#define MISC1r_FORCE_SPEEDf_SET BCMI_HYPERLITE_XGXS_MISC1r_FORCE_SPEEDf_SET
#define READ_MISC1r BCMI_HYPERLITE_XGXS_READ_MISC1r
#define WRITE_MISC1r BCMI_HYPERLITE_XGXS_WRITE_MISC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MISC1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MISC2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x8309
 * DESC:     Miscellaneous 2 control register
 * SIZE:     32
 * FIELDS:
 *     AN_DEADTRAP      
 *     AN_TXDISABLE_LN  
 *     AN_RXSEQSTARTDIS 
 *     AN_TXDISABLEPHASE 
 *     FIFO_ERR_CYA     
 *     PMA_PMD_FORCED_SPEED_ENC_EN 
 *     KX_CL73_AN_EN    
 *     MIIGMIIMUX_EN    
 *     MIIGMIIDLY_EN    
 *     CLK41_BYPASS     
 *     CLKSIGDET_BYPASS 
 *     RLPBK_RXRST_EN   
 *     RLPBK_SW_FORCE   
 *     RXCK_MII_GEN_SEL_VAL 
 *     RXCK_MII_GEN_SEL_FORCE 
 *     RXCKPL_SEL_COMBO 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MISC2r (0x00030019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MISC2r_SIZE 4

/*
 * This structure should be used to declare and program MISC2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MISC2r_s {
	uint32_t v[1];
	uint32_t misc2[1];
	uint32_t _misc2;
} BCMI_HYPERLITE_XGXS_MISC2r_t;

#define BCMI_HYPERLITE_XGXS_MISC2r_CLR(r) (r).misc2[0] = 0
#define BCMI_HYPERLITE_XGXS_MISC2r_SET(r,d) (r).misc2[0] = d
#define BCMI_HYPERLITE_XGXS_MISC2r_GET(r) (r).misc2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCKPL_SEL_COMBOf_GET(r) ((((r).misc2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCKPL_SEL_COMBOf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_FORCEf_GET(r) ((((r).misc2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_FORCEf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_VALf_GET(r) ((((r).misc2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_VALf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_SW_FORCEf_GET(r) ((((r).misc2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_SW_FORCEf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_RXRST_ENf_GET(r) ((((r).misc2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_RXRST_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MISC2r_CLKSIGDET_BYPASSf_GET(r) ((((r).misc2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_CLKSIGDET_BYPASSf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MISC2r_CLK41_BYPASSf_GET(r) ((((r).misc2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_CLK41_BYPASSf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIDLY_ENf_GET(r) ((((r).misc2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIDLY_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIMUX_ENf_GET(r) ((((r).misc2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIMUX_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MISC2r_KX_CL73_AN_ENf_GET(r) ((((r).misc2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_KX_CL73_AN_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET(r) ((((r).misc2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISC2r_FIFO_ERR_CYAf_GET(r) ((((r).misc2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_FIFO_ERR_CYAf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLEPHASEf_GET(r) ((((r).misc2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLEPHASEf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_RXSEQSTARTDISf_GET(r) ((((r).misc2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_RXSEQSTARTDISf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLE_LNf_GET(r) ((((r).misc2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLE_LNf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_DEADTRAPf_GET(r) (((r).misc2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC2r_AN_DEADTRAPf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISC2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MISC2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MISC2r,(_r._misc2))
#define BCMI_HYPERLITE_XGXS_WRITE_MISC2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MISC2r,(_r._misc2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC2r BCMI_HYPERLITE_XGXS_MISC2r
#define MISC2r_SIZE BCMI_HYPERLITE_XGXS_MISC2r_SIZE
typedef BCMI_HYPERLITE_XGXS_MISC2r_t MISC2r_t;
#define MISC2r_CLR BCMI_HYPERLITE_XGXS_MISC2r_CLR
#define MISC2r_SET BCMI_HYPERLITE_XGXS_MISC2r_SET
#define MISC2r_GET BCMI_HYPERLITE_XGXS_MISC2r_GET
#define MISC2r_RXCKPL_SEL_COMBOf_GET BCMI_HYPERLITE_XGXS_MISC2r_RXCKPL_SEL_COMBOf_GET
#define MISC2r_RXCKPL_SEL_COMBOf_SET BCMI_HYPERLITE_XGXS_MISC2r_RXCKPL_SEL_COMBOf_SET
#define MISC2r_RXCK_MII_GEN_SEL_FORCEf_GET BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_FORCEf_GET
#define MISC2r_RXCK_MII_GEN_SEL_FORCEf_SET BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_FORCEf_SET
#define MISC2r_RXCK_MII_GEN_SEL_VALf_GET BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_VALf_GET
#define MISC2r_RXCK_MII_GEN_SEL_VALf_SET BCMI_HYPERLITE_XGXS_MISC2r_RXCK_MII_GEN_SEL_VALf_SET
#define MISC2r_RLPBK_SW_FORCEf_GET BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_SW_FORCEf_GET
#define MISC2r_RLPBK_SW_FORCEf_SET BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_SW_FORCEf_SET
#define MISC2r_RLPBK_RXRST_ENf_GET BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_RXRST_ENf_GET
#define MISC2r_RLPBK_RXRST_ENf_SET BCMI_HYPERLITE_XGXS_MISC2r_RLPBK_RXRST_ENf_SET
#define MISC2r_CLKSIGDET_BYPASSf_GET BCMI_HYPERLITE_XGXS_MISC2r_CLKSIGDET_BYPASSf_GET
#define MISC2r_CLKSIGDET_BYPASSf_SET BCMI_HYPERLITE_XGXS_MISC2r_CLKSIGDET_BYPASSf_SET
#define MISC2r_CLK41_BYPASSf_GET BCMI_HYPERLITE_XGXS_MISC2r_CLK41_BYPASSf_GET
#define MISC2r_CLK41_BYPASSf_SET BCMI_HYPERLITE_XGXS_MISC2r_CLK41_BYPASSf_SET
#define MISC2r_MIIGMIIDLY_ENf_GET BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIDLY_ENf_GET
#define MISC2r_MIIGMIIDLY_ENf_SET BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIDLY_ENf_SET
#define MISC2r_MIIGMIIMUX_ENf_GET BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIMUX_ENf_GET
#define MISC2r_MIIGMIIMUX_ENf_SET BCMI_HYPERLITE_XGXS_MISC2r_MIIGMIIMUX_ENf_SET
#define MISC2r_KX_CL73_AN_ENf_GET BCMI_HYPERLITE_XGXS_MISC2r_KX_CL73_AN_ENf_GET
#define MISC2r_KX_CL73_AN_ENf_SET BCMI_HYPERLITE_XGXS_MISC2r_KX_CL73_AN_ENf_SET
#define MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET BCMI_HYPERLITE_XGXS_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET
#define MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET BCMI_HYPERLITE_XGXS_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET
#define MISC2r_FIFO_ERR_CYAf_GET BCMI_HYPERLITE_XGXS_MISC2r_FIFO_ERR_CYAf_GET
#define MISC2r_FIFO_ERR_CYAf_SET BCMI_HYPERLITE_XGXS_MISC2r_FIFO_ERR_CYAf_SET
#define MISC2r_AN_TXDISABLEPHASEf_GET BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLEPHASEf_GET
#define MISC2r_AN_TXDISABLEPHASEf_SET BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLEPHASEf_SET
#define MISC2r_AN_RXSEQSTARTDISf_GET BCMI_HYPERLITE_XGXS_MISC2r_AN_RXSEQSTARTDISf_GET
#define MISC2r_AN_RXSEQSTARTDISf_SET BCMI_HYPERLITE_XGXS_MISC2r_AN_RXSEQSTARTDISf_SET
#define MISC2r_AN_TXDISABLE_LNf_GET BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLE_LNf_GET
#define MISC2r_AN_TXDISABLE_LNf_SET BCMI_HYPERLITE_XGXS_MISC2r_AN_TXDISABLE_LNf_SET
#define MISC2r_AN_DEADTRAPf_GET BCMI_HYPERLITE_XGXS_MISC2r_AN_DEADTRAPf_GET
#define MISC2r_AN_DEADTRAPf_SET BCMI_HYPERLITE_XGXS_MISC2r_AN_DEADTRAPf_SET
#define READ_MISC2r BCMI_HYPERLITE_XGXS_READ_MISC2r
#define WRITE_MISC2r BCMI_HYPERLITE_XGXS_WRITE_MISC2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MISC2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PATGENCTRL
 * BLOCKS:   DIGITAL
 * REGADDR:  0x830a
 * DESC:     Pattern generator control register
 * SIZE:     32
 * FIELDS:
 *     SEL_PATTERN_GEN_DATA 
 *     RUN_PATTERN_GEN  
 *     SINGLE_PASS_MODE 
 *     PKT_SIZE         
 *     IPG_SELECT       
 *     EN_CRC_CHECKER_FRAGMENT_ERR_DET 
 *     SKIP_CRC         
 *     TX_ERR           
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr (0x0003001a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SIZE 4

/*
 * This structure should be used to declare and program PATGENCTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PATGENCTRLr_s {
	uint32_t v[1];
	uint32_t patgenctrl[1];
	uint32_t _patgenctrl;
} BCMI_HYPERLITE_XGXS_PATGENCTRLr_t;

#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_CLR(r) (r).patgenctrl[0] = 0
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SET(r,d) (r).patgenctrl[0] = d
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_GET(r) (r).patgenctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_RESERVED0f_GET(r) ((((r).patgenctrl[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_RESERVED0f_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_TX_ERRf_GET(r) ((((r).patgenctrl[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_TX_ERRf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SKIP_CRCf_GET(r) ((((r).patgenctrl[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SKIP_CRCf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET(r) ((((r).patgenctrl[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_IPG_SELECTf_GET(r) ((((r).patgenctrl[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_IPG_SELECTf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_PKT_SIZEf_GET(r) ((((r).patgenctrl[0]) >> 3) & 0x3f)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_PKT_SIZEf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x3f << 3)) | ((((uint32_t)f) & 0x3f) << 3))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SINGLE_PASS_MODEf_GET(r) ((((r).patgenctrl[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SINGLE_PASS_MODEf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_RUN_PATTERN_GENf_GET(r) ((((r).patgenctrl[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_RUN_PATTERN_GENf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SEL_PATTERN_GEN_DATAf_GET(r) (((r).patgenctrl[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENCTRLr_SEL_PATTERN_GEN_DATAf_SET(r,f) (r).patgenctrl[0]=(((r).patgenctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PATGENCTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PATGENCTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PATGENCTRLr,(_r._patgenctrl))
#define BCMI_HYPERLITE_XGXS_WRITE_PATGENCTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PATGENCTRLr,(_r._patgenctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATGENCTRLr BCMI_HYPERLITE_XGXS_PATGENCTRLr
#define PATGENCTRLr_SIZE BCMI_HYPERLITE_XGXS_PATGENCTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_PATGENCTRLr_t PATGENCTRLr_t;
#define PATGENCTRLr_CLR BCMI_HYPERLITE_XGXS_PATGENCTRLr_CLR
#define PATGENCTRLr_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SET
#define PATGENCTRLr_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_GET
#define PATGENCTRLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_RESERVED0f_GET
#define PATGENCTRLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_RESERVED0f_SET
#define PATGENCTRLr_TX_ERRf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_TX_ERRf_GET
#define PATGENCTRLr_TX_ERRf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_TX_ERRf_SET
#define PATGENCTRLr_SKIP_CRCf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SKIP_CRCf_GET
#define PATGENCTRLr_SKIP_CRCf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SKIP_CRCf_SET
#define PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET
#define PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET
#define PATGENCTRLr_IPG_SELECTf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_IPG_SELECTf_GET
#define PATGENCTRLr_IPG_SELECTf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_IPG_SELECTf_SET
#define PATGENCTRLr_PKT_SIZEf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_PKT_SIZEf_GET
#define PATGENCTRLr_PKT_SIZEf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_PKT_SIZEf_SET
#define PATGENCTRLr_SINGLE_PASS_MODEf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SINGLE_PASS_MODEf_GET
#define PATGENCTRLr_SINGLE_PASS_MODEf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SINGLE_PASS_MODEf_SET
#define PATGENCTRLr_RUN_PATTERN_GENf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_RUN_PATTERN_GENf_GET
#define PATGENCTRLr_RUN_PATTERN_GENf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_RUN_PATTERN_GENf_SET
#define PATGENCTRLr_SEL_PATTERN_GEN_DATAf_GET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SEL_PATTERN_GEN_DATAf_GET
#define PATGENCTRLr_SEL_PATTERN_GEN_DATAf_SET BCMI_HYPERLITE_XGXS_PATGENCTRLr_SEL_PATTERN_GEN_DATAf_SET
#define READ_PATGENCTRLr BCMI_HYPERLITE_XGXS_READ_PATGENCTRLr
#define WRITE_PATGENCTRLr BCMI_HYPERLITE_XGXS_WRITE_PATGENCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PATGENCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PATGENSTAT
 * BLOCKS:   DIGITAL
 * REGADDR:  0x830b
 * DESC:     Pattern generator status register
 * SIZE:     32
 * FIELDS:
 *     PATTERN_GEN_FSM  
 *     PATTERN_GEN_ACTIVE 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PATGENSTATr (0x0003001b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PATGENSTATr_SIZE 4

/*
 * This structure should be used to declare and program PATGENSTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PATGENSTATr_s {
	uint32_t v[1];
	uint32_t patgenstat[1];
	uint32_t _patgenstat;
} BCMI_HYPERLITE_XGXS_PATGENSTATr_t;

#define BCMI_HYPERLITE_XGXS_PATGENSTATr_CLR(r) (r).patgenstat[0] = 0
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_SET(r,d) (r).patgenstat[0] = d
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_GET(r) (r).patgenstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_RESERVED0f_GET(r) ((((r).patgenstat[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_RESERVED0f_SET(r,f) (r).patgenstat[0]=(((r).patgenstat[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_ACTIVEf_GET(r) ((((r).patgenstat[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_ACTIVEf_SET(r,f) (r).patgenstat[0]=(((r).patgenstat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_FSMf_GET(r) (((r).patgenstat[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_FSMf_SET(r,f) (r).patgenstat[0]=(((r).patgenstat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PATGENSTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PATGENSTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PATGENSTATr,(_r._patgenstat))
#define BCMI_HYPERLITE_XGXS_WRITE_PATGENSTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PATGENSTATr,(_r._patgenstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATGENSTATr BCMI_HYPERLITE_XGXS_PATGENSTATr
#define PATGENSTATr_SIZE BCMI_HYPERLITE_XGXS_PATGENSTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_PATGENSTATr_t PATGENSTATr_t;
#define PATGENSTATr_CLR BCMI_HYPERLITE_XGXS_PATGENSTATr_CLR
#define PATGENSTATr_SET BCMI_HYPERLITE_XGXS_PATGENSTATr_SET
#define PATGENSTATr_GET BCMI_HYPERLITE_XGXS_PATGENSTATr_GET
#define PATGENSTATr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PATGENSTATr_RESERVED0f_GET
#define PATGENSTATr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PATGENSTATr_RESERVED0f_SET
#define PATGENSTATr_PATTERN_GEN_ACTIVEf_GET BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_ACTIVEf_GET
#define PATGENSTATr_PATTERN_GEN_ACTIVEf_SET BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_ACTIVEf_SET
#define PATGENSTATr_PATTERN_GEN_FSMf_GET BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_FSMf_GET
#define PATGENSTATr_PATTERN_GEN_FSMf_SET BCMI_HYPERLITE_XGXS_PATGENSTATr_PATTERN_GEN_FSMf_SET
#define READ_PATGENSTATr BCMI_HYPERLITE_XGXS_READ_PATGENSTATr
#define WRITE_PATGENSTATr BCMI_HYPERLITE_XGXS_WRITE_PATGENSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PATGENSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TESTMODE
 * BLOCKS:   DIGITAL
 * REGADDR:  0x830c
 * DESC:     Test mode register
 * SIZE:     32
 * FIELDS:
 *     TEST_MONITOR_MODE1 
 *     TEST_MONITOR_MODE2 
 *     RESERVED0        
 *     CLEAR_PACKET_COUNTERS 
 *     DISABLE_RESET_CNT 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TESTMODEr (0x0003001c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TESTMODEr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODE.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TESTMODEr_s {
	uint32_t v[1];
	uint32_t testmode[1];
	uint32_t _testmode;
} BCMI_HYPERLITE_XGXS_TESTMODEr_t;

#define BCMI_HYPERLITE_XGXS_TESTMODEr_CLR(r) (r).testmode[0] = 0
#define BCMI_HYPERLITE_XGXS_TESTMODEr_SET(r,d) (r).testmode[0] = d
#define BCMI_HYPERLITE_XGXS_TESTMODEr_GET(r) (r).testmode[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TESTMODEr_DISABLE_RESET_CNTf_GET(r) ((((r).testmode[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTMODEr_DISABLE_RESET_CNTf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_TESTMODEr_CLEAR_PACKET_COUNTERSf_GET(r) ((((r).testmode[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_TESTMODEr_CLEAR_PACKET_COUNTERSf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_TESTMODEr_RESERVED0f_GET(r) ((((r).testmode[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_TESTMODEr_RESERVED0f_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE2f_GET(r) ((((r).testmode[0]) >> 6) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE2f_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE1f_GET(r) (((r).testmode[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE1f_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access TESTMODE.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TESTMODEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TESTMODEr,(_r._testmode))
#define BCMI_HYPERLITE_XGXS_WRITE_TESTMODEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TESTMODEr,(_r._testmode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODEr BCMI_HYPERLITE_XGXS_TESTMODEr
#define TESTMODEr_SIZE BCMI_HYPERLITE_XGXS_TESTMODEr_SIZE
typedef BCMI_HYPERLITE_XGXS_TESTMODEr_t TESTMODEr_t;
#define TESTMODEr_CLR BCMI_HYPERLITE_XGXS_TESTMODEr_CLR
#define TESTMODEr_SET BCMI_HYPERLITE_XGXS_TESTMODEr_SET
#define TESTMODEr_GET BCMI_HYPERLITE_XGXS_TESTMODEr_GET
#define TESTMODEr_DISABLE_RESET_CNTf_GET BCMI_HYPERLITE_XGXS_TESTMODEr_DISABLE_RESET_CNTf_GET
#define TESTMODEr_DISABLE_RESET_CNTf_SET BCMI_HYPERLITE_XGXS_TESTMODEr_DISABLE_RESET_CNTf_SET
#define TESTMODEr_CLEAR_PACKET_COUNTERSf_GET BCMI_HYPERLITE_XGXS_TESTMODEr_CLEAR_PACKET_COUNTERSf_GET
#define TESTMODEr_CLEAR_PACKET_COUNTERSf_SET BCMI_HYPERLITE_XGXS_TESTMODEr_CLEAR_PACKET_COUNTERSf_SET
#define TESTMODEr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_TESTMODEr_RESERVED0f_GET
#define TESTMODEr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_TESTMODEr_RESERVED0f_SET
#define TESTMODEr_TEST_MONITOR_MODE2f_GET BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE2f_GET
#define TESTMODEr_TEST_MONITOR_MODE2f_SET BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE2f_SET
#define TESTMODEr_TEST_MONITOR_MODE1f_GET BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE1f_GET
#define TESTMODEr_TEST_MONITOR_MODE1f_SET BCMI_HYPERLITE_XGXS_TESTMODEr_TEST_MONITOR_MODE1f_SET
#define READ_TESTMODEr BCMI_HYPERLITE_XGXS_READ_TESTMODEr
#define WRITE_TESTMODEr BCMI_HYPERLITE_XGXS_WRITE_TESTMODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TESTMODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TXPKTCNT
 * BLOCKS:   DIGITAL
 * REGADDR:  0x830d
 * DESC:     Tx packet count register
 * SIZE:     32
 * FIELDS:
 *     TXPKTCNT         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TXPKTCNTr (0x0003001d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_SIZE 4

/*
 * This structure should be used to declare and program TXPKTCNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TXPKTCNTr_s {
	uint32_t v[1];
	uint32_t txpktcnt[1];
	uint32_t _txpktcnt;
} BCMI_HYPERLITE_XGXS_TXPKTCNTr_t;

#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_CLR(r) (r).txpktcnt[0] = 0
#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_SET(r,d) (r).txpktcnt[0] = d
#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_GET(r) (r).txpktcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_TXPKTCNTf_GET(r) (((r).txpktcnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TXPKTCNTr_TXPKTCNTf_SET(r,f) (r).txpktcnt[0]=(((r).txpktcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXPKTCNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TXPKTCNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TXPKTCNTr,(_r._txpktcnt))
#define BCMI_HYPERLITE_XGXS_WRITE_TXPKTCNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TXPKTCNTr,(_r._txpktcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXPKTCNTr BCMI_HYPERLITE_XGXS_TXPKTCNTr
#define TXPKTCNTr_SIZE BCMI_HYPERLITE_XGXS_TXPKTCNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_TXPKTCNTr_t TXPKTCNTr_t;
#define TXPKTCNTr_CLR BCMI_HYPERLITE_XGXS_TXPKTCNTr_CLR
#define TXPKTCNTr_SET BCMI_HYPERLITE_XGXS_TXPKTCNTr_SET
#define TXPKTCNTr_GET BCMI_HYPERLITE_XGXS_TXPKTCNTr_GET
#define TXPKTCNTr_TXPKTCNTf_GET BCMI_HYPERLITE_XGXS_TXPKTCNTr_TXPKTCNTf_GET
#define TXPKTCNTr_TXPKTCNTf_SET BCMI_HYPERLITE_XGXS_TXPKTCNTr_TXPKTCNTf_SET
#define READ_TXPKTCNTr BCMI_HYPERLITE_XGXS_READ_TXPKTCNTr
#define WRITE_TXPKTCNTr BCMI_HYPERLITE_XGXS_WRITE_TXPKTCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TXPKTCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RXPKTCNT
 * BLOCKS:   DIGITAL
 * REGADDR:  0x830e
 * DESC:     Rx packet count register
 * SIZE:     32
 * FIELDS:
 *     RXPKTCNT         
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RXPKTCNTr (0x0003001e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_SIZE 4

/*
 * This structure should be used to declare and program RXPKTCNT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RXPKTCNTr_s {
	uint32_t v[1];
	uint32_t rxpktcnt[1];
	uint32_t _rxpktcnt;
} BCMI_HYPERLITE_XGXS_RXPKTCNTr_t;

#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_CLR(r) (r).rxpktcnt[0] = 0
#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_SET(r,d) (r).rxpktcnt[0] = d
#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_GET(r) (r).rxpktcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_RXPKTCNTf_GET(r) (((r).rxpktcnt[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_RXPKTCNTr_RXPKTCNTf_SET(r,f) (r).rxpktcnt[0]=(((r).rxpktcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXPKTCNT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RXPKTCNTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RXPKTCNTr,(_r._rxpktcnt))
#define BCMI_HYPERLITE_XGXS_WRITE_RXPKTCNTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RXPKTCNTr,(_r._rxpktcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXPKTCNTr BCMI_HYPERLITE_XGXS_RXPKTCNTr
#define RXPKTCNTr_SIZE BCMI_HYPERLITE_XGXS_RXPKTCNTr_SIZE
typedef BCMI_HYPERLITE_XGXS_RXPKTCNTr_t RXPKTCNTr_t;
#define RXPKTCNTr_CLR BCMI_HYPERLITE_XGXS_RXPKTCNTr_CLR
#define RXPKTCNTr_SET BCMI_HYPERLITE_XGXS_RXPKTCNTr_SET
#define RXPKTCNTr_GET BCMI_HYPERLITE_XGXS_RXPKTCNTr_GET
#define RXPKTCNTr_RXPKTCNTf_GET BCMI_HYPERLITE_XGXS_RXPKTCNTr_RXPKTCNTf_GET
#define RXPKTCNTr_RXPKTCNTf_SET BCMI_HYPERLITE_XGXS_RXPKTCNTr_RXPKTCNTf_SET
#define READ_RXPKTCNTr BCMI_HYPERLITE_XGXS_READ_RXPKTCNTr
#define WRITE_RXPKTCNTr BCMI_HYPERLITE_XGXS_WRITE_RXPKTCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RXPKTCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SERDESID0
 * BLOCKS:   TEST
 * REGADDR:  0x8310
 * DESC:     Serdes ID 0 register
 * SIZE:     32
 * FIELDS:
 *     MODEL_NUMBER     
 *     TECH_PROC        
 *     BONDING          
 *     REV_NUMBER       
 *     REV_LETTER       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SERDESID0r (0x00031010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SERDESID0r_SIZE 4

/*
 * This structure should be used to declare and program SERDESID0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SERDESID0r_s {
	uint32_t v[1];
	uint32_t serdesid0[1];
	uint32_t _serdesid0;
} BCMI_HYPERLITE_XGXS_SERDESID0r_t;

#define BCMI_HYPERLITE_XGXS_SERDESID0r_CLR(r) (r).serdesid0[0] = 0
#define BCMI_HYPERLITE_XGXS_SERDESID0r_SET(r,d) (r).serdesid0[0] = d
#define BCMI_HYPERLITE_XGXS_SERDESID0r_GET(r) (r).serdesid0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SERDESID0r_REV_LETTERf_GET(r) ((((r).serdesid0[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SERDESID0r_REV_LETTERf_SET(r,f) (r).serdesid0[0]=(((r).serdesid0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SERDESID0r_REV_NUMBERf_GET(r) ((((r).serdesid0[0]) >> 11) & 0x7)
#define BCMI_HYPERLITE_XGXS_SERDESID0r_REV_NUMBERf_SET(r,f) (r).serdesid0[0]=(((r).serdesid0[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_HYPERLITE_XGXS_SERDESID0r_BONDINGf_GET(r) ((((r).serdesid0[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_SERDESID0r_BONDINGf_SET(r,f) (r).serdesid0[0]=(((r).serdesid0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_SERDESID0r_TECH_PROCf_GET(r) ((((r).serdesid0[0]) >> 6) & 0x7)
#define BCMI_HYPERLITE_XGXS_SERDESID0r_TECH_PROCf_SET(r,f) (r).serdesid0[0]=(((r).serdesid0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_HYPERLITE_XGXS_SERDESID0r_MODEL_NUMBERf_GET(r) (((r).serdesid0[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_SERDESID0r_MODEL_NUMBERf_SET(r,f) (r).serdesid0[0]=(((r).serdesid0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access SERDESID0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SERDESID0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SERDESID0r,(_r._serdesid0))
#define BCMI_HYPERLITE_XGXS_WRITE_SERDESID0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SERDESID0r,(_r._serdesid0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDESID0r BCMI_HYPERLITE_XGXS_SERDESID0r
#define SERDESID0r_SIZE BCMI_HYPERLITE_XGXS_SERDESID0r_SIZE
typedef BCMI_HYPERLITE_XGXS_SERDESID0r_t SERDESID0r_t;
#define SERDESID0r_CLR BCMI_HYPERLITE_XGXS_SERDESID0r_CLR
#define SERDESID0r_SET BCMI_HYPERLITE_XGXS_SERDESID0r_SET
#define SERDESID0r_GET BCMI_HYPERLITE_XGXS_SERDESID0r_GET
#define SERDESID0r_REV_LETTERf_GET BCMI_HYPERLITE_XGXS_SERDESID0r_REV_LETTERf_GET
#define SERDESID0r_REV_LETTERf_SET BCMI_HYPERLITE_XGXS_SERDESID0r_REV_LETTERf_SET
#define SERDESID0r_REV_NUMBERf_GET BCMI_HYPERLITE_XGXS_SERDESID0r_REV_NUMBERf_GET
#define SERDESID0r_REV_NUMBERf_SET BCMI_HYPERLITE_XGXS_SERDESID0r_REV_NUMBERf_SET
#define SERDESID0r_BONDINGf_GET BCMI_HYPERLITE_XGXS_SERDESID0r_BONDINGf_GET
#define SERDESID0r_BONDINGf_SET BCMI_HYPERLITE_XGXS_SERDESID0r_BONDINGf_SET
#define SERDESID0r_TECH_PROCf_GET BCMI_HYPERLITE_XGXS_SERDESID0r_TECH_PROCf_GET
#define SERDESID0r_TECH_PROCf_SET BCMI_HYPERLITE_XGXS_SERDESID0r_TECH_PROCf_SET
#define SERDESID0r_MODEL_NUMBERf_GET BCMI_HYPERLITE_XGXS_SERDESID0r_MODEL_NUMBERf_GET
#define SERDESID0r_MODEL_NUMBERf_SET BCMI_HYPERLITE_XGXS_SERDESID0r_MODEL_NUMBERf_SET
#define READ_SERDESID0r BCMI_HYPERLITE_XGXS_READ_SERDESID0r
#define WRITE_SERDESID0r BCMI_HYPERLITE_XGXS_WRITE_SERDESID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SERDESID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SERDESID1
 * BLOCKS:   TEST
 * REGADDR:  0x8311
 * DESC:     Serdes ID 1 register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     SCRAMBLER        
 *     BRCM_64B66B      
 *     PCIE_II          
 *     PCIE             
 *     HIGIGII          
 *     HIGIG            
 *     CL48             
 *     CL36             
 *     CL73             
 *     CL37             
 *     MULTIPLICITY     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SERDESID1r (0x00031011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SERDESID1r_SIZE 4

/*
 * This structure should be used to declare and program SERDESID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SERDESID1r_s {
	uint32_t v[1];
	uint32_t serdesid1[1];
	uint32_t _serdesid1;
} BCMI_HYPERLITE_XGXS_SERDESID1r_t;

#define BCMI_HYPERLITE_XGXS_SERDESID1r_CLR(r) (r).serdesid1[0] = 0
#define BCMI_HYPERLITE_XGXS_SERDESID1r_SET(r,d) (r).serdesid1[0] = d
#define BCMI_HYPERLITE_XGXS_SERDESID1r_GET(r) (r).serdesid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SERDESID1r_MULTIPLICITYf_GET(r) ((((r).serdesid1[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_MULTIPLICITYf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL37f_GET(r) ((((r).serdesid1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL37f_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL73f_GET(r) ((((r).serdesid1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL73f_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL36f_GET(r) ((((r).serdesid1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL36f_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL48f_GET(r) ((((r).serdesid1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_CL48f_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGf_GET(r) ((((r).serdesid1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGIIf_GET(r) ((((r).serdesid1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGIIf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_PCIEf_GET(r) ((((r).serdesid1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_PCIEf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_PCIE_IIf_GET(r) ((((r).serdesid1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_PCIE_IIf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_BRCM_64B66Bf_GET(r) ((((r).serdesid1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_BRCM_64B66Bf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_SCRAMBLERf_GET(r) ((((r).serdesid1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_SCRAMBLERf_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SERDESID1r_RESERVED0f_GET(r) (((r).serdesid1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_SERDESID1r_RESERVED0f_SET(r,f) (r).serdesid1[0]=(((r).serdesid1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access SERDESID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SERDESID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SERDESID1r,(_r._serdesid1))
#define BCMI_HYPERLITE_XGXS_WRITE_SERDESID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SERDESID1r,(_r._serdesid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDESID1r BCMI_HYPERLITE_XGXS_SERDESID1r
#define SERDESID1r_SIZE BCMI_HYPERLITE_XGXS_SERDESID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_SERDESID1r_t SERDESID1r_t;
#define SERDESID1r_CLR BCMI_HYPERLITE_XGXS_SERDESID1r_CLR
#define SERDESID1r_SET BCMI_HYPERLITE_XGXS_SERDESID1r_SET
#define SERDESID1r_GET BCMI_HYPERLITE_XGXS_SERDESID1r_GET
#define SERDESID1r_MULTIPLICITYf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_MULTIPLICITYf_GET
#define SERDESID1r_MULTIPLICITYf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_MULTIPLICITYf_SET
#define SERDESID1r_CL37f_GET BCMI_HYPERLITE_XGXS_SERDESID1r_CL37f_GET
#define SERDESID1r_CL37f_SET BCMI_HYPERLITE_XGXS_SERDESID1r_CL37f_SET
#define SERDESID1r_CL73f_GET BCMI_HYPERLITE_XGXS_SERDESID1r_CL73f_GET
#define SERDESID1r_CL73f_SET BCMI_HYPERLITE_XGXS_SERDESID1r_CL73f_SET
#define SERDESID1r_CL36f_GET BCMI_HYPERLITE_XGXS_SERDESID1r_CL36f_GET
#define SERDESID1r_CL36f_SET BCMI_HYPERLITE_XGXS_SERDESID1r_CL36f_SET
#define SERDESID1r_CL48f_GET BCMI_HYPERLITE_XGXS_SERDESID1r_CL48f_GET
#define SERDESID1r_CL48f_SET BCMI_HYPERLITE_XGXS_SERDESID1r_CL48f_SET
#define SERDESID1r_HIGIGf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGf_GET
#define SERDESID1r_HIGIGf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGf_SET
#define SERDESID1r_HIGIGIIf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGIIf_GET
#define SERDESID1r_HIGIGIIf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_HIGIGIIf_SET
#define SERDESID1r_PCIEf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_PCIEf_GET
#define SERDESID1r_PCIEf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_PCIEf_SET
#define SERDESID1r_PCIE_IIf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_PCIE_IIf_GET
#define SERDESID1r_PCIE_IIf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_PCIE_IIf_SET
#define SERDESID1r_BRCM_64B66Bf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_BRCM_64B66Bf_GET
#define SERDESID1r_BRCM_64B66Bf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_BRCM_64B66Bf_SET
#define SERDESID1r_SCRAMBLERf_GET BCMI_HYPERLITE_XGXS_SERDESID1r_SCRAMBLERf_GET
#define SERDESID1r_SCRAMBLERf_SET BCMI_HYPERLITE_XGXS_SERDESID1r_SCRAMBLERf_SET
#define SERDESID1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SERDESID1r_RESERVED0f_GET
#define SERDESID1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SERDESID1r_RESERVED0f_SET
#define READ_SERDESID1r BCMI_HYPERLITE_XGXS_READ_SERDESID1r
#define WRITE_SERDESID1r BCMI_HYPERLITE_XGXS_WRITE_SERDESID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SERDESID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SERDESID2
 * BLOCKS:   TEST
 * REGADDR:  0x8312
 * DESC:     Serdes ID 2 register
 * SIZE:     32
 * FIELDS:
 *     DR_10M_SL        
 *     DR_100M_SL       
 *     DR_1G_SL         
 *     DR_2P5G_SL       
 *     DR_5G_4L         
 *     DR_6G_4L         
 *     DR_10G_4L        
 *     DR_12G_4L        
 *     DR_12_5G_4L      
 *     DR_13G_4L        
 *     DR_15G_4L        
 *     DR_16G_4L        
 *     DR_20G_4L        
 *     DR_21G_4L        
 *     DR_25G_4L        
 *     ID3PRESENT       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SERDESID2r (0x00031012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SERDESID2r_SIZE 4

/*
 * This structure should be used to declare and program SERDESID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SERDESID2r_s {
	uint32_t v[1];
	uint32_t serdesid2[1];
	uint32_t _serdesid2;
} BCMI_HYPERLITE_XGXS_SERDESID2r_t;

#define BCMI_HYPERLITE_XGXS_SERDESID2r_CLR(r) (r).serdesid2[0] = 0
#define BCMI_HYPERLITE_XGXS_SERDESID2r_SET(r,d) (r).serdesid2[0] = d
#define BCMI_HYPERLITE_XGXS_SERDESID2r_GET(r) (r).serdesid2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SERDESID2r_ID3PRESENTf_GET(r) ((((r).serdesid2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_ID3PRESENTf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_25G_4Lf_GET(r) ((((r).serdesid2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_25G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_21G_4Lf_GET(r) ((((r).serdesid2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_21G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_20G_4Lf_GET(r) ((((r).serdesid2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_20G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_16G_4Lf_GET(r) ((((r).serdesid2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_16G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_15G_4Lf_GET(r) ((((r).serdesid2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_15G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_13G_4Lf_GET(r) ((((r).serdesid2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_13G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12_5G_4Lf_GET(r) ((((r).serdesid2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12_5G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12G_4Lf_GET(r) ((((r).serdesid2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10G_4Lf_GET(r) ((((r).serdesid2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_6G_4Lf_GET(r) ((((r).serdesid2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_6G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_5G_4Lf_GET(r) ((((r).serdesid2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_5G_4Lf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_2P5G_SLf_GET(r) ((((r).serdesid2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_2P5G_SLf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_1G_SLf_GET(r) ((((r).serdesid2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_1G_SLf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_100M_SLf_GET(r) ((((r).serdesid2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_100M_SLf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10M_SLf_GET(r) (((r).serdesid2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10M_SLf_SET(r,f) (r).serdesid2[0]=(((r).serdesid2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SERDESID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SERDESID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SERDESID2r,(_r._serdesid2))
#define BCMI_HYPERLITE_XGXS_WRITE_SERDESID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SERDESID2r,(_r._serdesid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDESID2r BCMI_HYPERLITE_XGXS_SERDESID2r
#define SERDESID2r_SIZE BCMI_HYPERLITE_XGXS_SERDESID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_SERDESID2r_t SERDESID2r_t;
#define SERDESID2r_CLR BCMI_HYPERLITE_XGXS_SERDESID2r_CLR
#define SERDESID2r_SET BCMI_HYPERLITE_XGXS_SERDESID2r_SET
#define SERDESID2r_GET BCMI_HYPERLITE_XGXS_SERDESID2r_GET
#define SERDESID2r_ID3PRESENTf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_ID3PRESENTf_GET
#define SERDESID2r_ID3PRESENTf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_ID3PRESENTf_SET
#define SERDESID2r_DR_25G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_25G_4Lf_GET
#define SERDESID2r_DR_25G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_25G_4Lf_SET
#define SERDESID2r_DR_21G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_21G_4Lf_GET
#define SERDESID2r_DR_21G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_21G_4Lf_SET
#define SERDESID2r_DR_20G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_20G_4Lf_GET
#define SERDESID2r_DR_20G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_20G_4Lf_SET
#define SERDESID2r_DR_16G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_16G_4Lf_GET
#define SERDESID2r_DR_16G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_16G_4Lf_SET
#define SERDESID2r_DR_15G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_15G_4Lf_GET
#define SERDESID2r_DR_15G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_15G_4Lf_SET
#define SERDESID2r_DR_13G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_13G_4Lf_GET
#define SERDESID2r_DR_13G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_13G_4Lf_SET
#define SERDESID2r_DR_12_5G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12_5G_4Lf_GET
#define SERDESID2r_DR_12_5G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12_5G_4Lf_SET
#define SERDESID2r_DR_12G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12G_4Lf_GET
#define SERDESID2r_DR_12G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_12G_4Lf_SET
#define SERDESID2r_DR_10G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10G_4Lf_GET
#define SERDESID2r_DR_10G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10G_4Lf_SET
#define SERDESID2r_DR_6G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_6G_4Lf_GET
#define SERDESID2r_DR_6G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_6G_4Lf_SET
#define SERDESID2r_DR_5G_4Lf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_5G_4Lf_GET
#define SERDESID2r_DR_5G_4Lf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_5G_4Lf_SET
#define SERDESID2r_DR_2P5G_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_2P5G_SLf_GET
#define SERDESID2r_DR_2P5G_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_2P5G_SLf_SET
#define SERDESID2r_DR_1G_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_1G_SLf_GET
#define SERDESID2r_DR_1G_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_1G_SLf_SET
#define SERDESID2r_DR_100M_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_100M_SLf_GET
#define SERDESID2r_DR_100M_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_100M_SLf_SET
#define SERDESID2r_DR_10M_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10M_SLf_GET
#define SERDESID2r_DR_10M_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID2r_DR_10M_SLf_SET
#define READ_SERDESID2r BCMI_HYPERLITE_XGXS_READ_SERDESID2r
#define WRITE_SERDESID2r BCMI_HYPERLITE_XGXS_WRITE_SERDESID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SERDESID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SERDESID3
 * BLOCKS:   TEST
 * REGADDR:  0x8313
 * DESC:     Serdes ID 3 register
 * SIZE:     32
 * FIELDS:
 *     DR_100FX         
 *     DR_2000_SL       
 *     DR_4000_SL       
 *     DR_5000_SL       
 *     DR_6400_SL       
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SERDESID3r (0x00031013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SERDESID3r_SIZE 4

/*
 * This structure should be used to declare and program SERDESID3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SERDESID3r_s {
	uint32_t v[1];
	uint32_t serdesid3[1];
	uint32_t _serdesid3;
} BCMI_HYPERLITE_XGXS_SERDESID3r_t;

#define BCMI_HYPERLITE_XGXS_SERDESID3r_CLR(r) (r).serdesid3[0] = 0
#define BCMI_HYPERLITE_XGXS_SERDESID3r_SET(r,d) (r).serdesid3[0] = d
#define BCMI_HYPERLITE_XGXS_SERDESID3r_GET(r) (r).serdesid3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SERDESID3r_RESERVED0f_GET(r) ((((r).serdesid3[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_RESERVED0f_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_6400_SLf_GET(r) ((((r).serdesid3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_6400_SLf_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_5000_SLf_GET(r) ((((r).serdesid3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_5000_SLf_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_4000_SLf_GET(r) ((((r).serdesid3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_4000_SLf_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_2000_SLf_GET(r) ((((r).serdesid3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_2000_SLf_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_100FXf_GET(r) (((r).serdesid3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SERDESID3r_DR_100FXf_SET(r,f) (r).serdesid3[0]=(((r).serdesid3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SERDESID3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SERDESID3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SERDESID3r,(_r._serdesid3))
#define BCMI_HYPERLITE_XGXS_WRITE_SERDESID3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SERDESID3r,(_r._serdesid3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDESID3r BCMI_HYPERLITE_XGXS_SERDESID3r
#define SERDESID3r_SIZE BCMI_HYPERLITE_XGXS_SERDESID3r_SIZE
typedef BCMI_HYPERLITE_XGXS_SERDESID3r_t SERDESID3r_t;
#define SERDESID3r_CLR BCMI_HYPERLITE_XGXS_SERDESID3r_CLR
#define SERDESID3r_SET BCMI_HYPERLITE_XGXS_SERDESID3r_SET
#define SERDESID3r_GET BCMI_HYPERLITE_XGXS_SERDESID3r_GET
#define SERDESID3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SERDESID3r_RESERVED0f_GET
#define SERDESID3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SERDESID3r_RESERVED0f_SET
#define SERDESID3r_DR_6400_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_6400_SLf_GET
#define SERDESID3r_DR_6400_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_6400_SLf_SET
#define SERDESID3r_DR_5000_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_5000_SLf_GET
#define SERDESID3r_DR_5000_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_5000_SLf_SET
#define SERDESID3r_DR_4000_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_4000_SLf_GET
#define SERDESID3r_DR_4000_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_4000_SLf_SET
#define SERDESID3r_DR_2000_SLf_GET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_2000_SLf_GET
#define SERDESID3r_DR_2000_SLf_SET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_2000_SLf_SET
#define SERDESID3r_DR_100FXf_GET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_100FXf_GET
#define SERDESID3r_DR_100FXf_SET BCMI_HYPERLITE_XGXS_SERDESID3r_DR_100FXf_SET
#define READ_SERDESID3r BCMI_HYPERLITE_XGXS_READ_SERDESID3r
#define WRITE_SERDESID3r BCMI_HYPERLITE_XGXS_WRITE_SERDESID3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SERDESID3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_0
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8320
 * DESC:     AN lost link count time, bits 15:0
 * SIZE:     32
 * FIELDS:
 *     AN_LOSTLINK_CNT  
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r (0x00032010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_s {
	uint32_t v[1];
	uint32_t digctl_3_0[1];
	uint32_t _digctl_3_0;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_CLR(r) (r).digctl_3_0[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_SET(r,d) (r).digctl_3_0[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_GET(r) (r).digctl_3_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET(r) (((r).digctl_3_0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET(r,f) (r).digctl_3_0[0]=(((r).digctl_3_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_0r,(_r._digctl_3_0))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_0r,(_r._digctl_3_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_0r BCMI_HYPERLITE_XGXS_DIGCTL_3_0r
#define DIGCTL_3_0r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_t DIGCTL_3_0r_t;
#define DIGCTL_3_0r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_CLR
#define DIGCTL_3_0r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_SET
#define DIGCTL_3_0r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_GET
#define DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET
#define DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET
#define READ_DIGCTL_3_0r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_0r
#define WRITE_DIGCTL_3_0r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_1
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8321
 * DESC:     AN switch count time, bits 15:0
 * SIZE:     32
 * FIELDS:
 *     AN_SWITCH_CNT    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r (0x00032011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_s {
	uint32_t v[1];
	uint32_t digctl_3_1[1];
	uint32_t _digctl_3_1;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_CLR(r) (r).digctl_3_1[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_SET(r,d) (r).digctl_3_1[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_GET(r) (r).digctl_3_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_AN_SWITCH_CNTf_GET(r) (((r).digctl_3_1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_AN_SWITCH_CNTf_SET(r,f) (r).digctl_3_1[0]=(((r).digctl_3_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_1r,(_r._digctl_3_1))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_1r,(_r._digctl_3_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_1r BCMI_HYPERLITE_XGXS_DIGCTL_3_1r
#define DIGCTL_3_1r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_t DIGCTL_3_1r_t;
#define DIGCTL_3_1r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_CLR
#define DIGCTL_3_1r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_SET
#define DIGCTL_3_1r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_GET
#define DIGCTL_3_1r_AN_SWITCH_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_AN_SWITCH_CNTf_GET
#define DIGCTL_3_1r_AN_SWITCH_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_1r_AN_SWITCH_CNTf_SET
#define READ_DIGCTL_3_1r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_1r
#define WRITE_DIGCTL_3_1r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_2
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8322
 * DESC:     AN link count time, bits 15:0
 * SIZE:     32
 * FIELDS:
 *     AN_LINK_CNT      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r (0x00032012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_s {
	uint32_t v[1];
	uint32_t digctl_3_2[1];
	uint32_t _digctl_3_2;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_CLR(r) (r).digctl_3_2[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_SET(r,d) (r).digctl_3_2[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_GET(r) (r).digctl_3_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_AN_LINK_CNTf_GET(r) (((r).digctl_3_2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_AN_LINK_CNTf_SET(r,f) (r).digctl_3_2[0]=(((r).digctl_3_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_2r,(_r._digctl_3_2))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_2r,(_r._digctl_3_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_2r BCMI_HYPERLITE_XGXS_DIGCTL_3_2r
#define DIGCTL_3_2r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_t DIGCTL_3_2r_t;
#define DIGCTL_3_2r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_CLR
#define DIGCTL_3_2r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_SET
#define DIGCTL_3_2r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_GET
#define DIGCTL_3_2r_AN_LINK_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_AN_LINK_CNTf_GET
#define DIGCTL_3_2r_AN_LINK_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_2r_AN_LINK_CNTf_SET
#define READ_DIGCTL_3_2r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_2r
#define WRITE_DIGCTL_3_2r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_3
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8323
 * DESC:     AN switch count & link count time, bits 23:16
 * SIZE:     32
 * FIELDS:
 *     AN_LINK_CNT2     
 *     AN_SWITCH_CNT2   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r (0x00032013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_s {
	uint32_t v[1];
	uint32_t digctl_3_3[1];
	uint32_t _digctl_3_3;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_CLR(r) (r).digctl_3_3[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_SET(r,d) (r).digctl_3_3[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_GET(r) (r).digctl_3_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_SWITCH_CNT2f_GET(r) ((((r).digctl_3_3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_SWITCH_CNT2f_SET(r,f) (r).digctl_3_3[0]=(((r).digctl_3_3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_LINK_CNT2f_GET(r) (((r).digctl_3_3[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_LINK_CNT2f_SET(r,f) (r).digctl_3_3[0]=(((r).digctl_3_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access DIGCTL_3_3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_3r,(_r._digctl_3_3))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_3r,(_r._digctl_3_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_3r BCMI_HYPERLITE_XGXS_DIGCTL_3_3r
#define DIGCTL_3_3r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_t DIGCTL_3_3r_t;
#define DIGCTL_3_3r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_CLR
#define DIGCTL_3_3r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_SET
#define DIGCTL_3_3r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_GET
#define DIGCTL_3_3r_AN_SWITCH_CNT2f_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_SWITCH_CNT2f_GET
#define DIGCTL_3_3r_AN_SWITCH_CNT2f_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_SWITCH_CNT2f_SET
#define DIGCTL_3_3r_AN_LINK_CNT2f_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_LINK_CNT2f_GET
#define DIGCTL_3_3r_AN_LINK_CNT2f_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_3r_AN_LINK_CNT2f_SET
#define READ_DIGCTL_3_3r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_3r
#define WRITE_DIGCTL_3_3r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_4
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8324
 * DESC:     Over 1G message page number & AN fail count timer
 * SIZE:     32
 * FIELDS:
 *     AN_FAIL_CNT      
 *     NO_FAIL_CNT      
 *     MP_NUMBER        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r (0x00032014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_s {
	uint32_t v[1];
	uint32_t digctl_3_4[1];
	uint32_t _digctl_3_4;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_CLR(r) (r).digctl_3_4[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_SET(r,d) (r).digctl_3_4[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_GET(r) (r).digctl_3_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_MP_NUMBERf_GET(r) ((((r).digctl_3_4[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_MP_NUMBERf_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_NO_FAIL_CNTf_GET(r) ((((r).digctl_3_4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_NO_FAIL_CNTf_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_AN_FAIL_CNTf_GET(r) (((r).digctl_3_4[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_AN_FAIL_CNTf_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DIGCTL_3_4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_4r,(_r._digctl_3_4))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_4r,(_r._digctl_3_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_4r BCMI_HYPERLITE_XGXS_DIGCTL_3_4r
#define DIGCTL_3_4r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_t DIGCTL_3_4r_t;
#define DIGCTL_3_4r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_CLR
#define DIGCTL_3_4r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_SET
#define DIGCTL_3_4r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_GET
#define DIGCTL_3_4r_MP_NUMBERf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_MP_NUMBERf_GET
#define DIGCTL_3_4r_MP_NUMBERf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_MP_NUMBERf_SET
#define DIGCTL_3_4r_NO_FAIL_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_NO_FAIL_CNTf_GET
#define DIGCTL_3_4r_NO_FAIL_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_NO_FAIL_CNTf_SET
#define DIGCTL_3_4r_AN_FAIL_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_AN_FAIL_CNTf_GET
#define DIGCTL_3_4r_AN_FAIL_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_4r_AN_FAIL_CNTf_SET
#define READ_DIGCTL_3_4r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_4r
#define WRITE_DIGCTL_3_4r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_5
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8325
 * DESC:     AN ignore link count time, bits 15:0
 * SIZE:     32
 * FIELDS:
 *     AN_IGNORELINK_CNT 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r (0x00032015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_5.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_s {
	uint32_t v[1];
	uint32_t digctl_3_5[1];
	uint32_t _digctl_3_5;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_CLR(r) (r).digctl_3_5[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_SET(r,d) (r).digctl_3_5[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_GET(r) (r).digctl_3_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET(r) (((r).digctl_3_5[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET(r,f) (r).digctl_3_5[0]=(((r).digctl_3_5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_5.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_5r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_5r,(_r._digctl_3_5))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_5r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_5r,(_r._digctl_3_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_5r BCMI_HYPERLITE_XGXS_DIGCTL_3_5r
#define DIGCTL_3_5r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_t DIGCTL_3_5r_t;
#define DIGCTL_3_5r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_CLR
#define DIGCTL_3_5r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_SET
#define DIGCTL_3_5r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_GET
#define DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET
#define DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET
#define READ_DIGCTL_3_5r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_5r
#define WRITE_DIGCTL_3_5r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DIGCTL_3_6
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8326
 * DESC:     AN lost link count & ignore link count time, bits 23:16
 * SIZE:     32
 * FIELDS:
 *     AN_INGORELINK_CNT2 
 *     AN_LOSTLINK_CNT2 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r (0x00032016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_6.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_s {
	uint32_t v[1];
	uint32_t digctl_3_6[1];
	uint32_t _digctl_3_6;
} BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_t;

#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_CLR(r) (r).digctl_3_6[0] = 0
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_SET(r,d) (r).digctl_3_6[0] = d
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_GET(r) (r).digctl_3_6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_LOSTLINK_CNT2f_GET(r) ((((r).digctl_3_6[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_LOSTLINK_CNT2f_SET(r,f) (r).digctl_3_6[0]=(((r).digctl_3_6[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_INGORELINK_CNT2f_GET(r) (((r).digctl_3_6[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_INGORELINK_CNT2f_SET(r,f) (r).digctl_3_6[0]=(((r).digctl_3_6[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access DIGCTL_3_6.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_6r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_6r,(_r._digctl_3_6))
#define BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_6r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DIGCTL_3_6r,(_r._digctl_3_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_6r BCMI_HYPERLITE_XGXS_DIGCTL_3_6r
#define DIGCTL_3_6r_SIZE BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_SIZE
typedef BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_t DIGCTL_3_6r_t;
#define DIGCTL_3_6r_CLR BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_CLR
#define DIGCTL_3_6r_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_SET
#define DIGCTL_3_6r_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_GET
#define DIGCTL_3_6r_AN_LOSTLINK_CNT2f_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_LOSTLINK_CNT2f_GET
#define DIGCTL_3_6r_AN_LOSTLINK_CNT2f_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_LOSTLINK_CNT2f_SET
#define DIGCTL_3_6r_AN_INGORELINK_CNT2f_GET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_INGORELINK_CNT2f_GET
#define DIGCTL_3_6r_AN_INGORELINK_CNT2f_SET BCMI_HYPERLITE_XGXS_DIGCTL_3_6r_AN_INGORELINK_CNT2f_SET
#define READ_DIGCTL_3_6r BCMI_HYPERLITE_XGXS_READ_DIGCTL_3_6r
#define WRITE_DIGCTL_3_6r BCMI_HYPERLITE_XGXS_WRITE_DIGCTL_3_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DIGCTL_3_6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TPOUT_1
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8327
 * DESC:     Test port out bits 15:0, tpout[15:0]
 * SIZE:     32
 * FIELDS:
 *     TPOUT1           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TPOUT_1r (0x00032017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TPOUT_1r_SIZE 4

/*
 * This structure should be used to declare and program TPOUT_1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TPOUT_1r_s {
	uint32_t v[1];
	uint32_t tpout_1[1];
	uint32_t _tpout_1;
} BCMI_HYPERLITE_XGXS_TPOUT_1r_t;

#define BCMI_HYPERLITE_XGXS_TPOUT_1r_CLR(r) (r).tpout_1[0] = 0
#define BCMI_HYPERLITE_XGXS_TPOUT_1r_SET(r,d) (r).tpout_1[0] = d
#define BCMI_HYPERLITE_XGXS_TPOUT_1r_GET(r) (r).tpout_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TPOUT_1r_TPOUT1f_GET(r) (((r).tpout_1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TPOUT_1r_TPOUT1f_SET(r,f) (r).tpout_1[0]=(((r).tpout_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TPOUT_1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TPOUT_1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TPOUT_1r,(_r._tpout_1))
#define BCMI_HYPERLITE_XGXS_WRITE_TPOUT_1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TPOUT_1r,(_r._tpout_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TPOUT_1r BCMI_HYPERLITE_XGXS_TPOUT_1r
#define TPOUT_1r_SIZE BCMI_HYPERLITE_XGXS_TPOUT_1r_SIZE
typedef BCMI_HYPERLITE_XGXS_TPOUT_1r_t TPOUT_1r_t;
#define TPOUT_1r_CLR BCMI_HYPERLITE_XGXS_TPOUT_1r_CLR
#define TPOUT_1r_SET BCMI_HYPERLITE_XGXS_TPOUT_1r_SET
#define TPOUT_1r_GET BCMI_HYPERLITE_XGXS_TPOUT_1r_GET
#define TPOUT_1r_TPOUT1f_GET BCMI_HYPERLITE_XGXS_TPOUT_1r_TPOUT1f_GET
#define TPOUT_1r_TPOUT1f_SET BCMI_HYPERLITE_XGXS_TPOUT_1r_TPOUT1f_SET
#define READ_TPOUT_1r BCMI_HYPERLITE_XGXS_READ_TPOUT_1r
#define WRITE_TPOUT_1r BCMI_HYPERLITE_XGXS_WRITE_TPOUT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TPOUT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  TPOUT_2
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8328
 * DESC:     Test port out bits 23:8, tpout[23:8]
 * SIZE:     32
 * FIELDS:
 *     TPOUT2           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_TPOUT_2r (0x00032018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_TPOUT_2r_SIZE 4

/*
 * This structure should be used to declare and program TPOUT_2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_TPOUT_2r_s {
	uint32_t v[1];
	uint32_t tpout_2[1];
	uint32_t _tpout_2;
} BCMI_HYPERLITE_XGXS_TPOUT_2r_t;

#define BCMI_HYPERLITE_XGXS_TPOUT_2r_CLR(r) (r).tpout_2[0] = 0
#define BCMI_HYPERLITE_XGXS_TPOUT_2r_SET(r,d) (r).tpout_2[0] = d
#define BCMI_HYPERLITE_XGXS_TPOUT_2r_GET(r) (r).tpout_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_TPOUT_2r_TPOUT2f_GET(r) (((r).tpout_2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_TPOUT_2r_TPOUT2f_SET(r,f) (r).tpout_2[0]=(((r).tpout_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TPOUT_2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_TPOUT_2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_TPOUT_2r,(_r._tpout_2))
#define BCMI_HYPERLITE_XGXS_WRITE_TPOUT_2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_TPOUT_2r,(_r._tpout_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TPOUT_2r BCMI_HYPERLITE_XGXS_TPOUT_2r
#define TPOUT_2r_SIZE BCMI_HYPERLITE_XGXS_TPOUT_2r_SIZE
typedef BCMI_HYPERLITE_XGXS_TPOUT_2r_t TPOUT_2r_t;
#define TPOUT_2r_CLR BCMI_HYPERLITE_XGXS_TPOUT_2r_CLR
#define TPOUT_2r_SET BCMI_HYPERLITE_XGXS_TPOUT_2r_SET
#define TPOUT_2r_GET BCMI_HYPERLITE_XGXS_TPOUT_2r_GET
#define TPOUT_2r_TPOUT2f_GET BCMI_HYPERLITE_XGXS_TPOUT_2r_TPOUT2f_GET
#define TPOUT_2r_TPOUT2f_SET BCMI_HYPERLITE_XGXS_TPOUT_2r_TPOUT2f_SET
#define READ_TPOUT_2r BCMI_HYPERLITE_XGXS_READ_TPOUT_2r
#define WRITE_TPOUT_2r BCMI_HYPERLITE_XGXS_WRITE_TPOUT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_TPOUT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  UP1
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x8329
 * DESC:     AN local device user page 1
 * SIZE:     32
 * FIELDS:
 *     DATARATE_2P5GX1  
 *     DATARATE_5GX4    
 *     DATARATE_6GX4    
 *     DATARATE_10GX4   
 *     DATARATE_10GCX4  
 *     DATARATE_12GX4   
 *     DATARATE_12P5GX4 
 *     DATARATE_13GX4   
 *     DATARATE_15GX4   
 *     DATARATE_16GX4   
 *     DATARATE_20GX4   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_UP1r (0x00032019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_UP1r_SIZE 4

/*
 * This structure should be used to declare and program UP1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_UP1r_s {
	uint32_t v[1];
	uint32_t up1[1];
	uint32_t _up1;
} BCMI_HYPERLITE_XGXS_UP1r_t;

#define BCMI_HYPERLITE_XGXS_UP1r_CLR(r) (r).up1[0] = 0
#define BCMI_HYPERLITE_XGXS_UP1r_SET(r,d) (r).up1[0] = d
#define BCMI_HYPERLITE_XGXS_UP1r_GET(r) (r).up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_UP1r_RESERVED0f_GET(r) ((((r).up1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_UP1r_RESERVED0f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_20GX4f_GET(r) ((((r).up1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_20GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_16GX4f_GET(r) ((((r).up1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_16GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_15GX4f_GET(r) ((((r).up1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_15GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_13GX4f_GET(r) ((((r).up1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_13GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12P5GX4f_GET(r) ((((r).up1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12P5GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12GX4f_GET(r) ((((r).up1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GCX4f_GET(r) ((((r).up1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GCX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GX4f_GET(r) ((((r).up1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_6GX4f_GET(r) ((((r).up1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_6GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_5GX4f_GET(r) ((((r).up1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_5GX4f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_2P5GX1f_GET(r) (((r).up1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP1r_DATARATE_2P5GX1f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access UP1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_UP1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_UP1r,(_r._up1))
#define BCMI_HYPERLITE_XGXS_WRITE_UP1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_UP1r,(_r._up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP1r BCMI_HYPERLITE_XGXS_UP1r
#define UP1r_SIZE BCMI_HYPERLITE_XGXS_UP1r_SIZE
typedef BCMI_HYPERLITE_XGXS_UP1r_t UP1r_t;
#define UP1r_CLR BCMI_HYPERLITE_XGXS_UP1r_CLR
#define UP1r_SET BCMI_HYPERLITE_XGXS_UP1r_SET
#define UP1r_GET BCMI_HYPERLITE_XGXS_UP1r_GET
#define UP1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_UP1r_RESERVED0f_GET
#define UP1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_UP1r_RESERVED0f_SET
#define UP1r_DATARATE_20GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_20GX4f_GET
#define UP1r_DATARATE_20GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_20GX4f_SET
#define UP1r_DATARATE_16GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_16GX4f_GET
#define UP1r_DATARATE_16GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_16GX4f_SET
#define UP1r_DATARATE_15GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_15GX4f_GET
#define UP1r_DATARATE_15GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_15GX4f_SET
#define UP1r_DATARATE_13GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_13GX4f_GET
#define UP1r_DATARATE_13GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_13GX4f_SET
#define UP1r_DATARATE_12P5GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12P5GX4f_GET
#define UP1r_DATARATE_12P5GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12P5GX4f_SET
#define UP1r_DATARATE_12GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12GX4f_GET
#define UP1r_DATARATE_12GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_12GX4f_SET
#define UP1r_DATARATE_10GCX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GCX4f_GET
#define UP1r_DATARATE_10GCX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GCX4f_SET
#define UP1r_DATARATE_10GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GX4f_GET
#define UP1r_DATARATE_10GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_10GX4f_SET
#define UP1r_DATARATE_6GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_6GX4f_GET
#define UP1r_DATARATE_6GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_6GX4f_SET
#define UP1r_DATARATE_5GX4f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_5GX4f_GET
#define UP1r_DATARATE_5GX4f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_5GX4f_SET
#define UP1r_DATARATE_2P5GX1f_GET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_2P5GX1f_GET
#define UP1r_DATARATE_2P5GX1f_SET BCMI_HYPERLITE_XGXS_UP1r_DATARATE_2P5GX1f_SET
#define READ_UP1r BCMI_HYPERLITE_XGXS_READ_UP1r
#define WRITE_UP1r BCMI_HYPERLITE_XGXS_WRITE_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  UP2
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x832a
 * DESC:     AN local device user page 2
 * SIZE:     32
 * FIELDS:
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS      
 *     VALID            
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_UP2r (0x0003201a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_UP2r_SIZE 4

/*
 * This structure should be used to declare and program UP2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_UP2r_s {
	uint32_t v[1];
	uint32_t up2[1];
	uint32_t _up2;
} BCMI_HYPERLITE_XGXS_UP2r_t;

#define BCMI_HYPERLITE_XGXS_UP2r_CLR(r) (r).up2[0] = 0
#define BCMI_HYPERLITE_XGXS_UP2r_SET(r,d) (r).up2[0] = d
#define BCMI_HYPERLITE_XGXS_UP2r_GET(r) (r).up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_UP2r_RESERVED0f_GET(r) ((((r).up2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_UP2r_RESERVED0f_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_UP2r_VALIDf_GET(r) ((((r).up2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP2r_VALIDf_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_UP2r_PREEMPHASISf_GET(r) ((((r).up2[0]) >> 6) & 0xf)
#define BCMI_HYPERLITE_XGXS_UP2r_PREEMPHASISf_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define BCMI_HYPERLITE_XGXS_UP2r_IDRIVERf_GET(r) ((((r).up2[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_UP2r_IDRIVERf_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_UP2r_IPREDRIVERf_GET(r) (((r).up2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_UP2r_IPREDRIVERf_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access UP2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_UP2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_UP2r,(_r._up2))
#define BCMI_HYPERLITE_XGXS_WRITE_UP2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_UP2r,(_r._up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP2r BCMI_HYPERLITE_XGXS_UP2r
#define UP2r_SIZE BCMI_HYPERLITE_XGXS_UP2r_SIZE
typedef BCMI_HYPERLITE_XGXS_UP2r_t UP2r_t;
#define UP2r_CLR BCMI_HYPERLITE_XGXS_UP2r_CLR
#define UP2r_SET BCMI_HYPERLITE_XGXS_UP2r_SET
#define UP2r_GET BCMI_HYPERLITE_XGXS_UP2r_GET
#define UP2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_UP2r_RESERVED0f_GET
#define UP2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_UP2r_RESERVED0f_SET
#define UP2r_VALIDf_GET BCMI_HYPERLITE_XGXS_UP2r_VALIDf_GET
#define UP2r_VALIDf_SET BCMI_HYPERLITE_XGXS_UP2r_VALIDf_SET
#define UP2r_PREEMPHASISf_GET BCMI_HYPERLITE_XGXS_UP2r_PREEMPHASISf_GET
#define UP2r_PREEMPHASISf_SET BCMI_HYPERLITE_XGXS_UP2r_PREEMPHASISf_SET
#define UP2r_IDRIVERf_GET BCMI_HYPERLITE_XGXS_UP2r_IDRIVERf_GET
#define UP2r_IDRIVERf_SET BCMI_HYPERLITE_XGXS_UP2r_IDRIVERf_SET
#define UP2r_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_UP2r_IPREDRIVERf_GET
#define UP2r_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_UP2r_IPREDRIVERf_SET
#define READ_UP2r BCMI_HYPERLITE_XGXS_READ_UP2r
#define WRITE_UP2r BCMI_HYPERLITE_XGXS_WRITE_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  UP3
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x832b
 * DESC:     AN local device user page 3
 * SIZE:     32
 * FIELDS:
 *     HIGIG2           
 *     SCRAMBLE_8B10B   
 *     RESERVED1        
 *     DATARATE_25P45GX4 
 *     DATARATE_21GX4   
 *     LAST             
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_UP3r (0x0003201b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_UP3r_SIZE 4

/*
 * This structure should be used to declare and program UP3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_UP3r_s {
	uint32_t v[1];
	uint32_t up3[1];
	uint32_t _up3;
} BCMI_HYPERLITE_XGXS_UP3r_t;

#define BCMI_HYPERLITE_XGXS_UP3r_CLR(r) (r).up3[0] = 0
#define BCMI_HYPERLITE_XGXS_UP3r_SET(r,d) (r).up3[0] = d
#define BCMI_HYPERLITE_XGXS_UP3r_GET(r) (r).up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_UP3r_RESERVED0f_GET(r) ((((r).up3[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_UP3r_RESERVED0f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_UP3r_LASTf_GET(r) ((((r).up3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP3r_LASTf_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_UP3r_DATARATE_21GX4f_GET(r) ((((r).up3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP3r_DATARATE_21GX4f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_UP3r_DATARATE_25P45GX4f_GET(r) ((((r).up3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP3r_DATARATE_25P45GX4f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_UP3r_RESERVED1f_GET(r) ((((r).up3[0]) >> 2) & 0x3f)
#define BCMI_HYPERLITE_XGXS_UP3r_RESERVED1f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2))
#define BCMI_HYPERLITE_XGXS_UP3r_SCRAMBLE_8B10Bf_GET(r) ((((r).up3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP3r_SCRAMBLE_8B10Bf_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_UP3r_HIGIG2f_GET(r) (((r).up3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_UP3r_HIGIG2f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access UP3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_UP3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_UP3r,(_r._up3))
#define BCMI_HYPERLITE_XGXS_WRITE_UP3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_UP3r,(_r._up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP3r BCMI_HYPERLITE_XGXS_UP3r
#define UP3r_SIZE BCMI_HYPERLITE_XGXS_UP3r_SIZE
typedef BCMI_HYPERLITE_XGXS_UP3r_t UP3r_t;
#define UP3r_CLR BCMI_HYPERLITE_XGXS_UP3r_CLR
#define UP3r_SET BCMI_HYPERLITE_XGXS_UP3r_SET
#define UP3r_GET BCMI_HYPERLITE_XGXS_UP3r_GET
#define UP3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_UP3r_RESERVED0f_GET
#define UP3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_UP3r_RESERVED0f_SET
#define UP3r_LASTf_GET BCMI_HYPERLITE_XGXS_UP3r_LASTf_GET
#define UP3r_LASTf_SET BCMI_HYPERLITE_XGXS_UP3r_LASTf_SET
#define UP3r_DATARATE_21GX4f_GET BCMI_HYPERLITE_XGXS_UP3r_DATARATE_21GX4f_GET
#define UP3r_DATARATE_21GX4f_SET BCMI_HYPERLITE_XGXS_UP3r_DATARATE_21GX4f_SET
#define UP3r_DATARATE_25P45GX4f_GET BCMI_HYPERLITE_XGXS_UP3r_DATARATE_25P45GX4f_GET
#define UP3r_DATARATE_25P45GX4f_SET BCMI_HYPERLITE_XGXS_UP3r_DATARATE_25P45GX4f_SET
#define UP3r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_UP3r_RESERVED1f_GET
#define UP3r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_UP3r_RESERVED1f_SET
#define UP3r_SCRAMBLE_8B10Bf_GET BCMI_HYPERLITE_XGXS_UP3r_SCRAMBLE_8B10Bf_GET
#define UP3r_SCRAMBLE_8B10Bf_SET BCMI_HYPERLITE_XGXS_UP3r_SCRAMBLE_8B10Bf_SET
#define UP3r_HIGIG2f_GET BCMI_HYPERLITE_XGXS_UP3r_HIGIG2f_GET
#define UP3r_HIGIG2f_SET BCMI_HYPERLITE_XGXS_UP3r_HIGIG2f_SET
#define READ_UP3r BCMI_HYPERLITE_XGXS_READ_UP3r
#define WRITE_UP3r BCMI_HYPERLITE_XGXS_WRITE_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_UP1
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x832c
 * DESC:     AN link partner user page 1
 * SIZE:     32
 * FIELDS:
 *     DATARATE_2P5GX1  
 *     DATARATE_5GX4    
 *     DATARATE_6GX4    
 *     DATARATE_10GX4   
 *     DATARATE_10GCX4  
 *     DATARATE_12GX4   
 *     DATARATE_12P5GX4 
 *     DATARATE_13GX4   
 *     DATARATE_15GX4   
 *     DATARATE_16GX4   
 *     DATARATE_20GX4   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_UP1r (0x0003201c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_UP1r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_UP1r_s {
	uint32_t v[1];
	uint32_t lp_up1[1];
	uint32_t _lp_up1;
} BCMI_HYPERLITE_XGXS_LP_UP1r_t;

#define BCMI_HYPERLITE_XGXS_LP_UP1r_CLR(r) (r).lp_up1[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_UP1r_SET(r,d) (r).lp_up1[0] = d
#define BCMI_HYPERLITE_XGXS_LP_UP1r_GET(r) (r).lp_up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_UP1r_RESERVED0f_GET(r) ((((r).lp_up1[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_RESERVED0f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_20GX4f_GET(r) ((((r).lp_up1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_20GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_16GX4f_GET(r) ((((r).lp_up1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_16GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_15GX4f_GET(r) ((((r).lp_up1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_15GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_13GX4f_GET(r) ((((r).lp_up1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_13GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12P5GX4f_GET(r) ((((r).lp_up1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12P5GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12GX4f_GET(r) ((((r).lp_up1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GCX4f_GET(r) ((((r).lp_up1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GCX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GX4f_GET(r) ((((r).lp_up1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_6GX4f_GET(r) ((((r).lp_up1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_6GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_5GX4f_GET(r) ((((r).lp_up1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_5GX4f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_2P5GX1f_GET(r) (((r).lp_up1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_2P5GX1f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LP_UP1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_UP1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_UP1r,(_r._lp_up1))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_UP1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_UP1r,(_r._lp_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP1r BCMI_HYPERLITE_XGXS_LP_UP1r
#define LP_UP1r_SIZE BCMI_HYPERLITE_XGXS_LP_UP1r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_UP1r_t LP_UP1r_t;
#define LP_UP1r_CLR BCMI_HYPERLITE_XGXS_LP_UP1r_CLR
#define LP_UP1r_SET BCMI_HYPERLITE_XGXS_LP_UP1r_SET
#define LP_UP1r_GET BCMI_HYPERLITE_XGXS_LP_UP1r_GET
#define LP_UP1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_RESERVED0f_GET
#define LP_UP1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_RESERVED0f_SET
#define LP_UP1r_DATARATE_20GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_20GX4f_GET
#define LP_UP1r_DATARATE_20GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_20GX4f_SET
#define LP_UP1r_DATARATE_16GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_16GX4f_GET
#define LP_UP1r_DATARATE_16GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_16GX4f_SET
#define LP_UP1r_DATARATE_15GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_15GX4f_GET
#define LP_UP1r_DATARATE_15GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_15GX4f_SET
#define LP_UP1r_DATARATE_13GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_13GX4f_GET
#define LP_UP1r_DATARATE_13GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_13GX4f_SET
#define LP_UP1r_DATARATE_12P5GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12P5GX4f_GET
#define LP_UP1r_DATARATE_12P5GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12P5GX4f_SET
#define LP_UP1r_DATARATE_12GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12GX4f_GET
#define LP_UP1r_DATARATE_12GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_12GX4f_SET
#define LP_UP1r_DATARATE_10GCX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GCX4f_GET
#define LP_UP1r_DATARATE_10GCX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GCX4f_SET
#define LP_UP1r_DATARATE_10GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GX4f_GET
#define LP_UP1r_DATARATE_10GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_10GX4f_SET
#define LP_UP1r_DATARATE_6GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_6GX4f_GET
#define LP_UP1r_DATARATE_6GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_6GX4f_SET
#define LP_UP1r_DATARATE_5GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_5GX4f_GET
#define LP_UP1r_DATARATE_5GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_5GX4f_SET
#define LP_UP1r_DATARATE_2P5GX1f_GET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_2P5GX1f_GET
#define LP_UP1r_DATARATE_2P5GX1f_SET BCMI_HYPERLITE_XGXS_LP_UP1r_DATARATE_2P5GX1f_SET
#define READ_LP_UP1r BCMI_HYPERLITE_XGXS_READ_LP_UP1r
#define WRITE_LP_UP1r BCMI_HYPERLITE_XGXS_WRITE_LP_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_UP2
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x832d
 * DESC:     AN link partner user page 2
 * SIZE:     32
 * FIELDS:
 *     IPREDRIVER       
 *     IDRIVER          
 *     PREEMPHASIS      
 *     VALID            
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_UP2r (0x0003201d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_UP2r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_UP2r_s {
	uint32_t v[1];
	uint32_t lp_up2[1];
	uint32_t _lp_up2;
} BCMI_HYPERLITE_XGXS_LP_UP2r_t;

#define BCMI_HYPERLITE_XGXS_LP_UP2r_CLR(r) (r).lp_up2[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_UP2r_SET(r,d) (r).lp_up2[0] = d
#define BCMI_HYPERLITE_XGXS_LP_UP2r_GET(r) (r).lp_up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_UP2r_RESERVED0f_GET(r) ((((r).lp_up2[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_UP2r_RESERVED0f_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_UP2r_VALIDf_GET(r) ((((r).lp_up2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP2r_VALIDf_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LP_UP2r_PREEMPHASISf_GET(r) ((((r).lp_up2[0]) >> 6) & 0xf)
#define BCMI_HYPERLITE_XGXS_LP_UP2r_PREEMPHASISf_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define BCMI_HYPERLITE_XGXS_LP_UP2r_IDRIVERf_GET(r) ((((r).lp_up2[0]) >> 3) & 0x7)
#define BCMI_HYPERLITE_XGXS_LP_UP2r_IDRIVERf_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_HYPERLITE_XGXS_LP_UP2r_IPREDRIVERf_GET(r) (((r).lp_up2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_LP_UP2r_IPREDRIVERf_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access LP_UP2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_UP2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_UP2r,(_r._lp_up2))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_UP2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_UP2r,(_r._lp_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP2r BCMI_HYPERLITE_XGXS_LP_UP2r
#define LP_UP2r_SIZE BCMI_HYPERLITE_XGXS_LP_UP2r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_UP2r_t LP_UP2r_t;
#define LP_UP2r_CLR BCMI_HYPERLITE_XGXS_LP_UP2r_CLR
#define LP_UP2r_SET BCMI_HYPERLITE_XGXS_LP_UP2r_SET
#define LP_UP2r_GET BCMI_HYPERLITE_XGXS_LP_UP2r_GET
#define LP_UP2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_UP2r_RESERVED0f_GET
#define LP_UP2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_UP2r_RESERVED0f_SET
#define LP_UP2r_VALIDf_GET BCMI_HYPERLITE_XGXS_LP_UP2r_VALIDf_GET
#define LP_UP2r_VALIDf_SET BCMI_HYPERLITE_XGXS_LP_UP2r_VALIDf_SET
#define LP_UP2r_PREEMPHASISf_GET BCMI_HYPERLITE_XGXS_LP_UP2r_PREEMPHASISf_GET
#define LP_UP2r_PREEMPHASISf_SET BCMI_HYPERLITE_XGXS_LP_UP2r_PREEMPHASISf_SET
#define LP_UP2r_IDRIVERf_GET BCMI_HYPERLITE_XGXS_LP_UP2r_IDRIVERf_GET
#define LP_UP2r_IDRIVERf_SET BCMI_HYPERLITE_XGXS_LP_UP2r_IDRIVERf_SET
#define LP_UP2r_IPREDRIVERf_GET BCMI_HYPERLITE_XGXS_LP_UP2r_IPREDRIVERf_GET
#define LP_UP2r_IPREDRIVERf_SET BCMI_HYPERLITE_XGXS_LP_UP2r_IPREDRIVERf_SET
#define READ_LP_UP2r BCMI_HYPERLITE_XGXS_READ_LP_UP2r
#define WRITE_LP_UP2r BCMI_HYPERLITE_XGXS_WRITE_LP_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_UP3
 * BLOCKS:   DIGITAL3
 * REGADDR:  0x832e
 * DESC:     AN link partner user page 3
 * SIZE:     32
 * FIELDS:
 *     HIGIG2           
 *     SCRAMBLE_8B10B   
 *     RESERVED1        
 *     DATARATE_25P45GX4 
 *     DATARATE_21GX4   
 *     LAST             
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_UP3r (0x0003201e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_UP3r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_UP3r_s {
	uint32_t v[1];
	uint32_t lp_up3[1];
	uint32_t _lp_up3;
} BCMI_HYPERLITE_XGXS_LP_UP3r_t;

#define BCMI_HYPERLITE_XGXS_LP_UP3r_CLR(r) (r).lp_up3[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_UP3r_SET(r,d) (r).lp_up3[0] = d
#define BCMI_HYPERLITE_XGXS_LP_UP3r_GET(r) (r).lp_up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED0f_GET(r) ((((r).lp_up3[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED0f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_LASTf_GET(r) ((((r).lp_up3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_LASTf_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_21GX4f_GET(r) ((((r).lp_up3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_21GX4f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_25P45GX4f_GET(r) ((((r).lp_up3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_25P45GX4f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED1f_GET(r) ((((r).lp_up3[0]) >> 2) & 0x3f)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED1f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x3f << 2)) | ((((uint32_t)f) & 0x3f) << 2))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_SCRAMBLE_8B10Bf_GET(r) ((((r).lp_up3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_SCRAMBLE_8B10Bf_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_LP_UP3r_HIGIG2f_GET(r) (((r).lp_up3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UP3r_HIGIG2f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LP_UP3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_UP3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_UP3r,(_r._lp_up3))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_UP3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_UP3r,(_r._lp_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP3r BCMI_HYPERLITE_XGXS_LP_UP3r
#define LP_UP3r_SIZE BCMI_HYPERLITE_XGXS_LP_UP3r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_UP3r_t LP_UP3r_t;
#define LP_UP3r_CLR BCMI_HYPERLITE_XGXS_LP_UP3r_CLR
#define LP_UP3r_SET BCMI_HYPERLITE_XGXS_LP_UP3r_SET
#define LP_UP3r_GET BCMI_HYPERLITE_XGXS_LP_UP3r_GET
#define LP_UP3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED0f_GET
#define LP_UP3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED0f_SET
#define LP_UP3r_LASTf_GET BCMI_HYPERLITE_XGXS_LP_UP3r_LASTf_GET
#define LP_UP3r_LASTf_SET BCMI_HYPERLITE_XGXS_LP_UP3r_LASTf_SET
#define LP_UP3r_DATARATE_21GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_21GX4f_GET
#define LP_UP3r_DATARATE_21GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_21GX4f_SET
#define LP_UP3r_DATARATE_25P45GX4f_GET BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_25P45GX4f_GET
#define LP_UP3r_DATARATE_25P45GX4f_SET BCMI_HYPERLITE_XGXS_LP_UP3r_DATARATE_25P45GX4f_SET
#define LP_UP3r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED1f_GET
#define LP_UP3r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_LP_UP3r_RESERVED1f_SET
#define LP_UP3r_SCRAMBLE_8B10Bf_GET BCMI_HYPERLITE_XGXS_LP_UP3r_SCRAMBLE_8B10Bf_GET
#define LP_UP3r_SCRAMBLE_8B10Bf_SET BCMI_HYPERLITE_XGXS_LP_UP3r_SCRAMBLE_8B10Bf_SET
#define LP_UP3r_HIGIG2f_GET BCMI_HYPERLITE_XGXS_LP_UP3r_HIGIG2f_GET
#define LP_UP3r_HIGIG2f_SET BCMI_HYPERLITE_XGXS_LP_UP3r_HIGIG2f_SET
#define READ_LP_UP3r BCMI_HYPERLITE_XGXS_READ_LP_UP3r
#define WRITE_LP_UP3r BCMI_HYPERLITE_XGXS_WRITE_LP_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MISCRXSTATUS
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8330
 * DESC:     Miscellaneous Rx status register
 * SIZE:     32
 * FIELDS:
 *     STATUSSELECT1_NP_COUNT 
 *     STATUSSELECT3_KX_DETECT 
 *     STATUSSELECT0_MR_BP_LH 
 *     STATUSSELECT2_RX_CONFIG_ISNOT_0_LH 
 *     STATUSSELECT0_MR_NP_LH 
 *     STATUSSELECT3_S_CL73_RSLV_KX 
 *     STATUSSELECT2_REMOTEPHY_AUTOSEL 
 *     STATUSSELECT3_S_CL73_RSLV_KX4 
 *     STATUSSELECT2_CU_RESOLUTION_ERROR 
 *     STATUSSELECT0_NP_TOGGLE_ERR_LH 
 *     STATUSSELECT0_RX_CONFIG_IS_0_LH 
 *     STATUSSELECT3_S_MR_AN_ENABLE 
 *     STATUSSELECT2_CU_LINKDOWN 
 *     STATUSSELECT0_OVER1GMP_LH 
 *     STATUSSELECT1_RESERVED0 
 *     STATUSSELECT2_DET_TETON_MODE 
 *     STATUSSELECT3_AUTONEG_ENABLE_OV 
 *     STATUSSELECT3_SGMII_SELECTOR_MISMATCH 
 *     STATUSSELECT0_NONMATCHINGMP_LH 
 *     STATUSSELECT2_REMOTE_PHY_ENABLE 
 *     STATUSSELECT2_RESERVED0 
 *     STATUSSELECT3_RESERVED0 
 *     STATUSSELECT0_REMOTEPHYMP_LH 
 *     STATUSSELECT0_NULLMP_LH 
 *     STATUSSELECT0_INVALIDSEQ_LH 
 *     STATUSSELECT0_MATCHINGOUI_LSB_LH 
 *     STATUSSELECT0_MATCHINGOUI_MSB_LH 
 *     STATUSSELECT0_NONMATCHINGOUI_LH 
 *     STATUSSELECT0_MP5_LH 
 *     STATUSSELECT0_UP3_LH 
 *     STATUSSELECT0_TETON_BRK_LINK_LH 
 *     STATUSSELECT0_CAPTURE_NP_LH 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr (0x00033010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program MISCRXSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_s {
	uint32_t v[1];
	uint32_t miscrxstatus[1];
	uint32_t _miscrxstatus;
} BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_CLR(r) (r).miscrxstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_SET(r,d) (r).miscrxstatus[0] = d
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_GET(r) (r).miscrxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET(r) ((((r).miscrxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET(r) ((((r).miscrxstatus[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET(r) ((((r).miscrxstatus[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET(r) ((((r).miscrxstatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET(r) ((((r).miscrxstatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET(r) ((((r).miscrxstatus[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET(r) ((((r).miscrxstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET(r) ((((r).miscrxstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET(r) ((((r).miscrxstatus[0]) >> 6) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x3ff << 6)) | ((((uint32_t)f) & 0x3ff) << 6))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET(r) ((((r).miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET(r) ((((r).miscrxstatus[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET(r) ((((r).miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET(r) ((((r).miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET(r) (((r).miscrxstatus[0]) & 0xf)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET(r) ((((r).miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET(r) ((((r).miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET(r) ((((r).miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET(r) ((((r).miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET(r) ((((r).miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET(r) ((((r).miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET(r) ((((r).miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET(r) ((((r).miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET(r) (((r).miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET(r) (((r).miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET(r) (((r).miscrxstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISCRXSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MISCRXSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MISCRXSTATUSr,(_r._miscrxstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_MISCRXSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MISCRXSTATUSr,(_r._miscrxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISCRXSTATUSr BCMI_HYPERLITE_XGXS_MISCRXSTATUSr
#define MISCRXSTATUSr_SIZE BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_t MISCRXSTATUSr_t;
#define MISCRXSTATUSr_CLR BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_CLR
#define MISCRXSTATUSr_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_SET
#define MISCRXSTATUSr_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_GET
#define MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_GET
#define MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RESERVED0f_SET
#define MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_CAPTURE_NP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_TETON_BRK_LINK_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_UP3_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MP5_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGOUI_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_MSB_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MATCHINGOUI_LSB_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_INVALIDSEQ_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NULLMP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_GET
#define MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_RESERVED0f_SET
#define MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_REMOTEPHYMP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_GET
#define MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_SGMII_SELECTOR_MISMATCHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NONMATCHINGMP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_GET
#define MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTE_PHY_ENABLEf_SET
#define MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_OVER1GMP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_GET
#define MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_RESERVED0f_SET
#define MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_GET
#define MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_DET_TETON_MODEf_SET
#define MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_GET
#define MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_AUTONEG_ENABLE_OVf_SET
#define MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_GET
#define MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT1_NP_COUNTf_SET
#define MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_RX_CONFIG_IS_0_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_GET
#define MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_MR_AN_ENABLEf_SET
#define MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_GET
#define MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_LINKDOWNf_SET
#define MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_GET
#define MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KX4f_SET
#define MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_GET
#define MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_CU_RESOLUTION_ERRORf_SET
#define MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_NP_TOGGLE_ERR_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_NP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_GET
#define MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_S_CL73_RSLV_KXf_SET
#define MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_GET
#define MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_REMOTEPHY_AUTOSELf_SET
#define MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_GET
#define MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT3_KX_DETECTf_SET
#define MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT0_MR_BP_LHf_SET
#define MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_GET
#define MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET BCMI_HYPERLITE_XGXS_MISCRXSTATUSr_STATUSSELECT2_RX_CONFIG_ISNOT_0_LHf_SET
#define READ_MISCRXSTATUSr BCMI_HYPERLITE_XGXS_READ_MISCRXSTATUSr
#define WRITE_MISCRXSTATUSr BCMI_HYPERLITE_XGXS_WRITE_MISCRXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MISCRXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_BASEPAGE
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8331
 * DESC:     Link partner basepage register
 * SIZE:     32
 * FIELDS:
 *     LP_BASEPAGE      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr (0x00033011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_SIZE 4

/*
 * This structure should be used to declare and program LP_BASEPAGE.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_s {
	uint32_t v[1];
	uint32_t lp_basepage[1];
	uint32_t _lp_basepage;
} BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_t;

#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_CLR(r) (r).lp_basepage[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_SET(r,d) (r).lp_basepage[0] = d
#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_GET(r) (r).lp_basepage[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_LP_BASEPAGEf_GET(r) (((r).lp_basepage[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_LP_BASEPAGEf_SET(r,f) (r).lp_basepage[0]=(((r).lp_basepage[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_BASEPAGE.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_BASEPAGEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_BASEPAGEr,(_r._lp_basepage))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_BASEPAGEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_BASEPAGEr,(_r._lp_basepage))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_BASEPAGEr BCMI_HYPERLITE_XGXS_LP_BASEPAGEr
#define LP_BASEPAGEr_SIZE BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_t LP_BASEPAGEr_t;
#define LP_BASEPAGEr_CLR BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_CLR
#define LP_BASEPAGEr_SET BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_SET
#define LP_BASEPAGEr_GET BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_GET
#define LP_BASEPAGEr_LP_BASEPAGEf_GET BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_LP_BASEPAGEf_GET
#define LP_BASEPAGEr_LP_BASEPAGEf_SET BCMI_HYPERLITE_XGXS_LP_BASEPAGEr_LP_BASEPAGEf_SET
#define READ_LP_BASEPAGEr BCMI_HYPERLITE_XGXS_READ_LP_BASEPAGEr
#define WRITE_LP_BASEPAGEr BCMI_HYPERLITE_XGXS_WRITE_LP_BASEPAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_BASEPAGEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_NEXTPAGE_0
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8332
 * DESC:     Link partner nextpage 0 register
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_0    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r (0x00033012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_0[1];
	uint32_t _lp_nextpage_0;
} BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_t;

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_CLR(r) (r).lp_nextpage_0[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_SET(r,d) (r).lp_nextpage_0[0] = d
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_GET(r) (r).lp_nextpage_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET(r) (((r).lp_nextpage_0[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET(r,f) (r).lp_nextpage_0[0]=(((r).lp_nextpage_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r,(_r._lp_nextpage_0))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r,(_r._lp_nextpage_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r
#define LP_NEXTPAGE_0r_SIZE BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_t LP_NEXTPAGE_0r_t;
#define LP_NEXTPAGE_0r_CLR BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_CLR
#define LP_NEXTPAGE_0r_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_SET
#define LP_NEXTPAGE_0r_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_GET
#define LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET
#define LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET
#define READ_LP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_0r
#define WRITE_LP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_NEXTPAGE_1
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8333
 * DESC:     Link partner nextpage 1 register
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_1    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r (0x00033013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_1[1];
	uint32_t _lp_nextpage_1;
} BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_t;

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_CLR(r) (r).lp_nextpage_1[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_SET(r,d) (r).lp_nextpage_1[0] = d
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_GET(r) (r).lp_nextpage_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET(r) (((r).lp_nextpage_1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET(r,f) (r).lp_nextpage_1[0]=(((r).lp_nextpage_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r,(_r._lp_nextpage_1))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r,(_r._lp_nextpage_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r
#define LP_NEXTPAGE_1r_SIZE BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_t LP_NEXTPAGE_1r_t;
#define LP_NEXTPAGE_1r_CLR BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_CLR
#define LP_NEXTPAGE_1r_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_SET
#define LP_NEXTPAGE_1r_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_GET
#define LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET
#define LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET
#define READ_LP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_1r
#define WRITE_LP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_NEXTPAGE_2
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8334
 * DESC:     Link partner nextpage 2 register
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_2    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r (0x00033014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_2[1];
	uint32_t _lp_nextpage_2;
} BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_t;

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_CLR(r) (r).lp_nextpage_2[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_SET(r,d) (r).lp_nextpage_2[0] = d
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_GET(r) (r).lp_nextpage_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET(r) (((r).lp_nextpage_2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET(r,f) (r).lp_nextpage_2[0]=(((r).lp_nextpage_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r,(_r._lp_nextpage_2))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r,(_r._lp_nextpage_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r
#define LP_NEXTPAGE_2r_SIZE BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_t LP_NEXTPAGE_2r_t;
#define LP_NEXTPAGE_2r_CLR BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_CLR
#define LP_NEXTPAGE_2r_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_SET
#define LP_NEXTPAGE_2r_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_GET
#define LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET
#define LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET
#define READ_LP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_2r
#define WRITE_LP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_NEXTPAGE_3
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8335
 * DESC:     Link partner nextpage 3 register
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_3    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r (0x00033015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_3[1];
	uint32_t _lp_nextpage_3;
} BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_t;

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_CLR(r) (r).lp_nextpage_3[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_SET(r,d) (r).lp_nextpage_3[0] = d
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_GET(r) (r).lp_nextpage_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET(r) (((r).lp_nextpage_3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET(r,f) (r).lp_nextpage_3[0]=(((r).lp_nextpage_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r,(_r._lp_nextpage_3))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r,(_r._lp_nextpage_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r
#define LP_NEXTPAGE_3r_SIZE BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_t LP_NEXTPAGE_3r_t;
#define LP_NEXTPAGE_3r_CLR BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_CLR
#define LP_NEXTPAGE_3r_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_SET
#define LP_NEXTPAGE_3r_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_GET
#define LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET
#define LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET
#define READ_LP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_3r
#define WRITE_LP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_NEXTPAGE_4
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8336
 * DESC:     Link partner nextpage 4 register
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_4    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r (0x00033016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_4[1];
	uint32_t _lp_nextpage_4;
} BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_t;

#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_CLR(r) (r).lp_nextpage_4[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_SET(r,d) (r).lp_nextpage_4[0] = d
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_GET(r) (r).lp_nextpage_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET(r) (((r).lp_nextpage_4[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET(r,f) (r).lp_nextpage_4[0]=(((r).lp_nextpage_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r,(_r._lp_nextpage_4))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r,(_r._lp_nextpage_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r
#define LP_NEXTPAGE_4r_SIZE BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_t LP_NEXTPAGE_4r_t;
#define LP_NEXTPAGE_4r_CLR BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_CLR
#define LP_NEXTPAGE_4r_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_SET
#define LP_NEXTPAGE_4r_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_GET
#define LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET
#define LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET
#define READ_LP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_READ_LP_NEXTPAGE_4r
#define WRITE_LP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_WRITE_LP_NEXTPAGE_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_NEXTPAGE_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RP_NEXTPAGE_0
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8337
 * DESC:     Remote phy nextpage 0 register
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_0    
 *     REMOTE_PHY_ENABLE 
 *     OVER_1G_DISABLE  
 *     NULL_PAGE_ENABLE 
 *     EXTRA_PAGE_DISABLE 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r (0x00033017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_0[1];
	uint32_t _rp_nextpage_0;
} BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_t;

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_CLR(r) (r).rp_nextpage_0[0] = 0
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_SET(r,d) (r).rp_nextpage_0[0] = d
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_GET(r) (r).rp_nextpage_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RESERVED0f_GET(r) ((((r).rp_nextpage_0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RESERVED0f_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_GET(r) (((r).rp_nextpage_0[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r,(_r._rp_nextpage_0))
#define BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r,(_r._rp_nextpage_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r
#define RP_NEXTPAGE_0r_SIZE BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_SIZE
typedef BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_t RP_NEXTPAGE_0r_t;
#define RP_NEXTPAGE_0r_CLR BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_CLR
#define RP_NEXTPAGE_0r_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_SET
#define RP_NEXTPAGE_0r_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_GET
#define RP_NEXTPAGE_0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RESERVED0f_GET
#define RP_NEXTPAGE_0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RESERVED0f_SET
#define RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET
#define RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET
#define RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET
#define RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET
#define RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET
#define RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET
#define RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET
#define RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET
#define RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_GET
#define RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r_RP_NEXTPAGE_0f_SET
#define READ_RP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_0r
#define WRITE_RP_NEXTPAGE_0r BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RP_NEXTPAGE_1
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8338
 * DESC:     Remote phy nextpage 1 register
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_1    
 *     REMOTEPHY_DECODE_ENABLE 
 *     REMOTEPHY_RESOLUTION_DISABLE 
 *     REMOTEPHY_RSLTN_ERR_RSTRT_DISABLE 
 *     REMOTEPHY_LINKDOWN_RSTRT_DISABLE 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r (0x00033018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_1[1];
	uint32_t _rp_nextpage_1;
} BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_t;

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_CLR(r) (r).rp_nextpage_1[0] = 0
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_SET(r,d) (r).rp_nextpage_1[0] = d
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_GET(r) (r).rp_nextpage_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RESERVED0f_GET(r) ((((r).rp_nextpage_1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RESERVED0f_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_GET(r) (((r).rp_nextpage_1[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r,(_r._rp_nextpage_1))
#define BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r,(_r._rp_nextpage_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r
#define RP_NEXTPAGE_1r_SIZE BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_SIZE
typedef BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_t RP_NEXTPAGE_1r_t;
#define RP_NEXTPAGE_1r_CLR BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_CLR
#define RP_NEXTPAGE_1r_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_SET
#define RP_NEXTPAGE_1r_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_GET
#define RP_NEXTPAGE_1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RESERVED0f_GET
#define RP_NEXTPAGE_1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RESERVED0f_SET
#define RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_GET
#define RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_LINKDOWN_RSTRT_DISABLEf_SET
#define RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_GET
#define RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RSLTN_ERR_RSTRT_DISABLEf_SET
#define RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_GET
#define RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_RESOLUTION_DISABLEf_SET
#define RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_GET
#define RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_REMOTEPHY_DECODE_ENABLEf_SET
#define RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_GET
#define RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r_RP_NEXTPAGE_1f_SET
#define READ_RP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_1r
#define WRITE_RP_NEXTPAGE_1r BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RP_NEXTPAGE_2
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x8339
 * DESC:     Remote phy nextpage 2 register
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_2    
 *     REMPHY_NP_CLR_DISABLE 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r (0x00033019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_2[1];
	uint32_t _rp_nextpage_2;
} BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_t;

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_CLR(r) (r).rp_nextpage_2[0] = 0
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_SET(r,d) (r).rp_nextpage_2[0] = d
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_GET(r) (r).rp_nextpage_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RESERVED0f_GET(r) ((((r).rp_nextpage_2[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RESERVED0f_SET(r,f) (r).rp_nextpage_2[0]=(((r).rp_nextpage_2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET(r) ((((r).rp_nextpage_2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET(r,f) (r).rp_nextpage_2[0]=(((r).rp_nextpage_2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_GET(r) (((r).rp_nextpage_2[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_SET(r,f) (r).rp_nextpage_2[0]=(((r).rp_nextpage_2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r,(_r._rp_nextpage_2))
#define BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r,(_r._rp_nextpage_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r
#define RP_NEXTPAGE_2r_SIZE BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_SIZE
typedef BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_t RP_NEXTPAGE_2r_t;
#define RP_NEXTPAGE_2r_CLR BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_CLR
#define RP_NEXTPAGE_2r_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_SET
#define RP_NEXTPAGE_2r_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_GET
#define RP_NEXTPAGE_2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RESERVED0f_GET
#define RP_NEXTPAGE_2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RESERVED0f_SET
#define RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET
#define RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET
#define RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_GET
#define RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r_RP_NEXTPAGE_2f_SET
#define READ_RP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_2r
#define WRITE_RP_NEXTPAGE_2r BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RP_NEXTPAGE_3
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x833a
 * DESC:     Remote phy nextpage 3 register
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_3    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r (0x0003301a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_3[1];
	uint32_t _rp_nextpage_3;
} BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_t;

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_CLR(r) (r).rp_nextpage_3[0] = 0
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_SET(r,d) (r).rp_nextpage_3[0] = d
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_GET(r) (r).rp_nextpage_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RESERVED0f_GET(r) ((((r).rp_nextpage_3[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RESERVED0f_SET(r,f) (r).rp_nextpage_3[0]=(((r).rp_nextpage_3[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_GET(r) (((r).rp_nextpage_3[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_SET(r,f) (r).rp_nextpage_3[0]=(((r).rp_nextpage_3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r,(_r._rp_nextpage_3))
#define BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r,(_r._rp_nextpage_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r
#define RP_NEXTPAGE_3r_SIZE BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_SIZE
typedef BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_t RP_NEXTPAGE_3r_t;
#define RP_NEXTPAGE_3r_CLR BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_CLR
#define RP_NEXTPAGE_3r_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_SET
#define RP_NEXTPAGE_3r_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_GET
#define RP_NEXTPAGE_3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RESERVED0f_GET
#define RP_NEXTPAGE_3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RESERVED0f_SET
#define RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_GET
#define RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r_RP_NEXTPAGE_3f_SET
#define READ_RP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_3r
#define WRITE_RP_NEXTPAGE_3r BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  RP_NEXTPAGE_4
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x833b
 * DESC:     Remote phy nextpage 4 register
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_4    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r (0x0003301b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_4[1];
	uint32_t _rp_nextpage_4;
} BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_t;

#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_CLR(r) (r).rp_nextpage_4[0] = 0
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_SET(r,d) (r).rp_nextpage_4[0] = d
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_GET(r) (r).rp_nextpage_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RESERVED0f_GET(r) ((((r).rp_nextpage_4[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RESERVED0f_SET(r,f) (r).rp_nextpage_4[0]=(((r).rp_nextpage_4[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_GET(r) (((r).rp_nextpage_4[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_SET(r,f) (r).rp_nextpage_4[0]=(((r).rp_nextpage_4[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r,(_r._rp_nextpage_4))
#define BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r,(_r._rp_nextpage_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r
#define RP_NEXTPAGE_4r_SIZE BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_SIZE
typedef BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_t RP_NEXTPAGE_4r_t;
#define RP_NEXTPAGE_4r_CLR BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_CLR
#define RP_NEXTPAGE_4r_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_SET
#define RP_NEXTPAGE_4r_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_GET
#define RP_NEXTPAGE_4r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RESERVED0f_GET
#define RP_NEXTPAGE_4r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RESERVED0f_SET
#define RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_GET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_GET
#define RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_SET BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r_RP_NEXTPAGE_4f_SET
#define READ_RP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_READ_RP_NEXTPAGE_4r
#define WRITE_RP_NEXTPAGE_4r BCMI_HYPERLITE_XGXS_WRITE_RP_NEXTPAGE_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_RP_NEXTPAGE_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MISC3
 * BLOCKS:   DIGITAL4
 * REGADDR:  0x833c
 * DESC:     Miscellaneous 3 control register
 * SIZE:     32
 * FIELDS:
 *     RXSIGDETPWRDN_OVERRIDE 
 *     RXSIGDETPWRDN_OVERRIDE_VAL 
 *     TBI_MODE_FORCE_R 
 *     DISABLE_PCS_TX_FORCE_R 
 *     DISABLE_PCS_TX_R 
 *     FIFO_ERR_CYA2    
 *     LANEDISABLE      
 *     FORCE_SPEED_B5   
 *     SCR_EN_PER_LANE  
 *     FIFO_IPG_CYA     
 *     RXCK_MII_OVERRIDE 
 *     RXCK_MII_OVERRIDE_VAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MISC3r (0x0003301c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MISC3r_SIZE 4

/*
 * This structure should be used to declare and program MISC3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MISC3r_s {
	uint32_t v[1];
	uint32_t misc3[1];
	uint32_t _misc3;
} BCMI_HYPERLITE_XGXS_MISC3r_t;

#define BCMI_HYPERLITE_XGXS_MISC3r_CLR(r) (r).misc3[0] = 0
#define BCMI_HYPERLITE_XGXS_MISC3r_SET(r,d) (r).misc3[0] = d
#define BCMI_HYPERLITE_XGXS_MISC3r_GET(r) (r).misc3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MISC3r_RESERVED0f_GET(r) ((((r).misc3[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_MISC3r_RESERVED0f_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDE_VALf_GET(r) ((((r).misc3[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDE_VALf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDEf_GET(r) ((((r).misc3[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MISC3r_FIFO_IPG_CYAf_GET(r) ((((r).misc3[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_FIFO_IPG_CYAf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MISC3r_SCR_EN_PER_LANEf_GET(r) ((((r).misc3[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_SCR_EN_PER_LANEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MISC3r_FORCE_SPEED_B5f_GET(r) ((((r).misc3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_FORCE_SPEED_B5f_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MISC3r_LANEDISABLEf_GET(r) ((((r).misc3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_LANEDISABLEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MISC3r_FIFO_ERR_CYA2f_GET(r) ((((r).misc3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_FIFO_ERR_CYA2f_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_Rf_GET(r) ((((r).misc3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET(r) ((((r).misc3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MISC3r_TBI_MODE_FORCE_Rf_GET(r) ((((r).misc3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_TBI_MODE_FORCE_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET(r) ((((r).misc3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET(r) (((r).misc3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISC3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MISC3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MISC3r,(_r._misc3))
#define BCMI_HYPERLITE_XGXS_WRITE_MISC3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MISC3r,(_r._misc3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC3r BCMI_HYPERLITE_XGXS_MISC3r
#define MISC3r_SIZE BCMI_HYPERLITE_XGXS_MISC3r_SIZE
typedef BCMI_HYPERLITE_XGXS_MISC3r_t MISC3r_t;
#define MISC3r_CLR BCMI_HYPERLITE_XGXS_MISC3r_CLR
#define MISC3r_SET BCMI_HYPERLITE_XGXS_MISC3r_SET
#define MISC3r_GET BCMI_HYPERLITE_XGXS_MISC3r_GET
#define MISC3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MISC3r_RESERVED0f_GET
#define MISC3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MISC3r_RESERVED0f_SET
#define MISC3r_RXCK_MII_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDE_VALf_GET
#define MISC3r_RXCK_MII_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDE_VALf_SET
#define MISC3r_RXCK_MII_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDEf_GET
#define MISC3r_RXCK_MII_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_MISC3r_RXCK_MII_OVERRIDEf_SET
#define MISC3r_FIFO_IPG_CYAf_GET BCMI_HYPERLITE_XGXS_MISC3r_FIFO_IPG_CYAf_GET
#define MISC3r_FIFO_IPG_CYAf_SET BCMI_HYPERLITE_XGXS_MISC3r_FIFO_IPG_CYAf_SET
#define MISC3r_SCR_EN_PER_LANEf_GET BCMI_HYPERLITE_XGXS_MISC3r_SCR_EN_PER_LANEf_GET
#define MISC3r_SCR_EN_PER_LANEf_SET BCMI_HYPERLITE_XGXS_MISC3r_SCR_EN_PER_LANEf_SET
#define MISC3r_FORCE_SPEED_B5f_GET BCMI_HYPERLITE_XGXS_MISC3r_FORCE_SPEED_B5f_GET
#define MISC3r_FORCE_SPEED_B5f_SET BCMI_HYPERLITE_XGXS_MISC3r_FORCE_SPEED_B5f_SET
#define MISC3r_LANEDISABLEf_GET BCMI_HYPERLITE_XGXS_MISC3r_LANEDISABLEf_GET
#define MISC3r_LANEDISABLEf_SET BCMI_HYPERLITE_XGXS_MISC3r_LANEDISABLEf_SET
#define MISC3r_FIFO_ERR_CYA2f_GET BCMI_HYPERLITE_XGXS_MISC3r_FIFO_ERR_CYA2f_GET
#define MISC3r_FIFO_ERR_CYA2f_SET BCMI_HYPERLITE_XGXS_MISC3r_FIFO_ERR_CYA2f_SET
#define MISC3r_DISABLE_PCS_TX_Rf_GET BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_Rf_GET
#define MISC3r_DISABLE_PCS_TX_Rf_SET BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_Rf_SET
#define MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET
#define MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET
#define MISC3r_TBI_MODE_FORCE_Rf_GET BCMI_HYPERLITE_XGXS_MISC3r_TBI_MODE_FORCE_Rf_GET
#define MISC3r_TBI_MODE_FORCE_Rf_SET BCMI_HYPERLITE_XGXS_MISC3r_TBI_MODE_FORCE_Rf_SET
#define MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET
#define MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET
#define MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET
#define MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET BCMI_HYPERLITE_XGXS_MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET
#define READ_MISC3r BCMI_HYPERLITE_XGXS_READ_MISC3r
#define WRITE_MISC3r BCMI_HYPERLITE_XGXS_WRITE_MISC3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MISC3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MP5_NEXTPAGECTRL
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8350
 * DESC:     MP5, Message Page 5, next page control register
 * SIZE:     32
 * FIELDS:
 *     BAM_MODE         
 *     TETON_MODE       
 *     TETON_MODE_UP3_EN 
 *     NP_SW_OVERRIDE_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr (0x00035010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_SIZE 4

/*
 * This structure should be used to declare and program MP5_NEXTPAGECTRL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_s {
	uint32_t v[1];
	uint32_t mp5_nextpagectrl[1];
	uint32_t _mp5_nextpagectrl;
} BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_t;

#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_CLR(r) (r).mp5_nextpagectrl[0] = 0
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_SET(r,d) (r).mp5_nextpagectrl[0] = d
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_GET(r) (r).mp5_nextpagectrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_RESERVED0f_GET(r) ((((r).mp5_nextpagectrl[0]) >> 4) & 0xfff)
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_RESERVED0f_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0xfff << 4)) | ((((uint32_t)f) & 0xfff) << 4))
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODEf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODEf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_BAM_MODEf_GET(r) (((r).mp5_nextpagectrl[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_BAM_MODEf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MP5_NEXTPAGECTRL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MP5_NEXTPAGECTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr,(_r._mp5_nextpagectrl))
#define BCMI_HYPERLITE_XGXS_WRITE_MP5_NEXTPAGECTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr,(_r._mp5_nextpagectrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MP5_NEXTPAGECTRLr BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr
#define MP5_NEXTPAGECTRLr_SIZE BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_SIZE
typedef BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_t MP5_NEXTPAGECTRLr_t;
#define MP5_NEXTPAGECTRLr_CLR BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_CLR
#define MP5_NEXTPAGECTRLr_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_SET
#define MP5_NEXTPAGECTRLr_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_GET
#define MP5_NEXTPAGECTRLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_RESERVED0f_GET
#define MP5_NEXTPAGECTRLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_RESERVED0f_SET
#define MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET
#define MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET
#define MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET
#define MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET
#define MP5_NEXTPAGECTRLr_TETON_MODEf_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODEf_GET
#define MP5_NEXTPAGECTRLr_TETON_MODEf_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_TETON_MODEf_SET
#define MP5_NEXTPAGECTRLr_BAM_MODEf_GET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_BAM_MODEf_GET
#define MP5_NEXTPAGECTRLr_BAM_MODEf_SET BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr_BAM_MODEf_SET
#define READ_MP5_NEXTPAGECTRLr BCMI_HYPERLITE_XGXS_READ_MP5_NEXTPAGECTRLr
#define WRITE_MP5_NEXTPAGECTRLr BCMI_HYPERLITE_XGXS_WRITE_MP5_NEXTPAGECTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MP5_NEXTPAGECTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LINK_TIMER_OFFSET1
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8351
 * DESC:     sgmii & max timer offsets
 * SIZE:     32
 * FIELDS:
 *     MAX_OFFSET       
 *     SGMII_OFFSET     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r (0x00035011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_s {
	uint32_t v[1];
	uint32_t link_timer_offset1[1];
	uint32_t _link_timer_offset1;
} BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_t;

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_CLR(r) (r).link_timer_offset1[0] = 0
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SET(r,d) (r).link_timer_offset1[0] = d
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_GET(r) (r).link_timer_offset1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET(r) ((((r).link_timer_offset1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET(r,f) (r).link_timer_offset1[0]=(((r).link_timer_offset1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET(r) (((r).link_timer_offset1[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET(r,f) (r).link_timer_offset1[0]=(((r).link_timer_offset1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r,(_r._link_timer_offset1))
#define BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r,(_r._link_timer_offset1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET1r BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r
#define LINK_TIMER_OFFSET1r_SIZE BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SIZE
typedef BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_t LINK_TIMER_OFFSET1r_t;
#define LINK_TIMER_OFFSET1r_CLR BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_CLR
#define LINK_TIMER_OFFSET1r_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SET
#define LINK_TIMER_OFFSET1r_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_GET
#define LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET
#define LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET
#define LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET
#define LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET1r BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET1r
#define WRITE_LINK_TIMER_OFFSET1r BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LINK_TIMER_OFFSET2
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8352
 * DESC:     link up & link down timer offsets
 * SIZE:     32
 * FIELDS:
 *     LINK_DOWN_OFFSET 
 *     LINK_UP_OFFSET   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r (0x00035012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_s {
	uint32_t v[1];
	uint32_t link_timer_offset2[1];
	uint32_t _link_timer_offset2;
} BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_t;

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_CLR(r) (r).link_timer_offset2[0] = 0
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_SET(r,d) (r).link_timer_offset2[0] = d
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_GET(r) (r).link_timer_offset2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET(r) ((((r).link_timer_offset2[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET(r,f) (r).link_timer_offset2[0]=(((r).link_timer_offset2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET(r) (((r).link_timer_offset2[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET(r,f) (r).link_timer_offset2[0]=(((r).link_timer_offset2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r,(_r._link_timer_offset2))
#define BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r,(_r._link_timer_offset2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET2r BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r
#define LINK_TIMER_OFFSET2r_SIZE BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_SIZE
typedef BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_t LINK_TIMER_OFFSET2r_t;
#define LINK_TIMER_OFFSET2r_CLR BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_CLR
#define LINK_TIMER_OFFSET2r_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_SET
#define LINK_TIMER_OFFSET2r_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_GET
#define LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET
#define LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET
#define LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET
#define LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET2r BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET2r
#define WRITE_LINK_TIMER_OFFSET2r BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LINK_TIMER_OFFSET3
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8353
 * DESC:     break link & next page link timer offsets
 * SIZE:     32
 * FIELDS:
 *     NP_LINK_OFFSET   
 *     BREAK_LINK_OFFSET 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r (0x00035013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_s {
	uint32_t v[1];
	uint32_t link_timer_offset3[1];
	uint32_t _link_timer_offset3;
} BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_t;

#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_CLR(r) (r).link_timer_offset3[0] = 0
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_SET(r,d) (r).link_timer_offset3[0] = d
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_GET(r) (r).link_timer_offset3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET(r) ((((r).link_timer_offset3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET(r,f) (r).link_timer_offset3[0]=(((r).link_timer_offset3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET(r) (((r).link_timer_offset3[0]) & 0xff)
#define BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET(r,f) (r).link_timer_offset3[0]=(((r).link_timer_offset3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r,(_r._link_timer_offset3))
#define BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r,(_r._link_timer_offset3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET3r BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r
#define LINK_TIMER_OFFSET3r_SIZE BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_SIZE
typedef BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_t LINK_TIMER_OFFSET3r_t;
#define LINK_TIMER_OFFSET3r_CLR BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_CLR
#define LINK_TIMER_OFFSET3r_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_SET
#define LINK_TIMER_OFFSET3r_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_GET
#define LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET
#define LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET
#define LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET
#define LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET3r BCMI_HYPERLITE_XGXS_READ_LINK_TIMER_OFFSET3r
#define WRITE_LINK_TIMER_OFFSET3r BCMI_HYPERLITE_XGXS_WRITE_LINK_TIMER_OFFSET3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LINK_TIMER_OFFSET3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  OUI_MSB_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8354
 * DESC:     11 MSbits of the oui, oui[23:13]
 * SIZE:     32
 * FIELDS:
 *     OUI_MSB_FIELD    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr (0x00035014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program OUI_MSB_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_s {
	uint32_t v[1];
	uint32_t oui_msb_field[1];
	uint32_t _oui_msb_field;
} BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_CLR(r) (r).oui_msb_field[0] = 0
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_SET(r,d) (r).oui_msb_field[0] = d
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_GET(r) (r).oui_msb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_RESERVED0f_GET(r) ((((r).oui_msb_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_RESERVED0f_SET(r,f) (r).oui_msb_field[0]=(((r).oui_msb_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET(r) (((r).oui_msb_field[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET(r,f) (r).oui_msb_field[0]=(((r).oui_msb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access OUI_MSB_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_OUI_MSB_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr,(_r._oui_msb_field))
#define BCMI_HYPERLITE_XGXS_WRITE_OUI_MSB_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr,(_r._oui_msb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr
#define OUI_MSB_FIELDr_SIZE BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_t OUI_MSB_FIELDr_t;
#define OUI_MSB_FIELDr_CLR BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_CLR
#define OUI_MSB_FIELDr_SET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_SET
#define OUI_MSB_FIELDr_GET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_GET
#define OUI_MSB_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_RESERVED0f_GET
#define OUI_MSB_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_RESERVED0f_SET
#define OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET
#define OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET
#define READ_OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_READ_OUI_MSB_FIELDr
#define WRITE_OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_WRITE_OUI_MSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_OUI_MSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  OUI_LSB_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8355
 * DESC:     11 middle bits of the oui, oui[12:2]
 * SIZE:     32
 * FIELDS:
 *     OUI_LSB_FIELD    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr (0x00035015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program OUI_LSB_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_s {
	uint32_t v[1];
	uint32_t oui_lsb_field[1];
	uint32_t _oui_lsb_field;
} BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_CLR(r) (r).oui_lsb_field[0] = 0
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_SET(r,d) (r).oui_lsb_field[0] = d
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_GET(r) (r).oui_lsb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_RESERVED0f_GET(r) ((((r).oui_lsb_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_RESERVED0f_SET(r,f) (r).oui_lsb_field[0]=(((r).oui_lsb_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET(r) (((r).oui_lsb_field[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET(r,f) (r).oui_lsb_field[0]=(((r).oui_lsb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access OUI_LSB_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_OUI_LSB_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr,(_r._oui_lsb_field))
#define BCMI_HYPERLITE_XGXS_WRITE_OUI_LSB_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr,(_r._oui_lsb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr
#define OUI_LSB_FIELDr_SIZE BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_t OUI_LSB_FIELDr_t;
#define OUI_LSB_FIELDr_CLR BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_CLR
#define OUI_LSB_FIELDr_SET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_SET
#define OUI_LSB_FIELDr_GET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_GET
#define OUI_LSB_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_RESERVED0f_GET
#define OUI_LSB_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_RESERVED0f_SET
#define OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET
#define OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET
#define READ_OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_READ_OUI_LSB_FIELDr
#define WRITE_OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_WRITE_OUI_LSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_OUI_LSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  BAM_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8356
 * DESC:     2 LSbits of the oui, oui[1:0]
 * SIZE:     32
 * FIELDS:
 *     BAM_FIELD        
 *     OUI_1_0          
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr (0x00035016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program BAM_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_BAM_FIELDr_s {
	uint32_t v[1];
	uint32_t bam_field[1];
	uint32_t _bam_field;
} BCMI_HYPERLITE_XGXS_BAM_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_CLR(r) (r).bam_field[0] = 0
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_SET(r,d) (r).bam_field[0] = d
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_GET(r) (r).bam_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_RESERVED0f_GET(r) ((((r).bam_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_RESERVED0f_SET(r,f) (r).bam_field[0]=(((r).bam_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_OUI_1_0f_GET(r) ((((r).bam_field[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_OUI_1_0f_SET(r,f) (r).bam_field[0]=(((r).bam_field[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_BAM_FIELDf_GET(r) (((r).bam_field[0]) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_BAM_FIELDr_BAM_FIELDf_SET(r,f) (r).bam_field[0]=(((r).bam_field[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access BAM_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_BAM_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_BAM_FIELDr,(_r._bam_field))
#define BCMI_HYPERLITE_XGXS_WRITE_BAM_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_BAM_FIELDr,(_r._bam_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BAM_FIELDr BCMI_HYPERLITE_XGXS_BAM_FIELDr
#define BAM_FIELDr_SIZE BCMI_HYPERLITE_XGXS_BAM_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_BAM_FIELDr_t BAM_FIELDr_t;
#define BAM_FIELDr_CLR BCMI_HYPERLITE_XGXS_BAM_FIELDr_CLR
#define BAM_FIELDr_SET BCMI_HYPERLITE_XGXS_BAM_FIELDr_SET
#define BAM_FIELDr_GET BCMI_HYPERLITE_XGXS_BAM_FIELDr_GET
#define BAM_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_BAM_FIELDr_RESERVED0f_GET
#define BAM_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_BAM_FIELDr_RESERVED0f_SET
#define BAM_FIELDr_OUI_1_0f_GET BCMI_HYPERLITE_XGXS_BAM_FIELDr_OUI_1_0f_GET
#define BAM_FIELDr_OUI_1_0f_SET BCMI_HYPERLITE_XGXS_BAM_FIELDr_OUI_1_0f_SET
#define BAM_FIELDr_BAM_FIELDf_GET BCMI_HYPERLITE_XGXS_BAM_FIELDr_BAM_FIELDf_GET
#define BAM_FIELDr_BAM_FIELDf_SET BCMI_HYPERLITE_XGXS_BAM_FIELDr_BAM_FIELDf_SET
#define READ_BAM_FIELDr BCMI_HYPERLITE_XGXS_READ_BAM_FIELDr
#define WRITE_BAM_FIELDr BCMI_HYPERLITE_XGXS_WRITE_BAM_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_BAM_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  UD_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8357
 * DESC:     User defined field of MP5
 * SIZE:     32
 * FIELDS:
 *     OVER1G           
 *     REMOTE_CU_PHY    
 *     REMOTE_SERDES_PHY 
 *     AUTONEG_MDIO     
 *     INBAND_MDIO      
 *     REMOTE_BN_PAGE   
 *     UD_RESERVED      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_UD_FIELDr (0x00035017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_UD_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program UD_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_UD_FIELDr_s {
	uint32_t v[1];
	uint32_t ud_field[1];
	uint32_t _ud_field;
} BCMI_HYPERLITE_XGXS_UD_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_UD_FIELDr_CLR(r) (r).ud_field[0] = 0
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_SET(r,d) (r).ud_field[0] = d
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_GET(r) (r).ud_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_RESERVED0f_GET(r) ((((r).ud_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_RESERVED0f_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_UD_RESERVEDf_GET(r) ((((r).ud_field[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_UD_RESERVEDf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_BN_PAGEf_GET(r) ((((r).ud_field[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_BN_PAGEf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_INBAND_MDIOf_GET(r) ((((r).ud_field[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_INBAND_MDIOf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_AUTONEG_MDIOf_GET(r) ((((r).ud_field[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_AUTONEG_MDIOf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_SERDES_PHYf_GET(r) ((((r).ud_field[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_SERDES_PHYf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_CU_PHYf_GET(r) ((((r).ud_field[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_CU_PHYf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_OVER1Gf_GET(r) (((r).ud_field[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_UD_FIELDr_OVER1Gf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access UD_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_UD_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_UD_FIELDr,(_r._ud_field))
#define BCMI_HYPERLITE_XGXS_WRITE_UD_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_UD_FIELDr,(_r._ud_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UD_FIELDr BCMI_HYPERLITE_XGXS_UD_FIELDr
#define UD_FIELDr_SIZE BCMI_HYPERLITE_XGXS_UD_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_UD_FIELDr_t UD_FIELDr_t;
#define UD_FIELDr_CLR BCMI_HYPERLITE_XGXS_UD_FIELDr_CLR
#define UD_FIELDr_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_SET
#define UD_FIELDr_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_GET
#define UD_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_RESERVED0f_GET
#define UD_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_RESERVED0f_SET
#define UD_FIELDr_UD_RESERVEDf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_UD_RESERVEDf_GET
#define UD_FIELDr_UD_RESERVEDf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_UD_RESERVEDf_SET
#define UD_FIELDr_REMOTE_BN_PAGEf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_BN_PAGEf_GET
#define UD_FIELDr_REMOTE_BN_PAGEf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_BN_PAGEf_SET
#define UD_FIELDr_INBAND_MDIOf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_INBAND_MDIOf_GET
#define UD_FIELDr_INBAND_MDIOf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_INBAND_MDIOf_SET
#define UD_FIELDr_AUTONEG_MDIOf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_AUTONEG_MDIOf_GET
#define UD_FIELDr_AUTONEG_MDIOf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_AUTONEG_MDIOf_SET
#define UD_FIELDr_REMOTE_SERDES_PHYf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_SERDES_PHYf_GET
#define UD_FIELDr_REMOTE_SERDES_PHYf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_SERDES_PHYf_SET
#define UD_FIELDr_REMOTE_CU_PHYf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_CU_PHYf_GET
#define UD_FIELDr_REMOTE_CU_PHYf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_REMOTE_CU_PHYf_SET
#define UD_FIELDr_OVER1Gf_GET BCMI_HYPERLITE_XGXS_UD_FIELDr_OVER1Gf_GET
#define UD_FIELDr_OVER1Gf_SET BCMI_HYPERLITE_XGXS_UD_FIELDr_OVER1Gf_SET
#define READ_UD_FIELDr BCMI_HYPERLITE_XGXS_READ_UD_FIELDr
#define WRITE_UD_FIELDr BCMI_HYPERLITE_XGXS_WRITE_UD_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_UD_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_OUI_MSB_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8358
 * DESC:     Link partner's 11 MSbits of the oui, oui[23:13]
 * SIZE:     32
 * FIELDS:
 *     OUI_MSB_FIELD    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr (0x00035018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_OUI_MSB_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_oui_msb_field[1];
	uint32_t _lp_oui_msb_field;
} BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_CLR(r) (r).lp_oui_msb_field[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_SET(r,d) (r).lp_oui_msb_field[0] = d
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_GET(r) (r).lp_oui_msb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_RESERVED0f_GET(r) ((((r).lp_oui_msb_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_RESERVED0f_SET(r,f) (r).lp_oui_msb_field[0]=(((r).lp_oui_msb_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET(r) (((r).lp_oui_msb_field[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET(r,f) (r).lp_oui_msb_field[0]=(((r).lp_oui_msb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_OUI_MSB_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_OUI_MSB_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr,(_r._lp_oui_msb_field))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_OUI_MSB_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr,(_r._lp_oui_msb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr
#define LP_OUI_MSB_FIELDr_SIZE BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_t LP_OUI_MSB_FIELDr_t;
#define LP_OUI_MSB_FIELDr_CLR BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_CLR
#define LP_OUI_MSB_FIELDr_SET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_SET
#define LP_OUI_MSB_FIELDr_GET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_GET
#define LP_OUI_MSB_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_RESERVED0f_GET
#define LP_OUI_MSB_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_RESERVED0f_SET
#define LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_GET
#define LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr_OUI_MSB_FIELDf_SET
#define READ_LP_OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_READ_LP_OUI_MSB_FIELDr
#define WRITE_LP_OUI_MSB_FIELDr BCMI_HYPERLITE_XGXS_WRITE_LP_OUI_MSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_OUI_MSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_OUI_LSB_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x8359
 * DESC:     Link partner's 11 middle bits of the oui, oui[12:2]
 * SIZE:     32
 * FIELDS:
 *     OUI_LSB_FIELD    
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr (0x00035019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_OUI_LSB_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_oui_lsb_field[1];
	uint32_t _lp_oui_lsb_field;
} BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_CLR(r) (r).lp_oui_lsb_field[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_SET(r,d) (r).lp_oui_lsb_field[0] = d
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_GET(r) (r).lp_oui_lsb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_RESERVED0f_GET(r) ((((r).lp_oui_lsb_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_RESERVED0f_SET(r,f) (r).lp_oui_lsb_field[0]=(((r).lp_oui_lsb_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET(r) (((r).lp_oui_lsb_field[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET(r,f) (r).lp_oui_lsb_field[0]=(((r).lp_oui_lsb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_OUI_LSB_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_OUI_LSB_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr,(_r._lp_oui_lsb_field))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_OUI_LSB_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr,(_r._lp_oui_lsb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr
#define LP_OUI_LSB_FIELDr_SIZE BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_t LP_OUI_LSB_FIELDr_t;
#define LP_OUI_LSB_FIELDr_CLR BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_CLR
#define LP_OUI_LSB_FIELDr_SET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_SET
#define LP_OUI_LSB_FIELDr_GET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_GET
#define LP_OUI_LSB_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_RESERVED0f_GET
#define LP_OUI_LSB_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_RESERVED0f_SET
#define LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_GET
#define LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr_OUI_LSB_FIELDf_SET
#define READ_LP_OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_READ_LP_OUI_LSB_FIELDr
#define WRITE_LP_OUI_LSB_FIELDr BCMI_HYPERLITE_XGXS_WRITE_LP_OUI_LSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_OUI_LSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_BAM_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x835a
 * DESC:     Link partner's 2 LSbits of the oui, oui[1:0]
 * SIZE:     32
 * FIELDS:
 *     BAM_FIELD        
 *     OUI_1_0          
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr (0x0003501a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_BAM_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_bam_field[1];
	uint32_t _lp_bam_field;
} BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_CLR(r) (r).lp_bam_field[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_SET(r,d) (r).lp_bam_field[0] = d
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_GET(r) (r).lp_bam_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_RESERVED0f_GET(r) ((((r).lp_bam_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_RESERVED0f_SET(r,f) (r).lp_bam_field[0]=(((r).lp_bam_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_OUI_1_0f_GET(r) ((((r).lp_bam_field[0]) >> 9) & 0x3)
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_OUI_1_0f_SET(r,f) (r).lp_bam_field[0]=(((r).lp_bam_field[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_BAM_FIELDf_GET(r) (((r).lp_bam_field[0]) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_BAM_FIELDf_SET(r,f) (r).lp_bam_field[0]=(((r).lp_bam_field[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access LP_BAM_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_BAM_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr,(_r._lp_bam_field))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_BAM_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr,(_r._lp_bam_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_BAM_FIELDr BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr
#define LP_BAM_FIELDr_SIZE BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_t LP_BAM_FIELDr_t;
#define LP_BAM_FIELDr_CLR BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_CLR
#define LP_BAM_FIELDr_SET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_SET
#define LP_BAM_FIELDr_GET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_GET
#define LP_BAM_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_RESERVED0f_GET
#define LP_BAM_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_RESERVED0f_SET
#define LP_BAM_FIELDr_OUI_1_0f_GET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_OUI_1_0f_GET
#define LP_BAM_FIELDr_OUI_1_0f_SET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_OUI_1_0f_SET
#define LP_BAM_FIELDr_BAM_FIELDf_GET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_BAM_FIELDf_GET
#define LP_BAM_FIELDr_BAM_FIELDf_SET BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr_BAM_FIELDf_SET
#define READ_LP_BAM_FIELDr BCMI_HYPERLITE_XGXS_READ_LP_BAM_FIELDr
#define WRITE_LP_BAM_FIELDr BCMI_HYPERLITE_XGXS_WRITE_LP_BAM_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_BAM_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  LP_UD_FIELD
 * BLOCKS:   DIGITAL6
 * REGADDR:  0x835b
 * DESC:     Link partner's User defined field of MP5
 * SIZE:     32
 * FIELDS:
 *     OVER1G           
 *     REMOTE_CU_PHY    
 *     REMOTE_SERDES_PHY 
 *     AUTONEG_MDIO     
 *     INBAND_MDIO      
 *     REMOTE_BN_PAGE   
 *     UD_RESERVED      
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr (0x0003501b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_UD_FIELD.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_ud_field[1];
	uint32_t _lp_ud_field;
} BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_t;

#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_CLR(r) (r).lp_ud_field[0] = 0
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_SET(r,d) (r).lp_ud_field[0] = d
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_GET(r) (r).lp_ud_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_RESERVED0f_GET(r) ((((r).lp_ud_field[0]) >> 11) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_RESERVED0f_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_UD_RESERVEDf_GET(r) ((((r).lp_ud_field[0]) >> 6) & 0x1f)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_UD_RESERVEDf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_BN_PAGEf_GET(r) ((((r).lp_ud_field[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_BN_PAGEf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_INBAND_MDIOf_GET(r) ((((r).lp_ud_field[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_INBAND_MDIOf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_AUTONEG_MDIOf_GET(r) ((((r).lp_ud_field[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_AUTONEG_MDIOf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_SERDES_PHYf_GET(r) ((((r).lp_ud_field[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_SERDES_PHYf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_CU_PHYf_GET(r) ((((r).lp_ud_field[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_CU_PHYf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_OVER1Gf_GET(r) (((r).lp_ud_field[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_OVER1Gf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LP_UD_FIELD.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_LP_UD_FIELDr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_LP_UD_FIELDr,(_r._lp_ud_field))
#define BCMI_HYPERLITE_XGXS_WRITE_LP_UD_FIELDr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_LP_UD_FIELDr,(_r._lp_ud_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UD_FIELDr BCMI_HYPERLITE_XGXS_LP_UD_FIELDr
#define LP_UD_FIELDr_SIZE BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_SIZE
typedef BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_t LP_UD_FIELDr_t;
#define LP_UD_FIELDr_CLR BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_CLR
#define LP_UD_FIELDr_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_SET
#define LP_UD_FIELDr_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_GET
#define LP_UD_FIELDr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_RESERVED0f_GET
#define LP_UD_FIELDr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_RESERVED0f_SET
#define LP_UD_FIELDr_UD_RESERVEDf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_UD_RESERVEDf_GET
#define LP_UD_FIELDr_UD_RESERVEDf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_UD_RESERVEDf_SET
#define LP_UD_FIELDr_REMOTE_BN_PAGEf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_BN_PAGEf_GET
#define LP_UD_FIELDr_REMOTE_BN_PAGEf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_BN_PAGEf_SET
#define LP_UD_FIELDr_INBAND_MDIOf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_INBAND_MDIOf_GET
#define LP_UD_FIELDr_INBAND_MDIOf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_INBAND_MDIOf_SET
#define LP_UD_FIELDr_AUTONEG_MDIOf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_AUTONEG_MDIOf_GET
#define LP_UD_FIELDr_AUTONEG_MDIOf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_AUTONEG_MDIOf_SET
#define LP_UD_FIELDr_REMOTE_SERDES_PHYf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_SERDES_PHYf_GET
#define LP_UD_FIELDr_REMOTE_SERDES_PHYf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_SERDES_PHYf_SET
#define LP_UD_FIELDr_REMOTE_CU_PHYf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_CU_PHYf_GET
#define LP_UD_FIELDr_REMOTE_CU_PHYf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_REMOTE_CU_PHYf_SET
#define LP_UD_FIELDr_OVER1Gf_GET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_OVER1Gf_GET
#define LP_UD_FIELDr_OVER1Gf_SET BCMI_HYPERLITE_XGXS_LP_UD_FIELDr_OVER1Gf_SET
#define READ_LP_UD_FIELDr BCMI_HYPERLITE_XGXS_READ_LP_UD_FIELDr
#define WRITE_LP_UD_FIELDr BCMI_HYPERLITE_XGXS_WRITE_LP_UD_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_LP_UD_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_UCTRL1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8370
 * DESC:     Clause 73 user control
 * SIZE:     32
 * FIELDS:
 *     FORCE_CL73_TX_OMUX_EN 
 *     CL73_USTAT1_MUXSEL 
 *     COUPLE_W_CL37_RESTART 
 *     COUPLE_W_CL73_RESTART 
 *     COUPLE_W_CL73_RESTART_WO_LINK_FAIL 
 *     CL73_NONCE_MATCH_VAL 
 *     CL73_NONCE_MATCH_OVER 
 *     LINKFAILTIMERQUAL_EN 
 *     LINKFAILTIMER_DIS 
 *     LONGPARDETTIMER_DIS 
 *     CL73_ALLOWCL37AN 
 *     CL73_PARDET_DIS  
 *     CL73_LOSSOFSYNCFAIL_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r (0x00037010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_UCTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_s {
	uint32_t v[1];
	uint32_t cl73_uctrl1[1];
	uint32_t _cl73_uctrl1;
} BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_t;

#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CLR(r) (r).cl73_uctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_SET(r,d) (r).cl73_uctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_GET(r) (r).cl73_uctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_RESERVED0f_GET(r) ((((r).cl73_uctrl1[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_RESERVED0f_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET(r) ((((r).cl73_uctrl1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_PARDET_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_PARDET_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET(r) ((((r).cl73_uctrl1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMER_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMER_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET(r) ((((r).cl73_uctrl1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET(r) ((((r).cl73_uctrl1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET(r) ((((r).cl73_uctrl1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET(r) ((((r).cl73_uctrl1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET(r) ((((r).cl73_uctrl1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET(r) ((((r).cl73_uctrl1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET(r) ((((r).cl73_uctrl1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET(r) (((r).cl73_uctrl1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_UCTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_UCTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_UCTRL1r,(_r._cl73_uctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_UCTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_UCTRL1r,(_r._cl73_uctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_UCTRL1r BCMI_HYPERLITE_XGXS_CL73_UCTRL1r
#define CL73_UCTRL1r_SIZE BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_t CL73_UCTRL1r_t;
#define CL73_UCTRL1r_CLR BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CLR
#define CL73_UCTRL1r_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_SET
#define CL73_UCTRL1r_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_GET
#define CL73_UCTRL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_RESERVED0f_GET
#define CL73_UCTRL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_RESERVED0f_SET
#define CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET
#define CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET
#define CL73_UCTRL1r_CL73_PARDET_DISf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_PARDET_DISf_GET
#define CL73_UCTRL1r_CL73_PARDET_DISf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_PARDET_DISf_SET
#define CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET
#define CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET
#define CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET
#define CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET
#define CL73_UCTRL1r_LINKFAILTIMER_DISf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMER_DISf_GET
#define CL73_UCTRL1r_LINKFAILTIMER_DISf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMER_DISf_SET
#define CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET
#define CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET
#define CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET
#define CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET
#define CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET
#define CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET
#define CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET
#define CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET BCMI_HYPERLITE_XGXS_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET
#define READ_CL73_UCTRL1r BCMI_HYPERLITE_XGXS_READ_CL73_UCTRL1r
#define WRITE_CL73_UCTRL1r BCMI_HYPERLITE_XGXS_WRITE_CL73_UCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_UCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_USTAT1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8371
 * DESC:     Clause 73 user status
 * SIZE:     32
 * FIELDS:
 *     ARB_FSM          
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r (0x00037011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_USTAT1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_USTAT1r_s {
	uint32_t v[1];
	uint32_t cl73_ustat1[1];
	uint32_t _cl73_ustat1;
} BCMI_HYPERLITE_XGXS_CL73_USTAT1r_t;

#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_CLR(r) (r).cl73_ustat1[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_SET(r,d) (r).cl73_ustat1[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_GET(r) (r).cl73_ustat1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_RESERVED0f_GET(r) ((((r).cl73_ustat1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_RESERVED0f_SET(r,f) (r).cl73_ustat1[0]=(((r).cl73_ustat1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_ARB_FSMf_GET(r) (((r).cl73_ustat1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_CL73_USTAT1r_ARB_FSMf_SET(r,f) (r).cl73_ustat1[0]=(((r).cl73_ustat1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_USTAT1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_USTAT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_USTAT1r,(_r._cl73_ustat1))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_USTAT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_USTAT1r,(_r._cl73_ustat1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_USTAT1r BCMI_HYPERLITE_XGXS_CL73_USTAT1r
#define CL73_USTAT1r_SIZE BCMI_HYPERLITE_XGXS_CL73_USTAT1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_USTAT1r_t CL73_USTAT1r_t;
#define CL73_USTAT1r_CLR BCMI_HYPERLITE_XGXS_CL73_USTAT1r_CLR
#define CL73_USTAT1r_SET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_SET
#define CL73_USTAT1r_GET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_GET
#define CL73_USTAT1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_RESERVED0f_GET
#define CL73_USTAT1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_RESERVED0f_SET
#define CL73_USTAT1r_ARB_FSMf_GET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_ARB_FSMf_GET
#define CL73_USTAT1r_ARB_FSMf_SET BCMI_HYPERLITE_XGXS_CL73_USTAT1r_ARB_FSMf_SET
#define READ_CL73_USTAT1r BCMI_HYPERLITE_XGXS_READ_CL73_USTAT1r
#define WRITE_CL73_USTAT1r BCMI_HYPERLITE_XGXS_WRITE_CL73_USTAT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_USTAT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMCTRL1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8372
 * DESC:     Clause 73 BAM control 1
 * SIZE:     32
 * FIELDS:
 *     UD_CODE_FIELD    
 *     RESERVED0        
 *     CL73_BAM_TEST_MP5_HALT_STEP 
 *     CL73_BAM_TEST_MP5_HALT_EN 
 *     CL73_BAMNP_AFTER_BP_EN 
 *     CL73_BAM_STATION_MNGR_EN 
 *     CL73_BAMEN       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r (0x00037012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl1[1];
	uint32_t _cl73_bamctrl1;
} BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CLR(r) (r).cl73_bamctrl1[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_SET(r,d) (r).cl73_bamctrl1[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_GET(r) (r).cl73_bamctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET(r) ((((r).cl73_bamctrl1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_RESERVED0f_GET(r) ((((r).cl73_bamctrl1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_RESERVED0f_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_UD_CODE_FIELDf_GET(r) (((r).cl73_bamctrl1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_BAMCTRL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r,(_r._cl73_bamctrl1))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r,(_r._cl73_bamctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL1r BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r
#define CL73_BAMCTRL1r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_t CL73_BAMCTRL1r_t;
#define CL73_BAMCTRL1r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CLR
#define CL73_BAMCTRL1r_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_SET
#define CL73_BAMCTRL1r_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_GET
#define CL73_BAMCTRL1r_CL73_BAMENf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMENf_GET
#define CL73_BAMCTRL1r_CL73_BAMENf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET
#define CL73_BAMCTRL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_RESERVED0f_GET
#define CL73_BAMCTRL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_RESERVED0f_SET
#define CL73_BAMCTRL1r_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_UD_CODE_FIELDf_GET
#define CL73_BAMCTRL1r_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r_UD_CODE_FIELDf_SET
#define READ_CL73_BAMCTRL1r BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL1r
#define WRITE_CL73_BAMCTRL1r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMCTRL2
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8373
 * DESC:     Clause 73 BAM control 2
 * SIZE:     32
 * FIELDS:
 *     UD_CODE_FIELD    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r (0x00037013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl2[1];
	uint32_t _cl73_bamctrl2;
} BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_CLR(r) (r).cl73_bamctrl2[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_SET(r,d) (r).cl73_bamctrl2[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_GET(r) (r).cl73_bamctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_UD_CODE_FIELDf_GET(r) (((r).cl73_bamctrl2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamctrl2[0]=(((r).cl73_bamctrl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMCTRL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r,(_r._cl73_bamctrl2))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r,(_r._cl73_bamctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL2r BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r
#define CL73_BAMCTRL2r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_t CL73_BAMCTRL2r_t;
#define CL73_BAMCTRL2r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_CLR
#define CL73_BAMCTRL2r_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_SET
#define CL73_BAMCTRL2r_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_GET
#define CL73_BAMCTRL2r_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_UD_CODE_FIELDf_GET
#define CL73_BAMCTRL2r_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r_UD_CODE_FIELDf_SET
#define READ_CL73_BAMCTRL2r BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL2r
#define WRITE_CL73_BAMCTRL2r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMCTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMCTRL3
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8374
 * DESC:     Clause 73 BAM control 3
 * SIZE:     32
 * FIELDS:
 *     UD_CODE_FIELD    
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r (0x00037014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl3[1];
	uint32_t _cl73_bamctrl3;
} BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_CLR(r) (r).cl73_bamctrl3[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_SET(r,d) (r).cl73_bamctrl3[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_GET(r) (r).cl73_bamctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_UD_CODE_FIELDf_GET(r) (((r).cl73_bamctrl3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamctrl3[0]=(((r).cl73_bamctrl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMCTRL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r,(_r._cl73_bamctrl3))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r,(_r._cl73_bamctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL3r BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r
#define CL73_BAMCTRL3r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_t CL73_BAMCTRL3r_t;
#define CL73_BAMCTRL3r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_CLR
#define CL73_BAMCTRL3r_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_SET
#define CL73_BAMCTRL3r_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_GET
#define CL73_BAMCTRL3r_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_UD_CODE_FIELDf_GET
#define CL73_BAMCTRL3r_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r_UD_CODE_FIELDf_SET
#define READ_CL73_BAMCTRL3r BCMI_HYPERLITE_XGXS_READ_CL73_BAMCTRL3r
#define WRITE_CL73_BAMCTRL3r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMCTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMCTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMSTAT1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8375
 * DESC:     Clause 73 BAM status 1
 * SIZE:     32
 * FIELDS:
 *     LP_UD_CODE_FIELD 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r (0x00037015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat1[1];
	uint32_t _cl73_bamstat1;
} BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_CLR(r) (r).cl73_bamstat1[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_SET(r,d) (r).cl73_bamstat1[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_GET(r) (r).cl73_bamstat1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_RESERVED0f_GET(r) ((((r).cl73_bamstat1[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_RESERVED0f_SET(r,f) (r).cl73_bamstat1[0]=(((r).cl73_bamstat1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_GET(r) (((r).cl73_bamstat1[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamstat1[0]=(((r).cl73_bamstat1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_BAMSTAT1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r,(_r._cl73_bamstat1))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r,(_r._cl73_bamstat1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT1r BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r
#define CL73_BAMSTAT1r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_t CL73_BAMSTAT1r_t;
#define CL73_BAMSTAT1r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_CLR
#define CL73_BAMSTAT1r_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_SET
#define CL73_BAMSTAT1r_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_GET
#define CL73_BAMSTAT1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_RESERVED0f_GET
#define CL73_BAMSTAT1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_RESERVED0f_SET
#define CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_GET
#define CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r_LP_UD_CODE_FIELDf_SET
#define READ_CL73_BAMSTAT1r BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT1r
#define WRITE_CL73_BAMSTAT1r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMSTAT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMSTAT2
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8376
 * DESC:     Clause 73 BAM status 2
 * SIZE:     32
 * FIELDS:
 *     LP_UD_CODE_FIELD 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r (0x00037016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat2[1];
	uint32_t _cl73_bamstat2;
} BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_CLR(r) (r).cl73_bamstat2[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_SET(r,d) (r).cl73_bamstat2[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_GET(r) (r).cl73_bamstat2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_GET(r) (((r).cl73_bamstat2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamstat2[0]=(((r).cl73_bamstat2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMSTAT2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r,(_r._cl73_bamstat2))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r,(_r._cl73_bamstat2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT2r BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r
#define CL73_BAMSTAT2r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_t CL73_BAMSTAT2r_t;
#define CL73_BAMSTAT2r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_CLR
#define CL73_BAMSTAT2r_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_SET
#define CL73_BAMSTAT2r_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_GET
#define CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_GET
#define CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r_LP_UD_CODE_FIELDf_SET
#define READ_CL73_BAMSTAT2r BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT2r
#define WRITE_CL73_BAMSTAT2r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMSTAT2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CL73_BAMSTAT3
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8377
 * DESC:     Clause 73 BAM status 3
 * SIZE:     32
 * FIELDS:
 *     LP_UD_CODE_FIELD 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r (0x00037017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat3[1];
	uint32_t _cl73_bamstat3;
} BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_t;

#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_CLR(r) (r).cl73_bamstat3[0] = 0
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_SET(r,d) (r).cl73_bamstat3[0] = d
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_GET(r) (r).cl73_bamstat3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_GET(r) (((r).cl73_bamstat3[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_SET(r,f) (r).cl73_bamstat3[0]=(((r).cl73_bamstat3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMSTAT3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r,(_r._cl73_bamstat3))
#define BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r,(_r._cl73_bamstat3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT3r BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r
#define CL73_BAMSTAT3r_SIZE BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_SIZE
typedef BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_t CL73_BAMSTAT3r_t;
#define CL73_BAMSTAT3r_CLR BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_CLR
#define CL73_BAMSTAT3r_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_SET
#define CL73_BAMSTAT3r_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_GET
#define CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_GET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_GET
#define CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_SET BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r_LP_UD_CODE_FIELDf_SET
#define READ_CL73_BAMSTAT3r BCMI_HYPERLITE_XGXS_READ_CL73_BAMSTAT3r
#define WRITE_CL73_BAMSTAT3r BCMI_HYPERLITE_XGXS_WRITE_CL73_BAMSTAT3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CL73_BAMSTAT3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL13
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8380
 * DESC:     State Machine Control 13 Register
 * SIZE:     32
 * FIELDS:
 *     BR_PF_TRN1_TIMEOUT 
 *     BR_PF_TRN2_TIMEOUT 
 *     BR_VGA_TRN2_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r (0x00038010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL13.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL13r_s {
	uint32_t v[1];
	uint32_t sm_ctrl13[1];
	uint32_t _sm_ctrl13;
} BCMI_HYPERLITE_XGXS_SM_CTRL13r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_CLR(r) (r).sm_ctrl13[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_SET(r,d) (r).sm_ctrl13[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_GET(r) (r).sm_ctrl13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_RESERVED0f_GET(r) ((((r).sm_ctrl13[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_RESERVED0f_SET(r,f) (r).sm_ctrl13[0]=(((r).sm_ctrl13[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET(r) ((((r).sm_ctrl13[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET(r,f) (r).sm_ctrl13[0]=(((r).sm_ctrl13[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET(r) ((((r).sm_ctrl13[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET(r,f) (r).sm_ctrl13[0]=(((r).sm_ctrl13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET(r) (((r).sm_ctrl13[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET(r,f) (r).sm_ctrl13[0]=(((r).sm_ctrl13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL13.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL13r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL13r,(_r._sm_ctrl13))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL13r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL13r,(_r._sm_ctrl13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL13r BCMI_HYPERLITE_XGXS_SM_CTRL13r
#define SM_CTRL13r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL13r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL13r_t SM_CTRL13r_t;
#define SM_CTRL13r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL13r_CLR
#define SM_CTRL13r_SET BCMI_HYPERLITE_XGXS_SM_CTRL13r_SET
#define SM_CTRL13r_GET BCMI_HYPERLITE_XGXS_SM_CTRL13r_GET
#define SM_CTRL13r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL13r_RESERVED0f_GET
#define SM_CTRL13r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL13r_RESERVED0f_SET
#define SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET
#define SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET
#define SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET
#define SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET
#define SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET
#define SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET
#define READ_SM_CTRL13r BCMI_HYPERLITE_XGXS_READ_SM_CTRL13r
#define WRITE_SM_CTRL13r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL14
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8381
 * DESC:     State Machine Control 14 Register
 * SIZE:     32
 * FIELDS:
 *     OSX2_PF_TAP_EN   
 *     BR_POSTC_TAP_EN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r (0x00038011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL14.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL14r_s {
	uint32_t v[1];
	uint32_t sm_ctrl14[1];
	uint32_t _sm_ctrl14;
} BCMI_HYPERLITE_XGXS_SM_CTRL14r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_CLR(r) (r).sm_ctrl14[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_SET(r,d) (r).sm_ctrl14[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_GET(r) (r).sm_ctrl14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_RESERVED0f_GET(r) ((((r).sm_ctrl14[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_RESERVED0f_SET(r,f) (r).sm_ctrl14[0]=(((r).sm_ctrl14[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_BR_POSTC_TAP_ENf_GET(r) ((((r).sm_ctrl14[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_BR_POSTC_TAP_ENf_SET(r,f) (r).sm_ctrl14[0]=(((r).sm_ctrl14[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_OSX2_PF_TAP_ENf_GET(r) (((r).sm_ctrl14[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL14r_OSX2_PF_TAP_ENf_SET(r,f) (r).sm_ctrl14[0]=(((r).sm_ctrl14[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access SM_CTRL14.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL14r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL14r,(_r._sm_ctrl14))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL14r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL14r,(_r._sm_ctrl14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL14r BCMI_HYPERLITE_XGXS_SM_CTRL14r
#define SM_CTRL14r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL14r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL14r_t SM_CTRL14r_t;
#define SM_CTRL14r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL14r_CLR
#define SM_CTRL14r_SET BCMI_HYPERLITE_XGXS_SM_CTRL14r_SET
#define SM_CTRL14r_GET BCMI_HYPERLITE_XGXS_SM_CTRL14r_GET
#define SM_CTRL14r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL14r_RESERVED0f_GET
#define SM_CTRL14r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL14r_RESERVED0f_SET
#define SM_CTRL14r_BR_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL14r_BR_POSTC_TAP_ENf_GET
#define SM_CTRL14r_BR_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL14r_BR_POSTC_TAP_ENf_SET
#define SM_CTRL14r_OSX2_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL14r_OSX2_PF_TAP_ENf_GET
#define SM_CTRL14r_OSX2_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL14r_OSX2_PF_TAP_ENf_SET
#define READ_SM_CTRL14r BCMI_HYPERLITE_XGXS_READ_SM_CTRL14r
#define WRITE_SM_CTRL14r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL15
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8382
 * DESC:     State Machine Control 15 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_POSTC_TAP_EN 
 *     OSX2_POSTC_TAP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r (0x00038012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL15.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL15r_s {
	uint32_t v[1];
	uint32_t sm_ctrl15[1];
	uint32_t _sm_ctrl15;
} BCMI_HYPERLITE_XGXS_SM_CTRL15r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_CLR(r) (r).sm_ctrl15[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_SET(r,d) (r).sm_ctrl15[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_GET(r) (r).sm_ctrl15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_RESERVED0f_GET(r) ((((r).sm_ctrl15[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_RESERVED0f_SET(r,f) (r).sm_ctrl15[0]=(((r).sm_ctrl15[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET(r) ((((r).sm_ctrl15[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET(r,f) (r).sm_ctrl15[0]=(((r).sm_ctrl15[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET(r) (((r).sm_ctrl15[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET(r,f) (r).sm_ctrl15[0]=(((r).sm_ctrl15[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access SM_CTRL15.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL15r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL15r,(_r._sm_ctrl15))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL15r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL15r,(_r._sm_ctrl15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL15r BCMI_HYPERLITE_XGXS_SM_CTRL15r
#define SM_CTRL15r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL15r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL15r_t SM_CTRL15r_t;
#define SM_CTRL15r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL15r_CLR
#define SM_CTRL15r_SET BCMI_HYPERLITE_XGXS_SM_CTRL15r_SET
#define SM_CTRL15r_GET BCMI_HYPERLITE_XGXS_SM_CTRL15r_GET
#define SM_CTRL15r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL15r_RESERVED0f_GET
#define SM_CTRL15r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL15r_RESERVED0f_SET
#define SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET
#define SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET
#define SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET
#define SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET
#define READ_SM_CTRL15r BCMI_HYPERLITE_XGXS_READ_SM_CTRL15r
#define WRITE_SM_CTRL15r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL16
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8383
 * DESC:     State Machine Control 16 Register
 * SIZE:     32
 * FIELDS:
 *     DEFAULT_TRN2_TIMEOUT 
 *     MSR_SLICER_FAST_TIMEOUT 
 *     MSR_SLICER_SLOW_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r (0x00038013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL16.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL16r_s {
	uint32_t v[1];
	uint32_t sm_ctrl16[1];
	uint32_t _sm_ctrl16;
} BCMI_HYPERLITE_XGXS_SM_CTRL16r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_CLR(r) (r).sm_ctrl16[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_SET(r,d) (r).sm_ctrl16[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_GET(r) (r).sm_ctrl16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_RESERVED0f_GET(r) ((((r).sm_ctrl16[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_RESERVED0f_SET(r,f) (r).sm_ctrl16[0]=(((r).sm_ctrl16[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET(r) ((((r).sm_ctrl16[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET(r,f) (r).sm_ctrl16[0]=(((r).sm_ctrl16[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET(r) ((((r).sm_ctrl16[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET(r,f) (r).sm_ctrl16[0]=(((r).sm_ctrl16[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET(r) (((r).sm_ctrl16[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET(r,f) (r).sm_ctrl16[0]=(((r).sm_ctrl16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access SM_CTRL16.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL16r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL16r,(_r._sm_ctrl16))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL16r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL16r,(_r._sm_ctrl16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL16r BCMI_HYPERLITE_XGXS_SM_CTRL16r
#define SM_CTRL16r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL16r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL16r_t SM_CTRL16r_t;
#define SM_CTRL16r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL16r_CLR
#define SM_CTRL16r_SET BCMI_HYPERLITE_XGXS_SM_CTRL16r_SET
#define SM_CTRL16r_GET BCMI_HYPERLITE_XGXS_SM_CTRL16r_GET
#define SM_CTRL16r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL16r_RESERVED0f_GET
#define SM_CTRL16r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL16r_RESERVED0f_SET
#define SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET
#define SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET
#define SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET
#define SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET
#define SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET
#define SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET
#define READ_SM_CTRL16r BCMI_HYPERLITE_XGXS_READ_SM_CTRL16r
#define WRITE_SM_CTRL16r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_CTRL17
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8384
 * DESC:     State Machine Control 17 Register
 * SIZE:     32
 * FIELDS:
 *     BYPASS_OSX2_SLICER_CAL 
 *     BYPASS_OSX1_SLICER_CAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r (0x00038014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_SIZE 4

/*
 * This structure should be used to declare and program SM_CTRL17.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_CTRL17r_s {
	uint32_t v[1];
	uint32_t sm_ctrl17[1];
	uint32_t _sm_ctrl17;
} BCMI_HYPERLITE_XGXS_SM_CTRL17r_t;

#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_CLR(r) (r).sm_ctrl17[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_SET(r,d) (r).sm_ctrl17[0] = d
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_GET(r) (r).sm_ctrl17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_RESERVED0f_GET(r) ((((r).sm_ctrl17[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_RESERVED0f_SET(r,f) (r).sm_ctrl17[0]=(((r).sm_ctrl17[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET(r) ((((r).sm_ctrl17[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET(r,f) (r).sm_ctrl17[0]=(((r).sm_ctrl17[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET(r) (((r).sm_ctrl17[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET(r,f) (r).sm_ctrl17[0]=(((r).sm_ctrl17[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_CTRL17.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_CTRL17r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL17r,(_r._sm_ctrl17))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL17r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_CTRL17r,(_r._sm_ctrl17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_CTRL17r BCMI_HYPERLITE_XGXS_SM_CTRL17r
#define SM_CTRL17r_SIZE BCMI_HYPERLITE_XGXS_SM_CTRL17r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_CTRL17r_t SM_CTRL17r_t;
#define SM_CTRL17r_CLR BCMI_HYPERLITE_XGXS_SM_CTRL17r_CLR
#define SM_CTRL17r_SET BCMI_HYPERLITE_XGXS_SM_CTRL17r_SET
#define SM_CTRL17r_GET BCMI_HYPERLITE_XGXS_SM_CTRL17r_GET
#define SM_CTRL17r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_SM_CTRL17r_RESERVED0f_GET
#define SM_CTRL17r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_SM_CTRL17r_RESERVED0f_SET
#define SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET
#define SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET
#define SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET
#define SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET
#define READ_SM_CTRL17r BCMI_HYPERLITE_XGXS_READ_SM_CTRL17r
#define WRITE_SM_CTRL17r BCMI_HYPERLITE_XGXS_WRITE_SM_CTRL17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_CTRL17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS7
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8385
 * DESC:     State Machine Status 7 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE_ONE_HOT_0 
 *     DSC_STATE_ONE_HOT_1 
 *     DSC_STATE_ONE_HOT_2 
 *     DSC_STATE_ONE_HOT_3 
 *     DSC_STATE_ONE_HOT_4 
 *     DSC_STATE_ONE_HOT_5 
 *     DSC_STATE_ONE_HOT_6 
 *     DSC_STATE_ONE_HOT_7 
 *     DSC_STATE_ONE_HOT_8 
 *     DSC_STATE_ONE_HOT_9 
 *     DSC_STATE_ONE_HOT_10 
 *     DSC_STATE_ONE_HOT_11 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r (0x00038015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS7r_s {
	uint32_t v[1];
	uint32_t sm_status7[1];
	uint32_t _sm_status7;
} BCMI_HYPERLITE_XGXS_SM_STATUS7r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_CLR(r) (r).sm_status7[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_SET(r,d) (r).sm_status7[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_GET(r) (r).sm_status7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status7[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET(r) ((((r).sm_status7[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET(r) ((((r).sm_status7[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET(r) ((((r).sm_status7[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET(r) ((((r).sm_status7[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET(r) ((((r).sm_status7[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET(r) ((((r).sm_status7[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET(r) ((((r).sm_status7[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET(r) ((((r).sm_status7[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET(r) ((((r).sm_status7[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET(r) ((((r).sm_status7[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET(r) ((((r).sm_status7[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET(r) (((r).sm_status7[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET(r,f) (r).sm_status7[0]=(((r).sm_status7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_STATUS7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS7r,(_r._sm_status7))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS7r,(_r._sm_status7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS7r BCMI_HYPERLITE_XGXS_SM_STATUS7r
#define SM_STATUS7r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS7r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS7r_t SM_STATUS7r_t;
#define SM_STATUS7r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS7r_CLR
#define SM_STATUS7r_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_SET
#define SM_STATUS7r_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_GET
#define SM_STATUS7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET
#define SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET
#define READ_SM_STATUS7r BCMI_HYPERLITE_XGXS_READ_SM_STATUS7r
#define WRITE_SM_STATUS7r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS8
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8386
 * DESC:     State Machine Status 8 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_STATE_ONE_HOT_0 
 *     TUNING_STATE_ONE_HOT_1 
 *     TUNING_STATE_ONE_HOT_2 
 *     TUNING_STATE_ONE_HOT_3 
 *     TUNING_STATE_ONE_HOT_4 
 *     TUNING_STATE_ONE_HOT_5 
 *     TUNING_STATE_ONE_HOT_6 
 *     TUNING_STATE_ONE_HOT_7 
 *     TUNING_STATE_ONE_HOT_8 
 *     TUNING_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_10 
 *     TUNING_STATE_ONE_HOT_11 
 *     TUNING_STATE_ONE_HOT_12 
 *     TUNING_STATE_ONE_HOT_13 
 *     TUNING_STATE_ONE_HOT_14 
 *     TUNING_STATE_ONE_HOT_15 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r (0x00038016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS8r_s {
	uint32_t v[1];
	uint32_t sm_status8[1];
	uint32_t _sm_status8;
} BCMI_HYPERLITE_XGXS_SM_STATUS8r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_CLR(r) (r).sm_status8[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_SET(r,d) (r).sm_status8[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_GET(r) (r).sm_status8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET(r) ((((r).sm_status8[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET(r) ((((r).sm_status8[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET(r) ((((r).sm_status8[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET(r) ((((r).sm_status8[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET(r) ((((r).sm_status8[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET(r) ((((r).sm_status8[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET(r) ((((r).sm_status8[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET(r) ((((r).sm_status8[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET(r) ((((r).sm_status8[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET(r) ((((r).sm_status8[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET(r) ((((r).sm_status8[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET(r) ((((r).sm_status8[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET(r) ((((r).sm_status8[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET(r) ((((r).sm_status8[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET(r) ((((r).sm_status8[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET(r) (((r).sm_status8[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET(r,f) (r).sm_status8[0]=(((r).sm_status8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_STATUS8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS8r,(_r._sm_status8))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS8r,(_r._sm_status8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS8r BCMI_HYPERLITE_XGXS_SM_STATUS8r
#define SM_STATUS8r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS8r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS8r_t SM_STATUS8r_t;
#define SM_STATUS8r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS8r_CLR
#define SM_STATUS8r_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_SET
#define SM_STATUS8r_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET
#define SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET
#define READ_SM_STATUS8r BCMI_HYPERLITE_XGXS_READ_SM_STATUS8r
#define WRITE_SM_STATUS8r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  SM_STATUS9
 * BLOCKS:   DSC4B0
 * REGADDR:  0x8387
 * DESC:     State Machine Status 9 Register
 * SIZE:     32
 * FIELDS:
 *     SRCH_STATE_ONE_HOT_0 
 *     SRCH_STATE_ONE_HOT_1 
 *     SRCH_STATE_ONE_HOT_2 
 *     SRCH_STATE_ONE_HOT_3 
 *     SRCH_STATE_ONE_HOT_4 
 *     SRCH_STATE_ONE_HOT_5 
 *     SRCH_STATE_ONE_HOT_6 
 *     SRCH_STATE_ONE_HOT_7 
 *     SRCH_STATE_ONE_HOT_8 
 *     SRCH_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_16 
 *     TUNING_STATE_ONE_HOT_17 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r (0x00038017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SIZE 4

/*
 * This structure should be used to declare and program SM_STATUS9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_SM_STATUS9r_s {
	uint32_t v[1];
	uint32_t sm_status9[1];
	uint32_t _sm_status9;
} BCMI_HYPERLITE_XGXS_SM_STATUS9r_t;

#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_CLR(r) (r).sm_status9[0] = 0
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SET(r,d) (r).sm_status9[0] = d
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_GET(r) (r).sm_status9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_RESERVED_FOR_ECO0f_GET(r) ((((r).sm_status9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_RESERVED_FOR_ECO0f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET(r) ((((r).sm_status9[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET(r) ((((r).sm_status9[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET(r) ((((r).sm_status9[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET(r) ((((r).sm_status9[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET(r) ((((r).sm_status9[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET(r) ((((r).sm_status9[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET(r) ((((r).sm_status9[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET(r) ((((r).sm_status9[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET(r) ((((r).sm_status9[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET(r) ((((r).sm_status9[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET(r) ((((r).sm_status9[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET(r) (((r).sm_status9[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET(r,f) (r).sm_status9[0]=(((r).sm_status9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SM_STATUS9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_SM_STATUS9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS9r,(_r._sm_status9))
#define BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_SM_STATUS9r,(_r._sm_status9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SM_STATUS9r BCMI_HYPERLITE_XGXS_SM_STATUS9r
#define SM_STATUS9r_SIZE BCMI_HYPERLITE_XGXS_SM_STATUS9r_SIZE
typedef BCMI_HYPERLITE_XGXS_SM_STATUS9r_t SM_STATUS9r_t;
#define SM_STATUS9r_CLR BCMI_HYPERLITE_XGXS_SM_STATUS9r_CLR
#define SM_STATUS9r_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SET
#define SM_STATUS9r_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_GET
#define SM_STATUS9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_RESERVED_FOR_ECO0f_GET
#define SM_STATUS9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_RESERVED_FOR_ECO0f_SET
#define SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET
#define SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET
#define SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET
#define SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET
#define SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET
#define READ_SM_STATUS9r BCMI_HYPERLITE_XGXS_READ_SM_STATUS9r
#define WRITE_SM_STATUS9r BCMI_HYPERLITE_XGXS_WRITE_SM_STATUS9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_SM_STATUS9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_CTRL13
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8390
 * DESC:     State Machine Control 13 Register
 * SIZE:     32
 * FIELDS:
 *     BR_PF_TRN1_TIMEOUT 
 *     BR_PF_TRN2_TIMEOUT 
 *     BR_VGA_TRN2_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r (0x00039010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_CTRL13.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_ctrl13[1];
	uint32_t _dsc4b1_sm_ctrl13;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_CLR(r) (r).dsc4b1_sm_ctrl13[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_SET(r,d) (r).dsc4b1_sm_ctrl13[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_GET(r) (r).dsc4b1_sm_ctrl13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_RESERVED0f_GET(r) ((((r).dsc4b1_sm_ctrl13[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_RESERVED0f_SET(r,f) (r).dsc4b1_sm_ctrl13[0]=(((r).dsc4b1_sm_ctrl13[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b1_sm_ctrl13[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl13[0]=(((r).dsc4b1_sm_ctrl13[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b1_sm_ctrl13[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl13[0]=(((r).dsc4b1_sm_ctrl13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET(r) (((r).dsc4b1_sm_ctrl13[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl13[0]=(((r).dsc4b1_sm_ctrl13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B1_SM_CTRL13.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL13r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r,(_r._dsc4b1_sm_ctrl13))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL13r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r,(_r._dsc4b1_sm_ctrl13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_CTRL13r BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r
#define DSC4B1_SM_CTRL13r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_t DSC4B1_SM_CTRL13r_t;
#define DSC4B1_SM_CTRL13r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_CLR
#define DSC4B1_SM_CTRL13r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_SET
#define DSC4B1_SM_CTRL13r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_GET
#define DSC4B1_SM_CTRL13r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_RESERVED0f_GET
#define DSC4B1_SM_CTRL13r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_RESERVED0f_SET
#define DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET
#define DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET
#define DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET
#define DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET
#define DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET
#define DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET
#define READ_DSC4B1_SM_CTRL13r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL13r
#define WRITE_DSC4B1_SM_CTRL13r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_CTRL14
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8391
 * DESC:     State Machine Control 14 Register
 * SIZE:     32
 * FIELDS:
 *     OSX2_PF_TAP_EN   
 *     BR_POSTC_TAP_EN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r (0x00039011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_CTRL14.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_ctrl14[1];
	uint32_t _dsc4b1_sm_ctrl14;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_CLR(r) (r).dsc4b1_sm_ctrl14[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_SET(r,d) (r).dsc4b1_sm_ctrl14[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_GET(r) (r).dsc4b1_sm_ctrl14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_RESERVED0f_GET(r) ((((r).dsc4b1_sm_ctrl14[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_RESERVED0f_SET(r,f) (r).dsc4b1_sm_ctrl14[0]=(((r).dsc4b1_sm_ctrl14[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_GET(r) ((((r).dsc4b1_sm_ctrl14[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_SET(r,f) (r).dsc4b1_sm_ctrl14[0]=(((r).dsc4b1_sm_ctrl14[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_GET(r) (((r).dsc4b1_sm_ctrl14[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_SET(r,f) (r).dsc4b1_sm_ctrl14[0]=(((r).dsc4b1_sm_ctrl14[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B1_SM_CTRL14.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL14r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r,(_r._dsc4b1_sm_ctrl14))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL14r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r,(_r._dsc4b1_sm_ctrl14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_CTRL14r BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r
#define DSC4B1_SM_CTRL14r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_t DSC4B1_SM_CTRL14r_t;
#define DSC4B1_SM_CTRL14r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_CLR
#define DSC4B1_SM_CTRL14r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_SET
#define DSC4B1_SM_CTRL14r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_GET
#define DSC4B1_SM_CTRL14r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_RESERVED0f_GET
#define DSC4B1_SM_CTRL14r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_RESERVED0f_SET
#define DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_GET
#define DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_BR_POSTC_TAP_ENf_SET
#define DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_GET
#define DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r_OSX2_PF_TAP_ENf_SET
#define READ_DSC4B1_SM_CTRL14r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL14r
#define WRITE_DSC4B1_SM_CTRL14r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_CTRL15
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8392
 * DESC:     State Machine Control 15 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_POSTC_TAP_EN 
 *     OSX2_POSTC_TAP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r (0x00039012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_CTRL15.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_ctrl15[1];
	uint32_t _dsc4b1_sm_ctrl15;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_CLR(r) (r).dsc4b1_sm_ctrl15[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_SET(r,d) (r).dsc4b1_sm_ctrl15[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_GET(r) (r).dsc4b1_sm_ctrl15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_RESERVED0f_GET(r) ((((r).dsc4b1_sm_ctrl15[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_RESERVED0f_SET(r,f) (r).dsc4b1_sm_ctrl15[0]=(((r).dsc4b1_sm_ctrl15[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET(r) ((((r).dsc4b1_sm_ctrl15[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET(r,f) (r).dsc4b1_sm_ctrl15[0]=(((r).dsc4b1_sm_ctrl15[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET(r) (((r).dsc4b1_sm_ctrl15[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET(r,f) (r).dsc4b1_sm_ctrl15[0]=(((r).dsc4b1_sm_ctrl15[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B1_SM_CTRL15.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL15r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r,(_r._dsc4b1_sm_ctrl15))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL15r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r,(_r._dsc4b1_sm_ctrl15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_CTRL15r BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r
#define DSC4B1_SM_CTRL15r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_t DSC4B1_SM_CTRL15r_t;
#define DSC4B1_SM_CTRL15r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_CLR
#define DSC4B1_SM_CTRL15r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_SET
#define DSC4B1_SM_CTRL15r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_GET
#define DSC4B1_SM_CTRL15r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_RESERVED0f_GET
#define DSC4B1_SM_CTRL15r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_RESERVED0f_SET
#define DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET
#define DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET
#define DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET
#define DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET
#define READ_DSC4B1_SM_CTRL15r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL15r
#define WRITE_DSC4B1_SM_CTRL15r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_CTRL16
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8393
 * DESC:     State Machine Control 16 Register
 * SIZE:     32
 * FIELDS:
 *     DEFAULT_TRN2_TIMEOUT 
 *     MSR_SLICER_FAST_TIMEOUT 
 *     MSR_SLICER_SLOW_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r (0x00039013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_CTRL16.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_ctrl16[1];
	uint32_t _dsc4b1_sm_ctrl16;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_CLR(r) (r).dsc4b1_sm_ctrl16[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_SET(r,d) (r).dsc4b1_sm_ctrl16[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_GET(r) (r).dsc4b1_sm_ctrl16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_RESERVED0f_GET(r) ((((r).dsc4b1_sm_ctrl16[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_RESERVED0f_SET(r,f) (r).dsc4b1_sm_ctrl16[0]=(((r).dsc4b1_sm_ctrl16[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET(r) ((((r).dsc4b1_sm_ctrl16[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl16[0]=(((r).dsc4b1_sm_ctrl16[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET(r) ((((r).dsc4b1_sm_ctrl16[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl16[0]=(((r).dsc4b1_sm_ctrl16[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET(r) (((r).dsc4b1_sm_ctrl16[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b1_sm_ctrl16[0]=(((r).dsc4b1_sm_ctrl16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B1_SM_CTRL16.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL16r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r,(_r._dsc4b1_sm_ctrl16))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL16r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r,(_r._dsc4b1_sm_ctrl16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_CTRL16r BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r
#define DSC4B1_SM_CTRL16r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_t DSC4B1_SM_CTRL16r_t;
#define DSC4B1_SM_CTRL16r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_CLR
#define DSC4B1_SM_CTRL16r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_SET
#define DSC4B1_SM_CTRL16r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_GET
#define DSC4B1_SM_CTRL16r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_RESERVED0f_GET
#define DSC4B1_SM_CTRL16r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_RESERVED0f_SET
#define DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET
#define DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET
#define DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET
#define DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET
#define DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET
#define DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET
#define READ_DSC4B1_SM_CTRL16r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL16r
#define WRITE_DSC4B1_SM_CTRL16r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_CTRL17
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8394
 * DESC:     State Machine Control 17 Register
 * SIZE:     32
 * FIELDS:
 *     BYPASS_OSX2_SLICER_CAL 
 *     BYPASS_OSX1_SLICER_CAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r (0x00039014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_CTRL17.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_ctrl17[1];
	uint32_t _dsc4b1_sm_ctrl17;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_CLR(r) (r).dsc4b1_sm_ctrl17[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_SET(r,d) (r).dsc4b1_sm_ctrl17[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_GET(r) (r).dsc4b1_sm_ctrl17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_RESERVED0f_GET(r) ((((r).dsc4b1_sm_ctrl17[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_RESERVED0f_SET(r,f) (r).dsc4b1_sm_ctrl17[0]=(((r).dsc4b1_sm_ctrl17[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET(r) ((((r).dsc4b1_sm_ctrl17[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET(r,f) (r).dsc4b1_sm_ctrl17[0]=(((r).dsc4b1_sm_ctrl17[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET(r) (((r).dsc4b1_sm_ctrl17[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET(r,f) (r).dsc4b1_sm_ctrl17[0]=(((r).dsc4b1_sm_ctrl17[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B1_SM_CTRL17.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL17r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r,(_r._dsc4b1_sm_ctrl17))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL17r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r,(_r._dsc4b1_sm_ctrl17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_CTRL17r BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r
#define DSC4B1_SM_CTRL17r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_t DSC4B1_SM_CTRL17r_t;
#define DSC4B1_SM_CTRL17r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_CLR
#define DSC4B1_SM_CTRL17r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_SET
#define DSC4B1_SM_CTRL17r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_GET
#define DSC4B1_SM_CTRL17r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_RESERVED0f_GET
#define DSC4B1_SM_CTRL17r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_RESERVED0f_SET
#define DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET
#define DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET
#define DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET
#define DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET
#define READ_DSC4B1_SM_CTRL17r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_CTRL17r
#define WRITE_DSC4B1_SM_CTRL17r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_CTRL17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_CTRL17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_STATUS7
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8395
 * DESC:     State Machine Status 7 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE_ONE_HOT_0 
 *     DSC_STATE_ONE_HOT_1 
 *     DSC_STATE_ONE_HOT_2 
 *     DSC_STATE_ONE_HOT_3 
 *     DSC_STATE_ONE_HOT_4 
 *     DSC_STATE_ONE_HOT_5 
 *     DSC_STATE_ONE_HOT_6 
 *     DSC_STATE_ONE_HOT_7 
 *     DSC_STATE_ONE_HOT_8 
 *     DSC_STATE_ONE_HOT_9 
 *     DSC_STATE_ONE_HOT_10 
 *     DSC_STATE_ONE_HOT_11 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r (0x00039015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_STATUS7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_status7[1];
	uint32_t _dsc4b1_sm_status7;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_CLR(r) (r).dsc4b1_sm_status7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_SET(r,d) (r).dsc4b1_sm_status7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_GET(r) (r).dsc4b1_sm_status7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b1_sm_status7[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b1_sm_status7[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b1_sm_status7[0]=(((r).dsc4b1_sm_status7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B1_SM_STATUS7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r,(_r._dsc4b1_sm_status7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r,(_r._dsc4b1_sm_status7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_STATUS7r BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r
#define DSC4B1_SM_STATUS7r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_t DSC4B1_SM_STATUS7r_t;
#define DSC4B1_SM_STATUS7r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_CLR
#define DSC4B1_SM_STATUS7r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_SET
#define DSC4B1_SM_STATUS7r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_GET
#define DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_GET
#define DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_RESERVED_FOR_ECO0f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET
#define DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET
#define READ_DSC4B1_SM_STATUS7r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS7r
#define WRITE_DSC4B1_SM_STATUS7r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_STATUS8
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8396
 * DESC:     State Machine Status 8 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_STATE_ONE_HOT_0 
 *     TUNING_STATE_ONE_HOT_1 
 *     TUNING_STATE_ONE_HOT_2 
 *     TUNING_STATE_ONE_HOT_3 
 *     TUNING_STATE_ONE_HOT_4 
 *     TUNING_STATE_ONE_HOT_5 
 *     TUNING_STATE_ONE_HOT_6 
 *     TUNING_STATE_ONE_HOT_7 
 *     TUNING_STATE_ONE_HOT_8 
 *     TUNING_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_10 
 *     TUNING_STATE_ONE_HOT_11 
 *     TUNING_STATE_ONE_HOT_12 
 *     TUNING_STATE_ONE_HOT_13 
 *     TUNING_STATE_ONE_HOT_14 
 *     TUNING_STATE_ONE_HOT_15 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r (0x00039016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_STATUS8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_status8[1];
	uint32_t _dsc4b1_sm_status8;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_CLR(r) (r).dsc4b1_sm_status8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_SET(r,d) (r).dsc4b1_sm_status8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_GET(r) (r).dsc4b1_sm_status8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b1_sm_status8[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b1_sm_status8[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b1_sm_status8[0]=(((r).dsc4b1_sm_status8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B1_SM_STATUS8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r,(_r._dsc4b1_sm_status8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r,(_r._dsc4b1_sm_status8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_STATUS8r BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r
#define DSC4B1_SM_STATUS8r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_t DSC4B1_SM_STATUS8r_t;
#define DSC4B1_SM_STATUS8r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_CLR
#define DSC4B1_SM_STATUS8r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_SET
#define DSC4B1_SM_STATUS8r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET
#define DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET
#define READ_DSC4B1_SM_STATUS8r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS8r
#define WRITE_DSC4B1_SM_STATUS8r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B1_SM_STATUS9
 * BLOCKS:   DSC4B1
 * REGADDR:  0x8397
 * DESC:     State Machine Status 9 Register
 * SIZE:     32
 * FIELDS:
 *     SRCH_STATE_ONE_HOT_0 
 *     SRCH_STATE_ONE_HOT_1 
 *     SRCH_STATE_ONE_HOT_2 
 *     SRCH_STATE_ONE_HOT_3 
 *     SRCH_STATE_ONE_HOT_4 
 *     SRCH_STATE_ONE_HOT_5 
 *     SRCH_STATE_ONE_HOT_6 
 *     SRCH_STATE_ONE_HOT_7 
 *     SRCH_STATE_ONE_HOT_8 
 *     SRCH_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_16 
 *     TUNING_STATE_ONE_HOT_17 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r (0x00039017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B1_SM_STATUS9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_s {
	uint32_t v[1];
	uint32_t dsc4b1_sm_status9[1];
	uint32_t _dsc4b1_sm_status9;
} BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_CLR(r) (r).dsc4b1_sm_status9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SET(r,d) (r).dsc4b1_sm_status9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_GET(r) (r).dsc4b1_sm_status9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b1_sm_status9[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b1_sm_status9[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b1_sm_status9[0]=(((r).dsc4b1_sm_status9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B1_SM_STATUS9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r,(_r._dsc4b1_sm_status9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r,(_r._dsc4b1_sm_status9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B1_SM_STATUS9r BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r
#define DSC4B1_SM_STATUS9r_SIZE BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_t DSC4B1_SM_STATUS9r_t;
#define DSC4B1_SM_STATUS9r_CLR BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_CLR
#define DSC4B1_SM_STATUS9r_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SET
#define DSC4B1_SM_STATUS9r_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_GET
#define DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_GET
#define DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_RESERVED_FOR_ECO0f_SET
#define DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET
#define DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET
#define DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET
#define DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET
#define DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET
#define READ_DSC4B1_SM_STATUS9r BCMI_HYPERLITE_XGXS_READ_DSC4B1_SM_STATUS9r
#define WRITE_DSC4B1_SM_STATUS9r BCMI_HYPERLITE_XGXS_WRITE_DSC4B1_SM_STATUS9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B1_SM_STATUS9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_CTRL13
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a0
 * DESC:     State Machine Control 13 Register
 * SIZE:     32
 * FIELDS:
 *     BR_PF_TRN1_TIMEOUT 
 *     BR_PF_TRN2_TIMEOUT 
 *     BR_VGA_TRN2_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r (0x0003a010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_CTRL13.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_ctrl13[1];
	uint32_t _dsc4b2_sm_ctrl13;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_CLR(r) (r).dsc4b2_sm_ctrl13[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_SET(r,d) (r).dsc4b2_sm_ctrl13[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_GET(r) (r).dsc4b2_sm_ctrl13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_RESERVED0f_GET(r) ((((r).dsc4b2_sm_ctrl13[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_RESERVED0f_SET(r,f) (r).dsc4b2_sm_ctrl13[0]=(((r).dsc4b2_sm_ctrl13[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b2_sm_ctrl13[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl13[0]=(((r).dsc4b2_sm_ctrl13[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b2_sm_ctrl13[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl13[0]=(((r).dsc4b2_sm_ctrl13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET(r) (((r).dsc4b2_sm_ctrl13[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl13[0]=(((r).dsc4b2_sm_ctrl13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B2_SM_CTRL13.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL13r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r,(_r._dsc4b2_sm_ctrl13))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL13r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r,(_r._dsc4b2_sm_ctrl13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_CTRL13r BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r
#define DSC4B2_SM_CTRL13r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_t DSC4B2_SM_CTRL13r_t;
#define DSC4B2_SM_CTRL13r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_CLR
#define DSC4B2_SM_CTRL13r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_SET
#define DSC4B2_SM_CTRL13r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_GET
#define DSC4B2_SM_CTRL13r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_RESERVED0f_GET
#define DSC4B2_SM_CTRL13r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_RESERVED0f_SET
#define DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET
#define DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET
#define DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET
#define DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET
#define DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET
#define DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET
#define READ_DSC4B2_SM_CTRL13r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL13r
#define WRITE_DSC4B2_SM_CTRL13r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_CTRL14
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a1
 * DESC:     State Machine Control 14 Register
 * SIZE:     32
 * FIELDS:
 *     OSX2_PF_TAP_EN   
 *     BR_POSTC_TAP_EN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r (0x0003a011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_CTRL14.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_ctrl14[1];
	uint32_t _dsc4b2_sm_ctrl14;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_CLR(r) (r).dsc4b2_sm_ctrl14[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_SET(r,d) (r).dsc4b2_sm_ctrl14[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_GET(r) (r).dsc4b2_sm_ctrl14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_RESERVED0f_GET(r) ((((r).dsc4b2_sm_ctrl14[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_RESERVED0f_SET(r,f) (r).dsc4b2_sm_ctrl14[0]=(((r).dsc4b2_sm_ctrl14[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_GET(r) ((((r).dsc4b2_sm_ctrl14[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_SET(r,f) (r).dsc4b2_sm_ctrl14[0]=(((r).dsc4b2_sm_ctrl14[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_GET(r) (((r).dsc4b2_sm_ctrl14[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_SET(r,f) (r).dsc4b2_sm_ctrl14[0]=(((r).dsc4b2_sm_ctrl14[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B2_SM_CTRL14.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL14r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r,(_r._dsc4b2_sm_ctrl14))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL14r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r,(_r._dsc4b2_sm_ctrl14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_CTRL14r BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r
#define DSC4B2_SM_CTRL14r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_t DSC4B2_SM_CTRL14r_t;
#define DSC4B2_SM_CTRL14r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_CLR
#define DSC4B2_SM_CTRL14r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_SET
#define DSC4B2_SM_CTRL14r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_GET
#define DSC4B2_SM_CTRL14r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_RESERVED0f_GET
#define DSC4B2_SM_CTRL14r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_RESERVED0f_SET
#define DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_GET
#define DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_BR_POSTC_TAP_ENf_SET
#define DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_GET
#define DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r_OSX2_PF_TAP_ENf_SET
#define READ_DSC4B2_SM_CTRL14r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL14r
#define WRITE_DSC4B2_SM_CTRL14r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_CTRL15
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a2
 * DESC:     State Machine Control 15 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_POSTC_TAP_EN 
 *     OSX2_POSTC_TAP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r (0x0003a012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_CTRL15.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_ctrl15[1];
	uint32_t _dsc4b2_sm_ctrl15;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_CLR(r) (r).dsc4b2_sm_ctrl15[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_SET(r,d) (r).dsc4b2_sm_ctrl15[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_GET(r) (r).dsc4b2_sm_ctrl15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_RESERVED0f_GET(r) ((((r).dsc4b2_sm_ctrl15[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_RESERVED0f_SET(r,f) (r).dsc4b2_sm_ctrl15[0]=(((r).dsc4b2_sm_ctrl15[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET(r) ((((r).dsc4b2_sm_ctrl15[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET(r,f) (r).dsc4b2_sm_ctrl15[0]=(((r).dsc4b2_sm_ctrl15[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET(r) (((r).dsc4b2_sm_ctrl15[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET(r,f) (r).dsc4b2_sm_ctrl15[0]=(((r).dsc4b2_sm_ctrl15[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B2_SM_CTRL15.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL15r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r,(_r._dsc4b2_sm_ctrl15))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL15r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r,(_r._dsc4b2_sm_ctrl15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_CTRL15r BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r
#define DSC4B2_SM_CTRL15r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_t DSC4B2_SM_CTRL15r_t;
#define DSC4B2_SM_CTRL15r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_CLR
#define DSC4B2_SM_CTRL15r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_SET
#define DSC4B2_SM_CTRL15r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_GET
#define DSC4B2_SM_CTRL15r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_RESERVED0f_GET
#define DSC4B2_SM_CTRL15r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_RESERVED0f_SET
#define DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET
#define DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET
#define DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET
#define DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET
#define READ_DSC4B2_SM_CTRL15r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL15r
#define WRITE_DSC4B2_SM_CTRL15r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_CTRL16
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a3
 * DESC:     State Machine Control 16 Register
 * SIZE:     32
 * FIELDS:
 *     DEFAULT_TRN2_TIMEOUT 
 *     MSR_SLICER_FAST_TIMEOUT 
 *     MSR_SLICER_SLOW_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r (0x0003a013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_CTRL16.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_ctrl16[1];
	uint32_t _dsc4b2_sm_ctrl16;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_CLR(r) (r).dsc4b2_sm_ctrl16[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_SET(r,d) (r).dsc4b2_sm_ctrl16[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_GET(r) (r).dsc4b2_sm_ctrl16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_RESERVED0f_GET(r) ((((r).dsc4b2_sm_ctrl16[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_RESERVED0f_SET(r,f) (r).dsc4b2_sm_ctrl16[0]=(((r).dsc4b2_sm_ctrl16[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET(r) ((((r).dsc4b2_sm_ctrl16[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl16[0]=(((r).dsc4b2_sm_ctrl16[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET(r) ((((r).dsc4b2_sm_ctrl16[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl16[0]=(((r).dsc4b2_sm_ctrl16[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET(r) (((r).dsc4b2_sm_ctrl16[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b2_sm_ctrl16[0]=(((r).dsc4b2_sm_ctrl16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B2_SM_CTRL16.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL16r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r,(_r._dsc4b2_sm_ctrl16))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL16r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r,(_r._dsc4b2_sm_ctrl16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_CTRL16r BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r
#define DSC4B2_SM_CTRL16r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_t DSC4B2_SM_CTRL16r_t;
#define DSC4B2_SM_CTRL16r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_CLR
#define DSC4B2_SM_CTRL16r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_SET
#define DSC4B2_SM_CTRL16r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_GET
#define DSC4B2_SM_CTRL16r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_RESERVED0f_GET
#define DSC4B2_SM_CTRL16r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_RESERVED0f_SET
#define DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET
#define DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET
#define DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET
#define DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET
#define DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET
#define DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET
#define READ_DSC4B2_SM_CTRL16r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL16r
#define WRITE_DSC4B2_SM_CTRL16r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_CTRL17
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a4
 * DESC:     State Machine Control 17 Register
 * SIZE:     32
 * FIELDS:
 *     BYPASS_OSX2_SLICER_CAL 
 *     BYPASS_OSX1_SLICER_CAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r (0x0003a014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_CTRL17.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_ctrl17[1];
	uint32_t _dsc4b2_sm_ctrl17;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_CLR(r) (r).dsc4b2_sm_ctrl17[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_SET(r,d) (r).dsc4b2_sm_ctrl17[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_GET(r) (r).dsc4b2_sm_ctrl17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_RESERVED0f_GET(r) ((((r).dsc4b2_sm_ctrl17[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_RESERVED0f_SET(r,f) (r).dsc4b2_sm_ctrl17[0]=(((r).dsc4b2_sm_ctrl17[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET(r) ((((r).dsc4b2_sm_ctrl17[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET(r,f) (r).dsc4b2_sm_ctrl17[0]=(((r).dsc4b2_sm_ctrl17[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET(r) (((r).dsc4b2_sm_ctrl17[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET(r,f) (r).dsc4b2_sm_ctrl17[0]=(((r).dsc4b2_sm_ctrl17[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B2_SM_CTRL17.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL17r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r,(_r._dsc4b2_sm_ctrl17))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL17r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r,(_r._dsc4b2_sm_ctrl17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_CTRL17r BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r
#define DSC4B2_SM_CTRL17r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_t DSC4B2_SM_CTRL17r_t;
#define DSC4B2_SM_CTRL17r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_CLR
#define DSC4B2_SM_CTRL17r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_SET
#define DSC4B2_SM_CTRL17r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_GET
#define DSC4B2_SM_CTRL17r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_RESERVED0f_GET
#define DSC4B2_SM_CTRL17r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_RESERVED0f_SET
#define DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET
#define DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET
#define DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET
#define DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET
#define READ_DSC4B2_SM_CTRL17r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_CTRL17r
#define WRITE_DSC4B2_SM_CTRL17r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_CTRL17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_CTRL17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_STATUS7
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a5
 * DESC:     State Machine Status 7 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE_ONE_HOT_0 
 *     DSC_STATE_ONE_HOT_1 
 *     DSC_STATE_ONE_HOT_2 
 *     DSC_STATE_ONE_HOT_3 
 *     DSC_STATE_ONE_HOT_4 
 *     DSC_STATE_ONE_HOT_5 
 *     DSC_STATE_ONE_HOT_6 
 *     DSC_STATE_ONE_HOT_7 
 *     DSC_STATE_ONE_HOT_8 
 *     DSC_STATE_ONE_HOT_9 
 *     DSC_STATE_ONE_HOT_10 
 *     DSC_STATE_ONE_HOT_11 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r (0x0003a015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_STATUS7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_status7[1];
	uint32_t _dsc4b2_sm_status7;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_CLR(r) (r).dsc4b2_sm_status7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_SET(r,d) (r).dsc4b2_sm_status7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_GET(r) (r).dsc4b2_sm_status7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b2_sm_status7[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b2_sm_status7[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b2_sm_status7[0]=(((r).dsc4b2_sm_status7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B2_SM_STATUS7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r,(_r._dsc4b2_sm_status7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r,(_r._dsc4b2_sm_status7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_STATUS7r BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r
#define DSC4B2_SM_STATUS7r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_t DSC4B2_SM_STATUS7r_t;
#define DSC4B2_SM_STATUS7r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_CLR
#define DSC4B2_SM_STATUS7r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_SET
#define DSC4B2_SM_STATUS7r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_GET
#define DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_GET
#define DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_RESERVED_FOR_ECO0f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET
#define DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET
#define READ_DSC4B2_SM_STATUS7r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS7r
#define WRITE_DSC4B2_SM_STATUS7r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_STATUS8
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a6
 * DESC:     State Machine Status 8 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_STATE_ONE_HOT_0 
 *     TUNING_STATE_ONE_HOT_1 
 *     TUNING_STATE_ONE_HOT_2 
 *     TUNING_STATE_ONE_HOT_3 
 *     TUNING_STATE_ONE_HOT_4 
 *     TUNING_STATE_ONE_HOT_5 
 *     TUNING_STATE_ONE_HOT_6 
 *     TUNING_STATE_ONE_HOT_7 
 *     TUNING_STATE_ONE_HOT_8 
 *     TUNING_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_10 
 *     TUNING_STATE_ONE_HOT_11 
 *     TUNING_STATE_ONE_HOT_12 
 *     TUNING_STATE_ONE_HOT_13 
 *     TUNING_STATE_ONE_HOT_14 
 *     TUNING_STATE_ONE_HOT_15 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r (0x0003a016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_STATUS8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_status8[1];
	uint32_t _dsc4b2_sm_status8;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_CLR(r) (r).dsc4b2_sm_status8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_SET(r,d) (r).dsc4b2_sm_status8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_GET(r) (r).dsc4b2_sm_status8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b2_sm_status8[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b2_sm_status8[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b2_sm_status8[0]=(((r).dsc4b2_sm_status8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B2_SM_STATUS8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r,(_r._dsc4b2_sm_status8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r,(_r._dsc4b2_sm_status8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_STATUS8r BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r
#define DSC4B2_SM_STATUS8r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_t DSC4B2_SM_STATUS8r_t;
#define DSC4B2_SM_STATUS8r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_CLR
#define DSC4B2_SM_STATUS8r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_SET
#define DSC4B2_SM_STATUS8r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET
#define DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET
#define READ_DSC4B2_SM_STATUS8r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS8r
#define WRITE_DSC4B2_SM_STATUS8r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B2_SM_STATUS9
 * BLOCKS:   DSC4B2
 * REGADDR:  0x83a7
 * DESC:     State Machine Status 9 Register
 * SIZE:     32
 * FIELDS:
 *     SRCH_STATE_ONE_HOT_0 
 *     SRCH_STATE_ONE_HOT_1 
 *     SRCH_STATE_ONE_HOT_2 
 *     SRCH_STATE_ONE_HOT_3 
 *     SRCH_STATE_ONE_HOT_4 
 *     SRCH_STATE_ONE_HOT_5 
 *     SRCH_STATE_ONE_HOT_6 
 *     SRCH_STATE_ONE_HOT_7 
 *     SRCH_STATE_ONE_HOT_8 
 *     SRCH_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_16 
 *     TUNING_STATE_ONE_HOT_17 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r (0x0003a017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B2_SM_STATUS9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_s {
	uint32_t v[1];
	uint32_t dsc4b2_sm_status9[1];
	uint32_t _dsc4b2_sm_status9;
} BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_CLR(r) (r).dsc4b2_sm_status9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SET(r,d) (r).dsc4b2_sm_status9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_GET(r) (r).dsc4b2_sm_status9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b2_sm_status9[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b2_sm_status9[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b2_sm_status9[0]=(((r).dsc4b2_sm_status9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B2_SM_STATUS9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r,(_r._dsc4b2_sm_status9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r,(_r._dsc4b2_sm_status9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B2_SM_STATUS9r BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r
#define DSC4B2_SM_STATUS9r_SIZE BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_t DSC4B2_SM_STATUS9r_t;
#define DSC4B2_SM_STATUS9r_CLR BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_CLR
#define DSC4B2_SM_STATUS9r_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SET
#define DSC4B2_SM_STATUS9r_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_GET
#define DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_GET
#define DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_RESERVED_FOR_ECO0f_SET
#define DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET
#define DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET
#define DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET
#define DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET
#define DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET
#define READ_DSC4B2_SM_STATUS9r BCMI_HYPERLITE_XGXS_READ_DSC4B2_SM_STATUS9r
#define WRITE_DSC4B2_SM_STATUS9r BCMI_HYPERLITE_XGXS_WRITE_DSC4B2_SM_STATUS9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B2_SM_STATUS9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_CTRL13
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b0
 * DESC:     State Machine Control 13 Register
 * SIZE:     32
 * FIELDS:
 *     BR_PF_TRN1_TIMEOUT 
 *     BR_PF_TRN2_TIMEOUT 
 *     BR_VGA_TRN2_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r (0x0003b010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_CTRL13.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_ctrl13[1];
	uint32_t _dsc4b3_sm_ctrl13;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_CLR(r) (r).dsc4b3_sm_ctrl13[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_SET(r,d) (r).dsc4b3_sm_ctrl13[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_GET(r) (r).dsc4b3_sm_ctrl13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_RESERVED0f_GET(r) ((((r).dsc4b3_sm_ctrl13[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_RESERVED0f_SET(r,f) (r).dsc4b3_sm_ctrl13[0]=(((r).dsc4b3_sm_ctrl13[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b3_sm_ctrl13[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl13[0]=(((r).dsc4b3_sm_ctrl13[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET(r) ((((r).dsc4b3_sm_ctrl13[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl13[0]=(((r).dsc4b3_sm_ctrl13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET(r) (((r).dsc4b3_sm_ctrl13[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl13[0]=(((r).dsc4b3_sm_ctrl13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B3_SM_CTRL13.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL13r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r,(_r._dsc4b3_sm_ctrl13))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL13r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r,(_r._dsc4b3_sm_ctrl13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_CTRL13r BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r
#define DSC4B3_SM_CTRL13r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_t DSC4B3_SM_CTRL13r_t;
#define DSC4B3_SM_CTRL13r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_CLR
#define DSC4B3_SM_CTRL13r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_SET
#define DSC4B3_SM_CTRL13r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_GET
#define DSC4B3_SM_CTRL13r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_RESERVED0f_GET
#define DSC4B3_SM_CTRL13r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_RESERVED0f_SET
#define DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET
#define DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET
#define DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET
#define DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET
#define DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET
#define DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET
#define READ_DSC4B3_SM_CTRL13r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL13r
#define WRITE_DSC4B3_SM_CTRL13r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_CTRL14
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b1
 * DESC:     State Machine Control 14 Register
 * SIZE:     32
 * FIELDS:
 *     OSX2_PF_TAP_EN   
 *     BR_POSTC_TAP_EN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r (0x0003b011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_CTRL14.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_ctrl14[1];
	uint32_t _dsc4b3_sm_ctrl14;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_CLR(r) (r).dsc4b3_sm_ctrl14[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_SET(r,d) (r).dsc4b3_sm_ctrl14[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_GET(r) (r).dsc4b3_sm_ctrl14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_RESERVED0f_GET(r) ((((r).dsc4b3_sm_ctrl14[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_RESERVED0f_SET(r,f) (r).dsc4b3_sm_ctrl14[0]=(((r).dsc4b3_sm_ctrl14[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_GET(r) ((((r).dsc4b3_sm_ctrl14[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_SET(r,f) (r).dsc4b3_sm_ctrl14[0]=(((r).dsc4b3_sm_ctrl14[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_GET(r) (((r).dsc4b3_sm_ctrl14[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_SET(r,f) (r).dsc4b3_sm_ctrl14[0]=(((r).dsc4b3_sm_ctrl14[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B3_SM_CTRL14.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL14r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r,(_r._dsc4b3_sm_ctrl14))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL14r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r,(_r._dsc4b3_sm_ctrl14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_CTRL14r BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r
#define DSC4B3_SM_CTRL14r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_t DSC4B3_SM_CTRL14r_t;
#define DSC4B3_SM_CTRL14r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_CLR
#define DSC4B3_SM_CTRL14r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_SET
#define DSC4B3_SM_CTRL14r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_GET
#define DSC4B3_SM_CTRL14r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_RESERVED0f_GET
#define DSC4B3_SM_CTRL14r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_RESERVED0f_SET
#define DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_GET
#define DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_BR_POSTC_TAP_ENf_SET
#define DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_GET
#define DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r_OSX2_PF_TAP_ENf_SET
#define READ_DSC4B3_SM_CTRL14r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL14r
#define WRITE_DSC4B3_SM_CTRL14r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_CTRL15
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b2
 * DESC:     State Machine Control 15 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_POSTC_TAP_EN 
 *     OSX2_POSTC_TAP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r (0x0003b012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_CTRL15.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_ctrl15[1];
	uint32_t _dsc4b3_sm_ctrl15;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_CLR(r) (r).dsc4b3_sm_ctrl15[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_SET(r,d) (r).dsc4b3_sm_ctrl15[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_GET(r) (r).dsc4b3_sm_ctrl15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_RESERVED0f_GET(r) ((((r).dsc4b3_sm_ctrl15[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_RESERVED0f_SET(r,f) (r).dsc4b3_sm_ctrl15[0]=(((r).dsc4b3_sm_ctrl15[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET(r) ((((r).dsc4b3_sm_ctrl15[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET(r,f) (r).dsc4b3_sm_ctrl15[0]=(((r).dsc4b3_sm_ctrl15[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET(r) (((r).dsc4b3_sm_ctrl15[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET(r,f) (r).dsc4b3_sm_ctrl15[0]=(((r).dsc4b3_sm_ctrl15[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4B3_SM_CTRL15.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL15r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r,(_r._dsc4b3_sm_ctrl15))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL15r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r,(_r._dsc4b3_sm_ctrl15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_CTRL15r BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r
#define DSC4B3_SM_CTRL15r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_t DSC4B3_SM_CTRL15r_t;
#define DSC4B3_SM_CTRL15r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_CLR
#define DSC4B3_SM_CTRL15r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_SET
#define DSC4B3_SM_CTRL15r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_GET
#define DSC4B3_SM_CTRL15r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_RESERVED0f_GET
#define DSC4B3_SM_CTRL15r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_RESERVED0f_SET
#define DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET
#define DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET
#define DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET
#define DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET
#define READ_DSC4B3_SM_CTRL15r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL15r
#define WRITE_DSC4B3_SM_CTRL15r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_CTRL16
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b3
 * DESC:     State Machine Control 16 Register
 * SIZE:     32
 * FIELDS:
 *     DEFAULT_TRN2_TIMEOUT 
 *     MSR_SLICER_FAST_TIMEOUT 
 *     MSR_SLICER_SLOW_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r (0x0003b013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_CTRL16.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_ctrl16[1];
	uint32_t _dsc4b3_sm_ctrl16;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_CLR(r) (r).dsc4b3_sm_ctrl16[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_SET(r,d) (r).dsc4b3_sm_ctrl16[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_GET(r) (r).dsc4b3_sm_ctrl16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_RESERVED0f_GET(r) ((((r).dsc4b3_sm_ctrl16[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_RESERVED0f_SET(r,f) (r).dsc4b3_sm_ctrl16[0]=(((r).dsc4b3_sm_ctrl16[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET(r) ((((r).dsc4b3_sm_ctrl16[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl16[0]=(((r).dsc4b3_sm_ctrl16[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET(r) ((((r).dsc4b3_sm_ctrl16[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl16[0]=(((r).dsc4b3_sm_ctrl16[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET(r) (((r).dsc4b3_sm_ctrl16[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET(r,f) (r).dsc4b3_sm_ctrl16[0]=(((r).dsc4b3_sm_ctrl16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4B3_SM_CTRL16.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL16r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r,(_r._dsc4b3_sm_ctrl16))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL16r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r,(_r._dsc4b3_sm_ctrl16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_CTRL16r BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r
#define DSC4B3_SM_CTRL16r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_t DSC4B3_SM_CTRL16r_t;
#define DSC4B3_SM_CTRL16r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_CLR
#define DSC4B3_SM_CTRL16r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_SET
#define DSC4B3_SM_CTRL16r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_GET
#define DSC4B3_SM_CTRL16r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_RESERVED0f_GET
#define DSC4B3_SM_CTRL16r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_RESERVED0f_SET
#define DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET
#define DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET
#define DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET
#define DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET
#define DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET
#define DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET
#define READ_DSC4B3_SM_CTRL16r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL16r
#define WRITE_DSC4B3_SM_CTRL16r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_CTRL17
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b4
 * DESC:     State Machine Control 17 Register
 * SIZE:     32
 * FIELDS:
 *     BYPASS_OSX2_SLICER_CAL 
 *     BYPASS_OSX1_SLICER_CAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r (0x0003b014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_CTRL17.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_ctrl17[1];
	uint32_t _dsc4b3_sm_ctrl17;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_CLR(r) (r).dsc4b3_sm_ctrl17[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_SET(r,d) (r).dsc4b3_sm_ctrl17[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_GET(r) (r).dsc4b3_sm_ctrl17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_RESERVED0f_GET(r) ((((r).dsc4b3_sm_ctrl17[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_RESERVED0f_SET(r,f) (r).dsc4b3_sm_ctrl17[0]=(((r).dsc4b3_sm_ctrl17[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET(r) ((((r).dsc4b3_sm_ctrl17[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET(r,f) (r).dsc4b3_sm_ctrl17[0]=(((r).dsc4b3_sm_ctrl17[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET(r) (((r).dsc4b3_sm_ctrl17[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET(r,f) (r).dsc4b3_sm_ctrl17[0]=(((r).dsc4b3_sm_ctrl17[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B3_SM_CTRL17.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL17r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r,(_r._dsc4b3_sm_ctrl17))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL17r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r,(_r._dsc4b3_sm_ctrl17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_CTRL17r BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r
#define DSC4B3_SM_CTRL17r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_t DSC4B3_SM_CTRL17r_t;
#define DSC4B3_SM_CTRL17r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_CLR
#define DSC4B3_SM_CTRL17r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_SET
#define DSC4B3_SM_CTRL17r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_GET
#define DSC4B3_SM_CTRL17r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_RESERVED0f_GET
#define DSC4B3_SM_CTRL17r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_RESERVED0f_SET
#define DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET
#define DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET
#define DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET
#define DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET
#define READ_DSC4B3_SM_CTRL17r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_CTRL17r
#define WRITE_DSC4B3_SM_CTRL17r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_CTRL17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_CTRL17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_STATUS7
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b5
 * DESC:     State Machine Status 7 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE_ONE_HOT_0 
 *     DSC_STATE_ONE_HOT_1 
 *     DSC_STATE_ONE_HOT_2 
 *     DSC_STATE_ONE_HOT_3 
 *     DSC_STATE_ONE_HOT_4 
 *     DSC_STATE_ONE_HOT_5 
 *     DSC_STATE_ONE_HOT_6 
 *     DSC_STATE_ONE_HOT_7 
 *     DSC_STATE_ONE_HOT_8 
 *     DSC_STATE_ONE_HOT_9 
 *     DSC_STATE_ONE_HOT_10 
 *     DSC_STATE_ONE_HOT_11 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r (0x0003b015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_STATUS7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_status7[1];
	uint32_t _dsc4b3_sm_status7;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_CLR(r) (r).dsc4b3_sm_status7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_SET(r,d) (r).dsc4b3_sm_status7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_GET(r) (r).dsc4b3_sm_status7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b3_sm_status7[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b3_sm_status7[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b3_sm_status7[0]=(((r).dsc4b3_sm_status7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B3_SM_STATUS7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r,(_r._dsc4b3_sm_status7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r,(_r._dsc4b3_sm_status7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_STATUS7r BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r
#define DSC4B3_SM_STATUS7r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_t DSC4B3_SM_STATUS7r_t;
#define DSC4B3_SM_STATUS7r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_CLR
#define DSC4B3_SM_STATUS7r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_SET
#define DSC4B3_SM_STATUS7r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_GET
#define DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_GET
#define DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_RESERVED_FOR_ECO0f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET
#define DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET
#define READ_DSC4B3_SM_STATUS7r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS7r
#define WRITE_DSC4B3_SM_STATUS7r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_STATUS8
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b6
 * DESC:     State Machine Status 8 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_STATE_ONE_HOT_0 
 *     TUNING_STATE_ONE_HOT_1 
 *     TUNING_STATE_ONE_HOT_2 
 *     TUNING_STATE_ONE_HOT_3 
 *     TUNING_STATE_ONE_HOT_4 
 *     TUNING_STATE_ONE_HOT_5 
 *     TUNING_STATE_ONE_HOT_6 
 *     TUNING_STATE_ONE_HOT_7 
 *     TUNING_STATE_ONE_HOT_8 
 *     TUNING_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_10 
 *     TUNING_STATE_ONE_HOT_11 
 *     TUNING_STATE_ONE_HOT_12 
 *     TUNING_STATE_ONE_HOT_13 
 *     TUNING_STATE_ONE_HOT_14 
 *     TUNING_STATE_ONE_HOT_15 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r (0x0003b016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_STATUS8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_status8[1];
	uint32_t _dsc4b3_sm_status8;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_CLR(r) (r).dsc4b3_sm_status8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_SET(r,d) (r).dsc4b3_sm_status8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_GET(r) (r).dsc4b3_sm_status8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b3_sm_status8[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b3_sm_status8[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b3_sm_status8[0]=(((r).dsc4b3_sm_status8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B3_SM_STATUS8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r,(_r._dsc4b3_sm_status8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r,(_r._dsc4b3_sm_status8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_STATUS8r BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r
#define DSC4B3_SM_STATUS8r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_t DSC4B3_SM_STATUS8r_t;
#define DSC4B3_SM_STATUS8r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_CLR
#define DSC4B3_SM_STATUS8r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_SET
#define DSC4B3_SM_STATUS8r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET
#define DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET
#define READ_DSC4B3_SM_STATUS8r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS8r
#define WRITE_DSC4B3_SM_STATUS8r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4B3_SM_STATUS9
 * BLOCKS:   DSC4B3
 * REGADDR:  0x83b7
 * DESC:     State Machine Status 9 Register
 * SIZE:     32
 * FIELDS:
 *     SRCH_STATE_ONE_HOT_0 
 *     SRCH_STATE_ONE_HOT_1 
 *     SRCH_STATE_ONE_HOT_2 
 *     SRCH_STATE_ONE_HOT_3 
 *     SRCH_STATE_ONE_HOT_4 
 *     SRCH_STATE_ONE_HOT_5 
 *     SRCH_STATE_ONE_HOT_6 
 *     SRCH_STATE_ONE_HOT_7 
 *     SRCH_STATE_ONE_HOT_8 
 *     SRCH_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_16 
 *     TUNING_STATE_ONE_HOT_17 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r (0x0003b017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SIZE 4

/*
 * This structure should be used to declare and program DSC4B3_SM_STATUS9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_s {
	uint32_t v[1];
	uint32_t dsc4b3_sm_status9[1];
	uint32_t _dsc4b3_sm_status9;
} BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_t;

#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_CLR(r) (r).dsc4b3_sm_status9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SET(r,d) (r).dsc4b3_sm_status9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_GET(r) (r).dsc4b3_sm_status9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4b3_sm_status9[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET(r) (((r).dsc4b3_sm_status9[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4b3_sm_status9[0]=(((r).dsc4b3_sm_status9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4B3_SM_STATUS9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r,(_r._dsc4b3_sm_status9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r,(_r._dsc4b3_sm_status9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4B3_SM_STATUS9r BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r
#define DSC4B3_SM_STATUS9r_SIZE BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_t DSC4B3_SM_STATUS9r_t;
#define DSC4B3_SM_STATUS9r_CLR BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_CLR
#define DSC4B3_SM_STATUS9r_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SET
#define DSC4B3_SM_STATUS9r_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_GET
#define DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_GET
#define DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_RESERVED_FOR_ECO0f_SET
#define DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET
#define DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET
#define DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET
#define DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET
#define DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET
#define READ_DSC4B3_SM_STATUS9r BCMI_HYPERLITE_XGXS_READ_DSC4B3_SM_STATUS9r
#define WRITE_DSC4B3_SM_STATUS9r BCMI_HYPERLITE_XGXS_WRITE_DSC4B3_SM_STATUS9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4B3_SM_STATUS9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_CTRL13
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c0
 * DESC:     State Machine Control 13 Register
 * SIZE:     32
 * FIELDS:
 *     BR_PF_TRN1_TIMEOUT 
 *     BR_PF_TRN2_TIMEOUT 
 *     BR_VGA_TRN2_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r (0x0003c010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_CTRL13.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_ctrl13[1];
	uint32_t _dsc4bb_sm_ctrl13;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_CLR(r) (r).dsc4bb_sm_ctrl13[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_SET(r,d) (r).dsc4bb_sm_ctrl13[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_GET(r) (r).dsc4bb_sm_ctrl13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_RESERVED0f_GET(r) ((((r).dsc4bb_sm_ctrl13[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_RESERVED0f_SET(r,f) (r).dsc4bb_sm_ctrl13[0]=(((r).dsc4bb_sm_ctrl13[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET(r) ((((r).dsc4bb_sm_ctrl13[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl13[0]=(((r).dsc4bb_sm_ctrl13[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET(r) ((((r).dsc4bb_sm_ctrl13[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl13[0]=(((r).dsc4bb_sm_ctrl13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET(r) (((r).dsc4bb_sm_ctrl13[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl13[0]=(((r).dsc4bb_sm_ctrl13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4BB_SM_CTRL13.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL13r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r,(_r._dsc4bb_sm_ctrl13))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL13r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r,(_r._dsc4bb_sm_ctrl13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_CTRL13r BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r
#define DSC4BB_SM_CTRL13r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_t DSC4BB_SM_CTRL13r_t;
#define DSC4BB_SM_CTRL13r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_CLR
#define DSC4BB_SM_CTRL13r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_SET
#define DSC4BB_SM_CTRL13r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_GET
#define DSC4BB_SM_CTRL13r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_RESERVED0f_GET
#define DSC4BB_SM_CTRL13r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_RESERVED0f_SET
#define DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_GET
#define DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_VGA_TRN2_TIMEOUTf_SET
#define DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_GET
#define DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN2_TIMEOUTf_SET
#define DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_GET
#define DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r_BR_PF_TRN1_TIMEOUTf_SET
#define READ_DSC4BB_SM_CTRL13r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL13r
#define WRITE_DSC4BB_SM_CTRL13r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_CTRL14
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c1
 * DESC:     State Machine Control 14 Register
 * SIZE:     32
 * FIELDS:
 *     OSX2_PF_TAP_EN   
 *     BR_POSTC_TAP_EN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r (0x0003c011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_CTRL14.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_ctrl14[1];
	uint32_t _dsc4bb_sm_ctrl14;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_CLR(r) (r).dsc4bb_sm_ctrl14[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_SET(r,d) (r).dsc4bb_sm_ctrl14[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_GET(r) (r).dsc4bb_sm_ctrl14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_RESERVED0f_GET(r) ((((r).dsc4bb_sm_ctrl14[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_RESERVED0f_SET(r,f) (r).dsc4bb_sm_ctrl14[0]=(((r).dsc4bb_sm_ctrl14[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_GET(r) ((((r).dsc4bb_sm_ctrl14[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_SET(r,f) (r).dsc4bb_sm_ctrl14[0]=(((r).dsc4bb_sm_ctrl14[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_GET(r) (((r).dsc4bb_sm_ctrl14[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_SET(r,f) (r).dsc4bb_sm_ctrl14[0]=(((r).dsc4bb_sm_ctrl14[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4BB_SM_CTRL14.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL14r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r,(_r._dsc4bb_sm_ctrl14))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL14r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r,(_r._dsc4bb_sm_ctrl14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_CTRL14r BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r
#define DSC4BB_SM_CTRL14r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_t DSC4BB_SM_CTRL14r_t;
#define DSC4BB_SM_CTRL14r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_CLR
#define DSC4BB_SM_CTRL14r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_SET
#define DSC4BB_SM_CTRL14r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_GET
#define DSC4BB_SM_CTRL14r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_RESERVED0f_GET
#define DSC4BB_SM_CTRL14r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_RESERVED0f_SET
#define DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_GET
#define DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_BR_POSTC_TAP_ENf_SET
#define DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_GET
#define DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r_OSX2_PF_TAP_ENf_SET
#define READ_DSC4BB_SM_CTRL14r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL14r
#define WRITE_DSC4BB_SM_CTRL14r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_CTRL15
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c2
 * DESC:     State Machine Control 15 Register
 * SIZE:     32
 * FIELDS:
 *     OSX1_POSTC_TAP_EN 
 *     OSX2_POSTC_TAP_EN 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r (0x0003c012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_CTRL15.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_ctrl15[1];
	uint32_t _dsc4bb_sm_ctrl15;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_CLR(r) (r).dsc4bb_sm_ctrl15[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_SET(r,d) (r).dsc4bb_sm_ctrl15[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_GET(r) (r).dsc4bb_sm_ctrl15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_RESERVED0f_GET(r) ((((r).dsc4bb_sm_ctrl15[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_RESERVED0f_SET(r,f) (r).dsc4bb_sm_ctrl15[0]=(((r).dsc4bb_sm_ctrl15[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET(r) ((((r).dsc4bb_sm_ctrl15[0]) >> 7) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET(r,f) (r).dsc4bb_sm_ctrl15[0]=(((r).dsc4bb_sm_ctrl15[0] & ~((uint32_t)0x7f << 7)) | ((((uint32_t)f) & 0x7f) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET(r) (((r).dsc4bb_sm_ctrl15[0]) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET(r,f) (r).dsc4bb_sm_ctrl15[0]=(((r).dsc4bb_sm_ctrl15[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access DSC4BB_SM_CTRL15.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL15r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r,(_r._dsc4bb_sm_ctrl15))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL15r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r,(_r._dsc4bb_sm_ctrl15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_CTRL15r BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r
#define DSC4BB_SM_CTRL15r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_t DSC4BB_SM_CTRL15r_t;
#define DSC4BB_SM_CTRL15r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_CLR
#define DSC4BB_SM_CTRL15r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_SET
#define DSC4BB_SM_CTRL15r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_GET
#define DSC4BB_SM_CTRL15r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_RESERVED0f_GET
#define DSC4BB_SM_CTRL15r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_RESERVED0f_SET
#define DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_GET
#define DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX2_POSTC_TAP_ENf_SET
#define DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_GET
#define DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r_OSX1_POSTC_TAP_ENf_SET
#define READ_DSC4BB_SM_CTRL15r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL15r
#define WRITE_DSC4BB_SM_CTRL15r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_CTRL16
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c3
 * DESC:     State Machine Control 16 Register
 * SIZE:     32
 * FIELDS:
 *     DEFAULT_TRN2_TIMEOUT 
 *     MSR_SLICER_FAST_TIMEOUT 
 *     MSR_SLICER_SLOW_TIMEOUT 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r (0x0003c013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_CTRL16.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_ctrl16[1];
	uint32_t _dsc4bb_sm_ctrl16;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_CLR(r) (r).dsc4bb_sm_ctrl16[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_SET(r,d) (r).dsc4bb_sm_ctrl16[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_GET(r) (r).dsc4bb_sm_ctrl16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_RESERVED0f_GET(r) ((((r).dsc4bb_sm_ctrl16[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_RESERVED0f_SET(r,f) (r).dsc4bb_sm_ctrl16[0]=(((r).dsc4bb_sm_ctrl16[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET(r) ((((r).dsc4bb_sm_ctrl16[0]) >> 10) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl16[0]=(((r).dsc4bb_sm_ctrl16[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET(r) ((((r).dsc4bb_sm_ctrl16[0]) >> 5) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl16[0]=(((r).dsc4bb_sm_ctrl16[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET(r) (((r).dsc4bb_sm_ctrl16[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET(r,f) (r).dsc4bb_sm_ctrl16[0]=(((r).dsc4bb_sm_ctrl16[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access DSC4BB_SM_CTRL16.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL16r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r,(_r._dsc4bb_sm_ctrl16))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL16r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r,(_r._dsc4bb_sm_ctrl16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_CTRL16r BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r
#define DSC4BB_SM_CTRL16r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_t DSC4BB_SM_CTRL16r_t;
#define DSC4BB_SM_CTRL16r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_CLR
#define DSC4BB_SM_CTRL16r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_SET
#define DSC4BB_SM_CTRL16r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_GET
#define DSC4BB_SM_CTRL16r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_RESERVED0f_GET
#define DSC4BB_SM_CTRL16r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_RESERVED0f_SET
#define DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_GET
#define DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_SLOW_TIMEOUTf_SET
#define DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_GET
#define DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_MSR_SLICER_FAST_TIMEOUTf_SET
#define DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_GET
#define DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r_DEFAULT_TRN2_TIMEOUTf_SET
#define READ_DSC4BB_SM_CTRL16r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL16r
#define WRITE_DSC4BB_SM_CTRL16r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_CTRL17
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c4
 * DESC:     State Machine Control 17 Register
 * SIZE:     32
 * FIELDS:
 *     BYPASS_OSX2_SLICER_CAL 
 *     BYPASS_OSX1_SLICER_CAL 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r (0x0003c014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_CTRL17.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_ctrl17[1];
	uint32_t _dsc4bb_sm_ctrl17;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_CLR(r) (r).dsc4bb_sm_ctrl17[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_SET(r,d) (r).dsc4bb_sm_ctrl17[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_GET(r) (r).dsc4bb_sm_ctrl17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_RESERVED0f_GET(r) ((((r).dsc4bb_sm_ctrl17[0]) >> 2) & 0x3fff)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_RESERVED0f_SET(r,f) (r).dsc4bb_sm_ctrl17[0]=(((r).dsc4bb_sm_ctrl17[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET(r) ((((r).dsc4bb_sm_ctrl17[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET(r,f) (r).dsc4bb_sm_ctrl17[0]=(((r).dsc4bb_sm_ctrl17[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET(r) (((r).dsc4bb_sm_ctrl17[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET(r,f) (r).dsc4bb_sm_ctrl17[0]=(((r).dsc4bb_sm_ctrl17[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4BB_SM_CTRL17.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL17r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r,(_r._dsc4bb_sm_ctrl17))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL17r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r,(_r._dsc4bb_sm_ctrl17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_CTRL17r BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r
#define DSC4BB_SM_CTRL17r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_t DSC4BB_SM_CTRL17r_t;
#define DSC4BB_SM_CTRL17r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_CLR
#define DSC4BB_SM_CTRL17r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_SET
#define DSC4BB_SM_CTRL17r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_GET
#define DSC4BB_SM_CTRL17r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_RESERVED0f_GET
#define DSC4BB_SM_CTRL17r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_RESERVED0f_SET
#define DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_GET
#define DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX1_SLICER_CALf_SET
#define DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_GET
#define DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r_BYPASS_OSX2_SLICER_CALf_SET
#define READ_DSC4BB_SM_CTRL17r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_CTRL17r
#define WRITE_DSC4BB_SM_CTRL17r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_CTRL17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_CTRL17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_STATUS7
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c5
 * DESC:     State Machine Status 7 Register
 * SIZE:     32
 * FIELDS:
 *     DSC_STATE_ONE_HOT_0 
 *     DSC_STATE_ONE_HOT_1 
 *     DSC_STATE_ONE_HOT_2 
 *     DSC_STATE_ONE_HOT_3 
 *     DSC_STATE_ONE_HOT_4 
 *     DSC_STATE_ONE_HOT_5 
 *     DSC_STATE_ONE_HOT_6 
 *     DSC_STATE_ONE_HOT_7 
 *     DSC_STATE_ONE_HOT_8 
 *     DSC_STATE_ONE_HOT_9 
 *     DSC_STATE_ONE_HOT_10 
 *     DSC_STATE_ONE_HOT_11 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r (0x0003c015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_STATUS7.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_status7[1];
	uint32_t _dsc4bb_sm_status7;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_CLR(r) (r).dsc4bb_sm_status7[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_SET(r,d) (r).dsc4bb_sm_status7[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_GET(r) (r).dsc4bb_sm_status7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4bb_sm_status7[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET(r) (((r).dsc4bb_sm_status7[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4bb_sm_status7[0]=(((r).dsc4bb_sm_status7[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4BB_SM_STATUS7.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS7r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r,(_r._dsc4bb_sm_status7))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS7r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r,(_r._dsc4bb_sm_status7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_STATUS7r BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r
#define DSC4BB_SM_STATUS7r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_t DSC4BB_SM_STATUS7r_t;
#define DSC4BB_SM_STATUS7r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_CLR
#define DSC4BB_SM_STATUS7r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_SET
#define DSC4BB_SM_STATUS7r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_GET
#define DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_GET
#define DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_RESERVED_FOR_ECO0f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_11f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_10f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_9f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_8f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_7f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_6f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_5f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_4f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_3f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_2f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_1f_SET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_GET
#define DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r_DSC_STATE_ONE_HOT_0f_SET
#define READ_DSC4BB_SM_STATUS7r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS7r
#define WRITE_DSC4BB_SM_STATUS7r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_STATUS8
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c6
 * DESC:     State Machine Status 8 Register
 * SIZE:     32
 * FIELDS:
 *     TUNING_STATE_ONE_HOT_0 
 *     TUNING_STATE_ONE_HOT_1 
 *     TUNING_STATE_ONE_HOT_2 
 *     TUNING_STATE_ONE_HOT_3 
 *     TUNING_STATE_ONE_HOT_4 
 *     TUNING_STATE_ONE_HOT_5 
 *     TUNING_STATE_ONE_HOT_6 
 *     TUNING_STATE_ONE_HOT_7 
 *     TUNING_STATE_ONE_HOT_8 
 *     TUNING_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_10 
 *     TUNING_STATE_ONE_HOT_11 
 *     TUNING_STATE_ONE_HOT_12 
 *     TUNING_STATE_ONE_HOT_13 
 *     TUNING_STATE_ONE_HOT_14 
 *     TUNING_STATE_ONE_HOT_15 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r (0x0003c016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_STATUS8.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_status8[1];
	uint32_t _dsc4bb_sm_status8;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_CLR(r) (r).dsc4bb_sm_status8[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_SET(r,d) (r).dsc4bb_sm_status8[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_GET(r) (r).dsc4bb_sm_status8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4bb_sm_status8[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET(r) (((r).dsc4bb_sm_status8[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4bb_sm_status8[0]=(((r).dsc4bb_sm_status8[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4BB_SM_STATUS8.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS8r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r,(_r._dsc4bb_sm_status8))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS8r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r,(_r._dsc4bb_sm_status8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_STATUS8r BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r
#define DSC4BB_SM_STATUS8r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_t DSC4BB_SM_STATUS8r_t;
#define DSC4BB_SM_STATUS8r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_CLR
#define DSC4BB_SM_STATUS8r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_SET
#define DSC4BB_SM_STATUS8r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_15f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_14f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_13f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_12f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_11f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_10f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_9f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_8f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_7f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_6f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_5f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_4f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_3f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_2f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_1f_SET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_GET
#define DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r_TUNING_STATE_ONE_HOT_0f_SET
#define READ_DSC4BB_SM_STATUS8r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS8r
#define WRITE_DSC4BB_SM_STATUS8r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DSC4BB_SM_STATUS9
 * BLOCKS:   DSC4BB
 * REGADDR:  0x83c7
 * DESC:     State Machine Status 9 Register
 * SIZE:     32
 * FIELDS:
 *     SRCH_STATE_ONE_HOT_0 
 *     SRCH_STATE_ONE_HOT_1 
 *     SRCH_STATE_ONE_HOT_2 
 *     SRCH_STATE_ONE_HOT_3 
 *     SRCH_STATE_ONE_HOT_4 
 *     SRCH_STATE_ONE_HOT_5 
 *     SRCH_STATE_ONE_HOT_6 
 *     SRCH_STATE_ONE_HOT_7 
 *     SRCH_STATE_ONE_HOT_8 
 *     SRCH_STATE_ONE_HOT_9 
 *     TUNING_STATE_ONE_HOT_16 
 *     TUNING_STATE_ONE_HOT_17 
 *     RESERVED_FOR_ECO0 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r (0x0003c017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SIZE 4

/*
 * This structure should be used to declare and program DSC4BB_SM_STATUS9.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_s {
	uint32_t v[1];
	uint32_t dsc4bb_sm_status9[1];
	uint32_t _dsc4bb_sm_status9;
} BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_t;

#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_CLR(r) (r).dsc4bb_sm_status9[0] = 0
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SET(r,d) (r).dsc4bb_sm_status9[0] = d
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_GET(r) (r).dsc4bb_sm_status9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET(r) ((((r).dsc4bb_sm_status9[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET(r) (((r).dsc4bb_sm_status9[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET(r,f) (r).dsc4bb_sm_status9[0]=(((r).dsc4bb_sm_status9[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DSC4BB_SM_STATUS9.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS9r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r,(_r._dsc4bb_sm_status9))
#define BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS9r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r,(_r._dsc4bb_sm_status9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSC4BB_SM_STATUS9r BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r
#define DSC4BB_SM_STATUS9r_SIZE BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SIZE
typedef BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_t DSC4BB_SM_STATUS9r_t;
#define DSC4BB_SM_STATUS9r_CLR BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_CLR
#define DSC4BB_SM_STATUS9r_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SET
#define DSC4BB_SM_STATUS9r_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_GET
#define DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_GET
#define DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_RESERVED_FOR_ECO0f_SET
#define DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_GET
#define DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_17f_SET
#define DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_GET
#define DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_TUNING_STATE_ONE_HOT_16f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_9f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_8f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_7f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_6f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_5f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_4f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_3f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_2f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_1f_SET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_GET
#define DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r_SRCH_STATE_ONE_HOT_0f_SET
#define READ_DSC4BB_SM_STATUS9r BCMI_HYPERLITE_XGXS_READ_DSC4BB_SM_STATUS9r
#define WRITE_DSC4BB_SM_STATUS9r BCMI_HYPERLITE_XGXS_WRITE_DSC4BB_SM_STATUS9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DSC4BB_SM_STATUS9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL1
 * BLOCKS:   FX100
 * REGADDR:  0x8400
 * DESC:     100FX control register 1
 * SIZE:     32
 * FIELDS:
 *     ENABLE           
 *     FULL_DUPLEX      
 *     AUTODET_EN       
 *     FAR_END_FAULT_EN 
 *     FORCE_RX_QUAL    
 *     DISABLE_RX_QUAL  
 *     RXDATA_SEL       
 *     AUTODET_TIMER_SEL 
 *     FIBER_AUTOPWRDWN_DIS 
 *     FIBERAUTOPWRDWN_EN 
 *     FIBER_AUTOPWRDWN_SLEEP 
 *     FIBER_AUTOPWRDWN_WAKEUP 
 *     DATA_SAMPLER_EN  
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL1r (0x00040010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL1r_s {
	uint32_t v[1];
	uint32_t control1[1];
	uint32_t _control1;
} BCMI_HYPERLITE_XGXS_CONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL1r_CLR(r) (r).control1[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL1r_SET(r,d) (r).control1[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL1r_GET(r) (r).control1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL1r_DATA_SAMPLER_ENf_GET(r) ((((r).control1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_DATA_SAMPLER_ENf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_GET(r) ((((r).control1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_GET(r) ((((r).control1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBERAUTOPWRDWN_ENf_GET(r) ((((r).control1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBERAUTOPWRDWN_ENf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_DISf_GET(r) ((((r).control1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_DISf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_TIMER_SELf_GET(r) ((((r).control1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_TIMER_SELf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_RXDATA_SELf_GET(r) ((((r).control1[0]) >> 6) & 0xf)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_RXDATA_SELf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_DISABLE_RX_QUALf_GET(r) ((((r).control1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_DISABLE_RX_QUALf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FORCE_RX_QUALf_GET(r) ((((r).control1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FORCE_RX_QUALf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FAR_END_FAULT_ENf_GET(r) ((((r).control1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FAR_END_FAULT_ENf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_ENf_GET(r) ((((r).control1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_ENf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FULL_DUPLEXf_GET(r) ((((r).control1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_FULL_DUPLEXf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL1r_ENABLEf_GET(r) (((r).control1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL1r_ENABLEf_SET(r,f) (r).control1[0]=(((r).control1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL1r,(_r._control1))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL1r,(_r._control1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1r BCMI_HYPERLITE_XGXS_CONTROL1r
#define CONTROL1r_SIZE BCMI_HYPERLITE_XGXS_CONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL1r_t CONTROL1r_t;
#define CONTROL1r_CLR BCMI_HYPERLITE_XGXS_CONTROL1r_CLR
#define CONTROL1r_SET BCMI_HYPERLITE_XGXS_CONTROL1r_SET
#define CONTROL1r_GET BCMI_HYPERLITE_XGXS_CONTROL1r_GET
#define CONTROL1r_DATA_SAMPLER_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_DATA_SAMPLER_ENf_GET
#define CONTROL1r_DATA_SAMPLER_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_DATA_SAMPLER_ENf_SET
#define CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_GET
#define CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_WAKEUPf_SET
#define CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_GET
#define CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_SLEEPf_SET
#define CONTROL1r_FIBERAUTOPWRDWN_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBERAUTOPWRDWN_ENf_GET
#define CONTROL1r_FIBERAUTOPWRDWN_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBERAUTOPWRDWN_ENf_SET
#define CONTROL1r_FIBER_AUTOPWRDWN_DISf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_DISf_GET
#define CONTROL1r_FIBER_AUTOPWRDWN_DISf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FIBER_AUTOPWRDWN_DISf_SET
#define CONTROL1r_AUTODET_TIMER_SELf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_TIMER_SELf_GET
#define CONTROL1r_AUTODET_TIMER_SELf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_TIMER_SELf_SET
#define CONTROL1r_RXDATA_SELf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_RXDATA_SELf_GET
#define CONTROL1r_RXDATA_SELf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_RXDATA_SELf_SET
#define CONTROL1r_DISABLE_RX_QUALf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_DISABLE_RX_QUALf_GET
#define CONTROL1r_DISABLE_RX_QUALf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_DISABLE_RX_QUALf_SET
#define CONTROL1r_FORCE_RX_QUALf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FORCE_RX_QUALf_GET
#define CONTROL1r_FORCE_RX_QUALf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FORCE_RX_QUALf_SET
#define CONTROL1r_FAR_END_FAULT_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FAR_END_FAULT_ENf_GET
#define CONTROL1r_FAR_END_FAULT_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FAR_END_FAULT_ENf_SET
#define CONTROL1r_AUTODET_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_ENf_GET
#define CONTROL1r_AUTODET_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_AUTODET_ENf_SET
#define CONTROL1r_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_FULL_DUPLEXf_GET
#define CONTROL1r_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_FULL_DUPLEXf_SET
#define CONTROL1r_ENABLEf_GET BCMI_HYPERLITE_XGXS_CONTROL1r_ENABLEf_GET
#define CONTROL1r_ENABLEf_SET BCMI_HYPERLITE_XGXS_CONTROL1r_ENABLEf_SET
#define READ_CONTROL1r BCMI_HYPERLITE_XGXS_READ_CONTROL1r
#define WRITE_CONTROL1r BCMI_HYPERLITE_XGXS_WRITE_CONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL2
 * BLOCKS:   FX100
 * REGADDR:  0x8401
 * DESC:     100FX control register 2
 * SIZE:     32
 * FIELDS:
 *     EXTEND_PKT_SIZE  
 *     BYPASS_RXFIFO    
 *     RESET_RXFIFO     
 *     MODE_CHG_NRST    
 *     MII_RXC_OUT_SM_RST 
 *     MII_RXC_OUT_SW_EN 
 *     MII_RXC_OUT_SW_REF 
 *     CLK_OUT_1000_SW_EN 
 *     CLK_OUT_1000_SW_DEF 
 *     PLL_CLK125_SW_EN 
 *     PLL_CLK125_SW_REF 
 *     PING_PONG_DISABLE 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL2r (0x00040011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL2r_s {
	uint32_t v[1];
	uint32_t control2[1];
	uint32_t _control2;
} BCMI_HYPERLITE_XGXS_CONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL2r_CLR(r) (r).control2[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL2r_SET(r,d) (r).control2[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL2r_GET(r) (r).control2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL2r_RESERVED0f_GET(r) ((((r).control2[0]) >> 12) & 0xf)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_RESERVED0f_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PING_PONG_DISABLEf_GET(r) ((((r).control2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PING_PONG_DISABLEf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_REFf_GET(r) ((((r).control2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_REFf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_ENf_GET(r) ((((r).control2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_ENf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_DEFf_GET(r) ((((r).control2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_DEFf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_ENf_GET(r) ((((r).control2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_ENf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_REFf_GET(r) ((((r).control2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_REFf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_ENf_GET(r) ((((r).control2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_ENf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SM_RSTf_GET(r) ((((r).control2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SM_RSTf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MODE_CHG_NRSTf_GET(r) ((((r).control2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_MODE_CHG_NRSTf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_RESET_RXFIFOf_GET(r) ((((r).control2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_RESET_RXFIFOf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_BYPASS_RXFIFOf_GET(r) ((((r).control2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_BYPASS_RXFIFOf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL2r_EXTEND_PKT_SIZEf_GET(r) (((r).control2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL2r_EXTEND_PKT_SIZEf_SET(r,f) (r).control2[0]=(((r).control2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL2r,(_r._control2))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL2r,(_r._control2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL2r BCMI_HYPERLITE_XGXS_CONTROL2r
#define CONTROL2r_SIZE BCMI_HYPERLITE_XGXS_CONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL2r_t CONTROL2r_t;
#define CONTROL2r_CLR BCMI_HYPERLITE_XGXS_CONTROL2r_CLR
#define CONTROL2r_SET BCMI_HYPERLITE_XGXS_CONTROL2r_SET
#define CONTROL2r_GET BCMI_HYPERLITE_XGXS_CONTROL2r_GET
#define CONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_CONTROL2r_RESERVED0f_GET
#define CONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_CONTROL2r_RESERVED0f_SET
#define CONTROL2r_PING_PONG_DISABLEf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_PING_PONG_DISABLEf_GET
#define CONTROL2r_PING_PONG_DISABLEf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_PING_PONG_DISABLEf_SET
#define CONTROL2r_PLL_CLK125_SW_REFf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_REFf_GET
#define CONTROL2r_PLL_CLK125_SW_REFf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_REFf_SET
#define CONTROL2r_PLL_CLK125_SW_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_ENf_GET
#define CONTROL2r_PLL_CLK125_SW_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_PLL_CLK125_SW_ENf_SET
#define CONTROL2r_CLK_OUT_1000_SW_DEFf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_DEFf_GET
#define CONTROL2r_CLK_OUT_1000_SW_DEFf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_DEFf_SET
#define CONTROL2r_CLK_OUT_1000_SW_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_ENf_GET
#define CONTROL2r_CLK_OUT_1000_SW_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_CLK_OUT_1000_SW_ENf_SET
#define CONTROL2r_MII_RXC_OUT_SW_REFf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_REFf_GET
#define CONTROL2r_MII_RXC_OUT_SW_REFf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_REFf_SET
#define CONTROL2r_MII_RXC_OUT_SW_ENf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_ENf_GET
#define CONTROL2r_MII_RXC_OUT_SW_ENf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SW_ENf_SET
#define CONTROL2r_MII_RXC_OUT_SM_RSTf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SM_RSTf_GET
#define CONTROL2r_MII_RXC_OUT_SM_RSTf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_MII_RXC_OUT_SM_RSTf_SET
#define CONTROL2r_MODE_CHG_NRSTf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_MODE_CHG_NRSTf_GET
#define CONTROL2r_MODE_CHG_NRSTf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_MODE_CHG_NRSTf_SET
#define CONTROL2r_RESET_RXFIFOf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_RESET_RXFIFOf_GET
#define CONTROL2r_RESET_RXFIFOf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_RESET_RXFIFOf_SET
#define CONTROL2r_BYPASS_RXFIFOf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_BYPASS_RXFIFOf_GET
#define CONTROL2r_BYPASS_RXFIFOf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_BYPASS_RXFIFOf_SET
#define CONTROL2r_EXTEND_PKT_SIZEf_GET BCMI_HYPERLITE_XGXS_CONTROL2r_EXTEND_PKT_SIZEf_GET
#define CONTROL2r_EXTEND_PKT_SIZEf_SET BCMI_HYPERLITE_XGXS_CONTROL2r_EXTEND_PKT_SIZEf_SET
#define READ_CONTROL2r BCMI_HYPERLITE_XGXS_READ_CONTROL2r
#define WRITE_CONTROL2r BCMI_HYPERLITE_XGXS_WRITE_CONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  CONTROL3
 * BLOCKS:   FX100
 * REGADDR:  0x8402
 * DESC:     100FX control register 3
 * SIZE:     32
 * FIELDS:
 *     FAST_TIMERS      
 *     FAST_UNLOCK_TIMER 
 *     FORCE_LOCK       
 *     FORCE_LINK       
 *     BYPASS_ALIGNMENT 
 *     BYPASS_ENCODER   
 *     BYPASS_NRZ       
 *     CORRELATOR_DISABLE 
 *     NUMBER_OF_IDLE   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_CONTROL3r (0x00040012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_CONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_CONTROL3r_s {
	uint32_t v[1];
	uint32_t control3[1];
	uint32_t _control3;
} BCMI_HYPERLITE_XGXS_CONTROL3r_t;

#define BCMI_HYPERLITE_XGXS_CONTROL3r_CLR(r) (r).control3[0] = 0
#define BCMI_HYPERLITE_XGXS_CONTROL3r_SET(r,d) (r).control3[0] = d
#define BCMI_HYPERLITE_XGXS_CONTROL3r_GET(r) (r).control3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_CONTROL3r_NUMBER_OF_IDLEf_GET(r) ((((r).control3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_NUMBER_OF_IDLEf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_CORRELATOR_DISABLEf_GET(r) ((((r).control3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_CORRELATOR_DISABLEf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_NRZf_GET(r) ((((r).control3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_NRZf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ENCODERf_GET(r) ((((r).control3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ENCODERf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ALIGNMENTf_GET(r) ((((r).control3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ALIGNMENTf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LINKf_GET(r) ((((r).control3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LINKf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LOCKf_GET(r) ((((r).control3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LOCKf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_UNLOCK_TIMERf_GET(r) ((((r).control3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_UNLOCK_TIMERf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_TIMERSf_GET(r) (((r).control3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_TIMERSf_SET(r,f) (r).control3[0]=(((r).control3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_CONTROL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_CONTROL3r,(_r._control3))
#define BCMI_HYPERLITE_XGXS_WRITE_CONTROL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_CONTROL3r,(_r._control3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL3r BCMI_HYPERLITE_XGXS_CONTROL3r
#define CONTROL3r_SIZE BCMI_HYPERLITE_XGXS_CONTROL3r_SIZE
typedef BCMI_HYPERLITE_XGXS_CONTROL3r_t CONTROL3r_t;
#define CONTROL3r_CLR BCMI_HYPERLITE_XGXS_CONTROL3r_CLR
#define CONTROL3r_SET BCMI_HYPERLITE_XGXS_CONTROL3r_SET
#define CONTROL3r_GET BCMI_HYPERLITE_XGXS_CONTROL3r_GET
#define CONTROL3r_NUMBER_OF_IDLEf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_NUMBER_OF_IDLEf_GET
#define CONTROL3r_NUMBER_OF_IDLEf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_NUMBER_OF_IDLEf_SET
#define CONTROL3r_CORRELATOR_DISABLEf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_CORRELATOR_DISABLEf_GET
#define CONTROL3r_CORRELATOR_DISABLEf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_CORRELATOR_DISABLEf_SET
#define CONTROL3r_BYPASS_NRZf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_NRZf_GET
#define CONTROL3r_BYPASS_NRZf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_NRZf_SET
#define CONTROL3r_BYPASS_ENCODERf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ENCODERf_GET
#define CONTROL3r_BYPASS_ENCODERf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ENCODERf_SET
#define CONTROL3r_BYPASS_ALIGNMENTf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ALIGNMENTf_GET
#define CONTROL3r_BYPASS_ALIGNMENTf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_BYPASS_ALIGNMENTf_SET
#define CONTROL3r_FORCE_LINKf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LINKf_GET
#define CONTROL3r_FORCE_LINKf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LINKf_SET
#define CONTROL3r_FORCE_LOCKf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LOCKf_GET
#define CONTROL3r_FORCE_LOCKf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_FORCE_LOCKf_SET
#define CONTROL3r_FAST_UNLOCK_TIMERf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_UNLOCK_TIMERf_GET
#define CONTROL3r_FAST_UNLOCK_TIMERf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_UNLOCK_TIMERf_SET
#define CONTROL3r_FAST_TIMERSf_GET BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_TIMERSf_GET
#define CONTROL3r_FAST_TIMERSf_SET BCMI_HYPERLITE_XGXS_CONTROL3r_FAST_TIMERSf_SET
#define READ_CONTROL3r BCMI_HYPERLITE_XGXS_READ_CONTROL3r
#define WRITE_CONTROL3r BCMI_HYPERLITE_XGXS_WRITE_CONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_CONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS1
 * BLOCKS:   FX100
 * REGADDR:  0x8403
 * DESC:     100FX status register 1
 * SIZE:     32
 * FIELDS:
 *     LINK             
 *     LOCKED           
 *     FAULTING         
 *     LOST_LOCK        
 *     LOCK_TIMER_EXPIRED 
 *     RX_ERR_DETECTED  
 *     TX_ERR_DETECTED  
 *     FALSE_CARRIER_DETECTED 
 *     BAD_ESD_DETECTED 
 *     LINK_STATUS_CHG  
 *     FIBER_PWRDWN     
 *     FIBER_PWRDWN_STATUS_CHG 
 *     RESERVED0        
 *     MODE_CHANGE      
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS1r (0x00040013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS1r_s {
	uint32_t v[1];
	uint32_t status1[1];
	uint32_t _status1;
} BCMI_HYPERLITE_XGXS_STATUS1r_t;

#define BCMI_HYPERLITE_XGXS_STATUS1r_CLR(r) (r).status1[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS1r_SET(r,d) (r).status1[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS1r_GET(r) (r).status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS1r_MODE_CHANGEf_GET(r) ((((r).status1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_MODE_CHANGEf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS1r_RESERVED0f_GET(r) ((((r).status1[0]) >> 12) & 0x7)
#define BCMI_HYPERLITE_XGXS_STATUS1r_RESERVED0f_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWN_STATUS_CHGf_GET(r) ((((r).status1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWN_STATUS_CHGf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWNf_GET(r) ((((r).status1[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWNf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS1r_LINK_STATUS_CHGf_GET(r) ((((r).status1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_LINK_STATUS_CHGf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS1r_BAD_ESD_DETECTEDf_GET(r) ((((r).status1[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_BAD_ESD_DETECTEDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS1r_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).status1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS1r_TX_ERR_DETECTEDf_GET(r) ((((r).status1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_TX_ERR_DETECTEDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS1r_RX_ERR_DETECTEDf_GET(r) ((((r).status1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_RX_ERR_DETECTEDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOCK_TIMER_EXPIREDf_GET(r) ((((r).status1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOCK_TIMER_EXPIREDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOST_LOCKf_GET(r) ((((r).status1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOST_LOCKf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS1r_FAULTINGf_GET(r) ((((r).status1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_FAULTINGf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOCKEDf_GET(r) ((((r).status1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_LOCKEDf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS1r_LINKf_GET(r) (((r).status1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS1r_LINKf_SET(r,f) (r).status1[0]=(((r).status1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS1r,(_r._status1))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS1r,(_r._status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1r BCMI_HYPERLITE_XGXS_STATUS1r
#define STATUS1r_SIZE BCMI_HYPERLITE_XGXS_STATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS1r_t STATUS1r_t;
#define STATUS1r_CLR BCMI_HYPERLITE_XGXS_STATUS1r_CLR
#define STATUS1r_SET BCMI_HYPERLITE_XGXS_STATUS1r_SET
#define STATUS1r_GET BCMI_HYPERLITE_XGXS_STATUS1r_GET
#define STATUS1r_MODE_CHANGEf_GET BCMI_HYPERLITE_XGXS_STATUS1r_MODE_CHANGEf_GET
#define STATUS1r_MODE_CHANGEf_SET BCMI_HYPERLITE_XGXS_STATUS1r_MODE_CHANGEf_SET
#define STATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS1r_RESERVED0f_GET
#define STATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS1r_RESERVED0f_SET
#define STATUS1r_FIBER_PWRDWN_STATUS_CHGf_GET BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWN_STATUS_CHGf_GET
#define STATUS1r_FIBER_PWRDWN_STATUS_CHGf_SET BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWN_STATUS_CHGf_SET
#define STATUS1r_FIBER_PWRDWNf_GET BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWNf_GET
#define STATUS1r_FIBER_PWRDWNf_SET BCMI_HYPERLITE_XGXS_STATUS1r_FIBER_PWRDWNf_SET
#define STATUS1r_LINK_STATUS_CHGf_GET BCMI_HYPERLITE_XGXS_STATUS1r_LINK_STATUS_CHGf_GET
#define STATUS1r_LINK_STATUS_CHGf_SET BCMI_HYPERLITE_XGXS_STATUS1r_LINK_STATUS_CHGf_SET
#define STATUS1r_BAD_ESD_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_BAD_ESD_DETECTEDf_GET
#define STATUS1r_BAD_ESD_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_BAD_ESD_DETECTEDf_SET
#define STATUS1r_FALSE_CARRIER_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_FALSE_CARRIER_DETECTEDf_GET
#define STATUS1r_FALSE_CARRIER_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_FALSE_CARRIER_DETECTEDf_SET
#define STATUS1r_TX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_TX_ERR_DETECTEDf_GET
#define STATUS1r_TX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_TX_ERR_DETECTEDf_SET
#define STATUS1r_RX_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_RX_ERR_DETECTEDf_GET
#define STATUS1r_RX_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_RX_ERR_DETECTEDf_SET
#define STATUS1r_LOCK_TIMER_EXPIREDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_LOCK_TIMER_EXPIREDf_GET
#define STATUS1r_LOCK_TIMER_EXPIREDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_LOCK_TIMER_EXPIREDf_SET
#define STATUS1r_LOST_LOCKf_GET BCMI_HYPERLITE_XGXS_STATUS1r_LOST_LOCKf_GET
#define STATUS1r_LOST_LOCKf_SET BCMI_HYPERLITE_XGXS_STATUS1r_LOST_LOCKf_SET
#define STATUS1r_FAULTINGf_GET BCMI_HYPERLITE_XGXS_STATUS1r_FAULTINGf_GET
#define STATUS1r_FAULTINGf_SET BCMI_HYPERLITE_XGXS_STATUS1r_FAULTINGf_SET
#define STATUS1r_LOCKEDf_GET BCMI_HYPERLITE_XGXS_STATUS1r_LOCKEDf_GET
#define STATUS1r_LOCKEDf_SET BCMI_HYPERLITE_XGXS_STATUS1r_LOCKEDf_SET
#define STATUS1r_LINKf_GET BCMI_HYPERLITE_XGXS_STATUS1r_LINKf_GET
#define STATUS1r_LINKf_SET BCMI_HYPERLITE_XGXS_STATUS1r_LINKf_SET
#define READ_STATUS1r BCMI_HYPERLITE_XGXS_READ_STATUS1r
#define WRITE_STATUS1r BCMI_HYPERLITE_XGXS_WRITE_STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS3
 * BLOCKS:   FX100
 * REGADDR:  0x8405
 * DESC:     100FX status register 3
 * SIZE:     32
 * FIELDS:
 *     IDLES_DETECTED   
 *     IJ_DETECTED      
 *     SSD_DETECTED     
 *     ESD_DETECTED     
 *     ERR_DETECTED     
 *     CRS_IND_DETECTED 
 *     IDLES_DETECTED_5B 
 *     RESERVED0        
 *     LINKMON_CNTR     
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS3r (0x00040015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS3.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS3r_s {
	uint32_t v[1];
	uint32_t status3[1];
	uint32_t _status3;
} BCMI_HYPERLITE_XGXS_STATUS3r_t;

#define BCMI_HYPERLITE_XGXS_STATUS3r_CLR(r) (r).status3[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS3r_SET(r,d) (r).status3[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS3r_GET(r) (r).status3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS3r_LINKMON_CNTRf_GET(r) ((((r).status3[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_STATUS3r_LINKMON_CNTRf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS3r_RESERVED0f_GET(r) ((((r).status3[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_RESERVED0f_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTED_5Bf_GET(r) ((((r).status3[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTED_5Bf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS3r_CRS_IND_DETECTEDf_GET(r) ((((r).status3[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_CRS_IND_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS3r_ERR_DETECTEDf_GET(r) ((((r).status3[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_ERR_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS3r_ESD_DETECTEDf_GET(r) ((((r).status3[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_ESD_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS3r_SSD_DETECTEDf_GET(r) ((((r).status3[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_SSD_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS3r_IJ_DETECTEDf_GET(r) ((((r).status3[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_IJ_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTEDf_GET(r) (((r).status3[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTEDf_SET(r,f) (r).status3[0]=(((r).status3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS3.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS3r,(_r._status3))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS3r,(_r._status3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS3r BCMI_HYPERLITE_XGXS_STATUS3r
#define STATUS3r_SIZE BCMI_HYPERLITE_XGXS_STATUS3r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS3r_t STATUS3r_t;
#define STATUS3r_CLR BCMI_HYPERLITE_XGXS_STATUS3r_CLR
#define STATUS3r_SET BCMI_HYPERLITE_XGXS_STATUS3r_SET
#define STATUS3r_GET BCMI_HYPERLITE_XGXS_STATUS3r_GET
#define STATUS3r_LINKMON_CNTRf_GET BCMI_HYPERLITE_XGXS_STATUS3r_LINKMON_CNTRf_GET
#define STATUS3r_LINKMON_CNTRf_SET BCMI_HYPERLITE_XGXS_STATUS3r_LINKMON_CNTRf_SET
#define STATUS3r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS3r_RESERVED0f_GET
#define STATUS3r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS3r_RESERVED0f_SET
#define STATUS3r_IDLES_DETECTED_5Bf_GET BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTED_5Bf_GET
#define STATUS3r_IDLES_DETECTED_5Bf_SET BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTED_5Bf_SET
#define STATUS3r_CRS_IND_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_CRS_IND_DETECTEDf_GET
#define STATUS3r_CRS_IND_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_CRS_IND_DETECTEDf_SET
#define STATUS3r_ERR_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_ERR_DETECTEDf_GET
#define STATUS3r_ERR_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_ERR_DETECTEDf_SET
#define STATUS3r_ESD_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_ESD_DETECTEDf_GET
#define STATUS3r_ESD_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_ESD_DETECTEDf_SET
#define STATUS3r_SSD_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_SSD_DETECTEDf_GET
#define STATUS3r_SSD_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_SSD_DETECTEDf_SET
#define STATUS3r_IJ_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_IJ_DETECTEDf_GET
#define STATUS3r_IJ_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_IJ_DETECTEDf_SET
#define STATUS3r_IDLES_DETECTEDf_GET BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTEDf_GET
#define STATUS3r_IDLES_DETECTEDf_SET BCMI_HYPERLITE_XGXS_STATUS3r_IDLES_DETECTEDf_SET
#define READ_STATUS3r BCMI_HYPERLITE_XGXS_READ_STATUS3r
#define WRITE_STATUS3r BCMI_HYPERLITE_XGXS_WRITE_STATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  STATUS4
 * BLOCKS:   FX100
 * REGADDR:  0x8406
 * DESC:     100FX status register 4
 * SIZE:     32
 * FIELDS:
 *     TX_SEJ           
 *     TX_SSJ           
 *     TX_SEK           
 *     TX_SSK           
 *     TX_TDATA         
 *     TX_TERROR        
 *     TX_EST           
 *     TX_ESR           
 *     FX_LINKFAIL      
 *     RX_BADSSD        
 *     RX_CONFIRMK      
 *     RX_SSJ           
 *     RX_SSK           
 *     RX_DATA          
 *     RX_BADEND        
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_STATUS4r (0x00040016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_STATUS4r_SIZE 4

/*
 * This structure should be used to declare and program STATUS4.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_STATUS4r_s {
	uint32_t v[1];
	uint32_t status4[1];
	uint32_t _status4;
} BCMI_HYPERLITE_XGXS_STATUS4r_t;

#define BCMI_HYPERLITE_XGXS_STATUS4r_CLR(r) (r).status4[0] = 0
#define BCMI_HYPERLITE_XGXS_STATUS4r_SET(r,d) (r).status4[0] = d
#define BCMI_HYPERLITE_XGXS_STATUS4r_GET(r) (r).status4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_STATUS4r_RESERVED0f_GET(r) ((((r).status4[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RESERVED0f_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADENDf_GET(r) ((((r).status4[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADENDf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_DATAf_GET(r) ((((r).status4[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_DATAf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSKf_GET(r) ((((r).status4[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSKf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSJf_GET(r) ((((r).status4[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSJf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_CONFIRMKf_GET(r) ((((r).status4[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_CONFIRMKf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADSSDf_GET(r) ((((r).status4[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADSSDf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_STATUS4r_FX_LINKFAILf_GET(r) ((((r).status4[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_FX_LINKFAILf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESRf_GET(r) ((((r).status4[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESRf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESTf_GET(r) ((((r).status4[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESTf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_TERRORf_GET(r) ((((r).status4[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_TERRORf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_TDATAf_GET(r) ((((r).status4[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_TDATAf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSKf_GET(r) ((((r).status4[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSKf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEKf_GET(r) ((((r).status4[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEKf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSJf_GET(r) ((((r).status4[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSJf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEJf_GET(r) (((r).status4[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEJf_SET(r,f) (r).status4[0]=(((r).status4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS4.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_STATUS4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_STATUS4r,(_r._status4))
#define BCMI_HYPERLITE_XGXS_WRITE_STATUS4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_STATUS4r,(_r._status4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS4r BCMI_HYPERLITE_XGXS_STATUS4r
#define STATUS4r_SIZE BCMI_HYPERLITE_XGXS_STATUS4r_SIZE
typedef BCMI_HYPERLITE_XGXS_STATUS4r_t STATUS4r_t;
#define STATUS4r_CLR BCMI_HYPERLITE_XGXS_STATUS4r_CLR
#define STATUS4r_SET BCMI_HYPERLITE_XGXS_STATUS4r_SET
#define STATUS4r_GET BCMI_HYPERLITE_XGXS_STATUS4r_GET
#define STATUS4r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_STATUS4r_RESERVED0f_GET
#define STATUS4r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_STATUS4r_RESERVED0f_SET
#define STATUS4r_RX_BADENDf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADENDf_GET
#define STATUS4r_RX_BADENDf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADENDf_SET
#define STATUS4r_RX_DATAf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_DATAf_GET
#define STATUS4r_RX_DATAf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_DATAf_SET
#define STATUS4r_RX_SSKf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSKf_GET
#define STATUS4r_RX_SSKf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSKf_SET
#define STATUS4r_RX_SSJf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSJf_GET
#define STATUS4r_RX_SSJf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_SSJf_SET
#define STATUS4r_RX_CONFIRMKf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_CONFIRMKf_GET
#define STATUS4r_RX_CONFIRMKf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_CONFIRMKf_SET
#define STATUS4r_RX_BADSSDf_GET BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADSSDf_GET
#define STATUS4r_RX_BADSSDf_SET BCMI_HYPERLITE_XGXS_STATUS4r_RX_BADSSDf_SET
#define STATUS4r_FX_LINKFAILf_GET BCMI_HYPERLITE_XGXS_STATUS4r_FX_LINKFAILf_GET
#define STATUS4r_FX_LINKFAILf_SET BCMI_HYPERLITE_XGXS_STATUS4r_FX_LINKFAILf_SET
#define STATUS4r_TX_ESRf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESRf_GET
#define STATUS4r_TX_ESRf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESRf_SET
#define STATUS4r_TX_ESTf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESTf_GET
#define STATUS4r_TX_ESTf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_ESTf_SET
#define STATUS4r_TX_TERRORf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_TERRORf_GET
#define STATUS4r_TX_TERRORf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_TERRORf_SET
#define STATUS4r_TX_TDATAf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_TDATAf_GET
#define STATUS4r_TX_TDATAf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_TDATAf_SET
#define STATUS4r_TX_SSKf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSKf_GET
#define STATUS4r_TX_SSKf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSKf_SET
#define STATUS4r_TX_SEKf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEKf_GET
#define STATUS4r_TX_SEKf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEKf_SET
#define STATUS4r_TX_SSJf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSJf_GET
#define STATUS4r_TX_SSJf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SSJf_SET
#define STATUS4r_TX_SEJf_GET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEJf_GET
#define STATUS4r_TX_SEJf_SET BCMI_HYPERLITE_XGXS_STATUS4r_TX_SEJf_SET
#define READ_STATUS4r BCMI_HYPERLITE_XGXS_READ_STATUS4r
#define WRITE_STATUS4r BCMI_HYPERLITE_XGXS_WRITE_STATUS4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_STATUS4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AER
 * BLOCKS:   AERBLK
 * REGADDR:  0xffde
 * DESC:     Address Expansion Register
 * SIZE:     32
 * FIELDS:
 *     MMD_PORT         
 *     MMD_DEVICETYPE   
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AERr (0x007fd01e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AERr_SIZE 4

/*
 * This structure should be used to declare and program AER.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AERr_s {
	uint32_t v[1];
	uint32_t aer[1];
	uint32_t _aer;
} BCMI_HYPERLITE_XGXS_AERr_t;

#define BCMI_HYPERLITE_XGXS_AERr_CLR(r) (r).aer[0] = 0
#define BCMI_HYPERLITE_XGXS_AERr_SET(r,d) (r).aer[0] = d
#define BCMI_HYPERLITE_XGXS_AERr_GET(r) (r).aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AERr_MMD_DEVICETYPEf_GET(r) ((((r).aer[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_AERr_MMD_DEVICETYPEf_SET(r,f) (r).aer[0]=(((r).aer[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_AERr_MMD_PORTf_GET(r) (((r).aer[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_AERr_MMD_PORTf_SET(r,f) (r).aer[0]=(((r).aer[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access AER.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AERr,(_r._aer))
#define BCMI_HYPERLITE_XGXS_WRITE_AERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AERr,(_r._aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AERr BCMI_HYPERLITE_XGXS_AERr
#define AERr_SIZE BCMI_HYPERLITE_XGXS_AERr_SIZE
typedef BCMI_HYPERLITE_XGXS_AERr_t AERr_t;
#define AERr_CLR BCMI_HYPERLITE_XGXS_AERr_CLR
#define AERr_SET BCMI_HYPERLITE_XGXS_AERr_SET
#define AERr_GET BCMI_HYPERLITE_XGXS_AERr_GET
#define AERr_MMD_DEVICETYPEf_GET BCMI_HYPERLITE_XGXS_AERr_MMD_DEVICETYPEf_GET
#define AERr_MMD_DEVICETYPEf_SET BCMI_HYPERLITE_XGXS_AERr_MMD_DEVICETYPEf_SET
#define AERr_MMD_PORTf_GET BCMI_HYPERLITE_XGXS_AERr_MMD_PORTf_GET
#define AERr_MMD_PORTf_SET BCMI_HYPERLITE_XGXS_AERr_MMD_PORTf_SET
#define READ_AERr BCMI_HYPERLITE_XGXS_READ_AERr
#define WRITE_AERr BCMI_HYPERLITE_XGXS_WRITE_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MIICNTL
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe0
 * DESC:     IEEE MII control register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     MANUAL_SPEED1    
 *     COLLISION_TEST_EN 
 *     FULL_DUPLEX      
 *     RESTART_AUTONEG  
 *     RESERVED0        
 *     PWRDWN_SW        
 *     AUTONEG_ENABLE   
 *     MANUAL_SPEED0    
 *     GLOOPBACK        
 *     RST_HW           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MIICNTLr (0x007fe010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MIICNTLr_SIZE 4

/*
 * This structure should be used to declare and program MIICNTL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MIICNTLr_s {
	uint32_t v[1];
	uint32_t miicntl[1];
	uint32_t _miicntl;
} BCMI_HYPERLITE_XGXS_MIICNTLr_t;

#define BCMI_HYPERLITE_XGXS_MIICNTLr_CLR(r) (r).miicntl[0] = 0
#define BCMI_HYPERLITE_XGXS_MIICNTLr_SET(r,d) (r).miicntl[0] = d
#define BCMI_HYPERLITE_XGXS_MIICNTLr_GET(r) (r).miicntl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RST_HWf_GET(r) ((((r).miicntl[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RST_HWf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_GLOOPBACKf_GET(r) ((((r).miicntl[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_GLOOPBACKf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED0f_GET(r) ((((r).miicntl[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED0f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_AUTONEG_ENABLEf_GET(r) ((((r).miicntl[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_AUTONEG_ENABLEf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_PWRDWN_SWf_GET(r) ((((r).miicntl[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_PWRDWN_SWf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED0f_GET(r) ((((r).miicntl[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED0f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESTART_AUTONEGf_GET(r) ((((r).miicntl[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESTART_AUTONEGf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_FULL_DUPLEXf_GET(r) ((((r).miicntl[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_FULL_DUPLEXf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_COLLISION_TEST_ENf_GET(r) ((((r).miicntl[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_COLLISION_TEST_ENf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED1f_GET(r) ((((r).miicntl[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED1f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED1f_GET(r) (((r).miicntl[0]) & 0x3f)
#define BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED1f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MIICNTL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MIICNTLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MIICNTLr,(_r._miicntl))
#define BCMI_HYPERLITE_XGXS_WRITE_MIICNTLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MIICNTLr,(_r._miicntl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MIICNTLr BCMI_HYPERLITE_XGXS_MIICNTLr
#define MIICNTLr_SIZE BCMI_HYPERLITE_XGXS_MIICNTLr_SIZE
typedef BCMI_HYPERLITE_XGXS_MIICNTLr_t MIICNTLr_t;
#define MIICNTLr_CLR BCMI_HYPERLITE_XGXS_MIICNTLr_CLR
#define MIICNTLr_SET BCMI_HYPERLITE_XGXS_MIICNTLr_SET
#define MIICNTLr_GET BCMI_HYPERLITE_XGXS_MIICNTLr_GET
#define MIICNTLr_RST_HWf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_RST_HWf_GET
#define MIICNTLr_RST_HWf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_RST_HWf_SET
#define MIICNTLr_GLOOPBACKf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_GLOOPBACKf_GET
#define MIICNTLr_GLOOPBACKf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_GLOOPBACKf_SET
#define MIICNTLr_MANUAL_SPEED0f_GET BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED0f_GET
#define MIICNTLr_MANUAL_SPEED0f_SET BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED0f_SET
#define MIICNTLr_AUTONEG_ENABLEf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_AUTONEG_ENABLEf_GET
#define MIICNTLr_AUTONEG_ENABLEf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_AUTONEG_ENABLEf_SET
#define MIICNTLr_PWRDWN_SWf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_PWRDWN_SWf_GET
#define MIICNTLr_PWRDWN_SWf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_PWRDWN_SWf_SET
#define MIICNTLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED0f_GET
#define MIICNTLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED0f_SET
#define MIICNTLr_RESTART_AUTONEGf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_RESTART_AUTONEGf_GET
#define MIICNTLr_RESTART_AUTONEGf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_RESTART_AUTONEGf_SET
#define MIICNTLr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_FULL_DUPLEXf_GET
#define MIICNTLr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_FULL_DUPLEXf_SET
#define MIICNTLr_COLLISION_TEST_ENf_GET BCMI_HYPERLITE_XGXS_MIICNTLr_COLLISION_TEST_ENf_GET
#define MIICNTLr_COLLISION_TEST_ENf_SET BCMI_HYPERLITE_XGXS_MIICNTLr_COLLISION_TEST_ENf_SET
#define MIICNTLr_MANUAL_SPEED1f_GET BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED1f_GET
#define MIICNTLr_MANUAL_SPEED1f_SET BCMI_HYPERLITE_XGXS_MIICNTLr_MANUAL_SPEED1f_SET
#define MIICNTLr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED1f_GET
#define MIICNTLr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_MIICNTLr_RESERVED1f_SET
#define READ_MIICNTLr BCMI_HYPERLITE_XGXS_READ_MIICNTLr
#define WRITE_MIICNTLr BCMI_HYPERLITE_XGXS_WRITE_MIICNTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MIICNTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MIISTAT
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe1
 * DESC:     IEEE MII status register
 * SIZE:     32
 * FIELDS:
 *     EXTENDED_CAPABILITY 
 *     JABBER_DETECT    
 *     LINK_STATUS      
 *     AUTONEG_ABILITY  
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     MF_PREAMBLE_SUPRESSION 
 *     RESERVED0        
 *     EXTENDED_STATUS  
 *     S100BASE_T2_HALF_DUPLEX_CAPABLE 
 *     S100BASE_T2_FULL_DUPLEX_CAPABLE 
 *     S10BASE_T_HALF_DUPLEX_CAPABLE 
 *     S10BASE_T_FULL_DUPLEX_CAPABLE 
 *     S100BASE_X_HALF_DUPLEX_CAPABLE 
 *     S100BASE_X_FULL_DUPLEX_CAPABLE 
 *     S100BASE_T4_CAPABLE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MIISTATr (0x007fe011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MIISTATr_SIZE 4

/*
 * This structure should be used to declare and program MIISTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MIISTATr_s {
	uint32_t v[1];
	uint32_t miistat[1];
	uint32_t _miistat;
} BCMI_HYPERLITE_XGXS_MIISTATr_t;

#define BCMI_HYPERLITE_XGXS_MIISTATr_CLR(r) (r).miistat[0] = 0
#define BCMI_HYPERLITE_XGXS_MIISTATr_SET(r,d) (r).miistat[0] = d
#define BCMI_HYPERLITE_XGXS_MIISTATr_GET(r) (r).miistat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T4_CAPABLEf_GET(r) ((((r).miistat[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T4_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).miistat[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_STATUSf_GET(r) ((((r).miistat[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_STATUSf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_MIISTATr_RESERVED0f_GET(r) ((((r).miistat[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_RESERVED0f_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET(r) ((((r).miistat[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_COMPLETEf_GET(r) ((((r).miistat[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_COMPLETEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_MIISTATr_REMOTE_FAULTf_GET(r) ((((r).miistat[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_REMOTE_FAULTf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_ABILITYf_GET(r) ((((r).miistat[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_ABILITYf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_MIISTATr_LINK_STATUSf_GET(r) ((((r).miistat[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_LINK_STATUSf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_MIISTATr_JABBER_DETECTf_GET(r) ((((r).miistat[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_JABBER_DETECTf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_CAPABILITYf_GET(r) (((r).miistat[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_CAPABILITYf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MIISTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MIISTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MIISTATr,(_r._miistat))
#define BCMI_HYPERLITE_XGXS_WRITE_MIISTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MIISTATr,(_r._miistat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MIISTATr BCMI_HYPERLITE_XGXS_MIISTATr
#define MIISTATr_SIZE BCMI_HYPERLITE_XGXS_MIISTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_MIISTATr_t MIISTATr_t;
#define MIISTATr_CLR BCMI_HYPERLITE_XGXS_MIISTATr_CLR
#define MIISTATr_SET BCMI_HYPERLITE_XGXS_MIISTATr_SET
#define MIISTATr_GET BCMI_HYPERLITE_XGXS_MIISTATr_GET
#define MIISTATr_S100BASE_T4_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T4_CAPABLEf_GET
#define MIISTATr_S100BASE_T4_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T4_CAPABLEf_SET
#define MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET
#define MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET
#define MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET
#define MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET
#define MIISTATr_EXTENDED_STATUSf_GET BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_STATUSf_GET
#define MIISTATr_EXTENDED_STATUSf_SET BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_STATUSf_SET
#define MIISTATr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MIISTATr_RESERVED0f_GET
#define MIISTATr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MIISTATr_RESERVED0f_SET
#define MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET BCMI_HYPERLITE_XGXS_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET
#define MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET BCMI_HYPERLITE_XGXS_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET
#define MIISTATr_AUTONEG_COMPLETEf_GET BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_COMPLETEf_GET
#define MIISTATr_AUTONEG_COMPLETEf_SET BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_COMPLETEf_SET
#define MIISTATr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_MIISTATr_REMOTE_FAULTf_GET
#define MIISTATr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_MIISTATr_REMOTE_FAULTf_SET
#define MIISTATr_AUTONEG_ABILITYf_GET BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_ABILITYf_GET
#define MIISTATr_AUTONEG_ABILITYf_SET BCMI_HYPERLITE_XGXS_MIISTATr_AUTONEG_ABILITYf_SET
#define MIISTATr_LINK_STATUSf_GET BCMI_HYPERLITE_XGXS_MIISTATr_LINK_STATUSf_GET
#define MIISTATr_LINK_STATUSf_SET BCMI_HYPERLITE_XGXS_MIISTATr_LINK_STATUSf_SET
#define MIISTATr_JABBER_DETECTf_GET BCMI_HYPERLITE_XGXS_MIISTATr_JABBER_DETECTf_GET
#define MIISTATr_JABBER_DETECTf_SET BCMI_HYPERLITE_XGXS_MIISTATr_JABBER_DETECTf_SET
#define MIISTATr_EXTENDED_CAPABILITYf_GET BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_CAPABILITYf_GET
#define MIISTATr_EXTENDED_CAPABILITYf_SET BCMI_HYPERLITE_XGXS_MIISTATr_EXTENDED_CAPABILITYf_SET
#define READ_MIISTATr BCMI_HYPERLITE_XGXS_READ_MIISTATr
#define WRITE_MIISTATr BCMI_HYPERLITE_XGXS_WRITE_MIISTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MIISTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ID1
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe2
 * DESC:     IEEE phy ID LSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ID1r (0x007fe012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ID1r_SIZE 4

/*
 * This structure should be used to declare and program ID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ID1r_s {
	uint32_t v[1];
	uint32_t id1[1];
	uint32_t _id1;
} BCMI_HYPERLITE_XGXS_ID1r_t;

#define BCMI_HYPERLITE_XGXS_ID1r_CLR(r) (r).id1[0] = 0
#define BCMI_HYPERLITE_XGXS_ID1r_SET(r,d) (r).id1[0] = d
#define BCMI_HYPERLITE_XGXS_ID1r_GET(r) (r).id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ID1r_REGIDf_GET(r) (((r).id1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ID1r_REGIDf_SET(r,f) (r).id1[0]=(((r).id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ID1r,(_r._id1))
#define BCMI_HYPERLITE_XGXS_WRITE_ID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ID1r,(_r._id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ID1r BCMI_HYPERLITE_XGXS_ID1r
#define ID1r_SIZE BCMI_HYPERLITE_XGXS_ID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_ID1r_t ID1r_t;
#define ID1r_CLR BCMI_HYPERLITE_XGXS_ID1r_CLR
#define ID1r_SET BCMI_HYPERLITE_XGXS_ID1r_SET
#define ID1r_GET BCMI_HYPERLITE_XGXS_ID1r_GET
#define ID1r_REGIDf_GET BCMI_HYPERLITE_XGXS_ID1r_REGIDf_GET
#define ID1r_REGIDf_SET BCMI_HYPERLITE_XGXS_ID1r_REGIDf_SET
#define READ_ID1r BCMI_HYPERLITE_XGXS_READ_ID1r
#define WRITE_ID1r BCMI_HYPERLITE_XGXS_WRITE_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  ID2
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe3
 * DESC:     IEEE phy ID MSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_ID2r (0x007fe013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_ID2r_SIZE 4

/*
 * This structure should be used to declare and program ID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_ID2r_s {
	uint32_t v[1];
	uint32_t id2[1];
	uint32_t _id2;
} BCMI_HYPERLITE_XGXS_ID2r_t;

#define BCMI_HYPERLITE_XGXS_ID2r_CLR(r) (r).id2[0] = 0
#define BCMI_HYPERLITE_XGXS_ID2r_SET(r,d) (r).id2[0] = d
#define BCMI_HYPERLITE_XGXS_ID2r_GET(r) (r).id2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_ID2r_REGIDf_GET(r) (((r).id2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_ID2r_REGIDf_SET(r,f) (r).id2[0]=(((r).id2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_ID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_ID2r,(_r._id2))
#define BCMI_HYPERLITE_XGXS_WRITE_ID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_ID2r,(_r._id2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ID2r BCMI_HYPERLITE_XGXS_ID2r
#define ID2r_SIZE BCMI_HYPERLITE_XGXS_ID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_ID2r_t ID2r_t;
#define ID2r_CLR BCMI_HYPERLITE_XGXS_ID2r_CLR
#define ID2r_SET BCMI_HYPERLITE_XGXS_ID2r_SET
#define ID2r_GET BCMI_HYPERLITE_XGXS_ID2r_GET
#define ID2r_REGIDf_GET BCMI_HYPERLITE_XGXS_ID2r_REGIDf_GET
#define ID2r_REGIDf_SET BCMI_HYPERLITE_XGXS_ID2r_REGIDf_SET
#define READ_ID2r BCMI_HYPERLITE_XGXS_READ_ID2r
#define WRITE_ID2r BCMI_HYPERLITE_XGXS_WRITE_ID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_ID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AUTONEGADV
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe4
 * DESC:     IEEE auto-negotiation advertised abilities register
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     RESERVED1        
 *     REMOTE_FAULT     
 *     RESERVED0        
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr (0x007fe014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGADV.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t autonegadv[1];
	uint32_t _autonegadv;
} BCMI_HYPERLITE_XGXS_AUTONEGADVr_t;

#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_CLR(r) (r).autonegadv[0] = 0
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_SET(r,d) (r).autonegadv[0] = d
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_GET(r) (r).autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).autonegadv[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED0f_GET(r) ((((r).autonegadv[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED0f_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).autonegadv[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED1f_GET(r) ((((r).autonegadv[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED1f_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_PAUSEf_GET(r) ((((r).autonegadv[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_PAUSEf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_HALF_DUPLEXf_GET(r) ((((r).autonegadv[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_HALF_DUPLEXf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_FULL_DUPLEXf_GET(r) ((((r).autonegadv[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_FULL_DUPLEXf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED2f_GET(r) (((r).autonegadv[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED2f_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AUTONEGADV.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AUTONEGADVr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AUTONEGADVr,(_r._autonegadv))
#define BCMI_HYPERLITE_XGXS_WRITE_AUTONEGADVr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AUTONEGADVr,(_r._autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGADVr BCMI_HYPERLITE_XGXS_AUTONEGADVr
#define AUTONEGADVr_SIZE BCMI_HYPERLITE_XGXS_AUTONEGADVr_SIZE
typedef BCMI_HYPERLITE_XGXS_AUTONEGADVr_t AUTONEGADVr_t;
#define AUTONEGADVr_CLR BCMI_HYPERLITE_XGXS_AUTONEGADVr_CLR
#define AUTONEGADVr_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_SET
#define AUTONEGADVr_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_GET
#define AUTONEGADVr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_NEXT_PAGEf_GET
#define AUTONEGADVr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_NEXT_PAGEf_SET
#define AUTONEGADVr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED0f_GET
#define AUTONEGADVr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED0f_SET
#define AUTONEGADVr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_REMOTE_FAULTf_GET
#define AUTONEGADVr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_REMOTE_FAULTf_SET
#define AUTONEGADVr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED1f_GET
#define AUTONEGADVr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED1f_SET
#define AUTONEGADVr_PAUSEf_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_PAUSEf_GET
#define AUTONEGADVr_PAUSEf_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_PAUSEf_SET
#define AUTONEGADVr_HALF_DUPLEXf_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_HALF_DUPLEXf_GET
#define AUTONEGADVr_HALF_DUPLEXf_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_HALF_DUPLEXf_SET
#define AUTONEGADVr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_FULL_DUPLEXf_GET
#define AUTONEGADVr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_FULL_DUPLEXf_SET
#define AUTONEGADVr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED2f_GET
#define AUTONEGADVr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_AUTONEGADVr_RESERVED2f_SET
#define READ_AUTONEGADVr BCMI_HYPERLITE_XGXS_READ_AUTONEGADVr
#define WRITE_AUTONEGADVr BCMI_HYPERLITE_XGXS_WRITE_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AUTONEGLPABIL
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe5
 * DESC:     IEEE auto-negotiation link partner abilities register
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     RESERVED1        
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     RESERVED0        
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr (0x007fe015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGLPABIL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_s {
	uint32_t v[1];
	uint32_t autoneglpabil[1];
	uint32_t _autoneglpabil;
} BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_t;

#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_CLR(r) (r).autoneglpabil[0] = 0
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SET(r,d) (r).autoneglpabil[0] = d
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_GET(r) (r).autoneglpabil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_NEXT_PAGEf_GET(r) ((((r).autoneglpabil[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_NEXT_PAGEf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_ACKNOWLEDGEf_GET(r) ((((r).autoneglpabil[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_ACKNOWLEDGEf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_REMOTE_FAULTf_GET(r) ((((r).autoneglpabil[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_REMOTE_FAULTf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED0f_GET(r) ((((r).autoneglpabil[0]) >> 9) & 0x7)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED0f_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_PAUSEf_GET(r) ((((r).autoneglpabil[0]) >> 7) & 0x3)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_PAUSEf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_HALF_DUPLEXf_GET(r) ((((r).autoneglpabil[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_HALF_DUPLEXf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_FULL_DUPLEXf_GET(r) ((((r).autoneglpabil[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_FULL_DUPLEXf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED1f_GET(r) ((((r).autoneglpabil[0]) >> 1) & 0xf)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED1f_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SGMII_MODEf_GET(r) (((r).autoneglpabil[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SGMII_MODEf_SET(r,f) (r).autoneglpabil[0]=(((r).autoneglpabil[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AUTONEGLPABIL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AUTONEGLPABILr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AUTONEGLPABILr,(_r._autoneglpabil))
#define BCMI_HYPERLITE_XGXS_WRITE_AUTONEGLPABILr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AUTONEGLPABILr,(_r._autoneglpabil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGLPABILr BCMI_HYPERLITE_XGXS_AUTONEGLPABILr
#define AUTONEGLPABILr_SIZE BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SIZE
typedef BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_t AUTONEGLPABILr_t;
#define AUTONEGLPABILr_CLR BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_CLR
#define AUTONEGLPABILr_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SET
#define AUTONEGLPABILr_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_GET
#define AUTONEGLPABILr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_NEXT_PAGEf_GET
#define AUTONEGLPABILr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_NEXT_PAGEf_SET
#define AUTONEGLPABILr_ACKNOWLEDGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_ACKNOWLEDGEf_GET
#define AUTONEGLPABILr_ACKNOWLEDGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_ACKNOWLEDGEf_SET
#define AUTONEGLPABILr_REMOTE_FAULTf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_REMOTE_FAULTf_GET
#define AUTONEGLPABILr_REMOTE_FAULTf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_REMOTE_FAULTf_SET
#define AUTONEGLPABILr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED0f_GET
#define AUTONEGLPABILr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED0f_SET
#define AUTONEGLPABILr_PAUSEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_PAUSEf_GET
#define AUTONEGLPABILr_PAUSEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_PAUSEf_SET
#define AUTONEGLPABILr_HALF_DUPLEXf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_HALF_DUPLEXf_GET
#define AUTONEGLPABILr_HALF_DUPLEXf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_HALF_DUPLEXf_SET
#define AUTONEGLPABILr_FULL_DUPLEXf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_FULL_DUPLEXf_GET
#define AUTONEGLPABILr_FULL_DUPLEXf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_FULL_DUPLEXf_SET
#define AUTONEGLPABILr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED1f_GET
#define AUTONEGLPABILr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_RESERVED1f_SET
#define AUTONEGLPABILr_SGMII_MODEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SGMII_MODEf_GET
#define AUTONEGLPABILr_SGMII_MODEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABILr_SGMII_MODEf_SET
#define READ_AUTONEGLPABILr BCMI_HYPERLITE_XGXS_READ_AUTONEGLPABILr
#define WRITE_AUTONEGLPABILr BCMI_HYPERLITE_XGXS_WRITE_AUTONEGLPABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AUTONEGLPABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AUTONEGEXP
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe6
 * DESC:     IEEE auto-negotiation expansion register
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     PAGE_RECEIVED    
 *     NEXT_PAGE_ABILITY 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr (0x007fe016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGEXP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AUTONEGEXPr_s {
	uint32_t v[1];
	uint32_t autonegexp[1];
	uint32_t _autonegexp;
} BCMI_HYPERLITE_XGXS_AUTONEGEXPr_t;

#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_CLR(r) (r).autonegexp[0] = 0
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_SET(r,d) (r).autonegexp[0] = d
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_GET(r) (r).autonegexp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED0f_GET(r) ((((r).autonegexp[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED0f_SET(r,f) (r).autonegexp[0]=(((r).autonegexp[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET(r) ((((r).autonegexp[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET(r,f) (r).autonegexp[0]=(((r).autonegexp[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_PAGE_RECEIVEDf_GET(r) ((((r).autonegexp[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_PAGE_RECEIVEDf_SET(r,f) (r).autonegexp[0]=(((r).autonegexp[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED1f_GET(r) (((r).autonegexp[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED1f_SET(r,f) (r).autonegexp[0]=(((r).autonegexp[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AUTONEGEXP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AUTONEGEXPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AUTONEGEXPr,(_r._autonegexp))
#define BCMI_HYPERLITE_XGXS_WRITE_AUTONEGEXPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AUTONEGEXPr,(_r._autonegexp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGEXPr BCMI_HYPERLITE_XGXS_AUTONEGEXPr
#define AUTONEGEXPr_SIZE BCMI_HYPERLITE_XGXS_AUTONEGEXPr_SIZE
typedef BCMI_HYPERLITE_XGXS_AUTONEGEXPr_t AUTONEGEXPr_t;
#define AUTONEGEXPr_CLR BCMI_HYPERLITE_XGXS_AUTONEGEXPr_CLR
#define AUTONEGEXPr_SET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_SET
#define AUTONEGEXPr_GET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_GET
#define AUTONEGEXPr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED0f_GET
#define AUTONEGEXPr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED0f_SET
#define AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_NEXT_PAGE_ABILITYf_GET
#define AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_NEXT_PAGE_ABILITYf_SET
#define AUTONEGEXPr_PAGE_RECEIVEDf_GET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_PAGE_RECEIVEDf_GET
#define AUTONEGEXPr_PAGE_RECEIVEDf_SET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_PAGE_RECEIVEDf_SET
#define AUTONEGEXPr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED1f_GET
#define AUTONEGEXPr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AUTONEGEXPr_RESERVED1f_SET
#define READ_AUTONEGEXPr BCMI_HYPERLITE_XGXS_READ_AUTONEGEXPr
#define WRITE_AUTONEGEXPr BCMI_HYPERLITE_XGXS_WRITE_AUTONEGEXPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AUTONEGEXPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AUTONEGNP
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe7
 * DESC:     IEEE auto-negotiation next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr (0x007fe017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGNP.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AUTONEGNPr_s {
	uint32_t v[1];
	uint32_t autonegnp[1];
	uint32_t _autonegnp;
} BCMI_HYPERLITE_XGXS_AUTONEGNPr_t;

#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_CLR(r) (r).autonegnp[0] = 0
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_SET(r,d) (r).autonegnp[0] = d
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_GET(r) (r).autonegnp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_NEXT_PAGEf_GET(r) ((((r).autonegnp[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_NEXT_PAGEf_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACKf_GET(r) ((((r).autonegnp[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACKf_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGE_PAGEf_GET(r) ((((r).autonegnp[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGE_PAGEf_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACK2f_GET(r) ((((r).autonegnp[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACK2f_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_TOGGLEf_GET(r) ((((r).autonegnp[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_TOGGLEf_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGEf_GET(r) (((r).autonegnp[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGEf_SET(r,f) (r).autonegnp[0]=(((r).autonegnp[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AUTONEGNP.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AUTONEGNPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AUTONEGNPr,(_r._autonegnp))
#define BCMI_HYPERLITE_XGXS_WRITE_AUTONEGNPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AUTONEGNPr,(_r._autonegnp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGNPr BCMI_HYPERLITE_XGXS_AUTONEGNPr
#define AUTONEGNPr_SIZE BCMI_HYPERLITE_XGXS_AUTONEGNPr_SIZE
typedef BCMI_HYPERLITE_XGXS_AUTONEGNPr_t AUTONEGNPr_t;
#define AUTONEGNPr_CLR BCMI_HYPERLITE_XGXS_AUTONEGNPr_CLR
#define AUTONEGNPr_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_SET
#define AUTONEGNPr_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_GET
#define AUTONEGNPr_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_NEXT_PAGEf_GET
#define AUTONEGNPr_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_NEXT_PAGEf_SET
#define AUTONEGNPr_ACKf_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACKf_GET
#define AUTONEGNPr_ACKf_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACKf_SET
#define AUTONEGNPr_MESSAGE_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGE_PAGEf_GET
#define AUTONEGNPr_MESSAGE_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGE_PAGEf_SET
#define AUTONEGNPr_ACK2f_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACK2f_GET
#define AUTONEGNPr_ACK2f_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_ACK2f_SET
#define AUTONEGNPr_TOGGLEf_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_TOGGLEf_GET
#define AUTONEGNPr_TOGGLEf_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_TOGGLEf_SET
#define AUTONEGNPr_MESSAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGEf_GET
#define AUTONEGNPr_MESSAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGNPr_MESSAGEf_SET
#define READ_AUTONEGNPr BCMI_HYPERLITE_XGXS_READ_AUTONEGNPr
#define WRITE_AUTONEGNPr BCMI_HYPERLITE_XGXS_WRITE_AUTONEGNPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AUTONEGNPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AUTONEGLPABIL2
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffe8
 * DESC:     IEEE auto-negotiation link partner next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r (0x007fe018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGLPABIL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_s {
	uint32_t v[1];
	uint32_t autoneglpabil2[1];
	uint32_t _autoneglpabil2;
} BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_t;

#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_CLR(r) (r).autoneglpabil2[0] = 0
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_SET(r,d) (r).autoneglpabil2[0] = d
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_GET(r) (r).autoneglpabil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_NEXT_PAGEf_GET(r) ((((r).autoneglpabil2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_NEXT_PAGEf_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACKf_GET(r) ((((r).autoneglpabil2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACKf_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET(r) ((((r).autoneglpabil2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACK2f_GET(r) ((((r).autoneglpabil2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACK2f_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_TOGGLEf_GET(r) ((((r).autoneglpabil2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_TOGGLEf_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGEf_GET(r) (((r).autoneglpabil2[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGEf_SET(r,f) (r).autoneglpabil2[0]=(((r).autoneglpabil2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AUTONEGLPABIL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AUTONEGLPABIL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r,(_r._autoneglpabil2))
#define BCMI_HYPERLITE_XGXS_WRITE_AUTONEGLPABIL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r,(_r._autoneglpabil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r
#define AUTONEGLPABIL2r_SIZE BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_t AUTONEGLPABIL2r_t;
#define AUTONEGLPABIL2r_CLR BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_CLR
#define AUTONEGLPABIL2r_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_SET
#define AUTONEGLPABIL2r_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_GET
#define AUTONEGLPABIL2r_NEXT_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_NEXT_PAGEf_GET
#define AUTONEGLPABIL2r_NEXT_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_NEXT_PAGEf_SET
#define AUTONEGLPABIL2r_ACKf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACKf_GET
#define AUTONEGLPABIL2r_ACKf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACKf_SET
#define AUTONEGLPABIL2r_MESSAGE_PAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET
#define AUTONEGLPABIL2r_MESSAGE_PAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET
#define AUTONEGLPABIL2r_ACK2f_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACK2f_GET
#define AUTONEGLPABIL2r_ACK2f_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_ACK2f_SET
#define AUTONEGLPABIL2r_TOGGLEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_TOGGLEf_GET
#define AUTONEGLPABIL2r_TOGGLEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_TOGGLEf_SET
#define AUTONEGLPABIL2r_MESSAGEf_GET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGEf_GET
#define AUTONEGLPABIL2r_MESSAGEf_SET BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r_MESSAGEf_SET
#define READ_AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_READ_AUTONEGLPABIL2r
#define WRITE_AUTONEGLPABIL2r BCMI_HYPERLITE_XGXS_WRITE_AUTONEGLPABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AUTONEGLPABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  MIIEXTSTAT
 * BLOCKS:   COMBO_IEEE0
 * REGADDR:  0xffef
 * DESC:     IEEE MII extended status register
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     S1000BASE_T_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_T_FULL_DUPLEX_CAPABLE 
 *     S1000BASE_X_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_X_FULL_DUPLEX_CAPABLE 
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr (0x007fe01f | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_SIZE 4

/*
 * This structure should be used to declare and program MIIEXTSTAT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_MIIEXTSTATr_s {
	uint32_t v[1];
	uint32_t miiextstat[1];
	uint32_t _miiextstat;
} BCMI_HYPERLITE_XGXS_MIIEXTSTATr_t;

#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_CLR(r) (r).miiextstat[0] = 0
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_SET(r,d) (r).miiextstat[0] = d
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_GET(r) (r).miiextstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).miiextstat[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).miiextstat[0]=(((r).miiextstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).miiextstat[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).miiextstat[0]=(((r).miiextstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).miiextstat[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).miiextstat[0]=(((r).miiextstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).miiextstat[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).miiextstat[0]=(((r).miiextstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_RESERVED0f_GET(r) (((r).miiextstat[0]) & 0xfff)
#define BCMI_HYPERLITE_XGXS_MIIEXTSTATr_RESERVED0f_SET(r,f) (r).miiextstat[0]=(((r).miiextstat[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access MIIEXTSTAT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_MIIEXTSTATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_MIIEXTSTATr,(_r._miiextstat))
#define BCMI_HYPERLITE_XGXS_WRITE_MIIEXTSTATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_MIIEXTSTATr,(_r._miiextstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MIIEXTSTATr BCMI_HYPERLITE_XGXS_MIIEXTSTATr
#define MIIEXTSTATr_SIZE BCMI_HYPERLITE_XGXS_MIIEXTSTATr_SIZE
typedef BCMI_HYPERLITE_XGXS_MIIEXTSTATr_t MIIEXTSTATr_t;
#define MIIEXTSTATr_CLR BCMI_HYPERLITE_XGXS_MIIEXTSTATr_CLR
#define MIIEXTSTATr_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_SET
#define MIIEXTSTATr_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_GET
#define MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define MIIEXTSTATr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_RESERVED0f_GET
#define MIIEXTSTATr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_MIIEXTSTATr_RESERVED0f_SET
#define READ_MIIEXTSTATr BCMI_HYPERLITE_XGXS_READ_MIIEXTSTATr
#define WRITE_MIIEXTSTATr BCMI_HYPERLITE_XGXS_WRITE_MIIEXTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_MIIEXTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEECONTROL1
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0000
 * DEVAD:    1
 * DESC:     PMD Control 1
 * SIZE:     32
 * FIELDS:
 *     GLOOP10G         
 *     RESERVED3        
 *     SPEEDSELECTION2  
 *     SPEEDSELECTION1  
 *     RESERVED2        
 *     PWRDWN_SW_10G    
 *     RESERVED1        
 *     SPEEDSELECTION0  
 *     RESERVED0        
 *     RST_SW           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r (0x01000000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEECONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_s {
	uint32_t v[1];
	uint32_t pmd_ieeecontrol1[1];
	uint32_t _pmd_ieeecontrol1;
} BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_CLR(r) (r).pmd_ieeecontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SET(r,d) (r).pmd_ieeecontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GET(r) (r).pmd_ieeecontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RST_SWf_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RST_SWf_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED0f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED0f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION0f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION0f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED1f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED1f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED2f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED2f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION1f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION1f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION2f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 2) & 0xf)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION2f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED3f_GET(r) ((((r).pmd_ieeecontrol1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED3f_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GLOOP10Gf_GET(r) (((r).pmd_ieeecontrol1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GLOOP10Gf_SET(r,f) (r).pmd_ieeecontrol1[0]=(((r).pmd_ieeecontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEECONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r,(_r._pmd_ieeecontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r,(_r._pmd_ieeecontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEECONTROL1r BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r
#define PMD_IEEECONTROL1r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_t PMD_IEEECONTROL1r_t;
#define PMD_IEEECONTROL1r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_CLR
#define PMD_IEEECONTROL1r_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SET
#define PMD_IEEECONTROL1r_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GET
#define PMD_IEEECONTROL1r_RST_SWf_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RST_SWf_GET
#define PMD_IEEECONTROL1r_RST_SWf_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RST_SWf_SET
#define PMD_IEEECONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED0f_GET
#define PMD_IEEECONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED0f_SET
#define PMD_IEEECONTROL1r_SPEEDSELECTION0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION0f_GET
#define PMD_IEEECONTROL1r_SPEEDSELECTION0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION0f_SET
#define PMD_IEEECONTROL1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED1f_GET
#define PMD_IEEECONTROL1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED1f_SET
#define PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_GET
#define PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_PWRDWN_SW_10Gf_SET
#define PMD_IEEECONTROL1r_RESERVED2f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED2f_GET
#define PMD_IEEECONTROL1r_RESERVED2f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED2f_SET
#define PMD_IEEECONTROL1r_SPEEDSELECTION1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION1f_GET
#define PMD_IEEECONTROL1r_SPEEDSELECTION1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION1f_SET
#define PMD_IEEECONTROL1r_SPEEDSELECTION2f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION2f_GET
#define PMD_IEEECONTROL1r_SPEEDSELECTION2f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_SPEEDSELECTION2f_SET
#define PMD_IEEECONTROL1r_RESERVED3f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED3f_GET
#define PMD_IEEECONTROL1r_RESERVED3f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_RESERVED3f_SET
#define PMD_IEEECONTROL1r_GLOOP10Gf_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GLOOP10Gf_GET
#define PMD_IEEECONTROL1r_GLOOP10Gf_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r_GLOOP10Gf_SET
#define READ_PMD_IEEECONTROL1r BCMI_HYPERLITE_XGXS_READ_PMD_IEEECONTROL1r
#define WRITE_PMD_IEEECONTROL1r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEECONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEESTATUS1
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0001
 * DEVAD:    1
 * DESC:     PMD Status 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     LOWPOERWABILITY  
 *     RX_LINKSTATUS    
 *     RESERVED1        
 *     FAULT            
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r (0x01000001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEESTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_s {
	uint32_t v[1];
	uint32_t pmd_ieeestatus1[1];
	uint32_t _pmd_ieeestatus1;
} BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_CLR(r) (r).pmd_ieeestatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_SET(r,d) (r).pmd_ieeestatus1[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_GET(r) (r).pmd_ieeestatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED0f_GET(r) ((((r).pmd_ieeestatus1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED0f_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_FAULTf_GET(r) ((((r).pmd_ieeestatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_FAULTf_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED1f_GET(r) ((((r).pmd_ieeestatus1[0]) >> 3) & 0xf)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED1f_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RX_LINKSTATUSf_GET(r) ((((r).pmd_ieeestatus1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RX_LINKSTATUSf_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_LOWPOERWABILITYf_GET(r) ((((r).pmd_ieeestatus1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_LOWPOERWABILITYf_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED2f_GET(r) (((r).pmd_ieeestatus1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED2f_SET(r,f) (r).pmd_ieeestatus1[0]=(((r).pmd_ieeestatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEESTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r,(_r._pmd_ieeestatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r,(_r._pmd_ieeestatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEESTATUS1r BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r
#define PMD_IEEESTATUS1r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_t PMD_IEEESTATUS1r_t;
#define PMD_IEEESTATUS1r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_CLR
#define PMD_IEEESTATUS1r_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_SET
#define PMD_IEEESTATUS1r_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_GET
#define PMD_IEEESTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED0f_GET
#define PMD_IEEESTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED0f_SET
#define PMD_IEEESTATUS1r_FAULTf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_FAULTf_GET
#define PMD_IEEESTATUS1r_FAULTf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_FAULTf_SET
#define PMD_IEEESTATUS1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED1f_GET
#define PMD_IEEESTATUS1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED1f_SET
#define PMD_IEEESTATUS1r_RX_LINKSTATUSf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RX_LINKSTATUSf_GET
#define PMD_IEEESTATUS1r_RX_LINKSTATUSf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RX_LINKSTATUSf_SET
#define PMD_IEEESTATUS1r_LOWPOERWABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_LOWPOERWABILITYf_GET
#define PMD_IEEESTATUS1r_LOWPOERWABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_LOWPOERWABILITYf_SET
#define PMD_IEEESTATUS1r_RESERVED2f_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED2f_GET
#define PMD_IEEESTATUS1r_RESERVED2f_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r_RESERVED2f_SET
#define READ_PMD_IEEESTATUS1r BCMI_HYPERLITE_XGXS_READ_PMD_IEEESTATUS1r
#define WRITE_PMD_IEEESTATUS1r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEEID1
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0002
 * DEVAD:    1
 * DESC:     PMD Device ID [15:0]
 * SIZE:     32
 * FIELDS:
 *     IEEEID1          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r (0x01000002 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEEID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_s {
	uint32_t v[1];
	uint32_t pmd_ieeeid1[1];
	uint32_t _pmd_ieeeid1;
} BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_CLR(r) (r).pmd_ieeeid1[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_SET(r,d) (r).pmd_ieeeid1[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_GET(r) (r).pmd_ieeeid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_IEEEID1f_GET(r) (((r).pmd_ieeeid1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_IEEEID1f_SET(r,f) (r).pmd_ieeeid1[0]=(((r).pmd_ieeeid1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEEID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEEID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEID1r,(_r._pmd_ieeeid1))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEID1r,(_r._pmd_ieeeid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEEID1r BCMI_HYPERLITE_XGXS_PMD_IEEEID1r
#define PMD_IEEEID1r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_t PMD_IEEEID1r_t;
#define PMD_IEEEID1r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_CLR
#define PMD_IEEEID1r_SET BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_SET
#define PMD_IEEEID1r_GET BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_GET
#define PMD_IEEEID1r_IEEEID1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_IEEEID1f_GET
#define PMD_IEEEID1r_IEEEID1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEID1r_IEEEID1f_SET
#define READ_PMD_IEEEID1r BCMI_HYPERLITE_XGXS_READ_PMD_IEEEID1r
#define WRITE_PMD_IEEEID1r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEEID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEEID2
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0003
 * DEVAD:    1
 * DESC:     PMD Device ID [31:16]
 * SIZE:     32
 * FIELDS:
 *     IEEEID2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r (0x01000003 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEEID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_s {
	uint32_t v[1];
	uint32_t pmd_ieeeid2[1];
	uint32_t _pmd_ieeeid2;
} BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_CLR(r) (r).pmd_ieeeid2[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_SET(r,d) (r).pmd_ieeeid2[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_GET(r) (r).pmd_ieeeid2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_IEEEID2f_GET(r) (((r).pmd_ieeeid2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_IEEEID2f_SET(r,f) (r).pmd_ieeeid2[0]=(((r).pmd_ieeeid2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEEID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEEID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEID2r,(_r._pmd_ieeeid2))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEID2r,(_r._pmd_ieeeid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEEID2r BCMI_HYPERLITE_XGXS_PMD_IEEEID2r
#define PMD_IEEEID2r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_t PMD_IEEEID2r_t;
#define PMD_IEEEID2r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_CLR
#define PMD_IEEEID2r_SET BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_SET
#define PMD_IEEEID2r_GET BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_GET
#define PMD_IEEEID2r_IEEEID2f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_IEEEID2f_GET
#define PMD_IEEEID2r_IEEEID2f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEID2r_IEEEID2f_SET
#define READ_PMD_IEEEID2r BCMI_HYPERLITE_XGXS_READ_PMD_IEEEID2r
#define WRITE_PMD_IEEEID2r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEEID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEESPEEDABILITY
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0004
 * DEVAD:    1
 * DESC:     PMD Speed Ability
 * SIZE:     32
 * FIELDS:
 *     SPEED10G         
 *     SPEED2BASE_TL    
 *     SPEED10PASS_TS   
 *     RESERVED1        
 *     SPEED1000B       
 *     SPEED100M        
 *     SPEED10M         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr (0x01000004 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEESPEEDABILITY.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_s {
	uint32_t v[1];
	uint32_t pmd_ieeespeedability[1];
	uint32_t _pmd_ieeespeedability;
} BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_CLR(r) (r).pmd_ieeespeedability[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SET(r,d) (r).pmd_ieeespeedability[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_GET(r) (r).pmd_ieeespeedability[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED0f_GET(r) ((((r).pmd_ieeespeedability[0]) >> 7) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED0f_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1ff << 7)) | ((((uint32_t)f) & 0x1ff) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Mf_GET(r) ((((r).pmd_ieeespeedability[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Mf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED100Mf_GET(r) ((((r).pmd_ieeespeedability[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED100Mf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED1000Bf_GET(r) ((((r).pmd_ieeespeedability[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED1000Bf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED1f_GET(r) ((((r).pmd_ieeespeedability[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED1f_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_GET(r) ((((r).pmd_ieeespeedability[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_GET(r) ((((r).pmd_ieeespeedability[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Gf_GET(r) (((r).pmd_ieeespeedability[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Gf_SET(r,f) (r).pmd_ieeespeedability[0]=(((r).pmd_ieeespeedability[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEESPEEDABILITY.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEESPEEDABILITYr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr,(_r._pmd_ieeespeedability))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESPEEDABILITYr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr,(_r._pmd_ieeespeedability))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr
#define PMD_IEEESPEEDABILITYr_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_t PMD_IEEESPEEDABILITYr_t;
#define PMD_IEEESPEEDABILITYr_CLR BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_CLR
#define PMD_IEEESPEEDABILITYr_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SET
#define PMD_IEEESPEEDABILITYr_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_GET
#define PMD_IEEESPEEDABILITYr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED0f_GET
#define PMD_IEEESPEEDABILITYr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED0f_SET
#define PMD_IEEESPEEDABILITYr_SPEED10Mf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Mf_GET
#define PMD_IEEESPEEDABILITYr_SPEED10Mf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Mf_SET
#define PMD_IEEESPEEDABILITYr_SPEED100Mf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED100Mf_GET
#define PMD_IEEESPEEDABILITYr_SPEED100Mf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED100Mf_SET
#define PMD_IEEESPEEDABILITYr_SPEED1000Bf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED1000Bf_GET
#define PMD_IEEESPEEDABILITYr_SPEED1000Bf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED1000Bf_SET
#define PMD_IEEESPEEDABILITYr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED1f_GET
#define PMD_IEEESPEEDABILITYr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_RESERVED1f_SET
#define PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_GET
#define PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10PASS_TSf_SET
#define PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_GET
#define PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED2BASE_TLf_SET
#define PMD_IEEESPEEDABILITYr_SPEED10Gf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Gf_GET
#define PMD_IEEESPEEDABILITYr_SPEED10Gf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr_SPEED10Gf_SET
#define READ_PMD_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_READ_PMD_IEEESPEEDABILITYr
#define WRITE_PMD_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESPEEDABILITYr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEESPEEDABILITYr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEEDEVINPKG2
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0005
 * DEVAD:    1
 * DESC:     PMD Devices in Package 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     CL22EXT          
 *     VENDOR1          
 *     VENDOR2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r (0x01000005 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEEDEVINPKG2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_s {
	uint32_t v[1];
	uint32_t pmd_ieeedevinpkg2[1];
	uint32_t _pmd_ieeedevinpkg2;
} BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CLR(r) (r).pmd_ieeedevinpkg2[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_SET(r,d) (r).pmd_ieeedevinpkg2[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_GET(r) (r).pmd_ieeedevinpkg2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR2f_GET(r) ((((r).pmd_ieeedevinpkg2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR2f_SET(r,f) (r).pmd_ieeedevinpkg2[0]=(((r).pmd_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR1f_GET(r) ((((r).pmd_ieeedevinpkg2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR1f_SET(r,f) (r).pmd_ieeedevinpkg2[0]=(((r).pmd_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CL22EXTf_GET(r) ((((r).pmd_ieeedevinpkg2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CL22EXTf_SET(r,f) (r).pmd_ieeedevinpkg2[0]=(((r).pmd_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_RESERVED0f_GET(r) (((r).pmd_ieeedevinpkg2[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_RESERVED0f_SET(r,f) (r).pmd_ieeedevinpkg2[0]=(((r).pmd_ieeedevinpkg2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PMD_IEEEDEVINPKG2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r,(_r._pmd_ieeedevinpkg2))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r,(_r._pmd_ieeedevinpkg2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r
#define PMD_IEEEDEVINPKG2r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_t PMD_IEEEDEVINPKG2r_t;
#define PMD_IEEEDEVINPKG2r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CLR
#define PMD_IEEEDEVINPKG2r_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_SET
#define PMD_IEEEDEVINPKG2r_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_GET
#define PMD_IEEEDEVINPKG2r_VENDOR2f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR2f_GET
#define PMD_IEEEDEVINPKG2r_VENDOR2f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR2f_SET
#define PMD_IEEEDEVINPKG2r_VENDOR1f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR1f_GET
#define PMD_IEEEDEVINPKG2r_VENDOR1f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_VENDOR1f_SET
#define PMD_IEEEDEVINPKG2r_CL22EXTf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CL22EXTf_GET
#define PMD_IEEEDEVINPKG2r_CL22EXTf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_CL22EXTf_SET
#define PMD_IEEEDEVINPKG2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_RESERVED0f_GET
#define PMD_IEEEDEVINPKG2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r_RESERVED0f_SET
#define READ_PMD_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_READ_PMD_IEEEDEVINPKG2r
#define WRITE_PMD_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEDEVINPKG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEEDEVINPKG1
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0006
 * DEVAD:    1
 * DESC:     PMD Devices in Package 2
 * SIZE:     32
 * FIELDS:
 *     CLAUSE22         
 *     PMA_PMD          
 *     WIS              
 *     PCS_XS           
 *     PHY_XS           
 *     DTE_XS           
 *     TC               
 *     AN               
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r (0x01000006 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEEDEVINPKG1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_s {
	uint32_t v[1];
	uint32_t pmd_ieeedevinpkg1[1];
	uint32_t _pmd_ieeedevinpkg1;
} BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLR(r) (r).pmd_ieeedevinpkg1[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_SET(r,d) (r).pmd_ieeedevinpkg1[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_GET(r) (r).pmd_ieeedevinpkg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_RESERVED0f_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_RESERVED0f_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_ANf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_ANf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_TCf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_TCf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_DTE_XSf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_DTE_XSf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PHY_XSf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PHY_XSf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PCS_XSf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PCS_XSf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_WISf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_WISf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PMA_PMDf_GET(r) ((((r).pmd_ieeedevinpkg1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PMA_PMDf_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLAUSE22f_GET(r) (((r).pmd_ieeedevinpkg1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLAUSE22f_SET(r,f) (r).pmd_ieeedevinpkg1[0]=(((r).pmd_ieeedevinpkg1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEEDEVINPKG1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r,(_r._pmd_ieeedevinpkg1))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r,(_r._pmd_ieeedevinpkg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r
#define PMD_IEEEDEVINPKG1r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_t PMD_IEEEDEVINPKG1r_t;
#define PMD_IEEEDEVINPKG1r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLR
#define PMD_IEEEDEVINPKG1r_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_SET
#define PMD_IEEEDEVINPKG1r_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_GET
#define PMD_IEEEDEVINPKG1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_RESERVED0f_GET
#define PMD_IEEEDEVINPKG1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_RESERVED0f_SET
#define PMD_IEEEDEVINPKG1r_ANf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_ANf_GET
#define PMD_IEEEDEVINPKG1r_ANf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_ANf_SET
#define PMD_IEEEDEVINPKG1r_TCf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_TCf_GET
#define PMD_IEEEDEVINPKG1r_TCf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_TCf_SET
#define PMD_IEEEDEVINPKG1r_DTE_XSf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_DTE_XSf_GET
#define PMD_IEEEDEVINPKG1r_DTE_XSf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_DTE_XSf_SET
#define PMD_IEEEDEVINPKG1r_PHY_XSf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PHY_XSf_GET
#define PMD_IEEEDEVINPKG1r_PHY_XSf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PHY_XSf_SET
#define PMD_IEEEDEVINPKG1r_PCS_XSf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PCS_XSf_GET
#define PMD_IEEEDEVINPKG1r_PCS_XSf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PCS_XSf_SET
#define PMD_IEEEDEVINPKG1r_WISf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_WISf_GET
#define PMD_IEEEDEVINPKG1r_WISf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_WISf_SET
#define PMD_IEEEDEVINPKG1r_PMA_PMDf_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PMA_PMDf_GET
#define PMD_IEEEDEVINPKG1r_PMA_PMDf_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_PMA_PMDf_SET
#define PMD_IEEEDEVINPKG1r_CLAUSE22f_GET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLAUSE22f_GET
#define PMD_IEEEDEVINPKG1r_CLAUSE22f_SET BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r_CLAUSE22f_SET
#define READ_PMD_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_READ_PMD_IEEEDEVINPKG1r
#define WRITE_PMD_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEEDEVINPKG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEEDEVINPKG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEECONTROL2
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0007
 * DEVAD:    1
 * DESC:     PMD Control 2
 * SIZE:     32
 * FIELDS:
 *     PMA_PMD_TYPESEL  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r (0x01000007 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEECONTROL2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_s {
	uint32_t v[1];
	uint32_t pmd_ieeecontrol2[1];
	uint32_t _pmd_ieeecontrol2;
} BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_CLR(r) (r).pmd_ieeecontrol2[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_SET(r,d) (r).pmd_ieeecontrol2[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_GET(r) (r).pmd_ieeecontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_RESERVED0f_GET(r) ((((r).pmd_ieeecontrol2[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_RESERVED0f_SET(r,f) (r).pmd_ieeecontrol2[0]=(((r).pmd_ieeecontrol2[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_GET(r) (((r).pmd_ieeecontrol2[0]) & 0x7)
#define BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_SET(r,f) (r).pmd_ieeecontrol2[0]=(((r).pmd_ieeecontrol2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PMD_IEEECONTROL2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEECONTROL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r,(_r._pmd_ieeecontrol2))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEECONTROL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r,(_r._pmd_ieeecontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEECONTROL2r BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r
#define PMD_IEEECONTROL2r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_t PMD_IEEECONTROL2r_t;
#define PMD_IEEECONTROL2r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_CLR
#define PMD_IEEECONTROL2r_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_SET
#define PMD_IEEECONTROL2r_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_GET
#define PMD_IEEECONTROL2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_RESERVED0f_GET
#define PMD_IEEECONTROL2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_RESERVED0f_SET
#define PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_GET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_GET
#define PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_SET BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r_PMA_PMD_TYPESELf_SET
#define READ_PMD_IEEECONTROL2r BCMI_HYPERLITE_XGXS_READ_PMD_IEEECONTROL2r
#define WRITE_PMD_IEEECONTROL2r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEECONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEECONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_IEEESTATUS2
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0008
 * DEVAD:    1
 * DESC:     PMD Status 2
 * SIZE:     32
 * FIELDS:
 *     PMA_LOOPBACK_ABLE 
 *     PMD_10GBASE_EW_ABLE 
 *     PMD_10GBASE_LW_ABLE 
 *     PMD_10GBASE_SW_ABLE 
 *     PMD_10GBASE_LX4_ABLE 
 *     PMD_10GBASE_ER_ABLE 
 *     PMD_10GBASE_LR_ABLE 
 *     PMD_10GBASE_SR_ABLE 
 *     PMD_TXDISABLEABLE 
 *     EXTABILITIES     
 *     RXFAULT          
 *     TXFAULT          
 *     RXFAULTABILITY   
 *     TXFAULTABILITY   
 *     DEVPRESENT       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r (0x01000008 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEESTATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_s {
	uint32_t v[1];
	uint32_t pmd_ieeestatus2[1];
	uint32_t _pmd_ieeestatus2;
} BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_t;

#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_CLR(r) (r).pmd_ieeestatus2[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_SET(r,d) (r).pmd_ieeestatus2[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_GET(r) (r).pmd_ieeestatus2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_DEVPRESENTf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_DEVPRESENTf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTABILITYf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTABILITYf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTABILITYf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTABILITYf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_EXTABILITIESf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_EXTABILITIESf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_GET(r) ((((r).pmd_ieeestatus2[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_GET(r) (((r).pmd_ieeestatus2[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_SET(r,f) (r).pmd_ieeestatus2[0]=(((r).pmd_ieeestatus2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEESTATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_IEEESTATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r,(_r._pmd_ieeestatus2))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESTATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r,(_r._pmd_ieeestatus2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEESTATUS2r BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r
#define PMD_IEEESTATUS2r_SIZE BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_t PMD_IEEESTATUS2r_t;
#define PMD_IEEESTATUS2r_CLR BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_CLR
#define PMD_IEEESTATUS2r_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_SET
#define PMD_IEEESTATUS2r_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_GET
#define PMD_IEEESTATUS2r_DEVPRESENTf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_DEVPRESENTf_GET
#define PMD_IEEESTATUS2r_DEVPRESENTf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_DEVPRESENTf_SET
#define PMD_IEEESTATUS2r_TXFAULTABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTABILITYf_GET
#define PMD_IEEESTATUS2r_TXFAULTABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTABILITYf_SET
#define PMD_IEEESTATUS2r_RXFAULTABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTABILITYf_GET
#define PMD_IEEESTATUS2r_RXFAULTABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTABILITYf_SET
#define PMD_IEEESTATUS2r_TXFAULTf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTf_GET
#define PMD_IEEESTATUS2r_TXFAULTf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_TXFAULTf_SET
#define PMD_IEEESTATUS2r_RXFAULTf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTf_GET
#define PMD_IEEESTATUS2r_RXFAULTf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_RXFAULTf_SET
#define PMD_IEEESTATUS2r_EXTABILITIESf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_EXTABILITIESf_GET
#define PMD_IEEESTATUS2r_EXTABILITIESf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_EXTABILITIESf_SET
#define PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_GET
#define PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_TXDISABLEABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SR_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LR_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_ER_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LX4_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_SW_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_LW_ABLEf_SET
#define PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_GET
#define PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMD_10GBASE_EW_ABLEf_SET
#define PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_GET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_GET
#define PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_SET BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r_PMA_LOOPBACK_ABLEf_SET
#define READ_PMD_IEEESTATUS2r BCMI_HYPERLITE_XGXS_READ_PMD_IEEESTATUS2r
#define WRITE_PMD_IEEESTATUS2r BCMI_HYPERLITE_XGXS_WRITE_PMD_IEEESTATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_IEEESTATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_TXDISABLE_TYPE
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x0009
 * DEVAD:    1
 * DESC:     PMD Transmit Disable
 * SIZE:     32
 * FIELDS:
 *     TX_DISABLE_GLOBAL 
 *     TX_DISABLE_LN0   
 *     TX_DISABLE_LN1   
 *     TX_DISABLE_LN2   
 *     TX_DISABLE_LN3   
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr (0x01000009 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program PMD_TXDISABLE_TYPE.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_s {
	uint32_t v[1];
	uint32_t pmd_txdisable_type[1];
	uint32_t _pmd_txdisable_type;
} BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_t;

#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_CLR(r) (r).pmd_txdisable_type[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_SET(r,d) (r).pmd_txdisable_type[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_GET(r) (r).pmd_txdisable_type[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_RESERVED0f_GET(r) ((((r).pmd_txdisable_type[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_RESERVED0f_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_GET(r) ((((r).pmd_txdisable_type[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_GET(r) ((((r).pmd_txdisable_type[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_GET(r) ((((r).pmd_txdisable_type[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_GET(r) ((((r).pmd_txdisable_type[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_GET(r) (((r).pmd_txdisable_type[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_SET(r,f) (r).pmd_txdisable_type[0]=(((r).pmd_txdisable_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_TXDISABLE_TYPE.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_TXDISABLE_TYPEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr,(_r._pmd_txdisable_type))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_TXDISABLE_TYPEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr,(_r._pmd_txdisable_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_TXDISABLE_TYPEr BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr
#define PMD_TXDISABLE_TYPEr_SIZE BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_t PMD_TXDISABLE_TYPEr_t;
#define PMD_TXDISABLE_TYPEr_CLR BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_CLR
#define PMD_TXDISABLE_TYPEr_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_SET
#define PMD_TXDISABLE_TYPEr_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_GET
#define PMD_TXDISABLE_TYPEr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_RESERVED0f_GET
#define PMD_TXDISABLE_TYPEr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_RESERVED0f_SET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_GET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN3f_SET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_GET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN2f_SET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_GET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN1f_SET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_GET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_LN0f_SET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_GET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_GET
#define PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_SET BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr_TX_DISABLE_GLOBALf_SET
#define READ_PMD_TXDISABLE_TYPEr BCMI_HYPERLITE_XGXS_READ_PMD_TXDISABLE_TYPEr
#define WRITE_PMD_TXDISABLE_TYPEr BCMI_HYPERLITE_XGXS_WRITE_PMD_TXDISABLE_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_TXDISABLE_TYPEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_RXSIGNALDETECT
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x000a
 * DEVAD:    1
 * DESC:     PMD Receive Signal Detect
 * SIZE:     32
 * FIELDS:
 *     RXSIGDET_GLOBAL  
 *     RXSIGDET_LN0     
 *     RXSIGDET_LN1     
 *     RXSIGDET_LN2     
 *     RXSIGDET_LN3     
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr (0x0100000a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_RXSIGNALDETECT.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_s {
	uint32_t v[1];
	uint32_t pmd_rxsignaldetect[1];
	uint32_t _pmd_rxsignaldetect;
} BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_t;

#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_CLR(r) (r).pmd_rxsignaldetect[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_SET(r,d) (r).pmd_rxsignaldetect[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_GET(r) (r).pmd_rxsignaldetect[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RESERVED0f_GET(r) ((((r).pmd_rxsignaldetect[0]) >> 5) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RESERVED0f_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_GET(r) ((((r).pmd_rxsignaldetect[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_GET(r) ((((r).pmd_rxsignaldetect[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_GET(r) ((((r).pmd_rxsignaldetect[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_GET(r) ((((r).pmd_rxsignaldetect[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_GET(r) (((r).pmd_rxsignaldetect[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_SET(r,f) (r).pmd_rxsignaldetect[0]=(((r).pmd_rxsignaldetect[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_RXSIGNALDETECT.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_RXSIGNALDETECTr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr,(_r._pmd_rxsignaldetect))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_RXSIGNALDETECTr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr,(_r._pmd_rxsignaldetect))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_RXSIGNALDETECTr BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr
#define PMD_RXSIGNALDETECTr_SIZE BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_t PMD_RXSIGNALDETECTr_t;
#define PMD_RXSIGNALDETECTr_CLR BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_CLR
#define PMD_RXSIGNALDETECTr_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_SET
#define PMD_RXSIGNALDETECTr_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_GET
#define PMD_RXSIGNALDETECTr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RESERVED0f_GET
#define PMD_RXSIGNALDETECTr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RESERVED0f_SET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_GET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN3f_SET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_GET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN2f_SET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_GET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN1f_SET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_GET
#define PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_LN0f_SET
#define PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_GET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_GET
#define PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_SET BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr_RXSIGDET_GLOBALf_SET
#define READ_PMD_RXSIGNALDETECTr BCMI_HYPERLITE_XGXS_READ_PMD_RXSIGNALDETECTr
#define WRITE_PMD_RXSIGNALDETECTr BCMI_HYPERLITE_XGXS_WRITE_PMD_RXSIGNALDETECTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_RXSIGNALDETECTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_EXTENDEDABILITY
 * BLOCKS:   PMD_IEEE0BLK
 * REGADDR:  0x000b
 * DEVAD:    1
 * DESC:     PMD Extended Ability
 * SIZE:     32
 * FIELDS:
 *     PMD_10GBASE_CX4_ABILITY 
 *     PMD_10GBASE_LRM_ABILITY 
 *     PMD_10GBASE_T_ABILITY 
 *     PMD_10GBASE_KX4_ABILITY 
 *     PMD_10GBASE_KR_ABILITY 
 *     PMD_1000BASE_T_ABILITY 
 *     PMD_1000BASE_KX_ABILITY 
 *     PMD_100BASE_TX_ABILITY 
 *     PMD_10BASE_T_ABILITY 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr (0x0100000b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_SIZE 4

/*
 * This structure should be used to declare and program PMD_EXTENDEDABILITY.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_s {
	uint32_t v[1];
	uint32_t pmd_extendedability[1];
	uint32_t _pmd_extendedability;
} BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_t;

#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_CLR(r) (r).pmd_extendedability[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_SET(r,d) (r).pmd_extendedability[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_GET(r) (r).pmd_extendedability[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_RESERVED0f_GET(r) ((((r).pmd_extendedability[0]) >> 9) & 0x7f)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_RESERVED0f_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x7f << 9)) | ((((uint32_t)f) & 0x7f) << 9))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_GET(r) ((((r).pmd_extendedability[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_GET(r) (((r).pmd_extendedability[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_SET(r,f) (r).pmd_extendedability[0]=(((r).pmd_extendedability[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_EXTENDEDABILITY.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_EXTENDEDABILITYr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr,(_r._pmd_extendedability))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_EXTENDEDABILITYr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr,(_r._pmd_extendedability))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_EXTENDEDABILITYr BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr
#define PMD_EXTENDEDABILITYr_SIZE BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_t PMD_EXTENDEDABILITYr_t;
#define PMD_EXTENDEDABILITYr_CLR BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_CLR
#define PMD_EXTENDEDABILITYr_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_SET
#define PMD_EXTENDEDABILITYr_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_GET
#define PMD_EXTENDEDABILITYr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_RESERVED0f_GET
#define PMD_EXTENDEDABILITYr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_RESERVED0f_SET
#define PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10BASE_T_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_100BASE_TX_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_KX_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_1000BASE_T_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KR_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_KX4_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_T_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_LRM_ABILITYf_SET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_GET
#define PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr_PMD_10GBASE_CX4_ABILITYf_SET
#define READ_PMD_EXTENDEDABILITYr BCMI_HYPERLITE_XGXS_READ_PMD_EXTENDEDABILITYr
#define WRITE_PMD_EXTENDEDABILITYr BCMI_HYPERLITE_XGXS_WRITE_PMD_EXTENDEDABILITYr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_EXTENDEDABILITYr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_KX_CONTROL
 * BLOCKS:   PMD_IEEE10BLK
 * REGADDR:  0x00a0
 * DEVAD:    1
 * DESC:     PMD 1000BASE-KX control
 * SIZE:     32
 * FIELDS:
 *     TX_DISABLE       
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr (0x0100a000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PMD_KX_CONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_s {
	uint32_t v[1];
	uint32_t pmd_kx_control[1];
	uint32_t _pmd_kx_control;
} BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_t;

#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_CLR(r) (r).pmd_kx_control[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_SET(r,d) (r).pmd_kx_control[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_GET(r) (r).pmd_kx_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_RESERVED0f_GET(r) ((((r).pmd_kx_control[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_RESERVED0f_SET(r,f) (r).pmd_kx_control[0]=(((r).pmd_kx_control[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_TX_DISABLEf_GET(r) (((r).pmd_kx_control[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_TX_DISABLEf_SET(r,f) (r).pmd_kx_control[0]=(((r).pmd_kx_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_KX_CONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_KX_CONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr,(_r._pmd_kx_control))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_KX_CONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr,(_r._pmd_kx_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_KX_CONTROLr BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr
#define PMD_KX_CONTROLr_SIZE BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_t PMD_KX_CONTROLr_t;
#define PMD_KX_CONTROLr_CLR BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_CLR
#define PMD_KX_CONTROLr_SET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_SET
#define PMD_KX_CONTROLr_GET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_GET
#define PMD_KX_CONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_RESERVED0f_GET
#define PMD_KX_CONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_RESERVED0f_SET
#define PMD_KX_CONTROLr_TX_DISABLEf_GET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_TX_DISABLEf_GET
#define PMD_KX_CONTROLr_TX_DISABLEf_SET BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr_TX_DISABLEf_SET
#define READ_PMD_KX_CONTROLr BCMI_HYPERLITE_XGXS_READ_PMD_KX_CONTROLr
#define WRITE_PMD_KX_CONTROLr BCMI_HYPERLITE_XGXS_WRITE_PMD_KX_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_KX_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  PMD_KX_STATUS
 * BLOCKS:   PMD_IEEE10BLK
 * REGADDR:  0x00a1
 * DEVAD:    1
 * DESC:     PMD 1000BASE-KX status
 * SIZE:     32
 * FIELDS:
 *     PMD_SIGDET       
 *     RESERVED2        
 *     TXDISABLEABILITY 
 *     RESERVED1        
 *     KX_RSFAULT       
 *     KX_TXFAULT       
 *     KX_RXFAULTABILITY 
 *     KX_TXFAULTABILITY 
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr (0x0100a001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program PMD_KX_STATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_s {
	uint32_t v[1];
	uint32_t pmd_kx_status[1];
	uint32_t _pmd_kx_status;
} BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_t;

#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_CLR(r) (r).pmd_kx_status[0] = 0
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_SET(r,d) (r).pmd_kx_status[0] = d
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_GET(r) (r).pmd_kx_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED0f_GET(r) ((((r).pmd_kx_status[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED0f_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTABILITYf_GET(r) ((((r).pmd_kx_status[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTABILITYf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RXFAULTABILITYf_GET(r) ((((r).pmd_kx_status[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RXFAULTABILITYf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTf_GET(r) ((((r).pmd_kx_status[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RSFAULTf_GET(r) ((((r).pmd_kx_status[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RSFAULTf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED1f_GET(r) ((((r).pmd_kx_status[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED1f_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_TXDISABLEABILITYf_GET(r) ((((r).pmd_kx_status[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_TXDISABLEABILITYf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED2f_GET(r) ((((r).pmd_kx_status[0]) >> 1) & 0x7f)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED2f_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x7f << 1)) | ((((uint32_t)f) & 0x7f) << 1))
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_PMD_SIGDETf_GET(r) (((r).pmd_kx_status[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_PMD_SIGDETf_SET(r,f) (r).pmd_kx_status[0]=(((r).pmd_kx_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_KX_STATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_PMD_KX_STATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr,(_r._pmd_kx_status))
#define BCMI_HYPERLITE_XGXS_WRITE_PMD_KX_STATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr,(_r._pmd_kx_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_KX_STATUSr BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr
#define PMD_KX_STATUSr_SIZE BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_t PMD_KX_STATUSr_t;
#define PMD_KX_STATUSr_CLR BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_CLR
#define PMD_KX_STATUSr_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_SET
#define PMD_KX_STATUSr_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_GET
#define PMD_KX_STATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED0f_GET
#define PMD_KX_STATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED0f_SET
#define PMD_KX_STATUSr_KX_TXFAULTABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTABILITYf_GET
#define PMD_KX_STATUSr_KX_TXFAULTABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTABILITYf_SET
#define PMD_KX_STATUSr_KX_RXFAULTABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RXFAULTABILITYf_GET
#define PMD_KX_STATUSr_KX_RXFAULTABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RXFAULTABILITYf_SET
#define PMD_KX_STATUSr_KX_TXFAULTf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTf_GET
#define PMD_KX_STATUSr_KX_TXFAULTf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_TXFAULTf_SET
#define PMD_KX_STATUSr_KX_RSFAULTf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RSFAULTf_GET
#define PMD_KX_STATUSr_KX_RSFAULTf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_KX_RSFAULTf_SET
#define PMD_KX_STATUSr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED1f_GET
#define PMD_KX_STATUSr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED1f_SET
#define PMD_KX_STATUSr_TXDISABLEABILITYf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_TXDISABLEABILITYf_GET
#define PMD_KX_STATUSr_TXDISABLEABILITYf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_TXDISABLEABILITYf_SET
#define PMD_KX_STATUSr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED2f_GET
#define PMD_KX_STATUSr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_RESERVED2f_SET
#define PMD_KX_STATUSr_PMD_SIGDETf_GET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_PMD_SIGDETf_GET
#define PMD_KX_STATUSr_PMD_SIGDETf_SET BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr_PMD_SIGDETf_SET
#define READ_PMD_KX_STATUSr BCMI_HYPERLITE_XGXS_READ_PMD_KX_STATUSr
#define WRITE_PMD_KX_STATUSr BCMI_HYPERLITE_XGXS_WRITE_PMD_KX_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_PMD_KX_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEECONTROL1
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0000
 * DEVAD:    5
 * DESC:     DTE-XS Control 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     SPEEDSELECTION2  
 *     SPEEDSELECTION1  
 *     RESERVED1        
 *     PWRDWN_SW_10G    
 *     RESERVED0        
 *     SPEEDSELECTION0  
 *     GLOOP10G         
 *     RST_SW           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r (0x05000000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEECONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_s {
	uint32_t v[1];
	uint32_t dte_ieeecontrol1[1];
	uint32_t _dte_ieeecontrol1;
} BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_CLR(r) (r).dte_ieeecontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SET(r,d) (r).dte_ieeecontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GET(r) (r).dte_ieeecontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RST_SWf_GET(r) ((((r).dte_ieeecontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RST_SWf_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GLOOP10Gf_GET(r) ((((r).dte_ieeecontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GLOOP10Gf_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION0f_GET(r) ((((r).dte_ieeecontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION0f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED0f_GET(r) ((((r).dte_ieeecontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED0f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_GET(r) ((((r).dte_ieeecontrol1[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED1f_GET(r) ((((r).dte_ieeecontrol1[0]) >> 7) & 0xf)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED1f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0xf << 7)) | ((((uint32_t)f) & 0xf) << 7))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION1f_GET(r) ((((r).dte_ieeecontrol1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION1f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION2f_GET(r) ((((r).dte_ieeecontrol1[0]) >> 2) & 0xf)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION2f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2))
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED2f_GET(r) (((r).dte_ieeecontrol1[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED2f_SET(r,f) (r).dte_ieeecontrol1[0]=(((r).dte_ieeecontrol1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DTE_IEEECONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r,(_r._dte_ieeecontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r,(_r._dte_ieeecontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEECONTROL1r BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r
#define DTE_IEEECONTROL1r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_t DTE_IEEECONTROL1r_t;
#define DTE_IEEECONTROL1r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_CLR
#define DTE_IEEECONTROL1r_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SET
#define DTE_IEEECONTROL1r_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GET
#define DTE_IEEECONTROL1r_RST_SWf_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RST_SWf_GET
#define DTE_IEEECONTROL1r_RST_SWf_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RST_SWf_SET
#define DTE_IEEECONTROL1r_GLOOP10Gf_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GLOOP10Gf_GET
#define DTE_IEEECONTROL1r_GLOOP10Gf_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_GLOOP10Gf_SET
#define DTE_IEEECONTROL1r_SPEEDSELECTION0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION0f_GET
#define DTE_IEEECONTROL1r_SPEEDSELECTION0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION0f_SET
#define DTE_IEEECONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED0f_GET
#define DTE_IEEECONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED0f_SET
#define DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_GET
#define DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_PWRDWN_SW_10Gf_SET
#define DTE_IEEECONTROL1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED1f_GET
#define DTE_IEEECONTROL1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED1f_SET
#define DTE_IEEECONTROL1r_SPEEDSELECTION1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION1f_GET
#define DTE_IEEECONTROL1r_SPEEDSELECTION1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION1f_SET
#define DTE_IEEECONTROL1r_SPEEDSELECTION2f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION2f_GET
#define DTE_IEEECONTROL1r_SPEEDSELECTION2f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_SPEEDSELECTION2f_SET
#define DTE_IEEECONTROL1r_RESERVED2f_GET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED2f_GET
#define DTE_IEEECONTROL1r_RESERVED2f_SET BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r_RESERVED2f_SET
#define READ_DTE_IEEECONTROL1r BCMI_HYPERLITE_XGXS_READ_DTE_IEEECONTROL1r
#define WRITE_DTE_IEEECONTROL1r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEECONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEECONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEESTATUS1
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0001
 * DEVAD:    5
 * DESC:     DTE-XS Status 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED2        
 *     LOWPOWERABILITY  
 *     RX_LINKSTATUS    
 *     RESERVED1        
 *     FAULT            
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r (0x05000001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEESTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_s {
	uint32_t v[1];
	uint32_t dte_ieeestatus1[1];
	uint32_t _dte_ieeestatus1;
} BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_CLR(r) (r).dte_ieeestatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_SET(r,d) (r).dte_ieeestatus1[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_GET(r) (r).dte_ieeestatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED0f_GET(r) ((((r).dte_ieeestatus1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED0f_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_FAULTf_GET(r) ((((r).dte_ieeestatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_FAULTf_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED1f_GET(r) ((((r).dte_ieeestatus1[0]) >> 3) & 0xf)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED1f_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RX_LINKSTATUSf_GET(r) ((((r).dte_ieeestatus1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RX_LINKSTATUSf_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_LOWPOWERABILITYf_GET(r) ((((r).dte_ieeestatus1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_LOWPOWERABILITYf_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED2f_GET(r) (((r).dte_ieeestatus1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED2f_SET(r,f) (r).dte_ieeestatus1[0]=(((r).dte_ieeestatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DTE_IEEESTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r,(_r._dte_ieeestatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r,(_r._dte_ieeestatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEESTATUS1r BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r
#define DTE_IEEESTATUS1r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_t DTE_IEEESTATUS1r_t;
#define DTE_IEEESTATUS1r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_CLR
#define DTE_IEEESTATUS1r_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_SET
#define DTE_IEEESTATUS1r_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_GET
#define DTE_IEEESTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED0f_GET
#define DTE_IEEESTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED0f_SET
#define DTE_IEEESTATUS1r_FAULTf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_FAULTf_GET
#define DTE_IEEESTATUS1r_FAULTf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_FAULTf_SET
#define DTE_IEEESTATUS1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED1f_GET
#define DTE_IEEESTATUS1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED1f_SET
#define DTE_IEEESTATUS1r_RX_LINKSTATUSf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RX_LINKSTATUSf_GET
#define DTE_IEEESTATUS1r_RX_LINKSTATUSf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RX_LINKSTATUSf_SET
#define DTE_IEEESTATUS1r_LOWPOWERABILITYf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_LOWPOWERABILITYf_GET
#define DTE_IEEESTATUS1r_LOWPOWERABILITYf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_LOWPOWERABILITYf_SET
#define DTE_IEEESTATUS1r_RESERVED2f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED2f_GET
#define DTE_IEEESTATUS1r_RESERVED2f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r_RESERVED2f_SET
#define READ_DTE_IEEESTATUS1r BCMI_HYPERLITE_XGXS_READ_DTE_IEEESTATUS1r
#define WRITE_DTE_IEEESTATUS1r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEEID1
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0002
 * DEVAD:    5
 * DESC:     DTE-XS Device ID [15:0]
 * SIZE:     32
 * FIELDS:
 *     IEEEID1          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r (0x05000002 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEEID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_s {
	uint32_t v[1];
	uint32_t dte_ieeeid1[1];
	uint32_t _dte_ieeeid1;
} BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_CLR(r) (r).dte_ieeeid1[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_SET(r,d) (r).dte_ieeeid1[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_GET(r) (r).dte_ieeeid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_IEEEID1f_GET(r) (((r).dte_ieeeid1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_IEEEID1f_SET(r,f) (r).dte_ieeeid1[0]=(((r).dte_ieeeid1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DTE_IEEEID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEEID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEID1r,(_r._dte_ieeeid1))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEID1r,(_r._dte_ieeeid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEEID1r BCMI_HYPERLITE_XGXS_DTE_IEEEID1r
#define DTE_IEEEID1r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_t DTE_IEEEID1r_t;
#define DTE_IEEEID1r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_CLR
#define DTE_IEEEID1r_SET BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_SET
#define DTE_IEEEID1r_GET BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_GET
#define DTE_IEEEID1r_IEEEID1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_IEEEID1f_GET
#define DTE_IEEEID1r_IEEEID1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEID1r_IEEEID1f_SET
#define READ_DTE_IEEEID1r BCMI_HYPERLITE_XGXS_READ_DTE_IEEEID1r
#define WRITE_DTE_IEEEID1r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEEID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEEID2
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0003
 * DEVAD:    5
 * DESC:     DTE-XS Device ID [31:16]
 * SIZE:     32
 * FIELDS:
 *     IEEEID2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r (0x05000003 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEEID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_s {
	uint32_t v[1];
	uint32_t dte_ieeeid2[1];
	uint32_t _dte_ieeeid2;
} BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_CLR(r) (r).dte_ieeeid2[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_SET(r,d) (r).dte_ieeeid2[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_GET(r) (r).dte_ieeeid2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_IEEEID2f_GET(r) (((r).dte_ieeeid2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_IEEEID2f_SET(r,f) (r).dte_ieeeid2[0]=(((r).dte_ieeeid2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DTE_IEEEID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEEID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEID2r,(_r._dte_ieeeid2))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEID2r,(_r._dte_ieeeid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEEID2r BCMI_HYPERLITE_XGXS_DTE_IEEEID2r
#define DTE_IEEEID2r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_t DTE_IEEEID2r_t;
#define DTE_IEEEID2r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_CLR
#define DTE_IEEEID2r_SET BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_SET
#define DTE_IEEEID2r_GET BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_GET
#define DTE_IEEEID2r_IEEEID2f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_IEEEID2f_GET
#define DTE_IEEEID2r_IEEEID2f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEID2r_IEEEID2f_SET
#define READ_DTE_IEEEID2r BCMI_HYPERLITE_XGXS_READ_DTE_IEEEID2r
#define WRITE_DTE_IEEEID2r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEEID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEESPEEDABILITY
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0004
 * DEVAD:    5
 * DESC:     DTE-XS Speed Ability
 * SIZE:     32
 * FIELDS:
 *     SPEED10G         
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr (0x05000004 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEESPEEDABILITY.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_s {
	uint32_t v[1];
	uint32_t dte_ieeespeedability[1];
	uint32_t _dte_ieeespeedability;
} BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_CLR(r) (r).dte_ieeespeedability[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SET(r,d) (r).dte_ieeespeedability[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_GET(r) (r).dte_ieeespeedability[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_RESERVED0f_GET(r) ((((r).dte_ieeespeedability[0]) >> 1) & 0x7fff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_RESERVED0f_SET(r,f) (r).dte_ieeespeedability[0]=(((r).dte_ieeespeedability[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SPEED10Gf_GET(r) (((r).dte_ieeespeedability[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SPEED10Gf_SET(r,f) (r).dte_ieeespeedability[0]=(((r).dte_ieeespeedability[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DTE_IEEESPEEDABILITY.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEESPEEDABILITYr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr,(_r._dte_ieeespeedability))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESPEEDABILITYr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr,(_r._dte_ieeespeedability))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr
#define DTE_IEEESPEEDABILITYr_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_t DTE_IEEESPEEDABILITYr_t;
#define DTE_IEEESPEEDABILITYr_CLR BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_CLR
#define DTE_IEEESPEEDABILITYr_SET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SET
#define DTE_IEEESPEEDABILITYr_GET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_GET
#define DTE_IEEESPEEDABILITYr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_RESERVED0f_GET
#define DTE_IEEESPEEDABILITYr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_RESERVED0f_SET
#define DTE_IEEESPEEDABILITYr_SPEED10Gf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SPEED10Gf_GET
#define DTE_IEEESPEEDABILITYr_SPEED10Gf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr_SPEED10Gf_SET
#define READ_DTE_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_READ_DTE_IEEESPEEDABILITYr
#define WRITE_DTE_IEEESPEEDABILITYr BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESPEEDABILITYr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEESPEEDABILITYr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEEDEVINPKG2
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0005
 * DEVAD:    5
 * DESC:     DTE-XS Devices in Package 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     CL22EXT          
 *     VENDOR1          
 *     VENDOR2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r (0x05000005 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEEDEVINPKG2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_s {
	uint32_t v[1];
	uint32_t dte_ieeedevinpkg2[1];
	uint32_t _dte_ieeedevinpkg2;
} BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CLR(r) (r).dte_ieeedevinpkg2[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_SET(r,d) (r).dte_ieeedevinpkg2[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_GET(r) (r).dte_ieeedevinpkg2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR2f_GET(r) ((((r).dte_ieeedevinpkg2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR2f_SET(r,f) (r).dte_ieeedevinpkg2[0]=(((r).dte_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR1f_GET(r) ((((r).dte_ieeedevinpkg2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR1f_SET(r,f) (r).dte_ieeedevinpkg2[0]=(((r).dte_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CL22EXTf_GET(r) ((((r).dte_ieeedevinpkg2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CL22EXTf_SET(r,f) (r).dte_ieeedevinpkg2[0]=(((r).dte_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_RESERVED0f_GET(r) (((r).dte_ieeedevinpkg2[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_RESERVED0f_SET(r,f) (r).dte_ieeedevinpkg2[0]=(((r).dte_ieeedevinpkg2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access DTE_IEEEDEVINPKG2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r,(_r._dte_ieeedevinpkg2))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r,(_r._dte_ieeedevinpkg2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r
#define DTE_IEEEDEVINPKG2r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_t DTE_IEEEDEVINPKG2r_t;
#define DTE_IEEEDEVINPKG2r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CLR
#define DTE_IEEEDEVINPKG2r_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_SET
#define DTE_IEEEDEVINPKG2r_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_GET
#define DTE_IEEEDEVINPKG2r_VENDOR2f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR2f_GET
#define DTE_IEEEDEVINPKG2r_VENDOR2f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR2f_SET
#define DTE_IEEEDEVINPKG2r_VENDOR1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR1f_GET
#define DTE_IEEEDEVINPKG2r_VENDOR1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_VENDOR1f_SET
#define DTE_IEEEDEVINPKG2r_CL22EXTf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CL22EXTf_GET
#define DTE_IEEEDEVINPKG2r_CL22EXTf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_CL22EXTf_SET
#define DTE_IEEEDEVINPKG2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_RESERVED0f_GET
#define DTE_IEEEDEVINPKG2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r_RESERVED0f_SET
#define READ_DTE_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_READ_DTE_IEEEDEVINPKG2r
#define WRITE_DTE_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEDEVINPKG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEEDEVINPKG1
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0006
 * DEVAD:    5
 * DESC:     DTE-XS Devices in Package 2
 * SIZE:     32
 * FIELDS:
 *     CLAUSE22         
 *     PMA_PMD          
 *     WIS              
 *     PCS_XS           
 *     PHY_XS           
 *     DTE_XS           
 *     TC               
 *     AN               
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r (0x05000006 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEEDEVINPKG1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_s {
	uint32_t v[1];
	uint32_t dte_ieeedevinpkg1[1];
	uint32_t _dte_ieeedevinpkg1;
} BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLR(r) (r).dte_ieeedevinpkg1[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_SET(r,d) (r).dte_ieeedevinpkg1[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_GET(r) (r).dte_ieeedevinpkg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_RESERVED0f_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_RESERVED0f_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_ANf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_ANf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_TCf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_TCf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_DTE_XSf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_DTE_XSf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PHY_XSf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PHY_XSf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PCS_XSf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PCS_XSf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_WISf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_WISf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PMA_PMDf_GET(r) ((((r).dte_ieeedevinpkg1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PMA_PMDf_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLAUSE22f_GET(r) (((r).dte_ieeedevinpkg1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLAUSE22f_SET(r,f) (r).dte_ieeedevinpkg1[0]=(((r).dte_ieeedevinpkg1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DTE_IEEEDEVINPKG1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r,(_r._dte_ieeedevinpkg1))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r,(_r._dte_ieeedevinpkg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r
#define DTE_IEEEDEVINPKG1r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_t DTE_IEEEDEVINPKG1r_t;
#define DTE_IEEEDEVINPKG1r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLR
#define DTE_IEEEDEVINPKG1r_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_SET
#define DTE_IEEEDEVINPKG1r_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_GET
#define DTE_IEEEDEVINPKG1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_RESERVED0f_GET
#define DTE_IEEEDEVINPKG1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_RESERVED0f_SET
#define DTE_IEEEDEVINPKG1r_ANf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_ANf_GET
#define DTE_IEEEDEVINPKG1r_ANf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_ANf_SET
#define DTE_IEEEDEVINPKG1r_TCf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_TCf_GET
#define DTE_IEEEDEVINPKG1r_TCf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_TCf_SET
#define DTE_IEEEDEVINPKG1r_DTE_XSf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_DTE_XSf_GET
#define DTE_IEEEDEVINPKG1r_DTE_XSf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_DTE_XSf_SET
#define DTE_IEEEDEVINPKG1r_PHY_XSf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PHY_XSf_GET
#define DTE_IEEEDEVINPKG1r_PHY_XSf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PHY_XSf_SET
#define DTE_IEEEDEVINPKG1r_PCS_XSf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PCS_XSf_GET
#define DTE_IEEEDEVINPKG1r_PCS_XSf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PCS_XSf_SET
#define DTE_IEEEDEVINPKG1r_WISf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_WISf_GET
#define DTE_IEEEDEVINPKG1r_WISf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_WISf_SET
#define DTE_IEEEDEVINPKG1r_PMA_PMDf_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PMA_PMDf_GET
#define DTE_IEEEDEVINPKG1r_PMA_PMDf_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_PMA_PMDf_SET
#define DTE_IEEEDEVINPKG1r_CLAUSE22f_GET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLAUSE22f_GET
#define DTE_IEEEDEVINPKG1r_CLAUSE22f_SET BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r_CLAUSE22f_SET
#define READ_DTE_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_READ_DTE_IEEEDEVINPKG1r
#define WRITE_DTE_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEEDEVINPKG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEEDEVINPKG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEESTATUS2
 * BLOCKS:   DTE_IEEE0BLK
 * REGADDR:  0x0008
 * DEVAD:    5
 * DESC:     DTE-XS Status 2
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     RXFAULT          
 *     TXFAULT          
 *     RESERVED0        
 *     DEVPRESENT       
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r (0x05000008 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEESTATUS2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_s {
	uint32_t v[1];
	uint32_t dte_ieeestatus2[1];
	uint32_t _dte_ieeestatus2;
} BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_CLR(r) (r).dte_ieeestatus2[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_SET(r,d) (r).dte_ieeestatus2[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_GET(r) (r).dte_ieeestatus2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_DEVPRESENTf_GET(r) ((((r).dte_ieeestatus2[0]) >> 14) & 0x3)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_DEVPRESENTf_SET(r,f) (r).dte_ieeestatus2[0]=(((r).dte_ieeestatus2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED0f_GET(r) ((((r).dte_ieeestatus2[0]) >> 12) & 0x3)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED0f_SET(r,f) (r).dte_ieeestatus2[0]=(((r).dte_ieeestatus2[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_TXFAULTf_GET(r) ((((r).dte_ieeestatus2[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_TXFAULTf_SET(r,f) (r).dte_ieeestatus2[0]=(((r).dte_ieeestatus2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RXFAULTf_GET(r) ((((r).dte_ieeestatus2[0]) >> 10) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RXFAULTf_SET(r,f) (r).dte_ieeestatus2[0]=(((r).dte_ieeestatus2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED1f_GET(r) (((r).dte_ieeestatus2[0]) & 0x3ff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED1f_SET(r,f) (r).dte_ieeestatus2[0]=(((r).dte_ieeestatus2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access DTE_IEEESTATUS2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEESTATUS2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r,(_r._dte_ieeestatus2))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESTATUS2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r,(_r._dte_ieeestatus2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEESTATUS2r BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r
#define DTE_IEEESTATUS2r_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_t DTE_IEEESTATUS2r_t;
#define DTE_IEEESTATUS2r_CLR BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_CLR
#define DTE_IEEESTATUS2r_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_SET
#define DTE_IEEESTATUS2r_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_GET
#define DTE_IEEESTATUS2r_DEVPRESENTf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_DEVPRESENTf_GET
#define DTE_IEEESTATUS2r_DEVPRESENTf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_DEVPRESENTf_SET
#define DTE_IEEESTATUS2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED0f_GET
#define DTE_IEEESTATUS2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED0f_SET
#define DTE_IEEESTATUS2r_TXFAULTf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_TXFAULTf_GET
#define DTE_IEEESTATUS2r_TXFAULTf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_TXFAULTf_SET
#define DTE_IEEESTATUS2r_RXFAULTf_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RXFAULTf_GET
#define DTE_IEEESTATUS2r_RXFAULTf_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RXFAULTf_SET
#define DTE_IEEESTATUS2r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED1f_GET
#define DTE_IEEESTATUS2r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r_RESERVED1f_SET
#define READ_DTE_IEEESTATUS2r BCMI_HYPERLITE_XGXS_READ_DTE_IEEESTATUS2r
#define WRITE_DTE_IEEESTATUS2r BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEESTATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEESTATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_LANESTATUS
 * BLOCKS:   DTE_IEEE1BLK
 * REGADDR:  0x0018
 * DEVAD:    5
 * DESC:     XGXS lane Status
 * SIZE:     32
 * FIELDS:
 *     DTE_LANE0SYNC    
 *     DTE_LANE1SYNC    
 *     DTE_LANE2SYNC    
 *     DTE_LANE3SYNC    
 *     RESERVED1        
 *     DTE_PATTESTABILITY 
 *     DTE_ALIGNSTATUS  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr (0x05001018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_SIZE 4

/*
 * This structure should be used to declare and program DTE_LANESTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_s {
	uint32_t v[1];
	uint32_t dte_lanestatus[1];
	uint32_t _dte_lanestatus;
} BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_t;

#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_CLR(r) (r).dte_lanestatus[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_SET(r,d) (r).dte_lanestatus[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_GET(r) (r).dte_lanestatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED0f_GET(r) ((((r).dte_lanestatus[0]) >> 13) & 0x7)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED0f_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_ALIGNSTATUSf_GET(r) ((((r).dte_lanestatus[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_ALIGNSTATUSf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_PATTESTABILITYf_GET(r) ((((r).dte_lanestatus[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_PATTESTABILITYf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED1f_GET(r) ((((r).dte_lanestatus[0]) >> 4) & 0x7f)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED1f_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x7f << 4)) | ((((uint32_t)f) & 0x7f) << 4))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE3SYNCf_GET(r) ((((r).dte_lanestatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE3SYNCf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE2SYNCf_GET(r) ((((r).dte_lanestatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE2SYNCf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE1SYNCf_GET(r) ((((r).dte_lanestatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE1SYNCf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE0SYNCf_GET(r) (((r).dte_lanestatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE0SYNCf_SET(r,f) (r).dte_lanestatus[0]=(((r).dte_lanestatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access DTE_LANESTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_LANESTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr,(_r._dte_lanestatus))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_LANESTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr,(_r._dte_lanestatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_LANESTATUSr BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr
#define DTE_LANESTATUSr_SIZE BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_t DTE_LANESTATUSr_t;
#define DTE_LANESTATUSr_CLR BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_CLR
#define DTE_LANESTATUSr_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_SET
#define DTE_LANESTATUSr_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_GET
#define DTE_LANESTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED0f_GET
#define DTE_LANESTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED0f_SET
#define DTE_LANESTATUSr_DTE_ALIGNSTATUSf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_ALIGNSTATUSf_GET
#define DTE_LANESTATUSr_DTE_ALIGNSTATUSf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_ALIGNSTATUSf_SET
#define DTE_LANESTATUSr_DTE_PATTESTABILITYf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_PATTESTABILITYf_GET
#define DTE_LANESTATUSr_DTE_PATTESTABILITYf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_PATTESTABILITYf_SET
#define DTE_LANESTATUSr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED1f_GET
#define DTE_LANESTATUSr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_RESERVED1f_SET
#define DTE_LANESTATUSr_DTE_LANE3SYNCf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE3SYNCf_GET
#define DTE_LANESTATUSr_DTE_LANE3SYNCf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE3SYNCf_SET
#define DTE_LANESTATUSr_DTE_LANE2SYNCf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE2SYNCf_GET
#define DTE_LANESTATUSr_DTE_LANE2SYNCf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE2SYNCf_SET
#define DTE_LANESTATUSr_DTE_LANE1SYNCf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE1SYNCf_GET
#define DTE_LANESTATUSr_DTE_LANE1SYNCf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE1SYNCf_SET
#define DTE_LANESTATUSr_DTE_LANE0SYNCf_GET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE0SYNCf_GET
#define DTE_LANESTATUSr_DTE_LANE0SYNCf_SET BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr_DTE_LANE0SYNCf_SET
#define READ_DTE_LANESTATUSr BCMI_HYPERLITE_XGXS_READ_DTE_LANESTATUSr
#define WRITE_DTE_LANESTATUSr BCMI_HYPERLITE_XGXS_WRITE_DTE_LANESTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_LANESTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  DTE_IEEETESTCONTROL
 * BLOCKS:   DTE_IEEE1BLK
 * REGADDR:  0x0019
 * DEVAD:    5
 * DESC:     XGXS Test Control
 * SIZE:     32
 * FIELDS:
 *     DTE_TESTPATSEL   
 *     DTE_TXTESTPATEN  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr (0x05001019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program DTE_IEEETESTCONTROL.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_s {
	uint32_t v[1];
	uint32_t dte_ieeetestcontrol[1];
	uint32_t _dte_ieeetestcontrol;
} BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_t;

#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_CLR(r) (r).dte_ieeetestcontrol[0] = 0
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_SET(r,d) (r).dte_ieeetestcontrol[0] = d
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_GET(r) (r).dte_ieeetestcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_RESERVED0f_GET(r) ((((r).dte_ieeetestcontrol[0]) >> 3) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_RESERVED0f_SET(r,f) (r).dte_ieeetestcontrol[0]=(((r).dte_ieeetestcontrol[0] & ~((uint32_t)0x1fff << 3)) | ((((uint32_t)f) & 0x1fff) << 3))
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_GET(r) ((((r).dte_ieeetestcontrol[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_SET(r,f) (r).dte_ieeetestcontrol[0]=(((r).dte_ieeetestcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_GET(r) (((r).dte_ieeetestcontrol[0]) & 0x3)
#define BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_SET(r,f) (r).dte_ieeetestcontrol[0]=(((r).dte_ieeetestcontrol[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access DTE_IEEETESTCONTROL.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_DTE_IEEETESTCONTROLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr,(_r._dte_ieeetestcontrol))
#define BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEETESTCONTROLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr,(_r._dte_ieeetestcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DTE_IEEETESTCONTROLr BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr
#define DTE_IEEETESTCONTROLr_SIZE BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_SIZE
typedef BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_t DTE_IEEETESTCONTROLr_t;
#define DTE_IEEETESTCONTROLr_CLR BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_CLR
#define DTE_IEEETESTCONTROLr_SET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_SET
#define DTE_IEEETESTCONTROLr_GET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_GET
#define DTE_IEEETESTCONTROLr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_RESERVED0f_GET
#define DTE_IEEETESTCONTROLr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_RESERVED0f_SET
#define DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_GET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_GET
#define DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_SET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TXTESTPATENf_SET
#define DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_GET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_GET
#define DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_SET BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr_DTE_TESTPATSELf_SET
#define READ_DTE_IEEETESTCONTROLr BCMI_HYPERLITE_XGXS_READ_DTE_IEEETESTCONTROLr
#define WRITE_DTE_IEEETESTCONTROLr BCMI_HYPERLITE_XGXS_WRITE_DTE_IEEETESTCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_DTE_IEEETESTCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEECONTROL1
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0000
 * DEVAD:    7
 * DESC:     AN Control 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED1        
 *     RESTARTAN        
 *     RESERVED0        
 *     AN_ENABLE        
 *     EXTENDNPEN       
 *     GLOOP10G         
 *     RST_SW           
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r (0x07000000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEECONTROL1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_s {
	uint32_t v[1];
	uint32_t an_ieeecontrol1[1];
	uint32_t _an_ieeecontrol1;
} BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_CLR(r) (r).an_ieeecontrol1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_SET(r,d) (r).an_ieeecontrol1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GET(r) (r).an_ieeecontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RST_SWf_GET(r) ((((r).an_ieeecontrol1[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RST_SWf_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GLOOP10Gf_GET(r) ((((r).an_ieeecontrol1[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GLOOP10Gf_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_EXTENDNPENf_GET(r) ((((r).an_ieeecontrol1[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_EXTENDNPENf_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_AN_ENABLEf_GET(r) ((((r).an_ieeecontrol1[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_AN_ENABLEf_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED0f_GET(r) ((((r).an_ieeecontrol1[0]) >> 10) & 0x3)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED0f_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESTARTANf_GET(r) ((((r).an_ieeecontrol1[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESTARTANf_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED1f_GET(r) (((r).an_ieeecontrol1[0]) & 0x1ff)
#define BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED1f_SET(r,f) (r).an_ieeecontrol1[0]=(((r).an_ieeecontrol1[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access AN_IEEECONTROL1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r,(_r._an_ieeecontrol1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEECONTROL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r,(_r._an_ieeecontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEECONTROL1r BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r
#define AN_IEEECONTROL1r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_t AN_IEEECONTROL1r_t;
#define AN_IEEECONTROL1r_CLR BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_CLR
#define AN_IEEECONTROL1r_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_SET
#define AN_IEEECONTROL1r_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GET
#define AN_IEEECONTROL1r_RST_SWf_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RST_SWf_GET
#define AN_IEEECONTROL1r_RST_SWf_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RST_SWf_SET
#define AN_IEEECONTROL1r_GLOOP10Gf_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GLOOP10Gf_GET
#define AN_IEEECONTROL1r_GLOOP10Gf_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_GLOOP10Gf_SET
#define AN_IEEECONTROL1r_EXTENDNPENf_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_EXTENDNPENf_GET
#define AN_IEEECONTROL1r_EXTENDNPENf_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_EXTENDNPENf_SET
#define AN_IEEECONTROL1r_AN_ENABLEf_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_AN_ENABLEf_GET
#define AN_IEEECONTROL1r_AN_ENABLEf_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_AN_ENABLEf_SET
#define AN_IEEECONTROL1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED0f_GET
#define AN_IEEECONTROL1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED0f_SET
#define AN_IEEECONTROL1r_RESTARTANf_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESTARTANf_GET
#define AN_IEEECONTROL1r_RESTARTANf_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESTARTANf_SET
#define AN_IEEECONTROL1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED1f_GET
#define AN_IEEECONTROL1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r_RESERVED1f_SET
#define READ_AN_IEEECONTROL1r BCMI_HYPERLITE_XGXS_READ_AN_IEEECONTROL1r
#define WRITE_AN_IEEECONTROL1r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEECONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEECONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEESTATUS1
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0001
 * DEVAD:    7
 * DESC:     AN Status 1
 * SIZE:     32
 * FIELDS:
 *     LP_ANABILITY     
 *     RESERVED1        
 *     LINKSTATUS       
 *     ANABILITY        
 *     REMOTEFAULT      
 *     ANCOMPLETE       
 *     PAGERECEIVED     
 *     EXTENDEDNP_ABLE  
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r (0x07000001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEESTATUS1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_s {
	uint32_t v[1];
	uint32_t an_ieeestatus1[1];
	uint32_t _an_ieeestatus1;
} BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_CLR(r) (r).an_ieeestatus1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_SET(r,d) (r).an_ieeestatus1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_GET(r) (r).an_ieeestatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED0f_GET(r) ((((r).an_ieeestatus1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED0f_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_GET(r) ((((r).an_ieeestatus1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_PAGERECEIVEDf_GET(r) ((((r).an_ieeestatus1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_PAGERECEIVEDf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANCOMPLETEf_GET(r) ((((r).an_ieeestatus1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANCOMPLETEf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_REMOTEFAULTf_GET(r) ((((r).an_ieeestatus1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_REMOTEFAULTf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANABILITYf_GET(r) ((((r).an_ieeestatus1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANABILITYf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LINKSTATUSf_GET(r) ((((r).an_ieeestatus1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LINKSTATUSf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED1f_GET(r) ((((r).an_ieeestatus1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED1f_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LP_ANABILITYf_GET(r) (((r).an_ieeestatus1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LP_ANABILITYf_SET(r,f) (r).an_ieeestatus1[0]=(((r).an_ieeestatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AN_IEEESTATUS1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r,(_r._an_ieeestatus1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEESTATUS1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r,(_r._an_ieeestatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEESTATUS1r BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r
#define AN_IEEESTATUS1r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_t AN_IEEESTATUS1r_t;
#define AN_IEEESTATUS1r_CLR BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_CLR
#define AN_IEEESTATUS1r_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_SET
#define AN_IEEESTATUS1r_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_GET
#define AN_IEEESTATUS1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED0f_GET
#define AN_IEEESTATUS1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED0f_SET
#define AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_GET
#define AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_EXTENDEDNP_ABLEf_SET
#define AN_IEEESTATUS1r_PAGERECEIVEDf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_PAGERECEIVEDf_GET
#define AN_IEEESTATUS1r_PAGERECEIVEDf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_PAGERECEIVEDf_SET
#define AN_IEEESTATUS1r_ANCOMPLETEf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANCOMPLETEf_GET
#define AN_IEEESTATUS1r_ANCOMPLETEf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANCOMPLETEf_SET
#define AN_IEEESTATUS1r_REMOTEFAULTf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_REMOTEFAULTf_GET
#define AN_IEEESTATUS1r_REMOTEFAULTf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_REMOTEFAULTf_SET
#define AN_IEEESTATUS1r_ANABILITYf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANABILITYf_GET
#define AN_IEEESTATUS1r_ANABILITYf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_ANABILITYf_SET
#define AN_IEEESTATUS1r_LINKSTATUSf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LINKSTATUSf_GET
#define AN_IEEESTATUS1r_LINKSTATUSf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LINKSTATUSf_SET
#define AN_IEEESTATUS1r_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED1f_GET
#define AN_IEEESTATUS1r_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_RESERVED1f_SET
#define AN_IEEESTATUS1r_LP_ANABILITYf_GET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LP_ANABILITYf_GET
#define AN_IEEESTATUS1r_LP_ANABILITYf_SET BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r_LP_ANABILITYf_SET
#define READ_AN_IEEESTATUS1r BCMI_HYPERLITE_XGXS_READ_AN_IEEESTATUS1r
#define WRITE_AN_IEEESTATUS1r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEESTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEESTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEEID1
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0002
 * DEVAD:    7
 * DESC:     AN Device ID [15:0]
 * SIZE:     32
 * FIELDS:
 *     IEEEID1          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r (0x07000002 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEEID1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEEID1r_s {
	uint32_t v[1];
	uint32_t an_ieeeid1[1];
	uint32_t _an_ieeeid1;
} BCMI_HYPERLITE_XGXS_AN_IEEEID1r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_CLR(r) (r).an_ieeeid1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_SET(r,d) (r).an_ieeeid1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_GET(r) (r).an_ieeeid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_IEEEID1f_GET(r) (((r).an_ieeeid1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_IEEEID1r_IEEEID1f_SET(r,f) (r).an_ieeeid1[0]=(((r).an_ieeeid1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_IEEEID1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEEID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEID1r,(_r._an_ieeeid1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEID1r,(_r._an_ieeeid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEEID1r BCMI_HYPERLITE_XGXS_AN_IEEEID1r
#define AN_IEEEID1r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEEID1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEEID1r_t AN_IEEEID1r_t;
#define AN_IEEEID1r_CLR BCMI_HYPERLITE_XGXS_AN_IEEEID1r_CLR
#define AN_IEEEID1r_SET BCMI_HYPERLITE_XGXS_AN_IEEEID1r_SET
#define AN_IEEEID1r_GET BCMI_HYPERLITE_XGXS_AN_IEEEID1r_GET
#define AN_IEEEID1r_IEEEID1f_GET BCMI_HYPERLITE_XGXS_AN_IEEEID1r_IEEEID1f_GET
#define AN_IEEEID1r_IEEEID1f_SET BCMI_HYPERLITE_XGXS_AN_IEEEID1r_IEEEID1f_SET
#define READ_AN_IEEEID1r BCMI_HYPERLITE_XGXS_READ_AN_IEEEID1r
#define WRITE_AN_IEEEID1r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEEID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEEID2
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0003
 * DEVAD:    7
 * DESC:     AN Device ID [31:16]
 * SIZE:     32
 * FIELDS:
 *     IEEEID2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r (0x07000003 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEEID2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEEID2r_s {
	uint32_t v[1];
	uint32_t an_ieeeid2[1];
	uint32_t _an_ieeeid2;
} BCMI_HYPERLITE_XGXS_AN_IEEEID2r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_CLR(r) (r).an_ieeeid2[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_SET(r,d) (r).an_ieeeid2[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_GET(r) (r).an_ieeeid2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_IEEEID2f_GET(r) (((r).an_ieeeid2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_IEEEID2r_IEEEID2f_SET(r,f) (r).an_ieeeid2[0]=(((r).an_ieeeid2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_IEEEID2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEEID2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEID2r,(_r._an_ieeeid2))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEID2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEID2r,(_r._an_ieeeid2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEEID2r BCMI_HYPERLITE_XGXS_AN_IEEEID2r
#define AN_IEEEID2r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEEID2r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEEID2r_t AN_IEEEID2r_t;
#define AN_IEEEID2r_CLR BCMI_HYPERLITE_XGXS_AN_IEEEID2r_CLR
#define AN_IEEEID2r_SET BCMI_HYPERLITE_XGXS_AN_IEEEID2r_SET
#define AN_IEEEID2r_GET BCMI_HYPERLITE_XGXS_AN_IEEEID2r_GET
#define AN_IEEEID2r_IEEEID2f_GET BCMI_HYPERLITE_XGXS_AN_IEEEID2r_IEEEID2f_GET
#define AN_IEEEID2r_IEEEID2f_SET BCMI_HYPERLITE_XGXS_AN_IEEEID2r_IEEEID2f_SET
#define READ_AN_IEEEID2r BCMI_HYPERLITE_XGXS_READ_AN_IEEEID2r
#define WRITE_AN_IEEEID2r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEEID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEEDEVINPKG2
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0005
 * DEVAD:    7
 * DESC:     AN Devices in Package 1
 * SIZE:     32
 * FIELDS:
 *     RESERVED0        
 *     CL22EXT          
 *     VENDOR1          
 *     VENDOR2          
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r (0x07000005 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEEDEVINPKG2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_s {
	uint32_t v[1];
	uint32_t an_ieeedevinpkg2[1];
	uint32_t _an_ieeedevinpkg2;
} BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CLR(r) (r).an_ieeedevinpkg2[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_SET(r,d) (r).an_ieeedevinpkg2[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_GET(r) (r).an_ieeedevinpkg2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR2f_GET(r) ((((r).an_ieeedevinpkg2[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR2f_SET(r,f) (r).an_ieeedevinpkg2[0]=(((r).an_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR1f_GET(r) ((((r).an_ieeedevinpkg2[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR1f_SET(r,f) (r).an_ieeedevinpkg2[0]=(((r).an_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CL22EXTf_GET(r) ((((r).an_ieeedevinpkg2[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CL22EXTf_SET(r,f) (r).an_ieeedevinpkg2[0]=(((r).an_ieeedevinpkg2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_RESERVED0f_GET(r) (((r).an_ieeedevinpkg2[0]) & 0x1fff)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_RESERVED0f_SET(r,f) (r).an_ieeedevinpkg2[0]=(((r).an_ieeedevinpkg2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access AN_IEEEDEVINPKG2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r,(_r._an_ieeedevinpkg2))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEDEVINPKG2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r,(_r._an_ieeedevinpkg2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r
#define AN_IEEEDEVINPKG2r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_t AN_IEEEDEVINPKG2r_t;
#define AN_IEEEDEVINPKG2r_CLR BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CLR
#define AN_IEEEDEVINPKG2r_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_SET
#define AN_IEEEDEVINPKG2r_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_GET
#define AN_IEEEDEVINPKG2r_VENDOR2f_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR2f_GET
#define AN_IEEEDEVINPKG2r_VENDOR2f_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR2f_SET
#define AN_IEEEDEVINPKG2r_VENDOR1f_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR1f_GET
#define AN_IEEEDEVINPKG2r_VENDOR1f_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_VENDOR1f_SET
#define AN_IEEEDEVINPKG2r_CL22EXTf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CL22EXTf_GET
#define AN_IEEEDEVINPKG2r_CL22EXTf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_CL22EXTf_SET
#define AN_IEEEDEVINPKG2r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_RESERVED0f_GET
#define AN_IEEEDEVINPKG2r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r_RESERVED0f_SET
#define READ_AN_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_READ_AN_IEEEDEVINPKG2r
#define WRITE_AN_IEEEDEVINPKG2r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEDEVINPKG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_IEEEDEVINPKG1
 * BLOCKS:   AN_IEEE0BLK
 * REGADDR:  0x0006
 * DEVAD:    7
 * DESC:     AN Devices in Package 2
 * SIZE:     32
 * FIELDS:
 *     CLAUSE22         
 *     PMA_PMD          
 *     WIS              
 *     PCS_XS           
 *     PHY_XS           
 *     DTE_XS           
 *     TC               
 *     AN               
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r (0x07000006 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_SIZE 4

/*
 * This structure should be used to declare and program AN_IEEEDEVINPKG1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_s {
	uint32_t v[1];
	uint32_t an_ieeedevinpkg1[1];
	uint32_t _an_ieeedevinpkg1;
} BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_t;

#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLR(r) (r).an_ieeedevinpkg1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_SET(r,d) (r).an_ieeedevinpkg1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_GET(r) (r).an_ieeedevinpkg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_RESERVED0f_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 8) & 0xff)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_RESERVED0f_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_ANf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_ANf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_TCf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_TCf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_DTE_XSf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_DTE_XSf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PHY_XSf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PHY_XSf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PCS_XSf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PCS_XSf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_WISf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_WISf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PMA_PMDf_GET(r) ((((r).an_ieeedevinpkg1[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PMA_PMDf_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLAUSE22f_GET(r) (((r).an_ieeedevinpkg1[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLAUSE22f_SET(r,f) (r).an_ieeedevinpkg1[0]=(((r).an_ieeedevinpkg1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AN_IEEEDEVINPKG1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r,(_r._an_ieeedevinpkg1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEDEVINPKG1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r,(_r._an_ieeedevinpkg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r
#define AN_IEEEDEVINPKG1r_SIZE BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_t AN_IEEEDEVINPKG1r_t;
#define AN_IEEEDEVINPKG1r_CLR BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLR
#define AN_IEEEDEVINPKG1r_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_SET
#define AN_IEEEDEVINPKG1r_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_GET
#define AN_IEEEDEVINPKG1r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_RESERVED0f_GET
#define AN_IEEEDEVINPKG1r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_RESERVED0f_SET
#define AN_IEEEDEVINPKG1r_ANf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_ANf_GET
#define AN_IEEEDEVINPKG1r_ANf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_ANf_SET
#define AN_IEEEDEVINPKG1r_TCf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_TCf_GET
#define AN_IEEEDEVINPKG1r_TCf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_TCf_SET
#define AN_IEEEDEVINPKG1r_DTE_XSf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_DTE_XSf_GET
#define AN_IEEEDEVINPKG1r_DTE_XSf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_DTE_XSf_SET
#define AN_IEEEDEVINPKG1r_PHY_XSf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PHY_XSf_GET
#define AN_IEEEDEVINPKG1r_PHY_XSf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PHY_XSf_SET
#define AN_IEEEDEVINPKG1r_PCS_XSf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PCS_XSf_GET
#define AN_IEEEDEVINPKG1r_PCS_XSf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PCS_XSf_SET
#define AN_IEEEDEVINPKG1r_WISf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_WISf_GET
#define AN_IEEEDEVINPKG1r_WISf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_WISf_SET
#define AN_IEEEDEVINPKG1r_PMA_PMDf_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PMA_PMDf_GET
#define AN_IEEEDEVINPKG1r_PMA_PMDf_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_PMA_PMDf_SET
#define AN_IEEEDEVINPKG1r_CLAUSE22f_GET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLAUSE22f_GET
#define AN_IEEEDEVINPKG1r_CLAUSE22f_SET BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r_CLAUSE22f_SET
#define READ_AN_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_READ_AN_IEEEDEVINPKG1r
#define WRITE_AN_IEEEDEVINPKG1r BCMI_HYPERLITE_XGXS_WRITE_AN_IEEEDEVINPKG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_IEEEDEVINPKG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_ADVERTISEMENT0
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0010
 * DEVAD:    7
 * DESC:     AN advertisement 0
 * SIZE:     32
 * FIELDS:
 *     SELECTOR         
 *     TECHABILITY      
 *     XNP_ABLE         
 *     RF               
 *     ACK              
 *     NP               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r (0x07001010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SIZE 4

/*
 * This structure should be used to declare and program AN_ADVERTISEMENT0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_s {
	uint32_t v[1];
	uint32_t an_advertisement0[1];
	uint32_t _an_advertisement0;
} BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_t;

#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_CLR(r) (r).an_advertisement0[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SET(r,d) (r).an_advertisement0[0] = d
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_GET(r) (r).an_advertisement0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_NPf_GET(r) ((((r).an_advertisement0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_NPf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_ACKf_GET(r) ((((r).an_advertisement0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_ACKf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_RFf_GET(r) ((((r).an_advertisement0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_RFf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_XNP_ABLEf_GET(r) ((((r).an_advertisement0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_XNP_ABLEf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_TECHABILITYf_GET(r) ((((r).an_advertisement0[0]) >> 5) & 0x7f)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_TECHABILITYf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x7f << 5)) | ((((uint32_t)f) & 0x7f) << 5))
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SELECTORf_GET(r) (((r).an_advertisement0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SELECTORf_SET(r,f) (r).an_advertisement0[0]=(((r).an_advertisement0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_ADVERTISEMENT0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_ADVERTISEMENT0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r,(_r._an_advertisement0))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_ADVERTISEMENT0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r,(_r._an_advertisement0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_ADVERTISEMENT0r BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r
#define AN_ADVERTISEMENT0r_SIZE BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_t AN_ADVERTISEMENT0r_t;
#define AN_ADVERTISEMENT0r_CLR BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_CLR
#define AN_ADVERTISEMENT0r_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SET
#define AN_ADVERTISEMENT0r_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_GET
#define AN_ADVERTISEMENT0r_NPf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_NPf_GET
#define AN_ADVERTISEMENT0r_NPf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_NPf_SET
#define AN_ADVERTISEMENT0r_ACKf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_ACKf_GET
#define AN_ADVERTISEMENT0r_ACKf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_ACKf_SET
#define AN_ADVERTISEMENT0r_RFf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_RFf_GET
#define AN_ADVERTISEMENT0r_RFf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_RFf_SET
#define AN_ADVERTISEMENT0r_XNP_ABLEf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_XNP_ABLEf_GET
#define AN_ADVERTISEMENT0r_XNP_ABLEf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_XNP_ABLEf_SET
#define AN_ADVERTISEMENT0r_TECHABILITYf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_TECHABILITYf_GET
#define AN_ADVERTISEMENT0r_TECHABILITYf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_TECHABILITYf_SET
#define AN_ADVERTISEMENT0r_SELECTORf_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SELECTORf_GET
#define AN_ADVERTISEMENT0r_SELECTORf_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r_SELECTORf_SET
#define READ_AN_ADVERTISEMENT0r BCMI_HYPERLITE_XGXS_READ_AN_ADVERTISEMENT0r
#define WRITE_AN_ADVERTISEMENT0r BCMI_HYPERLITE_XGXS_WRITE_AN_ADVERTISEMENT0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_ADVERTISEMENT1
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0011
 * DEVAD:    7
 * DESC:     AN advertisement 1
 * SIZE:     32
 * FIELDS:
 *     AN_ADVERTISEMENT1 AN_ADVERTISEMENT1
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r (0x07001011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_SIZE 4

/*
 * This structure should be used to declare and program AN_ADVERTISEMENT1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_s {
	uint32_t v[1];
	uint32_t an_advertisement1[1];
	uint32_t _an_advertisement1;
} BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_t;

#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_CLR(r) (r).an_advertisement1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_SET(r,d) (r).an_advertisement1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_GET(r) (r).an_advertisement1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_GET(r) (((r).an_advertisement1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_SET(r,f) (r).an_advertisement1[0]=(((r).an_advertisement1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_ADVERTISEMENT1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_ADVERTISEMENT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r,(_r._an_advertisement1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_ADVERTISEMENT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r,(_r._an_advertisement1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_ADVERTISEMENT1r BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r
#define AN_ADVERTISEMENT1r_SIZE BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_t AN_ADVERTISEMENT1r_t;
#define AN_ADVERTISEMENT1r_CLR BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_CLR
#define AN_ADVERTISEMENT1r_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_SET
#define AN_ADVERTISEMENT1r_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_GET
#define AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_GET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_GET
#define AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_SET BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r_AN_ADVERTISEMENT1f_SET
#define READ_AN_ADVERTISEMENT1r BCMI_HYPERLITE_XGXS_READ_AN_ADVERTISEMENT1r
#define WRITE_AN_ADVERTISEMENT1r BCMI_HYPERLITE_XGXS_WRITE_AN_ADVERTISEMENT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_ADVERTISEMENT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_LP_BASEPAGEABILITY0
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0013
 * DEVAD:    7
 * DESC:     AN LP base page ability 0
 * SIZE:     32
 * FIELDS:
 *     SELECTOR         
 *     TECHABILITY      
 *     XNP_ABLE         
 *     RF               
 *     ACK              
 *     NP               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r (0x07001013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_BASEPAGEABILITY0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_s {
	uint32_t v[1];
	uint32_t an_lp_basepageability0[1];
	uint32_t _an_lp_basepageability0;
} BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_t;

#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_CLR(r) (r).an_lp_basepageability0[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SET(r,d) (r).an_lp_basepageability0[0] = d
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_GET(r) (r).an_lp_basepageability0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_NPf_GET(r) ((((r).an_lp_basepageability0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_NPf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_ACKf_GET(r) ((((r).an_lp_basepageability0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_ACKf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_RFf_GET(r) ((((r).an_lp_basepageability0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_RFf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_GET(r) ((((r).an_lp_basepageability0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_TECHABILITYf_GET(r) ((((r).an_lp_basepageability0[0]) >> 5) & 0x7f)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_TECHABILITYf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x7f << 5)) | ((((uint32_t)f) & 0x7f) << 5))
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SELECTORf_GET(r) (((r).an_lp_basepageability0[0]) & 0x1f)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SELECTORf_SET(r,f) (r).an_lp_basepageability0[0]=(((r).an_lp_basepageability0[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_LP_BASEPAGEABILITY0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_LP_BASEPAGEABILITY0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r,(_r._an_lp_basepageability0))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_LP_BASEPAGEABILITY0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r,(_r._an_lp_basepageability0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_BASEPAGEABILITY0r BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r
#define AN_LP_BASEPAGEABILITY0r_SIZE BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_t AN_LP_BASEPAGEABILITY0r_t;
#define AN_LP_BASEPAGEABILITY0r_CLR BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_CLR
#define AN_LP_BASEPAGEABILITY0r_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SET
#define AN_LP_BASEPAGEABILITY0r_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_GET
#define AN_LP_BASEPAGEABILITY0r_NPf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_NPf_GET
#define AN_LP_BASEPAGEABILITY0r_NPf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_NPf_SET
#define AN_LP_BASEPAGEABILITY0r_ACKf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_ACKf_GET
#define AN_LP_BASEPAGEABILITY0r_ACKf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_ACKf_SET
#define AN_LP_BASEPAGEABILITY0r_RFf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_RFf_GET
#define AN_LP_BASEPAGEABILITY0r_RFf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_RFf_SET
#define AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_GET
#define AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_XNP_ABLEf_SET
#define AN_LP_BASEPAGEABILITY0r_TECHABILITYf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_TECHABILITYf_GET
#define AN_LP_BASEPAGEABILITY0r_TECHABILITYf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_TECHABILITYf_SET
#define AN_LP_BASEPAGEABILITY0r_SELECTORf_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SELECTORf_GET
#define AN_LP_BASEPAGEABILITY0r_SELECTORf_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r_SELECTORf_SET
#define READ_AN_LP_BASEPAGEABILITY0r BCMI_HYPERLITE_XGXS_READ_AN_LP_BASEPAGEABILITY0r
#define WRITE_AN_LP_BASEPAGEABILITY0r BCMI_HYPERLITE_XGXS_WRITE_AN_LP_BASEPAGEABILITY0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_LP_BASEPAGEABILITY1
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0014
 * DEVAD:    7
 * DESC:     AN LP base page ability 1
 * SIZE:     32
 * FIELDS:
 *     AN_LP_BASEPAGEABILITY1 AN_LP_BASEPAGEABILITY1
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r (0x07001014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_BASEPAGEABILITY1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_s {
	uint32_t v[1];
	uint32_t an_lp_basepageability1[1];
	uint32_t _an_lp_basepageability1;
} BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_t;

#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_CLR(r) (r).an_lp_basepageability1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_SET(r,d) (r).an_lp_basepageability1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_GET(r) (r).an_lp_basepageability1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_GET(r) (((r).an_lp_basepageability1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_SET(r,f) (r).an_lp_basepageability1[0]=(((r).an_lp_basepageability1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_BASEPAGEABILITY1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_LP_BASEPAGEABILITY1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r,(_r._an_lp_basepageability1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_LP_BASEPAGEABILITY1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r,(_r._an_lp_basepageability1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_BASEPAGEABILITY1r BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r
#define AN_LP_BASEPAGEABILITY1r_SIZE BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_t AN_LP_BASEPAGEABILITY1r_t;
#define AN_LP_BASEPAGEABILITY1r_CLR BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_CLR
#define AN_LP_BASEPAGEABILITY1r_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_SET
#define AN_LP_BASEPAGEABILITY1r_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_GET
#define AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_GET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_GET
#define AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_SET BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r_AN_LP_BASEPAGEABILITY1f_SET
#define READ_AN_LP_BASEPAGEABILITY1r BCMI_HYPERLITE_XGXS_READ_AN_LP_BASEPAGEABILITY1r
#define WRITE_AN_LP_BASEPAGEABILITY1r BCMI_HYPERLITE_XGXS_WRITE_AN_LP_BASEPAGEABILITY1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_LP_BASEPAGEABILITY1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_XNP_TRANSMIT0
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0016
 * DEVAD:    7
 * DESC:     AN XNP transmit 0
 * SIZE:     32
 * FIELDS:
 *     MSG              
 *     TOGGLE           
 *     ACK2             
 *     MP               
 *     RESERVED0        
 *     NP               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r (0x07001016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TRANSMIT0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_s {
	uint32_t v[1];
	uint32_t an_xnp_transmit0[1];
	uint32_t _an_xnp_transmit0;
} BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_t;

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_CLR(r) (r).an_xnp_transmit0[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_SET(r,d) (r).an_xnp_transmit0[0] = d
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_GET(r) (r).an_xnp_transmit0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_NPf_GET(r) ((((r).an_xnp_transmit0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_NPf_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_RESERVED0f_GET(r) ((((r).an_xnp_transmit0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_RESERVED0f_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MPf_GET(r) ((((r).an_xnp_transmit0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MPf_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_ACK2f_GET(r) ((((r).an_xnp_transmit0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_ACK2f_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_TOGGLEf_GET(r) ((((r).an_xnp_transmit0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_TOGGLEf_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MSGf_GET(r) (((r).an_xnp_transmit0[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MSGf_SET(r,f) (r).an_xnp_transmit0[0]=(((r).an_xnp_transmit0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_XNP_TRANSMIT0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r,(_r._an_xnp_transmit0))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r,(_r._an_xnp_transmit0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TRANSMIT0r BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r
#define AN_XNP_TRANSMIT0r_SIZE BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_t AN_XNP_TRANSMIT0r_t;
#define AN_XNP_TRANSMIT0r_CLR BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_CLR
#define AN_XNP_TRANSMIT0r_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_SET
#define AN_XNP_TRANSMIT0r_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_GET
#define AN_XNP_TRANSMIT0r_NPf_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_NPf_GET
#define AN_XNP_TRANSMIT0r_NPf_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_NPf_SET
#define AN_XNP_TRANSMIT0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_RESERVED0f_GET
#define AN_XNP_TRANSMIT0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_RESERVED0f_SET
#define AN_XNP_TRANSMIT0r_MPf_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MPf_GET
#define AN_XNP_TRANSMIT0r_MPf_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MPf_SET
#define AN_XNP_TRANSMIT0r_ACK2f_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_ACK2f_GET
#define AN_XNP_TRANSMIT0r_ACK2f_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_ACK2f_SET
#define AN_XNP_TRANSMIT0r_TOGGLEf_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_TOGGLEf_GET
#define AN_XNP_TRANSMIT0r_TOGGLEf_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_TOGGLEf_SET
#define AN_XNP_TRANSMIT0r_MSGf_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MSGf_GET
#define AN_XNP_TRANSMIT0r_MSGf_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r_MSGf_SET
#define READ_AN_XNP_TRANSMIT0r BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT0r
#define WRITE_AN_XNP_TRANSMIT0r BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_XNP_TRANSMIT1
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0017
 * DEVAD:    7
 * DESC:     AN XNP transmit 1
 * SIZE:     32
 * FIELDS:
 *     UCF1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r (0x07001017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TRANSMIT1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_s {
	uint32_t v[1];
	uint32_t an_xnp_transmit1[1];
	uint32_t _an_xnp_transmit1;
} BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_t;

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_CLR(r) (r).an_xnp_transmit1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_SET(r,d) (r).an_xnp_transmit1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_GET(r) (r).an_xnp_transmit1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_UCF1f_GET(r) (((r).an_xnp_transmit1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_UCF1f_SET(r,f) (r).an_xnp_transmit1[0]=(((r).an_xnp_transmit1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_XNP_TRANSMIT1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r,(_r._an_xnp_transmit1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r,(_r._an_xnp_transmit1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TRANSMIT1r BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r
#define AN_XNP_TRANSMIT1r_SIZE BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_t AN_XNP_TRANSMIT1r_t;
#define AN_XNP_TRANSMIT1r_CLR BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_CLR
#define AN_XNP_TRANSMIT1r_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_SET
#define AN_XNP_TRANSMIT1r_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_GET
#define AN_XNP_TRANSMIT1r_UCF1f_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_UCF1f_GET
#define AN_XNP_TRANSMIT1r_UCF1f_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r_UCF1f_SET
#define READ_AN_XNP_TRANSMIT1r BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT1r
#define WRITE_AN_XNP_TRANSMIT1r BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_XNP_TRANSMIT2
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     AN XNP transmit 2
 * SIZE:     32
 * FIELDS:
 *     UCF2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r (0x07001018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TRANSMIT2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_s {
	uint32_t v[1];
	uint32_t an_xnp_transmit2[1];
	uint32_t _an_xnp_transmit2;
} BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_t;

#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_CLR(r) (r).an_xnp_transmit2[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_SET(r,d) (r).an_xnp_transmit2[0] = d
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_GET(r) (r).an_xnp_transmit2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_UCF2f_GET(r) (((r).an_xnp_transmit2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_UCF2f_SET(r,f) (r).an_xnp_transmit2[0]=(((r).an_xnp_transmit2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_XNP_TRANSMIT2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r,(_r._an_xnp_transmit2))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r,(_r._an_xnp_transmit2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TRANSMIT2r BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r
#define AN_XNP_TRANSMIT2r_SIZE BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_t AN_XNP_TRANSMIT2r_t;
#define AN_XNP_TRANSMIT2r_CLR BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_CLR
#define AN_XNP_TRANSMIT2r_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_SET
#define AN_XNP_TRANSMIT2r_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_GET
#define AN_XNP_TRANSMIT2r_UCF2f_GET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_UCF2f_GET
#define AN_XNP_TRANSMIT2r_UCF2f_SET BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r_UCF2f_SET
#define READ_AN_XNP_TRANSMIT2r BCMI_HYPERLITE_XGXS_READ_AN_XNP_TRANSMIT2r
#define WRITE_AN_XNP_TRANSMIT2r BCMI_HYPERLITE_XGXS_WRITE_AN_XNP_TRANSMIT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_XNP_TRANSMIT2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_LP_XNP_ABILITY0
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x0019
 * DEVAD:    7
 * DESC:     AN LP XNP ability 0
 * SIZE:     32
 * FIELDS:
 *     MSG              
 *     TOGGLE           
 *     ACK2             
 *     MP               
 *     RESERVED0        
 *     NP               
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r (0x07001019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABILITY0.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_ability0[1];
	uint32_t _an_lp_xnp_ability0;
} BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_t;

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_CLR(r) (r).an_lp_xnp_ability0[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_SET(r,d) (r).an_lp_xnp_ability0[0] = d
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_GET(r) (r).an_lp_xnp_ability0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_NPf_GET(r) ((((r).an_lp_xnp_ability0[0]) >> 15) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_NPf_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_RESERVED0f_GET(r) ((((r).an_lp_xnp_ability0[0]) >> 14) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_RESERVED0f_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MPf_GET(r) ((((r).an_lp_xnp_ability0[0]) >> 13) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MPf_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_ACK2f_GET(r) ((((r).an_lp_xnp_ability0[0]) >> 12) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_ACK2f_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_TOGGLEf_GET(r) ((((r).an_lp_xnp_ability0[0]) >> 11) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_TOGGLEf_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MSGf_GET(r) (((r).an_lp_xnp_ability0[0]) & 0x7ff)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MSGf_SET(r,f) (r).an_lp_xnp_ability0[0]=(((r).an_lp_xnp_ability0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_LP_XNP_ABILITY0.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r,(_r._an_lp_xnp_ability0))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r,(_r._an_lp_xnp_ability0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABILITY0r BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r
#define AN_LP_XNP_ABILITY0r_SIZE BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_t AN_LP_XNP_ABILITY0r_t;
#define AN_LP_XNP_ABILITY0r_CLR BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_CLR
#define AN_LP_XNP_ABILITY0r_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_SET
#define AN_LP_XNP_ABILITY0r_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_GET
#define AN_LP_XNP_ABILITY0r_NPf_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_NPf_GET
#define AN_LP_XNP_ABILITY0r_NPf_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_NPf_SET
#define AN_LP_XNP_ABILITY0r_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_RESERVED0f_GET
#define AN_LP_XNP_ABILITY0r_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_RESERVED0f_SET
#define AN_LP_XNP_ABILITY0r_MPf_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MPf_GET
#define AN_LP_XNP_ABILITY0r_MPf_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MPf_SET
#define AN_LP_XNP_ABILITY0r_ACK2f_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_ACK2f_GET
#define AN_LP_XNP_ABILITY0r_ACK2f_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_ACK2f_SET
#define AN_LP_XNP_ABILITY0r_TOGGLEf_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_TOGGLEf_GET
#define AN_LP_XNP_ABILITY0r_TOGGLEf_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_TOGGLEf_SET
#define AN_LP_XNP_ABILITY0r_MSGf_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MSGf_GET
#define AN_LP_XNP_ABILITY0r_MSGf_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r_MSGf_SET
#define READ_AN_LP_XNP_ABILITY0r BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY0r
#define WRITE_AN_LP_XNP_ABILITY0r BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_LP_XNP_ABILITY1
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x001a
 * DEVAD:    7
 * DESC:     AN LP XNP ability 1
 * SIZE:     32
 * FIELDS:
 *     UCF1             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r (0x0700101a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABILITY1.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_ability1[1];
	uint32_t _an_lp_xnp_ability1;
} BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_t;

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_CLR(r) (r).an_lp_xnp_ability1[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_SET(r,d) (r).an_lp_xnp_ability1[0] = d
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_GET(r) (r).an_lp_xnp_ability1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_UCF1f_GET(r) (((r).an_lp_xnp_ability1[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_UCF1f_SET(r,f) (r).an_lp_xnp_ability1[0]=(((r).an_lp_xnp_ability1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_XNP_ABILITY1.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r,(_r._an_lp_xnp_ability1))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r,(_r._an_lp_xnp_ability1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABILITY1r BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r
#define AN_LP_XNP_ABILITY1r_SIZE BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_t AN_LP_XNP_ABILITY1r_t;
#define AN_LP_XNP_ABILITY1r_CLR BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_CLR
#define AN_LP_XNP_ABILITY1r_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_SET
#define AN_LP_XNP_ABILITY1r_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_GET
#define AN_LP_XNP_ABILITY1r_UCF1f_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_UCF1f_GET
#define AN_LP_XNP_ABILITY1r_UCF1f_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r_UCF1f_SET
#define READ_AN_LP_XNP_ABILITY1r BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY1r
#define WRITE_AN_LP_XNP_ABILITY1r BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_LP_XNP_ABILITY2
 * BLOCKS:   AN_IEEE1BLK
 * REGADDR:  0x001b
 * DEVAD:    7
 * DESC:     AN LP XNP ability 2
 * SIZE:     32
 * FIELDS:
 *     UCF2             
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r (0x0700101b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABILITY2.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_ability2[1];
	uint32_t _an_lp_xnp_ability2;
} BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_t;

#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_CLR(r) (r).an_lp_xnp_ability2[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_SET(r,d) (r).an_lp_xnp_ability2[0] = d
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_GET(r) (r).an_lp_xnp_ability2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_UCF2f_GET(r) (((r).an_lp_xnp_ability2[0]) & 0xffff)
#define BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_UCF2f_SET(r,f) (r).an_lp_xnp_ability2[0]=(((r).an_lp_xnp_ability2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_XNP_ABILITY2.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r,(_r._an_lp_xnp_ability2))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r,(_r._an_lp_xnp_ability2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABILITY2r BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r
#define AN_LP_XNP_ABILITY2r_SIZE BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_t AN_LP_XNP_ABILITY2r_t;
#define AN_LP_XNP_ABILITY2r_CLR BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_CLR
#define AN_LP_XNP_ABILITY2r_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_SET
#define AN_LP_XNP_ABILITY2r_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_GET
#define AN_LP_XNP_ABILITY2r_UCF2f_GET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_UCF2f_GET
#define AN_LP_XNP_ABILITY2r_UCF2f_SET BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r_UCF2f_SET
#define READ_AN_LP_XNP_ABILITY2r BCMI_HYPERLITE_XGXS_READ_AN_LP_XNP_ABILITY2r
#define WRITE_AN_LP_XNP_ABILITY2r BCMI_HYPERLITE_XGXS_WRITE_AN_LP_XNP_ABILITY2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_LP_XNP_ABILITY2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_HYPERLITE_XGXS
 * REGISTER:  AN_BPSTATUS
 * BLOCKS:   AN_IEEE3BLK
 * REGADDR:  0x0030
 * DEVAD:    7
 * DESC:     Autonegotiation Backplane Ethernet status
 * SIZE:     32
 * FIELDS:
 *     LP_AN_ABLE       
 *     RESERVED2        
 *     LINK             
 *     AN_ABLE          
 *     RF               
 *     ANCOMPLETE       
 *     PAGERCVD         
 *     XNPSTATUS        
 *     RESERVED1        
 *     PDETFAULT        
 *     RESERVED0        
 *
 ******************************************************************************/
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr (0x07003010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program AN_BPSTATUS.
 *
 */
typedef union BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_s {
	uint32_t v[1];
	uint32_t an_bpstatus[1];
	uint32_t _an_bpstatus;
} BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_t;

#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_CLR(r) (r).an_bpstatus[0] = 0
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_SET(r,d) (r).an_bpstatus[0] = d
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_GET(r) (r).an_bpstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED0f_GET(r) ((((r).an_bpstatus[0]) >> 10) & 0x3f)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED0f_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PDETFAULTf_GET(r) ((((r).an_bpstatus[0]) >> 9) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PDETFAULTf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED1f_GET(r) ((((r).an_bpstatus[0]) >> 8) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED1f_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_XNPSTATUSf_GET(r) ((((r).an_bpstatus[0]) >> 7) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_XNPSTATUSf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PAGERCVDf_GET(r) ((((r).an_bpstatus[0]) >> 6) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PAGERCVDf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_ANCOMPLETEf_GET(r) ((((r).an_bpstatus[0]) >> 5) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_ANCOMPLETEf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RFf_GET(r) ((((r).an_bpstatus[0]) >> 4) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RFf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_AN_ABLEf_GET(r) ((((r).an_bpstatus[0]) >> 3) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_AN_ABLEf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LINKf_GET(r) ((((r).an_bpstatus[0]) >> 2) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LINKf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED2f_GET(r) ((((r).an_bpstatus[0]) >> 1) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED2f_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LP_AN_ABLEf_GET(r) (((r).an_bpstatus[0]) & 0x1)
#define BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LP_AN_ABLEf_SET(r,f) (r).an_bpstatus[0]=(((r).an_bpstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AN_BPSTATUS.
 *
 */
#define BCMI_HYPERLITE_XGXS_READ_AN_BPSTATUSr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_HYPERLITE_XGXS_AN_BPSTATUSr,(_r._an_bpstatus))
#define BCMI_HYPERLITE_XGXS_WRITE_AN_BPSTATUSr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_HYPERLITE_XGXS_AN_BPSTATUSr,(_r._an_bpstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_BPSTATUSr BCMI_HYPERLITE_XGXS_AN_BPSTATUSr
#define AN_BPSTATUSr_SIZE BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_SIZE
typedef BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_t AN_BPSTATUSr_t;
#define AN_BPSTATUSr_CLR BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_CLR
#define AN_BPSTATUSr_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_SET
#define AN_BPSTATUSr_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_GET
#define AN_BPSTATUSr_RESERVED0f_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED0f_GET
#define AN_BPSTATUSr_RESERVED0f_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED0f_SET
#define AN_BPSTATUSr_PDETFAULTf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PDETFAULTf_GET
#define AN_BPSTATUSr_PDETFAULTf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PDETFAULTf_SET
#define AN_BPSTATUSr_RESERVED1f_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED1f_GET
#define AN_BPSTATUSr_RESERVED1f_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED1f_SET
#define AN_BPSTATUSr_XNPSTATUSf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_XNPSTATUSf_GET
#define AN_BPSTATUSr_XNPSTATUSf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_XNPSTATUSf_SET
#define AN_BPSTATUSr_PAGERCVDf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PAGERCVDf_GET
#define AN_BPSTATUSr_PAGERCVDf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_PAGERCVDf_SET
#define AN_BPSTATUSr_ANCOMPLETEf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_ANCOMPLETEf_GET
#define AN_BPSTATUSr_ANCOMPLETEf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_ANCOMPLETEf_SET
#define AN_BPSTATUSr_RFf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RFf_GET
#define AN_BPSTATUSr_RFf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RFf_SET
#define AN_BPSTATUSr_AN_ABLEf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_AN_ABLEf_GET
#define AN_BPSTATUSr_AN_ABLEf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_AN_ABLEf_SET
#define AN_BPSTATUSr_LINKf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LINKf_GET
#define AN_BPSTATUSr_LINKf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LINKf_SET
#define AN_BPSTATUSr_RESERVED2f_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED2f_GET
#define AN_BPSTATUSr_RESERVED2f_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_RESERVED2f_SET
#define AN_BPSTATUSr_LP_AN_ABLEf_GET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LP_AN_ABLEf_GET
#define AN_BPSTATUSr_LP_AN_ABLEf_SET BCMI_HYPERLITE_XGXS_AN_BPSTATUSr_LP_AN_ABLEf_SET
#define READ_AN_BPSTATUSr BCMI_HYPERLITE_XGXS_READ_AN_BPSTATUSr
#define WRITE_AN_BPSTATUSr BCMI_HYPERLITE_XGXS_WRITE_AN_BPSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_HYPERLITE_XGXS_AN_BPSTATUSr'
 ******************************************************************************/




#endif /* __BCMI_HYPERLITE_XGXS_DEFS_H__ */
