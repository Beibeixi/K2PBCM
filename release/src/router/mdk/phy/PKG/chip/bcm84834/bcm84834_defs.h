#ifndef __BCM84834_DEFS_H__
#define __BCM84834_DEFS_H__
/*******************************************************************************
 *
 * $Copyright: Copyright 2013 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCM84834.
 * This file provides all basic definitions required to program the BCM84834.
 *
 * This file is autogenerated. Please do not edit.
 *
 ******************************************************************************/

#include <phy/phy_brcm_xe.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 *
 ******************************************************************************/



/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_CTL1
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0000
 * DEVAD:    1
 * DESC:     IEEE PMA/PMD control 1 register
 * SIZE:     32
 * FIELDS:
 *     LPBK             
 *     SPEED_SEL_10G    
 *     SPEED_SEL_1      
 *     LOW_PWR          
 *     SPEED_SEL_0      
 *     RESET            
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_CTL1r (0x00010000 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_CTL1.
 *
 */
typedef union BCM84834_PMD_IEEE_CTL1r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_ctl1[1];
	uint32_t _pmd_ieee_ctl1;
} BCM84834_PMD_IEEE_CTL1r_t;

#define BCM84834_PMD_IEEE_CTL1r_CLR(r) (r).pmd_ieee_ctl1[0] = 0
#define BCM84834_PMD_IEEE_CTL1r_SET(r,d) (r).pmd_ieee_ctl1[0] = d
#define BCM84834_PMD_IEEE_CTL1r_GET(r) (r).pmd_ieee_ctl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_CTL1r_RESETf_GET(r) ((((r).pmd_ieee_ctl1[0]) >> 15) & 0x1)
#define BCM84834_PMD_IEEE_CTL1r_RESETf_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_0f_GET(r) ((((r).pmd_ieee_ctl1[0]) >> 13) & 0x1)
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_0f_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PMD_IEEE_CTL1r_LOW_PWRf_GET(r) ((((r).pmd_ieee_ctl1[0]) >> 11) & 0x1)
#define BCM84834_PMD_IEEE_CTL1r_LOW_PWRf_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_1f_GET(r) ((((r).pmd_ieee_ctl1[0]) >> 6) & 0x1)
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_1f_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_10Gf_GET(r) ((((r).pmd_ieee_ctl1[0]) >> 2) & 0xf)
#define BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_10Gf_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2))
#define BCM84834_PMD_IEEE_CTL1r_LPBKf_GET(r) (((r).pmd_ieee_ctl1[0]) & 0x1)
#define BCM84834_PMD_IEEE_CTL1r_LPBKf_SET(r,f) (r).pmd_ieee_ctl1[0]=(((r).pmd_ieee_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_CTL1.
 *
 */
#define BCM84834_READ_PMD_IEEE_CTL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_CTL1r,(_r._pmd_ieee_ctl1))
#define BCM84834_WRITE_PMD_IEEE_CTL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_CTL1r,(_r._pmd_ieee_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_CTL1r BCM84834_PMD_IEEE_CTL1r
#define PMD_IEEE_CTL1r_SIZE BCM84834_PMD_IEEE_CTL1r_SIZE
typedef BCM84834_PMD_IEEE_CTL1r_t PMD_IEEE_CTL1r_t;
#define PMD_IEEE_CTL1r_CLR BCM84834_PMD_IEEE_CTL1r_CLR
#define PMD_IEEE_CTL1r_SET BCM84834_PMD_IEEE_CTL1r_SET
#define PMD_IEEE_CTL1r_GET BCM84834_PMD_IEEE_CTL1r_GET
#define PMD_IEEE_CTL1r_RESETf_GET BCM84834_PMD_IEEE_CTL1r_RESETf_GET
#define PMD_IEEE_CTL1r_RESETf_SET BCM84834_PMD_IEEE_CTL1r_RESETf_SET
#define PMD_IEEE_CTL1r_SPEED_SEL_0f_GET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_0f_GET
#define PMD_IEEE_CTL1r_SPEED_SEL_0f_SET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_0f_SET
#define PMD_IEEE_CTL1r_LOW_PWRf_GET BCM84834_PMD_IEEE_CTL1r_LOW_PWRf_GET
#define PMD_IEEE_CTL1r_LOW_PWRf_SET BCM84834_PMD_IEEE_CTL1r_LOW_PWRf_SET
#define PMD_IEEE_CTL1r_SPEED_SEL_1f_GET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_1f_GET
#define PMD_IEEE_CTL1r_SPEED_SEL_1f_SET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_1f_SET
#define PMD_IEEE_CTL1r_SPEED_SEL_10Gf_GET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_10Gf_GET
#define PMD_IEEE_CTL1r_SPEED_SEL_10Gf_SET BCM84834_PMD_IEEE_CTL1r_SPEED_SEL_10Gf_SET
#define PMD_IEEE_CTL1r_LPBKf_GET BCM84834_PMD_IEEE_CTL1r_LPBKf_GET
#define PMD_IEEE_CTL1r_LPBKf_SET BCM84834_PMD_IEEE_CTL1r_LPBKf_SET
#define READ_PMD_IEEE_CTL1r BCM84834_READ_PMD_IEEE_CTL1r
#define WRITE_PMD_IEEE_CTL1r BCM84834_WRITE_PMD_IEEE_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_CTL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_ST1
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0001
 * DEVAD:    1
 * DESC:     IEEE PMA/PMD status 1 register
 * SIZE:     32
 * FIELDS:
 *     CAP_LOW_PWR      
 *     RCV_LINK_ST      
 *     FAULT            
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_ST1r (0x00010001 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_ST1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_ST1.
 *
 */
typedef union BCM84834_PMD_IEEE_ST1r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_st1[1];
	uint32_t _pmd_ieee_st1;
} BCM84834_PMD_IEEE_ST1r_t;

#define BCM84834_PMD_IEEE_ST1r_CLR(r) (r).pmd_ieee_st1[0] = 0
#define BCM84834_PMD_IEEE_ST1r_SET(r,d) (r).pmd_ieee_st1[0] = d
#define BCM84834_PMD_IEEE_ST1r_GET(r) (r).pmd_ieee_st1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_ST1r_FAULTf_GET(r) ((((r).pmd_ieee_st1[0]) >> 7) & 0x1)
#define BCM84834_PMD_IEEE_ST1r_FAULTf_SET(r,f) (r).pmd_ieee_st1[0]=(((r).pmd_ieee_st1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PMD_IEEE_ST1r_RCV_LINK_STf_GET(r) ((((r).pmd_ieee_st1[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_ST1r_RCV_LINK_STf_SET(r,f) (r).pmd_ieee_st1[0]=(((r).pmd_ieee_st1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_ST1r_CAP_LOW_PWRf_GET(r) ((((r).pmd_ieee_st1[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_ST1r_CAP_LOW_PWRf_SET(r,f) (r).pmd_ieee_st1[0]=(((r).pmd_ieee_st1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access PMD_IEEE_ST1.
 *
 */
#define BCM84834_READ_PMD_IEEE_ST1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_ST1r,(_r._pmd_ieee_st1))
#define BCM84834_WRITE_PMD_IEEE_ST1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_ST1r,(_r._pmd_ieee_st1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_ST1r BCM84834_PMD_IEEE_ST1r
#define PMD_IEEE_ST1r_SIZE BCM84834_PMD_IEEE_ST1r_SIZE
typedef BCM84834_PMD_IEEE_ST1r_t PMD_IEEE_ST1r_t;
#define PMD_IEEE_ST1r_CLR BCM84834_PMD_IEEE_ST1r_CLR
#define PMD_IEEE_ST1r_SET BCM84834_PMD_IEEE_ST1r_SET
#define PMD_IEEE_ST1r_GET BCM84834_PMD_IEEE_ST1r_GET
#define PMD_IEEE_ST1r_FAULTf_GET BCM84834_PMD_IEEE_ST1r_FAULTf_GET
#define PMD_IEEE_ST1r_FAULTf_SET BCM84834_PMD_IEEE_ST1r_FAULTf_SET
#define PMD_IEEE_ST1r_RCV_LINK_STf_GET BCM84834_PMD_IEEE_ST1r_RCV_LINK_STf_GET
#define PMD_IEEE_ST1r_RCV_LINK_STf_SET BCM84834_PMD_IEEE_ST1r_RCV_LINK_STf_SET
#define PMD_IEEE_ST1r_CAP_LOW_PWRf_GET BCM84834_PMD_IEEE_ST1r_CAP_LOW_PWRf_GET
#define PMD_IEEE_ST1r_CAP_LOW_PWRf_SET BCM84834_PMD_IEEE_ST1r_CAP_LOW_PWRf_SET
#define READ_PMD_IEEE_ST1r BCM84834_READ_PMD_IEEE_ST1r
#define WRITE_PMD_IEEE_ST1r BCM84834_WRITE_PMD_IEEE_ST1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_ST1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_PHY_ID0
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0002
 * DEVAD:    1
 * DESC:     IEEE PMA/PMD device identifier part 0
 * SIZE:     32
 * FIELDS:
 *     DEV_ID0          
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_PHY_ID0r (0x00010002 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_PHY_ID0r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_PHY_ID0.
 *
 */
typedef union BCM84834_PMD_IEEE_PHY_ID0r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_phy_id0[1];
	uint32_t _pmd_ieee_phy_id0;
} BCM84834_PMD_IEEE_PHY_ID0r_t;

#define BCM84834_PMD_IEEE_PHY_ID0r_CLR(r) (r).pmd_ieee_phy_id0[0] = 0
#define BCM84834_PMD_IEEE_PHY_ID0r_SET(r,d) (r).pmd_ieee_phy_id0[0] = d
#define BCM84834_PMD_IEEE_PHY_ID0r_GET(r) (r).pmd_ieee_phy_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_PHY_ID0r_DEV_ID0f_GET(r) (((r).pmd_ieee_phy_id0[0]) & 0xffff)
#define BCM84834_PMD_IEEE_PHY_ID0r_DEV_ID0f_SET(r,f) (r).pmd_ieee_phy_id0[0]=(((r).pmd_ieee_phy_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_PHY_ID0.
 *
 */
#define BCM84834_READ_PMD_IEEE_PHY_ID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_PHY_ID0r,(_r._pmd_ieee_phy_id0))
#define BCM84834_WRITE_PMD_IEEE_PHY_ID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_PHY_ID0r,(_r._pmd_ieee_phy_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_PHY_ID0r BCM84834_PMD_IEEE_PHY_ID0r
#define PMD_IEEE_PHY_ID0r_SIZE BCM84834_PMD_IEEE_PHY_ID0r_SIZE
typedef BCM84834_PMD_IEEE_PHY_ID0r_t PMD_IEEE_PHY_ID0r_t;
#define PMD_IEEE_PHY_ID0r_CLR BCM84834_PMD_IEEE_PHY_ID0r_CLR
#define PMD_IEEE_PHY_ID0r_SET BCM84834_PMD_IEEE_PHY_ID0r_SET
#define PMD_IEEE_PHY_ID0r_GET BCM84834_PMD_IEEE_PHY_ID0r_GET
#define PMD_IEEE_PHY_ID0r_DEV_ID0f_GET BCM84834_PMD_IEEE_PHY_ID0r_DEV_ID0f_GET
#define PMD_IEEE_PHY_ID0r_DEV_ID0f_SET BCM84834_PMD_IEEE_PHY_ID0r_DEV_ID0f_SET
#define READ_PMD_IEEE_PHY_ID0r BCM84834_READ_PMD_IEEE_PHY_ID0r
#define WRITE_PMD_IEEE_PHY_ID0r BCM84834_WRITE_PMD_IEEE_PHY_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_PHY_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_PHY_ID1
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0003
 * DEVAD:    1
 * DESC:     IEEE PMA/PMD device identifier part 1
 * SIZE:     32
 * FIELDS:
 *     DEV_ID1          
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_PHY_ID1r (0x00010003 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_PHY_ID1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_PHY_ID1.
 *
 */
typedef union BCM84834_PMD_IEEE_PHY_ID1r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_phy_id1[1];
	uint32_t _pmd_ieee_phy_id1;
} BCM84834_PMD_IEEE_PHY_ID1r_t;

#define BCM84834_PMD_IEEE_PHY_ID1r_CLR(r) (r).pmd_ieee_phy_id1[0] = 0
#define BCM84834_PMD_IEEE_PHY_ID1r_SET(r,d) (r).pmd_ieee_phy_id1[0] = d
#define BCM84834_PMD_IEEE_PHY_ID1r_GET(r) (r).pmd_ieee_phy_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_PHY_ID1r_DEV_ID1f_GET(r) (((r).pmd_ieee_phy_id1[0]) & 0xffff)
#define BCM84834_PMD_IEEE_PHY_ID1r_DEV_ID1f_SET(r,f) (r).pmd_ieee_phy_id1[0]=(((r).pmd_ieee_phy_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_PHY_ID1.
 *
 */
#define BCM84834_READ_PMD_IEEE_PHY_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_PHY_ID1r,(_r._pmd_ieee_phy_id1))
#define BCM84834_WRITE_PMD_IEEE_PHY_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_PHY_ID1r,(_r._pmd_ieee_phy_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_PHY_ID1r BCM84834_PMD_IEEE_PHY_ID1r
#define PMD_IEEE_PHY_ID1r_SIZE BCM84834_PMD_IEEE_PHY_ID1r_SIZE
typedef BCM84834_PMD_IEEE_PHY_ID1r_t PMD_IEEE_PHY_ID1r_t;
#define PMD_IEEE_PHY_ID1r_CLR BCM84834_PMD_IEEE_PHY_ID1r_CLR
#define PMD_IEEE_PHY_ID1r_SET BCM84834_PMD_IEEE_PHY_ID1r_SET
#define PMD_IEEE_PHY_ID1r_GET BCM84834_PMD_IEEE_PHY_ID1r_GET
#define PMD_IEEE_PHY_ID1r_DEV_ID1f_GET BCM84834_PMD_IEEE_PHY_ID1r_DEV_ID1f_GET
#define PMD_IEEE_PHY_ID1r_DEV_ID1f_SET BCM84834_PMD_IEEE_PHY_ID1r_DEV_ID1f_SET
#define READ_PMD_IEEE_PHY_ID1r BCM84834_READ_PMD_IEEE_PHY_ID1r
#define WRITE_PMD_IEEE_PHY_ID1r BCM84834_WRITE_PMD_IEEE_PHY_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_PHY_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SP_CAP
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0004
 * DEVAD:    1
 * DESC:     IEEE PMA/PMD speed ability
 * SIZE:     32
 * FIELDS:
 *     CAP_10G          
 *     CAP_2BASE_TL     
 *     CAP_10PASS_TS    
 *     CAP_1000M        
 *     CAP_100M         
 *     CAP_10M          
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SP_CAPr (0x00010004 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SP_CAPr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SP_CAP.
 *
 */
typedef union BCM84834_PMD_IEEE_SP_CAPr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_sp_cap[1];
	uint32_t _pmd_ieee_sp_cap;
} BCM84834_PMD_IEEE_SP_CAPr_t;

#define BCM84834_PMD_IEEE_SP_CAPr_CLR(r) (r).pmd_ieee_sp_cap[0] = 0
#define BCM84834_PMD_IEEE_SP_CAPr_SET(r,d) (r).pmd_ieee_sp_cap[0] = d
#define BCM84834_PMD_IEEE_SP_CAPr_GET(r) (r).pmd_ieee_sp_cap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10Mf_GET(r) ((((r).pmd_ieee_sp_cap[0]) >> 6) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10Mf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_100Mf_GET(r) ((((r).pmd_ieee_sp_cap[0]) >> 5) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_100Mf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_1000Mf_GET(r) ((((r).pmd_ieee_sp_cap[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_1000Mf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_GET(r) ((((r).pmd_ieee_sp_cap[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_GET(r) ((((r).pmd_ieee_sp_cap[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10Gf_GET(r) (((r).pmd_ieee_sp_cap[0]) & 0x1)
#define BCM84834_PMD_IEEE_SP_CAPr_CAP_10Gf_SET(r,f) (r).pmd_ieee_sp_cap[0]=(((r).pmd_ieee_sp_cap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_SP_CAP.
 *
 */
#define BCM84834_READ_PMD_IEEE_SP_CAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SP_CAPr,(_r._pmd_ieee_sp_cap))
#define BCM84834_WRITE_PMD_IEEE_SP_CAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SP_CAPr,(_r._pmd_ieee_sp_cap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SP_CAPr BCM84834_PMD_IEEE_SP_CAPr
#define PMD_IEEE_SP_CAPr_SIZE BCM84834_PMD_IEEE_SP_CAPr_SIZE
typedef BCM84834_PMD_IEEE_SP_CAPr_t PMD_IEEE_SP_CAPr_t;
#define PMD_IEEE_SP_CAPr_CLR BCM84834_PMD_IEEE_SP_CAPr_CLR
#define PMD_IEEE_SP_CAPr_SET BCM84834_PMD_IEEE_SP_CAPr_SET
#define PMD_IEEE_SP_CAPr_GET BCM84834_PMD_IEEE_SP_CAPr_GET
#define PMD_IEEE_SP_CAPr_CAP_10Mf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_10Mf_GET
#define PMD_IEEE_SP_CAPr_CAP_10Mf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_10Mf_SET
#define PMD_IEEE_SP_CAPr_CAP_100Mf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_100Mf_GET
#define PMD_IEEE_SP_CAPr_CAP_100Mf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_100Mf_SET
#define PMD_IEEE_SP_CAPr_CAP_1000Mf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_1000Mf_GET
#define PMD_IEEE_SP_CAPr_CAP_1000Mf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_1000Mf_SET
#define PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_GET
#define PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_10PASS_TSf_SET
#define PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_GET
#define PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_2BASE_TLf_SET
#define PMD_IEEE_SP_CAPr_CAP_10Gf_GET BCM84834_PMD_IEEE_SP_CAPr_CAP_10Gf_GET
#define PMD_IEEE_SP_CAPr_CAP_10Gf_SET BCM84834_PMD_IEEE_SP_CAPr_CAP_10Gf_SET
#define READ_PMD_IEEE_SP_CAPr BCM84834_READ_PMD_IEEE_SP_CAPr
#define WRITE_PMD_IEEE_SP_CAPr BCM84834_WRITE_PMD_IEEE_SP_CAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SP_CAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_DEV0
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0005
 * DEVAD:    1
 * DESC:     Devices in package register part 0
 * SIZE:     32
 * FIELDS:
 *     CLA22_PRE        
 *     PMD_PRE          
 *     WIS_PRE          
 *     PCS_PRE          
 *     PHYXS_PRE        
 *     DTEXS_PRE        
 *     TC_PRE           
 *     AUTONEG_PRE      
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_DEV0r (0x00010005 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_DEV0r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_DEV0.
 *
 */
typedef union BCM84834_PMD_IEEE_DEV0r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_dev0[1];
	uint32_t _pmd_ieee_dev0;
} BCM84834_PMD_IEEE_DEV0r_t;

#define BCM84834_PMD_IEEE_DEV0r_CLR(r) (r).pmd_ieee_dev0[0] = 0
#define BCM84834_PMD_IEEE_DEV0r_SET(r,d) (r).pmd_ieee_dev0[0] = d
#define BCM84834_PMD_IEEE_DEV0r_GET(r) (r).pmd_ieee_dev0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_DEV0r_AUTONEG_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 7) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_AUTONEG_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PMD_IEEE_DEV0r_TC_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 6) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_TC_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PMD_IEEE_DEV0r_DTEXS_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 5) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_DTEXS_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PMD_IEEE_DEV0r_PHYXS_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_PHYXS_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_DEV0r_PCS_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 3) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_PCS_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PMD_IEEE_DEV0r_WIS_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_WIS_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_DEV0r_PMD_PREf_GET(r) ((((r).pmd_ieee_dev0[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_PMD_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PMD_IEEE_DEV0r_CLA22_PREf_GET(r) (((r).pmd_ieee_dev0[0]) & 0x1)
#define BCM84834_PMD_IEEE_DEV0r_CLA22_PREf_SET(r,f) (r).pmd_ieee_dev0[0]=(((r).pmd_ieee_dev0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_DEV0.
 *
 */
#define BCM84834_READ_PMD_IEEE_DEV0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_DEV0r,(_r._pmd_ieee_dev0))
#define BCM84834_WRITE_PMD_IEEE_DEV0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_DEV0r,(_r._pmd_ieee_dev0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_DEV0r BCM84834_PMD_IEEE_DEV0r
#define PMD_IEEE_DEV0r_SIZE BCM84834_PMD_IEEE_DEV0r_SIZE
typedef BCM84834_PMD_IEEE_DEV0r_t PMD_IEEE_DEV0r_t;
#define PMD_IEEE_DEV0r_CLR BCM84834_PMD_IEEE_DEV0r_CLR
#define PMD_IEEE_DEV0r_SET BCM84834_PMD_IEEE_DEV0r_SET
#define PMD_IEEE_DEV0r_GET BCM84834_PMD_IEEE_DEV0r_GET
#define PMD_IEEE_DEV0r_AUTONEG_PREf_GET BCM84834_PMD_IEEE_DEV0r_AUTONEG_PREf_GET
#define PMD_IEEE_DEV0r_AUTONEG_PREf_SET BCM84834_PMD_IEEE_DEV0r_AUTONEG_PREf_SET
#define PMD_IEEE_DEV0r_TC_PREf_GET BCM84834_PMD_IEEE_DEV0r_TC_PREf_GET
#define PMD_IEEE_DEV0r_TC_PREf_SET BCM84834_PMD_IEEE_DEV0r_TC_PREf_SET
#define PMD_IEEE_DEV0r_DTEXS_PREf_GET BCM84834_PMD_IEEE_DEV0r_DTEXS_PREf_GET
#define PMD_IEEE_DEV0r_DTEXS_PREf_SET BCM84834_PMD_IEEE_DEV0r_DTEXS_PREf_SET
#define PMD_IEEE_DEV0r_PHYXS_PREf_GET BCM84834_PMD_IEEE_DEV0r_PHYXS_PREf_GET
#define PMD_IEEE_DEV0r_PHYXS_PREf_SET BCM84834_PMD_IEEE_DEV0r_PHYXS_PREf_SET
#define PMD_IEEE_DEV0r_PCS_PREf_GET BCM84834_PMD_IEEE_DEV0r_PCS_PREf_GET
#define PMD_IEEE_DEV0r_PCS_PREf_SET BCM84834_PMD_IEEE_DEV0r_PCS_PREf_SET
#define PMD_IEEE_DEV0r_WIS_PREf_GET BCM84834_PMD_IEEE_DEV0r_WIS_PREf_GET
#define PMD_IEEE_DEV0r_WIS_PREf_SET BCM84834_PMD_IEEE_DEV0r_WIS_PREf_SET
#define PMD_IEEE_DEV0r_PMD_PREf_GET BCM84834_PMD_IEEE_DEV0r_PMD_PREf_GET
#define PMD_IEEE_DEV0r_PMD_PREf_SET BCM84834_PMD_IEEE_DEV0r_PMD_PREf_SET
#define PMD_IEEE_DEV0r_CLA22_PREf_GET BCM84834_PMD_IEEE_DEV0r_CLA22_PREf_GET
#define PMD_IEEE_DEV0r_CLA22_PREf_SET BCM84834_PMD_IEEE_DEV0r_CLA22_PREf_SET
#define READ_PMD_IEEE_DEV0r BCM84834_READ_PMD_IEEE_DEV0r
#define WRITE_PMD_IEEE_DEV0r BCM84834_WRITE_PMD_IEEE_DEV0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_DEV0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_DEV1
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0006
 * DEVAD:    1
 * DESC:     Devices in package register part 1
 * SIZE:     32
 * FIELDS:
 *     CLA22_EXT_PRE    
 *     VENSP_DEV1_PRE   
 *     VENSP_DEV2_PRE   
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_DEV1r (0x00010006 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_DEV1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_DEV1.
 *
 */
typedef union BCM84834_PMD_IEEE_DEV1r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_dev1[1];
	uint32_t _pmd_ieee_dev1;
} BCM84834_PMD_IEEE_DEV1r_t;

#define BCM84834_PMD_IEEE_DEV1r_CLR(r) (r).pmd_ieee_dev1[0] = 0
#define BCM84834_PMD_IEEE_DEV1r_SET(r,d) (r).pmd_ieee_dev1[0] = d
#define BCM84834_PMD_IEEE_DEV1r_GET(r) (r).pmd_ieee_dev1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_DEV1r_VENSP_DEV2_PREf_GET(r) ((((r).pmd_ieee_dev1[0]) >> 15) & 0x1)
#define BCM84834_PMD_IEEE_DEV1r_VENSP_DEV2_PREf_SET(r,f) (r).pmd_ieee_dev1[0]=(((r).pmd_ieee_dev1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PMD_IEEE_DEV1r_VENSP_DEV1_PREf_GET(r) ((((r).pmd_ieee_dev1[0]) >> 14) & 0x1)
#define BCM84834_PMD_IEEE_DEV1r_VENSP_DEV1_PREf_SET(r,f) (r).pmd_ieee_dev1[0]=(((r).pmd_ieee_dev1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PMD_IEEE_DEV1r_CLA22_EXT_PREf_GET(r) ((((r).pmd_ieee_dev1[0]) >> 13) & 0x1)
#define BCM84834_PMD_IEEE_DEV1r_CLA22_EXT_PREf_SET(r,f) (r).pmd_ieee_dev1[0]=(((r).pmd_ieee_dev1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access PMD_IEEE_DEV1.
 *
 */
#define BCM84834_READ_PMD_IEEE_DEV1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_DEV1r,(_r._pmd_ieee_dev1))
#define BCM84834_WRITE_PMD_IEEE_DEV1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_DEV1r,(_r._pmd_ieee_dev1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_DEV1r BCM84834_PMD_IEEE_DEV1r
#define PMD_IEEE_DEV1r_SIZE BCM84834_PMD_IEEE_DEV1r_SIZE
typedef BCM84834_PMD_IEEE_DEV1r_t PMD_IEEE_DEV1r_t;
#define PMD_IEEE_DEV1r_CLR BCM84834_PMD_IEEE_DEV1r_CLR
#define PMD_IEEE_DEV1r_SET BCM84834_PMD_IEEE_DEV1r_SET
#define PMD_IEEE_DEV1r_GET BCM84834_PMD_IEEE_DEV1r_GET
#define PMD_IEEE_DEV1r_VENSP_DEV2_PREf_GET BCM84834_PMD_IEEE_DEV1r_VENSP_DEV2_PREf_GET
#define PMD_IEEE_DEV1r_VENSP_DEV2_PREf_SET BCM84834_PMD_IEEE_DEV1r_VENSP_DEV2_PREf_SET
#define PMD_IEEE_DEV1r_VENSP_DEV1_PREf_GET BCM84834_PMD_IEEE_DEV1r_VENSP_DEV1_PREf_GET
#define PMD_IEEE_DEV1r_VENSP_DEV1_PREf_SET BCM84834_PMD_IEEE_DEV1r_VENSP_DEV1_PREf_SET
#define PMD_IEEE_DEV1r_CLA22_EXT_PREf_GET BCM84834_PMD_IEEE_DEV1r_CLA22_EXT_PREf_GET
#define PMD_IEEE_DEV1r_CLA22_EXT_PREf_SET BCM84834_PMD_IEEE_DEV1r_CLA22_EXT_PREf_SET
#define READ_PMD_IEEE_DEV1r BCM84834_READ_PMD_IEEE_DEV1r
#define WRITE_PMD_IEEE_DEV1r BCM84834_WRITE_PMD_IEEE_DEV1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_DEV1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_CTL2
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0007
 * DEVAD:    1
 * DESC:     PMA/PMD control 2 register
 * SIZE:     32
 * FIELDS:
 *     TYPE_SEL         
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_CTL2r (0x00010007 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_CTL2.
 *
 */
typedef union BCM84834_PMD_IEEE_CTL2r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_ctl2[1];
	uint32_t _pmd_ieee_ctl2;
} BCM84834_PMD_IEEE_CTL2r_t;

#define BCM84834_PMD_IEEE_CTL2r_CLR(r) (r).pmd_ieee_ctl2[0] = 0
#define BCM84834_PMD_IEEE_CTL2r_SET(r,d) (r).pmd_ieee_ctl2[0] = d
#define BCM84834_PMD_IEEE_CTL2r_GET(r) (r).pmd_ieee_ctl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_CTL2r_TYPE_SELf_GET(r) (((r).pmd_ieee_ctl2[0]) & 0xf)
#define BCM84834_PMD_IEEE_CTL2r_TYPE_SELf_SET(r,f) (r).pmd_ieee_ctl2[0]=(((r).pmd_ieee_ctl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PMD_IEEE_CTL2.
 *
 */
#define BCM84834_READ_PMD_IEEE_CTL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_CTL2r,(_r._pmd_ieee_ctl2))
#define BCM84834_WRITE_PMD_IEEE_CTL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_CTL2r,(_r._pmd_ieee_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_CTL2r BCM84834_PMD_IEEE_CTL2r
#define PMD_IEEE_CTL2r_SIZE BCM84834_PMD_IEEE_CTL2r_SIZE
typedef BCM84834_PMD_IEEE_CTL2r_t PMD_IEEE_CTL2r_t;
#define PMD_IEEE_CTL2r_CLR BCM84834_PMD_IEEE_CTL2r_CLR
#define PMD_IEEE_CTL2r_SET BCM84834_PMD_IEEE_CTL2r_SET
#define PMD_IEEE_CTL2r_GET BCM84834_PMD_IEEE_CTL2r_GET
#define PMD_IEEE_CTL2r_TYPE_SELf_GET BCM84834_PMD_IEEE_CTL2r_TYPE_SELf_GET
#define PMD_IEEE_CTL2r_TYPE_SELf_SET BCM84834_PMD_IEEE_CTL2r_TYPE_SELf_SET
#define READ_PMD_IEEE_CTL2r BCM84834_READ_PMD_IEEE_CTL2r
#define WRITE_PMD_IEEE_CTL2r BCM84834_WRITE_PMD_IEEE_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_CTL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_ST2
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0008
 * DEVAD:    1
 * DESC:     10G PMA/PMD status 2 register
 * SIZE:     32
 * FIELDS:
 *     CAP_LPBK         
 *     CAP_10G_EW       
 *     CAP_10G_LW       
 *     CAP_10G_SW       
 *     CAP_10G_LX4      
 *     CAP_10G_ER       
 *     CAP_10G_LR       
 *     CAP_10G_SR       
 *     CAP_TRAN_DIS     
 *     CAP_EXT          
 *     RCV_FALT         
 *     TRAN_FALT        
 *     CAP_RCV_FALT     
 *     CAP_TRAN_FALT    
 *     DEV_PRE          
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_ST2r (0x00010008 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_ST2r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_ST2.
 *
 */
typedef union BCM84834_PMD_IEEE_ST2r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_st2[1];
	uint32_t _pmd_ieee_st2;
} BCM84834_PMD_IEEE_ST2r_t;

#define BCM84834_PMD_IEEE_ST2r_CLR(r) (r).pmd_ieee_st2[0] = 0
#define BCM84834_PMD_IEEE_ST2r_SET(r,d) (r).pmd_ieee_st2[0] = d
#define BCM84834_PMD_IEEE_ST2r_GET(r) (r).pmd_ieee_st2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_ST2r_DEV_PREf_GET(r) ((((r).pmd_ieee_st2[0]) >> 14) & 0x3)
#define BCM84834_PMD_IEEE_ST2r_DEV_PREf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCM84834_PMD_IEEE_ST2r_CAP_TRAN_FALTf_GET(r) ((((r).pmd_ieee_st2[0]) >> 13) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_TRAN_FALTf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PMD_IEEE_ST2r_CAP_RCV_FALTf_GET(r) ((((r).pmd_ieee_st2[0]) >> 12) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_RCV_FALTf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PMD_IEEE_ST2r_TRAN_FALTf_GET(r) ((((r).pmd_ieee_st2[0]) >> 11) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_TRAN_FALTf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PMD_IEEE_ST2r_RCV_FALTf_GET(r) ((((r).pmd_ieee_st2[0]) >> 10) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_RCV_FALTf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PMD_IEEE_ST2r_CAP_EXTf_GET(r) ((((r).pmd_ieee_st2[0]) >> 9) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_EXTf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PMD_IEEE_ST2r_CAP_TRAN_DISf_GET(r) ((((r).pmd_ieee_st2[0]) >> 8) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_TRAN_DISf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_SRf_GET(r) ((((r).pmd_ieee_st2[0]) >> 7) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_SRf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LRf_GET(r) ((((r).pmd_ieee_st2[0]) >> 6) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LRf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_ERf_GET(r) ((((r).pmd_ieee_st2[0]) >> 5) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_ERf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LX4f_GET(r) ((((r).pmd_ieee_st2[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LX4f_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_SWf_GET(r) ((((r).pmd_ieee_st2[0]) >> 3) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_SWf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LWf_GET(r) ((((r).pmd_ieee_st2[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_LWf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_EWf_GET(r) ((((r).pmd_ieee_st2[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_10G_EWf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PMD_IEEE_ST2r_CAP_LPBKf_GET(r) (((r).pmd_ieee_st2[0]) & 0x1)
#define BCM84834_PMD_IEEE_ST2r_CAP_LPBKf_SET(r,f) (r).pmd_ieee_st2[0]=(((r).pmd_ieee_st2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_ST2.
 *
 */
#define BCM84834_READ_PMD_IEEE_ST2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_ST2r,(_r._pmd_ieee_st2))
#define BCM84834_WRITE_PMD_IEEE_ST2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_ST2r,(_r._pmd_ieee_st2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_ST2r BCM84834_PMD_IEEE_ST2r
#define PMD_IEEE_ST2r_SIZE BCM84834_PMD_IEEE_ST2r_SIZE
typedef BCM84834_PMD_IEEE_ST2r_t PMD_IEEE_ST2r_t;
#define PMD_IEEE_ST2r_CLR BCM84834_PMD_IEEE_ST2r_CLR
#define PMD_IEEE_ST2r_SET BCM84834_PMD_IEEE_ST2r_SET
#define PMD_IEEE_ST2r_GET BCM84834_PMD_IEEE_ST2r_GET
#define PMD_IEEE_ST2r_DEV_PREf_GET BCM84834_PMD_IEEE_ST2r_DEV_PREf_GET
#define PMD_IEEE_ST2r_DEV_PREf_SET BCM84834_PMD_IEEE_ST2r_DEV_PREf_SET
#define PMD_IEEE_ST2r_CAP_TRAN_FALTf_GET BCM84834_PMD_IEEE_ST2r_CAP_TRAN_FALTf_GET
#define PMD_IEEE_ST2r_CAP_TRAN_FALTf_SET BCM84834_PMD_IEEE_ST2r_CAP_TRAN_FALTf_SET
#define PMD_IEEE_ST2r_CAP_RCV_FALTf_GET BCM84834_PMD_IEEE_ST2r_CAP_RCV_FALTf_GET
#define PMD_IEEE_ST2r_CAP_RCV_FALTf_SET BCM84834_PMD_IEEE_ST2r_CAP_RCV_FALTf_SET
#define PMD_IEEE_ST2r_TRAN_FALTf_GET BCM84834_PMD_IEEE_ST2r_TRAN_FALTf_GET
#define PMD_IEEE_ST2r_TRAN_FALTf_SET BCM84834_PMD_IEEE_ST2r_TRAN_FALTf_SET
#define PMD_IEEE_ST2r_RCV_FALTf_GET BCM84834_PMD_IEEE_ST2r_RCV_FALTf_GET
#define PMD_IEEE_ST2r_RCV_FALTf_SET BCM84834_PMD_IEEE_ST2r_RCV_FALTf_SET
#define PMD_IEEE_ST2r_CAP_EXTf_GET BCM84834_PMD_IEEE_ST2r_CAP_EXTf_GET
#define PMD_IEEE_ST2r_CAP_EXTf_SET BCM84834_PMD_IEEE_ST2r_CAP_EXTf_SET
#define PMD_IEEE_ST2r_CAP_TRAN_DISf_GET BCM84834_PMD_IEEE_ST2r_CAP_TRAN_DISf_GET
#define PMD_IEEE_ST2r_CAP_TRAN_DISf_SET BCM84834_PMD_IEEE_ST2r_CAP_TRAN_DISf_SET
#define PMD_IEEE_ST2r_CAP_10G_SRf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_SRf_GET
#define PMD_IEEE_ST2r_CAP_10G_SRf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_SRf_SET
#define PMD_IEEE_ST2r_CAP_10G_LRf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_LRf_GET
#define PMD_IEEE_ST2r_CAP_10G_LRf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_LRf_SET
#define PMD_IEEE_ST2r_CAP_10G_ERf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_ERf_GET
#define PMD_IEEE_ST2r_CAP_10G_ERf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_ERf_SET
#define PMD_IEEE_ST2r_CAP_10G_LX4f_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_LX4f_GET
#define PMD_IEEE_ST2r_CAP_10G_LX4f_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_LX4f_SET
#define PMD_IEEE_ST2r_CAP_10G_SWf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_SWf_GET
#define PMD_IEEE_ST2r_CAP_10G_SWf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_SWf_SET
#define PMD_IEEE_ST2r_CAP_10G_LWf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_LWf_GET
#define PMD_IEEE_ST2r_CAP_10G_LWf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_LWf_SET
#define PMD_IEEE_ST2r_CAP_10G_EWf_GET BCM84834_PMD_IEEE_ST2r_CAP_10G_EWf_GET
#define PMD_IEEE_ST2r_CAP_10G_EWf_SET BCM84834_PMD_IEEE_ST2r_CAP_10G_EWf_SET
#define PMD_IEEE_ST2r_CAP_LPBKf_GET BCM84834_PMD_IEEE_ST2r_CAP_LPBKf_GET
#define PMD_IEEE_ST2r_CAP_LPBKf_SET BCM84834_PMD_IEEE_ST2r_CAP_LPBKf_SET
#define READ_PMD_IEEE_ST2r BCM84834_READ_PMD_IEEE_ST2r
#define WRITE_PMD_IEEE_ST2r BCM84834_WRITE_PMD_IEEE_ST2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_ST2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_TRAN_DIS
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0009
 * DEVAD:    1
 * DESC:     10G PMA/PMD transmit disable
 * SIZE:     32
 * FIELDS:
 *     GLB_TRAN_DIS     
 *     TRAN_DIS1        
 *     TRAN_DIS2        
 *     TRAN_DIS3        
 *     TRAN_DIS4        
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_TRAN_DISr (0x00010009 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_TRAN_DISr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_TRAN_DIS.
 *
 */
typedef union BCM84834_PMD_IEEE_TRAN_DISr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_tran_dis[1];
	uint32_t _pmd_ieee_tran_dis;
} BCM84834_PMD_IEEE_TRAN_DISr_t;

#define BCM84834_PMD_IEEE_TRAN_DISr_CLR(r) (r).pmd_ieee_tran_dis[0] = 0
#define BCM84834_PMD_IEEE_TRAN_DISr_SET(r,d) (r).pmd_ieee_tran_dis[0] = d
#define BCM84834_PMD_IEEE_TRAN_DISr_GET(r) (r).pmd_ieee_tran_dis[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS4f_GET(r) ((((r).pmd_ieee_tran_dis[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS4f_SET(r,f) (r).pmd_ieee_tran_dis[0]=(((r).pmd_ieee_tran_dis[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS3f_GET(r) ((((r).pmd_ieee_tran_dis[0]) >> 3) & 0x1)
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS3f_SET(r,f) (r).pmd_ieee_tran_dis[0]=(((r).pmd_ieee_tran_dis[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS2f_GET(r) ((((r).pmd_ieee_tran_dis[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS2f_SET(r,f) (r).pmd_ieee_tran_dis[0]=(((r).pmd_ieee_tran_dis[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS1f_GET(r) ((((r).pmd_ieee_tran_dis[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS1f_SET(r,f) (r).pmd_ieee_tran_dis[0]=(((r).pmd_ieee_tran_dis[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_GET(r) (((r).pmd_ieee_tran_dis[0]) & 0x1)
#define BCM84834_PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_SET(r,f) (r).pmd_ieee_tran_dis[0]=(((r).pmd_ieee_tran_dis[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_TRAN_DIS.
 *
 */
#define BCM84834_READ_PMD_IEEE_TRAN_DISr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_TRAN_DISr,(_r._pmd_ieee_tran_dis))
#define BCM84834_WRITE_PMD_IEEE_TRAN_DISr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_TRAN_DISr,(_r._pmd_ieee_tran_dis))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_TRAN_DISr BCM84834_PMD_IEEE_TRAN_DISr
#define PMD_IEEE_TRAN_DISr_SIZE BCM84834_PMD_IEEE_TRAN_DISr_SIZE
typedef BCM84834_PMD_IEEE_TRAN_DISr_t PMD_IEEE_TRAN_DISr_t;
#define PMD_IEEE_TRAN_DISr_CLR BCM84834_PMD_IEEE_TRAN_DISr_CLR
#define PMD_IEEE_TRAN_DISr_SET BCM84834_PMD_IEEE_TRAN_DISr_SET
#define PMD_IEEE_TRAN_DISr_GET BCM84834_PMD_IEEE_TRAN_DISr_GET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS4f_GET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS4f_GET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS4f_SET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS4f_SET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS3f_GET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS3f_GET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS3f_SET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS3f_SET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS2f_GET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS2f_GET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS2f_SET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS2f_SET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS1f_GET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS1f_GET
#define PMD_IEEE_TRAN_DISr_TRAN_DIS1f_SET BCM84834_PMD_IEEE_TRAN_DISr_TRAN_DIS1f_SET
#define PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_GET BCM84834_PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_GET
#define PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_SET BCM84834_PMD_IEEE_TRAN_DISr_GLB_TRAN_DISf_SET
#define READ_PMD_IEEE_TRAN_DISr BCM84834_READ_PMD_IEEE_TRAN_DISr
#define WRITE_PMD_IEEE_TRAN_DISr BCM84834_WRITE_PMD_IEEE_TRAN_DISr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_TRAN_DISr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_RCV_DET
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x000a
 * DEVAD:    1
 * DESC:     10G PMD receive signal detect
 * SIZE:     32
 * FIELDS:
 *     GLB_RCV_DET      
 *     RCV_DET1         
 *     RCV_DET2         
 *     RCV_DET3         
 *     RCV_DET4         
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_RCV_DETr (0x0001000a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_RCV_DETr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_RCV_DET.
 *
 */
typedef union BCM84834_PMD_IEEE_RCV_DETr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_rcv_det[1];
	uint32_t _pmd_ieee_rcv_det;
} BCM84834_PMD_IEEE_RCV_DETr_t;

#define BCM84834_PMD_IEEE_RCV_DETr_CLR(r) (r).pmd_ieee_rcv_det[0] = 0
#define BCM84834_PMD_IEEE_RCV_DETr_SET(r,d) (r).pmd_ieee_rcv_det[0] = d
#define BCM84834_PMD_IEEE_RCV_DETr_GET(r) (r).pmd_ieee_rcv_det[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET4f_GET(r) ((((r).pmd_ieee_rcv_det[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET4f_SET(r,f) (r).pmd_ieee_rcv_det[0]=(((r).pmd_ieee_rcv_det[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET3f_GET(r) ((((r).pmd_ieee_rcv_det[0]) >> 3) & 0x1)
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET3f_SET(r,f) (r).pmd_ieee_rcv_det[0]=(((r).pmd_ieee_rcv_det[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET2f_GET(r) ((((r).pmd_ieee_rcv_det[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET2f_SET(r,f) (r).pmd_ieee_rcv_det[0]=(((r).pmd_ieee_rcv_det[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET1f_GET(r) ((((r).pmd_ieee_rcv_det[0]) >> 1) & 0x1)
#define BCM84834_PMD_IEEE_RCV_DETr_RCV_DET1f_SET(r,f) (r).pmd_ieee_rcv_det[0]=(((r).pmd_ieee_rcv_det[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PMD_IEEE_RCV_DETr_GLB_RCV_DETf_GET(r) (((r).pmd_ieee_rcv_det[0]) & 0x1)
#define BCM84834_PMD_IEEE_RCV_DETr_GLB_RCV_DETf_SET(r,f) (r).pmd_ieee_rcv_det[0]=(((r).pmd_ieee_rcv_det[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_RCV_DET.
 *
 */
#define BCM84834_READ_PMD_IEEE_RCV_DETr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_RCV_DETr,(_r._pmd_ieee_rcv_det))
#define BCM84834_WRITE_PMD_IEEE_RCV_DETr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_RCV_DETr,(_r._pmd_ieee_rcv_det))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_RCV_DETr BCM84834_PMD_IEEE_RCV_DETr
#define PMD_IEEE_RCV_DETr_SIZE BCM84834_PMD_IEEE_RCV_DETr_SIZE
typedef BCM84834_PMD_IEEE_RCV_DETr_t PMD_IEEE_RCV_DETr_t;
#define PMD_IEEE_RCV_DETr_CLR BCM84834_PMD_IEEE_RCV_DETr_CLR
#define PMD_IEEE_RCV_DETr_SET BCM84834_PMD_IEEE_RCV_DETr_SET
#define PMD_IEEE_RCV_DETr_GET BCM84834_PMD_IEEE_RCV_DETr_GET
#define PMD_IEEE_RCV_DETr_RCV_DET4f_GET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET4f_GET
#define PMD_IEEE_RCV_DETr_RCV_DET4f_SET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET4f_SET
#define PMD_IEEE_RCV_DETr_RCV_DET3f_GET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET3f_GET
#define PMD_IEEE_RCV_DETr_RCV_DET3f_SET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET3f_SET
#define PMD_IEEE_RCV_DETr_RCV_DET2f_GET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET2f_GET
#define PMD_IEEE_RCV_DETr_RCV_DET2f_SET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET2f_SET
#define PMD_IEEE_RCV_DETr_RCV_DET1f_GET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET1f_GET
#define PMD_IEEE_RCV_DETr_RCV_DET1f_SET BCM84834_PMD_IEEE_RCV_DETr_RCV_DET1f_SET
#define PMD_IEEE_RCV_DETr_GLB_RCV_DETf_GET BCM84834_PMD_IEEE_RCV_DETr_GLB_RCV_DETf_GET
#define PMD_IEEE_RCV_DETr_GLB_RCV_DETf_SET BCM84834_PMD_IEEE_RCV_DETr_GLB_RCV_DETf_SET
#define READ_PMD_IEEE_RCV_DETr BCM84834_READ_PMD_IEEE_RCV_DETr
#define WRITE_PMD_IEEE_RCV_DETr BCM84834_WRITE_PMD_IEEE_RCV_DETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_RCV_DETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_EXT_AB
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x000b
 * DEVAD:    1
 * DESC:     10G PMA/PMD extended ability
 * SIZE:     32
 * FIELDS:
 *     CAP_10GB_CX4     
 *     CAP_10GB_T       
 *     CAP_1000B_T      
 *     CAP_100B_TX      
 *     CAP_10B_T        
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_EXT_ABr (0x0001000b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_EXT_ABr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_EXT_AB.
 *
 */
typedef union BCM84834_PMD_IEEE_EXT_ABr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_ext_ab[1];
	uint32_t _pmd_ieee_ext_ab;
} BCM84834_PMD_IEEE_EXT_ABr_t;

#define BCM84834_PMD_IEEE_EXT_ABr_CLR(r) (r).pmd_ieee_ext_ab[0] = 0
#define BCM84834_PMD_IEEE_EXT_ABr_SET(r,d) (r).pmd_ieee_ext_ab[0] = d
#define BCM84834_PMD_IEEE_EXT_ABr_GET(r) (r).pmd_ieee_ext_ab[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10B_Tf_GET(r) ((((r).pmd_ieee_ext_ab[0]) >> 8) & 0x1)
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10B_Tf_SET(r,f) (r).pmd_ieee_ext_ab[0]=(((r).pmd_ieee_ext_ab[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_100B_TXf_GET(r) ((((r).pmd_ieee_ext_ab[0]) >> 7) & 0x1)
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_100B_TXf_SET(r,f) (r).pmd_ieee_ext_ab[0]=(((r).pmd_ieee_ext_ab[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_1000B_Tf_GET(r) ((((r).pmd_ieee_ext_ab[0]) >> 5) & 0x1)
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_1000B_Tf_SET(r,f) (r).pmd_ieee_ext_ab[0]=(((r).pmd_ieee_ext_ab[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_Tf_GET(r) ((((r).pmd_ieee_ext_ab[0]) >> 2) & 0x1)
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_Tf_SET(r,f) (r).pmd_ieee_ext_ab[0]=(((r).pmd_ieee_ext_ab[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_GET(r) (((r).pmd_ieee_ext_ab[0]) & 0x1)
#define BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_SET(r,f) (r).pmd_ieee_ext_ab[0]=(((r).pmd_ieee_ext_ab[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_EXT_AB.
 *
 */
#define BCM84834_READ_PMD_IEEE_EXT_ABr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_EXT_ABr,(_r._pmd_ieee_ext_ab))
#define BCM84834_WRITE_PMD_IEEE_EXT_ABr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_EXT_ABr,(_r._pmd_ieee_ext_ab))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_EXT_ABr BCM84834_PMD_IEEE_EXT_ABr
#define PMD_IEEE_EXT_ABr_SIZE BCM84834_PMD_IEEE_EXT_ABr_SIZE
typedef BCM84834_PMD_IEEE_EXT_ABr_t PMD_IEEE_EXT_ABr_t;
#define PMD_IEEE_EXT_ABr_CLR BCM84834_PMD_IEEE_EXT_ABr_CLR
#define PMD_IEEE_EXT_ABr_SET BCM84834_PMD_IEEE_EXT_ABr_SET
#define PMD_IEEE_EXT_ABr_GET BCM84834_PMD_IEEE_EXT_ABr_GET
#define PMD_IEEE_EXT_ABr_CAP_10B_Tf_GET BCM84834_PMD_IEEE_EXT_ABr_CAP_10B_Tf_GET
#define PMD_IEEE_EXT_ABr_CAP_10B_Tf_SET BCM84834_PMD_IEEE_EXT_ABr_CAP_10B_Tf_SET
#define PMD_IEEE_EXT_ABr_CAP_100B_TXf_GET BCM84834_PMD_IEEE_EXT_ABr_CAP_100B_TXf_GET
#define PMD_IEEE_EXT_ABr_CAP_100B_TXf_SET BCM84834_PMD_IEEE_EXT_ABr_CAP_100B_TXf_SET
#define PMD_IEEE_EXT_ABr_CAP_1000B_Tf_GET BCM84834_PMD_IEEE_EXT_ABr_CAP_1000B_Tf_GET
#define PMD_IEEE_EXT_ABr_CAP_1000B_Tf_SET BCM84834_PMD_IEEE_EXT_ABr_CAP_1000B_Tf_SET
#define PMD_IEEE_EXT_ABr_CAP_10GB_Tf_GET BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_Tf_GET
#define PMD_IEEE_EXT_ABr_CAP_10GB_Tf_SET BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_Tf_SET
#define PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_GET BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_GET
#define PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_SET BCM84834_PMD_IEEE_EXT_ABr_CAP_10GB_CX4f_SET
#define READ_PMD_IEEE_EXT_ABr BCM84834_READ_PMD_IEEE_EXT_ABr
#define WRITE_PMD_IEEE_EXT_ABr BCM84834_WRITE_PMD_IEEE_EXT_ABr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_EXT_ABr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_PKG_ID0
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x000e
 * DEVAD:    1
 * DESC:     PMA/PMD package identifier
 * SIZE:     32
 * FIELDS:
 *     PKG_ID_0         
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_PKG_ID0r (0x0001000e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_PKG_ID0r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_PKG_ID0.
 *
 */
typedef union BCM84834_PMD_IEEE_PKG_ID0r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_pkg_id0[1];
	uint32_t _pmd_ieee_pkg_id0;
} BCM84834_PMD_IEEE_PKG_ID0r_t;

#define BCM84834_PMD_IEEE_PKG_ID0r_CLR(r) (r).pmd_ieee_pkg_id0[0] = 0
#define BCM84834_PMD_IEEE_PKG_ID0r_SET(r,d) (r).pmd_ieee_pkg_id0[0] = d
#define BCM84834_PMD_IEEE_PKG_ID0r_GET(r) (r).pmd_ieee_pkg_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_PKG_ID0r_PKG_ID_0f_GET(r) (((r).pmd_ieee_pkg_id0[0]) & 0xffff)
#define BCM84834_PMD_IEEE_PKG_ID0r_PKG_ID_0f_SET(r,f) (r).pmd_ieee_pkg_id0[0]=(((r).pmd_ieee_pkg_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_PKG_ID0.
 *
 */
#define BCM84834_READ_PMD_IEEE_PKG_ID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_PKG_ID0r,(_r._pmd_ieee_pkg_id0))
#define BCM84834_WRITE_PMD_IEEE_PKG_ID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_PKG_ID0r,(_r._pmd_ieee_pkg_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_PKG_ID0r BCM84834_PMD_IEEE_PKG_ID0r
#define PMD_IEEE_PKG_ID0r_SIZE BCM84834_PMD_IEEE_PKG_ID0r_SIZE
typedef BCM84834_PMD_IEEE_PKG_ID0r_t PMD_IEEE_PKG_ID0r_t;
#define PMD_IEEE_PKG_ID0r_CLR BCM84834_PMD_IEEE_PKG_ID0r_CLR
#define PMD_IEEE_PKG_ID0r_SET BCM84834_PMD_IEEE_PKG_ID0r_SET
#define PMD_IEEE_PKG_ID0r_GET BCM84834_PMD_IEEE_PKG_ID0r_GET
#define PMD_IEEE_PKG_ID0r_PKG_ID_0f_GET BCM84834_PMD_IEEE_PKG_ID0r_PKG_ID_0f_GET
#define PMD_IEEE_PKG_ID0r_PKG_ID_0f_SET BCM84834_PMD_IEEE_PKG_ID0r_PKG_ID_0f_SET
#define READ_PMD_IEEE_PKG_ID0r BCM84834_READ_PMD_IEEE_PKG_ID0r
#define WRITE_PMD_IEEE_PKG_ID0r BCM84834_WRITE_PMD_IEEE_PKG_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_PKG_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_PKG_ID1
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x000f
 * DEVAD:    1
 * DESC:     PMA/PMD package identifier
 * SIZE:     32
 * FIELDS:
 *     PKG_ID_1         
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_PKG_ID1r (0x0001000f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_PKG_ID1r_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_PKG_ID1.
 *
 */
typedef union BCM84834_PMD_IEEE_PKG_ID1r_s {
	uint32_t v[1];
	uint32_t pmd_ieee_pkg_id1[1];
	uint32_t _pmd_ieee_pkg_id1;
} BCM84834_PMD_IEEE_PKG_ID1r_t;

#define BCM84834_PMD_IEEE_PKG_ID1r_CLR(r) (r).pmd_ieee_pkg_id1[0] = 0
#define BCM84834_PMD_IEEE_PKG_ID1r_SET(r,d) (r).pmd_ieee_pkg_id1[0] = d
#define BCM84834_PMD_IEEE_PKG_ID1r_GET(r) (r).pmd_ieee_pkg_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_PKG_ID1r_PKG_ID_1f_GET(r) (((r).pmd_ieee_pkg_id1[0]) & 0xffff)
#define BCM84834_PMD_IEEE_PKG_ID1r_PKG_ID_1f_SET(r,f) (r).pmd_ieee_pkg_id1[0]=(((r).pmd_ieee_pkg_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_PKG_ID1.
 *
 */
#define BCM84834_READ_PMD_IEEE_PKG_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_PKG_ID1r,(_r._pmd_ieee_pkg_id1))
#define BCM84834_WRITE_PMD_IEEE_PKG_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_PKG_ID1r,(_r._pmd_ieee_pkg_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_PKG_ID1r BCM84834_PMD_IEEE_PKG_ID1r
#define PMD_IEEE_PKG_ID1r_SIZE BCM84834_PMD_IEEE_PKG_ID1r_SIZE
typedef BCM84834_PMD_IEEE_PKG_ID1r_t PMD_IEEE_PKG_ID1r_t;
#define PMD_IEEE_PKG_ID1r_CLR BCM84834_PMD_IEEE_PKG_ID1r_CLR
#define PMD_IEEE_PKG_ID1r_SET BCM84834_PMD_IEEE_PKG_ID1r_SET
#define PMD_IEEE_PKG_ID1r_GET BCM84834_PMD_IEEE_PKG_ID1r_GET
#define PMD_IEEE_PKG_ID1r_PKG_ID_1f_GET BCM84834_PMD_IEEE_PKG_ID1r_PKG_ID_1f_GET
#define PMD_IEEE_PKG_ID1r_PKG_ID_1f_SET BCM84834_PMD_IEEE_PKG_ID1r_PKG_ID_1f_SET
#define READ_PMD_IEEE_PKG_ID1r BCM84834_READ_PMD_IEEE_PKG_ID1r
#define WRITE_PMD_IEEE_PKG_ID1r BCM84834_WRITE_PMD_IEEE_PKG_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_PKG_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_ST_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0081
 * DEVAD:    1
 * DESC:     10GBASE-T status
 * SIZE:     32
 * FIELDS:
 *     LP_INFO_VAL      
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_ST_10GTr (0x00010081 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_ST_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_ST_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_ST_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_st_10gt[1];
	uint32_t _pmd_ieee_st_10gt;
} BCM84834_PMD_IEEE_ST_10GTr_t;

#define BCM84834_PMD_IEEE_ST_10GTr_CLR(r) (r).pmd_ieee_st_10gt[0] = 0
#define BCM84834_PMD_IEEE_ST_10GTr_SET(r,d) (r).pmd_ieee_st_10gt[0] = d
#define BCM84834_PMD_IEEE_ST_10GTr_GET(r) (r).pmd_ieee_st_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_ST_10GTr_LP_INFO_VALf_GET(r) (((r).pmd_ieee_st_10gt[0]) & 0x1)
#define BCM84834_PMD_IEEE_ST_10GTr_LP_INFO_VALf_SET(r,f) (r).pmd_ieee_st_10gt[0]=(((r).pmd_ieee_st_10gt[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_ST_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_ST_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_ST_10GTr,(_r._pmd_ieee_st_10gt))
#define BCM84834_WRITE_PMD_IEEE_ST_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_ST_10GTr,(_r._pmd_ieee_st_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_ST_10GTr BCM84834_PMD_IEEE_ST_10GTr
#define PMD_IEEE_ST_10GTr_SIZE BCM84834_PMD_IEEE_ST_10GTr_SIZE
typedef BCM84834_PMD_IEEE_ST_10GTr_t PMD_IEEE_ST_10GTr_t;
#define PMD_IEEE_ST_10GTr_CLR BCM84834_PMD_IEEE_ST_10GTr_CLR
#define PMD_IEEE_ST_10GTr_SET BCM84834_PMD_IEEE_ST_10GTr_SET
#define PMD_IEEE_ST_10GTr_GET BCM84834_PMD_IEEE_ST_10GTr_GET
#define PMD_IEEE_ST_10GTr_LP_INFO_VALf_GET BCM84834_PMD_IEEE_ST_10GTr_LP_INFO_VALf_GET
#define PMD_IEEE_ST_10GTr_LP_INFO_VALf_SET BCM84834_PMD_IEEE_ST_10GTr_LP_INFO_VALf_SET
#define READ_PMD_IEEE_ST_10GTr BCM84834_READ_PMD_IEEE_ST_10GTr
#define WRITE_PMD_IEEE_ST_10GTr BCM84834_WRITE_PMD_IEEE_ST_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_ST_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SWAP_POL_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0082
 * DEVAD:    1
 * DESC:     10GBASE-T pair swap and polarity
 * SIZE:     32
 * FIELDS:
 *     MDI_XCON         
 *     PAIR_A_POL       
 *     PAIR_B_POL       
 *     PAIR_C_POL       
 *     PAIR_D_POL       
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr (0x00010082 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SWAP_POL_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_SWAP_POL_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_swap_pol_10gt[1];
	uint32_t _pmd_ieee_swap_pol_10gt;
} BCM84834_PMD_IEEE_SWAP_POL_10GTr_t;

#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_CLR(r) (r).pmd_ieee_swap_pol_10gt[0] = 0
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_SET(r,d) (r).pmd_ieee_swap_pol_10gt[0] = d
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_GET(r) (r).pmd_ieee_swap_pol_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_GET(r) ((((r).pmd_ieee_swap_pol_10gt[0]) >> 11) & 0x1)
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_SET(r,f) (r).pmd_ieee_swap_pol_10gt[0]=(((r).pmd_ieee_swap_pol_10gt[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_GET(r) ((((r).pmd_ieee_swap_pol_10gt[0]) >> 10) & 0x1)
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_SET(r,f) (r).pmd_ieee_swap_pol_10gt[0]=(((r).pmd_ieee_swap_pol_10gt[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_GET(r) ((((r).pmd_ieee_swap_pol_10gt[0]) >> 9) & 0x1)
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_SET(r,f) (r).pmd_ieee_swap_pol_10gt[0]=(((r).pmd_ieee_swap_pol_10gt[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_GET(r) ((((r).pmd_ieee_swap_pol_10gt[0]) >> 8) & 0x1)
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_SET(r,f) (r).pmd_ieee_swap_pol_10gt[0]=(((r).pmd_ieee_swap_pol_10gt[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_GET(r) (((r).pmd_ieee_swap_pol_10gt[0]) & 0x3)
#define BCM84834_PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_SET(r,f) (r).pmd_ieee_swap_pol_10gt[0]=(((r).pmd_ieee_swap_pol_10gt[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PMD_IEEE_SWAP_POL_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_SWAP_POL_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SWAP_POL_10GTr,(_r._pmd_ieee_swap_pol_10gt))
#define BCM84834_WRITE_PMD_IEEE_SWAP_POL_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SWAP_POL_10GTr,(_r._pmd_ieee_swap_pol_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SWAP_POL_10GTr BCM84834_PMD_IEEE_SWAP_POL_10GTr
#define PMD_IEEE_SWAP_POL_10GTr_SIZE BCM84834_PMD_IEEE_SWAP_POL_10GTr_SIZE
typedef BCM84834_PMD_IEEE_SWAP_POL_10GTr_t PMD_IEEE_SWAP_POL_10GTr_t;
#define PMD_IEEE_SWAP_POL_10GTr_CLR BCM84834_PMD_IEEE_SWAP_POL_10GTr_CLR
#define PMD_IEEE_SWAP_POL_10GTr_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_SET
#define PMD_IEEE_SWAP_POL_10GTr_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_GET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_GET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_D_POLf_SET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_GET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_C_POLf_SET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_GET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_B_POLf_SET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_GET
#define PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_PAIR_A_POLf_SET
#define PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_GET BCM84834_PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_GET
#define PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_SET BCM84834_PMD_IEEE_SWAP_POL_10GTr_MDI_XCONf_SET
#define READ_PMD_IEEE_SWAP_POL_10GTr BCM84834_READ_PMD_IEEE_SWAP_POL_10GTr
#define WRITE_PMD_IEEE_SWAP_POL_10GTr BCM84834_WRITE_PMD_IEEE_SWAP_POL_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SWAP_POL_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_PWRBK_SET_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0083
 * DEVAD:    1
 * DESC:     10GBASE-T TX power backoff and PHY shortreach setting
 * SIZE:     32
 * FIELDS:
 *     SHORT_RCH_MODE   
 *     TX_PWRBK_SET     
 *     LP_TX_PWRBK_SET  
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr (0x00010083 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_PWRBK_SET_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_PWRBK_SET_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_pwrbk_set_10gt[1];
	uint32_t _pmd_ieee_pwrbk_set_10gt;
} BCM84834_PMD_IEEE_PWRBK_SET_10GTr_t;

#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_CLR(r) (r).pmd_ieee_pwrbk_set_10gt[0] = 0
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SET(r,d) (r).pmd_ieee_pwrbk_set_10gt[0] = d
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_GET(r) (r).pmd_ieee_pwrbk_set_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_GET(r) ((((r).pmd_ieee_pwrbk_set_10gt[0]) >> 13) & 0x7)
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_SET(r,f) (r).pmd_ieee_pwrbk_set_10gt[0]=(((r).pmd_ieee_pwrbk_set_10gt[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_GET(r) ((((r).pmd_ieee_pwrbk_set_10gt[0]) >> 10) & 0x7)
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_SET(r,f) (r).pmd_ieee_pwrbk_set_10gt[0]=(((r).pmd_ieee_pwrbk_set_10gt[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_GET(r) (((r).pmd_ieee_pwrbk_set_10gt[0]) & 0x1)
#define BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_SET(r,f) (r).pmd_ieee_pwrbk_set_10gt[0]=(((r).pmd_ieee_pwrbk_set_10gt[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_PWRBK_SET_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_PWRBK_SET_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_PWRBK_SET_10GTr,(_r._pmd_ieee_pwrbk_set_10gt))
#define BCM84834_WRITE_PMD_IEEE_PWRBK_SET_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_PWRBK_SET_10GTr,(_r._pmd_ieee_pwrbk_set_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_PWRBK_SET_10GTr BCM84834_PMD_IEEE_PWRBK_SET_10GTr
#define PMD_IEEE_PWRBK_SET_10GTr_SIZE BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SIZE
typedef BCM84834_PMD_IEEE_PWRBK_SET_10GTr_t PMD_IEEE_PWRBK_SET_10GTr_t;
#define PMD_IEEE_PWRBK_SET_10GTr_CLR BCM84834_PMD_IEEE_PWRBK_SET_10GTr_CLR
#define PMD_IEEE_PWRBK_SET_10GTr_SET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SET
#define PMD_IEEE_PWRBK_SET_10GTr_GET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_GET
#define PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_GET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_GET
#define PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_SET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_LP_TX_PWRBK_SETf_SET
#define PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_GET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_GET
#define PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_SET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_TX_PWRBK_SETf_SET
#define PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_GET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_GET
#define PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_SET BCM84834_PMD_IEEE_PWRBK_SET_10GTr_SHORT_RCH_MODEf_SET
#define READ_PMD_IEEE_PWRBK_SET_10GTr BCM84834_READ_PMD_IEEE_PWRBK_SET_10GTr
#define WRITE_PMD_IEEE_PWRBK_SET_10GTr BCM84834_WRITE_PMD_IEEE_PWRBK_SET_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_PWRBK_SET_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_TST_MODE_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0084
 * DEVAD:    1
 * DESC:     10GBASE-T test mode
 * SIZE:     32
 * FIELDS:
 *     EEE_TST_MODE_CTL 
 *     TRN_TEST_FREQ    
 *     TST_MODE_CTL     
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_TST_MODE_10GTr (0x00010084 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_TST_MODE_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_TST_MODE_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_TST_MODE_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_tst_mode_10gt[1];
	uint32_t _pmd_ieee_tst_mode_10gt;
} BCM84834_PMD_IEEE_TST_MODE_10GTr_t;

#define BCM84834_PMD_IEEE_TST_MODE_10GTr_CLR(r) (r).pmd_ieee_tst_mode_10gt[0] = 0
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_SET(r,d) (r).pmd_ieee_tst_mode_10gt[0] = d
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_GET(r) (r).pmd_ieee_tst_mode_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_GET(r) ((((r).pmd_ieee_tst_mode_10gt[0]) >> 13) & 0x7)
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_SET(r,f) (r).pmd_ieee_tst_mode_10gt[0]=(((r).pmd_ieee_tst_mode_10gt[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_GET(r) ((((r).pmd_ieee_tst_mode_10gt[0]) >> 10) & 0x7)
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_SET(r,f) (r).pmd_ieee_tst_mode_10gt[0]=(((r).pmd_ieee_tst_mode_10gt[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_GET(r) ((((r).pmd_ieee_tst_mode_10gt[0]) >> 8) & 0x3)
#define BCM84834_PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_SET(r,f) (r).pmd_ieee_tst_mode_10gt[0]=(((r).pmd_ieee_tst_mode_10gt[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))

/*
 * These macros can be used to access PMD_IEEE_TST_MODE_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_TST_MODE_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_TST_MODE_10GTr,(_r._pmd_ieee_tst_mode_10gt))
#define BCM84834_WRITE_PMD_IEEE_TST_MODE_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_TST_MODE_10GTr,(_r._pmd_ieee_tst_mode_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_TST_MODE_10GTr BCM84834_PMD_IEEE_TST_MODE_10GTr
#define PMD_IEEE_TST_MODE_10GTr_SIZE BCM84834_PMD_IEEE_TST_MODE_10GTr_SIZE
typedef BCM84834_PMD_IEEE_TST_MODE_10GTr_t PMD_IEEE_TST_MODE_10GTr_t;
#define PMD_IEEE_TST_MODE_10GTr_CLR BCM84834_PMD_IEEE_TST_MODE_10GTr_CLR
#define PMD_IEEE_TST_MODE_10GTr_SET BCM84834_PMD_IEEE_TST_MODE_10GTr_SET
#define PMD_IEEE_TST_MODE_10GTr_GET BCM84834_PMD_IEEE_TST_MODE_10GTr_GET
#define PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_GET BCM84834_PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_GET
#define PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_SET BCM84834_PMD_IEEE_TST_MODE_10GTr_TST_MODE_CTLf_SET
#define PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_GET BCM84834_PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_GET
#define PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_SET BCM84834_PMD_IEEE_TST_MODE_10GTr_TRN_TEST_FREQf_SET
#define PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_GET BCM84834_PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_GET
#define PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_SET BCM84834_PMD_IEEE_TST_MODE_10GTr_EEE_TST_MODE_CTLf_SET
#define READ_PMD_IEEE_TST_MODE_10GTr BCM84834_READ_PMD_IEEE_TST_MODE_10GTr
#define WRITE_PMD_IEEE_TST_MODE_10GTr BCM84834_WRITE_PMD_IEEE_TST_MODE_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_TST_MODE_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SNR_OP_MRGN_CHA
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0085
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel A
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr (0x00010085 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SNR_OP_MRGN_CHA.
 *
 */
typedef union BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_snr_op_mrgn_cha[1];
	uint32_t _pmd_ieee_snr_op_mrgn_cha;
} BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_t;

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_CLR(r) (r).pmd_ieee_snr_op_mrgn_cha[0] = 0
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SET(r,d) (r).pmd_ieee_snr_op_mrgn_cha[0] = d
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_GET(r) (r).pmd_ieee_snr_op_mrgn_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_GET(r) (((r).pmd_ieee_snr_op_mrgn_cha[0]) & 0xffff)
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_SET(r,f) (r).pmd_ieee_snr_op_mrgn_cha[0]=(((r).pmd_ieee_snr_op_mrgn_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_SNR_OP_MRGN_CHA.
 *
 */
#define BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr,(_r._pmd_ieee_snr_op_mrgn_cha))
#define BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr,(_r._pmd_ieee_snr_op_mrgn_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SNR_OP_MRGN_CHAr BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr
#define PMD_IEEE_SNR_OP_MRGN_CHAr_SIZE BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SIZE
typedef BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_t PMD_IEEE_SNR_OP_MRGN_CHAr_t;
#define PMD_IEEE_SNR_OP_MRGN_CHAr_CLR BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_CLR
#define PMD_IEEE_SNR_OP_MRGN_CHAr_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SET
#define PMD_IEEE_SNR_OP_MRGN_CHAr_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_GET
#define PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_GET
#define PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr_SNRf_SET
#define READ_PMD_IEEE_SNR_OP_MRGN_CHAr BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHAr
#define WRITE_PMD_IEEE_SNR_OP_MRGN_CHAr BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SNR_OP_MRGN_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SNR_OP_MRGN_CHB
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0086
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel B
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr (0x00010086 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SNR_OP_MRGN_CHB.
 *
 */
typedef union BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_snr_op_mrgn_chb[1];
	uint32_t _pmd_ieee_snr_op_mrgn_chb;
} BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_t;

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_CLR(r) (r).pmd_ieee_snr_op_mrgn_chb[0] = 0
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SET(r,d) (r).pmd_ieee_snr_op_mrgn_chb[0] = d
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_GET(r) (r).pmd_ieee_snr_op_mrgn_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_GET(r) (((r).pmd_ieee_snr_op_mrgn_chb[0]) & 0xffff)
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_SET(r,f) (r).pmd_ieee_snr_op_mrgn_chb[0]=(((r).pmd_ieee_snr_op_mrgn_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_SNR_OP_MRGN_CHB.
 *
 */
#define BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr,(_r._pmd_ieee_snr_op_mrgn_chb))
#define BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr,(_r._pmd_ieee_snr_op_mrgn_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SNR_OP_MRGN_CHBr BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr
#define PMD_IEEE_SNR_OP_MRGN_CHBr_SIZE BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SIZE
typedef BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_t PMD_IEEE_SNR_OP_MRGN_CHBr_t;
#define PMD_IEEE_SNR_OP_MRGN_CHBr_CLR BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_CLR
#define PMD_IEEE_SNR_OP_MRGN_CHBr_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SET
#define PMD_IEEE_SNR_OP_MRGN_CHBr_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_GET
#define PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_GET
#define PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr_SNRf_SET
#define READ_PMD_IEEE_SNR_OP_MRGN_CHBr BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHBr
#define WRITE_PMD_IEEE_SNR_OP_MRGN_CHBr BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SNR_OP_MRGN_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SNR_OP_MRGN_CHC
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0087
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel C
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr (0x00010087 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SNR_OP_MRGN_CHC.
 *
 */
typedef union BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_snr_op_mrgn_chc[1];
	uint32_t _pmd_ieee_snr_op_mrgn_chc;
} BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_t;

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_CLR(r) (r).pmd_ieee_snr_op_mrgn_chc[0] = 0
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SET(r,d) (r).pmd_ieee_snr_op_mrgn_chc[0] = d
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_GET(r) (r).pmd_ieee_snr_op_mrgn_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_GET(r) (((r).pmd_ieee_snr_op_mrgn_chc[0]) & 0xffff)
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_SET(r,f) (r).pmd_ieee_snr_op_mrgn_chc[0]=(((r).pmd_ieee_snr_op_mrgn_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_SNR_OP_MRGN_CHC.
 *
 */
#define BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr,(_r._pmd_ieee_snr_op_mrgn_chc))
#define BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr,(_r._pmd_ieee_snr_op_mrgn_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SNR_OP_MRGN_CHCr BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr
#define PMD_IEEE_SNR_OP_MRGN_CHCr_SIZE BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SIZE
typedef BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_t PMD_IEEE_SNR_OP_MRGN_CHCr_t;
#define PMD_IEEE_SNR_OP_MRGN_CHCr_CLR BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_CLR
#define PMD_IEEE_SNR_OP_MRGN_CHCr_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SET
#define PMD_IEEE_SNR_OP_MRGN_CHCr_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_GET
#define PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_GET
#define PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr_SNRf_SET
#define READ_PMD_IEEE_SNR_OP_MRGN_CHCr BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHCr
#define WRITE_PMD_IEEE_SNR_OP_MRGN_CHCr BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SNR_OP_MRGN_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SNR_OP_MRGN_CHD
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0088
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel D
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr (0x00010088 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SNR_OP_MRGN_CHD.
 *
 */
typedef union BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_snr_op_mrgn_chd[1];
	uint32_t _pmd_ieee_snr_op_mrgn_chd;
} BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_t;

#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_CLR(r) (r).pmd_ieee_snr_op_mrgn_chd[0] = 0
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SET(r,d) (r).pmd_ieee_snr_op_mrgn_chd[0] = d
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_GET(r) (r).pmd_ieee_snr_op_mrgn_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_GET(r) (((r).pmd_ieee_snr_op_mrgn_chd[0]) & 0xffff)
#define BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_SET(r,f) (r).pmd_ieee_snr_op_mrgn_chd[0]=(((r).pmd_ieee_snr_op_mrgn_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_SNR_OP_MRGN_CHD.
 *
 */
#define BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr,(_r._pmd_ieee_snr_op_mrgn_chd))
#define BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr,(_r._pmd_ieee_snr_op_mrgn_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SNR_OP_MRGN_CHDr BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr
#define PMD_IEEE_SNR_OP_MRGN_CHDr_SIZE BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SIZE
typedef BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_t PMD_IEEE_SNR_OP_MRGN_CHDr_t;
#define PMD_IEEE_SNR_OP_MRGN_CHDr_CLR BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_CLR
#define PMD_IEEE_SNR_OP_MRGN_CHDr_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SET
#define PMD_IEEE_SNR_OP_MRGN_CHDr_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_GET
#define PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_GET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_GET
#define PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_SET BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr_SNRf_SET
#define READ_PMD_IEEE_SNR_OP_MRGN_CHDr BCM84834_READ_PMD_IEEE_SNR_OP_MRGN_CHDr
#define WRITE_PMD_IEEE_SNR_OP_MRGN_CHDr BCM84834_WRITE_PMD_IEEE_SNR_OP_MRGN_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SNR_OP_MRGN_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_MIN_MRGN_CHA
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0089
 * DEVAD:    1
 * DESC:     Minimum Margin Channel A
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr (0x00010089 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_MIN_MRGN_CHA.
 *
 */
typedef union BCM84834_PMD_IEEE_MIN_MRGN_CHAr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_min_mrgn_cha[1];
	uint32_t _pmd_ieee_min_mrgn_cha;
} BCM84834_PMD_IEEE_MIN_MRGN_CHAr_t;

#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_CLR(r) (r).pmd_ieee_min_mrgn_cha[0] = 0
#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_SET(r,d) (r).pmd_ieee_min_mrgn_cha[0] = d
#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_GET(r) (r).pmd_ieee_min_mrgn_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_GET(r) (((r).pmd_ieee_min_mrgn_cha[0]) & 0xffff)
#define BCM84834_PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_SET(r,f) (r).pmd_ieee_min_mrgn_cha[0]=(((r).pmd_ieee_min_mrgn_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_MIN_MRGN_CHA.
 *
 */
#define BCM84834_READ_PMD_IEEE_MIN_MRGN_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHAr,(_r._pmd_ieee_min_mrgn_cha))
#define BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHAr,(_r._pmd_ieee_min_mrgn_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_MIN_MRGN_CHAr BCM84834_PMD_IEEE_MIN_MRGN_CHAr
#define PMD_IEEE_MIN_MRGN_CHAr_SIZE BCM84834_PMD_IEEE_MIN_MRGN_CHAr_SIZE
typedef BCM84834_PMD_IEEE_MIN_MRGN_CHAr_t PMD_IEEE_MIN_MRGN_CHAr_t;
#define PMD_IEEE_MIN_MRGN_CHAr_CLR BCM84834_PMD_IEEE_MIN_MRGN_CHAr_CLR
#define PMD_IEEE_MIN_MRGN_CHAr_SET BCM84834_PMD_IEEE_MIN_MRGN_CHAr_SET
#define PMD_IEEE_MIN_MRGN_CHAr_GET BCM84834_PMD_IEEE_MIN_MRGN_CHAr_GET
#define PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_GET BCM84834_PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_GET
#define PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_SET BCM84834_PMD_IEEE_MIN_MRGN_CHAr_MIN_MARGINf_SET
#define READ_PMD_IEEE_MIN_MRGN_CHAr BCM84834_READ_PMD_IEEE_MIN_MRGN_CHAr
#define WRITE_PMD_IEEE_MIN_MRGN_CHAr BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_MIN_MRGN_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_MIN_MRGN_CHB
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008a
 * DEVAD:    1
 * DESC:     Minimum Margin Channel B
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr (0x0001008a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_MIN_MRGN_CHB.
 *
 */
typedef union BCM84834_PMD_IEEE_MIN_MRGN_CHBr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_min_mrgn_chb[1];
	uint32_t _pmd_ieee_min_mrgn_chb;
} BCM84834_PMD_IEEE_MIN_MRGN_CHBr_t;

#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_CLR(r) (r).pmd_ieee_min_mrgn_chb[0] = 0
#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_SET(r,d) (r).pmd_ieee_min_mrgn_chb[0] = d
#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_GET(r) (r).pmd_ieee_min_mrgn_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_GET(r) (((r).pmd_ieee_min_mrgn_chb[0]) & 0xffff)
#define BCM84834_PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_SET(r,f) (r).pmd_ieee_min_mrgn_chb[0]=(((r).pmd_ieee_min_mrgn_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_MIN_MRGN_CHB.
 *
 */
#define BCM84834_READ_PMD_IEEE_MIN_MRGN_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHBr,(_r._pmd_ieee_min_mrgn_chb))
#define BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHBr,(_r._pmd_ieee_min_mrgn_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_MIN_MRGN_CHBr BCM84834_PMD_IEEE_MIN_MRGN_CHBr
#define PMD_IEEE_MIN_MRGN_CHBr_SIZE BCM84834_PMD_IEEE_MIN_MRGN_CHBr_SIZE
typedef BCM84834_PMD_IEEE_MIN_MRGN_CHBr_t PMD_IEEE_MIN_MRGN_CHBr_t;
#define PMD_IEEE_MIN_MRGN_CHBr_CLR BCM84834_PMD_IEEE_MIN_MRGN_CHBr_CLR
#define PMD_IEEE_MIN_MRGN_CHBr_SET BCM84834_PMD_IEEE_MIN_MRGN_CHBr_SET
#define PMD_IEEE_MIN_MRGN_CHBr_GET BCM84834_PMD_IEEE_MIN_MRGN_CHBr_GET
#define PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_GET BCM84834_PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_GET
#define PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_SET BCM84834_PMD_IEEE_MIN_MRGN_CHBr_MIN_MARGINf_SET
#define READ_PMD_IEEE_MIN_MRGN_CHBr BCM84834_READ_PMD_IEEE_MIN_MRGN_CHBr
#define WRITE_PMD_IEEE_MIN_MRGN_CHBr BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_MIN_MRGN_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_MIN_MRGN_CHC
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008b
 * DEVAD:    1
 * DESC:     Minimum Margin Channel C
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr (0x0001008b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_MIN_MRGN_CHC.
 *
 */
typedef union BCM84834_PMD_IEEE_MIN_MRGN_CHCr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_min_mrgn_chc[1];
	uint32_t _pmd_ieee_min_mrgn_chc;
} BCM84834_PMD_IEEE_MIN_MRGN_CHCr_t;

#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_CLR(r) (r).pmd_ieee_min_mrgn_chc[0] = 0
#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_SET(r,d) (r).pmd_ieee_min_mrgn_chc[0] = d
#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_GET(r) (r).pmd_ieee_min_mrgn_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_GET(r) (((r).pmd_ieee_min_mrgn_chc[0]) & 0xffff)
#define BCM84834_PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_SET(r,f) (r).pmd_ieee_min_mrgn_chc[0]=(((r).pmd_ieee_min_mrgn_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_MIN_MRGN_CHC.
 *
 */
#define BCM84834_READ_PMD_IEEE_MIN_MRGN_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHCr,(_r._pmd_ieee_min_mrgn_chc))
#define BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHCr,(_r._pmd_ieee_min_mrgn_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_MIN_MRGN_CHCr BCM84834_PMD_IEEE_MIN_MRGN_CHCr
#define PMD_IEEE_MIN_MRGN_CHCr_SIZE BCM84834_PMD_IEEE_MIN_MRGN_CHCr_SIZE
typedef BCM84834_PMD_IEEE_MIN_MRGN_CHCr_t PMD_IEEE_MIN_MRGN_CHCr_t;
#define PMD_IEEE_MIN_MRGN_CHCr_CLR BCM84834_PMD_IEEE_MIN_MRGN_CHCr_CLR
#define PMD_IEEE_MIN_MRGN_CHCr_SET BCM84834_PMD_IEEE_MIN_MRGN_CHCr_SET
#define PMD_IEEE_MIN_MRGN_CHCr_GET BCM84834_PMD_IEEE_MIN_MRGN_CHCr_GET
#define PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_GET BCM84834_PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_GET
#define PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_SET BCM84834_PMD_IEEE_MIN_MRGN_CHCr_MIN_MARGINf_SET
#define READ_PMD_IEEE_MIN_MRGN_CHCr BCM84834_READ_PMD_IEEE_MIN_MRGN_CHCr
#define WRITE_PMD_IEEE_MIN_MRGN_CHCr BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_MIN_MRGN_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_MIN_MRGN_CHD
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008c
 * DEVAD:    1
 * DESC:     Minimum Margin Channel D
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr (0x0001008c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_MIN_MRGN_CHD.
 *
 */
typedef union BCM84834_PMD_IEEE_MIN_MRGN_CHDr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_min_mrgn_chd[1];
	uint32_t _pmd_ieee_min_mrgn_chd;
} BCM84834_PMD_IEEE_MIN_MRGN_CHDr_t;

#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_CLR(r) (r).pmd_ieee_min_mrgn_chd[0] = 0
#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_SET(r,d) (r).pmd_ieee_min_mrgn_chd[0] = d
#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_GET(r) (r).pmd_ieee_min_mrgn_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_GET(r) (((r).pmd_ieee_min_mrgn_chd[0]) & 0xffff)
#define BCM84834_PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_SET(r,f) (r).pmd_ieee_min_mrgn_chd[0]=(((r).pmd_ieee_min_mrgn_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_MIN_MRGN_CHD.
 *
 */
#define BCM84834_READ_PMD_IEEE_MIN_MRGN_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHDr,(_r._pmd_ieee_min_mrgn_chd))
#define BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_MIN_MRGN_CHDr,(_r._pmd_ieee_min_mrgn_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_MIN_MRGN_CHDr BCM84834_PMD_IEEE_MIN_MRGN_CHDr
#define PMD_IEEE_MIN_MRGN_CHDr_SIZE BCM84834_PMD_IEEE_MIN_MRGN_CHDr_SIZE
typedef BCM84834_PMD_IEEE_MIN_MRGN_CHDr_t PMD_IEEE_MIN_MRGN_CHDr_t;
#define PMD_IEEE_MIN_MRGN_CHDr_CLR BCM84834_PMD_IEEE_MIN_MRGN_CHDr_CLR
#define PMD_IEEE_MIN_MRGN_CHDr_SET BCM84834_PMD_IEEE_MIN_MRGN_CHDr_SET
#define PMD_IEEE_MIN_MRGN_CHDr_GET BCM84834_PMD_IEEE_MIN_MRGN_CHDr_GET
#define PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_GET BCM84834_PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_GET
#define PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_SET BCM84834_PMD_IEEE_MIN_MRGN_CHDr_MIN_MARGINf_SET
#define READ_PMD_IEEE_MIN_MRGN_CHDr BCM84834_READ_PMD_IEEE_MIN_MRGN_CHDr
#define WRITE_PMD_IEEE_MIN_MRGN_CHDr BCM84834_WRITE_PMD_IEEE_MIN_MRGN_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_MIN_MRGN_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_RX_SIG_PWR_CHA
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008d
 * DEVAD:    1
 * DESC:     RX Signal Power Channel A
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr (0x0001008d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_RX_SIG_PWR_CHA.
 *
 */
typedef union BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_rx_sig_pwr_cha[1];
	uint32_t _pmd_ieee_rx_sig_pwr_cha;
} BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_t;

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_CLR(r) (r).pmd_ieee_rx_sig_pwr_cha[0] = 0
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_SET(r,d) (r).pmd_ieee_rx_sig_pwr_cha[0] = d
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_GET(r) (r).pmd_ieee_rx_sig_pwr_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET(r) (((r).pmd_ieee_rx_sig_pwr_cha[0]) & 0xffff)
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET(r,f) (r).pmd_ieee_rx_sig_pwr_cha[0]=(((r).pmd_ieee_rx_sig_pwr_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_RX_SIG_PWR_CHA.
 *
 */
#define BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr,(_r._pmd_ieee_rx_sig_pwr_cha))
#define BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr,(_r._pmd_ieee_rx_sig_pwr_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_RX_SIG_PWR_CHAr BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr
#define PMD_IEEE_RX_SIG_PWR_CHAr_SIZE BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_SIZE
typedef BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_t PMD_IEEE_RX_SIG_PWR_CHAr_t;
#define PMD_IEEE_RX_SIG_PWR_CHAr_CLR BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_CLR
#define PMD_IEEE_RX_SIG_PWR_CHAr_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_SET
#define PMD_IEEE_RX_SIG_PWR_CHAr_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_GET
#define PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET
#define PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET
#define READ_PMD_IEEE_RX_SIG_PWR_CHAr BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHAr
#define WRITE_PMD_IEEE_RX_SIG_PWR_CHAr BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_RX_SIG_PWR_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_RX_SIG_PWR_CHB
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008e
 * DEVAD:    1
 * DESC:     RX Signal Power Channel B
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr (0x0001008e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_RX_SIG_PWR_CHB.
 *
 */
typedef union BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_rx_sig_pwr_chb[1];
	uint32_t _pmd_ieee_rx_sig_pwr_chb;
} BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_t;

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_CLR(r) (r).pmd_ieee_rx_sig_pwr_chb[0] = 0
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_SET(r,d) (r).pmd_ieee_rx_sig_pwr_chb[0] = d
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_GET(r) (r).pmd_ieee_rx_sig_pwr_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET(r) (((r).pmd_ieee_rx_sig_pwr_chb[0]) & 0xffff)
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET(r,f) (r).pmd_ieee_rx_sig_pwr_chb[0]=(((r).pmd_ieee_rx_sig_pwr_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_RX_SIG_PWR_CHB.
 *
 */
#define BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr,(_r._pmd_ieee_rx_sig_pwr_chb))
#define BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr,(_r._pmd_ieee_rx_sig_pwr_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_RX_SIG_PWR_CHBr BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr
#define PMD_IEEE_RX_SIG_PWR_CHBr_SIZE BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_SIZE
typedef BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_t PMD_IEEE_RX_SIG_PWR_CHBr_t;
#define PMD_IEEE_RX_SIG_PWR_CHBr_CLR BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_CLR
#define PMD_IEEE_RX_SIG_PWR_CHBr_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_SET
#define PMD_IEEE_RX_SIG_PWR_CHBr_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_GET
#define PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET
#define PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET
#define READ_PMD_IEEE_RX_SIG_PWR_CHBr BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHBr
#define WRITE_PMD_IEEE_RX_SIG_PWR_CHBr BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_RX_SIG_PWR_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_RX_SIG_PWR_CHC
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x008f
 * DEVAD:    1
 * DESC:     RX Signal Power Channel C
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr (0x0001008f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_RX_SIG_PWR_CHC.
 *
 */
typedef union BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_rx_sig_pwr_chc[1];
	uint32_t _pmd_ieee_rx_sig_pwr_chc;
} BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_t;

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_CLR(r) (r).pmd_ieee_rx_sig_pwr_chc[0] = 0
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_SET(r,d) (r).pmd_ieee_rx_sig_pwr_chc[0] = d
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_GET(r) (r).pmd_ieee_rx_sig_pwr_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET(r) (((r).pmd_ieee_rx_sig_pwr_chc[0]) & 0xffff)
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET(r,f) (r).pmd_ieee_rx_sig_pwr_chc[0]=(((r).pmd_ieee_rx_sig_pwr_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_RX_SIG_PWR_CHC.
 *
 */
#define BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr,(_r._pmd_ieee_rx_sig_pwr_chc))
#define BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr,(_r._pmd_ieee_rx_sig_pwr_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_RX_SIG_PWR_CHCr BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr
#define PMD_IEEE_RX_SIG_PWR_CHCr_SIZE BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_SIZE
typedef BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_t PMD_IEEE_RX_SIG_PWR_CHCr_t;
#define PMD_IEEE_RX_SIG_PWR_CHCr_CLR BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_CLR
#define PMD_IEEE_RX_SIG_PWR_CHCr_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_SET
#define PMD_IEEE_RX_SIG_PWR_CHCr_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_GET
#define PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET
#define PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET
#define READ_PMD_IEEE_RX_SIG_PWR_CHCr BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHCr
#define WRITE_PMD_IEEE_RX_SIG_PWR_CHCr BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_RX_SIG_PWR_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_RX_SIG_PWR_CHD
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0090
 * DEVAD:    1
 * DESC:     RX Signal Power Channel D
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr (0x00010090 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_RX_SIG_PWR_CHD.
 *
 */
typedef union BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_rx_sig_pwr_chd[1];
	uint32_t _pmd_ieee_rx_sig_pwr_chd;
} BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_t;

#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_CLR(r) (r).pmd_ieee_rx_sig_pwr_chd[0] = 0
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_SET(r,d) (r).pmd_ieee_rx_sig_pwr_chd[0] = d
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_GET(r) (r).pmd_ieee_rx_sig_pwr_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET(r) (((r).pmd_ieee_rx_sig_pwr_chd[0]) & 0xffff)
#define BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET(r,f) (r).pmd_ieee_rx_sig_pwr_chd[0]=(((r).pmd_ieee_rx_sig_pwr_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PMD_IEEE_RX_SIG_PWR_CHD.
 *
 */
#define BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr,(_r._pmd_ieee_rx_sig_pwr_chd))
#define BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr,(_r._pmd_ieee_rx_sig_pwr_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_RX_SIG_PWR_CHDr BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr
#define PMD_IEEE_RX_SIG_PWR_CHDr_SIZE BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_SIZE
typedef BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_t PMD_IEEE_RX_SIG_PWR_CHDr_t;
#define PMD_IEEE_RX_SIG_PWR_CHDr_CLR BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_CLR
#define PMD_IEEE_RX_SIG_PWR_CHDr_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_SET
#define PMD_IEEE_RX_SIG_PWR_CHDr_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_GET
#define PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET
#define PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET
#define READ_PMD_IEEE_RX_SIG_PWR_CHDr BCM84834_READ_PMD_IEEE_RX_SIG_PWR_CHDr
#define WRITE_PMD_IEEE_RX_SIG_PWR_CHDr BCM84834_WRITE_PMD_IEEE_RX_SIG_PWR_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_RX_SIG_PWR_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SKW_DLY0_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0091
 * DEVAD:    1
 * DESC:     10GBASE-T skew delay part 0
 * SIZE:     32
 * FIELDS:
 *     SKW_DLY_B        
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr (0x00010091 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SKW_DLY0_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_SKW_DLY0_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_skw_dly0_10gt[1];
	uint32_t _pmd_ieee_skw_dly0_10gt;
} BCM84834_PMD_IEEE_SKW_DLY0_10GTr_t;

#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_CLR(r) (r).pmd_ieee_skw_dly0_10gt[0] = 0
#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SET(r,d) (r).pmd_ieee_skw_dly0_10gt[0] = d
#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_GET(r) (r).pmd_ieee_skw_dly0_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_GET(r) ((((r).pmd_ieee_skw_dly0_10gt[0]) >> 8) & 0x7f)
#define BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_SET(r,f) (r).pmd_ieee_skw_dly0_10gt[0]=(((r).pmd_ieee_skw_dly0_10gt[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))

/*
 * These macros can be used to access PMD_IEEE_SKW_DLY0_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_SKW_DLY0_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SKW_DLY0_10GTr,(_r._pmd_ieee_skw_dly0_10gt))
#define BCM84834_WRITE_PMD_IEEE_SKW_DLY0_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SKW_DLY0_10GTr,(_r._pmd_ieee_skw_dly0_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SKW_DLY0_10GTr BCM84834_PMD_IEEE_SKW_DLY0_10GTr
#define PMD_IEEE_SKW_DLY0_10GTr_SIZE BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SIZE
typedef BCM84834_PMD_IEEE_SKW_DLY0_10GTr_t PMD_IEEE_SKW_DLY0_10GTr_t;
#define PMD_IEEE_SKW_DLY0_10GTr_CLR BCM84834_PMD_IEEE_SKW_DLY0_10GTr_CLR
#define PMD_IEEE_SKW_DLY0_10GTr_SET BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SET
#define PMD_IEEE_SKW_DLY0_10GTr_GET BCM84834_PMD_IEEE_SKW_DLY0_10GTr_GET
#define PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_GET BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_GET
#define PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_SET BCM84834_PMD_IEEE_SKW_DLY0_10GTr_SKW_DLY_Bf_SET
#define READ_PMD_IEEE_SKW_DLY0_10GTr BCM84834_READ_PMD_IEEE_SKW_DLY0_10GTr
#define WRITE_PMD_IEEE_SKW_DLY0_10GTr BCM84834_WRITE_PMD_IEEE_SKW_DLY0_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SKW_DLY0_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_SKW_DLY1_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0092
 * DEVAD:    1
 * DESC:     10GBASE-T skew delay part 1
 * SIZE:     32
 * FIELDS:
 *     SKW_DLY_C        
 *     SKW_DLY_D        
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr (0x00010092 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_SKW_DLY1_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_SKW_DLY1_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_skw_dly1_10gt[1];
	uint32_t _pmd_ieee_skw_dly1_10gt;
} BCM84834_PMD_IEEE_SKW_DLY1_10GTr_t;

#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_CLR(r) (r).pmd_ieee_skw_dly1_10gt[0] = 0
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SET(r,d) (r).pmd_ieee_skw_dly1_10gt[0] = d
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_GET(r) (r).pmd_ieee_skw_dly1_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_GET(r) ((((r).pmd_ieee_skw_dly1_10gt[0]) >> 8) & 0x7f)
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_SET(r,f) (r).pmd_ieee_skw_dly1_10gt[0]=(((r).pmd_ieee_skw_dly1_10gt[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_GET(r) (((r).pmd_ieee_skw_dly1_10gt[0]) & 0x7f)
#define BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_SET(r,f) (r).pmd_ieee_skw_dly1_10gt[0]=(((r).pmd_ieee_skw_dly1_10gt[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PMD_IEEE_SKW_DLY1_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_SKW_DLY1_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_SKW_DLY1_10GTr,(_r._pmd_ieee_skw_dly1_10gt))
#define BCM84834_WRITE_PMD_IEEE_SKW_DLY1_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_SKW_DLY1_10GTr,(_r._pmd_ieee_skw_dly1_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_SKW_DLY1_10GTr BCM84834_PMD_IEEE_SKW_DLY1_10GTr
#define PMD_IEEE_SKW_DLY1_10GTr_SIZE BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SIZE
typedef BCM84834_PMD_IEEE_SKW_DLY1_10GTr_t PMD_IEEE_SKW_DLY1_10GTr_t;
#define PMD_IEEE_SKW_DLY1_10GTr_CLR BCM84834_PMD_IEEE_SKW_DLY1_10GTr_CLR
#define PMD_IEEE_SKW_DLY1_10GTr_SET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SET
#define PMD_IEEE_SKW_DLY1_10GTr_GET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_GET
#define PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_GET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_GET
#define PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_SET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Df_SET
#define PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_GET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_GET
#define PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_SET BCM84834_PMD_IEEE_SKW_DLY1_10GTr_SKW_DLY_Cf_SET
#define READ_PMD_IEEE_SKW_DLY1_10GTr BCM84834_READ_PMD_IEEE_SKW_DLY1_10GTr
#define WRITE_PMD_IEEE_SKW_DLY1_10GTr BCM84834_WRITE_PMD_IEEE_SKW_DLY1_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_SKW_DLY1_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PMD_IEEE_FR_10GT
 * BLOCKS:   PMD_IEEE
 * REGADDR:  0x0093
 * DEVAD:    1
 * DESC:     10GBASE-T Fast Retrain Status and Control
 * SIZE:     32
 * FIELDS:
 *     FR_EN            
 *     FR_SIGTYPE       
 *     FR_NEGOTIATED    
 *     FR_ABIL          
 *     FR_TX_CNT        
 *     FR_RX_CNT        
 *
 ******************************************************************************/
#define BCM84834_PMD_IEEE_FR_10GTr (0x00010093 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PMD_IEEE_FR_10GTr_SIZE 4

/*
 * This structure should be used to declare and program PMD_IEEE_FR_10GT.
 *
 */
typedef union BCM84834_PMD_IEEE_FR_10GTr_s {
	uint32_t v[1];
	uint32_t pmd_ieee_fr_10gt[1];
	uint32_t _pmd_ieee_fr_10gt;
} BCM84834_PMD_IEEE_FR_10GTr_t;

#define BCM84834_PMD_IEEE_FR_10GTr_CLR(r) (r).pmd_ieee_fr_10gt[0] = 0
#define BCM84834_PMD_IEEE_FR_10GTr_SET(r,d) (r).pmd_ieee_fr_10gt[0] = d
#define BCM84834_PMD_IEEE_FR_10GTr_GET(r) (r).pmd_ieee_fr_10gt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PMD_IEEE_FR_10GTr_FR_RX_CNTf_GET(r) ((((r).pmd_ieee_fr_10gt[0]) >> 11) & 0x1f)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_RX_CNTf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_PMD_IEEE_FR_10GTr_FR_TX_CNTf_GET(r) ((((r).pmd_ieee_fr_10gt[0]) >> 6) & 0x1f)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_TX_CNTf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x1f << 6)) | ((((uint32_t)f) & 0x1f) << 6))
#define BCM84834_PMD_IEEE_FR_10GTr_FR_ABILf_GET(r) ((((r).pmd_ieee_fr_10gt[0]) >> 4) & 0x1)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_ABILf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_GET(r) ((((r).pmd_ieee_fr_10gt[0]) >> 3) & 0x1)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PMD_IEEE_FR_10GTr_FR_SIGTYPEf_GET(r) ((((r).pmd_ieee_fr_10gt[0]) >> 1) & 0x3)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_SIGTYPEf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCM84834_PMD_IEEE_FR_10GTr_FR_ENf_GET(r) (((r).pmd_ieee_fr_10gt[0]) & 0x1)
#define BCM84834_PMD_IEEE_FR_10GTr_FR_ENf_SET(r,f) (r).pmd_ieee_fr_10gt[0]=(((r).pmd_ieee_fr_10gt[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PMD_IEEE_FR_10GT.
 *
 */
#define BCM84834_READ_PMD_IEEE_FR_10GTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PMD_IEEE_FR_10GTr,(_r._pmd_ieee_fr_10gt))
#define BCM84834_WRITE_PMD_IEEE_FR_10GTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PMD_IEEE_FR_10GTr,(_r._pmd_ieee_fr_10gt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PMD_IEEE_FR_10GTr BCM84834_PMD_IEEE_FR_10GTr
#define PMD_IEEE_FR_10GTr_SIZE BCM84834_PMD_IEEE_FR_10GTr_SIZE
typedef BCM84834_PMD_IEEE_FR_10GTr_t PMD_IEEE_FR_10GTr_t;
#define PMD_IEEE_FR_10GTr_CLR BCM84834_PMD_IEEE_FR_10GTr_CLR
#define PMD_IEEE_FR_10GTr_SET BCM84834_PMD_IEEE_FR_10GTr_SET
#define PMD_IEEE_FR_10GTr_GET BCM84834_PMD_IEEE_FR_10GTr_GET
#define PMD_IEEE_FR_10GTr_FR_RX_CNTf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_RX_CNTf_GET
#define PMD_IEEE_FR_10GTr_FR_RX_CNTf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_RX_CNTf_SET
#define PMD_IEEE_FR_10GTr_FR_TX_CNTf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_TX_CNTf_GET
#define PMD_IEEE_FR_10GTr_FR_TX_CNTf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_TX_CNTf_SET
#define PMD_IEEE_FR_10GTr_FR_ABILf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_ABILf_GET
#define PMD_IEEE_FR_10GTr_FR_ABILf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_ABILf_SET
#define PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_GET
#define PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_NEGOTIATEDf_SET
#define PMD_IEEE_FR_10GTr_FR_SIGTYPEf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_SIGTYPEf_GET
#define PMD_IEEE_FR_10GTr_FR_SIGTYPEf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_SIGTYPEf_SET
#define PMD_IEEE_FR_10GTr_FR_ENf_GET BCM84834_PMD_IEEE_FR_10GTr_FR_ENf_GET
#define PMD_IEEE_FR_10GTr_FR_ENf_SET BCM84834_PMD_IEEE_FR_10GTr_FR_ENf_SET
#define READ_PMD_IEEE_FR_10GTr BCM84834_READ_PMD_IEEE_FR_10GTr
#define WRITE_PMD_IEEE_FR_10GTr BCM84834_WRITE_PMD_IEEE_FR_10GTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PMD_IEEE_FR_10GTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa800
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 0
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_0         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_0r (0x0001a800 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_0.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_0r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_0[1];
	uint32_t _phyc_rcv_if_0;
} BCM84834_PHYC_RCV_IF_0r_t;

#define BCM84834_PHYC_RCV_IF_0r_CLR(r) (r).phyc_rcv_if_0[0] = 0
#define BCM84834_PHYC_RCV_IF_0r_SET(r,d) (r).phyc_rcv_if_0[0] = d
#define BCM84834_PHYC_RCV_IF_0r_GET(r) (r).phyc_rcv_if_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_0r_RCV_IF_0f_GET(r) (((r).phyc_rcv_if_0[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_0r_RCV_IF_0f_SET(r,f) (r).phyc_rcv_if_0[0]=(((r).phyc_rcv_if_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_0.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_0r,(_r._phyc_rcv_if_0))
#define BCM84834_WRITE_PHYC_RCV_IF_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_0r,(_r._phyc_rcv_if_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_0r BCM84834_PHYC_RCV_IF_0r
#define PHYC_RCV_IF_0r_SIZE BCM84834_PHYC_RCV_IF_0r_SIZE
typedef BCM84834_PHYC_RCV_IF_0r_t PHYC_RCV_IF_0r_t;
#define PHYC_RCV_IF_0r_CLR BCM84834_PHYC_RCV_IF_0r_CLR
#define PHYC_RCV_IF_0r_SET BCM84834_PHYC_RCV_IF_0r_SET
#define PHYC_RCV_IF_0r_GET BCM84834_PHYC_RCV_IF_0r_GET
#define PHYC_RCV_IF_0r_RCV_IF_0f_GET BCM84834_PHYC_RCV_IF_0r_RCV_IF_0f_GET
#define PHYC_RCV_IF_0r_RCV_IF_0f_SET BCM84834_PHYC_RCV_IF_0r_RCV_IF_0f_SET
#define READ_PHYC_RCV_IF_0r BCM84834_READ_PHYC_RCV_IF_0r
#define WRITE_PHYC_RCV_IF_0r BCM84834_WRITE_PHYC_RCV_IF_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa801
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 1
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_1         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_1r (0x0001a801 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_1.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_1r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_1[1];
	uint32_t _phyc_rcv_if_1;
} BCM84834_PHYC_RCV_IF_1r_t;

#define BCM84834_PHYC_RCV_IF_1r_CLR(r) (r).phyc_rcv_if_1[0] = 0
#define BCM84834_PHYC_RCV_IF_1r_SET(r,d) (r).phyc_rcv_if_1[0] = d
#define BCM84834_PHYC_RCV_IF_1r_GET(r) (r).phyc_rcv_if_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_1r_RCV_IF_1f_GET(r) (((r).phyc_rcv_if_1[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_1r_RCV_IF_1f_SET(r,f) (r).phyc_rcv_if_1[0]=(((r).phyc_rcv_if_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_1.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_1r,(_r._phyc_rcv_if_1))
#define BCM84834_WRITE_PHYC_RCV_IF_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_1r,(_r._phyc_rcv_if_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_1r BCM84834_PHYC_RCV_IF_1r
#define PHYC_RCV_IF_1r_SIZE BCM84834_PHYC_RCV_IF_1r_SIZE
typedef BCM84834_PHYC_RCV_IF_1r_t PHYC_RCV_IF_1r_t;
#define PHYC_RCV_IF_1r_CLR BCM84834_PHYC_RCV_IF_1r_CLR
#define PHYC_RCV_IF_1r_SET BCM84834_PHYC_RCV_IF_1r_SET
#define PHYC_RCV_IF_1r_GET BCM84834_PHYC_RCV_IF_1r_GET
#define PHYC_RCV_IF_1r_RCV_IF_1f_GET BCM84834_PHYC_RCV_IF_1r_RCV_IF_1f_GET
#define PHYC_RCV_IF_1r_RCV_IF_1f_SET BCM84834_PHYC_RCV_IF_1r_RCV_IF_1f_SET
#define READ_PHYC_RCV_IF_1r BCM84834_READ_PHYC_RCV_IF_1r
#define WRITE_PHYC_RCV_IF_1r BCM84834_WRITE_PHYC_RCV_IF_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa802
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 2
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_2         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_2r (0x0001a802 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_2.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_2r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_2[1];
	uint32_t _phyc_rcv_if_2;
} BCM84834_PHYC_RCV_IF_2r_t;

#define BCM84834_PHYC_RCV_IF_2r_CLR(r) (r).phyc_rcv_if_2[0] = 0
#define BCM84834_PHYC_RCV_IF_2r_SET(r,d) (r).phyc_rcv_if_2[0] = d
#define BCM84834_PHYC_RCV_IF_2r_GET(r) (r).phyc_rcv_if_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_2r_RCV_IF_2f_GET(r) (((r).phyc_rcv_if_2[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_2r_RCV_IF_2f_SET(r,f) (r).phyc_rcv_if_2[0]=(((r).phyc_rcv_if_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_2.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_2r,(_r._phyc_rcv_if_2))
#define BCM84834_WRITE_PHYC_RCV_IF_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_2r,(_r._phyc_rcv_if_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_2r BCM84834_PHYC_RCV_IF_2r
#define PHYC_RCV_IF_2r_SIZE BCM84834_PHYC_RCV_IF_2r_SIZE
typedef BCM84834_PHYC_RCV_IF_2r_t PHYC_RCV_IF_2r_t;
#define PHYC_RCV_IF_2r_CLR BCM84834_PHYC_RCV_IF_2r_CLR
#define PHYC_RCV_IF_2r_SET BCM84834_PHYC_RCV_IF_2r_SET
#define PHYC_RCV_IF_2r_GET BCM84834_PHYC_RCV_IF_2r_GET
#define PHYC_RCV_IF_2r_RCV_IF_2f_GET BCM84834_PHYC_RCV_IF_2r_RCV_IF_2f_GET
#define PHYC_RCV_IF_2r_RCV_IF_2f_SET BCM84834_PHYC_RCV_IF_2r_RCV_IF_2f_SET
#define READ_PHYC_RCV_IF_2r BCM84834_READ_PHYC_RCV_IF_2r
#define WRITE_PHYC_RCV_IF_2r BCM84834_WRITE_PHYC_RCV_IF_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa803
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 3
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_3         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_3r (0x0001a803 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_3.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_3r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_3[1];
	uint32_t _phyc_rcv_if_3;
} BCM84834_PHYC_RCV_IF_3r_t;

#define BCM84834_PHYC_RCV_IF_3r_CLR(r) (r).phyc_rcv_if_3[0] = 0
#define BCM84834_PHYC_RCV_IF_3r_SET(r,d) (r).phyc_rcv_if_3[0] = d
#define BCM84834_PHYC_RCV_IF_3r_GET(r) (r).phyc_rcv_if_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_3r_RCV_IF_3f_GET(r) (((r).phyc_rcv_if_3[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_3r_RCV_IF_3f_SET(r,f) (r).phyc_rcv_if_3[0]=(((r).phyc_rcv_if_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_3.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_3r,(_r._phyc_rcv_if_3))
#define BCM84834_WRITE_PHYC_RCV_IF_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_3r,(_r._phyc_rcv_if_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_3r BCM84834_PHYC_RCV_IF_3r
#define PHYC_RCV_IF_3r_SIZE BCM84834_PHYC_RCV_IF_3r_SIZE
typedef BCM84834_PHYC_RCV_IF_3r_t PHYC_RCV_IF_3r_t;
#define PHYC_RCV_IF_3r_CLR BCM84834_PHYC_RCV_IF_3r_CLR
#define PHYC_RCV_IF_3r_SET BCM84834_PHYC_RCV_IF_3r_SET
#define PHYC_RCV_IF_3r_GET BCM84834_PHYC_RCV_IF_3r_GET
#define PHYC_RCV_IF_3r_RCV_IF_3f_GET BCM84834_PHYC_RCV_IF_3r_RCV_IF_3f_GET
#define PHYC_RCV_IF_3r_RCV_IF_3f_SET BCM84834_PHYC_RCV_IF_3r_RCV_IF_3f_SET
#define READ_PHYC_RCV_IF_3r BCM84834_READ_PHYC_RCV_IF_3r
#define WRITE_PHYC_RCV_IF_3r BCM84834_WRITE_PHYC_RCV_IF_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_4
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa804
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 4
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_4         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_4r (0x0001a804 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_4r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_4.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_4r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_4[1];
	uint32_t _phyc_rcv_if_4;
} BCM84834_PHYC_RCV_IF_4r_t;

#define BCM84834_PHYC_RCV_IF_4r_CLR(r) (r).phyc_rcv_if_4[0] = 0
#define BCM84834_PHYC_RCV_IF_4r_SET(r,d) (r).phyc_rcv_if_4[0] = d
#define BCM84834_PHYC_RCV_IF_4r_GET(r) (r).phyc_rcv_if_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_4r_RCV_IF_4f_GET(r) (((r).phyc_rcv_if_4[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_4r_RCV_IF_4f_SET(r,f) (r).phyc_rcv_if_4[0]=(((r).phyc_rcv_if_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_4.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_4r,(_r._phyc_rcv_if_4))
#define BCM84834_WRITE_PHYC_RCV_IF_4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_4r,(_r._phyc_rcv_if_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_4r BCM84834_PHYC_RCV_IF_4r
#define PHYC_RCV_IF_4r_SIZE BCM84834_PHYC_RCV_IF_4r_SIZE
typedef BCM84834_PHYC_RCV_IF_4r_t PHYC_RCV_IF_4r_t;
#define PHYC_RCV_IF_4r_CLR BCM84834_PHYC_RCV_IF_4r_CLR
#define PHYC_RCV_IF_4r_SET BCM84834_PHYC_RCV_IF_4r_SET
#define PHYC_RCV_IF_4r_GET BCM84834_PHYC_RCV_IF_4r_GET
#define PHYC_RCV_IF_4r_RCV_IF_4f_GET BCM84834_PHYC_RCV_IF_4r_RCV_IF_4f_GET
#define PHYC_RCV_IF_4r_RCV_IF_4f_SET BCM84834_PHYC_RCV_IF_4r_RCV_IF_4f_SET
#define READ_PHYC_RCV_IF_4r BCM84834_READ_PHYC_RCV_IF_4r
#define WRITE_PHYC_RCV_IF_4r BCM84834_WRITE_PHYC_RCV_IF_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_5
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa805
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 5
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_5         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_5r (0x0001a805 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_5r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_5.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_5r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_5[1];
	uint32_t _phyc_rcv_if_5;
} BCM84834_PHYC_RCV_IF_5r_t;

#define BCM84834_PHYC_RCV_IF_5r_CLR(r) (r).phyc_rcv_if_5[0] = 0
#define BCM84834_PHYC_RCV_IF_5r_SET(r,d) (r).phyc_rcv_if_5[0] = d
#define BCM84834_PHYC_RCV_IF_5r_GET(r) (r).phyc_rcv_if_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_5r_RCV_IF_5f_GET(r) (((r).phyc_rcv_if_5[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_5r_RCV_IF_5f_SET(r,f) (r).phyc_rcv_if_5[0]=(((r).phyc_rcv_if_5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_5.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_5r,(_r._phyc_rcv_if_5))
#define BCM84834_WRITE_PHYC_RCV_IF_5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_5r,(_r._phyc_rcv_if_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_5r BCM84834_PHYC_RCV_IF_5r
#define PHYC_RCV_IF_5r_SIZE BCM84834_PHYC_RCV_IF_5r_SIZE
typedef BCM84834_PHYC_RCV_IF_5r_t PHYC_RCV_IF_5r_t;
#define PHYC_RCV_IF_5r_CLR BCM84834_PHYC_RCV_IF_5r_CLR
#define PHYC_RCV_IF_5r_SET BCM84834_PHYC_RCV_IF_5r_SET
#define PHYC_RCV_IF_5r_GET BCM84834_PHYC_RCV_IF_5r_GET
#define PHYC_RCV_IF_5r_RCV_IF_5f_GET BCM84834_PHYC_RCV_IF_5r_RCV_IF_5f_GET
#define PHYC_RCV_IF_5r_RCV_IF_5f_SET BCM84834_PHYC_RCV_IF_5r_RCV_IF_5f_SET
#define READ_PHYC_RCV_IF_5r BCM84834_READ_PHYC_RCV_IF_5r
#define WRITE_PHYC_RCV_IF_5r BCM84834_WRITE_PHYC_RCV_IF_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_6
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa806
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 6
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_6         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_6r (0x0001a806 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_6r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_6.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_6r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_6[1];
	uint32_t _phyc_rcv_if_6;
} BCM84834_PHYC_RCV_IF_6r_t;

#define BCM84834_PHYC_RCV_IF_6r_CLR(r) (r).phyc_rcv_if_6[0] = 0
#define BCM84834_PHYC_RCV_IF_6r_SET(r,d) (r).phyc_rcv_if_6[0] = d
#define BCM84834_PHYC_RCV_IF_6r_GET(r) (r).phyc_rcv_if_6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_6r_RCV_IF_6f_GET(r) (((r).phyc_rcv_if_6[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_6r_RCV_IF_6f_SET(r,f) (r).phyc_rcv_if_6[0]=(((r).phyc_rcv_if_6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_6.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_6r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_6r,(_r._phyc_rcv_if_6))
#define BCM84834_WRITE_PHYC_RCV_IF_6r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_6r,(_r._phyc_rcv_if_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_6r BCM84834_PHYC_RCV_IF_6r
#define PHYC_RCV_IF_6r_SIZE BCM84834_PHYC_RCV_IF_6r_SIZE
typedef BCM84834_PHYC_RCV_IF_6r_t PHYC_RCV_IF_6r_t;
#define PHYC_RCV_IF_6r_CLR BCM84834_PHYC_RCV_IF_6r_CLR
#define PHYC_RCV_IF_6r_SET BCM84834_PHYC_RCV_IF_6r_SET
#define PHYC_RCV_IF_6r_GET BCM84834_PHYC_RCV_IF_6r_GET
#define PHYC_RCV_IF_6r_RCV_IF_6f_GET BCM84834_PHYC_RCV_IF_6r_RCV_IF_6f_GET
#define PHYC_RCV_IF_6r_RCV_IF_6f_SET BCM84834_PHYC_RCV_IF_6r_RCV_IF_6f_SET
#define READ_PHYC_RCV_IF_6r BCM84834_READ_PHYC_RCV_IF_6r
#define WRITE_PHYC_RCV_IF_6r BCM84834_WRITE_PHYC_RCV_IF_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_IF_7
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa807
 * DEVAD:    1
 * DESC:     Receive Infofield Reg 7
 * SIZE:     32
 * FIELDS:
 *     RCV_IF_7         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_IF_7r (0x0001a807 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_IF_7r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_IF_7.
 *
 */
typedef union BCM84834_PHYC_RCV_IF_7r_s {
	uint32_t v[1];
	uint32_t phyc_rcv_if_7[1];
	uint32_t _phyc_rcv_if_7;
} BCM84834_PHYC_RCV_IF_7r_t;

#define BCM84834_PHYC_RCV_IF_7r_CLR(r) (r).phyc_rcv_if_7[0] = 0
#define BCM84834_PHYC_RCV_IF_7r_SET(r,d) (r).phyc_rcv_if_7[0] = d
#define BCM84834_PHYC_RCV_IF_7r_GET(r) (r).phyc_rcv_if_7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_IF_7r_RCV_IF_7f_GET(r) (((r).phyc_rcv_if_7[0]) & 0xffff)
#define BCM84834_PHYC_RCV_IF_7r_RCV_IF_7f_SET(r,f) (r).phyc_rcv_if_7[0]=(((r).phyc_rcv_if_7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RCV_IF_7.
 *
 */
#define BCM84834_READ_PHYC_RCV_IF_7r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_IF_7r,(_r._phyc_rcv_if_7))
#define BCM84834_WRITE_PHYC_RCV_IF_7r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_IF_7r,(_r._phyc_rcv_if_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_IF_7r BCM84834_PHYC_RCV_IF_7r
#define PHYC_RCV_IF_7r_SIZE BCM84834_PHYC_RCV_IF_7r_SIZE
typedef BCM84834_PHYC_RCV_IF_7r_t PHYC_RCV_IF_7r_t;
#define PHYC_RCV_IF_7r_CLR BCM84834_PHYC_RCV_IF_7r_CLR
#define PHYC_RCV_IF_7r_SET BCM84834_PHYC_RCV_IF_7r_SET
#define PHYC_RCV_IF_7r_GET BCM84834_PHYC_RCV_IF_7r_GET
#define PHYC_RCV_IF_7r_RCV_IF_7f_GET BCM84834_PHYC_RCV_IF_7r_RCV_IF_7f_GET
#define PHYC_RCV_IF_7r_RCV_IF_7f_SET BCM84834_PHYC_RCV_IF_7r_RCV_IF_7f_SET
#define READ_PHYC_RCV_IF_7r BCM84834_READ_PHYC_RCV_IF_7r
#define WRITE_PHYC_RCV_IF_7r BCM84834_WRITE_PHYC_RCV_IF_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_IF_7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_16K_RST_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa808
 * DEVAD:    1
 * DESC:     Receive Training Pattern Generator ResetCounter Reg
 * SIZE:     32
 * FIELDS:
 *     RCV_16K_RST_CNT  
 *     RCV_CNT_RST_EN   
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_16K_RST_CNTr (0x0001a808 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_16K_RST_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_16K_RST_CNT.
 *
 */
typedef union BCM84834_PHYC_RCV_16K_RST_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_rcv_16k_rst_cnt[1];
	uint32_t _phyc_rcv_16k_rst_cnt;
} BCM84834_PHYC_RCV_16K_RST_CNTr_t;

#define BCM84834_PHYC_RCV_16K_RST_CNTr_CLR(r) (r).phyc_rcv_16k_rst_cnt[0] = 0
#define BCM84834_PHYC_RCV_16K_RST_CNTr_SET(r,d) (r).phyc_rcv_16k_rst_cnt[0] = d
#define BCM84834_PHYC_RCV_16K_RST_CNTr_GET(r) (r).phyc_rcv_16k_rst_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_GET(r) ((((r).phyc_rcv_16k_rst_cnt[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_SET(r,f) (r).phyc_rcv_16k_rst_cnt[0]=(((r).phyc_rcv_16k_rst_cnt[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_GET(r) (((r).phyc_rcv_16k_rst_cnt[0]) & 0x1fff)
#define BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_SET(r,f) (r).phyc_rcv_16k_rst_cnt[0]=(((r).phyc_rcv_16k_rst_cnt[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_RCV_16K_RST_CNT.
 *
 */
#define BCM84834_READ_PHYC_RCV_16K_RST_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_16K_RST_CNTr,(_r._phyc_rcv_16k_rst_cnt))
#define BCM84834_WRITE_PHYC_RCV_16K_RST_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_16K_RST_CNTr,(_r._phyc_rcv_16k_rst_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_16K_RST_CNTr BCM84834_PHYC_RCV_16K_RST_CNTr
#define PHYC_RCV_16K_RST_CNTr_SIZE BCM84834_PHYC_RCV_16K_RST_CNTr_SIZE
typedef BCM84834_PHYC_RCV_16K_RST_CNTr_t PHYC_RCV_16K_RST_CNTr_t;
#define PHYC_RCV_16K_RST_CNTr_CLR BCM84834_PHYC_RCV_16K_RST_CNTr_CLR
#define PHYC_RCV_16K_RST_CNTr_SET BCM84834_PHYC_RCV_16K_RST_CNTr_SET
#define PHYC_RCV_16K_RST_CNTr_GET BCM84834_PHYC_RCV_16K_RST_CNTr_GET
#define PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_GET BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_GET
#define PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_SET BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_CNT_RST_ENf_SET
#define PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_GET BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_GET
#define PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_SET BCM84834_PHYC_RCV_16K_RST_CNTr_RCV_16K_RST_CNTf_SET
#define READ_PHYC_RCV_16K_RST_CNTr BCM84834_READ_PHYC_RCV_16K_RST_CNTr
#define WRITE_PHYC_RCV_16K_RST_CNTr BCM84834_WRITE_PHYC_RCV_16K_RST_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_16K_RST_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SCRATCH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa809
 * DEVAD:    1
 * DESC:     Scratch register
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_PHYC_SCRATCHr (0x0001a809 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SCRATCHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SCRATCH.
 *
 */
typedef union BCM84834_PHYC_SCRATCHr_s {
	uint32_t v[1];
	uint32_t phyc_scratch[1];
	uint32_t _phyc_scratch;
} BCM84834_PHYC_SCRATCHr_t;

#define BCM84834_PHYC_SCRATCHr_CLR(r) (r).phyc_scratch[0] = 0
#define BCM84834_PHYC_SCRATCHr_SET(r,d) (r).phyc_scratch[0] = d
#define BCM84834_PHYC_SCRATCHr_GET(r) (r).phyc_scratch[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SCRATCHr_SCRATCHf_GET(r) (((r).phyc_scratch[0]) & 0xffff)
#define BCM84834_PHYC_SCRATCHr_SCRATCHf_SET(r,f) (r).phyc_scratch[0]=(((r).phyc_scratch[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SCRATCH.
 *
 */
#define BCM84834_READ_PHYC_SCRATCHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SCRATCHr,(_r._phyc_scratch))
#define BCM84834_WRITE_PHYC_SCRATCHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SCRATCHr,(_r._phyc_scratch))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SCRATCHr BCM84834_PHYC_SCRATCHr
#define PHYC_SCRATCHr_SIZE BCM84834_PHYC_SCRATCHr_SIZE
typedef BCM84834_PHYC_SCRATCHr_t PHYC_SCRATCHr_t;
#define PHYC_SCRATCHr_CLR BCM84834_PHYC_SCRATCHr_CLR
#define PHYC_SCRATCHr_SET BCM84834_PHYC_SCRATCHr_SET
#define PHYC_SCRATCHr_GET BCM84834_PHYC_SCRATCHr_GET
#define PHYC_SCRATCHr_SCRATCHf_GET BCM84834_PHYC_SCRATCHr_SCRATCHf_GET
#define PHYC_SCRATCHr_SCRATCHf_SET BCM84834_PHYC_SCRATCHr_SCRATCHf_SET
#define READ_PHYC_SCRATCHr BCM84834_READ_PHYC_SCRATCHr
#define WRITE_PHYC_SCRATCHr BCM84834_WRITE_PHYC_SCRATCHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SCRATCHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_TRAIN_FRM_ST_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80a
 * DEVAD:    1
 * DESC:     Receive train frame start control
 * SIZE:     32
 * FIELDS:
 *     RCV_TRAIN_FRM_ST_CNT 
 *     RCV_TRAIN_FRM_ST_EN 
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr (0x0001a80a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_TRAIN_FRM_ST_CTL.
 *
 */
typedef union BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_rcv_train_frm_st_ctl[1];
	uint32_t _phyc_rcv_train_frm_st_ctl;
} BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_t;

#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_CLR(r) (r).phyc_rcv_train_frm_st_ctl[0] = 0
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_SET(r,d) (r).phyc_rcv_train_frm_st_ctl[0] = d
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_GET(r) (r).phyc_rcv_train_frm_st_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_GET(r) ((((r).phyc_rcv_train_frm_st_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_SET(r,f) (r).phyc_rcv_train_frm_st_ctl[0]=(((r).phyc_rcv_train_frm_st_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_GET(r) (((r).phyc_rcv_train_frm_st_ctl[0]) & 0x1fff)
#define BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_SET(r,f) (r).phyc_rcv_train_frm_st_ctl[0]=(((r).phyc_rcv_train_frm_st_ctl[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_RCV_TRAIN_FRM_ST_CTL.
 *
 */
#define BCM84834_READ_PHYC_RCV_TRAIN_FRM_ST_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr,(_r._phyc_rcv_train_frm_st_ctl))
#define BCM84834_WRITE_PHYC_RCV_TRAIN_FRM_ST_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr,(_r._phyc_rcv_train_frm_st_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_TRAIN_FRM_ST_CTLr BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_SIZE BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_SIZE
typedef BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_t PHYC_RCV_TRAIN_FRM_ST_CTLr_t;
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_CLR BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_CLR
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_SET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_SET
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_GET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_GET
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_GET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_GET
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_SET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_ENf_SET
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_GET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_GET
#define PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_SET BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr_RCV_TRAIN_FRM_ST_CNTf_SET
#define READ_PHYC_RCV_TRAIN_FRM_ST_CTLr BCM84834_READ_PHYC_RCV_TRAIN_FRM_ST_CTLr
#define WRITE_PHYC_RCV_TRAIN_FRM_ST_CTLr BCM84834_WRITE_PHYC_RCV_TRAIN_FRM_ST_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_TRAIN_FRM_ST_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_CNT_16K_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80b
 * DEVAD:    1
 * DESC:     Receive 16K counter Control Reg
 * SIZE:     32
 * FIELDS:
 *     RCV_CNT_16K_EN   
 *     RCV_TRAIN_PAT_GEN_EN 
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_CNT_16K_CTLr (0x0001a80b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_CNT_16K_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_CNT_16K_CTL.
 *
 */
typedef union BCM84834_PHYC_RCV_CNT_16K_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_rcv_cnt_16k_ctl[1];
	uint32_t _phyc_rcv_cnt_16k_ctl;
} BCM84834_PHYC_RCV_CNT_16K_CTLr_t;

#define BCM84834_PHYC_RCV_CNT_16K_CTLr_CLR(r) (r).phyc_rcv_cnt_16k_ctl[0] = 0
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_SET(r,d) (r).phyc_rcv_cnt_16k_ctl[0] = d
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_GET(r) (r).phyc_rcv_cnt_16k_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_GET(r) ((((r).phyc_rcv_cnt_16k_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_SET(r,f) (r).phyc_rcv_cnt_16k_ctl[0]=(((r).phyc_rcv_cnt_16k_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_GET(r) (((r).phyc_rcv_cnt_16k_ctl[0]) & 0x1)
#define BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_SET(r,f) (r).phyc_rcv_cnt_16k_ctl[0]=(((r).phyc_rcv_cnt_16k_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_RCV_CNT_16K_CTL.
 *
 */
#define BCM84834_READ_PHYC_RCV_CNT_16K_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_CNT_16K_CTLr,(_r._phyc_rcv_cnt_16k_ctl))
#define BCM84834_WRITE_PHYC_RCV_CNT_16K_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_CNT_16K_CTLr,(_r._phyc_rcv_cnt_16k_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_CNT_16K_CTLr BCM84834_PHYC_RCV_CNT_16K_CTLr
#define PHYC_RCV_CNT_16K_CTLr_SIZE BCM84834_PHYC_RCV_CNT_16K_CTLr_SIZE
typedef BCM84834_PHYC_RCV_CNT_16K_CTLr_t PHYC_RCV_CNT_16K_CTLr_t;
#define PHYC_RCV_CNT_16K_CTLr_CLR BCM84834_PHYC_RCV_CNT_16K_CTLr_CLR
#define PHYC_RCV_CNT_16K_CTLr_SET BCM84834_PHYC_RCV_CNT_16K_CTLr_SET
#define PHYC_RCV_CNT_16K_CTLr_GET BCM84834_PHYC_RCV_CNT_16K_CTLr_GET
#define PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_GET BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_GET
#define PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_SET BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_TRAIN_PAT_GEN_ENf_SET
#define PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_GET BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_GET
#define PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_SET BCM84834_PHYC_RCV_CNT_16K_CTLr_RCV_CNT_16K_ENf_SET
#define READ_PHYC_RCV_CNT_16K_CTLr BCM84834_READ_PHYC_RCV_CNT_16K_CTLr
#define WRITE_PHYC_RCV_CNT_16K_CTLr BCM84834_WRITE_PHYC_RCV_CNT_16K_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_CNT_16K_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RCV_DET
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80c
 * DEVAD:    1
 * DESC:     Receive Detect Reg
 * SIZE:     32
 * FIELDS:
 *     RCV_DET1         
 *     RCV_DET2         
 *     RCV_DET3         
 *     RCV_DET4         
 *
 ******************************************************************************/
#define BCM84834_PHYC_RCV_DETr (0x0001a80c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RCV_DETr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RCV_DET.
 *
 */
typedef union BCM84834_PHYC_RCV_DETr_s {
	uint32_t v[1];
	uint32_t phyc_rcv_det[1];
	uint32_t _phyc_rcv_det;
} BCM84834_PHYC_RCV_DETr_t;

#define BCM84834_PHYC_RCV_DETr_CLR(r) (r).phyc_rcv_det[0] = 0
#define BCM84834_PHYC_RCV_DETr_SET(r,d) (r).phyc_rcv_det[0] = d
#define BCM84834_PHYC_RCV_DETr_GET(r) (r).phyc_rcv_det[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RCV_DETr_RCV_DET4f_GET(r) ((((r).phyc_rcv_det[0]) >> 3) & 0x1)
#define BCM84834_PHYC_RCV_DETr_RCV_DET4f_SET(r,f) (r).phyc_rcv_det[0]=(((r).phyc_rcv_det[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_RCV_DETr_RCV_DET3f_GET(r) ((((r).phyc_rcv_det[0]) >> 2) & 0x1)
#define BCM84834_PHYC_RCV_DETr_RCV_DET3f_SET(r,f) (r).phyc_rcv_det[0]=(((r).phyc_rcv_det[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_RCV_DETr_RCV_DET2f_GET(r) ((((r).phyc_rcv_det[0]) >> 1) & 0x1)
#define BCM84834_PHYC_RCV_DETr_RCV_DET2f_SET(r,f) (r).phyc_rcv_det[0]=(((r).phyc_rcv_det[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_RCV_DETr_RCV_DET1f_GET(r) (((r).phyc_rcv_det[0]) & 0x1)
#define BCM84834_PHYC_RCV_DETr_RCV_DET1f_SET(r,f) (r).phyc_rcv_det[0]=(((r).phyc_rcv_det[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_RCV_DET.
 *
 */
#define BCM84834_READ_PHYC_RCV_DETr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RCV_DETr,(_r._phyc_rcv_det))
#define BCM84834_WRITE_PHYC_RCV_DETr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RCV_DETr,(_r._phyc_rcv_det))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RCV_DETr BCM84834_PHYC_RCV_DETr
#define PHYC_RCV_DETr_SIZE BCM84834_PHYC_RCV_DETr_SIZE
typedef BCM84834_PHYC_RCV_DETr_t PHYC_RCV_DETr_t;
#define PHYC_RCV_DETr_CLR BCM84834_PHYC_RCV_DETr_CLR
#define PHYC_RCV_DETr_SET BCM84834_PHYC_RCV_DETr_SET
#define PHYC_RCV_DETr_GET BCM84834_PHYC_RCV_DETr_GET
#define PHYC_RCV_DETr_RCV_DET4f_GET BCM84834_PHYC_RCV_DETr_RCV_DET4f_GET
#define PHYC_RCV_DETr_RCV_DET4f_SET BCM84834_PHYC_RCV_DETr_RCV_DET4f_SET
#define PHYC_RCV_DETr_RCV_DET3f_GET BCM84834_PHYC_RCV_DETr_RCV_DET3f_GET
#define PHYC_RCV_DETr_RCV_DET3f_SET BCM84834_PHYC_RCV_DETr_RCV_DET3f_SET
#define PHYC_RCV_DETr_RCV_DET2f_GET BCM84834_PHYC_RCV_DETr_RCV_DET2f_GET
#define PHYC_RCV_DETr_RCV_DET2f_SET BCM84834_PHYC_RCV_DETr_RCV_DET2f_SET
#define PHYC_RCV_DETr_RCV_DET1f_GET BCM84834_PHYC_RCV_DETr_RCV_DET1f_GET
#define PHYC_RCV_DETr_RCV_DET1f_SET BCM84834_PHYC_RCV_DETr_RCV_DET1f_SET
#define READ_PHYC_RCV_DETr BCM84834_READ_PHYC_RCV_DETr
#define WRITE_PHYC_RCV_DETr BCM84834_WRITE_PHYC_RCV_DETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RCV_DETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LP_INFO
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80d
 * DEVAD:    1
 * DESC:     Link Partner Information Reg
 * SIZE:     32
 * FIELDS:
 *     TX_PWRBK_SET     
 *     LP_TX_PWRBK_SET  
 *     MDI_XCON         
 *     PAIR_A_POL       
 *     PAIR_B_POL       
 *     PAIR_C_POL       
 *     PAIR_D_POL       
 *     LP_INFO_VAL      
 *
 ******************************************************************************/
#define BCM84834_PHYC_LP_INFOr (0x0001a80d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LP_INFOr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LP_INFO.
 *
 */
typedef union BCM84834_PHYC_LP_INFOr_s {
	uint32_t v[1];
	uint32_t phyc_lp_info[1];
	uint32_t _phyc_lp_info;
} BCM84834_PHYC_LP_INFOr_t;

#define BCM84834_PHYC_LP_INFOr_CLR(r) (r).phyc_lp_info[0] = 0
#define BCM84834_PHYC_LP_INFOr_SET(r,d) (r).phyc_lp_info[0] = d
#define BCM84834_PHYC_LP_INFOr_GET(r) (r).phyc_lp_info[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LP_INFOr_LP_INFO_VALf_GET(r) ((((r).phyc_lp_info[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LP_INFOr_LP_INFO_VALf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LP_INFOr_PAIR_D_POLf_GET(r) ((((r).phyc_lp_info[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LP_INFOr_PAIR_D_POLf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LP_INFOr_PAIR_C_POLf_GET(r) ((((r).phyc_lp_info[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LP_INFOr_PAIR_C_POLf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LP_INFOr_PAIR_B_POLf_GET(r) ((((r).phyc_lp_info[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LP_INFOr_PAIR_B_POLf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LP_INFOr_PAIR_A_POLf_GET(r) ((((r).phyc_lp_info[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LP_INFOr_PAIR_A_POLf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LP_INFOr_MDI_XCONf_GET(r) ((((r).phyc_lp_info[0]) >> 6) & 0x3)
#define BCM84834_PHYC_LP_INFOr_MDI_XCONf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_PHYC_LP_INFOr_LP_TX_PWRBK_SETf_GET(r) ((((r).phyc_lp_info[0]) >> 3) & 0x7)
#define BCM84834_PHYC_LP_INFOr_LP_TX_PWRBK_SETf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCM84834_PHYC_LP_INFOr_TX_PWRBK_SETf_GET(r) (((r).phyc_lp_info[0]) & 0x7)
#define BCM84834_PHYC_LP_INFOr_TX_PWRBK_SETf_SET(r,f) (r).phyc_lp_info[0]=(((r).phyc_lp_info[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PHYC_LP_INFO.
 *
 */
#define BCM84834_READ_PHYC_LP_INFOr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LP_INFOr,(_r._phyc_lp_info))
#define BCM84834_WRITE_PHYC_LP_INFOr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LP_INFOr,(_r._phyc_lp_info))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LP_INFOr BCM84834_PHYC_LP_INFOr
#define PHYC_LP_INFOr_SIZE BCM84834_PHYC_LP_INFOr_SIZE
typedef BCM84834_PHYC_LP_INFOr_t PHYC_LP_INFOr_t;
#define PHYC_LP_INFOr_CLR BCM84834_PHYC_LP_INFOr_CLR
#define PHYC_LP_INFOr_SET BCM84834_PHYC_LP_INFOr_SET
#define PHYC_LP_INFOr_GET BCM84834_PHYC_LP_INFOr_GET
#define PHYC_LP_INFOr_LP_INFO_VALf_GET BCM84834_PHYC_LP_INFOr_LP_INFO_VALf_GET
#define PHYC_LP_INFOr_LP_INFO_VALf_SET BCM84834_PHYC_LP_INFOr_LP_INFO_VALf_SET
#define PHYC_LP_INFOr_PAIR_D_POLf_GET BCM84834_PHYC_LP_INFOr_PAIR_D_POLf_GET
#define PHYC_LP_INFOr_PAIR_D_POLf_SET BCM84834_PHYC_LP_INFOr_PAIR_D_POLf_SET
#define PHYC_LP_INFOr_PAIR_C_POLf_GET BCM84834_PHYC_LP_INFOr_PAIR_C_POLf_GET
#define PHYC_LP_INFOr_PAIR_C_POLf_SET BCM84834_PHYC_LP_INFOr_PAIR_C_POLf_SET
#define PHYC_LP_INFOr_PAIR_B_POLf_GET BCM84834_PHYC_LP_INFOr_PAIR_B_POLf_GET
#define PHYC_LP_INFOr_PAIR_B_POLf_SET BCM84834_PHYC_LP_INFOr_PAIR_B_POLf_SET
#define PHYC_LP_INFOr_PAIR_A_POLf_GET BCM84834_PHYC_LP_INFOr_PAIR_A_POLf_GET
#define PHYC_LP_INFOr_PAIR_A_POLf_SET BCM84834_PHYC_LP_INFOr_PAIR_A_POLf_SET
#define PHYC_LP_INFOr_MDI_XCONf_GET BCM84834_PHYC_LP_INFOr_MDI_XCONf_GET
#define PHYC_LP_INFOr_MDI_XCONf_SET BCM84834_PHYC_LP_INFOr_MDI_XCONf_SET
#define PHYC_LP_INFOr_LP_TX_PWRBK_SETf_GET BCM84834_PHYC_LP_INFOr_LP_TX_PWRBK_SETf_GET
#define PHYC_LP_INFOr_LP_TX_PWRBK_SETf_SET BCM84834_PHYC_LP_INFOr_LP_TX_PWRBK_SETf_SET
#define PHYC_LP_INFOr_TX_PWRBK_SETf_GET BCM84834_PHYC_LP_INFOr_TX_PWRBK_SETf_GET
#define PHYC_LP_INFOr_TX_PWRBK_SETf_SET BCM84834_PHYC_LP_INFOr_TX_PWRBK_SETf_SET
#define READ_PHYC_LP_INFOr BCM84834_READ_PHYC_LP_INFOr
#define WRITE_PHYC_LP_INFOr BCM84834_WRITE_PHYC_LP_INFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LP_INFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SKW_DLY_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80e
 * DEVAD:    1
 * DESC:     Skew Delay 0 Reg
 * SIZE:     32
 * FIELDS:
 *     SKW_DLY_B        
 *
 ******************************************************************************/
#define BCM84834_PHYC_SKW_DLY_0r (0x0001a80e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SKW_DLY_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SKW_DLY_0.
 *
 */
typedef union BCM84834_PHYC_SKW_DLY_0r_s {
	uint32_t v[1];
	uint32_t phyc_skw_dly_0[1];
	uint32_t _phyc_skw_dly_0;
} BCM84834_PHYC_SKW_DLY_0r_t;

#define BCM84834_PHYC_SKW_DLY_0r_CLR(r) (r).phyc_skw_dly_0[0] = 0
#define BCM84834_PHYC_SKW_DLY_0r_SET(r,d) (r).phyc_skw_dly_0[0] = d
#define BCM84834_PHYC_SKW_DLY_0r_GET(r) (r).phyc_skw_dly_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SKW_DLY_0r_SKW_DLY_Bf_GET(r) ((((r).phyc_skw_dly_0[0]) >> 8) & 0x7f)
#define BCM84834_PHYC_SKW_DLY_0r_SKW_DLY_Bf_SET(r,f) (r).phyc_skw_dly_0[0]=(((r).phyc_skw_dly_0[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))

/*
 * These macros can be used to access PHYC_SKW_DLY_0.
 *
 */
#define BCM84834_READ_PHYC_SKW_DLY_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SKW_DLY_0r,(_r._phyc_skw_dly_0))
#define BCM84834_WRITE_PHYC_SKW_DLY_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SKW_DLY_0r,(_r._phyc_skw_dly_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SKW_DLY_0r BCM84834_PHYC_SKW_DLY_0r
#define PHYC_SKW_DLY_0r_SIZE BCM84834_PHYC_SKW_DLY_0r_SIZE
typedef BCM84834_PHYC_SKW_DLY_0r_t PHYC_SKW_DLY_0r_t;
#define PHYC_SKW_DLY_0r_CLR BCM84834_PHYC_SKW_DLY_0r_CLR
#define PHYC_SKW_DLY_0r_SET BCM84834_PHYC_SKW_DLY_0r_SET
#define PHYC_SKW_DLY_0r_GET BCM84834_PHYC_SKW_DLY_0r_GET
#define PHYC_SKW_DLY_0r_SKW_DLY_Bf_GET BCM84834_PHYC_SKW_DLY_0r_SKW_DLY_Bf_GET
#define PHYC_SKW_DLY_0r_SKW_DLY_Bf_SET BCM84834_PHYC_SKW_DLY_0r_SKW_DLY_Bf_SET
#define READ_PHYC_SKW_DLY_0r BCM84834_READ_PHYC_SKW_DLY_0r
#define WRITE_PHYC_SKW_DLY_0r BCM84834_WRITE_PHYC_SKW_DLY_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SKW_DLY_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SKW_DLY_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa80f
 * DEVAD:    1
 * DESC:     Skew Delay 1Reg
 * SIZE:     32
 * FIELDS:
 *     SKW_DLY_C        
 *     SKW_DLY_D        
 *
 ******************************************************************************/
#define BCM84834_PHYC_SKW_DLY_1r (0x0001a80f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SKW_DLY_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SKW_DLY_1.
 *
 */
typedef union BCM84834_PHYC_SKW_DLY_1r_s {
	uint32_t v[1];
	uint32_t phyc_skw_dly_1[1];
	uint32_t _phyc_skw_dly_1;
} BCM84834_PHYC_SKW_DLY_1r_t;

#define BCM84834_PHYC_SKW_DLY_1r_CLR(r) (r).phyc_skw_dly_1[0] = 0
#define BCM84834_PHYC_SKW_DLY_1r_SET(r,d) (r).phyc_skw_dly_1[0] = d
#define BCM84834_PHYC_SKW_DLY_1r_GET(r) (r).phyc_skw_dly_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Df_GET(r) ((((r).phyc_skw_dly_1[0]) >> 8) & 0x7f)
#define BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Df_SET(r,f) (r).phyc_skw_dly_1[0]=(((r).phyc_skw_dly_1[0] & ~((uint32_t)0x7f << 8)) | ((((uint32_t)f) & 0x7f) << 8))
#define BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Cf_GET(r) (((r).phyc_skw_dly_1[0]) & 0x7f)
#define BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Cf_SET(r,f) (r).phyc_skw_dly_1[0]=(((r).phyc_skw_dly_1[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_SKW_DLY_1.
 *
 */
#define BCM84834_READ_PHYC_SKW_DLY_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SKW_DLY_1r,(_r._phyc_skw_dly_1))
#define BCM84834_WRITE_PHYC_SKW_DLY_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SKW_DLY_1r,(_r._phyc_skw_dly_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SKW_DLY_1r BCM84834_PHYC_SKW_DLY_1r
#define PHYC_SKW_DLY_1r_SIZE BCM84834_PHYC_SKW_DLY_1r_SIZE
typedef BCM84834_PHYC_SKW_DLY_1r_t PHYC_SKW_DLY_1r_t;
#define PHYC_SKW_DLY_1r_CLR BCM84834_PHYC_SKW_DLY_1r_CLR
#define PHYC_SKW_DLY_1r_SET BCM84834_PHYC_SKW_DLY_1r_SET
#define PHYC_SKW_DLY_1r_GET BCM84834_PHYC_SKW_DLY_1r_GET
#define PHYC_SKW_DLY_1r_SKW_DLY_Df_GET BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Df_GET
#define PHYC_SKW_DLY_1r_SKW_DLY_Df_SET BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Df_SET
#define PHYC_SKW_DLY_1r_SKW_DLY_Cf_GET BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Cf_GET
#define PHYC_SKW_DLY_1r_SKW_DLY_Cf_SET BCM84834_PHYC_SKW_DLY_1r_SKW_DLY_Cf_SET
#define READ_PHYC_SKW_DLY_1r BCM84834_READ_PHYC_SKW_DLY_1r
#define WRITE_PHYC_SKW_DLY_1r BCM84834_WRITE_PHYC_SKW_DLY_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SKW_DLY_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_STARTUP_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa811
 * DEVAD:    1
 * DESC:     Startup control Reg
 * SIZE:     32
 * FIELDS:
 *     RDB_BYPASS_THP   
 *     PCS_BYPASS_THP_EN 
 *     RDB_BYPASS_DSQ   
 *     PCS_BYPASS_DSQ_EN 
 *     PWR_SWITCH_EN    
 *     PHYC_CONFIG_RX   
 *     PHYC_CONFIG_TX   
 *     PCS_TX_AUX       
 *     TXMODE           
 *     PHYC_PCS_STATE   
 *     PMD_RCV_LINK_STATUS 
 *     REMOTE_RCV_STATUS 
 *     LOCAL_RCV_STATUS 
 *     MODE_10G         
 *     TX_CNT_16K_DELAY_EN 
 *
 ******************************************************************************/
#define BCM84834_PHYC_STARTUP_CTLr (0x0001a811 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_STARTUP_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_STARTUP_CTL.
 *
 */
typedef union BCM84834_PHYC_STARTUP_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_startup_ctl[1];
	uint32_t _phyc_startup_ctl;
} BCM84834_PHYC_STARTUP_CTLr_t;

#define BCM84834_PHYC_STARTUP_CTLr_CLR(r) (r).phyc_startup_ctl[0] = 0
#define BCM84834_PHYC_STARTUP_CTLr_SET(r,d) (r).phyc_startup_ctl[0] = d
#define BCM84834_PHYC_STARTUP_CTLr_GET(r) (r).phyc_startup_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_GET(r) ((((r).phyc_startup_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_STARTUP_CTLr_MODE_10Gf_GET(r) ((((r).phyc_startup_ctl[0]) >> 14) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_MODE_10Gf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_GET(r) ((((r).phyc_startup_ctl[0]) >> 13) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_GET(r) ((((r).phyc_startup_ctl[0]) >> 12) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_GET(r) ((((r).phyc_startup_ctl[0]) >> 11) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_GET(r) ((((r).phyc_startup_ctl[0]) >> 10) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_STARTUP_CTLr_TXMODEf_GET(r) ((((r).phyc_startup_ctl[0]) >> 8) & 0x3)
#define BCM84834_PHYC_STARTUP_CTLr_TXMODEf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_PHYC_STARTUP_CTLr_PCS_TX_AUXf_GET(r) ((((r).phyc_startup_ctl[0]) >> 7) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PCS_TX_AUXf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_GET(r) ((((r).phyc_startup_ctl[0]) >> 6) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_GET(r) ((((r).phyc_startup_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_GET(r) ((((r).phyc_startup_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_GET(r) ((((r).phyc_startup_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_GET(r) ((((r).phyc_startup_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_GET(r) ((((r).phyc_startup_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_GET(r) (((r).phyc_startup_ctl[0]) & 0x1)
#define BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_SET(r,f) (r).phyc_startup_ctl[0]=(((r).phyc_startup_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_STARTUP_CTL.
 *
 */
#define BCM84834_READ_PHYC_STARTUP_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_STARTUP_CTLr,(_r._phyc_startup_ctl))
#define BCM84834_WRITE_PHYC_STARTUP_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_STARTUP_CTLr,(_r._phyc_startup_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_STARTUP_CTLr BCM84834_PHYC_STARTUP_CTLr
#define PHYC_STARTUP_CTLr_SIZE BCM84834_PHYC_STARTUP_CTLr_SIZE
typedef BCM84834_PHYC_STARTUP_CTLr_t PHYC_STARTUP_CTLr_t;
#define PHYC_STARTUP_CTLr_CLR BCM84834_PHYC_STARTUP_CTLr_CLR
#define PHYC_STARTUP_CTLr_SET BCM84834_PHYC_STARTUP_CTLr_SET
#define PHYC_STARTUP_CTLr_GET BCM84834_PHYC_STARTUP_CTLr_GET
#define PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_GET BCM84834_PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_GET
#define PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_SET BCM84834_PHYC_STARTUP_CTLr_TX_CNT_16K_DELAY_ENf_SET
#define PHYC_STARTUP_CTLr_MODE_10Gf_GET BCM84834_PHYC_STARTUP_CTLr_MODE_10Gf_GET
#define PHYC_STARTUP_CTLr_MODE_10Gf_SET BCM84834_PHYC_STARTUP_CTLr_MODE_10Gf_SET
#define PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_GET BCM84834_PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_GET
#define PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_SET BCM84834_PHYC_STARTUP_CTLr_LOCAL_RCV_STATUSf_SET
#define PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_GET BCM84834_PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_GET
#define PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_SET BCM84834_PHYC_STARTUP_CTLr_REMOTE_RCV_STATUSf_SET
#define PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_GET BCM84834_PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_GET
#define PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_SET BCM84834_PHYC_STARTUP_CTLr_PMD_RCV_LINK_STATUSf_SET
#define PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_GET BCM84834_PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_GET
#define PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_SET BCM84834_PHYC_STARTUP_CTLr_PHYC_PCS_STATEf_SET
#define PHYC_STARTUP_CTLr_TXMODEf_GET BCM84834_PHYC_STARTUP_CTLr_TXMODEf_GET
#define PHYC_STARTUP_CTLr_TXMODEf_SET BCM84834_PHYC_STARTUP_CTLr_TXMODEf_SET
#define PHYC_STARTUP_CTLr_PCS_TX_AUXf_GET BCM84834_PHYC_STARTUP_CTLr_PCS_TX_AUXf_GET
#define PHYC_STARTUP_CTLr_PCS_TX_AUXf_SET BCM84834_PHYC_STARTUP_CTLr_PCS_TX_AUXf_SET
#define PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_GET BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_GET
#define PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_SET BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_TXf_SET
#define PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_GET BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_GET
#define PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_SET BCM84834_PHYC_STARTUP_CTLr_PHYC_CONFIG_RXf_SET
#define PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_GET BCM84834_PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_GET
#define PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_SET BCM84834_PHYC_STARTUP_CTLr_PWR_SWITCH_ENf_SET
#define PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_GET BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_GET
#define PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_SET BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_DSQ_ENf_SET
#define PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_GET BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_GET
#define PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_SET BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_DSQf_SET
#define PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_GET BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_GET
#define PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_SET BCM84834_PHYC_STARTUP_CTLr_PCS_BYPASS_THP_ENf_SET
#define PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_GET BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_GET
#define PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_SET BCM84834_PHYC_STARTUP_CTLr_RDB_BYPASS_THPf_SET
#define READ_PHYC_STARTUP_CTLr BCM84834_READ_PHYC_STARTUP_CTLr
#define WRITE_PHYC_STARTUP_CTLr BCM84834_WRITE_PHYC_STARTUP_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_STARTUP_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RST_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa812
 * DEVAD:    1
 * DESC:     Reset Status Reg
 * SIZE:     32
 * FIELDS:
 *     RST_STS          
 *     PCS_RCV_LINK_STATUS_SEL 
 *     PCS_RCV_LINK_STATUS_FW 
 *
 ******************************************************************************/
#define BCM84834_PHYC_RST_STSr (0x0001a812 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RST_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RST_STS.
 *
 */
typedef union BCM84834_PHYC_RST_STSr_s {
	uint32_t v[1];
	uint32_t phyc_rst_sts[1];
	uint32_t _phyc_rst_sts;
} BCM84834_PHYC_RST_STSr_t;

#define BCM84834_PHYC_RST_STSr_CLR(r) (r).phyc_rst_sts[0] = 0
#define BCM84834_PHYC_RST_STSr_SET(r,d) (r).phyc_rst_sts[0] = d
#define BCM84834_PHYC_RST_STSr_GET(r) (r).phyc_rst_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_GET(r) ((((r).phyc_rst_sts[0]) >> 2) & 0x1)
#define BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_SET(r,f) (r).phyc_rst_sts[0]=(((r).phyc_rst_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_GET(r) ((((r).phyc_rst_sts[0]) >> 1) & 0x1)
#define BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_SET(r,f) (r).phyc_rst_sts[0]=(((r).phyc_rst_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_RST_STSr_RST_STSf_GET(r) (((r).phyc_rst_sts[0]) & 0x1)
#define BCM84834_PHYC_RST_STSr_RST_STSf_SET(r,f) (r).phyc_rst_sts[0]=(((r).phyc_rst_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_RST_STS.
 *
 */
#define BCM84834_READ_PHYC_RST_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RST_STSr,(_r._phyc_rst_sts))
#define BCM84834_WRITE_PHYC_RST_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RST_STSr,(_r._phyc_rst_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RST_STSr BCM84834_PHYC_RST_STSr
#define PHYC_RST_STSr_SIZE BCM84834_PHYC_RST_STSr_SIZE
typedef BCM84834_PHYC_RST_STSr_t PHYC_RST_STSr_t;
#define PHYC_RST_STSr_CLR BCM84834_PHYC_RST_STSr_CLR
#define PHYC_RST_STSr_SET BCM84834_PHYC_RST_STSr_SET
#define PHYC_RST_STSr_GET BCM84834_PHYC_RST_STSr_GET
#define PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_GET BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_GET
#define PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_SET BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_FWf_SET
#define PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_GET BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_GET
#define PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_SET BCM84834_PHYC_RST_STSr_PCS_RCV_LINK_STATUS_SELf_SET
#define PHYC_RST_STSr_RST_STSf_GET BCM84834_PHYC_RST_STSr_RST_STSf_GET
#define PHYC_RST_STSr_RST_STSf_SET BCM84834_PHYC_RST_STSr_RST_STSf_SET
#define READ_PHYC_RST_STSr BCM84834_READ_PHYC_RST_STSr
#define WRITE_PHYC_RST_STSr BCM84834_WRITE_PHYC_RST_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RST_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TST_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa813
 * DEVAD:    1
 * DESC:     Phyc test control Reg
 * SIZE:     32
 * FIELDS:
 *     TX_CH_A_MAP_SEL  
 *     TX_CH_B_MAP_SEL  
 *     TX_CH_C_MAP_SEL  
 *     TX_CH_D_MAP_SEL  
 *     BYPASS_ERR       
 *     BYPASS_DESCR     
 *     BYPASS_SCR       
 *     PCS_TX_FIFO_DIS  
 *     PCS_RX_FIFO_DIS  
 *     BYPASS_LDPC      
 *     PCS_RX_FIFO_DELETE_MODE 
 *     PCS_STATUS_FORCE_ON 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TST_CTLr (0x0001a813 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TST_CTL.
 *
 */
typedef union BCM84834_PHYC_TST_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_tst_ctl[1];
	uint32_t _phyc_tst_ctl;
} BCM84834_PHYC_TST_CTLr_t;

#define BCM84834_PHYC_TST_CTLr_CLR(r) (r).phyc_tst_ctl[0] = 0
#define BCM84834_PHYC_TST_CTLr_SET(r,d) (r).phyc_tst_ctl[0] = d
#define BCM84834_PHYC_TST_CTLr_GET(r) (r).phyc_tst_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_GET(r) ((((r).phyc_tst_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_GET(r) ((((r).phyc_tst_ctl[0]) >> 14) & 0x1)
#define BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_TST_CTLr_BYPASS_LDPCf_GET(r) ((((r).phyc_tst_ctl[0]) >> 13) & 0x1)
#define BCM84834_PHYC_TST_CTLr_BYPASS_LDPCf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DISf_GET(r) ((((r).phyc_tst_ctl[0]) >> 12) & 0x1)
#define BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DISf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_TST_CTLr_PCS_TX_FIFO_DISf_GET(r) ((((r).phyc_tst_ctl[0]) >> 11) & 0x1)
#define BCM84834_PHYC_TST_CTLr_PCS_TX_FIFO_DISf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_TST_CTLr_BYPASS_SCRf_GET(r) ((((r).phyc_tst_ctl[0]) >> 10) & 0x1)
#define BCM84834_PHYC_TST_CTLr_BYPASS_SCRf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_TST_CTLr_BYPASS_DESCRf_GET(r) ((((r).phyc_tst_ctl[0]) >> 9) & 0x1)
#define BCM84834_PHYC_TST_CTLr_BYPASS_DESCRf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_TST_CTLr_BYPASS_ERRf_GET(r) ((((r).phyc_tst_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_TST_CTLr_BYPASS_ERRf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_TST_CTLr_TX_CH_D_MAP_SELf_GET(r) ((((r).phyc_tst_ctl[0]) >> 6) & 0x3)
#define BCM84834_PHYC_TST_CTLr_TX_CH_D_MAP_SELf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_PHYC_TST_CTLr_TX_CH_C_MAP_SELf_GET(r) ((((r).phyc_tst_ctl[0]) >> 4) & 0x3)
#define BCM84834_PHYC_TST_CTLr_TX_CH_C_MAP_SELf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_PHYC_TST_CTLr_TX_CH_B_MAP_SELf_GET(r) ((((r).phyc_tst_ctl[0]) >> 2) & 0x3)
#define BCM84834_PHYC_TST_CTLr_TX_CH_B_MAP_SELf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCM84834_PHYC_TST_CTLr_TX_CH_A_MAP_SELf_GET(r) (((r).phyc_tst_ctl[0]) & 0x3)
#define BCM84834_PHYC_TST_CTLr_TX_CH_A_MAP_SELf_SET(r,f) (r).phyc_tst_ctl[0]=(((r).phyc_tst_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PHYC_TST_CTL.
 *
 */
#define BCM84834_READ_PHYC_TST_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TST_CTLr,(_r._phyc_tst_ctl))
#define BCM84834_WRITE_PHYC_TST_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TST_CTLr,(_r._phyc_tst_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TST_CTLr BCM84834_PHYC_TST_CTLr
#define PHYC_TST_CTLr_SIZE BCM84834_PHYC_TST_CTLr_SIZE
typedef BCM84834_PHYC_TST_CTLr_t PHYC_TST_CTLr_t;
#define PHYC_TST_CTLr_CLR BCM84834_PHYC_TST_CTLr_CLR
#define PHYC_TST_CTLr_SET BCM84834_PHYC_TST_CTLr_SET
#define PHYC_TST_CTLr_GET BCM84834_PHYC_TST_CTLr_GET
#define PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_GET BCM84834_PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_GET
#define PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_SET BCM84834_PHYC_TST_CTLr_PCS_STATUS_FORCE_ONf_SET
#define PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_GET BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_GET
#define PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_SET BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DELETE_MODEf_SET
#define PHYC_TST_CTLr_BYPASS_LDPCf_GET BCM84834_PHYC_TST_CTLr_BYPASS_LDPCf_GET
#define PHYC_TST_CTLr_BYPASS_LDPCf_SET BCM84834_PHYC_TST_CTLr_BYPASS_LDPCf_SET
#define PHYC_TST_CTLr_PCS_RX_FIFO_DISf_GET BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DISf_GET
#define PHYC_TST_CTLr_PCS_RX_FIFO_DISf_SET BCM84834_PHYC_TST_CTLr_PCS_RX_FIFO_DISf_SET
#define PHYC_TST_CTLr_PCS_TX_FIFO_DISf_GET BCM84834_PHYC_TST_CTLr_PCS_TX_FIFO_DISf_GET
#define PHYC_TST_CTLr_PCS_TX_FIFO_DISf_SET BCM84834_PHYC_TST_CTLr_PCS_TX_FIFO_DISf_SET
#define PHYC_TST_CTLr_BYPASS_SCRf_GET BCM84834_PHYC_TST_CTLr_BYPASS_SCRf_GET
#define PHYC_TST_CTLr_BYPASS_SCRf_SET BCM84834_PHYC_TST_CTLr_BYPASS_SCRf_SET
#define PHYC_TST_CTLr_BYPASS_DESCRf_GET BCM84834_PHYC_TST_CTLr_BYPASS_DESCRf_GET
#define PHYC_TST_CTLr_BYPASS_DESCRf_SET BCM84834_PHYC_TST_CTLr_BYPASS_DESCRf_SET
#define PHYC_TST_CTLr_BYPASS_ERRf_GET BCM84834_PHYC_TST_CTLr_BYPASS_ERRf_GET
#define PHYC_TST_CTLr_BYPASS_ERRf_SET BCM84834_PHYC_TST_CTLr_BYPASS_ERRf_SET
#define PHYC_TST_CTLr_TX_CH_D_MAP_SELf_GET BCM84834_PHYC_TST_CTLr_TX_CH_D_MAP_SELf_GET
#define PHYC_TST_CTLr_TX_CH_D_MAP_SELf_SET BCM84834_PHYC_TST_CTLr_TX_CH_D_MAP_SELf_SET
#define PHYC_TST_CTLr_TX_CH_C_MAP_SELf_GET BCM84834_PHYC_TST_CTLr_TX_CH_C_MAP_SELf_GET
#define PHYC_TST_CTLr_TX_CH_C_MAP_SELf_SET BCM84834_PHYC_TST_CTLr_TX_CH_C_MAP_SELf_SET
#define PHYC_TST_CTLr_TX_CH_B_MAP_SELf_GET BCM84834_PHYC_TST_CTLr_TX_CH_B_MAP_SELf_GET
#define PHYC_TST_CTLr_TX_CH_B_MAP_SELf_SET BCM84834_PHYC_TST_CTLr_TX_CH_B_MAP_SELf_SET
#define PHYC_TST_CTLr_TX_CH_A_MAP_SELf_GET BCM84834_PHYC_TST_CTLr_TX_CH_A_MAP_SELf_GET
#define PHYC_TST_CTLr_TX_CH_A_MAP_SELf_SET BCM84834_PHYC_TST_CTLr_TX_CH_A_MAP_SELf_SET
#define READ_PHYC_TST_CTLr BCM84834_READ_PHYC_TST_CTLr
#define WRITE_PHYC_TST_CTLr BCM84834_WRITE_PHYC_TST_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TST_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_TRANS_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa814
 * DEVAD:    1
 * DESC:     RX IF Transition Count Reg
 * SIZE:     32
 * FIELDS:
 *     COUNT            
 *     ENABLE           
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_TRANS_CNTr (0x0001a814 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_TRANS_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_TRANS_CNT.
 *
 */
typedef union BCM84834_PHYC_RX_TRANS_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_rx_trans_cnt[1];
	uint32_t _phyc_rx_trans_cnt;
} BCM84834_PHYC_RX_TRANS_CNTr_t;

#define BCM84834_PHYC_RX_TRANS_CNTr_CLR(r) (r).phyc_rx_trans_cnt[0] = 0
#define BCM84834_PHYC_RX_TRANS_CNTr_SET(r,d) (r).phyc_rx_trans_cnt[0] = d
#define BCM84834_PHYC_RX_TRANS_CNTr_GET(r) (r).phyc_rx_trans_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_TRANS_CNTr_ENABLEf_GET(r) ((((r).phyc_rx_trans_cnt[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RX_TRANS_CNTr_ENABLEf_SET(r,f) (r).phyc_rx_trans_cnt[0]=(((r).phyc_rx_trans_cnt[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RX_TRANS_CNTr_COUNTf_GET(r) (((r).phyc_rx_trans_cnt[0]) & 0x3ff)
#define BCM84834_PHYC_RX_TRANS_CNTr_COUNTf_SET(r,f) (r).phyc_rx_trans_cnt[0]=(((r).phyc_rx_trans_cnt[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access PHYC_RX_TRANS_CNT.
 *
 */
#define BCM84834_READ_PHYC_RX_TRANS_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_TRANS_CNTr,(_r._phyc_rx_trans_cnt))
#define BCM84834_WRITE_PHYC_RX_TRANS_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_TRANS_CNTr,(_r._phyc_rx_trans_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_TRANS_CNTr BCM84834_PHYC_RX_TRANS_CNTr
#define PHYC_RX_TRANS_CNTr_SIZE BCM84834_PHYC_RX_TRANS_CNTr_SIZE
typedef BCM84834_PHYC_RX_TRANS_CNTr_t PHYC_RX_TRANS_CNTr_t;
#define PHYC_RX_TRANS_CNTr_CLR BCM84834_PHYC_RX_TRANS_CNTr_CLR
#define PHYC_RX_TRANS_CNTr_SET BCM84834_PHYC_RX_TRANS_CNTr_SET
#define PHYC_RX_TRANS_CNTr_GET BCM84834_PHYC_RX_TRANS_CNTr_GET
#define PHYC_RX_TRANS_CNTr_ENABLEf_GET BCM84834_PHYC_RX_TRANS_CNTr_ENABLEf_GET
#define PHYC_RX_TRANS_CNTr_ENABLEf_SET BCM84834_PHYC_RX_TRANS_CNTr_ENABLEf_SET
#define PHYC_RX_TRANS_CNTr_COUNTf_GET BCM84834_PHYC_RX_TRANS_CNTr_COUNTf_GET
#define PHYC_RX_TRANS_CNTr_COUNTf_SET BCM84834_PHYC_RX_TRANS_CNTr_COUNTf_SET
#define READ_PHYC_RX_TRANS_CNTr BCM84834_READ_PHYC_RX_TRANS_CNTr
#define WRITE_PHYC_RX_TRANS_CNTr BCM84834_WRITE_PHYC_RX_TRANS_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_TRANS_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TSTMODE_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa815
 * DEVAD:    1
 * DESC:     Test Mode Control Register
 * SIZE:     32
 * FIELDS:
 *     NEG_NUM          
 *     POS_NUM          
 *
 ******************************************************************************/
#define BCM84834_PHYC_TSTMODE_CTLr (0x0001a815 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TSTMODE_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TSTMODE_CTL.
 *
 */
typedef union BCM84834_PHYC_TSTMODE_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_tstmode_ctl[1];
	uint32_t _phyc_tstmode_ctl;
} BCM84834_PHYC_TSTMODE_CTLr_t;

#define BCM84834_PHYC_TSTMODE_CTLr_CLR(r) (r).phyc_tstmode_ctl[0] = 0
#define BCM84834_PHYC_TSTMODE_CTLr_SET(r,d) (r).phyc_tstmode_ctl[0] = d
#define BCM84834_PHYC_TSTMODE_CTLr_GET(r) (r).phyc_tstmode_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TSTMODE_CTLr_POS_NUMf_GET(r) ((((r).phyc_tstmode_ctl[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TSTMODE_CTLr_POS_NUMf_SET(r,f) (r).phyc_tstmode_ctl[0]=(((r).phyc_tstmode_ctl[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TSTMODE_CTLr_NEG_NUMf_GET(r) (((r).phyc_tstmode_ctl[0]) & 0x3f)
#define BCM84834_PHYC_TSTMODE_CTLr_NEG_NUMf_SET(r,f) (r).phyc_tstmode_ctl[0]=(((r).phyc_tstmode_ctl[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TSTMODE_CTL.
 *
 */
#define BCM84834_READ_PHYC_TSTMODE_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TSTMODE_CTLr,(_r._phyc_tstmode_ctl))
#define BCM84834_WRITE_PHYC_TSTMODE_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TSTMODE_CTLr,(_r._phyc_tstmode_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TSTMODE_CTLr BCM84834_PHYC_TSTMODE_CTLr
#define PHYC_TSTMODE_CTLr_SIZE BCM84834_PHYC_TSTMODE_CTLr_SIZE
typedef BCM84834_PHYC_TSTMODE_CTLr_t PHYC_TSTMODE_CTLr_t;
#define PHYC_TSTMODE_CTLr_CLR BCM84834_PHYC_TSTMODE_CTLr_CLR
#define PHYC_TSTMODE_CTLr_SET BCM84834_PHYC_TSTMODE_CTLr_SET
#define PHYC_TSTMODE_CTLr_GET BCM84834_PHYC_TSTMODE_CTLr_GET
#define PHYC_TSTMODE_CTLr_POS_NUMf_GET BCM84834_PHYC_TSTMODE_CTLr_POS_NUMf_GET
#define PHYC_TSTMODE_CTLr_POS_NUMf_SET BCM84834_PHYC_TSTMODE_CTLr_POS_NUMf_SET
#define PHYC_TSTMODE_CTLr_NEG_NUMf_GET BCM84834_PHYC_TSTMODE_CTLr_NEG_NUMf_GET
#define PHYC_TSTMODE_CTLr_NEG_NUMf_SET BCM84834_PHYC_TSTMODE_CTLr_NEG_NUMf_SET
#define READ_PHYC_TSTMODE_CTLr BCM84834_READ_PHYC_TSTMODE_CTLr
#define WRITE_PHYC_TSTMODE_CTLr BCM84834_WRITE_PHYC_TSTMODE_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TSTMODE_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa816
 * DEVAD:    1
 * DESC:     PCS Status Register Reg
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_FIFO_OVFL 
 *     PCS_RX_FIFO_UNFL 
 *     PCS_TX_FIFO_OVFL 
 *     PCS_TX_FIFO_UNFL 
 *     HBER             
 *     BLK_LOCK         
 *     EMI_MIT_ACTIVE   
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_STSr (0x0001a816 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_STS.
 *
 */
typedef union BCM84834_PHYC_PCS_STSr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_sts[1];
	uint32_t _phyc_pcs_sts;
} BCM84834_PHYC_PCS_STSr_t;

#define BCM84834_PHYC_PCS_STSr_CLR(r) (r).phyc_pcs_sts[0] = 0
#define BCM84834_PHYC_PCS_STSr_SET(r,d) (r).phyc_pcs_sts[0] = d
#define BCM84834_PHYC_PCS_STSr_GET(r) (r).phyc_pcs_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_STSr_EMI_MIT_ACTIVEf_GET(r) ((((r).phyc_pcs_sts[0]) >> 6) & 0x1)
#define BCM84834_PHYC_PCS_STSr_EMI_MIT_ACTIVEf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_PCS_STSr_BLK_LOCKf_GET(r) ((((r).phyc_pcs_sts[0]) >> 5) & 0x1)
#define BCM84834_PHYC_PCS_STSr_BLK_LOCKf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_PCS_STSr_HBERf_GET(r) ((((r).phyc_pcs_sts[0]) >> 4) & 0x1)
#define BCM84834_PHYC_PCS_STSr_HBERf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_GET(r) ((((r).phyc_pcs_sts[0]) >> 3) & 0x1)
#define BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_GET(r) ((((r).phyc_pcs_sts[0]) >> 2) & 0x1)
#define BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_GET(r) ((((r).phyc_pcs_sts[0]) >> 1) & 0x1)
#define BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_GET(r) (((r).phyc_pcs_sts[0]) & 0x1)
#define BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_SET(r,f) (r).phyc_pcs_sts[0]=(((r).phyc_pcs_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_PCS_STS.
 *
 */
#define BCM84834_READ_PHYC_PCS_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_STSr,(_r._phyc_pcs_sts))
#define BCM84834_WRITE_PHYC_PCS_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_STSr,(_r._phyc_pcs_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_STSr BCM84834_PHYC_PCS_STSr
#define PHYC_PCS_STSr_SIZE BCM84834_PHYC_PCS_STSr_SIZE
typedef BCM84834_PHYC_PCS_STSr_t PHYC_PCS_STSr_t;
#define PHYC_PCS_STSr_CLR BCM84834_PHYC_PCS_STSr_CLR
#define PHYC_PCS_STSr_SET BCM84834_PHYC_PCS_STSr_SET
#define PHYC_PCS_STSr_GET BCM84834_PHYC_PCS_STSr_GET
#define PHYC_PCS_STSr_EMI_MIT_ACTIVEf_GET BCM84834_PHYC_PCS_STSr_EMI_MIT_ACTIVEf_GET
#define PHYC_PCS_STSr_EMI_MIT_ACTIVEf_SET BCM84834_PHYC_PCS_STSr_EMI_MIT_ACTIVEf_SET
#define PHYC_PCS_STSr_BLK_LOCKf_GET BCM84834_PHYC_PCS_STSr_BLK_LOCKf_GET
#define PHYC_PCS_STSr_BLK_LOCKf_SET BCM84834_PHYC_PCS_STSr_BLK_LOCKf_SET
#define PHYC_PCS_STSr_HBERf_GET BCM84834_PHYC_PCS_STSr_HBERf_GET
#define PHYC_PCS_STSr_HBERf_SET BCM84834_PHYC_PCS_STSr_HBERf_SET
#define PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_GET BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_GET
#define PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_SET BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_UNFLf_SET
#define PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_GET BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_GET
#define PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_SET BCM84834_PHYC_PCS_STSr_PCS_TX_FIFO_OVFLf_SET
#define PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_GET BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_GET
#define PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_SET BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_UNFLf_SET
#define PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_GET BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_GET
#define PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_SET BCM84834_PHYC_PCS_STSr_PCS_RX_FIFO_OVFLf_SET
#define READ_PHYC_PCS_STSr BCM84834_READ_PHYC_PCS_STSr
#define WRITE_PHYC_PCS_STSr BCM84834_WRITE_PHYC_PCS_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa817
 * DEVAD:    1
 * DESC:     MDIO to ARM access port control
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_WR      
 *     MDIO2ARM_RD      
 *     MDIO2ARM_SIZE    
 *     MDIO2ARM_BURST   
 *     MDIO2ARM_SELF_INC_ADDR 
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_CTLr (0x0001a817 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_CTL.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_ctl[1];
	uint32_t _phyc_mdio2arm_ctl;
} BCM84834_PHYC_MDIO2ARM_CTLr_t;

#define BCM84834_PHYC_MDIO2ARM_CTLr_CLR(r) (r).phyc_mdio2arm_ctl[0] = 0
#define BCM84834_PHYC_MDIO2ARM_CTLr_SET(r,d) (r).phyc_mdio2arm_ctl[0] = d
#define BCM84834_PHYC_MDIO2ARM_CTLr_GET(r) (r).phyc_mdio2arm_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_GET(r) ((((r).phyc_mdio2arm_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_SET(r,f) (r).phyc_mdio2arm_ctl[0]=(((r).phyc_mdio2arm_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_GET(r) ((((r).phyc_mdio2arm_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_SET(r,f) (r).phyc_mdio2arm_ctl[0]=(((r).phyc_mdio2arm_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_GET(r) ((((r).phyc_mdio2arm_ctl[0]) >> 2) & 0x3)
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_SET(r,f) (r).phyc_mdio2arm_ctl[0]=(((r).phyc_mdio2arm_ctl[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_GET(r) ((((r).phyc_mdio2arm_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_SET(r,f) (r).phyc_mdio2arm_ctl[0]=(((r).phyc_mdio2arm_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_GET(r) (((r).phyc_mdio2arm_ctl[0]) & 0x1)
#define BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_SET(r,f) (r).phyc_mdio2arm_ctl[0]=(((r).phyc_mdio2arm_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_MDIO2ARM_CTL.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_CTLr,(_r._phyc_mdio2arm_ctl))
#define BCM84834_WRITE_PHYC_MDIO2ARM_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_CTLr,(_r._phyc_mdio2arm_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_CTLr BCM84834_PHYC_MDIO2ARM_CTLr
#define PHYC_MDIO2ARM_CTLr_SIZE BCM84834_PHYC_MDIO2ARM_CTLr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_CTLr_t PHYC_MDIO2ARM_CTLr_t;
#define PHYC_MDIO2ARM_CTLr_CLR BCM84834_PHYC_MDIO2ARM_CTLr_CLR
#define PHYC_MDIO2ARM_CTLr_SET BCM84834_PHYC_MDIO2ARM_CTLr_SET
#define PHYC_MDIO2ARM_CTLr_GET BCM84834_PHYC_MDIO2ARM_CTLr_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_GET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_SET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SELF_INC_ADDRf_SET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_GET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_SET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_BURSTf_SET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_GET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_SET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_SIZEf_SET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_GET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_SET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_RDf_SET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_GET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_GET
#define PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_SET BCM84834_PHYC_MDIO2ARM_CTLr_MDIO2ARM_WRf_SET
#define READ_PHYC_MDIO2ARM_CTLr BCM84834_READ_PHYC_MDIO2ARM_CTLr
#define WRITE_PHYC_MDIO2ARM_CTLr BCM84834_WRITE_PHYC_MDIO2ARM_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa818
 * DEVAD:    1
 * DESC:     Mdio2Arm Status
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_DONE    
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_STSr (0x0001a818 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_STS.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_STSr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_sts[1];
	uint32_t _phyc_mdio2arm_sts;
} BCM84834_PHYC_MDIO2ARM_STSr_t;

#define BCM84834_PHYC_MDIO2ARM_STSr_CLR(r) (r).phyc_mdio2arm_sts[0] = 0
#define BCM84834_PHYC_MDIO2ARM_STSr_SET(r,d) (r).phyc_mdio2arm_sts[0] = d
#define BCM84834_PHYC_MDIO2ARM_STSr_GET(r) (r).phyc_mdio2arm_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_GET(r) (((r).phyc_mdio2arm_sts[0]) & 0x1)
#define BCM84834_PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_SET(r,f) (r).phyc_mdio2arm_sts[0]=(((r).phyc_mdio2arm_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_MDIO2ARM_STS.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_STSr,(_r._phyc_mdio2arm_sts))
#define BCM84834_WRITE_PHYC_MDIO2ARM_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_STSr,(_r._phyc_mdio2arm_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_STSr BCM84834_PHYC_MDIO2ARM_STSr
#define PHYC_MDIO2ARM_STSr_SIZE BCM84834_PHYC_MDIO2ARM_STSr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_STSr_t PHYC_MDIO2ARM_STSr_t;
#define PHYC_MDIO2ARM_STSr_CLR BCM84834_PHYC_MDIO2ARM_STSr_CLR
#define PHYC_MDIO2ARM_STSr_SET BCM84834_PHYC_MDIO2ARM_STSr_SET
#define PHYC_MDIO2ARM_STSr_GET BCM84834_PHYC_MDIO2ARM_STSr_GET
#define PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_GET BCM84834_PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_GET
#define PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_SET BCM84834_PHYC_MDIO2ARM_STSr_MDIO2ARM_DONEf_SET
#define READ_PHYC_MDIO2ARM_STSr BCM84834_READ_PHYC_MDIO2ARM_STSr
#define WRITE_PHYC_MDIO2ARM_STSr BCM84834_WRITE_PHYC_MDIO2ARM_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_ADDR_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa819
 * DEVAD:    1
 * DESC:     Mdio2Arm Low Address Value
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_ADDR_LOW 
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr (0x0001a819 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_ADDR_LOW.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_addr_low[1];
	uint32_t _phyc_mdio2arm_addr_low;
} BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_t;

#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_CLR(r) (r).phyc_mdio2arm_addr_low[0] = 0
#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_SET(r,d) (r).phyc_mdio2arm_addr_low[0] = d
#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_GET(r) (r).phyc_mdio2arm_addr_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_GET(r) (((r).phyc_mdio2arm_addr_low[0]) & 0xffff)
#define BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_SET(r,f) (r).phyc_mdio2arm_addr_low[0]=(((r).phyc_mdio2arm_addr_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MDIO2ARM_ADDR_LOW.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_ADDR_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_ADDR_LOWr,(_r._phyc_mdio2arm_addr_low))
#define BCM84834_WRITE_PHYC_MDIO2ARM_ADDR_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_ADDR_LOWr,(_r._phyc_mdio2arm_addr_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_ADDR_LOWr BCM84834_PHYC_MDIO2ARM_ADDR_LOWr
#define PHYC_MDIO2ARM_ADDR_LOWr_SIZE BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_t PHYC_MDIO2ARM_ADDR_LOWr_t;
#define PHYC_MDIO2ARM_ADDR_LOWr_CLR BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_CLR
#define PHYC_MDIO2ARM_ADDR_LOWr_SET BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_SET
#define PHYC_MDIO2ARM_ADDR_LOWr_GET BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_GET
#define PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_GET BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_GET
#define PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_SET BCM84834_PHYC_MDIO2ARM_ADDR_LOWr_MDIO2ARM_ADDR_LOWf_SET
#define READ_PHYC_MDIO2ARM_ADDR_LOWr BCM84834_READ_PHYC_MDIO2ARM_ADDR_LOWr
#define WRITE_PHYC_MDIO2ARM_ADDR_LOWr BCM84834_WRITE_PHYC_MDIO2ARM_ADDR_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_ADDR_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_ADDR_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa81a
 * DEVAD:    1
 * DESC:     Mdio2Arm High Address Value
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_ADDR_HIGH 
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr (0x0001a81a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_ADDR_HIGH.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_addr_high[1];
	uint32_t _phyc_mdio2arm_addr_high;
} BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_t;

#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_CLR(r) (r).phyc_mdio2arm_addr_high[0] = 0
#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_SET(r,d) (r).phyc_mdio2arm_addr_high[0] = d
#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_GET(r) (r).phyc_mdio2arm_addr_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_GET(r) (((r).phyc_mdio2arm_addr_high[0]) & 0xffff)
#define BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_SET(r,f) (r).phyc_mdio2arm_addr_high[0]=(((r).phyc_mdio2arm_addr_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MDIO2ARM_ADDR_HIGH.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_ADDR_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr,(_r._phyc_mdio2arm_addr_high))
#define BCM84834_WRITE_PHYC_MDIO2ARM_ADDR_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr,(_r._phyc_mdio2arm_addr_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_ADDR_HIGHr BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr
#define PHYC_MDIO2ARM_ADDR_HIGHr_SIZE BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_t PHYC_MDIO2ARM_ADDR_HIGHr_t;
#define PHYC_MDIO2ARM_ADDR_HIGHr_CLR BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_CLR
#define PHYC_MDIO2ARM_ADDR_HIGHr_SET BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_SET
#define PHYC_MDIO2ARM_ADDR_HIGHr_GET BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_GET
#define PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_GET BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_GET
#define PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_SET BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr_MDIO2ARM_ADDR_HIGHf_SET
#define READ_PHYC_MDIO2ARM_ADDR_HIGHr BCM84834_READ_PHYC_MDIO2ARM_ADDR_HIGHr
#define WRITE_PHYC_MDIO2ARM_ADDR_HIGHr BCM84834_WRITE_PHYC_MDIO2ARM_ADDR_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_ADDR_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_DATA_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa81b
 * DEVAD:    1
 * DESC:     Mdio2Arm Low Data Value
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_DATA_LOW 
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr (0x0001a81b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_DATA_LOW.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_DATA_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_data_low[1];
	uint32_t _phyc_mdio2arm_data_low;
} BCM84834_PHYC_MDIO2ARM_DATA_LOWr_t;

#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_CLR(r) (r).phyc_mdio2arm_data_low[0] = 0
#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_SET(r,d) (r).phyc_mdio2arm_data_low[0] = d
#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_GET(r) (r).phyc_mdio2arm_data_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_GET(r) (((r).phyc_mdio2arm_data_low[0]) & 0xffff)
#define BCM84834_PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_SET(r,f) (r).phyc_mdio2arm_data_low[0]=(((r).phyc_mdio2arm_data_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MDIO2ARM_DATA_LOW.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_DATA_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_DATA_LOWr,(_r._phyc_mdio2arm_data_low))
#define BCM84834_WRITE_PHYC_MDIO2ARM_DATA_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_DATA_LOWr,(_r._phyc_mdio2arm_data_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_DATA_LOWr BCM84834_PHYC_MDIO2ARM_DATA_LOWr
#define PHYC_MDIO2ARM_DATA_LOWr_SIZE BCM84834_PHYC_MDIO2ARM_DATA_LOWr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_DATA_LOWr_t PHYC_MDIO2ARM_DATA_LOWr_t;
#define PHYC_MDIO2ARM_DATA_LOWr_CLR BCM84834_PHYC_MDIO2ARM_DATA_LOWr_CLR
#define PHYC_MDIO2ARM_DATA_LOWr_SET BCM84834_PHYC_MDIO2ARM_DATA_LOWr_SET
#define PHYC_MDIO2ARM_DATA_LOWr_GET BCM84834_PHYC_MDIO2ARM_DATA_LOWr_GET
#define PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_GET BCM84834_PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_GET
#define PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_SET BCM84834_PHYC_MDIO2ARM_DATA_LOWr_MDIO2ARM_DATA_LOWf_SET
#define READ_PHYC_MDIO2ARM_DATA_LOWr BCM84834_READ_PHYC_MDIO2ARM_DATA_LOWr
#define WRITE_PHYC_MDIO2ARM_DATA_LOWr BCM84834_WRITE_PHYC_MDIO2ARM_DATA_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_DATA_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MDIO2ARM_DATA_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa81c
 * DEVAD:    1
 * DESC:     Mdio2Arm High Data Value
 * SIZE:     32
 * FIELDS:
 *     MDIO2ARM_DATA_HIGH 
 *
 ******************************************************************************/
#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr (0x0001a81c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MDIO2ARM_DATA_HIGH.
 *
 */
typedef union BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_mdio2arm_data_high[1];
	uint32_t _phyc_mdio2arm_data_high;
} BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_t;

#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_CLR(r) (r).phyc_mdio2arm_data_high[0] = 0
#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_SET(r,d) (r).phyc_mdio2arm_data_high[0] = d
#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_GET(r) (r).phyc_mdio2arm_data_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_GET(r) (((r).phyc_mdio2arm_data_high[0]) & 0xffff)
#define BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_SET(r,f) (r).phyc_mdio2arm_data_high[0]=(((r).phyc_mdio2arm_data_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MDIO2ARM_DATA_HIGH.
 *
 */
#define BCM84834_READ_PHYC_MDIO2ARM_DATA_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MDIO2ARM_DATA_HIGHr,(_r._phyc_mdio2arm_data_high))
#define BCM84834_WRITE_PHYC_MDIO2ARM_DATA_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MDIO2ARM_DATA_HIGHr,(_r._phyc_mdio2arm_data_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MDIO2ARM_DATA_HIGHr BCM84834_PHYC_MDIO2ARM_DATA_HIGHr
#define PHYC_MDIO2ARM_DATA_HIGHr_SIZE BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_SIZE
typedef BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_t PHYC_MDIO2ARM_DATA_HIGHr_t;
#define PHYC_MDIO2ARM_DATA_HIGHr_CLR BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_CLR
#define PHYC_MDIO2ARM_DATA_HIGHr_SET BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_SET
#define PHYC_MDIO2ARM_DATA_HIGHr_GET BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_GET
#define PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_GET BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_GET
#define PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_SET BCM84834_PHYC_MDIO2ARM_DATA_HIGHr_MDIO2ARM_DATA_HIGHf_SET
#define READ_PHYC_MDIO2ARM_DATA_HIGHr BCM84834_READ_PHYC_MDIO2ARM_DATA_HIGHr
#define WRITE_PHYC_MDIO2ARM_DATA_HIGHr BCM84834_WRITE_PHYC_MDIO2ARM_DATA_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MDIO2ARM_DATA_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_AUTONEG_TX_SCR_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa81d
 * DEVAD:    1
 * DESC:     AUTONEG TX scramble status
 * SIZE:     32
 * FIELDS:
 *     AUTONEG_TX_SCR_SEED 
 *     AUTONEG_TX_SCA_INIT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr (0x0001a81d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_AUTONEG_TX_SCR_STS.
 *
 */
typedef union BCM84834_PHYC_AUTONEG_TX_SCR_STSr_s {
	uint32_t v[1];
	uint32_t phyc_autoneg_tx_scr_sts[1];
	uint32_t _phyc_autoneg_tx_scr_sts;
} BCM84834_PHYC_AUTONEG_TX_SCR_STSr_t;

#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_CLR(r) (r).phyc_autoneg_tx_scr_sts[0] = 0
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_SET(r,d) (r).phyc_autoneg_tx_scr_sts[0] = d
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_GET(r) (r).phyc_autoneg_tx_scr_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_GET(r) ((((r).phyc_autoneg_tx_scr_sts[0]) >> 15) & 0x1)
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_SET(r,f) (r).phyc_autoneg_tx_scr_sts[0]=(((r).phyc_autoneg_tx_scr_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_GET(r) (((r).phyc_autoneg_tx_scr_sts[0]) & 0x7ff)
#define BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_SET(r,f) (r).phyc_autoneg_tx_scr_sts[0]=(((r).phyc_autoneg_tx_scr_sts[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access PHYC_AUTONEG_TX_SCR_STS.
 *
 */
#define BCM84834_READ_PHYC_AUTONEG_TX_SCR_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_AUTONEG_TX_SCR_STSr,(_r._phyc_autoneg_tx_scr_sts))
#define BCM84834_WRITE_PHYC_AUTONEG_TX_SCR_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_AUTONEG_TX_SCR_STSr,(_r._phyc_autoneg_tx_scr_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_AUTONEG_TX_SCR_STSr BCM84834_PHYC_AUTONEG_TX_SCR_STSr
#define PHYC_AUTONEG_TX_SCR_STSr_SIZE BCM84834_PHYC_AUTONEG_TX_SCR_STSr_SIZE
typedef BCM84834_PHYC_AUTONEG_TX_SCR_STSr_t PHYC_AUTONEG_TX_SCR_STSr_t;
#define PHYC_AUTONEG_TX_SCR_STSr_CLR BCM84834_PHYC_AUTONEG_TX_SCR_STSr_CLR
#define PHYC_AUTONEG_TX_SCR_STSr_SET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_SET
#define PHYC_AUTONEG_TX_SCR_STSr_GET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_GET
#define PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_GET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_GET
#define PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_SET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCA_INITf_SET
#define PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_GET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_GET
#define PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_SET BCM84834_PHYC_AUTONEG_TX_SCR_STSr_AUTONEG_TX_SCR_SEEDf_SET
#define READ_PHYC_AUTONEG_TX_SCR_STSr BCM84834_READ_PHYC_AUTONEG_TX_SCR_STSr
#define WRITE_PHYC_AUTONEG_TX_SCR_STSr BCM84834_WRITE_PHYC_AUTONEG_TX_SCR_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_AUTONEG_TX_SCR_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_AUTONEG_RX_SCR_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa81e
 * DEVAD:    1
 * DESC:     AUTONEG RX scramble status
 * SIZE:     32
 * FIELDS:
 *     AUTONEG_RX_SCR_SEED 
 *     AUTONEG_RX_SCA_INIT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr (0x0001a81e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_AUTONEG_RX_SCR_STS.
 *
 */
typedef union BCM84834_PHYC_AUTONEG_RX_SCR_STSr_s {
	uint32_t v[1];
	uint32_t phyc_autoneg_rx_scr_sts[1];
	uint32_t _phyc_autoneg_rx_scr_sts;
} BCM84834_PHYC_AUTONEG_RX_SCR_STSr_t;

#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_CLR(r) (r).phyc_autoneg_rx_scr_sts[0] = 0
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_SET(r,d) (r).phyc_autoneg_rx_scr_sts[0] = d
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_GET(r) (r).phyc_autoneg_rx_scr_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_GET(r) ((((r).phyc_autoneg_rx_scr_sts[0]) >> 15) & 0x1)
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_SET(r,f) (r).phyc_autoneg_rx_scr_sts[0]=(((r).phyc_autoneg_rx_scr_sts[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_GET(r) (((r).phyc_autoneg_rx_scr_sts[0]) & 0x7ff)
#define BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_SET(r,f) (r).phyc_autoneg_rx_scr_sts[0]=(((r).phyc_autoneg_rx_scr_sts[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access PHYC_AUTONEG_RX_SCR_STS.
 *
 */
#define BCM84834_READ_PHYC_AUTONEG_RX_SCR_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_AUTONEG_RX_SCR_STSr,(_r._phyc_autoneg_rx_scr_sts))
#define BCM84834_WRITE_PHYC_AUTONEG_RX_SCR_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_AUTONEG_RX_SCR_STSr,(_r._phyc_autoneg_rx_scr_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_AUTONEG_RX_SCR_STSr BCM84834_PHYC_AUTONEG_RX_SCR_STSr
#define PHYC_AUTONEG_RX_SCR_STSr_SIZE BCM84834_PHYC_AUTONEG_RX_SCR_STSr_SIZE
typedef BCM84834_PHYC_AUTONEG_RX_SCR_STSr_t PHYC_AUTONEG_RX_SCR_STSr_t;
#define PHYC_AUTONEG_RX_SCR_STSr_CLR BCM84834_PHYC_AUTONEG_RX_SCR_STSr_CLR
#define PHYC_AUTONEG_RX_SCR_STSr_SET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_SET
#define PHYC_AUTONEG_RX_SCR_STSr_GET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_GET
#define PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_GET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_GET
#define PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_SET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCA_INITf_SET
#define PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_GET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_GET
#define PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_SET BCM84834_PHYC_AUTONEG_RX_SCR_STSr_AUTONEG_RX_SCR_SEEDf_SET
#define READ_PHYC_AUTONEG_RX_SCR_STSr BCM84834_READ_PHYC_AUTONEG_RX_SCR_STSr
#define WRITE_PHYC_AUTONEG_RX_SCR_STSr BCM84834_WRITE_PHYC_AUTONEG_RX_SCR_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_AUTONEG_RX_SCR_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_AUTONEG_STS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa820
 * DEVAD:    1
 * DESC:     AUTONEG status
 * SIZE:     32
 * FIELDS:
 *     AUTONEG_PHYC_CONFIG 
 *     LP_LOOP_TIMING_ABI 
 *     MDI_STATE        
 *     LINK_ENABLE_STS  
 *
 ******************************************************************************/
#define BCM84834_PHYC_AUTONEG_STSr (0x0001a820 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_AUTONEG_STSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_AUTONEG_STS.
 *
 */
typedef union BCM84834_PHYC_AUTONEG_STSr_s {
	uint32_t v[1];
	uint32_t phyc_autoneg_sts[1];
	uint32_t _phyc_autoneg_sts;
} BCM84834_PHYC_AUTONEG_STSr_t;

#define BCM84834_PHYC_AUTONEG_STSr_CLR(r) (r).phyc_autoneg_sts[0] = 0
#define BCM84834_PHYC_AUTONEG_STSr_SET(r,d) (r).phyc_autoneg_sts[0] = d
#define BCM84834_PHYC_AUTONEG_STSr_GET(r) (r).phyc_autoneg_sts[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_GET(r) ((((r).phyc_autoneg_sts[0]) >> 3) & 0x1)
#define BCM84834_PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_SET(r,f) (r).phyc_autoneg_sts[0]=(((r).phyc_autoneg_sts[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_AUTONEG_STSr_MDI_STATEf_GET(r) ((((r).phyc_autoneg_sts[0]) >> 2) & 0x1)
#define BCM84834_PHYC_AUTONEG_STSr_MDI_STATEf_SET(r,f) (r).phyc_autoneg_sts[0]=(((r).phyc_autoneg_sts[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_GET(r) ((((r).phyc_autoneg_sts[0]) >> 1) & 0x1)
#define BCM84834_PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_SET(r,f) (r).phyc_autoneg_sts[0]=(((r).phyc_autoneg_sts[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_GET(r) (((r).phyc_autoneg_sts[0]) & 0x1)
#define BCM84834_PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_SET(r,f) (r).phyc_autoneg_sts[0]=(((r).phyc_autoneg_sts[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_AUTONEG_STS.
 *
 */
#define BCM84834_READ_PHYC_AUTONEG_STSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_AUTONEG_STSr,(_r._phyc_autoneg_sts))
#define BCM84834_WRITE_PHYC_AUTONEG_STSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_AUTONEG_STSr,(_r._phyc_autoneg_sts))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_AUTONEG_STSr BCM84834_PHYC_AUTONEG_STSr
#define PHYC_AUTONEG_STSr_SIZE BCM84834_PHYC_AUTONEG_STSr_SIZE
typedef BCM84834_PHYC_AUTONEG_STSr_t PHYC_AUTONEG_STSr_t;
#define PHYC_AUTONEG_STSr_CLR BCM84834_PHYC_AUTONEG_STSr_CLR
#define PHYC_AUTONEG_STSr_SET BCM84834_PHYC_AUTONEG_STSr_SET
#define PHYC_AUTONEG_STSr_GET BCM84834_PHYC_AUTONEG_STSr_GET
#define PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_GET BCM84834_PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_GET
#define PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_SET BCM84834_PHYC_AUTONEG_STSr_LINK_ENABLE_STSf_SET
#define PHYC_AUTONEG_STSr_MDI_STATEf_GET BCM84834_PHYC_AUTONEG_STSr_MDI_STATEf_GET
#define PHYC_AUTONEG_STSr_MDI_STATEf_SET BCM84834_PHYC_AUTONEG_STSr_MDI_STATEf_SET
#define PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_GET BCM84834_PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_GET
#define PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_SET BCM84834_PHYC_AUTONEG_STSr_LP_LOOP_TIMING_ABIf_SET
#define PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_GET BCM84834_PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_GET
#define PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_SET BCM84834_PHYC_AUTONEG_STSr_AUTONEG_PHYC_CONFIGf_SET
#define READ_PHYC_AUTONEG_STSr BCM84834_READ_PHYC_AUTONEG_STSr
#define WRITE_PHYC_AUTONEG_STSr BCM84834_WRITE_PHYC_AUTONEG_STSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_AUTONEG_STSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_SCR_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa821
 * DEVAD:    1
 * DESC:     PCS_RX Scramble Control
 * SIZE:     32
 * FIELDS:
 *     RX_SCR_SEED      
 *     RX_SCA_INIT      
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_SCR_CTLr (0x0001a821 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_SCR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_SCR_CTL.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_SCR_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_scr_ctl[1];
	uint32_t _phyc_pcs_rx_scr_ctl;
} BCM84834_PHYC_PCS_RX_SCR_CTLr_t;

#define BCM84834_PHYC_PCS_RX_SCR_CTLr_CLR(r) (r).phyc_pcs_rx_scr_ctl[0] = 0
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_SET(r,d) (r).phyc_pcs_rx_scr_ctl[0] = d
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_GET(r) (r).phyc_pcs_rx_scr_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_GET(r) ((((r).phyc_pcs_rx_scr_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_SET(r,f) (r).phyc_pcs_rx_scr_ctl[0]=(((r).phyc_pcs_rx_scr_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_GET(r) (((r).phyc_pcs_rx_scr_ctl[0]) & 0x7ff)
#define BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_SET(r,f) (r).phyc_pcs_rx_scr_ctl[0]=(((r).phyc_pcs_rx_scr_ctl[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access PHYC_PCS_RX_SCR_CTL.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_SCR_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_SCR_CTLr,(_r._phyc_pcs_rx_scr_ctl))
#define BCM84834_WRITE_PHYC_PCS_RX_SCR_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_SCR_CTLr,(_r._phyc_pcs_rx_scr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_SCR_CTLr BCM84834_PHYC_PCS_RX_SCR_CTLr
#define PHYC_PCS_RX_SCR_CTLr_SIZE BCM84834_PHYC_PCS_RX_SCR_CTLr_SIZE
typedef BCM84834_PHYC_PCS_RX_SCR_CTLr_t PHYC_PCS_RX_SCR_CTLr_t;
#define PHYC_PCS_RX_SCR_CTLr_CLR BCM84834_PHYC_PCS_RX_SCR_CTLr_CLR
#define PHYC_PCS_RX_SCR_CTLr_SET BCM84834_PHYC_PCS_RX_SCR_CTLr_SET
#define PHYC_PCS_RX_SCR_CTLr_GET BCM84834_PHYC_PCS_RX_SCR_CTLr_GET
#define PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_GET BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_GET
#define PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_SET BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCA_INITf_SET
#define PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_GET BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_GET
#define PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_SET BCM84834_PHYC_PCS_RX_SCR_CTLr_RX_SCR_SEEDf_SET
#define READ_PHYC_PCS_RX_SCR_CTLr BCM84834_READ_PHYC_PCS_RX_SCR_CTLr
#define WRITE_PHYC_PCS_RX_SCR_CTLr BCM84834_WRITE_PHYC_PCS_RX_SCR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_SCR_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SCR_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa822
 * DEVAD:    1
 * DESC:     PCS_TX Scramble Control
 * SIZE:     32
 * FIELDS:
 *     TX_SCR_SEED      
 *     TX_SCA_INIT      
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SCR_CTLr (0x0001a822 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SCR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SCR_CTL.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SCR_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_scr_ctl[1];
	uint32_t _phyc_pcs_tx_scr_ctl;
} BCM84834_PHYC_PCS_TX_SCR_CTLr_t;

#define BCM84834_PHYC_PCS_TX_SCR_CTLr_CLR(r) (r).phyc_pcs_tx_scr_ctl[0] = 0
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_SET(r,d) (r).phyc_pcs_tx_scr_ctl[0] = d
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_GET(r) (r).phyc_pcs_tx_scr_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_GET(r) ((((r).phyc_pcs_tx_scr_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_SET(r,f) (r).phyc_pcs_tx_scr_ctl[0]=(((r).phyc_pcs_tx_scr_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_GET(r) (((r).phyc_pcs_tx_scr_ctl[0]) & 0x7ff)
#define BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_SET(r,f) (r).phyc_pcs_tx_scr_ctl[0]=(((r).phyc_pcs_tx_scr_ctl[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access PHYC_PCS_TX_SCR_CTL.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SCR_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SCR_CTLr,(_r._phyc_pcs_tx_scr_ctl))
#define BCM84834_WRITE_PHYC_PCS_TX_SCR_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SCR_CTLr,(_r._phyc_pcs_tx_scr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SCR_CTLr BCM84834_PHYC_PCS_TX_SCR_CTLr
#define PHYC_PCS_TX_SCR_CTLr_SIZE BCM84834_PHYC_PCS_TX_SCR_CTLr_SIZE
typedef BCM84834_PHYC_PCS_TX_SCR_CTLr_t PHYC_PCS_TX_SCR_CTLr_t;
#define PHYC_PCS_TX_SCR_CTLr_CLR BCM84834_PHYC_PCS_TX_SCR_CTLr_CLR
#define PHYC_PCS_TX_SCR_CTLr_SET BCM84834_PHYC_PCS_TX_SCR_CTLr_SET
#define PHYC_PCS_TX_SCR_CTLr_GET BCM84834_PHYC_PCS_TX_SCR_CTLr_GET
#define PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_GET BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_GET
#define PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_SET BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCA_INITf_SET
#define PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_GET BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_GET
#define PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_SET BCM84834_PHYC_PCS_TX_SCR_CTLr_TX_SCR_SEEDf_SET
#define READ_PHYC_PCS_TX_SCR_CTLr BCM84834_READ_PHYC_PCS_TX_SCR_CTLr
#define WRITE_PHYC_PCS_TX_SCR_CTLr BCM84834_WRITE_PHYC_PCS_TX_SCR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SCR_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CLK_400K_DIV_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa823
 * DEVAD:    1
 * DESC:     Clock 400 KHz divider counter
 * SIZE:     32
 * FIELDS:
 *     CLK_400K_DIV_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CLK_400K_DIV_CNTr (0x0001a823 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CLK_400K_DIV_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CLK_400K_DIV_CNT.
 *
 */
typedef union BCM84834_PHYC_CLK_400K_DIV_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_clk_400k_div_cnt[1];
	uint32_t _phyc_clk_400k_div_cnt;
} BCM84834_PHYC_CLK_400K_DIV_CNTr_t;

#define BCM84834_PHYC_CLK_400K_DIV_CNTr_CLR(r) (r).phyc_clk_400k_div_cnt[0] = 0
#define BCM84834_PHYC_CLK_400K_DIV_CNTr_SET(r,d) (r).phyc_clk_400k_div_cnt[0] = d
#define BCM84834_PHYC_CLK_400K_DIV_CNTr_GET(r) (r).phyc_clk_400k_div_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_GET(r) (((r).phyc_clk_400k_div_cnt[0]) & 0x1ff)
#define BCM84834_PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_SET(r,f) (r).phyc_clk_400k_div_cnt[0]=(((r).phyc_clk_400k_div_cnt[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access PHYC_CLK_400K_DIV_CNT.
 *
 */
#define BCM84834_READ_PHYC_CLK_400K_DIV_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CLK_400K_DIV_CNTr,(_r._phyc_clk_400k_div_cnt))
#define BCM84834_WRITE_PHYC_CLK_400K_DIV_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CLK_400K_DIV_CNTr,(_r._phyc_clk_400k_div_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CLK_400K_DIV_CNTr BCM84834_PHYC_CLK_400K_DIV_CNTr
#define PHYC_CLK_400K_DIV_CNTr_SIZE BCM84834_PHYC_CLK_400K_DIV_CNTr_SIZE
typedef BCM84834_PHYC_CLK_400K_DIV_CNTr_t PHYC_CLK_400K_DIV_CNTr_t;
#define PHYC_CLK_400K_DIV_CNTr_CLR BCM84834_PHYC_CLK_400K_DIV_CNTr_CLR
#define PHYC_CLK_400K_DIV_CNTr_SET BCM84834_PHYC_CLK_400K_DIV_CNTr_SET
#define PHYC_CLK_400K_DIV_CNTr_GET BCM84834_PHYC_CLK_400K_DIV_CNTr_GET
#define PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_GET BCM84834_PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_GET
#define PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_SET BCM84834_PHYC_CLK_400K_DIV_CNTr_CLK_400K_DIV_CNTf_SET
#define READ_PHYC_CLK_400K_DIV_CNTr BCM84834_READ_PHYC_CLK_400K_DIV_CNTr
#define WRITE_PHYC_CLK_400K_DIV_CNTr BCM84834_WRITE_PHYC_CLK_400K_DIV_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CLK_400K_DIV_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CLK_100K_DIV_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa824
 * DEVAD:    1
 * DESC:     Clock 100 KHz divider counter
 * SIZE:     32
 * FIELDS:
 *     CLK_100K_DIV_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CLK_100K_DIV_CNTr (0x0001a824 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CLK_100K_DIV_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CLK_100K_DIV_CNT.
 *
 */
typedef union BCM84834_PHYC_CLK_100K_DIV_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_clk_100k_div_cnt[1];
	uint32_t _phyc_clk_100k_div_cnt;
} BCM84834_PHYC_CLK_100K_DIV_CNTr_t;

#define BCM84834_PHYC_CLK_100K_DIV_CNTr_CLR(r) (r).phyc_clk_100k_div_cnt[0] = 0
#define BCM84834_PHYC_CLK_100K_DIV_CNTr_SET(r,d) (r).phyc_clk_100k_div_cnt[0] = d
#define BCM84834_PHYC_CLK_100K_DIV_CNTr_GET(r) (r).phyc_clk_100k_div_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_GET(r) (((r).phyc_clk_100k_div_cnt[0]) & 0x1ff)
#define BCM84834_PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_SET(r,f) (r).phyc_clk_100k_div_cnt[0]=(((r).phyc_clk_100k_div_cnt[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access PHYC_CLK_100K_DIV_CNT.
 *
 */
#define BCM84834_READ_PHYC_CLK_100K_DIV_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CLK_100K_DIV_CNTr,(_r._phyc_clk_100k_div_cnt))
#define BCM84834_WRITE_PHYC_CLK_100K_DIV_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CLK_100K_DIV_CNTr,(_r._phyc_clk_100k_div_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CLK_100K_DIV_CNTr BCM84834_PHYC_CLK_100K_DIV_CNTr
#define PHYC_CLK_100K_DIV_CNTr_SIZE BCM84834_PHYC_CLK_100K_DIV_CNTr_SIZE
typedef BCM84834_PHYC_CLK_100K_DIV_CNTr_t PHYC_CLK_100K_DIV_CNTr_t;
#define PHYC_CLK_100K_DIV_CNTr_CLR BCM84834_PHYC_CLK_100K_DIV_CNTr_CLR
#define PHYC_CLK_100K_DIV_CNTr_SET BCM84834_PHYC_CLK_100K_DIV_CNTr_SET
#define PHYC_CLK_100K_DIV_CNTr_GET BCM84834_PHYC_CLK_100K_DIV_CNTr_GET
#define PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_GET BCM84834_PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_GET
#define PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_SET BCM84834_PHYC_CLK_100K_DIV_CNTr_CLK_100K_DIV_CNTf_SET
#define READ_PHYC_CLK_100K_DIV_CNTr BCM84834_READ_PHYC_CLK_100K_DIV_CNTr
#define WRITE_PHYC_CLK_100K_DIV_CNTr BCM84834_WRITE_PHYC_CLK_100K_DIV_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CLK_100K_DIV_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_I2C_DEGLITCH_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa825
 * DEVAD:    1
 * DESC:     I2c deglitch counter
 * SIZE:     32
 * FIELDS:
 *     I2C_DEGLITCH_CNT 
 *     XFP_DEGLITCH_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr (0x0001a825 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_I2C_DEGLITCH_CNT.
 *
 */
typedef union BCM84834_PHYC_I2C_DEGLITCH_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_i2c_deglitch_cnt[1];
	uint32_t _phyc_i2c_deglitch_cnt;
} BCM84834_PHYC_I2C_DEGLITCH_CNTr_t;

#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_CLR(r) (r).phyc_i2c_deglitch_cnt[0] = 0
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_SET(r,d) (r).phyc_i2c_deglitch_cnt[0] = d
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_GET(r) (r).phyc_i2c_deglitch_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_GET(r) ((((r).phyc_i2c_deglitch_cnt[0]) >> 4) & 0xf)
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_SET(r,f) (r).phyc_i2c_deglitch_cnt[0]=(((r).phyc_i2c_deglitch_cnt[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_GET(r) (((r).phyc_i2c_deglitch_cnt[0]) & 0xf)
#define BCM84834_PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_SET(r,f) (r).phyc_i2c_deglitch_cnt[0]=(((r).phyc_i2c_deglitch_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_I2C_DEGLITCH_CNT.
 *
 */
#define BCM84834_READ_PHYC_I2C_DEGLITCH_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_I2C_DEGLITCH_CNTr,(_r._phyc_i2c_deglitch_cnt))
#define BCM84834_WRITE_PHYC_I2C_DEGLITCH_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_I2C_DEGLITCH_CNTr,(_r._phyc_i2c_deglitch_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_I2C_DEGLITCH_CNTr BCM84834_PHYC_I2C_DEGLITCH_CNTr
#define PHYC_I2C_DEGLITCH_CNTr_SIZE BCM84834_PHYC_I2C_DEGLITCH_CNTr_SIZE
typedef BCM84834_PHYC_I2C_DEGLITCH_CNTr_t PHYC_I2C_DEGLITCH_CNTr_t;
#define PHYC_I2C_DEGLITCH_CNTr_CLR BCM84834_PHYC_I2C_DEGLITCH_CNTr_CLR
#define PHYC_I2C_DEGLITCH_CNTr_SET BCM84834_PHYC_I2C_DEGLITCH_CNTr_SET
#define PHYC_I2C_DEGLITCH_CNTr_GET BCM84834_PHYC_I2C_DEGLITCH_CNTr_GET
#define PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_GET BCM84834_PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_GET
#define PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_SET BCM84834_PHYC_I2C_DEGLITCH_CNTr_XFP_DEGLITCH_CNTf_SET
#define PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_GET BCM84834_PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_GET
#define PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_SET BCM84834_PHYC_I2C_DEGLITCH_CNTr_I2C_DEGLITCH_CNTf_SET
#define READ_PHYC_I2C_DEGLITCH_CNTr BCM84834_READ_PHYC_I2C_DEGLITCH_CNTr
#define WRITE_PHYC_I2C_DEGLITCH_CNTr BCM84834_WRITE_PHYC_I2C_DEGLITCH_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_I2C_DEGLITCH_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_I2C_SDA_DLY_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa826
 * DEVAD:    1
 * DESC:     I2C SDA output delay counter
 * SIZE:     32
 * FIELDS:
 *     I2C_SDA_DLY_CNT  
 *
 ******************************************************************************/
#define BCM84834_PHYC_I2C_SDA_DLY_CNTr (0x0001a826 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_I2C_SDA_DLY_CNT.
 *
 */
typedef union BCM84834_PHYC_I2C_SDA_DLY_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_i2c_sda_dly_cnt[1];
	uint32_t _phyc_i2c_sda_dly_cnt;
} BCM84834_PHYC_I2C_SDA_DLY_CNTr_t;

#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_CLR(r) (r).phyc_i2c_sda_dly_cnt[0] = 0
#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_SET(r,d) (r).phyc_i2c_sda_dly_cnt[0] = d
#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_GET(r) (r).phyc_i2c_sda_dly_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_GET(r) (((r).phyc_i2c_sda_dly_cnt[0]) & 0x1f)
#define BCM84834_PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_SET(r,f) (r).phyc_i2c_sda_dly_cnt[0]=(((r).phyc_i2c_sda_dly_cnt[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access PHYC_I2C_SDA_DLY_CNT.
 *
 */
#define BCM84834_READ_PHYC_I2C_SDA_DLY_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_I2C_SDA_DLY_CNTr,(_r._phyc_i2c_sda_dly_cnt))
#define BCM84834_WRITE_PHYC_I2C_SDA_DLY_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_I2C_SDA_DLY_CNTr,(_r._phyc_i2c_sda_dly_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_I2C_SDA_DLY_CNTr BCM84834_PHYC_I2C_SDA_DLY_CNTr
#define PHYC_I2C_SDA_DLY_CNTr_SIZE BCM84834_PHYC_I2C_SDA_DLY_CNTr_SIZE
typedef BCM84834_PHYC_I2C_SDA_DLY_CNTr_t PHYC_I2C_SDA_DLY_CNTr_t;
#define PHYC_I2C_SDA_DLY_CNTr_CLR BCM84834_PHYC_I2C_SDA_DLY_CNTr_CLR
#define PHYC_I2C_SDA_DLY_CNTr_SET BCM84834_PHYC_I2C_SDA_DLY_CNTr_SET
#define PHYC_I2C_SDA_DLY_CNTr_GET BCM84834_PHYC_I2C_SDA_DLY_CNTr_GET
#define PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_GET BCM84834_PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_GET
#define PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_SET BCM84834_PHYC_I2C_SDA_DLY_CNTr_I2C_SDA_DLY_CNTf_SET
#define READ_PHYC_I2C_SDA_DLY_CNTr BCM84834_READ_PHYC_I2C_SDA_DLY_CNTr
#define WRITE_PHYC_I2C_SDA_DLY_CNTr BCM84834_WRITE_PHYC_I2C_SDA_DLY_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_I2C_SDA_DLY_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_I2C_WR_CYCLE_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa827
 * DEVAD:    1
 * DESC:     I2C Auto Write Wait Cycle High
 * SIZE:     32
 * FIELDS:
 *     I2C_WR_CYCLE_H   
 *
 ******************************************************************************/
#define BCM84834_PHYC_I2C_WR_CYCLE_Hr (0x0001a827 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_I2C_WR_CYCLE_H.
 *
 */
typedef union BCM84834_PHYC_I2C_WR_CYCLE_Hr_s {
	uint32_t v[1];
	uint32_t phyc_i2c_wr_cycle_h[1];
	uint32_t _phyc_i2c_wr_cycle_h;
} BCM84834_PHYC_I2C_WR_CYCLE_Hr_t;

#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_CLR(r) (r).phyc_i2c_wr_cycle_h[0] = 0
#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_SET(r,d) (r).phyc_i2c_wr_cycle_h[0] = d
#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_GET(r) (r).phyc_i2c_wr_cycle_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_GET(r) (((r).phyc_i2c_wr_cycle_h[0]) & 0xffff)
#define BCM84834_PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_SET(r,f) (r).phyc_i2c_wr_cycle_h[0]=(((r).phyc_i2c_wr_cycle_h[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_I2C_WR_CYCLE_H.
 *
 */
#define BCM84834_READ_PHYC_I2C_WR_CYCLE_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_I2C_WR_CYCLE_Hr,(_r._phyc_i2c_wr_cycle_h))
#define BCM84834_WRITE_PHYC_I2C_WR_CYCLE_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_I2C_WR_CYCLE_Hr,(_r._phyc_i2c_wr_cycle_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_I2C_WR_CYCLE_Hr BCM84834_PHYC_I2C_WR_CYCLE_Hr
#define PHYC_I2C_WR_CYCLE_Hr_SIZE BCM84834_PHYC_I2C_WR_CYCLE_Hr_SIZE
typedef BCM84834_PHYC_I2C_WR_CYCLE_Hr_t PHYC_I2C_WR_CYCLE_Hr_t;
#define PHYC_I2C_WR_CYCLE_Hr_CLR BCM84834_PHYC_I2C_WR_CYCLE_Hr_CLR
#define PHYC_I2C_WR_CYCLE_Hr_SET BCM84834_PHYC_I2C_WR_CYCLE_Hr_SET
#define PHYC_I2C_WR_CYCLE_Hr_GET BCM84834_PHYC_I2C_WR_CYCLE_Hr_GET
#define PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_GET BCM84834_PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_GET
#define PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_SET BCM84834_PHYC_I2C_WR_CYCLE_Hr_I2C_WR_CYCLE_Hf_SET
#define READ_PHYC_I2C_WR_CYCLE_Hr BCM84834_READ_PHYC_I2C_WR_CYCLE_Hr
#define WRITE_PHYC_I2C_WR_CYCLE_Hr BCM84834_WRITE_PHYC_I2C_WR_CYCLE_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_I2C_WR_CYCLE_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_I2C_WR_CYCLE_L
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa828
 * DEVAD:    1
 * DESC:     I2C Auto Write Wait Cycle Low
 * SIZE:     32
 * FIELDS:
 *     I2C_WR_CYCLE_L   
 *
 ******************************************************************************/
#define BCM84834_PHYC_I2C_WR_CYCLE_Lr (0x0001a828 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_I2C_WR_CYCLE_L.
 *
 */
typedef union BCM84834_PHYC_I2C_WR_CYCLE_Lr_s {
	uint32_t v[1];
	uint32_t phyc_i2c_wr_cycle_l[1];
	uint32_t _phyc_i2c_wr_cycle_l;
} BCM84834_PHYC_I2C_WR_CYCLE_Lr_t;

#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_CLR(r) (r).phyc_i2c_wr_cycle_l[0] = 0
#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_SET(r,d) (r).phyc_i2c_wr_cycle_l[0] = d
#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_GET(r) (r).phyc_i2c_wr_cycle_l[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_GET(r) (((r).phyc_i2c_wr_cycle_l[0]) & 0xffff)
#define BCM84834_PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_SET(r,f) (r).phyc_i2c_wr_cycle_l[0]=(((r).phyc_i2c_wr_cycle_l[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_I2C_WR_CYCLE_L.
 *
 */
#define BCM84834_READ_PHYC_I2C_WR_CYCLE_Lr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_I2C_WR_CYCLE_Lr,(_r._phyc_i2c_wr_cycle_l))
#define BCM84834_WRITE_PHYC_I2C_WR_CYCLE_Lr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_I2C_WR_CYCLE_Lr,(_r._phyc_i2c_wr_cycle_l))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_I2C_WR_CYCLE_Lr BCM84834_PHYC_I2C_WR_CYCLE_Lr
#define PHYC_I2C_WR_CYCLE_Lr_SIZE BCM84834_PHYC_I2C_WR_CYCLE_Lr_SIZE
typedef BCM84834_PHYC_I2C_WR_CYCLE_Lr_t PHYC_I2C_WR_CYCLE_Lr_t;
#define PHYC_I2C_WR_CYCLE_Lr_CLR BCM84834_PHYC_I2C_WR_CYCLE_Lr_CLR
#define PHYC_I2C_WR_CYCLE_Lr_SET BCM84834_PHYC_I2C_WR_CYCLE_Lr_SET
#define PHYC_I2C_WR_CYCLE_Lr_GET BCM84834_PHYC_I2C_WR_CYCLE_Lr_GET
#define PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_GET BCM84834_PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_GET
#define PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_SET BCM84834_PHYC_I2C_WR_CYCLE_Lr_I2C_WR_CYCLE_Lf_SET
#define READ_PHYC_I2C_WR_CYCLE_Lr BCM84834_READ_PHYC_I2C_WR_CYCLE_Lr
#define WRITE_PHYC_I2C_WR_CYCLE_Lr BCM84834_WRITE_PHYC_I2C_WR_CYCLE_Lr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_I2C_WR_CYCLE_Lr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CLK_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa829
 * DEVAD:    1
 * DESC:     Clock Control Register
 * SIZE:     32
 * FIELDS:
 *     I2C_ENA          
 *
 ******************************************************************************/
#define BCM84834_PHYC_CLK_CTLr (0x0001a829 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CLK_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CLK_CTL.
 *
 */
typedef union BCM84834_PHYC_CLK_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_clk_ctl[1];
	uint32_t _phyc_clk_ctl;
} BCM84834_PHYC_CLK_CTLr_t;

#define BCM84834_PHYC_CLK_CTLr_CLR(r) (r).phyc_clk_ctl[0] = 0
#define BCM84834_PHYC_CLK_CTLr_SET(r,d) (r).phyc_clk_ctl[0] = d
#define BCM84834_PHYC_CLK_CTLr_GET(r) (r).phyc_clk_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CLK_CTLr_I2C_ENAf_GET(r) (((r).phyc_clk_ctl[0]) & 0x1)
#define BCM84834_PHYC_CLK_CTLr_I2C_ENAf_SET(r,f) (r).phyc_clk_ctl[0]=(((r).phyc_clk_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CLK_CTL.
 *
 */
#define BCM84834_READ_PHYC_CLK_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CLK_CTLr,(_r._phyc_clk_ctl))
#define BCM84834_WRITE_PHYC_CLK_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CLK_CTLr,(_r._phyc_clk_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CLK_CTLr BCM84834_PHYC_CLK_CTLr
#define PHYC_CLK_CTLr_SIZE BCM84834_PHYC_CLK_CTLr_SIZE
typedef BCM84834_PHYC_CLK_CTLr_t PHYC_CLK_CTLr_t;
#define PHYC_CLK_CTLr_CLR BCM84834_PHYC_CLK_CTLr_CLR
#define PHYC_CLK_CTLr_SET BCM84834_PHYC_CLK_CTLr_SET
#define PHYC_CLK_CTLr_GET BCM84834_PHYC_CLK_CTLr_GET
#define PHYC_CLK_CTLr_I2C_ENAf_GET BCM84834_PHYC_CLK_CTLr_I2C_ENAf_GET
#define PHYC_CLK_CTLr_I2C_ENAf_SET BCM84834_PHYC_CLK_CTLr_I2C_ENAf_SET
#define READ_PHYC_CLK_CTLr BCM84834_READ_PHYC_CLK_CTLr
#define WRITE_PHYC_CLK_CTLr BCM84834_WRITE_PHYC_CLK_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CLK_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SLOW_CLK_CNT_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82a
 * DEVAD:    1
 * DESC:     Slow clock counter low
 * SIZE:     32
 * FIELDS:
 *     SLOW_CLK_CNT_LOW 
 *
 ******************************************************************************/
#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr (0x0001a82a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SLOW_CLK_CNT_LOW.
 *
 */
typedef union BCM84834_PHYC_SLOW_CLK_CNT_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_slow_clk_cnt_low[1];
	uint32_t _phyc_slow_clk_cnt_low;
} BCM84834_PHYC_SLOW_CLK_CNT_LOWr_t;

#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_CLR(r) (r).phyc_slow_clk_cnt_low[0] = 0
#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SET(r,d) (r).phyc_slow_clk_cnt_low[0] = d
#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_GET(r) (r).phyc_slow_clk_cnt_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_GET(r) (((r).phyc_slow_clk_cnt_low[0]) & 0xffff)
#define BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_SET(r,f) (r).phyc_slow_clk_cnt_low[0]=(((r).phyc_slow_clk_cnt_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SLOW_CLK_CNT_LOW.
 *
 */
#define BCM84834_READ_PHYC_SLOW_CLK_CNT_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SLOW_CLK_CNT_LOWr,(_r._phyc_slow_clk_cnt_low))
#define BCM84834_WRITE_PHYC_SLOW_CLK_CNT_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SLOW_CLK_CNT_LOWr,(_r._phyc_slow_clk_cnt_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SLOW_CLK_CNT_LOWr BCM84834_PHYC_SLOW_CLK_CNT_LOWr
#define PHYC_SLOW_CLK_CNT_LOWr_SIZE BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SIZE
typedef BCM84834_PHYC_SLOW_CLK_CNT_LOWr_t PHYC_SLOW_CLK_CNT_LOWr_t;
#define PHYC_SLOW_CLK_CNT_LOWr_CLR BCM84834_PHYC_SLOW_CLK_CNT_LOWr_CLR
#define PHYC_SLOW_CLK_CNT_LOWr_SET BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SET
#define PHYC_SLOW_CLK_CNT_LOWr_GET BCM84834_PHYC_SLOW_CLK_CNT_LOWr_GET
#define PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_GET BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_GET
#define PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_SET BCM84834_PHYC_SLOW_CLK_CNT_LOWr_SLOW_CLK_CNT_LOWf_SET
#define READ_PHYC_SLOW_CLK_CNT_LOWr BCM84834_READ_PHYC_SLOW_CLK_CNT_LOWr
#define WRITE_PHYC_SLOW_CLK_CNT_LOWr BCM84834_WRITE_PHYC_SLOW_CLK_CNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SLOW_CLK_CNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SLOW_CLK_CNT_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82b
 * DEVAD:    1
 * DESC:     Slow clock counter high
 * SIZE:     32
 * FIELDS:
 *     SLOW_CLK_CNT_HIGH 
 *
 ******************************************************************************/
#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr (0x0001a82b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SLOW_CLK_CNT_HIGH.
 *
 */
typedef union BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_slow_clk_cnt_high[1];
	uint32_t _phyc_slow_clk_cnt_high;
} BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_t;

#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_CLR(r) (r).phyc_slow_clk_cnt_high[0] = 0
#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SET(r,d) (r).phyc_slow_clk_cnt_high[0] = d
#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_GET(r) (r).phyc_slow_clk_cnt_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_GET(r) (((r).phyc_slow_clk_cnt_high[0]) & 0xff)
#define BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_SET(r,f) (r).phyc_slow_clk_cnt_high[0]=(((r).phyc_slow_clk_cnt_high[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_SLOW_CLK_CNT_HIGH.
 *
 */
#define BCM84834_READ_PHYC_SLOW_CLK_CNT_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SLOW_CLK_CNT_HIGHr,(_r._phyc_slow_clk_cnt_high))
#define BCM84834_WRITE_PHYC_SLOW_CLK_CNT_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SLOW_CLK_CNT_HIGHr,(_r._phyc_slow_clk_cnt_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SLOW_CLK_CNT_HIGHr BCM84834_PHYC_SLOW_CLK_CNT_HIGHr
#define PHYC_SLOW_CLK_CNT_HIGHr_SIZE BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SIZE
typedef BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_t PHYC_SLOW_CLK_CNT_HIGHr_t;
#define PHYC_SLOW_CLK_CNT_HIGHr_CLR BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_CLR
#define PHYC_SLOW_CLK_CNT_HIGHr_SET BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SET
#define PHYC_SLOW_CLK_CNT_HIGHr_GET BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_GET
#define PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_GET BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_GET
#define PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_SET BCM84834_PHYC_SLOW_CLK_CNT_HIGHr_SLOW_CLK_CNT_HIGHf_SET
#define READ_PHYC_SLOW_CLK_CNT_HIGHr BCM84834_READ_PHYC_SLOW_CLK_CNT_HIGHr
#define WRITE_PHYC_SLOW_CLK_CNT_HIGHr BCM84834_WRITE_PHYC_SLOW_CLK_CNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SLOW_CLK_CNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED0_MASK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82c
 * DEVAD:    1
 * DESC:     LED0 Mask
 * SIZE:     32
 * FIELDS:
 *     LED_MASK0        
 *     LED_MASK1        
 *     LED_MASK2        
 *     LED_MASK3        
 *     LED_MASK4        
 *     LED_MASK5        
 *     LED_MASK6        
 *     LED_MASK7        
 *     LED_MASK8        
 *     LED_MASK9        
 *     LED_MASK10       
 *     LED_MASK11       
 *     LED_MASK12       
 *     LED_MASK13       
 *     LED_MASK14       
 *     LED_MASK15       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED0_MASKr (0x0001a82c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED0_MASKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED0_MASK.
 *
 */
typedef union BCM84834_PHYC_LED0_MASKr_s {
	uint32_t v[1];
	uint32_t phyc_led0_mask[1];
	uint32_t _phyc_led0_mask;
} BCM84834_PHYC_LED0_MASKr_t;

#define BCM84834_PHYC_LED0_MASKr_CLR(r) (r).phyc_led0_mask[0] = 0
#define BCM84834_PHYC_LED0_MASKr_SET(r,d) (r).phyc_led0_mask[0] = d
#define BCM84834_PHYC_LED0_MASKr_GET(r) (r).phyc_led0_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED0_MASKr_LED_MASK15f_GET(r) ((((r).phyc_led0_mask[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK15f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK14f_GET(r) ((((r).phyc_led0_mask[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK14f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK13f_GET(r) ((((r).phyc_led0_mask[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK13f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK12f_GET(r) ((((r).phyc_led0_mask[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK12f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK11f_GET(r) ((((r).phyc_led0_mask[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK11f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK10f_GET(r) ((((r).phyc_led0_mask[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK10f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK9f_GET(r) ((((r).phyc_led0_mask[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK9f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK8f_GET(r) ((((r).phyc_led0_mask[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK8f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK7f_GET(r) ((((r).phyc_led0_mask[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK7f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK6f_GET(r) ((((r).phyc_led0_mask[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK6f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK5f_GET(r) ((((r).phyc_led0_mask[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK5f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK4f_GET(r) ((((r).phyc_led0_mask[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK4f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK3f_GET(r) ((((r).phyc_led0_mask[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK3f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK2f_GET(r) ((((r).phyc_led0_mask[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK2f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK1f_GET(r) ((((r).phyc_led0_mask[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK1f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED0_MASKr_LED_MASK0f_GET(r) (((r).phyc_led0_mask[0]) & 0x1)
#define BCM84834_PHYC_LED0_MASKr_LED_MASK0f_SET(r,f) (r).phyc_led0_mask[0]=(((r).phyc_led0_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED0_MASK.
 *
 */
#define BCM84834_READ_PHYC_LED0_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED0_MASKr,(_r._phyc_led0_mask))
#define BCM84834_WRITE_PHYC_LED0_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED0_MASKr,(_r._phyc_led0_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED0_MASKr BCM84834_PHYC_LED0_MASKr
#define PHYC_LED0_MASKr_SIZE BCM84834_PHYC_LED0_MASKr_SIZE
typedef BCM84834_PHYC_LED0_MASKr_t PHYC_LED0_MASKr_t;
#define PHYC_LED0_MASKr_CLR BCM84834_PHYC_LED0_MASKr_CLR
#define PHYC_LED0_MASKr_SET BCM84834_PHYC_LED0_MASKr_SET
#define PHYC_LED0_MASKr_GET BCM84834_PHYC_LED0_MASKr_GET
#define PHYC_LED0_MASKr_LED_MASK15f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK15f_GET
#define PHYC_LED0_MASKr_LED_MASK15f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK15f_SET
#define PHYC_LED0_MASKr_LED_MASK14f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK14f_GET
#define PHYC_LED0_MASKr_LED_MASK14f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK14f_SET
#define PHYC_LED0_MASKr_LED_MASK13f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK13f_GET
#define PHYC_LED0_MASKr_LED_MASK13f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK13f_SET
#define PHYC_LED0_MASKr_LED_MASK12f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK12f_GET
#define PHYC_LED0_MASKr_LED_MASK12f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK12f_SET
#define PHYC_LED0_MASKr_LED_MASK11f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK11f_GET
#define PHYC_LED0_MASKr_LED_MASK11f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK11f_SET
#define PHYC_LED0_MASKr_LED_MASK10f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK10f_GET
#define PHYC_LED0_MASKr_LED_MASK10f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK10f_SET
#define PHYC_LED0_MASKr_LED_MASK9f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK9f_GET
#define PHYC_LED0_MASKr_LED_MASK9f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK9f_SET
#define PHYC_LED0_MASKr_LED_MASK8f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK8f_GET
#define PHYC_LED0_MASKr_LED_MASK8f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK8f_SET
#define PHYC_LED0_MASKr_LED_MASK7f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK7f_GET
#define PHYC_LED0_MASKr_LED_MASK7f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK7f_SET
#define PHYC_LED0_MASKr_LED_MASK6f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK6f_GET
#define PHYC_LED0_MASKr_LED_MASK6f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK6f_SET
#define PHYC_LED0_MASKr_LED_MASK5f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK5f_GET
#define PHYC_LED0_MASKr_LED_MASK5f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK5f_SET
#define PHYC_LED0_MASKr_LED_MASK4f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK4f_GET
#define PHYC_LED0_MASKr_LED_MASK4f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK4f_SET
#define PHYC_LED0_MASKr_LED_MASK3f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK3f_GET
#define PHYC_LED0_MASKr_LED_MASK3f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK3f_SET
#define PHYC_LED0_MASKr_LED_MASK2f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK2f_GET
#define PHYC_LED0_MASKr_LED_MASK2f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK2f_SET
#define PHYC_LED0_MASKr_LED_MASK1f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK1f_GET
#define PHYC_LED0_MASKr_LED_MASK1f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK1f_SET
#define PHYC_LED0_MASKr_LED_MASK0f_GET BCM84834_PHYC_LED0_MASKr_LED_MASK0f_GET
#define PHYC_LED0_MASKr_LED_MASK0f_SET BCM84834_PHYC_LED0_MASKr_LED_MASK0f_SET
#define READ_PHYC_LED0_MASKr BCM84834_READ_PHYC_LED0_MASKr
#define WRITE_PHYC_LED0_MASKr BCM84834_WRITE_PHYC_LED0_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED0_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED0_MASK_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82d
 * DEVAD:    1
 * DESC:     LED0 Mask High
 * SIZE:     32
 * FIELDS:
 *     LED_MASK16       
 *     LED_MASK17       
 *     LED_MASK18       
 *     LED_MASK19       
 *     LED_MASK20       
 *     LED_MASK21       
 *     LED_MASK22       
 *     LED_MASK23       
 *     LED_MASK24       
 *     LED_MASK25       
 *     LED_MASK26       
 *     LED_MASK27       
 *     LED_MASK28       
 *     LED_MASK29       
 *     LED_MASK30       
 *     LED_MASK31       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED0_MASK_Hr (0x0001a82d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED0_MASK_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED0_MASK_H.
 *
 */
typedef union BCM84834_PHYC_LED0_MASK_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led0_mask_h[1];
	uint32_t _phyc_led0_mask_h;
} BCM84834_PHYC_LED0_MASK_Hr_t;

#define BCM84834_PHYC_LED0_MASK_Hr_CLR(r) (r).phyc_led0_mask_h[0] = 0
#define BCM84834_PHYC_LED0_MASK_Hr_SET(r,d) (r).phyc_led0_mask_h[0] = d
#define BCM84834_PHYC_LED0_MASK_Hr_GET(r) (r).phyc_led0_mask_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK31f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK31f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK30f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK30f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK29f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK29f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK28f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK28f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK27f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK27f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK26f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK26f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK25f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK25f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK24f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK24f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK23f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK23f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK22f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK22f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK21f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK21f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK20f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK20f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK19f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK19f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK18f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK18f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK17f_GET(r) ((((r).phyc_led0_mask_h[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK17f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK16f_GET(r) (((r).phyc_led0_mask_h[0]) & 0x1)
#define BCM84834_PHYC_LED0_MASK_Hr_LED_MASK16f_SET(r,f) (r).phyc_led0_mask_h[0]=(((r).phyc_led0_mask_h[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED0_MASK_H.
 *
 */
#define BCM84834_READ_PHYC_LED0_MASK_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED0_MASK_Hr,(_r._phyc_led0_mask_h))
#define BCM84834_WRITE_PHYC_LED0_MASK_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED0_MASK_Hr,(_r._phyc_led0_mask_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED0_MASK_Hr BCM84834_PHYC_LED0_MASK_Hr
#define PHYC_LED0_MASK_Hr_SIZE BCM84834_PHYC_LED0_MASK_Hr_SIZE
typedef BCM84834_PHYC_LED0_MASK_Hr_t PHYC_LED0_MASK_Hr_t;
#define PHYC_LED0_MASK_Hr_CLR BCM84834_PHYC_LED0_MASK_Hr_CLR
#define PHYC_LED0_MASK_Hr_SET BCM84834_PHYC_LED0_MASK_Hr_SET
#define PHYC_LED0_MASK_Hr_GET BCM84834_PHYC_LED0_MASK_Hr_GET
#define PHYC_LED0_MASK_Hr_LED_MASK31f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK31f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK31f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK31f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK30f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK30f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK30f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK30f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK29f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK29f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK29f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK29f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK28f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK28f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK28f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK28f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK27f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK27f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK27f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK27f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK26f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK26f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK26f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK26f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK25f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK25f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK25f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK25f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK24f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK24f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK24f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK24f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK23f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK23f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK23f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK23f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK22f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK22f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK22f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK22f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK21f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK21f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK21f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK21f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK20f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK20f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK20f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK20f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK19f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK19f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK19f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK19f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK18f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK18f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK18f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK18f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK17f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK17f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK17f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK17f_SET
#define PHYC_LED0_MASK_Hr_LED_MASK16f_GET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK16f_GET
#define PHYC_LED0_MASK_Hr_LED_MASK16f_SET BCM84834_PHYC_LED0_MASK_Hr_LED_MASK16f_SET
#define READ_PHYC_LED0_MASK_Hr BCM84834_READ_PHYC_LED0_MASK_Hr
#define WRITE_PHYC_LED0_MASK_Hr BCM84834_WRITE_PHYC_LED0_MASK_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED0_MASK_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED0_BLINK_CYCLE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82e
 * DEVAD:    1
 * DESC:     LED0 Blink Cycle Counter
 * SIZE:     32
 * FIELDS:
 *     LED_BLINK_CYCLE_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr (0x0001a82e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED0_BLINK_CYCLE_CNT.
 *
 */
typedef union BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_led0_blink_cycle_cnt[1];
	uint32_t _phyc_led0_blink_cycle_cnt;
} BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_t;

#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_CLR(r) (r).phyc_led0_blink_cycle_cnt[0] = 0
#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_SET(r,d) (r).phyc_led0_blink_cycle_cnt[0] = d
#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_GET(r) (r).phyc_led0_blink_cycle_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET(r) (((r).phyc_led0_blink_cycle_cnt[0]) & 0xf)
#define BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET(r,f) (r).phyc_led0_blink_cycle_cnt[0]=(((r).phyc_led0_blink_cycle_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LED0_BLINK_CYCLE_CNT.
 *
 */
#define BCM84834_READ_PHYC_LED0_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr,(_r._phyc_led0_blink_cycle_cnt))
#define BCM84834_WRITE_PHYC_LED0_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr,(_r._phyc_led0_blink_cycle_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED0_BLINK_CYCLE_CNTr BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr
#define PHYC_LED0_BLINK_CYCLE_CNTr_SIZE BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_SIZE
typedef BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_t PHYC_LED0_BLINK_CYCLE_CNTr_t;
#define PHYC_LED0_BLINK_CYCLE_CNTr_CLR BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_CLR
#define PHYC_LED0_BLINK_CYCLE_CNTr_SET BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_SET
#define PHYC_LED0_BLINK_CYCLE_CNTr_GET BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_GET
#define PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET
#define PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET
#define READ_PHYC_LED0_BLINK_CYCLE_CNTr BCM84834_READ_PHYC_LED0_BLINK_CYCLE_CNTr
#define WRITE_PHYC_LED0_BLINK_CYCLE_CNTr BCM84834_WRITE_PHYC_LED0_BLINK_CYCLE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED0_BLINK_CYCLE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED1_MASK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa82f
 * DEVAD:    1
 * DESC:     LED1 Mask
 * SIZE:     32
 * FIELDS:
 *     LED_MASK0        
 *     LED_MASK1        
 *     LED_MASK2        
 *     LED_MASK3        
 *     LED_MASK4        
 *     LED_MASK5        
 *     LED_MASK6        
 *     LED_MASK7        
 *     LED_MASK8        
 *     LED_MASK9        
 *     LED_MASK10       
 *     LED_MASK11       
 *     LED_MASK12       
 *     LED_MASK13       
 *     LED_MASK14       
 *     LED_MASK15       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED1_MASKr (0x0001a82f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED1_MASKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED1_MASK.
 *
 */
typedef union BCM84834_PHYC_LED1_MASKr_s {
	uint32_t v[1];
	uint32_t phyc_led1_mask[1];
	uint32_t _phyc_led1_mask;
} BCM84834_PHYC_LED1_MASKr_t;

#define BCM84834_PHYC_LED1_MASKr_CLR(r) (r).phyc_led1_mask[0] = 0
#define BCM84834_PHYC_LED1_MASKr_SET(r,d) (r).phyc_led1_mask[0] = d
#define BCM84834_PHYC_LED1_MASKr_GET(r) (r).phyc_led1_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED1_MASKr_LED_MASK15f_GET(r) ((((r).phyc_led1_mask[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK15f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK14f_GET(r) ((((r).phyc_led1_mask[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK14f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK13f_GET(r) ((((r).phyc_led1_mask[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK13f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK12f_GET(r) ((((r).phyc_led1_mask[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK12f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK11f_GET(r) ((((r).phyc_led1_mask[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK11f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK10f_GET(r) ((((r).phyc_led1_mask[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK10f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK9f_GET(r) ((((r).phyc_led1_mask[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK9f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK8f_GET(r) ((((r).phyc_led1_mask[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK8f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK7f_GET(r) ((((r).phyc_led1_mask[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK7f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK6f_GET(r) ((((r).phyc_led1_mask[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK6f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK5f_GET(r) ((((r).phyc_led1_mask[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK5f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK4f_GET(r) ((((r).phyc_led1_mask[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK4f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK3f_GET(r) ((((r).phyc_led1_mask[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK3f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK2f_GET(r) ((((r).phyc_led1_mask[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK2f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK1f_GET(r) ((((r).phyc_led1_mask[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK1f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED1_MASKr_LED_MASK0f_GET(r) (((r).phyc_led1_mask[0]) & 0x1)
#define BCM84834_PHYC_LED1_MASKr_LED_MASK0f_SET(r,f) (r).phyc_led1_mask[0]=(((r).phyc_led1_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED1_MASK.
 *
 */
#define BCM84834_READ_PHYC_LED1_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED1_MASKr,(_r._phyc_led1_mask))
#define BCM84834_WRITE_PHYC_LED1_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED1_MASKr,(_r._phyc_led1_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED1_MASKr BCM84834_PHYC_LED1_MASKr
#define PHYC_LED1_MASKr_SIZE BCM84834_PHYC_LED1_MASKr_SIZE
typedef BCM84834_PHYC_LED1_MASKr_t PHYC_LED1_MASKr_t;
#define PHYC_LED1_MASKr_CLR BCM84834_PHYC_LED1_MASKr_CLR
#define PHYC_LED1_MASKr_SET BCM84834_PHYC_LED1_MASKr_SET
#define PHYC_LED1_MASKr_GET BCM84834_PHYC_LED1_MASKr_GET
#define PHYC_LED1_MASKr_LED_MASK15f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK15f_GET
#define PHYC_LED1_MASKr_LED_MASK15f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK15f_SET
#define PHYC_LED1_MASKr_LED_MASK14f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK14f_GET
#define PHYC_LED1_MASKr_LED_MASK14f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK14f_SET
#define PHYC_LED1_MASKr_LED_MASK13f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK13f_GET
#define PHYC_LED1_MASKr_LED_MASK13f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK13f_SET
#define PHYC_LED1_MASKr_LED_MASK12f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK12f_GET
#define PHYC_LED1_MASKr_LED_MASK12f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK12f_SET
#define PHYC_LED1_MASKr_LED_MASK11f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK11f_GET
#define PHYC_LED1_MASKr_LED_MASK11f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK11f_SET
#define PHYC_LED1_MASKr_LED_MASK10f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK10f_GET
#define PHYC_LED1_MASKr_LED_MASK10f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK10f_SET
#define PHYC_LED1_MASKr_LED_MASK9f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK9f_GET
#define PHYC_LED1_MASKr_LED_MASK9f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK9f_SET
#define PHYC_LED1_MASKr_LED_MASK8f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK8f_GET
#define PHYC_LED1_MASKr_LED_MASK8f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK8f_SET
#define PHYC_LED1_MASKr_LED_MASK7f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK7f_GET
#define PHYC_LED1_MASKr_LED_MASK7f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK7f_SET
#define PHYC_LED1_MASKr_LED_MASK6f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK6f_GET
#define PHYC_LED1_MASKr_LED_MASK6f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK6f_SET
#define PHYC_LED1_MASKr_LED_MASK5f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK5f_GET
#define PHYC_LED1_MASKr_LED_MASK5f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK5f_SET
#define PHYC_LED1_MASKr_LED_MASK4f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK4f_GET
#define PHYC_LED1_MASKr_LED_MASK4f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK4f_SET
#define PHYC_LED1_MASKr_LED_MASK3f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK3f_GET
#define PHYC_LED1_MASKr_LED_MASK3f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK3f_SET
#define PHYC_LED1_MASKr_LED_MASK2f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK2f_GET
#define PHYC_LED1_MASKr_LED_MASK2f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK2f_SET
#define PHYC_LED1_MASKr_LED_MASK1f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK1f_GET
#define PHYC_LED1_MASKr_LED_MASK1f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK1f_SET
#define PHYC_LED1_MASKr_LED_MASK0f_GET BCM84834_PHYC_LED1_MASKr_LED_MASK0f_GET
#define PHYC_LED1_MASKr_LED_MASK0f_SET BCM84834_PHYC_LED1_MASKr_LED_MASK0f_SET
#define READ_PHYC_LED1_MASKr BCM84834_READ_PHYC_LED1_MASKr
#define WRITE_PHYC_LED1_MASKr BCM84834_WRITE_PHYC_LED1_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED1_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED1_MASK_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa830
 * DEVAD:    1
 * DESC:     LED1 Mask High
 * SIZE:     32
 * FIELDS:
 *     LED_MASK16       
 *     LED_MASK17       
 *     LED_MASK18       
 *     LED_MASK19       
 *     LED_MASK20       
 *     LED_MASK21       
 *     LED_MASK22       
 *     LED_MASK23       
 *     LED_MASK24       
 *     LED_MASK25       
 *     LED_MASK26       
 *     LED_MASK27       
 *     LED_MASK28       
 *     LED_MASK29       
 *     LED_MASK30       
 *     LED_MASK31       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED1_MASK_Hr (0x0001a830 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED1_MASK_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED1_MASK_H.
 *
 */
typedef union BCM84834_PHYC_LED1_MASK_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led1_mask_h[1];
	uint32_t _phyc_led1_mask_h;
} BCM84834_PHYC_LED1_MASK_Hr_t;

#define BCM84834_PHYC_LED1_MASK_Hr_CLR(r) (r).phyc_led1_mask_h[0] = 0
#define BCM84834_PHYC_LED1_MASK_Hr_SET(r,d) (r).phyc_led1_mask_h[0] = d
#define BCM84834_PHYC_LED1_MASK_Hr_GET(r) (r).phyc_led1_mask_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK31f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK31f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK30f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK30f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK29f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK29f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK28f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK28f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK27f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK27f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK26f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK26f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK25f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK25f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK24f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK24f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK23f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK23f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK22f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK22f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK21f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK21f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK20f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK20f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK19f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK19f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK18f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK18f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK17f_GET(r) ((((r).phyc_led1_mask_h[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK17f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK16f_GET(r) (((r).phyc_led1_mask_h[0]) & 0x1)
#define BCM84834_PHYC_LED1_MASK_Hr_LED_MASK16f_SET(r,f) (r).phyc_led1_mask_h[0]=(((r).phyc_led1_mask_h[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED1_MASK_H.
 *
 */
#define BCM84834_READ_PHYC_LED1_MASK_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED1_MASK_Hr,(_r._phyc_led1_mask_h))
#define BCM84834_WRITE_PHYC_LED1_MASK_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED1_MASK_Hr,(_r._phyc_led1_mask_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED1_MASK_Hr BCM84834_PHYC_LED1_MASK_Hr
#define PHYC_LED1_MASK_Hr_SIZE BCM84834_PHYC_LED1_MASK_Hr_SIZE
typedef BCM84834_PHYC_LED1_MASK_Hr_t PHYC_LED1_MASK_Hr_t;
#define PHYC_LED1_MASK_Hr_CLR BCM84834_PHYC_LED1_MASK_Hr_CLR
#define PHYC_LED1_MASK_Hr_SET BCM84834_PHYC_LED1_MASK_Hr_SET
#define PHYC_LED1_MASK_Hr_GET BCM84834_PHYC_LED1_MASK_Hr_GET
#define PHYC_LED1_MASK_Hr_LED_MASK31f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK31f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK31f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK31f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK30f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK30f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK30f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK30f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK29f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK29f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK29f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK29f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK28f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK28f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK28f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK28f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK27f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK27f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK27f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK27f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK26f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK26f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK26f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK26f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK25f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK25f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK25f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK25f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK24f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK24f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK24f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK24f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK23f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK23f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK23f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK23f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK22f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK22f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK22f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK22f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK21f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK21f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK21f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK21f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK20f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK20f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK20f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK20f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK19f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK19f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK19f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK19f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK18f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK18f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK18f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK18f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK17f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK17f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK17f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK17f_SET
#define PHYC_LED1_MASK_Hr_LED_MASK16f_GET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK16f_GET
#define PHYC_LED1_MASK_Hr_LED_MASK16f_SET BCM84834_PHYC_LED1_MASK_Hr_LED_MASK16f_SET
#define READ_PHYC_LED1_MASK_Hr BCM84834_READ_PHYC_LED1_MASK_Hr
#define WRITE_PHYC_LED1_MASK_Hr BCM84834_WRITE_PHYC_LED1_MASK_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED1_MASK_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED1_BLINK_CYCLE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa831
 * DEVAD:    1
 * DESC:     LED1 Blink Cycle Counter
 * SIZE:     32
 * FIELDS:
 *     LED_BLINK_CYCLE_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr (0x0001a831 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED1_BLINK_CYCLE_CNT.
 *
 */
typedef union BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_led1_blink_cycle_cnt[1];
	uint32_t _phyc_led1_blink_cycle_cnt;
} BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_t;

#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_CLR(r) (r).phyc_led1_blink_cycle_cnt[0] = 0
#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_SET(r,d) (r).phyc_led1_blink_cycle_cnt[0] = d
#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_GET(r) (r).phyc_led1_blink_cycle_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET(r) (((r).phyc_led1_blink_cycle_cnt[0]) & 0xf)
#define BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET(r,f) (r).phyc_led1_blink_cycle_cnt[0]=(((r).phyc_led1_blink_cycle_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LED1_BLINK_CYCLE_CNT.
 *
 */
#define BCM84834_READ_PHYC_LED1_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr,(_r._phyc_led1_blink_cycle_cnt))
#define BCM84834_WRITE_PHYC_LED1_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr,(_r._phyc_led1_blink_cycle_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED1_BLINK_CYCLE_CNTr BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr
#define PHYC_LED1_BLINK_CYCLE_CNTr_SIZE BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_SIZE
typedef BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_t PHYC_LED1_BLINK_CYCLE_CNTr_t;
#define PHYC_LED1_BLINK_CYCLE_CNTr_CLR BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_CLR
#define PHYC_LED1_BLINK_CYCLE_CNTr_SET BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_SET
#define PHYC_LED1_BLINK_CYCLE_CNTr_GET BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_GET
#define PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET
#define PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET
#define READ_PHYC_LED1_BLINK_CYCLE_CNTr BCM84834_READ_PHYC_LED1_BLINK_CYCLE_CNTr
#define WRITE_PHYC_LED1_BLINK_CYCLE_CNTr BCM84834_WRITE_PHYC_LED1_BLINK_CYCLE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED1_BLINK_CYCLE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED2_MASK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa832
 * DEVAD:    1
 * DESC:     LED2 Mask
 * SIZE:     32
 * FIELDS:
 *     LED_MASK0        
 *     LED_MASK1        
 *     LED_MASK2        
 *     LED_MASK3        
 *     LED_MASK4        
 *     LED_MASK5        
 *     LED_MASK6        
 *     LED_MASK7        
 *     LED_MASK8        
 *     LED_MASK9        
 *     LED_MASK10       
 *     LED_MASK11       
 *     LED_MASK12       
 *     LED_MASK13       
 *     LED_MASK14       
 *     LED_MASK15       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED2_MASKr (0x0001a832 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED2_MASKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED2_MASK.
 *
 */
typedef union BCM84834_PHYC_LED2_MASKr_s {
	uint32_t v[1];
	uint32_t phyc_led2_mask[1];
	uint32_t _phyc_led2_mask;
} BCM84834_PHYC_LED2_MASKr_t;

#define BCM84834_PHYC_LED2_MASKr_CLR(r) (r).phyc_led2_mask[0] = 0
#define BCM84834_PHYC_LED2_MASKr_SET(r,d) (r).phyc_led2_mask[0] = d
#define BCM84834_PHYC_LED2_MASKr_GET(r) (r).phyc_led2_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED2_MASKr_LED_MASK15f_GET(r) ((((r).phyc_led2_mask[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK15f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK14f_GET(r) ((((r).phyc_led2_mask[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK14f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK13f_GET(r) ((((r).phyc_led2_mask[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK13f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK12f_GET(r) ((((r).phyc_led2_mask[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK12f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK11f_GET(r) ((((r).phyc_led2_mask[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK11f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK10f_GET(r) ((((r).phyc_led2_mask[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK10f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK9f_GET(r) ((((r).phyc_led2_mask[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK9f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK8f_GET(r) ((((r).phyc_led2_mask[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK8f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK7f_GET(r) ((((r).phyc_led2_mask[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK7f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK6f_GET(r) ((((r).phyc_led2_mask[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK6f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK5f_GET(r) ((((r).phyc_led2_mask[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK5f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK4f_GET(r) ((((r).phyc_led2_mask[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK4f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK3f_GET(r) ((((r).phyc_led2_mask[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK3f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK2f_GET(r) ((((r).phyc_led2_mask[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK2f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK1f_GET(r) ((((r).phyc_led2_mask[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK1f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED2_MASKr_LED_MASK0f_GET(r) (((r).phyc_led2_mask[0]) & 0x1)
#define BCM84834_PHYC_LED2_MASKr_LED_MASK0f_SET(r,f) (r).phyc_led2_mask[0]=(((r).phyc_led2_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED2_MASK.
 *
 */
#define BCM84834_READ_PHYC_LED2_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED2_MASKr,(_r._phyc_led2_mask))
#define BCM84834_WRITE_PHYC_LED2_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED2_MASKr,(_r._phyc_led2_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED2_MASKr BCM84834_PHYC_LED2_MASKr
#define PHYC_LED2_MASKr_SIZE BCM84834_PHYC_LED2_MASKr_SIZE
typedef BCM84834_PHYC_LED2_MASKr_t PHYC_LED2_MASKr_t;
#define PHYC_LED2_MASKr_CLR BCM84834_PHYC_LED2_MASKr_CLR
#define PHYC_LED2_MASKr_SET BCM84834_PHYC_LED2_MASKr_SET
#define PHYC_LED2_MASKr_GET BCM84834_PHYC_LED2_MASKr_GET
#define PHYC_LED2_MASKr_LED_MASK15f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK15f_GET
#define PHYC_LED2_MASKr_LED_MASK15f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK15f_SET
#define PHYC_LED2_MASKr_LED_MASK14f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK14f_GET
#define PHYC_LED2_MASKr_LED_MASK14f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK14f_SET
#define PHYC_LED2_MASKr_LED_MASK13f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK13f_GET
#define PHYC_LED2_MASKr_LED_MASK13f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK13f_SET
#define PHYC_LED2_MASKr_LED_MASK12f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK12f_GET
#define PHYC_LED2_MASKr_LED_MASK12f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK12f_SET
#define PHYC_LED2_MASKr_LED_MASK11f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK11f_GET
#define PHYC_LED2_MASKr_LED_MASK11f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK11f_SET
#define PHYC_LED2_MASKr_LED_MASK10f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK10f_GET
#define PHYC_LED2_MASKr_LED_MASK10f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK10f_SET
#define PHYC_LED2_MASKr_LED_MASK9f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK9f_GET
#define PHYC_LED2_MASKr_LED_MASK9f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK9f_SET
#define PHYC_LED2_MASKr_LED_MASK8f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK8f_GET
#define PHYC_LED2_MASKr_LED_MASK8f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK8f_SET
#define PHYC_LED2_MASKr_LED_MASK7f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK7f_GET
#define PHYC_LED2_MASKr_LED_MASK7f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK7f_SET
#define PHYC_LED2_MASKr_LED_MASK6f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK6f_GET
#define PHYC_LED2_MASKr_LED_MASK6f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK6f_SET
#define PHYC_LED2_MASKr_LED_MASK5f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK5f_GET
#define PHYC_LED2_MASKr_LED_MASK5f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK5f_SET
#define PHYC_LED2_MASKr_LED_MASK4f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK4f_GET
#define PHYC_LED2_MASKr_LED_MASK4f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK4f_SET
#define PHYC_LED2_MASKr_LED_MASK3f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK3f_GET
#define PHYC_LED2_MASKr_LED_MASK3f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK3f_SET
#define PHYC_LED2_MASKr_LED_MASK2f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK2f_GET
#define PHYC_LED2_MASKr_LED_MASK2f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK2f_SET
#define PHYC_LED2_MASKr_LED_MASK1f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK1f_GET
#define PHYC_LED2_MASKr_LED_MASK1f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK1f_SET
#define PHYC_LED2_MASKr_LED_MASK0f_GET BCM84834_PHYC_LED2_MASKr_LED_MASK0f_GET
#define PHYC_LED2_MASKr_LED_MASK0f_SET BCM84834_PHYC_LED2_MASKr_LED_MASK0f_SET
#define READ_PHYC_LED2_MASKr BCM84834_READ_PHYC_LED2_MASKr
#define WRITE_PHYC_LED2_MASKr BCM84834_WRITE_PHYC_LED2_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED2_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED2_MASK_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa833
 * DEVAD:    1
 * DESC:     LED2 Mask High
 * SIZE:     32
 * FIELDS:
 *     LED_MASK16       
 *     LED_MASK17       
 *     LED_MASK18       
 *     LED_MASK19       
 *     LED_MASK20       
 *     LED_MASK21       
 *     LED_MASK22       
 *     LED_MASK23       
 *     LED_MASK24       
 *     LED_MASK25       
 *     LED_MASK26       
 *     LED_MASK27       
 *     LED_MASK28       
 *     LED_MASK29       
 *     LED_MASK30       
 *     LED_MASK31       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED2_MASK_Hr (0x0001a833 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED2_MASK_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED2_MASK_H.
 *
 */
typedef union BCM84834_PHYC_LED2_MASK_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led2_mask_h[1];
	uint32_t _phyc_led2_mask_h;
} BCM84834_PHYC_LED2_MASK_Hr_t;

#define BCM84834_PHYC_LED2_MASK_Hr_CLR(r) (r).phyc_led2_mask_h[0] = 0
#define BCM84834_PHYC_LED2_MASK_Hr_SET(r,d) (r).phyc_led2_mask_h[0] = d
#define BCM84834_PHYC_LED2_MASK_Hr_GET(r) (r).phyc_led2_mask_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK31f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK31f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK30f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK30f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK29f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK29f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK28f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK28f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK27f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK27f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK26f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK26f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK25f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK25f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK24f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK24f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK23f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK23f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK22f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK22f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK21f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK21f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK20f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK20f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK19f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK19f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK18f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK18f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK17f_GET(r) ((((r).phyc_led2_mask_h[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK17f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK16f_GET(r) (((r).phyc_led2_mask_h[0]) & 0x1)
#define BCM84834_PHYC_LED2_MASK_Hr_LED_MASK16f_SET(r,f) (r).phyc_led2_mask_h[0]=(((r).phyc_led2_mask_h[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED2_MASK_H.
 *
 */
#define BCM84834_READ_PHYC_LED2_MASK_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED2_MASK_Hr,(_r._phyc_led2_mask_h))
#define BCM84834_WRITE_PHYC_LED2_MASK_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED2_MASK_Hr,(_r._phyc_led2_mask_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED2_MASK_Hr BCM84834_PHYC_LED2_MASK_Hr
#define PHYC_LED2_MASK_Hr_SIZE BCM84834_PHYC_LED2_MASK_Hr_SIZE
typedef BCM84834_PHYC_LED2_MASK_Hr_t PHYC_LED2_MASK_Hr_t;
#define PHYC_LED2_MASK_Hr_CLR BCM84834_PHYC_LED2_MASK_Hr_CLR
#define PHYC_LED2_MASK_Hr_SET BCM84834_PHYC_LED2_MASK_Hr_SET
#define PHYC_LED2_MASK_Hr_GET BCM84834_PHYC_LED2_MASK_Hr_GET
#define PHYC_LED2_MASK_Hr_LED_MASK31f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK31f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK31f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK31f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK30f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK30f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK30f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK30f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK29f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK29f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK29f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK29f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK28f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK28f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK28f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK28f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK27f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK27f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK27f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK27f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK26f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK26f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK26f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK26f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK25f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK25f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK25f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK25f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK24f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK24f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK24f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK24f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK23f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK23f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK23f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK23f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK22f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK22f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK22f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK22f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK21f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK21f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK21f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK21f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK20f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK20f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK20f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK20f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK19f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK19f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK19f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK19f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK18f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK18f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK18f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK18f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK17f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK17f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK17f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK17f_SET
#define PHYC_LED2_MASK_Hr_LED_MASK16f_GET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK16f_GET
#define PHYC_LED2_MASK_Hr_LED_MASK16f_SET BCM84834_PHYC_LED2_MASK_Hr_LED_MASK16f_SET
#define READ_PHYC_LED2_MASK_Hr BCM84834_READ_PHYC_LED2_MASK_Hr
#define WRITE_PHYC_LED2_MASK_Hr BCM84834_WRITE_PHYC_LED2_MASK_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED2_MASK_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED2_BLINK_CYCLE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa834
 * DEVAD:    1
 * DESC:     LED2 Blink Cycle Counter
 * SIZE:     32
 * FIELDS:
 *     LED_BLINK_CYCLE_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr (0x0001a834 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED2_BLINK_CYCLE_CNT.
 *
 */
typedef union BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_led2_blink_cycle_cnt[1];
	uint32_t _phyc_led2_blink_cycle_cnt;
} BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_t;

#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_CLR(r) (r).phyc_led2_blink_cycle_cnt[0] = 0
#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_SET(r,d) (r).phyc_led2_blink_cycle_cnt[0] = d
#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_GET(r) (r).phyc_led2_blink_cycle_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET(r) (((r).phyc_led2_blink_cycle_cnt[0]) & 0xf)
#define BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET(r,f) (r).phyc_led2_blink_cycle_cnt[0]=(((r).phyc_led2_blink_cycle_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LED2_BLINK_CYCLE_CNT.
 *
 */
#define BCM84834_READ_PHYC_LED2_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr,(_r._phyc_led2_blink_cycle_cnt))
#define BCM84834_WRITE_PHYC_LED2_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr,(_r._phyc_led2_blink_cycle_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED2_BLINK_CYCLE_CNTr BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr
#define PHYC_LED2_BLINK_CYCLE_CNTr_SIZE BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_SIZE
typedef BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_t PHYC_LED2_BLINK_CYCLE_CNTr_t;
#define PHYC_LED2_BLINK_CYCLE_CNTr_CLR BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_CLR
#define PHYC_LED2_BLINK_CYCLE_CNTr_SET BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_SET
#define PHYC_LED2_BLINK_CYCLE_CNTr_GET BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_GET
#define PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET
#define PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET
#define READ_PHYC_LED2_BLINK_CYCLE_CNTr BCM84834_READ_PHYC_LED2_BLINK_CYCLE_CNTr
#define WRITE_PHYC_LED2_BLINK_CYCLE_CNTr BCM84834_WRITE_PHYC_LED2_BLINK_CYCLE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED2_BLINK_CYCLE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED3_MASK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa835
 * DEVAD:    1
 * DESC:     LED3 Mask
 * SIZE:     32
 * FIELDS:
 *     LED_MASK0        
 *     LED_MASK1        
 *     LED_MASK2        
 *     LED_MASK3        
 *     LED_MASK4        
 *     LED_MASK5        
 *     LED_MASK6        
 *     LED_MASK7        
 *     LED_MASK8        
 *     LED_MASK9        
 *     LED_MASK10       
 *     LED_MASK11       
 *     LED_MASK12       
 *     LED_MASK13       
 *     LED_MASK14       
 *     LED_MASK15       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED3_MASKr (0x0001a835 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED3_MASKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED3_MASK.
 *
 */
typedef union BCM84834_PHYC_LED3_MASKr_s {
	uint32_t v[1];
	uint32_t phyc_led3_mask[1];
	uint32_t _phyc_led3_mask;
} BCM84834_PHYC_LED3_MASKr_t;

#define BCM84834_PHYC_LED3_MASKr_CLR(r) (r).phyc_led3_mask[0] = 0
#define BCM84834_PHYC_LED3_MASKr_SET(r,d) (r).phyc_led3_mask[0] = d
#define BCM84834_PHYC_LED3_MASKr_GET(r) (r).phyc_led3_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED3_MASKr_LED_MASK15f_GET(r) ((((r).phyc_led3_mask[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK15f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK14f_GET(r) ((((r).phyc_led3_mask[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK14f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK13f_GET(r) ((((r).phyc_led3_mask[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK13f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK12f_GET(r) ((((r).phyc_led3_mask[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK12f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK11f_GET(r) ((((r).phyc_led3_mask[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK11f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK10f_GET(r) ((((r).phyc_led3_mask[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK10f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK9f_GET(r) ((((r).phyc_led3_mask[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK9f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK8f_GET(r) ((((r).phyc_led3_mask[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK8f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK7f_GET(r) ((((r).phyc_led3_mask[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK7f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK6f_GET(r) ((((r).phyc_led3_mask[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK6f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK5f_GET(r) ((((r).phyc_led3_mask[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK5f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK4f_GET(r) ((((r).phyc_led3_mask[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK4f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK3f_GET(r) ((((r).phyc_led3_mask[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK3f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK2f_GET(r) ((((r).phyc_led3_mask[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK2f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK1f_GET(r) ((((r).phyc_led3_mask[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK1f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED3_MASKr_LED_MASK0f_GET(r) (((r).phyc_led3_mask[0]) & 0x1)
#define BCM84834_PHYC_LED3_MASKr_LED_MASK0f_SET(r,f) (r).phyc_led3_mask[0]=(((r).phyc_led3_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED3_MASK.
 *
 */
#define BCM84834_READ_PHYC_LED3_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED3_MASKr,(_r._phyc_led3_mask))
#define BCM84834_WRITE_PHYC_LED3_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED3_MASKr,(_r._phyc_led3_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED3_MASKr BCM84834_PHYC_LED3_MASKr
#define PHYC_LED3_MASKr_SIZE BCM84834_PHYC_LED3_MASKr_SIZE
typedef BCM84834_PHYC_LED3_MASKr_t PHYC_LED3_MASKr_t;
#define PHYC_LED3_MASKr_CLR BCM84834_PHYC_LED3_MASKr_CLR
#define PHYC_LED3_MASKr_SET BCM84834_PHYC_LED3_MASKr_SET
#define PHYC_LED3_MASKr_GET BCM84834_PHYC_LED3_MASKr_GET
#define PHYC_LED3_MASKr_LED_MASK15f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK15f_GET
#define PHYC_LED3_MASKr_LED_MASK15f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK15f_SET
#define PHYC_LED3_MASKr_LED_MASK14f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK14f_GET
#define PHYC_LED3_MASKr_LED_MASK14f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK14f_SET
#define PHYC_LED3_MASKr_LED_MASK13f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK13f_GET
#define PHYC_LED3_MASKr_LED_MASK13f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK13f_SET
#define PHYC_LED3_MASKr_LED_MASK12f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK12f_GET
#define PHYC_LED3_MASKr_LED_MASK12f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK12f_SET
#define PHYC_LED3_MASKr_LED_MASK11f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK11f_GET
#define PHYC_LED3_MASKr_LED_MASK11f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK11f_SET
#define PHYC_LED3_MASKr_LED_MASK10f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK10f_GET
#define PHYC_LED3_MASKr_LED_MASK10f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK10f_SET
#define PHYC_LED3_MASKr_LED_MASK9f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK9f_GET
#define PHYC_LED3_MASKr_LED_MASK9f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK9f_SET
#define PHYC_LED3_MASKr_LED_MASK8f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK8f_GET
#define PHYC_LED3_MASKr_LED_MASK8f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK8f_SET
#define PHYC_LED3_MASKr_LED_MASK7f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK7f_GET
#define PHYC_LED3_MASKr_LED_MASK7f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK7f_SET
#define PHYC_LED3_MASKr_LED_MASK6f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK6f_GET
#define PHYC_LED3_MASKr_LED_MASK6f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK6f_SET
#define PHYC_LED3_MASKr_LED_MASK5f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK5f_GET
#define PHYC_LED3_MASKr_LED_MASK5f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK5f_SET
#define PHYC_LED3_MASKr_LED_MASK4f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK4f_GET
#define PHYC_LED3_MASKr_LED_MASK4f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK4f_SET
#define PHYC_LED3_MASKr_LED_MASK3f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK3f_GET
#define PHYC_LED3_MASKr_LED_MASK3f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK3f_SET
#define PHYC_LED3_MASKr_LED_MASK2f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK2f_GET
#define PHYC_LED3_MASKr_LED_MASK2f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK2f_SET
#define PHYC_LED3_MASKr_LED_MASK1f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK1f_GET
#define PHYC_LED3_MASKr_LED_MASK1f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK1f_SET
#define PHYC_LED3_MASKr_LED_MASK0f_GET BCM84834_PHYC_LED3_MASKr_LED_MASK0f_GET
#define PHYC_LED3_MASKr_LED_MASK0f_SET BCM84834_PHYC_LED3_MASKr_LED_MASK0f_SET
#define READ_PHYC_LED3_MASKr BCM84834_READ_PHYC_LED3_MASKr
#define WRITE_PHYC_LED3_MASKr BCM84834_WRITE_PHYC_LED3_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED3_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED3_MASK_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa836
 * DEVAD:    1
 * DESC:     LED3 Mask High
 * SIZE:     32
 * FIELDS:
 *     LED_MASK16       
 *     LED_MASK17       
 *     LED_MASK18       
 *     LED_MASK19       
 *     LED_MASK20       
 *     LED_MASK21       
 *     LED_MASK22       
 *     LED_MASK23       
 *     LED_MASK24       
 *     LED_MASK25       
 *     LED_MASK26       
 *     LED_MASK27       
 *     LED_MASK28       
 *     LED_MASK29       
 *     LED_MASK30       
 *     LED_MASK31       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED3_MASK_Hr (0x0001a836 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED3_MASK_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED3_MASK_H.
 *
 */
typedef union BCM84834_PHYC_LED3_MASK_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led3_mask_h[1];
	uint32_t _phyc_led3_mask_h;
} BCM84834_PHYC_LED3_MASK_Hr_t;

#define BCM84834_PHYC_LED3_MASK_Hr_CLR(r) (r).phyc_led3_mask_h[0] = 0
#define BCM84834_PHYC_LED3_MASK_Hr_SET(r,d) (r).phyc_led3_mask_h[0] = d
#define BCM84834_PHYC_LED3_MASK_Hr_GET(r) (r).phyc_led3_mask_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK31f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK31f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK30f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK30f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK29f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK29f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK28f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK28f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK27f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK27f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK26f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK26f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK25f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK25f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK24f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK24f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK23f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK23f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK22f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK22f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK21f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK21f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK20f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK20f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK19f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK19f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK18f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK18f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK17f_GET(r) ((((r).phyc_led3_mask_h[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK17f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK16f_GET(r) (((r).phyc_led3_mask_h[0]) & 0x1)
#define BCM84834_PHYC_LED3_MASK_Hr_LED_MASK16f_SET(r,f) (r).phyc_led3_mask_h[0]=(((r).phyc_led3_mask_h[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED3_MASK_H.
 *
 */
#define BCM84834_READ_PHYC_LED3_MASK_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED3_MASK_Hr,(_r._phyc_led3_mask_h))
#define BCM84834_WRITE_PHYC_LED3_MASK_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED3_MASK_Hr,(_r._phyc_led3_mask_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED3_MASK_Hr BCM84834_PHYC_LED3_MASK_Hr
#define PHYC_LED3_MASK_Hr_SIZE BCM84834_PHYC_LED3_MASK_Hr_SIZE
typedef BCM84834_PHYC_LED3_MASK_Hr_t PHYC_LED3_MASK_Hr_t;
#define PHYC_LED3_MASK_Hr_CLR BCM84834_PHYC_LED3_MASK_Hr_CLR
#define PHYC_LED3_MASK_Hr_SET BCM84834_PHYC_LED3_MASK_Hr_SET
#define PHYC_LED3_MASK_Hr_GET BCM84834_PHYC_LED3_MASK_Hr_GET
#define PHYC_LED3_MASK_Hr_LED_MASK31f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK31f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK31f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK31f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK30f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK30f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK30f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK30f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK29f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK29f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK29f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK29f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK28f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK28f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK28f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK28f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK27f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK27f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK27f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK27f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK26f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK26f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK26f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK26f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK25f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK25f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK25f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK25f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK24f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK24f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK24f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK24f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK23f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK23f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK23f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK23f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK22f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK22f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK22f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK22f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK21f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK21f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK21f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK21f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK20f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK20f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK20f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK20f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK19f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK19f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK19f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK19f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK18f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK18f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK18f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK18f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK17f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK17f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK17f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK17f_SET
#define PHYC_LED3_MASK_Hr_LED_MASK16f_GET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK16f_GET
#define PHYC_LED3_MASK_Hr_LED_MASK16f_SET BCM84834_PHYC_LED3_MASK_Hr_LED_MASK16f_SET
#define READ_PHYC_LED3_MASK_Hr BCM84834_READ_PHYC_LED3_MASK_Hr
#define WRITE_PHYC_LED3_MASK_Hr BCM84834_WRITE_PHYC_LED3_MASK_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED3_MASK_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED3_BLINK_CYCLE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa837
 * DEVAD:    1
 * DESC:     LED3 Blink Cycle Counter
 * SIZE:     32
 * FIELDS:
 *     LED_BLINK_CYCLE_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr (0x0001a837 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED3_BLINK_CYCLE_CNT.
 *
 */
typedef union BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_led3_blink_cycle_cnt[1];
	uint32_t _phyc_led3_blink_cycle_cnt;
} BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_t;

#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_CLR(r) (r).phyc_led3_blink_cycle_cnt[0] = 0
#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_SET(r,d) (r).phyc_led3_blink_cycle_cnt[0] = d
#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_GET(r) (r).phyc_led3_blink_cycle_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET(r) (((r).phyc_led3_blink_cycle_cnt[0]) & 0xf)
#define BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET(r,f) (r).phyc_led3_blink_cycle_cnt[0]=(((r).phyc_led3_blink_cycle_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LED3_BLINK_CYCLE_CNT.
 *
 */
#define BCM84834_READ_PHYC_LED3_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr,(_r._phyc_led3_blink_cycle_cnt))
#define BCM84834_WRITE_PHYC_LED3_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr,(_r._phyc_led3_blink_cycle_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED3_BLINK_CYCLE_CNTr BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr
#define PHYC_LED3_BLINK_CYCLE_CNTr_SIZE BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_SIZE
typedef BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_t PHYC_LED3_BLINK_CYCLE_CNTr_t;
#define PHYC_LED3_BLINK_CYCLE_CNTr_CLR BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_CLR
#define PHYC_LED3_BLINK_CYCLE_CNTr_SET BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_SET
#define PHYC_LED3_BLINK_CYCLE_CNTr_GET BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_GET
#define PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET
#define PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET
#define READ_PHYC_LED3_BLINK_CYCLE_CNTr BCM84834_READ_PHYC_LED3_BLINK_CYCLE_CNTr
#define WRITE_PHYC_LED3_BLINK_CYCLE_CNTr BCM84834_WRITE_PHYC_LED3_BLINK_CYCLE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED3_BLINK_CYCLE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED4_MASK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa838
 * DEVAD:    1
 * DESC:     LED4 Mask
 * SIZE:     32
 * FIELDS:
 *     LED_MASK0        
 *     LED_MASK1        
 *     LED_MASK2        
 *     LED_MASK3        
 *     LED_MASK4        
 *     LED_MASK5        
 *     LED_MASK6        
 *     LED_MASK7        
 *     LED_MASK8        
 *     LED_MASK9        
 *     LED_MASK10       
 *     LED_MASK11       
 *     LED_MASK12       
 *     LED_MASK13       
 *     LED_MASK14       
 *     LED_MASK15       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED4_MASKr (0x0001a838 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED4_MASKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED4_MASK.
 *
 */
typedef union BCM84834_PHYC_LED4_MASKr_s {
	uint32_t v[1];
	uint32_t phyc_led4_mask[1];
	uint32_t _phyc_led4_mask;
} BCM84834_PHYC_LED4_MASKr_t;

#define BCM84834_PHYC_LED4_MASKr_CLR(r) (r).phyc_led4_mask[0] = 0
#define BCM84834_PHYC_LED4_MASKr_SET(r,d) (r).phyc_led4_mask[0] = d
#define BCM84834_PHYC_LED4_MASKr_GET(r) (r).phyc_led4_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED4_MASKr_LED_MASK15f_GET(r) ((((r).phyc_led4_mask[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK15f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK14f_GET(r) ((((r).phyc_led4_mask[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK14f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK13f_GET(r) ((((r).phyc_led4_mask[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK13f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK12f_GET(r) ((((r).phyc_led4_mask[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK12f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK11f_GET(r) ((((r).phyc_led4_mask[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK11f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK10f_GET(r) ((((r).phyc_led4_mask[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK10f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK9f_GET(r) ((((r).phyc_led4_mask[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK9f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK8f_GET(r) ((((r).phyc_led4_mask[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK8f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK7f_GET(r) ((((r).phyc_led4_mask[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK7f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK6f_GET(r) ((((r).phyc_led4_mask[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK6f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK5f_GET(r) ((((r).phyc_led4_mask[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK5f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK4f_GET(r) ((((r).phyc_led4_mask[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK4f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK3f_GET(r) ((((r).phyc_led4_mask[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK3f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK2f_GET(r) ((((r).phyc_led4_mask[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK2f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK1f_GET(r) ((((r).phyc_led4_mask[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK1f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED4_MASKr_LED_MASK0f_GET(r) (((r).phyc_led4_mask[0]) & 0x1)
#define BCM84834_PHYC_LED4_MASKr_LED_MASK0f_SET(r,f) (r).phyc_led4_mask[0]=(((r).phyc_led4_mask[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED4_MASK.
 *
 */
#define BCM84834_READ_PHYC_LED4_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED4_MASKr,(_r._phyc_led4_mask))
#define BCM84834_WRITE_PHYC_LED4_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED4_MASKr,(_r._phyc_led4_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED4_MASKr BCM84834_PHYC_LED4_MASKr
#define PHYC_LED4_MASKr_SIZE BCM84834_PHYC_LED4_MASKr_SIZE
typedef BCM84834_PHYC_LED4_MASKr_t PHYC_LED4_MASKr_t;
#define PHYC_LED4_MASKr_CLR BCM84834_PHYC_LED4_MASKr_CLR
#define PHYC_LED4_MASKr_SET BCM84834_PHYC_LED4_MASKr_SET
#define PHYC_LED4_MASKr_GET BCM84834_PHYC_LED4_MASKr_GET
#define PHYC_LED4_MASKr_LED_MASK15f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK15f_GET
#define PHYC_LED4_MASKr_LED_MASK15f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK15f_SET
#define PHYC_LED4_MASKr_LED_MASK14f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK14f_GET
#define PHYC_LED4_MASKr_LED_MASK14f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK14f_SET
#define PHYC_LED4_MASKr_LED_MASK13f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK13f_GET
#define PHYC_LED4_MASKr_LED_MASK13f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK13f_SET
#define PHYC_LED4_MASKr_LED_MASK12f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK12f_GET
#define PHYC_LED4_MASKr_LED_MASK12f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK12f_SET
#define PHYC_LED4_MASKr_LED_MASK11f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK11f_GET
#define PHYC_LED4_MASKr_LED_MASK11f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK11f_SET
#define PHYC_LED4_MASKr_LED_MASK10f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK10f_GET
#define PHYC_LED4_MASKr_LED_MASK10f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK10f_SET
#define PHYC_LED4_MASKr_LED_MASK9f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK9f_GET
#define PHYC_LED4_MASKr_LED_MASK9f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK9f_SET
#define PHYC_LED4_MASKr_LED_MASK8f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK8f_GET
#define PHYC_LED4_MASKr_LED_MASK8f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK8f_SET
#define PHYC_LED4_MASKr_LED_MASK7f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK7f_GET
#define PHYC_LED4_MASKr_LED_MASK7f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK7f_SET
#define PHYC_LED4_MASKr_LED_MASK6f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK6f_GET
#define PHYC_LED4_MASKr_LED_MASK6f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK6f_SET
#define PHYC_LED4_MASKr_LED_MASK5f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK5f_GET
#define PHYC_LED4_MASKr_LED_MASK5f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK5f_SET
#define PHYC_LED4_MASKr_LED_MASK4f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK4f_GET
#define PHYC_LED4_MASKr_LED_MASK4f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK4f_SET
#define PHYC_LED4_MASKr_LED_MASK3f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK3f_GET
#define PHYC_LED4_MASKr_LED_MASK3f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK3f_SET
#define PHYC_LED4_MASKr_LED_MASK2f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK2f_GET
#define PHYC_LED4_MASKr_LED_MASK2f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK2f_SET
#define PHYC_LED4_MASKr_LED_MASK1f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK1f_GET
#define PHYC_LED4_MASKr_LED_MASK1f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK1f_SET
#define PHYC_LED4_MASKr_LED_MASK0f_GET BCM84834_PHYC_LED4_MASKr_LED_MASK0f_GET
#define PHYC_LED4_MASKr_LED_MASK0f_SET BCM84834_PHYC_LED4_MASKr_LED_MASK0f_SET
#define READ_PHYC_LED4_MASKr BCM84834_READ_PHYC_LED4_MASKr
#define WRITE_PHYC_LED4_MASKr BCM84834_WRITE_PHYC_LED4_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED4_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED4_MASK_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa839
 * DEVAD:    1
 * DESC:     LED4 Mask High
 * SIZE:     32
 * FIELDS:
 *     LED_MASK16       
 *     LED_MASK17       
 *     LED_MASK18       
 *     LED_MASK19       
 *     LED_MASK20       
 *     LED_MASK21       
 *     LED_MASK22       
 *     LED_MASK23       
 *     LED_MASK24       
 *     LED_MASK25       
 *     LED_MASK26       
 *     LED_MASK27       
 *     LED_MASK28       
 *     LED_MASK29       
 *     LED_MASK30       
 *     LED_MASK31       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED4_MASK_Hr (0x0001a839 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED4_MASK_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED4_MASK_H.
 *
 */
typedef union BCM84834_PHYC_LED4_MASK_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led4_mask_h[1];
	uint32_t _phyc_led4_mask_h;
} BCM84834_PHYC_LED4_MASK_Hr_t;

#define BCM84834_PHYC_LED4_MASK_Hr_CLR(r) (r).phyc_led4_mask_h[0] = 0
#define BCM84834_PHYC_LED4_MASK_Hr_SET(r,d) (r).phyc_led4_mask_h[0] = d
#define BCM84834_PHYC_LED4_MASK_Hr_GET(r) (r).phyc_led4_mask_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK31f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK31f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK30f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK30f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK29f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK29f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK28f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK28f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK27f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK27f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK26f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK26f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK25f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK25f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK24f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK24f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK23f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK23f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK22f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK22f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK21f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK21f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK20f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK20f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK19f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK19f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK18f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK18f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK17f_GET(r) ((((r).phyc_led4_mask_h[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK17f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK16f_GET(r) (((r).phyc_led4_mask_h[0]) & 0x1)
#define BCM84834_PHYC_LED4_MASK_Hr_LED_MASK16f_SET(r,f) (r).phyc_led4_mask_h[0]=(((r).phyc_led4_mask_h[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED4_MASK_H.
 *
 */
#define BCM84834_READ_PHYC_LED4_MASK_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED4_MASK_Hr,(_r._phyc_led4_mask_h))
#define BCM84834_WRITE_PHYC_LED4_MASK_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED4_MASK_Hr,(_r._phyc_led4_mask_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED4_MASK_Hr BCM84834_PHYC_LED4_MASK_Hr
#define PHYC_LED4_MASK_Hr_SIZE BCM84834_PHYC_LED4_MASK_Hr_SIZE
typedef BCM84834_PHYC_LED4_MASK_Hr_t PHYC_LED4_MASK_Hr_t;
#define PHYC_LED4_MASK_Hr_CLR BCM84834_PHYC_LED4_MASK_Hr_CLR
#define PHYC_LED4_MASK_Hr_SET BCM84834_PHYC_LED4_MASK_Hr_SET
#define PHYC_LED4_MASK_Hr_GET BCM84834_PHYC_LED4_MASK_Hr_GET
#define PHYC_LED4_MASK_Hr_LED_MASK31f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK31f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK31f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK31f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK30f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK30f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK30f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK30f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK29f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK29f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK29f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK29f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK28f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK28f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK28f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK28f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK27f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK27f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK27f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK27f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK26f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK26f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK26f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK26f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK25f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK25f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK25f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK25f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK24f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK24f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK24f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK24f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK23f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK23f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK23f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK23f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK22f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK22f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK22f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK22f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK21f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK21f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK21f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK21f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK20f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK20f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK20f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK20f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK19f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK19f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK19f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK19f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK18f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK18f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK18f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK18f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK17f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK17f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK17f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK17f_SET
#define PHYC_LED4_MASK_Hr_LED_MASK16f_GET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK16f_GET
#define PHYC_LED4_MASK_Hr_LED_MASK16f_SET BCM84834_PHYC_LED4_MASK_Hr_LED_MASK16f_SET
#define READ_PHYC_LED4_MASK_Hr BCM84834_READ_PHYC_LED4_MASK_Hr
#define WRITE_PHYC_LED4_MASK_Hr BCM84834_WRITE_PHYC_LED4_MASK_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED4_MASK_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED4_BLINK_CYCLE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83a
 * DEVAD:    1
 * DESC:     LED4 Blink Cycle Counter
 * SIZE:     32
 * FIELDS:
 *     LED_BLINK_CYCLE_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr (0x0001a83a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED4_BLINK_CYCLE_CNT.
 *
 */
typedef union BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_led4_blink_cycle_cnt[1];
	uint32_t _phyc_led4_blink_cycle_cnt;
} BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_t;

#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_CLR(r) (r).phyc_led4_blink_cycle_cnt[0] = 0
#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_SET(r,d) (r).phyc_led4_blink_cycle_cnt[0] = d
#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_GET(r) (r).phyc_led4_blink_cycle_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET(r) (((r).phyc_led4_blink_cycle_cnt[0]) & 0xf)
#define BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET(r,f) (r).phyc_led4_blink_cycle_cnt[0]=(((r).phyc_led4_blink_cycle_cnt[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LED4_BLINK_CYCLE_CNT.
 *
 */
#define BCM84834_READ_PHYC_LED4_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr,(_r._phyc_led4_blink_cycle_cnt))
#define BCM84834_WRITE_PHYC_LED4_BLINK_CYCLE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr,(_r._phyc_led4_blink_cycle_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED4_BLINK_CYCLE_CNTr BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr
#define PHYC_LED4_BLINK_CYCLE_CNTr_SIZE BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_SIZE
typedef BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_t PHYC_LED4_BLINK_CYCLE_CNTr_t;
#define PHYC_LED4_BLINK_CYCLE_CNTr_CLR BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_CLR
#define PHYC_LED4_BLINK_CYCLE_CNTr_SET BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_SET
#define PHYC_LED4_BLINK_CYCLE_CNTr_GET BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_GET
#define PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_GET
#define PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr_LED_BLINK_CYCLE_CNTf_SET
#define READ_PHYC_LED4_BLINK_CYCLE_CNTr BCM84834_READ_PHYC_LED4_BLINK_CYCLE_CNTr
#define WRITE_PHYC_LED4_BLINK_CYCLE_CNTr BCM84834_WRITE_PHYC_LED4_BLINK_CYCLE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED4_BLINK_CYCLE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83b
 * DEVAD:    1
 * DESC:     LED Control
 * SIZE:     32
 * FIELDS:
 *     LED0_CTL         
 *     LED0_OE_N        
 *     LED1_CTL         
 *     LED1_OE_N        
 *     LED2_CTL         
 *     LED2_OE_N        
 *     LED3_CTL         
 *     LED3_OE_N        
 *     LED4_CTL         
 *     LED4_OE_N        
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_CTLr (0x0001a83b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_CTL.
 *
 */
typedef union BCM84834_PHYC_LED_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_led_ctl[1];
	uint32_t _phyc_led_ctl;
} BCM84834_PHYC_LED_CTLr_t;

#define BCM84834_PHYC_LED_CTLr_CLR(r) (r).phyc_led_ctl[0] = 0
#define BCM84834_PHYC_LED_CTLr_SET(r,d) (r).phyc_led_ctl[0] = d
#define BCM84834_PHYC_LED_CTLr_GET(r) (r).phyc_led_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_CTLr_LED4_OE_Nf_GET(r) ((((r).phyc_led_ctl[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED_CTLr_LED4_OE_Nf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED_CTLr_LED4_CTLf_GET(r) ((((r).phyc_led_ctl[0]) >> 12) & 0x3)
#define BCM84834_PHYC_LED_CTLr_LED4_CTLf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCM84834_PHYC_LED_CTLr_LED3_OE_Nf_GET(r) ((((r).phyc_led_ctl[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED_CTLr_LED3_OE_Nf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED_CTLr_LED3_CTLf_GET(r) ((((r).phyc_led_ctl[0]) >> 9) & 0x3)
#define BCM84834_PHYC_LED_CTLr_LED3_CTLf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCM84834_PHYC_LED_CTLr_LED2_OE_Nf_GET(r) ((((r).phyc_led_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED_CTLr_LED2_OE_Nf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED_CTLr_LED2_CTLf_GET(r) ((((r).phyc_led_ctl[0]) >> 6) & 0x3)
#define BCM84834_PHYC_LED_CTLr_LED2_CTLf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_PHYC_LED_CTLr_LED1_OE_Nf_GET(r) ((((r).phyc_led_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED_CTLr_LED1_OE_Nf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED_CTLr_LED1_CTLf_GET(r) ((((r).phyc_led_ctl[0]) >> 3) & 0x3)
#define BCM84834_PHYC_LED_CTLr_LED1_CTLf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCM84834_PHYC_LED_CTLr_LED0_OE_Nf_GET(r) ((((r).phyc_led_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED_CTLr_LED0_OE_Nf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED_CTLr_LED0_CTLf_GET(r) (((r).phyc_led_ctl[0]) & 0x3)
#define BCM84834_PHYC_LED_CTLr_LED0_CTLf_SET(r,f) (r).phyc_led_ctl[0]=(((r).phyc_led_ctl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PHYC_LED_CTL.
 *
 */
#define BCM84834_READ_PHYC_LED_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_CTLr,(_r._phyc_led_ctl))
#define BCM84834_WRITE_PHYC_LED_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_CTLr,(_r._phyc_led_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_CTLr BCM84834_PHYC_LED_CTLr
#define PHYC_LED_CTLr_SIZE BCM84834_PHYC_LED_CTLr_SIZE
typedef BCM84834_PHYC_LED_CTLr_t PHYC_LED_CTLr_t;
#define PHYC_LED_CTLr_CLR BCM84834_PHYC_LED_CTLr_CLR
#define PHYC_LED_CTLr_SET BCM84834_PHYC_LED_CTLr_SET
#define PHYC_LED_CTLr_GET BCM84834_PHYC_LED_CTLr_GET
#define PHYC_LED_CTLr_LED4_OE_Nf_GET BCM84834_PHYC_LED_CTLr_LED4_OE_Nf_GET
#define PHYC_LED_CTLr_LED4_OE_Nf_SET BCM84834_PHYC_LED_CTLr_LED4_OE_Nf_SET
#define PHYC_LED_CTLr_LED4_CTLf_GET BCM84834_PHYC_LED_CTLr_LED4_CTLf_GET
#define PHYC_LED_CTLr_LED4_CTLf_SET BCM84834_PHYC_LED_CTLr_LED4_CTLf_SET
#define PHYC_LED_CTLr_LED3_OE_Nf_GET BCM84834_PHYC_LED_CTLr_LED3_OE_Nf_GET
#define PHYC_LED_CTLr_LED3_OE_Nf_SET BCM84834_PHYC_LED_CTLr_LED3_OE_Nf_SET
#define PHYC_LED_CTLr_LED3_CTLf_GET BCM84834_PHYC_LED_CTLr_LED3_CTLf_GET
#define PHYC_LED_CTLr_LED3_CTLf_SET BCM84834_PHYC_LED_CTLr_LED3_CTLf_SET
#define PHYC_LED_CTLr_LED2_OE_Nf_GET BCM84834_PHYC_LED_CTLr_LED2_OE_Nf_GET
#define PHYC_LED_CTLr_LED2_OE_Nf_SET BCM84834_PHYC_LED_CTLr_LED2_OE_Nf_SET
#define PHYC_LED_CTLr_LED2_CTLf_GET BCM84834_PHYC_LED_CTLr_LED2_CTLf_GET
#define PHYC_LED_CTLr_LED2_CTLf_SET BCM84834_PHYC_LED_CTLr_LED2_CTLf_SET
#define PHYC_LED_CTLr_LED1_OE_Nf_GET BCM84834_PHYC_LED_CTLr_LED1_OE_Nf_GET
#define PHYC_LED_CTLr_LED1_OE_Nf_SET BCM84834_PHYC_LED_CTLr_LED1_OE_Nf_SET
#define PHYC_LED_CTLr_LED1_CTLf_GET BCM84834_PHYC_LED_CTLr_LED1_CTLf_GET
#define PHYC_LED_CTLr_LED1_CTLf_SET BCM84834_PHYC_LED_CTLr_LED1_CTLf_SET
#define PHYC_LED_CTLr_LED0_OE_Nf_GET BCM84834_PHYC_LED_CTLr_LED0_OE_Nf_GET
#define PHYC_LED_CTLr_LED0_OE_Nf_SET BCM84834_PHYC_LED_CTLr_LED0_OE_Nf_SET
#define PHYC_LED_CTLr_LED0_CTLf_GET BCM84834_PHYC_LED_CTLr_LED0_CTLf_GET
#define PHYC_LED_CTLr_LED0_CTLf_SET BCM84834_PHYC_LED_CTLr_LED0_CTLf_SET
#define READ_PHYC_LED_CTLr BCM84834_READ_PHYC_LED_CTLr
#define WRITE_PHYC_LED_CTLr BCM84834_WRITE_PHYC_LED_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_SOURCE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83c
 * DEVAD:    1
 * DESC:     LED Source
 * SIZE:     32
 * FIELDS:
 *     LED_SOURCE_00    
 *     LED_SOURCE_01    
 *     LED_SOURCE_02    
 *     LED_SOURCE_03    
 *     LED_SOURCE_04    
 *     LED_SOURCE_05    
 *     LED_SOURCE_06    
 *     LED_SOURCE_07    
 *     LED_SOURCE_08    
 *     LED_SOURCE_09    
 *     LED_SOURCE_10    
 *     LED_SOURCE_11    
 *     LED_SOURCE_12    
 *     LED_SOURCE_13    
 *     LED_SOURCE_14    
 *     LED_SOURCE_15    
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_SOURCEr (0x0001a83c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_SOURCEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_SOURCE.
 *
 */
typedef union BCM84834_PHYC_LED_SOURCEr_s {
	uint32_t v[1];
	uint32_t phyc_led_source[1];
	uint32_t _phyc_led_source;
} BCM84834_PHYC_LED_SOURCEr_t;

#define BCM84834_PHYC_LED_SOURCEr_CLR(r) (r).phyc_led_source[0] = 0
#define BCM84834_PHYC_LED_SOURCEr_SET(r,d) (r).phyc_led_source[0] = d
#define BCM84834_PHYC_LED_SOURCEr_GET(r) (r).phyc_led_source[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_15f_GET(r) ((((r).phyc_led_source[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_15f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_14f_GET(r) ((((r).phyc_led_source[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_14f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_13f_GET(r) ((((r).phyc_led_source[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_13f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_12f_GET(r) ((((r).phyc_led_source[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_12f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_11f_GET(r) ((((r).phyc_led_source[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_11f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_10f_GET(r) ((((r).phyc_led_source[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_10f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_09f_GET(r) ((((r).phyc_led_source[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_09f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_08f_GET(r) ((((r).phyc_led_source[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_08f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_07f_GET(r) ((((r).phyc_led_source[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_07f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_06f_GET(r) ((((r).phyc_led_source[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_06f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_05f_GET(r) ((((r).phyc_led_source[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_05f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_04f_GET(r) ((((r).phyc_led_source[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_04f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_03f_GET(r) ((((r).phyc_led_source[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_03f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_02f_GET(r) ((((r).phyc_led_source[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_02f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_01f_GET(r) ((((r).phyc_led_source[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_01f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_00f_GET(r) (((r).phyc_led_source[0]) & 0x1)
#define BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_00f_SET(r,f) (r).phyc_led_source[0]=(((r).phyc_led_source[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED_SOURCE.
 *
 */
#define BCM84834_READ_PHYC_LED_SOURCEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_SOURCEr,(_r._phyc_led_source))
#define BCM84834_WRITE_PHYC_LED_SOURCEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_SOURCEr,(_r._phyc_led_source))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_SOURCEr BCM84834_PHYC_LED_SOURCEr
#define PHYC_LED_SOURCEr_SIZE BCM84834_PHYC_LED_SOURCEr_SIZE
typedef BCM84834_PHYC_LED_SOURCEr_t PHYC_LED_SOURCEr_t;
#define PHYC_LED_SOURCEr_CLR BCM84834_PHYC_LED_SOURCEr_CLR
#define PHYC_LED_SOURCEr_SET BCM84834_PHYC_LED_SOURCEr_SET
#define PHYC_LED_SOURCEr_GET BCM84834_PHYC_LED_SOURCEr_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_15f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_15f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_15f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_15f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_14f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_14f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_14f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_14f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_13f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_13f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_13f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_13f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_12f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_12f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_12f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_12f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_11f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_11f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_11f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_11f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_10f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_10f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_10f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_10f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_09f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_09f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_09f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_09f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_08f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_08f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_08f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_08f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_07f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_07f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_07f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_07f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_06f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_06f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_06f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_06f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_05f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_05f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_05f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_05f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_04f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_04f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_04f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_04f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_03f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_03f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_03f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_03f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_02f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_02f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_02f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_02f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_01f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_01f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_01f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_01f_SET
#define PHYC_LED_SOURCEr_LED_SOURCE_00f_GET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_00f_GET
#define PHYC_LED_SOURCEr_LED_SOURCE_00f_SET BCM84834_PHYC_LED_SOURCEr_LED_SOURCE_00f_SET
#define READ_PHYC_LED_SOURCEr BCM84834_READ_PHYC_LED_SOURCEr
#define WRITE_PHYC_LED_SOURCEr BCM84834_WRITE_PHYC_LED_SOURCEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_SOURCEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_SOURCE_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83d
 * DEVAD:    1
 * DESC:     LED Source High
 * SIZE:     32
 * FIELDS:
 *     LED_SOURCE_H     
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_SOURCE_Hr (0x0001a83d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_SOURCE_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_SOURCE_H.
 *
 */
typedef union BCM84834_PHYC_LED_SOURCE_Hr_s {
	uint32_t v[1];
	uint32_t phyc_led_source_h[1];
	uint32_t _phyc_led_source_h;
} BCM84834_PHYC_LED_SOURCE_Hr_t;

#define BCM84834_PHYC_LED_SOURCE_Hr_CLR(r) (r).phyc_led_source_h[0] = 0
#define BCM84834_PHYC_LED_SOURCE_Hr_SET(r,d) (r).phyc_led_source_h[0] = d
#define BCM84834_PHYC_LED_SOURCE_Hr_GET(r) (r).phyc_led_source_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_GET(r) (((r).phyc_led_source_h[0]) & 0xffff)
#define BCM84834_PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_SET(r,f) (r).phyc_led_source_h[0]=(((r).phyc_led_source_h[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_LED_SOURCE_H.
 *
 */
#define BCM84834_READ_PHYC_LED_SOURCE_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_SOURCE_Hr,(_r._phyc_led_source_h))
#define BCM84834_WRITE_PHYC_LED_SOURCE_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_SOURCE_Hr,(_r._phyc_led_source_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_SOURCE_Hr BCM84834_PHYC_LED_SOURCE_Hr
#define PHYC_LED_SOURCE_Hr_SIZE BCM84834_PHYC_LED_SOURCE_Hr_SIZE
typedef BCM84834_PHYC_LED_SOURCE_Hr_t PHYC_LED_SOURCE_Hr_t;
#define PHYC_LED_SOURCE_Hr_CLR BCM84834_PHYC_LED_SOURCE_Hr_CLR
#define PHYC_LED_SOURCE_Hr_SET BCM84834_PHYC_LED_SOURCE_Hr_SET
#define PHYC_LED_SOURCE_Hr_GET BCM84834_PHYC_LED_SOURCE_Hr_GET
#define PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_GET BCM84834_PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_GET
#define PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_SET BCM84834_PHYC_LED_SOURCE_Hr_LED_SOURCE_Hf_SET
#define READ_PHYC_LED_SOURCE_Hr BCM84834_READ_PHYC_LED_SOURCE_Hr
#define WRITE_PHYC_LED_SOURCE_Hr BCM84834_WRITE_PHYC_LED_SOURCE_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_SOURCE_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CHIP_CAP0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83e
 * DEVAD:    1
 * DESC:     Chip capability reg 0
 * SIZE:     32
 * FIELDS:
 *     CAP_10GB_CX4     
 *     CAP_10GB_T       
 *     CAP_1000B_T      
 *     CAP_100B_TX      
 *     CAP_10B_T        
 *     CAP_10G          
 *     CAP_2BASE_TL     
 *     CAP_10PASS_TS    
 *     CAP_1000M        
 *     CAP_100M         
 *     CAP_10M          
 *     CAP_LOW_PWR      
 *
 ******************************************************************************/
#define BCM84834_PHYC_CHIP_CAP0r (0x0001a83e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CHIP_CAP0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CHIP_CAP0.
 *
 */
typedef union BCM84834_PHYC_CHIP_CAP0r_s {
	uint32_t v[1];
	uint32_t phyc_chip_cap0[1];
	uint32_t _phyc_chip_cap0;
} BCM84834_PHYC_CHIP_CAP0r_t;

#define BCM84834_PHYC_CHIP_CAP0r_CLR(r) (r).phyc_chip_cap0[0] = 0
#define BCM84834_PHYC_CHIP_CAP0r_SET(r,d) (r).phyc_chip_cap0[0] = d
#define BCM84834_PHYC_CHIP_CAP0r_GET(r) (r).phyc_chip_cap0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CHIP_CAP0r_CAP_LOW_PWRf_GET(r) ((((r).phyc_chip_cap0[0]) >> 11) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_LOW_PWRf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10Mf_GET(r) ((((r).phyc_chip_cap0[0]) >> 10) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10Mf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_100Mf_GET(r) ((((r).phyc_chip_cap0[0]) >> 9) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_100Mf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_1000Mf_GET(r) ((((r).phyc_chip_cap0[0]) >> 8) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_1000Mf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10PASS_TSf_GET(r) ((((r).phyc_chip_cap0[0]) >> 7) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10PASS_TSf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_2BASE_TLf_GET(r) ((((r).phyc_chip_cap0[0]) >> 6) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_2BASE_TLf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10Gf_GET(r) ((((r).phyc_chip_cap0[0]) >> 5) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10Gf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10B_Tf_GET(r) ((((r).phyc_chip_cap0[0]) >> 4) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10B_Tf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_100B_TXf_GET(r) ((((r).phyc_chip_cap0[0]) >> 3) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_100B_TXf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_1000B_Tf_GET(r) ((((r).phyc_chip_cap0[0]) >> 2) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_1000B_Tf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_Tf_GET(r) ((((r).phyc_chip_cap0[0]) >> 1) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_Tf_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_CX4f_GET(r) (((r).phyc_chip_cap0[0]) & 0x1)
#define BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_CX4f_SET(r,f) (r).phyc_chip_cap0[0]=(((r).phyc_chip_cap0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CHIP_CAP0.
 *
 */
#define BCM84834_READ_PHYC_CHIP_CAP0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CHIP_CAP0r,(_r._phyc_chip_cap0))
#define BCM84834_WRITE_PHYC_CHIP_CAP0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CHIP_CAP0r,(_r._phyc_chip_cap0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CHIP_CAP0r BCM84834_PHYC_CHIP_CAP0r
#define PHYC_CHIP_CAP0r_SIZE BCM84834_PHYC_CHIP_CAP0r_SIZE
typedef BCM84834_PHYC_CHIP_CAP0r_t PHYC_CHIP_CAP0r_t;
#define PHYC_CHIP_CAP0r_CLR BCM84834_PHYC_CHIP_CAP0r_CLR
#define PHYC_CHIP_CAP0r_SET BCM84834_PHYC_CHIP_CAP0r_SET
#define PHYC_CHIP_CAP0r_GET BCM84834_PHYC_CHIP_CAP0r_GET
#define PHYC_CHIP_CAP0r_CAP_LOW_PWRf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_LOW_PWRf_GET
#define PHYC_CHIP_CAP0r_CAP_LOW_PWRf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_LOW_PWRf_SET
#define PHYC_CHIP_CAP0r_CAP_10Mf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10Mf_GET
#define PHYC_CHIP_CAP0r_CAP_10Mf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10Mf_SET
#define PHYC_CHIP_CAP0r_CAP_100Mf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_100Mf_GET
#define PHYC_CHIP_CAP0r_CAP_100Mf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_100Mf_SET
#define PHYC_CHIP_CAP0r_CAP_1000Mf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_1000Mf_GET
#define PHYC_CHIP_CAP0r_CAP_1000Mf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_1000Mf_SET
#define PHYC_CHIP_CAP0r_CAP_10PASS_TSf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10PASS_TSf_GET
#define PHYC_CHIP_CAP0r_CAP_10PASS_TSf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10PASS_TSf_SET
#define PHYC_CHIP_CAP0r_CAP_2BASE_TLf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_2BASE_TLf_GET
#define PHYC_CHIP_CAP0r_CAP_2BASE_TLf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_2BASE_TLf_SET
#define PHYC_CHIP_CAP0r_CAP_10Gf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10Gf_GET
#define PHYC_CHIP_CAP0r_CAP_10Gf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10Gf_SET
#define PHYC_CHIP_CAP0r_CAP_10B_Tf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10B_Tf_GET
#define PHYC_CHIP_CAP0r_CAP_10B_Tf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10B_Tf_SET
#define PHYC_CHIP_CAP0r_CAP_100B_TXf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_100B_TXf_GET
#define PHYC_CHIP_CAP0r_CAP_100B_TXf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_100B_TXf_SET
#define PHYC_CHIP_CAP0r_CAP_1000B_Tf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_1000B_Tf_GET
#define PHYC_CHIP_CAP0r_CAP_1000B_Tf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_1000B_Tf_SET
#define PHYC_CHIP_CAP0r_CAP_10GB_Tf_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_Tf_GET
#define PHYC_CHIP_CAP0r_CAP_10GB_Tf_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_Tf_SET
#define PHYC_CHIP_CAP0r_CAP_10GB_CX4f_GET BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_CX4f_GET
#define PHYC_CHIP_CAP0r_CAP_10GB_CX4f_SET BCM84834_PHYC_CHIP_CAP0r_CAP_10GB_CX4f_SET
#define READ_PHYC_CHIP_CAP0r BCM84834_READ_PHYC_CHIP_CAP0r
#define WRITE_PHYC_CHIP_CAP0r BCM84834_WRITE_PHYC_CHIP_CAP0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CHIP_CAP0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CHIP_CAP1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa83f
 * DEVAD:    1
 * DESC:     Chip capability reg 1
 * SIZE:     32
 * FIELDS:
 *     CAP_LPBK         
 *     CAP_10G_EW       
 *     CAP_10G_LW       
 *     CAP_10G_SW       
 *     CAP_10G_LX4      
 *     CAP_10G_ER       
 *     CAP_10G_LR       
 *     CAP_10G_SR       
 *     CAP_TRAN_DIS     
 *     CAP_EXT          
 *     CAP_RCV_FALT     
 *     CAP_TRAN_FALT    
 *
 ******************************************************************************/
#define BCM84834_PHYC_CHIP_CAP1r (0x0001a83f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CHIP_CAP1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CHIP_CAP1.
 *
 */
typedef union BCM84834_PHYC_CHIP_CAP1r_s {
	uint32_t v[1];
	uint32_t phyc_chip_cap1[1];
	uint32_t _phyc_chip_cap1;
} BCM84834_PHYC_CHIP_CAP1r_t;

#define BCM84834_PHYC_CHIP_CAP1r_CLR(r) (r).phyc_chip_cap1[0] = 0
#define BCM84834_PHYC_CHIP_CAP1r_SET(r,d) (r).phyc_chip_cap1[0] = d
#define BCM84834_PHYC_CHIP_CAP1r_GET(r) (r).phyc_chip_cap1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_GET(r) ((((r).phyc_chip_cap1[0]) >> 11) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_RCV_FALTf_GET(r) ((((r).phyc_chip_cap1[0]) >> 10) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_RCV_FALTf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_EXTf_GET(r) ((((r).phyc_chip_cap1[0]) >> 9) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_EXTf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_DISf_GET(r) ((((r).phyc_chip_cap1[0]) >> 8) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_DISf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SRf_GET(r) ((((r).phyc_chip_cap1[0]) >> 7) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SRf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LRf_GET(r) ((((r).phyc_chip_cap1[0]) >> 6) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LRf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_ERf_GET(r) ((((r).phyc_chip_cap1[0]) >> 5) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_ERf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LX4f_GET(r) ((((r).phyc_chip_cap1[0]) >> 4) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LX4f_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SWf_GET(r) ((((r).phyc_chip_cap1[0]) >> 3) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SWf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LWf_GET(r) ((((r).phyc_chip_cap1[0]) >> 2) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LWf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_EWf_GET(r) ((((r).phyc_chip_cap1[0]) >> 1) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_10G_EWf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_CHIP_CAP1r_CAP_LPBKf_GET(r) (((r).phyc_chip_cap1[0]) & 0x1)
#define BCM84834_PHYC_CHIP_CAP1r_CAP_LPBKf_SET(r,f) (r).phyc_chip_cap1[0]=(((r).phyc_chip_cap1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CHIP_CAP1.
 *
 */
#define BCM84834_READ_PHYC_CHIP_CAP1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CHIP_CAP1r,(_r._phyc_chip_cap1))
#define BCM84834_WRITE_PHYC_CHIP_CAP1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CHIP_CAP1r,(_r._phyc_chip_cap1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CHIP_CAP1r BCM84834_PHYC_CHIP_CAP1r
#define PHYC_CHIP_CAP1r_SIZE BCM84834_PHYC_CHIP_CAP1r_SIZE
typedef BCM84834_PHYC_CHIP_CAP1r_t PHYC_CHIP_CAP1r_t;
#define PHYC_CHIP_CAP1r_CLR BCM84834_PHYC_CHIP_CAP1r_CLR
#define PHYC_CHIP_CAP1r_SET BCM84834_PHYC_CHIP_CAP1r_SET
#define PHYC_CHIP_CAP1r_GET BCM84834_PHYC_CHIP_CAP1r_GET
#define PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_GET
#define PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_FALTf_SET
#define PHYC_CHIP_CAP1r_CAP_RCV_FALTf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_RCV_FALTf_GET
#define PHYC_CHIP_CAP1r_CAP_RCV_FALTf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_RCV_FALTf_SET
#define PHYC_CHIP_CAP1r_CAP_EXTf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_EXTf_GET
#define PHYC_CHIP_CAP1r_CAP_EXTf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_EXTf_SET
#define PHYC_CHIP_CAP1r_CAP_TRAN_DISf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_DISf_GET
#define PHYC_CHIP_CAP1r_CAP_TRAN_DISf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_TRAN_DISf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_SRf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SRf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_SRf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SRf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_LRf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LRf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_LRf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LRf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_ERf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_ERf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_ERf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_ERf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_LX4f_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LX4f_GET
#define PHYC_CHIP_CAP1r_CAP_10G_LX4f_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LX4f_SET
#define PHYC_CHIP_CAP1r_CAP_10G_SWf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SWf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_SWf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_SWf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_LWf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LWf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_LWf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_LWf_SET
#define PHYC_CHIP_CAP1r_CAP_10G_EWf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_EWf_GET
#define PHYC_CHIP_CAP1r_CAP_10G_EWf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_10G_EWf_SET
#define PHYC_CHIP_CAP1r_CAP_LPBKf_GET BCM84834_PHYC_CHIP_CAP1r_CAP_LPBKf_GET
#define PHYC_CHIP_CAP1r_CAP_LPBKf_SET BCM84834_PHYC_CHIP_CAP1r_CAP_LPBKf_SET
#define READ_PHYC_CHIP_CAP1r BCM84834_READ_PHYC_CHIP_CAP1r
#define WRITE_PHYC_CHIP_CAP1r BCM84834_WRITE_PHYC_CHIP_CAP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CHIP_CAP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CHIP_PCS_CAP
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa840
 * DEVAD:    1
 * DESC:     Chip PCS capability reg
 * SIZE:     32
 * FIELDS:
 *     CAP_10G          
 *     CAP_10P2B        
 *     CAP_10G_R        
 *     CAP_10G_X        
 *     CAP_10G_W        
 *     CAP_10G_T        
 *     PRBS31_CAP       
 *
 ******************************************************************************/
#define BCM84834_PHYC_CHIP_PCS_CAPr (0x0001a840 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CHIP_PCS_CAPr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CHIP_PCS_CAP.
 *
 */
typedef union BCM84834_PHYC_CHIP_PCS_CAPr_s {
	uint32_t v[1];
	uint32_t phyc_chip_pcs_cap[1];
	uint32_t _phyc_chip_pcs_cap;
} BCM84834_PHYC_CHIP_PCS_CAPr_t;

#define BCM84834_PHYC_CHIP_PCS_CAPr_CLR(r) (r).phyc_chip_pcs_cap[0] = 0
#define BCM84834_PHYC_CHIP_PCS_CAPr_SET(r,d) (r).phyc_chip_pcs_cap[0] = d
#define BCM84834_PHYC_CHIP_PCS_CAPr_GET(r) (r).phyc_chip_pcs_cap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 6) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 5) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 4) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 3) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 2) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_GET(r) ((((r).phyc_chip_pcs_cap[0]) >> 1) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10Gf_GET(r) (((r).phyc_chip_pcs_cap[0]) & 0x1)
#define BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10Gf_SET(r,f) (r).phyc_chip_pcs_cap[0]=(((r).phyc_chip_pcs_cap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CHIP_PCS_CAP.
 *
 */
#define BCM84834_READ_PHYC_CHIP_PCS_CAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CHIP_PCS_CAPr,(_r._phyc_chip_pcs_cap))
#define BCM84834_WRITE_PHYC_CHIP_PCS_CAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CHIP_PCS_CAPr,(_r._phyc_chip_pcs_cap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CHIP_PCS_CAPr BCM84834_PHYC_CHIP_PCS_CAPr
#define PHYC_CHIP_PCS_CAPr_SIZE BCM84834_PHYC_CHIP_PCS_CAPr_SIZE
typedef BCM84834_PHYC_CHIP_PCS_CAPr_t PHYC_CHIP_PCS_CAPr_t;
#define PHYC_CHIP_PCS_CAPr_CLR BCM84834_PHYC_CHIP_PCS_CAPr_CLR
#define PHYC_CHIP_PCS_CAPr_SET BCM84834_PHYC_CHIP_PCS_CAPr_SET
#define PHYC_CHIP_PCS_CAPr_GET BCM84834_PHYC_CHIP_PCS_CAPr_GET
#define PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_GET BCM84834_PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_GET
#define PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_SET BCM84834_PHYC_CHIP_PCS_CAPr_PRBS31_CAPf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Tf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Wf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Xf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10G_Rf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10P2Bf_SET
#define PHYC_CHIP_PCS_CAPr_CAP_10Gf_GET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10Gf_GET
#define PHYC_CHIP_PCS_CAPr_CAP_10Gf_SET BCM84834_PHYC_CHIP_PCS_CAPr_CAP_10Gf_SET
#define READ_PHYC_CHIP_PCS_CAPr BCM84834_READ_PHYC_CHIP_PCS_CAPr
#define WRITE_PHYC_CHIP_PCS_CAPr BCM84834_WRITE_PHYC_CHIP_PCS_CAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CHIP_PCS_CAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_DEV_PRESENT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa841
 * DEVAD:    1
 * DESC:     Device Present reg
 * SIZE:     32
 * FIELDS:
 *     CLA22_PRE        
 *     PMD_PRE          
 *     WIS_PRE          
 *     PCS_PRE          
 *     PHYXS_PRE        
 *     DTEXS_PRE        
 *     TC_PRE           
 *     AUTONEG_PRE      
 *     CLA22_EXT_PRE    
 *     VENSP_DEV1_PRE   
 *     VENSP_DEV2_PRE   
 *
 ******************************************************************************/
#define BCM84834_PHYC_DEV_PRESENTr (0x0001a841 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_DEV_PRESENTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_DEV_PRESENT.
 *
 */
typedef union BCM84834_PHYC_DEV_PRESENTr_s {
	uint32_t v[1];
	uint32_t phyc_dev_present[1];
	uint32_t _phyc_dev_present;
} BCM84834_PHYC_DEV_PRESENTr_t;

#define BCM84834_PHYC_DEV_PRESENTr_CLR(r) (r).phyc_dev_present[0] = 0
#define BCM84834_PHYC_DEV_PRESENTr_SET(r,d) (r).phyc_dev_present[0] = d
#define BCM84834_PHYC_DEV_PRESENTr_GET(r) (r).phyc_dev_present[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 10) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 9) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_DEV_PRESENTr_CLA22_EXT_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 8) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_CLA22_EXT_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_DEV_PRESENTr_AUTONEG_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 7) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_AUTONEG_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_DEV_PRESENTr_TC_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 6) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_TC_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_DEV_PRESENTr_DTEXS_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 5) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_DTEXS_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_DEV_PRESENTr_PHYXS_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 4) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_PHYXS_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_DEV_PRESENTr_PCS_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 3) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_PCS_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_DEV_PRESENTr_WIS_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 2) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_WIS_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_DEV_PRESENTr_PMD_PREf_GET(r) ((((r).phyc_dev_present[0]) >> 1) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_PMD_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_DEV_PRESENTr_CLA22_PREf_GET(r) (((r).phyc_dev_present[0]) & 0x1)
#define BCM84834_PHYC_DEV_PRESENTr_CLA22_PREf_SET(r,f) (r).phyc_dev_present[0]=(((r).phyc_dev_present[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_DEV_PRESENT.
 *
 */
#define BCM84834_READ_PHYC_DEV_PRESENTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_DEV_PRESENTr,(_r._phyc_dev_present))
#define BCM84834_WRITE_PHYC_DEV_PRESENTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_DEV_PRESENTr,(_r._phyc_dev_present))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_DEV_PRESENTr BCM84834_PHYC_DEV_PRESENTr
#define PHYC_DEV_PRESENTr_SIZE BCM84834_PHYC_DEV_PRESENTr_SIZE
typedef BCM84834_PHYC_DEV_PRESENTr_t PHYC_DEV_PRESENTr_t;
#define PHYC_DEV_PRESENTr_CLR BCM84834_PHYC_DEV_PRESENTr_CLR
#define PHYC_DEV_PRESENTr_SET BCM84834_PHYC_DEV_PRESENTr_SET
#define PHYC_DEV_PRESENTr_GET BCM84834_PHYC_DEV_PRESENTr_GET
#define PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_GET BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_GET
#define PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_SET BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV2_PREf_SET
#define PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_GET BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_GET
#define PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_SET BCM84834_PHYC_DEV_PRESENTr_VENSP_DEV1_PREf_SET
#define PHYC_DEV_PRESENTr_CLA22_EXT_PREf_GET BCM84834_PHYC_DEV_PRESENTr_CLA22_EXT_PREf_GET
#define PHYC_DEV_PRESENTr_CLA22_EXT_PREf_SET BCM84834_PHYC_DEV_PRESENTr_CLA22_EXT_PREf_SET
#define PHYC_DEV_PRESENTr_AUTONEG_PREf_GET BCM84834_PHYC_DEV_PRESENTr_AUTONEG_PREf_GET
#define PHYC_DEV_PRESENTr_AUTONEG_PREf_SET BCM84834_PHYC_DEV_PRESENTr_AUTONEG_PREf_SET
#define PHYC_DEV_PRESENTr_TC_PREf_GET BCM84834_PHYC_DEV_PRESENTr_TC_PREf_GET
#define PHYC_DEV_PRESENTr_TC_PREf_SET BCM84834_PHYC_DEV_PRESENTr_TC_PREf_SET
#define PHYC_DEV_PRESENTr_DTEXS_PREf_GET BCM84834_PHYC_DEV_PRESENTr_DTEXS_PREf_GET
#define PHYC_DEV_PRESENTr_DTEXS_PREf_SET BCM84834_PHYC_DEV_PRESENTr_DTEXS_PREf_SET
#define PHYC_DEV_PRESENTr_PHYXS_PREf_GET BCM84834_PHYC_DEV_PRESENTr_PHYXS_PREf_GET
#define PHYC_DEV_PRESENTr_PHYXS_PREf_SET BCM84834_PHYC_DEV_PRESENTr_PHYXS_PREf_SET
#define PHYC_DEV_PRESENTr_PCS_PREf_GET BCM84834_PHYC_DEV_PRESENTr_PCS_PREf_GET
#define PHYC_DEV_PRESENTr_PCS_PREf_SET BCM84834_PHYC_DEV_PRESENTr_PCS_PREf_SET
#define PHYC_DEV_PRESENTr_WIS_PREf_GET BCM84834_PHYC_DEV_PRESENTr_WIS_PREf_GET
#define PHYC_DEV_PRESENTr_WIS_PREf_SET BCM84834_PHYC_DEV_PRESENTr_WIS_PREf_SET
#define PHYC_DEV_PRESENTr_PMD_PREf_GET BCM84834_PHYC_DEV_PRESENTr_PMD_PREf_GET
#define PHYC_DEV_PRESENTr_PMD_PREf_SET BCM84834_PHYC_DEV_PRESENTr_PMD_PREf_SET
#define PHYC_DEV_PRESENTr_CLA22_PREf_GET BCM84834_PHYC_DEV_PRESENTr_CLA22_PREf_GET
#define PHYC_DEV_PRESENTr_CLA22_PREf_SET BCM84834_PHYC_DEV_PRESENTr_CLA22_PREf_SET
#define READ_PHYC_DEV_PRESENTr BCM84834_READ_PHYC_DEV_PRESENTr
#define WRITE_PHYC_DEV_PRESENTr BCM84834_WRITE_PHYC_DEV_PRESENTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_DEV_PRESENTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_BER_CNT_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa842
 * DEVAD:    1
 * DESC:     BER Counter Control
 * SIZE:     32
 * FIELDS:
 *     BER_CNT_ENA      
 *
 ******************************************************************************/
#define BCM84834_PHYC_BER_CNT_CTLr (0x0001a842 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_BER_CNT_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_BER_CNT_CTL.
 *
 */
typedef union BCM84834_PHYC_BER_CNT_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_ber_cnt_ctl[1];
	uint32_t _phyc_ber_cnt_ctl;
} BCM84834_PHYC_BER_CNT_CTLr_t;

#define BCM84834_PHYC_BER_CNT_CTLr_CLR(r) (r).phyc_ber_cnt_ctl[0] = 0
#define BCM84834_PHYC_BER_CNT_CTLr_SET(r,d) (r).phyc_ber_cnt_ctl[0] = d
#define BCM84834_PHYC_BER_CNT_CTLr_GET(r) (r).phyc_ber_cnt_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_BER_CNT_CTLr_BER_CNT_ENAf_GET(r) (((r).phyc_ber_cnt_ctl[0]) & 0x1)
#define BCM84834_PHYC_BER_CNT_CTLr_BER_CNT_ENAf_SET(r,f) (r).phyc_ber_cnt_ctl[0]=(((r).phyc_ber_cnt_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_BER_CNT_CTL.
 *
 */
#define BCM84834_READ_PHYC_BER_CNT_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_BER_CNT_CTLr,(_r._phyc_ber_cnt_ctl))
#define BCM84834_WRITE_PHYC_BER_CNT_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_BER_CNT_CTLr,(_r._phyc_ber_cnt_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_BER_CNT_CTLr BCM84834_PHYC_BER_CNT_CTLr
#define PHYC_BER_CNT_CTLr_SIZE BCM84834_PHYC_BER_CNT_CTLr_SIZE
typedef BCM84834_PHYC_BER_CNT_CTLr_t PHYC_BER_CNT_CTLr_t;
#define PHYC_BER_CNT_CTLr_CLR BCM84834_PHYC_BER_CNT_CTLr_CLR
#define PHYC_BER_CNT_CTLr_SET BCM84834_PHYC_BER_CNT_CTLr_SET
#define PHYC_BER_CNT_CTLr_GET BCM84834_PHYC_BER_CNT_CTLr_GET
#define PHYC_BER_CNT_CTLr_BER_CNT_ENAf_GET BCM84834_PHYC_BER_CNT_CTLr_BER_CNT_ENAf_GET
#define PHYC_BER_CNT_CTLr_BER_CNT_ENAf_SET BCM84834_PHYC_BER_CNT_CTLr_BER_CNT_ENAf_SET
#define READ_PHYC_BER_CNT_CTLr BCM84834_READ_PHYC_BER_CNT_CTLr
#define WRITE_PHYC_BER_CNT_CTLr BCM84834_WRITE_PHYC_BER_CNT_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_BER_CNT_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_DESCR_DATA_CNT_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa843
 * DEVAD:    1
 * DESC:     Descrambled Data Counter High
 * SIZE:     32
 * FIELDS:
 *     DESCR_DATA_CNT_H 
 *
 ******************************************************************************/
#define BCM84834_PHYC_DESCR_DATA_CNT_Hr (0x0001a843 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_DESCR_DATA_CNT_H.
 *
 */
typedef union BCM84834_PHYC_DESCR_DATA_CNT_Hr_s {
	uint32_t v[1];
	uint32_t phyc_descr_data_cnt_h[1];
	uint32_t _phyc_descr_data_cnt_h;
} BCM84834_PHYC_DESCR_DATA_CNT_Hr_t;

#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_CLR(r) (r).phyc_descr_data_cnt_h[0] = 0
#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_SET(r,d) (r).phyc_descr_data_cnt_h[0] = d
#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_GET(r) (r).phyc_descr_data_cnt_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_GET(r) (((r).phyc_descr_data_cnt_h[0]) & 0xffff)
#define BCM84834_PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_SET(r,f) (r).phyc_descr_data_cnt_h[0]=(((r).phyc_descr_data_cnt_h[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_DESCR_DATA_CNT_H.
 *
 */
#define BCM84834_READ_PHYC_DESCR_DATA_CNT_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Hr,(_r._phyc_descr_data_cnt_h))
#define BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Hr,(_r._phyc_descr_data_cnt_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_DESCR_DATA_CNT_Hr BCM84834_PHYC_DESCR_DATA_CNT_Hr
#define PHYC_DESCR_DATA_CNT_Hr_SIZE BCM84834_PHYC_DESCR_DATA_CNT_Hr_SIZE
typedef BCM84834_PHYC_DESCR_DATA_CNT_Hr_t PHYC_DESCR_DATA_CNT_Hr_t;
#define PHYC_DESCR_DATA_CNT_Hr_CLR BCM84834_PHYC_DESCR_DATA_CNT_Hr_CLR
#define PHYC_DESCR_DATA_CNT_Hr_SET BCM84834_PHYC_DESCR_DATA_CNT_Hr_SET
#define PHYC_DESCR_DATA_CNT_Hr_GET BCM84834_PHYC_DESCR_DATA_CNT_Hr_GET
#define PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_GET BCM84834_PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_GET
#define PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_SET BCM84834_PHYC_DESCR_DATA_CNT_Hr_DESCR_DATA_CNT_Hf_SET
#define READ_PHYC_DESCR_DATA_CNT_Hr BCM84834_READ_PHYC_DESCR_DATA_CNT_Hr
#define WRITE_PHYC_DESCR_DATA_CNT_Hr BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_DESCR_DATA_CNT_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_DESCR_DATA_CNT_M
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa844
 * DEVAD:    1
 * DESC:     Descrambled Data Counter Middle
 * SIZE:     32
 * FIELDS:
 *     DESCR_DATA_CNT_M 
 *
 ******************************************************************************/
#define BCM84834_PHYC_DESCR_DATA_CNT_Mr (0x0001a844 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_DESCR_DATA_CNT_M.
 *
 */
typedef union BCM84834_PHYC_DESCR_DATA_CNT_Mr_s {
	uint32_t v[1];
	uint32_t phyc_descr_data_cnt_m[1];
	uint32_t _phyc_descr_data_cnt_m;
} BCM84834_PHYC_DESCR_DATA_CNT_Mr_t;

#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_CLR(r) (r).phyc_descr_data_cnt_m[0] = 0
#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_SET(r,d) (r).phyc_descr_data_cnt_m[0] = d
#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_GET(r) (r).phyc_descr_data_cnt_m[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_GET(r) (((r).phyc_descr_data_cnt_m[0]) & 0xffff)
#define BCM84834_PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_SET(r,f) (r).phyc_descr_data_cnt_m[0]=(((r).phyc_descr_data_cnt_m[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_DESCR_DATA_CNT_M.
 *
 */
#define BCM84834_READ_PHYC_DESCR_DATA_CNT_Mr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Mr,(_r._phyc_descr_data_cnt_m))
#define BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Mr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Mr,(_r._phyc_descr_data_cnt_m))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_DESCR_DATA_CNT_Mr BCM84834_PHYC_DESCR_DATA_CNT_Mr
#define PHYC_DESCR_DATA_CNT_Mr_SIZE BCM84834_PHYC_DESCR_DATA_CNT_Mr_SIZE
typedef BCM84834_PHYC_DESCR_DATA_CNT_Mr_t PHYC_DESCR_DATA_CNT_Mr_t;
#define PHYC_DESCR_DATA_CNT_Mr_CLR BCM84834_PHYC_DESCR_DATA_CNT_Mr_CLR
#define PHYC_DESCR_DATA_CNT_Mr_SET BCM84834_PHYC_DESCR_DATA_CNT_Mr_SET
#define PHYC_DESCR_DATA_CNT_Mr_GET BCM84834_PHYC_DESCR_DATA_CNT_Mr_GET
#define PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_GET BCM84834_PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_GET
#define PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_SET BCM84834_PHYC_DESCR_DATA_CNT_Mr_DESCR_DATA_CNT_Mf_SET
#define READ_PHYC_DESCR_DATA_CNT_Mr BCM84834_READ_PHYC_DESCR_DATA_CNT_Mr
#define WRITE_PHYC_DESCR_DATA_CNT_Mr BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Mr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_DESCR_DATA_CNT_Mr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_DESCR_DATA_CNT_L
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa845
 * DEVAD:    1
 * DESC:     Descrambled Data Counter Low
 * SIZE:     32
 * FIELDS:
 *     DESCR_DATA_CNT_L 
 *
 ******************************************************************************/
#define BCM84834_PHYC_DESCR_DATA_CNT_Lr (0x0001a845 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_DESCR_DATA_CNT_L.
 *
 */
typedef union BCM84834_PHYC_DESCR_DATA_CNT_Lr_s {
	uint32_t v[1];
	uint32_t phyc_descr_data_cnt_l[1];
	uint32_t _phyc_descr_data_cnt_l;
} BCM84834_PHYC_DESCR_DATA_CNT_Lr_t;

#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_CLR(r) (r).phyc_descr_data_cnt_l[0] = 0
#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_SET(r,d) (r).phyc_descr_data_cnt_l[0] = d
#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_GET(r) (r).phyc_descr_data_cnt_l[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_GET(r) (((r).phyc_descr_data_cnt_l[0]) & 0xffff)
#define BCM84834_PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_SET(r,f) (r).phyc_descr_data_cnt_l[0]=(((r).phyc_descr_data_cnt_l[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_DESCR_DATA_CNT_L.
 *
 */
#define BCM84834_READ_PHYC_DESCR_DATA_CNT_Lr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Lr,(_r._phyc_descr_data_cnt_l))
#define BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Lr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_DESCR_DATA_CNT_Lr,(_r._phyc_descr_data_cnt_l))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_DESCR_DATA_CNT_Lr BCM84834_PHYC_DESCR_DATA_CNT_Lr
#define PHYC_DESCR_DATA_CNT_Lr_SIZE BCM84834_PHYC_DESCR_DATA_CNT_Lr_SIZE
typedef BCM84834_PHYC_DESCR_DATA_CNT_Lr_t PHYC_DESCR_DATA_CNT_Lr_t;
#define PHYC_DESCR_DATA_CNT_Lr_CLR BCM84834_PHYC_DESCR_DATA_CNT_Lr_CLR
#define PHYC_DESCR_DATA_CNT_Lr_SET BCM84834_PHYC_DESCR_DATA_CNT_Lr_SET
#define PHYC_DESCR_DATA_CNT_Lr_GET BCM84834_PHYC_DESCR_DATA_CNT_Lr_GET
#define PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_GET BCM84834_PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_GET
#define PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_SET BCM84834_PHYC_DESCR_DATA_CNT_Lr_DESCR_DATA_CNT_Lf_SET
#define READ_PHYC_DESCR_DATA_CNT_Lr BCM84834_READ_PHYC_DESCR_DATA_CNT_Lr
#define WRITE_PHYC_DESCR_DATA_CNT_Lr BCM84834_WRITE_PHYC_DESCR_DATA_CNT_Lr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_DESCR_DATA_CNT_Lr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_ERR_BIT_CNT_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa846
 * DEVAD:    1
 * DESC:     Error Bit Counter High
 * SIZE:     32
 * FIELDS:
 *     ERR_BIT_CNT_H    
 *
 ******************************************************************************/
#define BCM84834_PHYC_ERR_BIT_CNT_Hr (0x0001a846 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_ERR_BIT_CNT_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_ERR_BIT_CNT_H.
 *
 */
typedef union BCM84834_PHYC_ERR_BIT_CNT_Hr_s {
	uint32_t v[1];
	uint32_t phyc_err_bit_cnt_h[1];
	uint32_t _phyc_err_bit_cnt_h;
} BCM84834_PHYC_ERR_BIT_CNT_Hr_t;

#define BCM84834_PHYC_ERR_BIT_CNT_Hr_CLR(r) (r).phyc_err_bit_cnt_h[0] = 0
#define BCM84834_PHYC_ERR_BIT_CNT_Hr_SET(r,d) (r).phyc_err_bit_cnt_h[0] = d
#define BCM84834_PHYC_ERR_BIT_CNT_Hr_GET(r) (r).phyc_err_bit_cnt_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_GET(r) (((r).phyc_err_bit_cnt_h[0]) & 0xffff)
#define BCM84834_PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_SET(r,f) (r).phyc_err_bit_cnt_h[0]=(((r).phyc_err_bit_cnt_h[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_ERR_BIT_CNT_H.
 *
 */
#define BCM84834_READ_PHYC_ERR_BIT_CNT_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_ERR_BIT_CNT_Hr,(_r._phyc_err_bit_cnt_h))
#define BCM84834_WRITE_PHYC_ERR_BIT_CNT_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_ERR_BIT_CNT_Hr,(_r._phyc_err_bit_cnt_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_ERR_BIT_CNT_Hr BCM84834_PHYC_ERR_BIT_CNT_Hr
#define PHYC_ERR_BIT_CNT_Hr_SIZE BCM84834_PHYC_ERR_BIT_CNT_Hr_SIZE
typedef BCM84834_PHYC_ERR_BIT_CNT_Hr_t PHYC_ERR_BIT_CNT_Hr_t;
#define PHYC_ERR_BIT_CNT_Hr_CLR BCM84834_PHYC_ERR_BIT_CNT_Hr_CLR
#define PHYC_ERR_BIT_CNT_Hr_SET BCM84834_PHYC_ERR_BIT_CNT_Hr_SET
#define PHYC_ERR_BIT_CNT_Hr_GET BCM84834_PHYC_ERR_BIT_CNT_Hr_GET
#define PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_GET BCM84834_PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_GET
#define PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_SET BCM84834_PHYC_ERR_BIT_CNT_Hr_ERR_BIT_CNT_Hf_SET
#define READ_PHYC_ERR_BIT_CNT_Hr BCM84834_READ_PHYC_ERR_BIT_CNT_Hr
#define WRITE_PHYC_ERR_BIT_CNT_Hr BCM84834_WRITE_PHYC_ERR_BIT_CNT_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_ERR_BIT_CNT_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_ERR_BIT_CNT_M
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa847
 * DEVAD:    1
 * DESC:     Error Bit Counter Middle
 * SIZE:     32
 * FIELDS:
 *     ERR_BIT_CNT_M    
 *
 ******************************************************************************/
#define BCM84834_PHYC_ERR_BIT_CNT_Mr (0x0001a847 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_ERR_BIT_CNT_Mr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_ERR_BIT_CNT_M.
 *
 */
typedef union BCM84834_PHYC_ERR_BIT_CNT_Mr_s {
	uint32_t v[1];
	uint32_t phyc_err_bit_cnt_m[1];
	uint32_t _phyc_err_bit_cnt_m;
} BCM84834_PHYC_ERR_BIT_CNT_Mr_t;

#define BCM84834_PHYC_ERR_BIT_CNT_Mr_CLR(r) (r).phyc_err_bit_cnt_m[0] = 0
#define BCM84834_PHYC_ERR_BIT_CNT_Mr_SET(r,d) (r).phyc_err_bit_cnt_m[0] = d
#define BCM84834_PHYC_ERR_BIT_CNT_Mr_GET(r) (r).phyc_err_bit_cnt_m[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_GET(r) (((r).phyc_err_bit_cnt_m[0]) & 0xffff)
#define BCM84834_PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_SET(r,f) (r).phyc_err_bit_cnt_m[0]=(((r).phyc_err_bit_cnt_m[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_ERR_BIT_CNT_M.
 *
 */
#define BCM84834_READ_PHYC_ERR_BIT_CNT_Mr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_ERR_BIT_CNT_Mr,(_r._phyc_err_bit_cnt_m))
#define BCM84834_WRITE_PHYC_ERR_BIT_CNT_Mr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_ERR_BIT_CNT_Mr,(_r._phyc_err_bit_cnt_m))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_ERR_BIT_CNT_Mr BCM84834_PHYC_ERR_BIT_CNT_Mr
#define PHYC_ERR_BIT_CNT_Mr_SIZE BCM84834_PHYC_ERR_BIT_CNT_Mr_SIZE
typedef BCM84834_PHYC_ERR_BIT_CNT_Mr_t PHYC_ERR_BIT_CNT_Mr_t;
#define PHYC_ERR_BIT_CNT_Mr_CLR BCM84834_PHYC_ERR_BIT_CNT_Mr_CLR
#define PHYC_ERR_BIT_CNT_Mr_SET BCM84834_PHYC_ERR_BIT_CNT_Mr_SET
#define PHYC_ERR_BIT_CNT_Mr_GET BCM84834_PHYC_ERR_BIT_CNT_Mr_GET
#define PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_GET BCM84834_PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_GET
#define PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_SET BCM84834_PHYC_ERR_BIT_CNT_Mr_ERR_BIT_CNT_Mf_SET
#define READ_PHYC_ERR_BIT_CNT_Mr BCM84834_READ_PHYC_ERR_BIT_CNT_Mr
#define WRITE_PHYC_ERR_BIT_CNT_Mr BCM84834_WRITE_PHYC_ERR_BIT_CNT_Mr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_ERR_BIT_CNT_Mr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_ERR_BIT_CNT_L
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa848
 * DEVAD:    1
 * DESC:     Error Bit Counter Low
 * SIZE:     32
 * FIELDS:
 *     ERR_BIT_CNT_L    
 *
 ******************************************************************************/
#define BCM84834_PHYC_ERR_BIT_CNT_Lr (0x0001a848 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_ERR_BIT_CNT_Lr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_ERR_BIT_CNT_L.
 *
 */
typedef union BCM84834_PHYC_ERR_BIT_CNT_Lr_s {
	uint32_t v[1];
	uint32_t phyc_err_bit_cnt_l[1];
	uint32_t _phyc_err_bit_cnt_l;
} BCM84834_PHYC_ERR_BIT_CNT_Lr_t;

#define BCM84834_PHYC_ERR_BIT_CNT_Lr_CLR(r) (r).phyc_err_bit_cnt_l[0] = 0
#define BCM84834_PHYC_ERR_BIT_CNT_Lr_SET(r,d) (r).phyc_err_bit_cnt_l[0] = d
#define BCM84834_PHYC_ERR_BIT_CNT_Lr_GET(r) (r).phyc_err_bit_cnt_l[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_GET(r) (((r).phyc_err_bit_cnt_l[0]) & 0xffff)
#define BCM84834_PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_SET(r,f) (r).phyc_err_bit_cnt_l[0]=(((r).phyc_err_bit_cnt_l[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_ERR_BIT_CNT_L.
 *
 */
#define BCM84834_READ_PHYC_ERR_BIT_CNT_Lr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_ERR_BIT_CNT_Lr,(_r._phyc_err_bit_cnt_l))
#define BCM84834_WRITE_PHYC_ERR_BIT_CNT_Lr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_ERR_BIT_CNT_Lr,(_r._phyc_err_bit_cnt_l))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_ERR_BIT_CNT_Lr BCM84834_PHYC_ERR_BIT_CNT_Lr
#define PHYC_ERR_BIT_CNT_Lr_SIZE BCM84834_PHYC_ERR_BIT_CNT_Lr_SIZE
typedef BCM84834_PHYC_ERR_BIT_CNT_Lr_t PHYC_ERR_BIT_CNT_Lr_t;
#define PHYC_ERR_BIT_CNT_Lr_CLR BCM84834_PHYC_ERR_BIT_CNT_Lr_CLR
#define PHYC_ERR_BIT_CNT_Lr_SET BCM84834_PHYC_ERR_BIT_CNT_Lr_SET
#define PHYC_ERR_BIT_CNT_Lr_GET BCM84834_PHYC_ERR_BIT_CNT_Lr_GET
#define PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_GET BCM84834_PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_GET
#define PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_SET BCM84834_PHYC_ERR_BIT_CNT_Lr_ERR_BIT_CNT_Lf_SET
#define READ_PHYC_ERR_BIT_CNT_Lr BCM84834_READ_PHYC_ERR_BIT_CNT_Lr
#define WRITE_PHYC_ERR_BIT_CNT_Lr BCM84834_WRITE_PHYC_ERR_BIT_CNT_Lr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_ERR_BIT_CNT_Lr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PRBS_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa849
 * DEVAD:    1
 * DESC:     PRBS Control
 * SIZE:     32
 * FIELDS:
 *     PRBS_POWER_DOWN  
 *     PRBS1_LOAD_OVERRIDE 
 *     INFO_FIELD_SEARCH_START 
 *     DISTANCE_MEASURE_START 
 *     PRBS_ACQUIRE_START 
 *     PRBS_POS_SHIFT   
 *     PRBS_NEG_SHIFT   
 *     LATCH_PRBS       
 *     LOAD_SEED_SEL2   
 *     LOAD_SEED_SEL1   
 *     PMA_DATA_SEL     
 *
 ******************************************************************************/
#define BCM84834_PHYC_PRBS_CTLr (0x0001a849 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PRBS_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PRBS_CTL.
 *
 */
typedef union BCM84834_PHYC_PRBS_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_prbs_ctl[1];
	uint32_t _phyc_prbs_ctl;
} BCM84834_PHYC_PRBS_CTLr_t;

#define BCM84834_PHYC_PRBS_CTLr_CLR(r) (r).phyc_prbs_ctl[0] = 0
#define BCM84834_PHYC_PRBS_CTLr_SET(r,d) (r).phyc_prbs_ctl[0] = d
#define BCM84834_PHYC_PRBS_CTLr_GET(r) (r).phyc_prbs_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PRBS_CTLr_PMA_DATA_SELf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_PMA_DATA_SELf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_GET(r) ((((r).phyc_prbs_ctl[0]) >> 13) & 0x3)
#define BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_GET(r) ((((r).phyc_prbs_ctl[0]) >> 11) & 0x3)
#define BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCM84834_PHYC_PRBS_CTLr_LATCH_PRBSf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 10) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_LATCH_PRBSf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 9) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 7) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 6) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_GET(r) ((((r).phyc_prbs_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_GET(r) (((r).phyc_prbs_ctl[0]) & 0xf)
#define BCM84834_PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_SET(r,f) (r).phyc_prbs_ctl[0]=(((r).phyc_prbs_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_PRBS_CTL.
 *
 */
#define BCM84834_READ_PHYC_PRBS_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PRBS_CTLr,(_r._phyc_prbs_ctl))
#define BCM84834_WRITE_PHYC_PRBS_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PRBS_CTLr,(_r._phyc_prbs_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PRBS_CTLr BCM84834_PHYC_PRBS_CTLr
#define PHYC_PRBS_CTLr_SIZE BCM84834_PHYC_PRBS_CTLr_SIZE
typedef BCM84834_PHYC_PRBS_CTLr_t PHYC_PRBS_CTLr_t;
#define PHYC_PRBS_CTLr_CLR BCM84834_PHYC_PRBS_CTLr_CLR
#define PHYC_PRBS_CTLr_SET BCM84834_PHYC_PRBS_CTLr_SET
#define PHYC_PRBS_CTLr_GET BCM84834_PHYC_PRBS_CTLr_GET
#define PHYC_PRBS_CTLr_PMA_DATA_SELf_GET BCM84834_PHYC_PRBS_CTLr_PMA_DATA_SELf_GET
#define PHYC_PRBS_CTLr_PMA_DATA_SELf_SET BCM84834_PHYC_PRBS_CTLr_PMA_DATA_SELf_SET
#define PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_GET BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_GET
#define PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_SET BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL1f_SET
#define PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_GET BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_GET
#define PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_SET BCM84834_PHYC_PRBS_CTLr_LOAD_SEED_SEL2f_SET
#define PHYC_PRBS_CTLr_LATCH_PRBSf_GET BCM84834_PHYC_PRBS_CTLr_LATCH_PRBSf_GET
#define PHYC_PRBS_CTLr_LATCH_PRBSf_SET BCM84834_PHYC_PRBS_CTLr_LATCH_PRBSf_SET
#define PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_GET BCM84834_PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_GET
#define PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_SET BCM84834_PHYC_PRBS_CTLr_PRBS_NEG_SHIFTf_SET
#define PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_GET BCM84834_PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_GET
#define PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_SET BCM84834_PHYC_PRBS_CTLr_PRBS_POS_SHIFTf_SET
#define PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_GET BCM84834_PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_GET
#define PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_SET BCM84834_PHYC_PRBS_CTLr_PRBS_ACQUIRE_STARTf_SET
#define PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_GET BCM84834_PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_GET
#define PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_SET BCM84834_PHYC_PRBS_CTLr_DISTANCE_MEASURE_STARTf_SET
#define PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_GET BCM84834_PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_GET
#define PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_SET BCM84834_PHYC_PRBS_CTLr_INFO_FIELD_SEARCH_STARTf_SET
#define PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_GET BCM84834_PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_GET
#define PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_SET BCM84834_PHYC_PRBS_CTLr_PRBS1_LOAD_OVERRIDEf_SET
#define PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_GET BCM84834_PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_GET
#define PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_SET BCM84834_PHYC_PRBS_CTLr_PRBS_POWER_DOWNf_SET
#define READ_PHYC_PRBS_CTLr BCM84834_READ_PHYC_PRBS_CTLr
#define WRITE_PHYC_PRBS_CTLr BCM84834_WRITE_PHYC_PRBS_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PRBS_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PRBS_ACQUIRE_PERIOD
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84a
 * DEVAD:    1
 * DESC:     PRBS Acquire Period
 * SIZE:     32
 * FIELDS:
 *     ACQUIRE_PERIOD   
 *     PRBS_MASTER_CFG  
 *
 ******************************************************************************/
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr (0x0001a84a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PRBS_ACQUIRE_PERIOD.
 *
 */
typedef union BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_s {
	uint32_t v[1];
	uint32_t phyc_prbs_acquire_period[1];
	uint32_t _phyc_prbs_acquire_period;
} BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_t;

#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_CLR(r) (r).phyc_prbs_acquire_period[0] = 0
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_SET(r,d) (r).phyc_prbs_acquire_period[0] = d
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_GET(r) (r).phyc_prbs_acquire_period[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_GET(r) ((((r).phyc_prbs_acquire_period[0]) >> 15) & 0x1)
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_SET(r,f) (r).phyc_prbs_acquire_period[0]=(((r).phyc_prbs_acquire_period[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_GET(r) (((r).phyc_prbs_acquire_period[0]) & 0x3ff)
#define BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_SET(r,f) (r).phyc_prbs_acquire_period[0]=(((r).phyc_prbs_acquire_period[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access PHYC_PRBS_ACQUIRE_PERIOD.
 *
 */
#define BCM84834_READ_PHYC_PRBS_ACQUIRE_PERIODr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PRBS_ACQUIRE_PERIODr,(_r._phyc_prbs_acquire_period))
#define BCM84834_WRITE_PHYC_PRBS_ACQUIRE_PERIODr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PRBS_ACQUIRE_PERIODr,(_r._phyc_prbs_acquire_period))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PRBS_ACQUIRE_PERIODr BCM84834_PHYC_PRBS_ACQUIRE_PERIODr
#define PHYC_PRBS_ACQUIRE_PERIODr_SIZE BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_SIZE
typedef BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_t PHYC_PRBS_ACQUIRE_PERIODr_t;
#define PHYC_PRBS_ACQUIRE_PERIODr_CLR BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_CLR
#define PHYC_PRBS_ACQUIRE_PERIODr_SET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_SET
#define PHYC_PRBS_ACQUIRE_PERIODr_GET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_GET
#define PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_GET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_GET
#define PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_SET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_PRBS_MASTER_CFGf_SET
#define PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_GET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_GET
#define PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_SET BCM84834_PHYC_PRBS_ACQUIRE_PERIODr_ACQUIRE_PERIODf_SET
#define READ_PHYC_PRBS_ACQUIRE_PERIODr BCM84834_READ_PHYC_PRBS_ACQUIRE_PERIODr
#define WRITE_PHYC_PRBS_ACQUIRE_PERIODr BCM84834_WRITE_PHYC_PRBS_ACQUIRE_PERIODr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PRBS_ACQUIRE_PERIODr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_ACQUIRE_ERR_THRESH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84b
 * DEVAD:    1
 * DESC:     PRBS Acquire Error Threshold
 * SIZE:     32
 * FIELDS:
 *     ACQUIRE_ERR_THRESH 
 *
 ******************************************************************************/
#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr (0x0001a84b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_ACQUIRE_ERR_THRESH.
 *
 */
typedef union BCM84834_PHYC_ACQUIRE_ERR_THRESHr_s {
	uint32_t v[1];
	uint32_t phyc_acquire_err_thresh[1];
	uint32_t _phyc_acquire_err_thresh;
} BCM84834_PHYC_ACQUIRE_ERR_THRESHr_t;

#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_CLR(r) (r).phyc_acquire_err_thresh[0] = 0
#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_SET(r,d) (r).phyc_acquire_err_thresh[0] = d
#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_GET(r) (r).phyc_acquire_err_thresh[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_GET(r) (((r).phyc_acquire_err_thresh[0]) & 0xff)
#define BCM84834_PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_SET(r,f) (r).phyc_acquire_err_thresh[0]=(((r).phyc_acquire_err_thresh[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_ACQUIRE_ERR_THRESH.
 *
 */
#define BCM84834_READ_PHYC_ACQUIRE_ERR_THRESHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_ACQUIRE_ERR_THRESHr,(_r._phyc_acquire_err_thresh))
#define BCM84834_WRITE_PHYC_ACQUIRE_ERR_THRESHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_ACQUIRE_ERR_THRESHr,(_r._phyc_acquire_err_thresh))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_ACQUIRE_ERR_THRESHr BCM84834_PHYC_ACQUIRE_ERR_THRESHr
#define PHYC_ACQUIRE_ERR_THRESHr_SIZE BCM84834_PHYC_ACQUIRE_ERR_THRESHr_SIZE
typedef BCM84834_PHYC_ACQUIRE_ERR_THRESHr_t PHYC_ACQUIRE_ERR_THRESHr_t;
#define PHYC_ACQUIRE_ERR_THRESHr_CLR BCM84834_PHYC_ACQUIRE_ERR_THRESHr_CLR
#define PHYC_ACQUIRE_ERR_THRESHr_SET BCM84834_PHYC_ACQUIRE_ERR_THRESHr_SET
#define PHYC_ACQUIRE_ERR_THRESHr_GET BCM84834_PHYC_ACQUIRE_ERR_THRESHr_GET
#define PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_GET BCM84834_PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_GET
#define PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_SET BCM84834_PHYC_ACQUIRE_ERR_THRESHr_ACQUIRE_ERR_THRESHf_SET
#define READ_PHYC_ACQUIRE_ERR_THRESHr BCM84834_READ_PHYC_ACQUIRE_ERR_THRESHr
#define WRITE_PHYC_ACQUIRE_ERR_THRESHr BCM84834_WRITE_PHYC_ACQUIRE_ERR_THRESHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_ACQUIRE_ERR_THRESHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_LDPC_FRAME_MARK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84c
 * DEVAD:    1
 * DESC:     CTS LDPC Frame Mark
 * SIZE:     32
 * FIELDS:
 *     CTS_LDPC_FRAME_MARK 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr (0x0001a84c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_LDPC_FRAME_MARK.
 *
 */
typedef union BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_s {
	uint32_t v[1];
	uint32_t phyc_cts_ldpc_frame_mark[1];
	uint32_t _phyc_cts_ldpc_frame_mark;
} BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_t;

#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CLR(r) (r).phyc_cts_ldpc_frame_mark[0] = 0
#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_SET(r,d) (r).phyc_cts_ldpc_frame_mark[0] = d
#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_GET(r) (r).phyc_cts_ldpc_frame_mark[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_GET(r) (((r).phyc_cts_ldpc_frame_mark[0]) & 0x7f)
#define BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_SET(r,f) (r).phyc_cts_ldpc_frame_mark[0]=(((r).phyc_cts_ldpc_frame_mark[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_CTS_LDPC_FRAME_MARK.
 *
 */
#define BCM84834_READ_PHYC_CTS_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_LDPC_FRAME_MARKr,(_r._phyc_cts_ldpc_frame_mark))
#define BCM84834_WRITE_PHYC_CTS_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_LDPC_FRAME_MARKr,(_r._phyc_cts_ldpc_frame_mark))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_LDPC_FRAME_MARKr BCM84834_PHYC_CTS_LDPC_FRAME_MARKr
#define PHYC_CTS_LDPC_FRAME_MARKr_SIZE BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_SIZE
typedef BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_t PHYC_CTS_LDPC_FRAME_MARKr_t;
#define PHYC_CTS_LDPC_FRAME_MARKr_CLR BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CLR
#define PHYC_CTS_LDPC_FRAME_MARKr_SET BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_SET
#define PHYC_CTS_LDPC_FRAME_MARKr_GET BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_GET
#define PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_GET BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_GET
#define PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_SET BCM84834_PHYC_CTS_LDPC_FRAME_MARKr_CTS_LDPC_FRAME_MARKf_SET
#define READ_PHYC_CTS_LDPC_FRAME_MARKr BCM84834_READ_PHYC_CTS_LDPC_FRAME_MARKr
#define WRITE_PHYC_CTS_LDPC_FRAME_MARKr BCM84834_WRITE_PHYC_CTS_LDPC_FRAME_MARKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_LDPC_FRAME_MARKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PRBS1_SEED_OVERRIDE_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84d
 * DEVAD:    1
 * DESC:     PRBS1 Seed Override 2
 * SIZE:     32
 * FIELDS:
 *     PRBS1_SEED_OVERRIDE_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r (0x0001a84d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PRBS1_SEED_OVERRIDE_2.
 *
 */
typedef union BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_s {
	uint32_t v[1];
	uint32_t phyc_prbs1_seed_override_2[1];
	uint32_t _phyc_prbs1_seed_override_2;
} BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_t;

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_CLR(r) (r).phyc_prbs1_seed_override_2[0] = 0
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_SET(r,d) (r).phyc_prbs1_seed_override_2[0] = d
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_GET(r) (r).phyc_prbs1_seed_override_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_GET(r) (((r).phyc_prbs1_seed_override_2[0]) & 0x1)
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_SET(r,f) (r).phyc_prbs1_seed_override_2[0]=(((r).phyc_prbs1_seed_override_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_PRBS1_SEED_OVERRIDE_2.
 *
 */
#define BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r,(_r._phyc_prbs1_seed_override_2))
#define BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r,(_r._phyc_prbs1_seed_override_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PRBS1_SEED_OVERRIDE_2r BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r
#define PHYC_PRBS1_SEED_OVERRIDE_2r_SIZE BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_SIZE
typedef BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_t PHYC_PRBS1_SEED_OVERRIDE_2r_t;
#define PHYC_PRBS1_SEED_OVERRIDE_2r_CLR BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_CLR
#define PHYC_PRBS1_SEED_OVERRIDE_2r_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_SET
#define PHYC_PRBS1_SEED_OVERRIDE_2r_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_GET
#define PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_GET
#define PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r_PRBS1_SEED_OVERRIDE_32f_SET
#define READ_PHYC_PRBS1_SEED_OVERRIDE_2r BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_2r
#define WRITE_PHYC_PRBS1_SEED_OVERRIDE_2r BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PRBS1_SEED_OVERRIDE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PRBS1_SEED_OVERRIDE_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84e
 * DEVAD:    1
 * DESC:     PRBS1 Seed Override 1
 * SIZE:     32
 * FIELDS:
 *     PRBS1_SEED_OVERRIDE_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r (0x0001a84e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PRBS1_SEED_OVERRIDE_1.
 *
 */
typedef union BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_s {
	uint32_t v[1];
	uint32_t phyc_prbs1_seed_override_1[1];
	uint32_t _phyc_prbs1_seed_override_1;
} BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_t;

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_CLR(r) (r).phyc_prbs1_seed_override_1[0] = 0
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_SET(r,d) (r).phyc_prbs1_seed_override_1[0] = d
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_GET(r) (r).phyc_prbs1_seed_override_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_GET(r) (((r).phyc_prbs1_seed_override_1[0]) & 0xffff)
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_SET(r,f) (r).phyc_prbs1_seed_override_1[0]=(((r).phyc_prbs1_seed_override_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PRBS1_SEED_OVERRIDE_1.
 *
 */
#define BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r,(_r._phyc_prbs1_seed_override_1))
#define BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r,(_r._phyc_prbs1_seed_override_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PRBS1_SEED_OVERRIDE_1r BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r
#define PHYC_PRBS1_SEED_OVERRIDE_1r_SIZE BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_SIZE
typedef BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_t PHYC_PRBS1_SEED_OVERRIDE_1r_t;
#define PHYC_PRBS1_SEED_OVERRIDE_1r_CLR BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_CLR
#define PHYC_PRBS1_SEED_OVERRIDE_1r_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_SET
#define PHYC_PRBS1_SEED_OVERRIDE_1r_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_GET
#define PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_GET
#define PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r_PRBS1_SEED_OVERRIDE_3116f_SET
#define READ_PHYC_PRBS1_SEED_OVERRIDE_1r BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_1r
#define WRITE_PHYC_PRBS1_SEED_OVERRIDE_1r BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PRBS1_SEED_OVERRIDE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PRBS1_SEED_OVERRIDE_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa84f
 * DEVAD:    1
 * DESC:     PRBS1 Seed Override 0
 * SIZE:     32
 * FIELDS:
 *     PRBS1_SEED_OVERRIDE_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r (0x0001a84f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PRBS1_SEED_OVERRIDE_0.
 *
 */
typedef union BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_s {
	uint32_t v[1];
	uint32_t phyc_prbs1_seed_override_0[1];
	uint32_t _phyc_prbs1_seed_override_0;
} BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_t;

#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_CLR(r) (r).phyc_prbs1_seed_override_0[0] = 0
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_SET(r,d) (r).phyc_prbs1_seed_override_0[0] = d
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_GET(r) (r).phyc_prbs1_seed_override_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_GET(r) (((r).phyc_prbs1_seed_override_0[0]) & 0xffff)
#define BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_SET(r,f) (r).phyc_prbs1_seed_override_0[0]=(((r).phyc_prbs1_seed_override_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PRBS1_SEED_OVERRIDE_0.
 *
 */
#define BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r,(_r._phyc_prbs1_seed_override_0))
#define BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r,(_r._phyc_prbs1_seed_override_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PRBS1_SEED_OVERRIDE_0r BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r
#define PHYC_PRBS1_SEED_OVERRIDE_0r_SIZE BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_SIZE
typedef BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_t PHYC_PRBS1_SEED_OVERRIDE_0r_t;
#define PHYC_PRBS1_SEED_OVERRIDE_0r_CLR BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_CLR
#define PHYC_PRBS1_SEED_OVERRIDE_0r_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_SET
#define PHYC_PRBS1_SEED_OVERRIDE_0r_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_GET
#define PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_GET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_GET
#define PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_SET BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r_PRBS1_SEED_OVERRIDE_1500f_SET
#define READ_PHYC_PRBS1_SEED_OVERRIDE_0r BCM84834_READ_PHYC_PRBS1_SEED_OVERRIDE_0r
#define WRITE_PHYC_PRBS1_SEED_OVERRIDE_0r BCM84834_WRITE_PHYC_PRBS1_SEED_OVERRIDE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PRBS1_SEED_OVERRIDE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_MAX_DIS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa850
 * DEVAD:    1
 * DESC:     CTS Maximum Distance
 * SIZE:     32
 * FIELDS:
 *     CTX_MAX_DIS      
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_MAX_DISr (0x0001a850 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_MAX_DISr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_MAX_DIS.
 *
 */
typedef union BCM84834_PHYC_CTS_MAX_DISr_s {
	uint32_t v[1];
	uint32_t phyc_cts_max_dis[1];
	uint32_t _phyc_cts_max_dis;
} BCM84834_PHYC_CTS_MAX_DISr_t;

#define BCM84834_PHYC_CTS_MAX_DISr_CLR(r) (r).phyc_cts_max_dis[0] = 0
#define BCM84834_PHYC_CTS_MAX_DISr_SET(r,d) (r).phyc_cts_max_dis[0] = d
#define BCM84834_PHYC_CTS_MAX_DISr_GET(r) (r).phyc_cts_max_dis[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_MAX_DISr_CTX_MAX_DISf_GET(r) (((r).phyc_cts_max_dis[0]) & 0x7f)
#define BCM84834_PHYC_CTS_MAX_DISr_CTX_MAX_DISf_SET(r,f) (r).phyc_cts_max_dis[0]=(((r).phyc_cts_max_dis[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_CTS_MAX_DIS.
 *
 */
#define BCM84834_READ_PHYC_CTS_MAX_DISr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_MAX_DISr,(_r._phyc_cts_max_dis))
#define BCM84834_WRITE_PHYC_CTS_MAX_DISr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_MAX_DISr,(_r._phyc_cts_max_dis))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_MAX_DISr BCM84834_PHYC_CTS_MAX_DISr
#define PHYC_CTS_MAX_DISr_SIZE BCM84834_PHYC_CTS_MAX_DISr_SIZE
typedef BCM84834_PHYC_CTS_MAX_DISr_t PHYC_CTS_MAX_DISr_t;
#define PHYC_CTS_MAX_DISr_CLR BCM84834_PHYC_CTS_MAX_DISr_CLR
#define PHYC_CTS_MAX_DISr_SET BCM84834_PHYC_CTS_MAX_DISr_SET
#define PHYC_CTS_MAX_DISr_GET BCM84834_PHYC_CTS_MAX_DISr_GET
#define PHYC_CTS_MAX_DISr_CTX_MAX_DISf_GET BCM84834_PHYC_CTS_MAX_DISr_CTX_MAX_DISf_GET
#define PHYC_CTS_MAX_DISr_CTX_MAX_DISf_SET BCM84834_PHYC_CTS_MAX_DISr_CTX_MAX_DISf_SET
#define READ_PHYC_CTS_MAX_DISr BCM84834_READ_PHYC_CTS_MAX_DISr
#define WRITE_PHYC_CTS_MAX_DISr BCM84834_WRITE_PHYC_CTS_MAX_DISr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_MAX_DISr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_STATUS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa851
 * DEVAD:    1
 * DESC:     CTS Status
 * SIZE:     32
 * FIELDS:
 *     CTS_POLARITY     
 *     PRBS_LOCKED      
 *     CTS_FOUND_MATCH  
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_STATUSr (0x0001a851 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_STATUS.
 *
 */
typedef union BCM84834_PHYC_CTS_STATUSr_s {
	uint32_t v[1];
	uint32_t phyc_cts_status[1];
	uint32_t _phyc_cts_status;
} BCM84834_PHYC_CTS_STATUSr_t;

#define BCM84834_PHYC_CTS_STATUSr_CLR(r) (r).phyc_cts_status[0] = 0
#define BCM84834_PHYC_CTS_STATUSr_SET(r,d) (r).phyc_cts_status[0] = d
#define BCM84834_PHYC_CTS_STATUSr_GET(r) (r).phyc_cts_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_GET(r) ((((r).phyc_cts_status[0]) >> 8) & 0x1)
#define BCM84834_PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_SET(r,f) (r).phyc_cts_status[0]=(((r).phyc_cts_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_CTS_STATUSr_PRBS_LOCKEDf_GET(r) ((((r).phyc_cts_status[0]) >> 4) & 0xf)
#define BCM84834_PHYC_CTS_STATUSr_PRBS_LOCKEDf_SET(r,f) (r).phyc_cts_status[0]=(((r).phyc_cts_status[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_PHYC_CTS_STATUSr_CTS_POLARITYf_GET(r) (((r).phyc_cts_status[0]) & 0xf)
#define BCM84834_PHYC_CTS_STATUSr_CTS_POLARITYf_SET(r,f) (r).phyc_cts_status[0]=(((r).phyc_cts_status[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_CTS_STATUS.
 *
 */
#define BCM84834_READ_PHYC_CTS_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_STATUSr,(_r._phyc_cts_status))
#define BCM84834_WRITE_PHYC_CTS_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_STATUSr,(_r._phyc_cts_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_STATUSr BCM84834_PHYC_CTS_STATUSr
#define PHYC_CTS_STATUSr_SIZE BCM84834_PHYC_CTS_STATUSr_SIZE
typedef BCM84834_PHYC_CTS_STATUSr_t PHYC_CTS_STATUSr_t;
#define PHYC_CTS_STATUSr_CLR BCM84834_PHYC_CTS_STATUSr_CLR
#define PHYC_CTS_STATUSr_SET BCM84834_PHYC_CTS_STATUSr_SET
#define PHYC_CTS_STATUSr_GET BCM84834_PHYC_CTS_STATUSr_GET
#define PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_GET BCM84834_PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_GET
#define PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_SET BCM84834_PHYC_CTS_STATUSr_CTS_FOUND_MATCHf_SET
#define PHYC_CTS_STATUSr_PRBS_LOCKEDf_GET BCM84834_PHYC_CTS_STATUSr_PRBS_LOCKEDf_GET
#define PHYC_CTS_STATUSr_PRBS_LOCKEDf_SET BCM84834_PHYC_CTS_STATUSr_PRBS_LOCKEDf_SET
#define PHYC_CTS_STATUSr_CTS_POLARITYf_GET BCM84834_PHYC_CTS_STATUSr_CTS_POLARITYf_GET
#define PHYC_CTS_STATUSr_CTS_POLARITYf_SET BCM84834_PHYC_CTS_STATUSr_CTS_POLARITYf_SET
#define READ_PHYC_CTS_STATUSr BCM84834_READ_PHYC_CTS_STATUSr
#define WRITE_PHYC_CTS_STATUSr BCM84834_WRITE_PHYC_CTS_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_DISTANCE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa852
 * DEVAD:    1
 * DESC:     CTS Distance
 * SIZE:     32
 * FIELDS:
 *     CTS_DISTANC      
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_DISTANCEr (0x0001a852 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_DISTANCEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_DISTANCE.
 *
 */
typedef union BCM84834_PHYC_CTS_DISTANCEr_s {
	uint32_t v[1];
	uint32_t phyc_cts_distance[1];
	uint32_t _phyc_cts_distance;
} BCM84834_PHYC_CTS_DISTANCEr_t;

#define BCM84834_PHYC_CTS_DISTANCEr_CLR(r) (r).phyc_cts_distance[0] = 0
#define BCM84834_PHYC_CTS_DISTANCEr_SET(r,d) (r).phyc_cts_distance[0] = d
#define BCM84834_PHYC_CTS_DISTANCEr_GET(r) (r).phyc_cts_distance[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_DISTANCEr_CTS_DISTANCf_GET(r) (((r).phyc_cts_distance[0]) & 0x7f)
#define BCM84834_PHYC_CTS_DISTANCEr_CTS_DISTANCf_SET(r,f) (r).phyc_cts_distance[0]=(((r).phyc_cts_distance[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_CTS_DISTANCE.
 *
 */
#define BCM84834_READ_PHYC_CTS_DISTANCEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_DISTANCEr,(_r._phyc_cts_distance))
#define BCM84834_WRITE_PHYC_CTS_DISTANCEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_DISTANCEr,(_r._phyc_cts_distance))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_DISTANCEr BCM84834_PHYC_CTS_DISTANCEr
#define PHYC_CTS_DISTANCEr_SIZE BCM84834_PHYC_CTS_DISTANCEr_SIZE
typedef BCM84834_PHYC_CTS_DISTANCEr_t PHYC_CTS_DISTANCEr_t;
#define PHYC_CTS_DISTANCEr_CLR BCM84834_PHYC_CTS_DISTANCEr_CLR
#define PHYC_CTS_DISTANCEr_SET BCM84834_PHYC_CTS_DISTANCEr_SET
#define PHYC_CTS_DISTANCEr_GET BCM84834_PHYC_CTS_DISTANCEr_GET
#define PHYC_CTS_DISTANCEr_CTS_DISTANCf_GET BCM84834_PHYC_CTS_DISTANCEr_CTS_DISTANCf_GET
#define PHYC_CTS_DISTANCEr_CTS_DISTANCf_SET BCM84834_PHYC_CTS_DISTANCEr_CTS_DISTANCf_SET
#define READ_PHYC_CTS_DISTANCEr BCM84834_READ_PHYC_CTS_DISTANCEr
#define WRITE_PHYC_CTS_DISTANCEr BCM84834_WRITE_PHYC_CTS_DISTANCEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_DISTANCEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED1_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa853
 * DEVAD:    1
 * DESC:     CTS PRBS Seed1 2
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED1_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED1_2r (0x0001a853 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED1_2.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED1_2r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed1_2[1];
	uint32_t _phyc_cts_prbs_seed1_2;
} BCM84834_PHYC_CTS_PRBS_SEED1_2r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_CLR(r) (r).phyc_cts_prbs_seed1_2[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_SET(r,d) (r).phyc_cts_prbs_seed1_2[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_GET(r) (r).phyc_cts_prbs_seed1_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_GET(r) (((r).phyc_cts_prbs_seed1_2[0]) & 0x1)
#define BCM84834_PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_SET(r,f) (r).phyc_cts_prbs_seed1_2[0]=(((r).phyc_cts_prbs_seed1_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED1_2.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED1_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_2r,(_r._phyc_cts_prbs_seed1_2))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_2r,(_r._phyc_cts_prbs_seed1_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED1_2r BCM84834_PHYC_CTS_PRBS_SEED1_2r
#define PHYC_CTS_PRBS_SEED1_2r_SIZE BCM84834_PHYC_CTS_PRBS_SEED1_2r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED1_2r_t PHYC_CTS_PRBS_SEED1_2r_t;
#define PHYC_CTS_PRBS_SEED1_2r_CLR BCM84834_PHYC_CTS_PRBS_SEED1_2r_CLR
#define PHYC_CTS_PRBS_SEED1_2r_SET BCM84834_PHYC_CTS_PRBS_SEED1_2r_SET
#define PHYC_CTS_PRBS_SEED1_2r_GET BCM84834_PHYC_CTS_PRBS_SEED1_2r_GET
#define PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_GET BCM84834_PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_GET
#define PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_SET BCM84834_PHYC_CTS_PRBS_SEED1_2r_CTS_PRBS_SEED1_32f_SET
#define READ_PHYC_CTS_PRBS_SEED1_2r BCM84834_READ_PHYC_CTS_PRBS_SEED1_2r
#define WRITE_PHYC_CTS_PRBS_SEED1_2r BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED1_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED1_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa854
 * DEVAD:    1
 * DESC:     CTS PRBS Seed1 1
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED1_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED1_1r (0x0001a854 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED1_1.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED1_1r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed1_1[1];
	uint32_t _phyc_cts_prbs_seed1_1;
} BCM84834_PHYC_CTS_PRBS_SEED1_1r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_CLR(r) (r).phyc_cts_prbs_seed1_1[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_SET(r,d) (r).phyc_cts_prbs_seed1_1[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_GET(r) (r).phyc_cts_prbs_seed1_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_GET(r) (((r).phyc_cts_prbs_seed1_1[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_SET(r,f) (r).phyc_cts_prbs_seed1_1[0]=(((r).phyc_cts_prbs_seed1_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED1_1.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED1_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_1r,(_r._phyc_cts_prbs_seed1_1))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_1r,(_r._phyc_cts_prbs_seed1_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED1_1r BCM84834_PHYC_CTS_PRBS_SEED1_1r
#define PHYC_CTS_PRBS_SEED1_1r_SIZE BCM84834_PHYC_CTS_PRBS_SEED1_1r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED1_1r_t PHYC_CTS_PRBS_SEED1_1r_t;
#define PHYC_CTS_PRBS_SEED1_1r_CLR BCM84834_PHYC_CTS_PRBS_SEED1_1r_CLR
#define PHYC_CTS_PRBS_SEED1_1r_SET BCM84834_PHYC_CTS_PRBS_SEED1_1r_SET
#define PHYC_CTS_PRBS_SEED1_1r_GET BCM84834_PHYC_CTS_PRBS_SEED1_1r_GET
#define PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_GET BCM84834_PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_GET
#define PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_SET BCM84834_PHYC_CTS_PRBS_SEED1_1r_CTS_PRBS_SEED1_3116f_SET
#define READ_PHYC_CTS_PRBS_SEED1_1r BCM84834_READ_PHYC_CTS_PRBS_SEED1_1r
#define WRITE_PHYC_CTS_PRBS_SEED1_1r BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED1_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED1_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa855
 * DEVAD:    1
 * DESC:     CTS PRBS Seed1 0
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED1_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED1_0r (0x0001a855 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED1_0.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED1_0r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed1_0[1];
	uint32_t _phyc_cts_prbs_seed1_0;
} BCM84834_PHYC_CTS_PRBS_SEED1_0r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_CLR(r) (r).phyc_cts_prbs_seed1_0[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_SET(r,d) (r).phyc_cts_prbs_seed1_0[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_GET(r) (r).phyc_cts_prbs_seed1_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_GET(r) (((r).phyc_cts_prbs_seed1_0[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_SET(r,f) (r).phyc_cts_prbs_seed1_0[0]=(((r).phyc_cts_prbs_seed1_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED1_0.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED1_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_0r,(_r._phyc_cts_prbs_seed1_0))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED1_0r,(_r._phyc_cts_prbs_seed1_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED1_0r BCM84834_PHYC_CTS_PRBS_SEED1_0r
#define PHYC_CTS_PRBS_SEED1_0r_SIZE BCM84834_PHYC_CTS_PRBS_SEED1_0r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED1_0r_t PHYC_CTS_PRBS_SEED1_0r_t;
#define PHYC_CTS_PRBS_SEED1_0r_CLR BCM84834_PHYC_CTS_PRBS_SEED1_0r_CLR
#define PHYC_CTS_PRBS_SEED1_0r_SET BCM84834_PHYC_CTS_PRBS_SEED1_0r_SET
#define PHYC_CTS_PRBS_SEED1_0r_GET BCM84834_PHYC_CTS_PRBS_SEED1_0r_GET
#define PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_GET BCM84834_PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_GET
#define PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_SET BCM84834_PHYC_CTS_PRBS_SEED1_0r_CTS_PRBS_SEED1_1500f_SET
#define READ_PHYC_CTS_PRBS_SEED1_0r BCM84834_READ_PHYC_CTS_PRBS_SEED1_0r
#define WRITE_PHYC_CTS_PRBS_SEED1_0r BCM84834_WRITE_PHYC_CTS_PRBS_SEED1_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED1_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED2_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa856
 * DEVAD:    1
 * DESC:     CTS PRBS Seed2 2
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED2_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED2_2r (0x0001a856 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED2_2.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED2_2r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed2_2[1];
	uint32_t _phyc_cts_prbs_seed2_2;
} BCM84834_PHYC_CTS_PRBS_SEED2_2r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_CLR(r) (r).phyc_cts_prbs_seed2_2[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_SET(r,d) (r).phyc_cts_prbs_seed2_2[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_GET(r) (r).phyc_cts_prbs_seed2_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_GET(r) (((r).phyc_cts_prbs_seed2_2[0]) & 0x1)
#define BCM84834_PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_SET(r,f) (r).phyc_cts_prbs_seed2_2[0]=(((r).phyc_cts_prbs_seed2_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED2_2.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED2_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_2r,(_r._phyc_cts_prbs_seed2_2))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_2r,(_r._phyc_cts_prbs_seed2_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED2_2r BCM84834_PHYC_CTS_PRBS_SEED2_2r
#define PHYC_CTS_PRBS_SEED2_2r_SIZE BCM84834_PHYC_CTS_PRBS_SEED2_2r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED2_2r_t PHYC_CTS_PRBS_SEED2_2r_t;
#define PHYC_CTS_PRBS_SEED2_2r_CLR BCM84834_PHYC_CTS_PRBS_SEED2_2r_CLR
#define PHYC_CTS_PRBS_SEED2_2r_SET BCM84834_PHYC_CTS_PRBS_SEED2_2r_SET
#define PHYC_CTS_PRBS_SEED2_2r_GET BCM84834_PHYC_CTS_PRBS_SEED2_2r_GET
#define PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_GET BCM84834_PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_GET
#define PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_SET BCM84834_PHYC_CTS_PRBS_SEED2_2r_CTS_PRBS_SEED2_32f_SET
#define READ_PHYC_CTS_PRBS_SEED2_2r BCM84834_READ_PHYC_CTS_PRBS_SEED2_2r
#define WRITE_PHYC_CTS_PRBS_SEED2_2r BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED2_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED2_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa857
 * DEVAD:    1
 * DESC:     CTS PRBS Seed2 1
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED2_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED2_1r (0x0001a857 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED2_1.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED2_1r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed2_1[1];
	uint32_t _phyc_cts_prbs_seed2_1;
} BCM84834_PHYC_CTS_PRBS_SEED2_1r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_CLR(r) (r).phyc_cts_prbs_seed2_1[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_SET(r,d) (r).phyc_cts_prbs_seed2_1[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_GET(r) (r).phyc_cts_prbs_seed2_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_GET(r) (((r).phyc_cts_prbs_seed2_1[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_SET(r,f) (r).phyc_cts_prbs_seed2_1[0]=(((r).phyc_cts_prbs_seed2_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED2_1.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED2_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_1r,(_r._phyc_cts_prbs_seed2_1))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_1r,(_r._phyc_cts_prbs_seed2_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED2_1r BCM84834_PHYC_CTS_PRBS_SEED2_1r
#define PHYC_CTS_PRBS_SEED2_1r_SIZE BCM84834_PHYC_CTS_PRBS_SEED2_1r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED2_1r_t PHYC_CTS_PRBS_SEED2_1r_t;
#define PHYC_CTS_PRBS_SEED2_1r_CLR BCM84834_PHYC_CTS_PRBS_SEED2_1r_CLR
#define PHYC_CTS_PRBS_SEED2_1r_SET BCM84834_PHYC_CTS_PRBS_SEED2_1r_SET
#define PHYC_CTS_PRBS_SEED2_1r_GET BCM84834_PHYC_CTS_PRBS_SEED2_1r_GET
#define PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_GET BCM84834_PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_GET
#define PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_SET BCM84834_PHYC_CTS_PRBS_SEED2_1r_CTS_PRBS_SEED2_3116f_SET
#define READ_PHYC_CTS_PRBS_SEED2_1r BCM84834_READ_PHYC_CTS_PRBS_SEED2_1r
#define WRITE_PHYC_CTS_PRBS_SEED2_1r BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED2_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED2_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa858
 * DEVAD:    1
 * DESC:     CTS PRBS Seed2 0
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED2_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED2_0r (0x0001a858 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED2_0.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED2_0r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed2_0[1];
	uint32_t _phyc_cts_prbs_seed2_0;
} BCM84834_PHYC_CTS_PRBS_SEED2_0r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_CLR(r) (r).phyc_cts_prbs_seed2_0[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_SET(r,d) (r).phyc_cts_prbs_seed2_0[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_GET(r) (r).phyc_cts_prbs_seed2_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_GET(r) (((r).phyc_cts_prbs_seed2_0[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_SET(r,f) (r).phyc_cts_prbs_seed2_0[0]=(((r).phyc_cts_prbs_seed2_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED2_0.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED2_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_0r,(_r._phyc_cts_prbs_seed2_0))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED2_0r,(_r._phyc_cts_prbs_seed2_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED2_0r BCM84834_PHYC_CTS_PRBS_SEED2_0r
#define PHYC_CTS_PRBS_SEED2_0r_SIZE BCM84834_PHYC_CTS_PRBS_SEED2_0r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED2_0r_t PHYC_CTS_PRBS_SEED2_0r_t;
#define PHYC_CTS_PRBS_SEED2_0r_CLR BCM84834_PHYC_CTS_PRBS_SEED2_0r_CLR
#define PHYC_CTS_PRBS_SEED2_0r_SET BCM84834_PHYC_CTS_PRBS_SEED2_0r_SET
#define PHYC_CTS_PRBS_SEED2_0r_GET BCM84834_PHYC_CTS_PRBS_SEED2_0r_GET
#define PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_GET BCM84834_PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_GET
#define PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_SET BCM84834_PHYC_CTS_PRBS_SEED2_0r_CTS_PRBS_SEED2_1500f_SET
#define READ_PHYC_CTS_PRBS_SEED2_0r BCM84834_READ_PHYC_CTS_PRBS_SEED2_0r
#define WRITE_PHYC_CTS_PRBS_SEED2_0r BCM84834_WRITE_PHYC_CTS_PRBS_SEED2_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED2_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED3_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa859
 * DEVAD:    1
 * DESC:     CTS PRBS Seed3 2
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED3_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED3_2r (0x0001a859 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED3_2.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED3_2r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed3_2[1];
	uint32_t _phyc_cts_prbs_seed3_2;
} BCM84834_PHYC_CTS_PRBS_SEED3_2r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_CLR(r) (r).phyc_cts_prbs_seed3_2[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_SET(r,d) (r).phyc_cts_prbs_seed3_2[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_GET(r) (r).phyc_cts_prbs_seed3_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_GET(r) (((r).phyc_cts_prbs_seed3_2[0]) & 0x1)
#define BCM84834_PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_SET(r,f) (r).phyc_cts_prbs_seed3_2[0]=(((r).phyc_cts_prbs_seed3_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED3_2.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED3_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_2r,(_r._phyc_cts_prbs_seed3_2))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_2r,(_r._phyc_cts_prbs_seed3_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED3_2r BCM84834_PHYC_CTS_PRBS_SEED3_2r
#define PHYC_CTS_PRBS_SEED3_2r_SIZE BCM84834_PHYC_CTS_PRBS_SEED3_2r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED3_2r_t PHYC_CTS_PRBS_SEED3_2r_t;
#define PHYC_CTS_PRBS_SEED3_2r_CLR BCM84834_PHYC_CTS_PRBS_SEED3_2r_CLR
#define PHYC_CTS_PRBS_SEED3_2r_SET BCM84834_PHYC_CTS_PRBS_SEED3_2r_SET
#define PHYC_CTS_PRBS_SEED3_2r_GET BCM84834_PHYC_CTS_PRBS_SEED3_2r_GET
#define PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_GET BCM84834_PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_GET
#define PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_SET BCM84834_PHYC_CTS_PRBS_SEED3_2r_CTS_PRBS_SEED3_32f_SET
#define READ_PHYC_CTS_PRBS_SEED3_2r BCM84834_READ_PHYC_CTS_PRBS_SEED3_2r
#define WRITE_PHYC_CTS_PRBS_SEED3_2r BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED3_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED3_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85a
 * DEVAD:    1
 * DESC:     CTS PRBS Seed3 1
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED3_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED3_1r (0x0001a85a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED3_1.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED3_1r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed3_1[1];
	uint32_t _phyc_cts_prbs_seed3_1;
} BCM84834_PHYC_CTS_PRBS_SEED3_1r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_CLR(r) (r).phyc_cts_prbs_seed3_1[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_SET(r,d) (r).phyc_cts_prbs_seed3_1[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_GET(r) (r).phyc_cts_prbs_seed3_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_GET(r) (((r).phyc_cts_prbs_seed3_1[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_SET(r,f) (r).phyc_cts_prbs_seed3_1[0]=(((r).phyc_cts_prbs_seed3_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED3_1.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED3_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_1r,(_r._phyc_cts_prbs_seed3_1))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_1r,(_r._phyc_cts_prbs_seed3_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED3_1r BCM84834_PHYC_CTS_PRBS_SEED3_1r
#define PHYC_CTS_PRBS_SEED3_1r_SIZE BCM84834_PHYC_CTS_PRBS_SEED3_1r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED3_1r_t PHYC_CTS_PRBS_SEED3_1r_t;
#define PHYC_CTS_PRBS_SEED3_1r_CLR BCM84834_PHYC_CTS_PRBS_SEED3_1r_CLR
#define PHYC_CTS_PRBS_SEED3_1r_SET BCM84834_PHYC_CTS_PRBS_SEED3_1r_SET
#define PHYC_CTS_PRBS_SEED3_1r_GET BCM84834_PHYC_CTS_PRBS_SEED3_1r_GET
#define PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_GET BCM84834_PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_GET
#define PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_SET BCM84834_PHYC_CTS_PRBS_SEED3_1r_CTS_PRBS_SEED3_3116f_SET
#define READ_PHYC_CTS_PRBS_SEED3_1r BCM84834_READ_PHYC_CTS_PRBS_SEED3_1r
#define WRITE_PHYC_CTS_PRBS_SEED3_1r BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED3_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED3_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85b
 * DEVAD:    1
 * DESC:     CTS PRBS Seed3 0
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED3_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED3_0r (0x0001a85b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED3_0.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED3_0r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed3_0[1];
	uint32_t _phyc_cts_prbs_seed3_0;
} BCM84834_PHYC_CTS_PRBS_SEED3_0r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_CLR(r) (r).phyc_cts_prbs_seed3_0[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_SET(r,d) (r).phyc_cts_prbs_seed3_0[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_GET(r) (r).phyc_cts_prbs_seed3_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_GET(r) (((r).phyc_cts_prbs_seed3_0[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_SET(r,f) (r).phyc_cts_prbs_seed3_0[0]=(((r).phyc_cts_prbs_seed3_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED3_0.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED3_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_0r,(_r._phyc_cts_prbs_seed3_0))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED3_0r,(_r._phyc_cts_prbs_seed3_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED3_0r BCM84834_PHYC_CTS_PRBS_SEED3_0r
#define PHYC_CTS_PRBS_SEED3_0r_SIZE BCM84834_PHYC_CTS_PRBS_SEED3_0r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED3_0r_t PHYC_CTS_PRBS_SEED3_0r_t;
#define PHYC_CTS_PRBS_SEED3_0r_CLR BCM84834_PHYC_CTS_PRBS_SEED3_0r_CLR
#define PHYC_CTS_PRBS_SEED3_0r_SET BCM84834_PHYC_CTS_PRBS_SEED3_0r_SET
#define PHYC_CTS_PRBS_SEED3_0r_GET BCM84834_PHYC_CTS_PRBS_SEED3_0r_GET
#define PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_GET BCM84834_PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_GET
#define PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_SET BCM84834_PHYC_CTS_PRBS_SEED3_0r_CTS_PRBS_SEED3_1500f_SET
#define READ_PHYC_CTS_PRBS_SEED3_0r BCM84834_READ_PHYC_CTS_PRBS_SEED3_0r
#define WRITE_PHYC_CTS_PRBS_SEED3_0r BCM84834_WRITE_PHYC_CTS_PRBS_SEED3_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED3_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED4_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85c
 * DEVAD:    1
 * DESC:     CTS PRBS Seed4 2
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED4_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED4_2r (0x0001a85c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED4_2.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED4_2r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed4_2[1];
	uint32_t _phyc_cts_prbs_seed4_2;
} BCM84834_PHYC_CTS_PRBS_SEED4_2r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_CLR(r) (r).phyc_cts_prbs_seed4_2[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_SET(r,d) (r).phyc_cts_prbs_seed4_2[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_GET(r) (r).phyc_cts_prbs_seed4_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_GET(r) (((r).phyc_cts_prbs_seed4_2[0]) & 0x1)
#define BCM84834_PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_SET(r,f) (r).phyc_cts_prbs_seed4_2[0]=(((r).phyc_cts_prbs_seed4_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED4_2.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED4_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_2r,(_r._phyc_cts_prbs_seed4_2))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_2r,(_r._phyc_cts_prbs_seed4_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED4_2r BCM84834_PHYC_CTS_PRBS_SEED4_2r
#define PHYC_CTS_PRBS_SEED4_2r_SIZE BCM84834_PHYC_CTS_PRBS_SEED4_2r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED4_2r_t PHYC_CTS_PRBS_SEED4_2r_t;
#define PHYC_CTS_PRBS_SEED4_2r_CLR BCM84834_PHYC_CTS_PRBS_SEED4_2r_CLR
#define PHYC_CTS_PRBS_SEED4_2r_SET BCM84834_PHYC_CTS_PRBS_SEED4_2r_SET
#define PHYC_CTS_PRBS_SEED4_2r_GET BCM84834_PHYC_CTS_PRBS_SEED4_2r_GET
#define PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_GET BCM84834_PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_GET
#define PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_SET BCM84834_PHYC_CTS_PRBS_SEED4_2r_CTS_PRBS_SEED4_32f_SET
#define READ_PHYC_CTS_PRBS_SEED4_2r BCM84834_READ_PHYC_CTS_PRBS_SEED4_2r
#define WRITE_PHYC_CTS_PRBS_SEED4_2r BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED4_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED4_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85d
 * DEVAD:    1
 * DESC:     CTS PRBS Seed4 1
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED4_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED4_1r (0x0001a85d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED4_1.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED4_1r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed4_1[1];
	uint32_t _phyc_cts_prbs_seed4_1;
} BCM84834_PHYC_CTS_PRBS_SEED4_1r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_CLR(r) (r).phyc_cts_prbs_seed4_1[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_SET(r,d) (r).phyc_cts_prbs_seed4_1[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_GET(r) (r).phyc_cts_prbs_seed4_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_GET(r) (((r).phyc_cts_prbs_seed4_1[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_SET(r,f) (r).phyc_cts_prbs_seed4_1[0]=(((r).phyc_cts_prbs_seed4_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED4_1.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED4_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_1r,(_r._phyc_cts_prbs_seed4_1))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_1r,(_r._phyc_cts_prbs_seed4_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED4_1r BCM84834_PHYC_CTS_PRBS_SEED4_1r
#define PHYC_CTS_PRBS_SEED4_1r_SIZE BCM84834_PHYC_CTS_PRBS_SEED4_1r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED4_1r_t PHYC_CTS_PRBS_SEED4_1r_t;
#define PHYC_CTS_PRBS_SEED4_1r_CLR BCM84834_PHYC_CTS_PRBS_SEED4_1r_CLR
#define PHYC_CTS_PRBS_SEED4_1r_SET BCM84834_PHYC_CTS_PRBS_SEED4_1r_SET
#define PHYC_CTS_PRBS_SEED4_1r_GET BCM84834_PHYC_CTS_PRBS_SEED4_1r_GET
#define PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_GET BCM84834_PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_GET
#define PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_SET BCM84834_PHYC_CTS_PRBS_SEED4_1r_CTS_PRBS_SEED4_3116f_SET
#define READ_PHYC_CTS_PRBS_SEED4_1r BCM84834_READ_PHYC_CTS_PRBS_SEED4_1r
#define WRITE_PHYC_CTS_PRBS_SEED4_1r BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED4_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_PRBS_SEED4_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85e
 * DEVAD:    1
 * DESC:     CTS PRBS Seed4 0
 * SIZE:     32
 * FIELDS:
 *     CTS_PRBS_SEED4_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_PRBS_SEED4_0r (0x0001a85e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_PRBS_SEED4_0.
 *
 */
typedef union BCM84834_PHYC_CTS_PRBS_SEED4_0r_s {
	uint32_t v[1];
	uint32_t phyc_cts_prbs_seed4_0[1];
	uint32_t _phyc_cts_prbs_seed4_0;
} BCM84834_PHYC_CTS_PRBS_SEED4_0r_t;

#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_CLR(r) (r).phyc_cts_prbs_seed4_0[0] = 0
#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_SET(r,d) (r).phyc_cts_prbs_seed4_0[0] = d
#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_GET(r) (r).phyc_cts_prbs_seed4_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_GET(r) (((r).phyc_cts_prbs_seed4_0[0]) & 0xffff)
#define BCM84834_PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_SET(r,f) (r).phyc_cts_prbs_seed4_0[0]=(((r).phyc_cts_prbs_seed4_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_CTS_PRBS_SEED4_0.
 *
 */
#define BCM84834_READ_PHYC_CTS_PRBS_SEED4_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_0r,(_r._phyc_cts_prbs_seed4_0))
#define BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_PRBS_SEED4_0r,(_r._phyc_cts_prbs_seed4_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_PRBS_SEED4_0r BCM84834_PHYC_CTS_PRBS_SEED4_0r
#define PHYC_CTS_PRBS_SEED4_0r_SIZE BCM84834_PHYC_CTS_PRBS_SEED4_0r_SIZE
typedef BCM84834_PHYC_CTS_PRBS_SEED4_0r_t PHYC_CTS_PRBS_SEED4_0r_t;
#define PHYC_CTS_PRBS_SEED4_0r_CLR BCM84834_PHYC_CTS_PRBS_SEED4_0r_CLR
#define PHYC_CTS_PRBS_SEED4_0r_SET BCM84834_PHYC_CTS_PRBS_SEED4_0r_SET
#define PHYC_CTS_PRBS_SEED4_0r_GET BCM84834_PHYC_CTS_PRBS_SEED4_0r_GET
#define PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_GET BCM84834_PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_GET
#define PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_SET BCM84834_PHYC_CTS_PRBS_SEED4_0r_CTS_PRBS_SEED4_1500f_SET
#define READ_PHYC_CTS_PRBS_SEED4_0r BCM84834_READ_PHYC_CTS_PRBS_SEED4_0r
#define WRITE_PHYC_CTS_PRBS_SEED4_0r BCM84834_WRITE_PHYC_CTS_PRBS_SEED4_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_PRBS_SEED4_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFE_ERR_CAP_SEED_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa85f
 * DEVAD:    1
 * DESC:     FFE Error Capture Seed 2
 * SIZE:     32
 * FIELDS:
 *     FFE_ERR_CAP_SEED_32 
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r (0x0001a85f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFE_ERR_CAP_SEED_2.
 *
 */
typedef union BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_s {
	uint32_t v[1];
	uint32_t phyc_ffe_err_cap_seed_2[1];
	uint32_t _phyc_ffe_err_cap_seed_2;
} BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_t;

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_CLR(r) (r).phyc_ffe_err_cap_seed_2[0] = 0
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_SET(r,d) (r).phyc_ffe_err_cap_seed_2[0] = d
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_GET(r) (r).phyc_ffe_err_cap_seed_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_GET(r) (((r).phyc_ffe_err_cap_seed_2[0]) & 0x1)
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_SET(r,f) (r).phyc_ffe_err_cap_seed_2[0]=(((r).phyc_ffe_err_cap_seed_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_FFE_ERR_CAP_SEED_2.
 *
 */
#define BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_2r,(_r._phyc_ffe_err_cap_seed_2))
#define BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_2r,(_r._phyc_ffe_err_cap_seed_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFE_ERR_CAP_SEED_2r BCM84834_PHYC_FFE_ERR_CAP_SEED_2r
#define PHYC_FFE_ERR_CAP_SEED_2r_SIZE BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_SIZE
typedef BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_t PHYC_FFE_ERR_CAP_SEED_2r_t;
#define PHYC_FFE_ERR_CAP_SEED_2r_CLR BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_CLR
#define PHYC_FFE_ERR_CAP_SEED_2r_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_SET
#define PHYC_FFE_ERR_CAP_SEED_2r_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_GET
#define PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_GET
#define PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_2r_FFE_ERR_CAP_SEED_32f_SET
#define READ_PHYC_FFE_ERR_CAP_SEED_2r BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_2r
#define WRITE_PHYC_FFE_ERR_CAP_SEED_2r BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFE_ERR_CAP_SEED_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFE_ERR_CAP_SEED_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa860
 * DEVAD:    1
 * DESC:     FFE Error Capture Seed 1
 * SIZE:     32
 * FIELDS:
 *     FFE_ERR_CAP_SEED_3116 
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r (0x0001a860 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFE_ERR_CAP_SEED_1.
 *
 */
typedef union BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_s {
	uint32_t v[1];
	uint32_t phyc_ffe_err_cap_seed_1[1];
	uint32_t _phyc_ffe_err_cap_seed_1;
} BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_t;

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_CLR(r) (r).phyc_ffe_err_cap_seed_1[0] = 0
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_SET(r,d) (r).phyc_ffe_err_cap_seed_1[0] = d
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_GET(r) (r).phyc_ffe_err_cap_seed_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_GET(r) (((r).phyc_ffe_err_cap_seed_1[0]) & 0xffff)
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_SET(r,f) (r).phyc_ffe_err_cap_seed_1[0]=(((r).phyc_ffe_err_cap_seed_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_FFE_ERR_CAP_SEED_1.
 *
 */
#define BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_1r,(_r._phyc_ffe_err_cap_seed_1))
#define BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_1r,(_r._phyc_ffe_err_cap_seed_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFE_ERR_CAP_SEED_1r BCM84834_PHYC_FFE_ERR_CAP_SEED_1r
#define PHYC_FFE_ERR_CAP_SEED_1r_SIZE BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_SIZE
typedef BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_t PHYC_FFE_ERR_CAP_SEED_1r_t;
#define PHYC_FFE_ERR_CAP_SEED_1r_CLR BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_CLR
#define PHYC_FFE_ERR_CAP_SEED_1r_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_SET
#define PHYC_FFE_ERR_CAP_SEED_1r_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_GET
#define PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_GET
#define PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_1r_FFE_ERR_CAP_SEED_3116f_SET
#define READ_PHYC_FFE_ERR_CAP_SEED_1r BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_1r
#define WRITE_PHYC_FFE_ERR_CAP_SEED_1r BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFE_ERR_CAP_SEED_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFE_ERR_CAP_SEED_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa861
 * DEVAD:    1
 * DESC:     FFE Error Capture Seed 0
 * SIZE:     32
 * FIELDS:
 *     FFE_ERR_CAP_SEED_1500 
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r (0x0001a861 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFE_ERR_CAP_SEED_0.
 *
 */
typedef union BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_s {
	uint32_t v[1];
	uint32_t phyc_ffe_err_cap_seed_0[1];
	uint32_t _phyc_ffe_err_cap_seed_0;
} BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_t;

#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_CLR(r) (r).phyc_ffe_err_cap_seed_0[0] = 0
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_SET(r,d) (r).phyc_ffe_err_cap_seed_0[0] = d
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_GET(r) (r).phyc_ffe_err_cap_seed_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_GET(r) (((r).phyc_ffe_err_cap_seed_0[0]) & 0xffff)
#define BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_SET(r,f) (r).phyc_ffe_err_cap_seed_0[0]=(((r).phyc_ffe_err_cap_seed_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_FFE_ERR_CAP_SEED_0.
 *
 */
#define BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_0r,(_r._phyc_ffe_err_cap_seed_0))
#define BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFE_ERR_CAP_SEED_0r,(_r._phyc_ffe_err_cap_seed_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFE_ERR_CAP_SEED_0r BCM84834_PHYC_FFE_ERR_CAP_SEED_0r
#define PHYC_FFE_ERR_CAP_SEED_0r_SIZE BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_SIZE
typedef BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_t PHYC_FFE_ERR_CAP_SEED_0r_t;
#define PHYC_FFE_ERR_CAP_SEED_0r_CLR BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_CLR
#define PHYC_FFE_ERR_CAP_SEED_0r_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_SET
#define PHYC_FFE_ERR_CAP_SEED_0r_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_GET
#define PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_GET BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_GET
#define PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_SET BCM84834_PHYC_FFE_ERR_CAP_SEED_0r_FFE_ERR_CAP_SEED_1500f_SET
#define READ_PHYC_FFE_ERR_CAP_SEED_0r BCM84834_READ_PHYC_FFE_ERR_CAP_SEED_0r
#define WRITE_PHYC_FFE_ERR_CAP_SEED_0r BCM84834_WRITE_PHYC_FFE_ERR_CAP_SEED_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFE_ERR_CAP_SEED_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CTS_INFO_STATUS
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa862
 * DEVAD:    1
 * DESC:     CTS Infofield Status
 * SIZE:     32
 * FIELDS:
 *     CTS_INFO_FIELD_LOC 
 *     CTS_INFO_FIELD_FOUND 
 *
 ******************************************************************************/
#define BCM84834_PHYC_CTS_INFO_STATUSr (0x0001a862 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CTS_INFO_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CTS_INFO_STATUS.
 *
 */
typedef union BCM84834_PHYC_CTS_INFO_STATUSr_s {
	uint32_t v[1];
	uint32_t phyc_cts_info_status[1];
	uint32_t _phyc_cts_info_status;
} BCM84834_PHYC_CTS_INFO_STATUSr_t;

#define BCM84834_PHYC_CTS_INFO_STATUSr_CLR(r) (r).phyc_cts_info_status[0] = 0
#define BCM84834_PHYC_CTS_INFO_STATUSr_SET(r,d) (r).phyc_cts_info_status[0] = d
#define BCM84834_PHYC_CTS_INFO_STATUSr_GET(r) (r).phyc_cts_info_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_GET(r) ((((r).phyc_cts_info_status[0]) >> 15) & 0x1)
#define BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_SET(r,f) (r).phyc_cts_info_status[0]=(((r).phyc_cts_info_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_GET(r) (((r).phyc_cts_info_status[0]) & 0x3fff)
#define BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_SET(r,f) (r).phyc_cts_info_status[0]=(((r).phyc_cts_info_status[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access PHYC_CTS_INFO_STATUS.
 *
 */
#define BCM84834_READ_PHYC_CTS_INFO_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CTS_INFO_STATUSr,(_r._phyc_cts_info_status))
#define BCM84834_WRITE_PHYC_CTS_INFO_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CTS_INFO_STATUSr,(_r._phyc_cts_info_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CTS_INFO_STATUSr BCM84834_PHYC_CTS_INFO_STATUSr
#define PHYC_CTS_INFO_STATUSr_SIZE BCM84834_PHYC_CTS_INFO_STATUSr_SIZE
typedef BCM84834_PHYC_CTS_INFO_STATUSr_t PHYC_CTS_INFO_STATUSr_t;
#define PHYC_CTS_INFO_STATUSr_CLR BCM84834_PHYC_CTS_INFO_STATUSr_CLR
#define PHYC_CTS_INFO_STATUSr_SET BCM84834_PHYC_CTS_INFO_STATUSr_SET
#define PHYC_CTS_INFO_STATUSr_GET BCM84834_PHYC_CTS_INFO_STATUSr_GET
#define PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_GET BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_GET
#define PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_SET BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_FOUNDf_SET
#define PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_GET BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_GET
#define PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_SET BCM84834_PHYC_CTS_INFO_STATUSr_CTS_INFO_FIELD_LOCf_SET
#define READ_PHYC_CTS_INFO_STATUSr BCM84834_READ_PHYC_CTS_INFO_STATUSr
#define WRITE_PHYC_CTS_INFO_STATUSr BCM84834_WRITE_PHYC_CTS_INFO_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CTS_INFO_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_ARM_TIMEOUT_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa869
 * DEVAD:    1
 * DESC:     ARM Timeout Count
 * SIZE:     32
 * FIELDS:
 *     ARM_TIMEOUT_TIME 
 *
 ******************************************************************************/
#define BCM84834_PHYC_ARM_TIMEOUT_CNTr (0x0001a869 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_ARM_TIMEOUT_CNT.
 *
 */
typedef union BCM84834_PHYC_ARM_TIMEOUT_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_arm_timeout_cnt[1];
	uint32_t _phyc_arm_timeout_cnt;
} BCM84834_PHYC_ARM_TIMEOUT_CNTr_t;

#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_CLR(r) (r).phyc_arm_timeout_cnt[0] = 0
#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_SET(r,d) (r).phyc_arm_timeout_cnt[0] = d
#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_GET(r) (r).phyc_arm_timeout_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_GET(r) (((r).phyc_arm_timeout_cnt[0]) & 0xffff)
#define BCM84834_PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_SET(r,f) (r).phyc_arm_timeout_cnt[0]=(((r).phyc_arm_timeout_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_ARM_TIMEOUT_CNT.
 *
 */
#define BCM84834_READ_PHYC_ARM_TIMEOUT_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_ARM_TIMEOUT_CNTr,(_r._phyc_arm_timeout_cnt))
#define BCM84834_WRITE_PHYC_ARM_TIMEOUT_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_ARM_TIMEOUT_CNTr,(_r._phyc_arm_timeout_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_ARM_TIMEOUT_CNTr BCM84834_PHYC_ARM_TIMEOUT_CNTr
#define PHYC_ARM_TIMEOUT_CNTr_SIZE BCM84834_PHYC_ARM_TIMEOUT_CNTr_SIZE
typedef BCM84834_PHYC_ARM_TIMEOUT_CNTr_t PHYC_ARM_TIMEOUT_CNTr_t;
#define PHYC_ARM_TIMEOUT_CNTr_CLR BCM84834_PHYC_ARM_TIMEOUT_CNTr_CLR
#define PHYC_ARM_TIMEOUT_CNTr_SET BCM84834_PHYC_ARM_TIMEOUT_CNTr_SET
#define PHYC_ARM_TIMEOUT_CNTr_GET BCM84834_PHYC_ARM_TIMEOUT_CNTr_GET
#define PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_GET BCM84834_PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_GET
#define PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_SET BCM84834_PHYC_ARM_TIMEOUT_CNTr_ARM_TIMEOUT_TIMEf_SET
#define READ_PHYC_ARM_TIMEOUT_CNTr BCM84834_READ_PHYC_ARM_TIMEOUT_CNTr
#define WRITE_PHYC_ARM_TIMEOUT_CNTr BCM84834_WRITE_PHYC_ARM_TIMEOUT_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_ARM_TIMEOUT_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_WAKE_ON_LAN
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86a
 * DEVAD:    1
 * DESC:     Wake On LAN Control
 * SIZE:     32
 * FIELDS:
 *     WOL              
 *
 ******************************************************************************/
#define BCM84834_PHYC_WAKE_ON_LANr (0x0001a86a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_WAKE_ON_LANr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_WAKE_ON_LAN.
 *
 */
typedef union BCM84834_PHYC_WAKE_ON_LANr_s {
	uint32_t v[1];
	uint32_t phyc_wake_on_lan[1];
	uint32_t _phyc_wake_on_lan;
} BCM84834_PHYC_WAKE_ON_LANr_t;

#define BCM84834_PHYC_WAKE_ON_LANr_CLR(r) (r).phyc_wake_on_lan[0] = 0
#define BCM84834_PHYC_WAKE_ON_LANr_SET(r,d) (r).phyc_wake_on_lan[0] = d
#define BCM84834_PHYC_WAKE_ON_LANr_GET(r) (r).phyc_wake_on_lan[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_WAKE_ON_LANr_WOLf_GET(r) (((r).phyc_wake_on_lan[0]) & 0x1)
#define BCM84834_PHYC_WAKE_ON_LANr_WOLf_SET(r,f) (r).phyc_wake_on_lan[0]=(((r).phyc_wake_on_lan[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_WAKE_ON_LAN.
 *
 */
#define BCM84834_READ_PHYC_WAKE_ON_LANr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_WAKE_ON_LANr,(_r._phyc_wake_on_lan))
#define BCM84834_WRITE_PHYC_WAKE_ON_LANr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_WAKE_ON_LANr,(_r._phyc_wake_on_lan))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_WAKE_ON_LANr BCM84834_PHYC_WAKE_ON_LANr
#define PHYC_WAKE_ON_LANr_SIZE BCM84834_PHYC_WAKE_ON_LANr_SIZE
typedef BCM84834_PHYC_WAKE_ON_LANr_t PHYC_WAKE_ON_LANr_t;
#define PHYC_WAKE_ON_LANr_CLR BCM84834_PHYC_WAKE_ON_LANr_CLR
#define PHYC_WAKE_ON_LANr_SET BCM84834_PHYC_WAKE_ON_LANr_SET
#define PHYC_WAKE_ON_LANr_GET BCM84834_PHYC_WAKE_ON_LANr_GET
#define PHYC_WAKE_ON_LANr_WOLf_GET BCM84834_PHYC_WAKE_ON_LANr_WOLf_GET
#define PHYC_WAKE_ON_LANr_WOLf_SET BCM84834_PHYC_WAKE_ON_LANr_WOLf_SET
#define READ_PHYC_WAKE_ON_LANr BCM84834_READ_PHYC_WAKE_ON_LANr
#define WRITE_PHYC_WAKE_ON_LANr BCM84834_WRITE_PHYC_WAKE_ON_LANr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_WAKE_ON_LANr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFT_16K_CNT_STROBE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86b
 * DEVAD:    1
 * DESC:     FFT 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr (0x0001a86b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFT_16K_CNT_STROBE.
 *
 */
typedef union BCM84834_PHYC_FFT_16K_CNT_STROBEr_s {
	uint32_t v[1];
	uint32_t phyc_fft_16k_cnt_strobe[1];
	uint32_t _phyc_fft_16k_cnt_strobe;
} BCM84834_PHYC_FFT_16K_CNT_STROBEr_t;

#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_CLR(r) (r).phyc_fft_16k_cnt_strobe[0] = 0
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_SET(r,d) (r).phyc_fft_16k_cnt_strobe[0] = d
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_GET(r) (r).phyc_fft_16k_cnt_strobe[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_GET(r) ((((r).phyc_fft_16k_cnt_strobe[0]) >> 15) & 0x1)
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_SET(r,f) (r).phyc_fft_16k_cnt_strobe[0]=(((r).phyc_fft_16k_cnt_strobe[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_MODULOf_GET(r) ((((r).phyc_fft_16k_cnt_strobe[0]) >> 13) & 0x3)
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_MODULOf_SET(r,f) (r).phyc_fft_16k_cnt_strobe[0]=(((r).phyc_fft_16k_cnt_strobe[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_LATENCYf_GET(r) (((r).phyc_fft_16k_cnt_strobe[0]) & 0x1fff)
#define BCM84834_PHYC_FFT_16K_CNT_STROBEr_LATENCYf_SET(r,f) (r).phyc_fft_16k_cnt_strobe[0]=(((r).phyc_fft_16k_cnt_strobe[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_FFT_16K_CNT_STROBE.
 *
 */
#define BCM84834_READ_PHYC_FFT_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFT_16K_CNT_STROBEr,(_r._phyc_fft_16k_cnt_strobe))
#define BCM84834_WRITE_PHYC_FFT_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFT_16K_CNT_STROBEr,(_r._phyc_fft_16k_cnt_strobe))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFT_16K_CNT_STROBEr BCM84834_PHYC_FFT_16K_CNT_STROBEr
#define PHYC_FFT_16K_CNT_STROBEr_SIZE BCM84834_PHYC_FFT_16K_CNT_STROBEr_SIZE
typedef BCM84834_PHYC_FFT_16K_CNT_STROBEr_t PHYC_FFT_16K_CNT_STROBEr_t;
#define PHYC_FFT_16K_CNT_STROBEr_CLR BCM84834_PHYC_FFT_16K_CNT_STROBEr_CLR
#define PHYC_FFT_16K_CNT_STROBEr_SET BCM84834_PHYC_FFT_16K_CNT_STROBEr_SET
#define PHYC_FFT_16K_CNT_STROBEr_GET BCM84834_PHYC_FFT_16K_CNT_STROBEr_GET
#define PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_GET BCM84834_PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_GET
#define PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_SET BCM84834_PHYC_FFT_16K_CNT_STROBEr_PLUS_MINUSf_SET
#define PHYC_FFT_16K_CNT_STROBEr_MODULOf_GET BCM84834_PHYC_FFT_16K_CNT_STROBEr_MODULOf_GET
#define PHYC_FFT_16K_CNT_STROBEr_MODULOf_SET BCM84834_PHYC_FFT_16K_CNT_STROBEr_MODULOf_SET
#define PHYC_FFT_16K_CNT_STROBEr_LATENCYf_GET BCM84834_PHYC_FFT_16K_CNT_STROBEr_LATENCYf_GET
#define PHYC_FFT_16K_CNT_STROBEr_LATENCYf_SET BCM84834_PHYC_FFT_16K_CNT_STROBEr_LATENCYf_SET
#define READ_PHYC_FFT_16K_CNT_STROBEr BCM84834_READ_PHYC_FFT_16K_CNT_STROBEr
#define WRITE_PHYC_FFT_16K_CNT_STROBEr BCM84834_WRITE_PHYC_FFT_16K_CNT_STROBEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFT_16K_CNT_STROBEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_IFFT_16K_CNT_STROBE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86c
 * DEVAD:    1
 * DESC:     IFFT 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr (0x0001a86c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_IFFT_16K_CNT_STROBE.
 *
 */
typedef union BCM84834_PHYC_IFFT_16K_CNT_STROBEr_s {
	uint32_t v[1];
	uint32_t phyc_ifft_16k_cnt_strobe[1];
	uint32_t _phyc_ifft_16k_cnt_strobe;
} BCM84834_PHYC_IFFT_16K_CNT_STROBEr_t;

#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_CLR(r) (r).phyc_ifft_16k_cnt_strobe[0] = 0
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_SET(r,d) (r).phyc_ifft_16k_cnt_strobe[0] = d
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_GET(r) (r).phyc_ifft_16k_cnt_strobe[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_GET(r) ((((r).phyc_ifft_16k_cnt_strobe[0]) >> 15) & 0x1)
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_SET(r,f) (r).phyc_ifft_16k_cnt_strobe[0]=(((r).phyc_ifft_16k_cnt_strobe[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_MODULOf_GET(r) ((((r).phyc_ifft_16k_cnt_strobe[0]) >> 13) & 0x3)
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_MODULOf_SET(r,f) (r).phyc_ifft_16k_cnt_strobe[0]=(((r).phyc_ifft_16k_cnt_strobe[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_GET(r) (((r).phyc_ifft_16k_cnt_strobe[0]) & 0x1fff)
#define BCM84834_PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_SET(r,f) (r).phyc_ifft_16k_cnt_strobe[0]=(((r).phyc_ifft_16k_cnt_strobe[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_IFFT_16K_CNT_STROBE.
 *
 */
#define BCM84834_READ_PHYC_IFFT_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_IFFT_16K_CNT_STROBEr,(_r._phyc_ifft_16k_cnt_strobe))
#define BCM84834_WRITE_PHYC_IFFT_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_IFFT_16K_CNT_STROBEr,(_r._phyc_ifft_16k_cnt_strobe))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_IFFT_16K_CNT_STROBEr BCM84834_PHYC_IFFT_16K_CNT_STROBEr
#define PHYC_IFFT_16K_CNT_STROBEr_SIZE BCM84834_PHYC_IFFT_16K_CNT_STROBEr_SIZE
typedef BCM84834_PHYC_IFFT_16K_CNT_STROBEr_t PHYC_IFFT_16K_CNT_STROBEr_t;
#define PHYC_IFFT_16K_CNT_STROBEr_CLR BCM84834_PHYC_IFFT_16K_CNT_STROBEr_CLR
#define PHYC_IFFT_16K_CNT_STROBEr_SET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_SET
#define PHYC_IFFT_16K_CNT_STROBEr_GET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_GET
#define PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_GET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_GET
#define PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_SET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_PLUS_MINUSf_SET
#define PHYC_IFFT_16K_CNT_STROBEr_MODULOf_GET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_MODULOf_GET
#define PHYC_IFFT_16K_CNT_STROBEr_MODULOf_SET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_MODULOf_SET
#define PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_GET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_GET
#define PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_SET BCM84834_PHYC_IFFT_16K_CNT_STROBEr_LATENCYf_SET
#define READ_PHYC_IFFT_16K_CNT_STROBEr BCM84834_READ_PHYC_IFFT_16K_CNT_STROBEr
#define WRITE_PHYC_IFFT_16K_CNT_STROBEr BCM84834_WRITE_PHYC_IFFT_16K_CNT_STROBEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_IFFT_16K_CNT_STROBEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_16K_CNT_STROBE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86d
 * DEVAD:    1
 * DESC:     LPI_RX 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr (0x0001a86d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_16K_CNT_STROBE.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_16k_cnt_strobe[1];
	uint32_t _phyc_lpi_rx_16k_cnt_strobe;
} BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_t;

#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_CLR(r) (r).phyc_lpi_rx_16k_cnt_strobe[0] = 0
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_SET(r,d) (r).phyc_lpi_rx_16k_cnt_strobe[0] = d
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_GET(r) (r).phyc_lpi_rx_16k_cnt_strobe[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_GET(r) ((((r).phyc_lpi_rx_16k_cnt_strobe[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_SET(r,f) (r).phyc_lpi_rx_16k_cnt_strobe[0]=(((r).phyc_lpi_rx_16k_cnt_strobe[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_GET(r) ((((r).phyc_lpi_rx_16k_cnt_strobe[0]) >> 13) & 0x3)
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_SET(r,f) (r).phyc_lpi_rx_16k_cnt_strobe[0]=(((r).phyc_lpi_rx_16k_cnt_strobe[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_GET(r) (((r).phyc_lpi_rx_16k_cnt_strobe[0]) & 0x1fff)
#define BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_SET(r,f) (r).phyc_lpi_rx_16k_cnt_strobe[0]=(((r).phyc_lpi_rx_16k_cnt_strobe[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_LPI_RX_16K_CNT_STROBE.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr,(_r._phyc_lpi_rx_16k_cnt_strobe))
#define BCM84834_WRITE_PHYC_LPI_RX_16K_CNT_STROBEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr,(_r._phyc_lpi_rx_16k_cnt_strobe))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_16K_CNT_STROBEr BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr
#define PHYC_LPI_RX_16K_CNT_STROBEr_SIZE BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_SIZE
typedef BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_t PHYC_LPI_RX_16K_CNT_STROBEr_t;
#define PHYC_LPI_RX_16K_CNT_STROBEr_CLR BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_CLR
#define PHYC_LPI_RX_16K_CNT_STROBEr_SET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_SET
#define PHYC_LPI_RX_16K_CNT_STROBEr_GET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_GET
#define PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_GET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_GET
#define PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_SET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_PLUS_MINUSf_SET
#define PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_GET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_GET
#define PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_SET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_MODULOf_SET
#define PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_GET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_GET
#define PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_SET BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr_LATENCYf_SET
#define READ_PHYC_LPI_RX_16K_CNT_STROBEr BCM84834_READ_PHYC_LPI_RX_16K_CNT_STROBEr
#define WRITE_PHYC_LPI_RX_16K_CNT_STROBEr BCM84834_WRITE_PHYC_LPI_RX_16K_CNT_STROBEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_16K_CNT_STROBEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LDPC_FRAME_START_16K_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86e
 * DEVAD:    1
 * DESC:     LDPC Frame Start 16K Counterstrobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr (0x0001a86e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LDPC_FRAME_START_16K_CNT.
 *
 */
typedef union BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_ldpc_frame_start_16k_cnt[1];
	uint32_t _phyc_ldpc_frame_start_16k_cnt;
} BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_t;

#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_CLR(r) (r).phyc_ldpc_frame_start_16k_cnt[0] = 0
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_SET(r,d) (r).phyc_ldpc_frame_start_16k_cnt[0] = d
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_GET(r) (r).phyc_ldpc_frame_start_16k_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_GET(r) ((((r).phyc_ldpc_frame_start_16k_cnt[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_SET(r,f) (r).phyc_ldpc_frame_start_16k_cnt[0]=(((r).phyc_ldpc_frame_start_16k_cnt[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_GET(r) ((((r).phyc_ldpc_frame_start_16k_cnt[0]) >> 13) & 0x3)
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_SET(r,f) (r).phyc_ldpc_frame_start_16k_cnt[0]=(((r).phyc_ldpc_frame_start_16k_cnt[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_GET(r) (((r).phyc_ldpc_frame_start_16k_cnt[0]) & 0x1fff)
#define BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_SET(r,f) (r).phyc_ldpc_frame_start_16k_cnt[0]=(((r).phyc_ldpc_frame_start_16k_cnt[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_LDPC_FRAME_START_16K_CNT.
 *
 */
#define BCM84834_READ_PHYC_LDPC_FRAME_START_16K_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr,(_r._phyc_ldpc_frame_start_16k_cnt))
#define BCM84834_WRITE_PHYC_LDPC_FRAME_START_16K_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr,(_r._phyc_ldpc_frame_start_16k_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LDPC_FRAME_START_16K_CNTr BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr
#define PHYC_LDPC_FRAME_START_16K_CNTr_SIZE BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_SIZE
typedef BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_t PHYC_LDPC_FRAME_START_16K_CNTr_t;
#define PHYC_LDPC_FRAME_START_16K_CNTr_CLR BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_CLR
#define PHYC_LDPC_FRAME_START_16K_CNTr_SET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_SET
#define PHYC_LDPC_FRAME_START_16K_CNTr_GET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_GET
#define PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_GET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_GET
#define PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_SET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_PLUS_MINUSf_SET
#define PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_GET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_GET
#define PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_SET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_MODULOf_SET
#define PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_GET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_GET
#define PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_SET BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr_LATENCYf_SET
#define READ_PHYC_LDPC_FRAME_START_16K_CNTr BCM84834_READ_PHYC_LDPC_FRAME_START_16K_CNTr
#define WRITE_PHYC_LDPC_FRAME_START_16K_CNTr BCM84834_WRITE_PHYC_LDPC_FRAME_START_16K_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LDPC_FRAME_START_16K_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFT_SLICER_STROBE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa86f
 * DEVAD:    1
 * DESC:     FFT Slicer 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFT_SLICER_STROBEr (0x0001a86f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFT_SLICER_STROBEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFT_SLICER_STROBE.
 *
 */
typedef union BCM84834_PHYC_FFT_SLICER_STROBEr_s {
	uint32_t v[1];
	uint32_t phyc_fft_slicer_strobe[1];
	uint32_t _phyc_fft_slicer_strobe;
} BCM84834_PHYC_FFT_SLICER_STROBEr_t;

#define BCM84834_PHYC_FFT_SLICER_STROBEr_CLR(r) (r).phyc_fft_slicer_strobe[0] = 0
#define BCM84834_PHYC_FFT_SLICER_STROBEr_SET(r,d) (r).phyc_fft_slicer_strobe[0] = d
#define BCM84834_PHYC_FFT_SLICER_STROBEr_GET(r) (r).phyc_fft_slicer_strobe[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_GET(r) ((((r).phyc_fft_slicer_strobe[0]) >> 15) & 0x1)
#define BCM84834_PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_SET(r,f) (r).phyc_fft_slicer_strobe[0]=(((r).phyc_fft_slicer_strobe[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_FFT_SLICER_STROBEr_MODULOf_GET(r) ((((r).phyc_fft_slicer_strobe[0]) >> 13) & 0x3)
#define BCM84834_PHYC_FFT_SLICER_STROBEr_MODULOf_SET(r,f) (r).phyc_fft_slicer_strobe[0]=(((r).phyc_fft_slicer_strobe[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_FFT_SLICER_STROBEr_LATENCYf_GET(r) (((r).phyc_fft_slicer_strobe[0]) & 0x1fff)
#define BCM84834_PHYC_FFT_SLICER_STROBEr_LATENCYf_SET(r,f) (r).phyc_fft_slicer_strobe[0]=(((r).phyc_fft_slicer_strobe[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_FFT_SLICER_STROBE.
 *
 */
#define BCM84834_READ_PHYC_FFT_SLICER_STROBEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFT_SLICER_STROBEr,(_r._phyc_fft_slicer_strobe))
#define BCM84834_WRITE_PHYC_FFT_SLICER_STROBEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFT_SLICER_STROBEr,(_r._phyc_fft_slicer_strobe))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFT_SLICER_STROBEr BCM84834_PHYC_FFT_SLICER_STROBEr
#define PHYC_FFT_SLICER_STROBEr_SIZE BCM84834_PHYC_FFT_SLICER_STROBEr_SIZE
typedef BCM84834_PHYC_FFT_SLICER_STROBEr_t PHYC_FFT_SLICER_STROBEr_t;
#define PHYC_FFT_SLICER_STROBEr_CLR BCM84834_PHYC_FFT_SLICER_STROBEr_CLR
#define PHYC_FFT_SLICER_STROBEr_SET BCM84834_PHYC_FFT_SLICER_STROBEr_SET
#define PHYC_FFT_SLICER_STROBEr_GET BCM84834_PHYC_FFT_SLICER_STROBEr_GET
#define PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_GET BCM84834_PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_GET
#define PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_SET BCM84834_PHYC_FFT_SLICER_STROBEr_PLUS_MINUSf_SET
#define PHYC_FFT_SLICER_STROBEr_MODULOf_GET BCM84834_PHYC_FFT_SLICER_STROBEr_MODULOf_GET
#define PHYC_FFT_SLICER_STROBEr_MODULOf_SET BCM84834_PHYC_FFT_SLICER_STROBEr_MODULOf_SET
#define PHYC_FFT_SLICER_STROBEr_LATENCYf_GET BCM84834_PHYC_FFT_SLICER_STROBEr_LATENCYf_GET
#define PHYC_FFT_SLICER_STROBEr_LATENCYf_SET BCM84834_PHYC_FFT_SLICER_STROBEr_LATENCYf_SET
#define READ_PHYC_FFT_SLICER_STROBEr BCM84834_READ_PHYC_FFT_SLICER_STROBEr
#define WRITE_PHYC_FFT_SLICER_STROBEr BCM84834_WRITE_PHYC_FFT_SLICER_STROBEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFT_SLICER_STROBEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_START
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa870
 * DEVAD:    1
 * DESC:     LPI RX Start 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_STARTr (0x0001a870 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_STARTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_START.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_STARTr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_start[1];
	uint32_t _phyc_lpi_rx_start;
} BCM84834_PHYC_LPI_RX_STARTr_t;

#define BCM84834_PHYC_LPI_RX_STARTr_CLR(r) (r).phyc_lpi_rx_start[0] = 0
#define BCM84834_PHYC_LPI_RX_STARTr_SET(r,d) (r).phyc_lpi_rx_start[0] = d
#define BCM84834_PHYC_LPI_RX_STARTr_GET(r) (r).phyc_lpi_rx_start[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_STARTr_PLUS_MINUSf_GET(r) ((((r).phyc_lpi_rx_start[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LPI_RX_STARTr_PLUS_MINUSf_SET(r,f) (r).phyc_lpi_rx_start[0]=(((r).phyc_lpi_rx_start[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LPI_RX_STARTr_MODULOf_GET(r) ((((r).phyc_lpi_rx_start[0]) >> 13) & 0x3)
#define BCM84834_PHYC_LPI_RX_STARTr_MODULOf_SET(r,f) (r).phyc_lpi_rx_start[0]=(((r).phyc_lpi_rx_start[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_LPI_RX_STARTr_LATENCYf_GET(r) (((r).phyc_lpi_rx_start[0]) & 0x1fff)
#define BCM84834_PHYC_LPI_RX_STARTr_LATENCYf_SET(r,f) (r).phyc_lpi_rx_start[0]=(((r).phyc_lpi_rx_start[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_LPI_RX_START.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_STARTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_STARTr,(_r._phyc_lpi_rx_start))
#define BCM84834_WRITE_PHYC_LPI_RX_STARTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_STARTr,(_r._phyc_lpi_rx_start))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_STARTr BCM84834_PHYC_LPI_RX_STARTr
#define PHYC_LPI_RX_STARTr_SIZE BCM84834_PHYC_LPI_RX_STARTr_SIZE
typedef BCM84834_PHYC_LPI_RX_STARTr_t PHYC_LPI_RX_STARTr_t;
#define PHYC_LPI_RX_STARTr_CLR BCM84834_PHYC_LPI_RX_STARTr_CLR
#define PHYC_LPI_RX_STARTr_SET BCM84834_PHYC_LPI_RX_STARTr_SET
#define PHYC_LPI_RX_STARTr_GET BCM84834_PHYC_LPI_RX_STARTr_GET
#define PHYC_LPI_RX_STARTr_PLUS_MINUSf_GET BCM84834_PHYC_LPI_RX_STARTr_PLUS_MINUSf_GET
#define PHYC_LPI_RX_STARTr_PLUS_MINUSf_SET BCM84834_PHYC_LPI_RX_STARTr_PLUS_MINUSf_SET
#define PHYC_LPI_RX_STARTr_MODULOf_GET BCM84834_PHYC_LPI_RX_STARTr_MODULOf_GET
#define PHYC_LPI_RX_STARTr_MODULOf_SET BCM84834_PHYC_LPI_RX_STARTr_MODULOf_SET
#define PHYC_LPI_RX_STARTr_LATENCYf_GET BCM84834_PHYC_LPI_RX_STARTr_LATENCYf_GET
#define PHYC_LPI_RX_STARTr_LATENCYf_SET BCM84834_PHYC_LPI_RX_STARTr_LATENCYf_SET
#define READ_PHYC_LPI_RX_STARTr BCM84834_READ_PHYC_LPI_RX_STARTr
#define WRITE_PHYC_LPI_RX_STARTr BCM84834_WRITE_PHYC_LPI_RX_STARTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_STARTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_STROBE7_16K_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa871
 * DEVAD:    1
 * DESC:     16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_STROBE7_16K_CNTr (0x0001a871 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_STROBE7_16K_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_STROBE7_16K_CNT.
 *
 */
typedef union BCM84834_PHYC_STROBE7_16K_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_strobe7_16k_cnt[1];
	uint32_t _phyc_strobe7_16k_cnt;
} BCM84834_PHYC_STROBE7_16K_CNTr_t;

#define BCM84834_PHYC_STROBE7_16K_CNTr_CLR(r) (r).phyc_strobe7_16k_cnt[0] = 0
#define BCM84834_PHYC_STROBE7_16K_CNTr_SET(r,d) (r).phyc_strobe7_16k_cnt[0] = d
#define BCM84834_PHYC_STROBE7_16K_CNTr_GET(r) (r).phyc_strobe7_16k_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_GET(r) ((((r).phyc_strobe7_16k_cnt[0]) >> 15) & 0x1)
#define BCM84834_PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_SET(r,f) (r).phyc_strobe7_16k_cnt[0]=(((r).phyc_strobe7_16k_cnt[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_STROBE7_16K_CNTr_MODULOf_GET(r) ((((r).phyc_strobe7_16k_cnt[0]) >> 13) & 0x3)
#define BCM84834_PHYC_STROBE7_16K_CNTr_MODULOf_SET(r,f) (r).phyc_strobe7_16k_cnt[0]=(((r).phyc_strobe7_16k_cnt[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_STROBE7_16K_CNTr_LATENCYf_GET(r) (((r).phyc_strobe7_16k_cnt[0]) & 0x1fff)
#define BCM84834_PHYC_STROBE7_16K_CNTr_LATENCYf_SET(r,f) (r).phyc_strobe7_16k_cnt[0]=(((r).phyc_strobe7_16k_cnt[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_STROBE7_16K_CNT.
 *
 */
#define BCM84834_READ_PHYC_STROBE7_16K_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_STROBE7_16K_CNTr,(_r._phyc_strobe7_16k_cnt))
#define BCM84834_WRITE_PHYC_STROBE7_16K_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_STROBE7_16K_CNTr,(_r._phyc_strobe7_16k_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_STROBE7_16K_CNTr BCM84834_PHYC_STROBE7_16K_CNTr
#define PHYC_STROBE7_16K_CNTr_SIZE BCM84834_PHYC_STROBE7_16K_CNTr_SIZE
typedef BCM84834_PHYC_STROBE7_16K_CNTr_t PHYC_STROBE7_16K_CNTr_t;
#define PHYC_STROBE7_16K_CNTr_CLR BCM84834_PHYC_STROBE7_16K_CNTr_CLR
#define PHYC_STROBE7_16K_CNTr_SET BCM84834_PHYC_STROBE7_16K_CNTr_SET
#define PHYC_STROBE7_16K_CNTr_GET BCM84834_PHYC_STROBE7_16K_CNTr_GET
#define PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_GET BCM84834_PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_GET
#define PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_SET BCM84834_PHYC_STROBE7_16K_CNTr_PLUS_MINUSf_SET
#define PHYC_STROBE7_16K_CNTr_MODULOf_GET BCM84834_PHYC_STROBE7_16K_CNTr_MODULOf_GET
#define PHYC_STROBE7_16K_CNTr_MODULOf_SET BCM84834_PHYC_STROBE7_16K_CNTr_MODULOf_SET
#define PHYC_STROBE7_16K_CNTr_LATENCYf_GET BCM84834_PHYC_STROBE7_16K_CNTr_LATENCYf_GET
#define PHYC_STROBE7_16K_CNTr_LATENCYf_SET BCM84834_PHYC_STROBE7_16K_CNTr_LATENCYf_SET
#define READ_PHYC_STROBE7_16K_CNTr BCM84834_READ_PHYC_STROBE7_16K_CNTr
#define WRITE_PHYC_STROBE7_16K_CNTr BCM84834_WRITE_PHYC_STROBE7_16K_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_STROBE7_16K_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FFT_ERRGEN_IF_LOC
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa872
 * DEVAD:    1
 * DESC:     FFT ERRGEN IF 16K Counter strobe
 * SIZE:     32
 * FIELDS:
 *     LATENCY          
 *     MODULO           
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr (0x0001a872 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FFT_ERRGEN_IF_LOC.
 *
 */
typedef union BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_s {
	uint32_t v[1];
	uint32_t phyc_fft_errgen_if_loc[1];
	uint32_t _phyc_fft_errgen_if_loc;
} BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_t;

#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_CLR(r) (r).phyc_fft_errgen_if_loc[0] = 0
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_SET(r,d) (r).phyc_fft_errgen_if_loc[0] = d
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_GET(r) (r).phyc_fft_errgen_if_loc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_GET(r) ((((r).phyc_fft_errgen_if_loc[0]) >> 15) & 0x1)
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_SET(r,f) (r).phyc_fft_errgen_if_loc[0]=(((r).phyc_fft_errgen_if_loc[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_GET(r) ((((r).phyc_fft_errgen_if_loc[0]) >> 13) & 0x3)
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_SET(r,f) (r).phyc_fft_errgen_if_loc[0]=(((r).phyc_fft_errgen_if_loc[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_GET(r) (((r).phyc_fft_errgen_if_loc[0]) & 0x1fff)
#define BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_SET(r,f) (r).phyc_fft_errgen_if_loc[0]=(((r).phyc_fft_errgen_if_loc[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_FFT_ERRGEN_IF_LOC.
 *
 */
#define BCM84834_READ_PHYC_FFT_ERRGEN_IF_LOCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FFT_ERRGEN_IF_LOCr,(_r._phyc_fft_errgen_if_loc))
#define BCM84834_WRITE_PHYC_FFT_ERRGEN_IF_LOCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FFT_ERRGEN_IF_LOCr,(_r._phyc_fft_errgen_if_loc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FFT_ERRGEN_IF_LOCr BCM84834_PHYC_FFT_ERRGEN_IF_LOCr
#define PHYC_FFT_ERRGEN_IF_LOCr_SIZE BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_SIZE
typedef BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_t PHYC_FFT_ERRGEN_IF_LOCr_t;
#define PHYC_FFT_ERRGEN_IF_LOCr_CLR BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_CLR
#define PHYC_FFT_ERRGEN_IF_LOCr_SET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_SET
#define PHYC_FFT_ERRGEN_IF_LOCr_GET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_GET
#define PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_GET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_GET
#define PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_SET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_PLUS_MINUSf_SET
#define PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_GET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_GET
#define PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_SET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_MODULOf_SET
#define PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_GET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_GET
#define PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_SET BCM84834_PHYC_FFT_ERRGEN_IF_LOCr_LATENCYf_SET
#define READ_PHYC_FFT_ERRGEN_IF_LOCr BCM84834_READ_PHYC_FFT_ERRGEN_IF_LOCr
#define WRITE_PHYC_FFT_ERRGEN_IF_LOCr BCM84834_WRITE_PHYC_FFT_ERRGEN_IF_LOCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FFT_ERRGEN_IF_LOCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_TX_LFSR_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa873
 * DEVAD:    1
 * DESC:     Variable Rate TX LFSR Control
 * SIZE:     32
 * FIELDS:
 *     ENABLE           
 *     STATE_COPY       
 *     MASTER           
 *     SCR_INIT         
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr (0x0001a873 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_TX_LFSR_CTL.
 *
 */
typedef union BCM84834_PHYC_VAR_TX_LFSR_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_var_tx_lfsr_ctl[1];
	uint32_t _phyc_var_tx_lfsr_ctl;
} BCM84834_PHYC_VAR_TX_LFSR_CTLr_t;

#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_CLR(r) (r).phyc_var_tx_lfsr_ctl[0] = 0
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_SET(r,d) (r).phyc_var_tx_lfsr_ctl[0] = d
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_GET(r) (r).phyc_var_tx_lfsr_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_GET(r) ((((r).phyc_var_tx_lfsr_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_SET(r,f) (r).phyc_var_tx_lfsr_ctl[0]=(((r).phyc_var_tx_lfsr_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_MASTERf_GET(r) ((((r).phyc_var_tx_lfsr_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_MASTERf_SET(r,f) (r).phyc_var_tx_lfsr_ctl[0]=(((r).phyc_var_tx_lfsr_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_GET(r) ((((r).phyc_var_tx_lfsr_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_SET(r,f) (r).phyc_var_tx_lfsr_ctl[0]=(((r).phyc_var_tx_lfsr_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_ENABLEf_GET(r) (((r).phyc_var_tx_lfsr_ctl[0]) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_CTLr_ENABLEf_SET(r,f) (r).phyc_var_tx_lfsr_ctl[0]=(((r).phyc_var_tx_lfsr_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_VAR_TX_LFSR_CTL.
 *
 */
#define BCM84834_READ_PHYC_VAR_TX_LFSR_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_TX_LFSR_CTLr,(_r._phyc_var_tx_lfsr_ctl))
#define BCM84834_WRITE_PHYC_VAR_TX_LFSR_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_TX_LFSR_CTLr,(_r._phyc_var_tx_lfsr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_TX_LFSR_CTLr BCM84834_PHYC_VAR_TX_LFSR_CTLr
#define PHYC_VAR_TX_LFSR_CTLr_SIZE BCM84834_PHYC_VAR_TX_LFSR_CTLr_SIZE
typedef BCM84834_PHYC_VAR_TX_LFSR_CTLr_t PHYC_VAR_TX_LFSR_CTLr_t;
#define PHYC_VAR_TX_LFSR_CTLr_CLR BCM84834_PHYC_VAR_TX_LFSR_CTLr_CLR
#define PHYC_VAR_TX_LFSR_CTLr_SET BCM84834_PHYC_VAR_TX_LFSR_CTLr_SET
#define PHYC_VAR_TX_LFSR_CTLr_GET BCM84834_PHYC_VAR_TX_LFSR_CTLr_GET
#define PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_GET BCM84834_PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_GET
#define PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_SET BCM84834_PHYC_VAR_TX_LFSR_CTLr_SCR_INITf_SET
#define PHYC_VAR_TX_LFSR_CTLr_MASTERf_GET BCM84834_PHYC_VAR_TX_LFSR_CTLr_MASTERf_GET
#define PHYC_VAR_TX_LFSR_CTLr_MASTERf_SET BCM84834_PHYC_VAR_TX_LFSR_CTLr_MASTERf_SET
#define PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_GET BCM84834_PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_GET
#define PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_SET BCM84834_PHYC_VAR_TX_LFSR_CTLr_STATE_COPYf_SET
#define PHYC_VAR_TX_LFSR_CTLr_ENABLEf_GET BCM84834_PHYC_VAR_TX_LFSR_CTLr_ENABLEf_GET
#define PHYC_VAR_TX_LFSR_CTLr_ENABLEf_SET BCM84834_PHYC_VAR_TX_LFSR_CTLr_ENABLEf_SET
#define READ_PHYC_VAR_TX_LFSR_CTLr BCM84834_READ_PHYC_VAR_TX_LFSR_CTLr
#define WRITE_PHYC_VAR_TX_LFSR_CTLr BCM84834_WRITE_PHYC_VAR_TX_LFSR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_TX_LFSR_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_TX_LFSR_SPEED_MODE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa874
 * DEVAD:    1
 * DESC:     Variable Rate TX LFSR SpeedMode Counter
 * SIZE:     32
 * FIELDS:
 *     SPEED_MODE_COUNTER 
 *     START_COUNT      
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr (0x0001a874 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_TX_LFSR_SPEED_MODE_CNT.
 *
 */
typedef union BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_var_tx_lfsr_speed_mode_cnt[1];
	uint32_t _phyc_var_tx_lfsr_speed_mode_cnt;
} BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_t;

#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_CLR(r) (r).phyc_var_tx_lfsr_speed_mode_cnt[0] = 0
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SET(r,d) (r).phyc_var_tx_lfsr_speed_mode_cnt[0] = d
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_GET(r) (r).phyc_var_tx_lfsr_speed_mode_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET(r) ((((r).phyc_var_tx_lfsr_speed_mode_cnt[0]) >> 12) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET(r,f) (r).phyc_var_tx_lfsr_speed_mode_cnt[0]=(((r).phyc_var_tx_lfsr_speed_mode_cnt[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET(r) (((r).phyc_var_tx_lfsr_speed_mode_cnt[0]) & 0xfff)
#define BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET(r,f) (r).phyc_var_tx_lfsr_speed_mode_cnt[0]=(((r).phyc_var_tx_lfsr_speed_mode_cnt[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PHYC_VAR_TX_LFSR_SPEED_MODE_CNT.
 *
 */
#define BCM84834_READ_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr,(_r._phyc_var_tx_lfsr_speed_mode_cnt))
#define BCM84834_WRITE_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr,(_r._phyc_var_tx_lfsr_speed_mode_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SIZE BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SIZE
typedef BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_t PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_t;
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_CLR BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_CLR
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SET
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_GET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_GET
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET
#define PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET
#define READ_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr BCM84834_READ_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr
#define WRITE_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr BCM84834_WRITE_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_TX_LFSR_SPEED_MODE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_TX_LFSR_LDPC_FRAME_MARK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa875
 * DEVAD:    1
 * DESC:     Variable Rate TX LFSR SpeedMode Counter
 * SIZE:     32
 * FIELDS:
 *     LDPC_FRAME_MARK  
 *     FORCE_UPDATE     
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr (0x0001a875 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_TX_LFSR_LDPC_FRAME_MARK.
 *
 */
typedef union BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_s {
	uint32_t v[1];
	uint32_t phyc_var_tx_lfsr_ldpc_frame_mark[1];
	uint32_t _phyc_var_tx_lfsr_ldpc_frame_mark;
} BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_t;

#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_CLR(r) (r).phyc_var_tx_lfsr_ldpc_frame_mark[0] = 0
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SET(r,d) (r).phyc_var_tx_lfsr_ldpc_frame_mark[0] = d
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_GET(r) (r).phyc_var_tx_lfsr_ldpc_frame_mark[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET(r) ((((r).phyc_var_tx_lfsr_ldpc_frame_mark[0]) >> 7) & 0x1)
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET(r,f) (r).phyc_var_tx_lfsr_ldpc_frame_mark[0]=(((r).phyc_var_tx_lfsr_ldpc_frame_mark[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET(r) (((r).phyc_var_tx_lfsr_ldpc_frame_mark[0]) & 0x7f)
#define BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET(r,f) (r).phyc_var_tx_lfsr_ldpc_frame_mark[0]=(((r).phyc_var_tx_lfsr_ldpc_frame_mark[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_VAR_TX_LFSR_LDPC_FRAME_MARK.
 *
 */
#define BCM84834_READ_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr,(_r._phyc_var_tx_lfsr_ldpc_frame_mark))
#define BCM84834_WRITE_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr,(_r._phyc_var_tx_lfsr_ldpc_frame_mark))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SIZE BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SIZE
typedef BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_t PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_t;
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_CLR BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_CLR
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_SET
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_GET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_GET
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET
#define PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET
#define READ_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr BCM84834_READ_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr
#define WRITE_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr BCM84834_WRITE_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_TX_LFSR_LDPC_FRAME_MARKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_RX_LFSR_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa876
 * DEVAD:    1
 * DESC:     Variable Rate RX LFSR Control
 * SIZE:     32
 * FIELDS:
 *     ENABLE           
 *     STATE_COPY       
 *     MASTER           
 *     SCR_INIT         
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr (0x0001a876 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_RX_LFSR_CTL.
 *
 */
typedef union BCM84834_PHYC_VAR_RX_LFSR_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_var_rx_lfsr_ctl[1];
	uint32_t _phyc_var_rx_lfsr_ctl;
} BCM84834_PHYC_VAR_RX_LFSR_CTLr_t;

#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_CLR(r) (r).phyc_var_rx_lfsr_ctl[0] = 0
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_SET(r,d) (r).phyc_var_rx_lfsr_ctl[0] = d
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_GET(r) (r).phyc_var_rx_lfsr_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_GET(r) ((((r).phyc_var_rx_lfsr_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_SET(r,f) (r).phyc_var_rx_lfsr_ctl[0]=(((r).phyc_var_rx_lfsr_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_MASTERf_GET(r) ((((r).phyc_var_rx_lfsr_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_MASTERf_SET(r,f) (r).phyc_var_rx_lfsr_ctl[0]=(((r).phyc_var_rx_lfsr_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_GET(r) ((((r).phyc_var_rx_lfsr_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_SET(r,f) (r).phyc_var_rx_lfsr_ctl[0]=(((r).phyc_var_rx_lfsr_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_ENABLEf_GET(r) (((r).phyc_var_rx_lfsr_ctl[0]) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_CTLr_ENABLEf_SET(r,f) (r).phyc_var_rx_lfsr_ctl[0]=(((r).phyc_var_rx_lfsr_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_VAR_RX_LFSR_CTL.
 *
 */
#define BCM84834_READ_PHYC_VAR_RX_LFSR_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_RX_LFSR_CTLr,(_r._phyc_var_rx_lfsr_ctl))
#define BCM84834_WRITE_PHYC_VAR_RX_LFSR_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_RX_LFSR_CTLr,(_r._phyc_var_rx_lfsr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_RX_LFSR_CTLr BCM84834_PHYC_VAR_RX_LFSR_CTLr
#define PHYC_VAR_RX_LFSR_CTLr_SIZE BCM84834_PHYC_VAR_RX_LFSR_CTLr_SIZE
typedef BCM84834_PHYC_VAR_RX_LFSR_CTLr_t PHYC_VAR_RX_LFSR_CTLr_t;
#define PHYC_VAR_RX_LFSR_CTLr_CLR BCM84834_PHYC_VAR_RX_LFSR_CTLr_CLR
#define PHYC_VAR_RX_LFSR_CTLr_SET BCM84834_PHYC_VAR_RX_LFSR_CTLr_SET
#define PHYC_VAR_RX_LFSR_CTLr_GET BCM84834_PHYC_VAR_RX_LFSR_CTLr_GET
#define PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_GET BCM84834_PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_GET
#define PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_SET BCM84834_PHYC_VAR_RX_LFSR_CTLr_SCR_INITf_SET
#define PHYC_VAR_RX_LFSR_CTLr_MASTERf_GET BCM84834_PHYC_VAR_RX_LFSR_CTLr_MASTERf_GET
#define PHYC_VAR_RX_LFSR_CTLr_MASTERf_SET BCM84834_PHYC_VAR_RX_LFSR_CTLr_MASTERf_SET
#define PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_GET BCM84834_PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_GET
#define PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_SET BCM84834_PHYC_VAR_RX_LFSR_CTLr_STATE_COPYf_SET
#define PHYC_VAR_RX_LFSR_CTLr_ENABLEf_GET BCM84834_PHYC_VAR_RX_LFSR_CTLr_ENABLEf_GET
#define PHYC_VAR_RX_LFSR_CTLr_ENABLEf_SET BCM84834_PHYC_VAR_RX_LFSR_CTLr_ENABLEf_SET
#define READ_PHYC_VAR_RX_LFSR_CTLr BCM84834_READ_PHYC_VAR_RX_LFSR_CTLr
#define WRITE_PHYC_VAR_RX_LFSR_CTLr BCM84834_WRITE_PHYC_VAR_RX_LFSR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_RX_LFSR_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_RX_LFSR_LDPC_FRAME_MARK
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa877
 * DEVAD:    1
 * DESC:     Variable Rate RX LFSR SpeedMode Counter
 * SIZE:     32
 * FIELDS:
 *     LDPC_FRAME_MARK  
 *     FORCE_UPDATE     
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr (0x0001a877 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_RX_LFSR_LDPC_FRAME_MARK.
 *
 */
typedef union BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_s {
	uint32_t v[1];
	uint32_t phyc_var_rx_lfsr_ldpc_frame_mark[1];
	uint32_t _phyc_var_rx_lfsr_ldpc_frame_mark;
} BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_t;

#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_CLR(r) (r).phyc_var_rx_lfsr_ldpc_frame_mark[0] = 0
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SET(r,d) (r).phyc_var_rx_lfsr_ldpc_frame_mark[0] = d
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_GET(r) (r).phyc_var_rx_lfsr_ldpc_frame_mark[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET(r) ((((r).phyc_var_rx_lfsr_ldpc_frame_mark[0]) >> 7) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET(r,f) (r).phyc_var_rx_lfsr_ldpc_frame_mark[0]=(((r).phyc_var_rx_lfsr_ldpc_frame_mark[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET(r) (((r).phyc_var_rx_lfsr_ldpc_frame_mark[0]) & 0x7f)
#define BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET(r,f) (r).phyc_var_rx_lfsr_ldpc_frame_mark[0]=(((r).phyc_var_rx_lfsr_ldpc_frame_mark[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_VAR_RX_LFSR_LDPC_FRAME_MARK.
 *
 */
#define BCM84834_READ_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr,(_r._phyc_var_rx_lfsr_ldpc_frame_mark))
#define BCM84834_WRITE_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr,(_r._phyc_var_rx_lfsr_ldpc_frame_mark))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SIZE BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SIZE
typedef BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_t PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_t;
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_CLR BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_CLR
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_SET
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_GET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_GET
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_GET
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_FORCE_UPDATEf_SET
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_GET
#define PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr_LDPC_FRAME_MARKf_SET
#define READ_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr BCM84834_READ_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr
#define WRITE_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr BCM84834_WRITE_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_RX_LFSR_LDPC_FRAME_MARKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_VAR_RX_LFSR_SPEED_MODE_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa878
 * DEVAD:    1
 * DESC:     Variable Rate RX LFSR SpeedMode Counter
 * SIZE:     32
 * FIELDS:
 *     SPEED_MODE_COUNTER 
 *     START_COUNT      
 *
 ******************************************************************************/
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr (0x0001a878 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_VAR_RX_LFSR_SPEED_MODE_CNT.
 *
 */
typedef union BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_var_rx_lfsr_speed_mode_cnt[1];
	uint32_t _phyc_var_rx_lfsr_speed_mode_cnt;
} BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_t;

#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_CLR(r) (r).phyc_var_rx_lfsr_speed_mode_cnt[0] = 0
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SET(r,d) (r).phyc_var_rx_lfsr_speed_mode_cnt[0] = d
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_GET(r) (r).phyc_var_rx_lfsr_speed_mode_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET(r) ((((r).phyc_var_rx_lfsr_speed_mode_cnt[0]) >> 12) & 0x1)
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET(r,f) (r).phyc_var_rx_lfsr_speed_mode_cnt[0]=(((r).phyc_var_rx_lfsr_speed_mode_cnt[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET(r) (((r).phyc_var_rx_lfsr_speed_mode_cnt[0]) & 0xfff)
#define BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET(r,f) (r).phyc_var_rx_lfsr_speed_mode_cnt[0]=(((r).phyc_var_rx_lfsr_speed_mode_cnt[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PHYC_VAR_RX_LFSR_SPEED_MODE_CNT.
 *
 */
#define BCM84834_READ_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr,(_r._phyc_var_rx_lfsr_speed_mode_cnt))
#define BCM84834_WRITE_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr,(_r._phyc_var_rx_lfsr_speed_mode_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SIZE BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SIZE
typedef BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_t PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_t;
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_CLR BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_CLR
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SET
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_GET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_GET
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_GET
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_START_COUNTf_SET
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_GET
#define PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr_SPEED_MODE_COUNTERf_SET
#define READ_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr BCM84834_READ_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr
#define WRITE_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr BCM84834_WRITE_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_VAR_RX_LFSR_SPEED_MODE_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_GLBL_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa879
 * DEVAD:    1
 * DESC:     Low Power Idle Global Control register
 * SIZE:     32
 * FIELDS:
 *     XGPHY_EEE_CAP    
 *     XGPHY_EEE_ALLOW  
 *     TX_LPI_TEST_EN   
 *     TX_LPI_TEST_PAT_SEL 
 *     LPI_BLK_TYPE_SEL_OST 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_GLBL_CTLr (0x0001a879 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_GLBL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_GLBL_CTL.
 *
 */
typedef union BCM84834_PHYC_LPI_GLBL_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_glbl_ctl[1];
	uint32_t _phyc_lpi_glbl_ctl;
} BCM84834_PHYC_LPI_GLBL_CTLr_t;

#define BCM84834_PHYC_LPI_GLBL_CTLr_CLR(r) (r).phyc_lpi_glbl_ctl[0] = 0
#define BCM84834_PHYC_LPI_GLBL_CTLr_SET(r,d) (r).phyc_lpi_glbl_ctl[0] = d
#define BCM84834_PHYC_LPI_GLBL_CTLr_GET(r) (r).phyc_lpi_glbl_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_GET(r) ((((r).phyc_lpi_glbl_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_SET(r,f) (r).phyc_lpi_glbl_ctl[0]=(((r).phyc_lpi_glbl_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_GET(r) ((((r).phyc_lpi_glbl_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_SET(r,f) (r).phyc_lpi_glbl_ctl[0]=(((r).phyc_lpi_glbl_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_GET(r) ((((r).phyc_lpi_glbl_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_SET(r,f) (r).phyc_lpi_glbl_ctl[0]=(((r).phyc_lpi_glbl_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_GET(r) ((((r).phyc_lpi_glbl_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_SET(r,f) (r).phyc_lpi_glbl_ctl[0]=(((r).phyc_lpi_glbl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_GET(r) (((r).phyc_lpi_glbl_ctl[0]) & 0x1)
#define BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_SET(r,f) (r).phyc_lpi_glbl_ctl[0]=(((r).phyc_lpi_glbl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LPI_GLBL_CTL.
 *
 */
#define BCM84834_READ_PHYC_LPI_GLBL_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_GLBL_CTLr,(_r._phyc_lpi_glbl_ctl))
#define BCM84834_WRITE_PHYC_LPI_GLBL_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_GLBL_CTLr,(_r._phyc_lpi_glbl_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_GLBL_CTLr BCM84834_PHYC_LPI_GLBL_CTLr
#define PHYC_LPI_GLBL_CTLr_SIZE BCM84834_PHYC_LPI_GLBL_CTLr_SIZE
typedef BCM84834_PHYC_LPI_GLBL_CTLr_t PHYC_LPI_GLBL_CTLr_t;
#define PHYC_LPI_GLBL_CTLr_CLR BCM84834_PHYC_LPI_GLBL_CTLr_CLR
#define PHYC_LPI_GLBL_CTLr_SET BCM84834_PHYC_LPI_GLBL_CTLr_SET
#define PHYC_LPI_GLBL_CTLr_GET BCM84834_PHYC_LPI_GLBL_CTLr_GET
#define PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_GET BCM84834_PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_GET
#define PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_SET BCM84834_PHYC_LPI_GLBL_CTLr_LPI_BLK_TYPE_SEL_OSTf_SET
#define PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_GET BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_GET
#define PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_SET BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_PAT_SELf_SET
#define PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_GET BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_GET
#define PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_SET BCM84834_PHYC_LPI_GLBL_CTLr_TX_LPI_TEST_ENf_SET
#define PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_GET BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_GET
#define PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_SET BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_ALLOWf_SET
#define PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_GET BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_GET
#define PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_SET BCM84834_PHYC_LPI_GLBL_CTLr_XGPHY_EEE_CAPf_SET
#define READ_PHYC_LPI_GLBL_CTLr BCM84834_READ_PHYC_LPI_GLBL_CTLr
#define WRITE_PHYC_LPI_GLBL_CTLr BCM84834_WRITE_PHYC_LPI_GLBL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_GLBL_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_TX_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa87a
 * DEVAD:    1
 * DESC:     Low Power Idle Transmit Control register
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_XGTX_CG_EN 
 *     TX_LPI_SYM_DAC_CG_EN 
 *     TX_LPI_ASYM_DAC_CG_EN 
 *     TX_LDPC_ENC_CG_EN 
 *     TX_ALERT_DIS_ALLW 
 *     TX_SLEEP_DLY     
 *     TX_LPI_BLK_SEL   
 *     TX_LPI_QR_INIT_SEL 
 *     TX_LPI_LMS_STAG_EN 
 *     TX_WAKE_PASS_THRU 
 *     TX_LPI_WAKE_ERR_MODE 
 *     TX_ALERT_GEN_CONT 
 *     TX_LI_TYPE_SEL   
 *     TX_ALERT_LPWR_SEL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_TX_CTLr (0x0001a87a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_TX_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_TX_CTL.
 *
 */
typedef union BCM84834_PHYC_LPI_TX_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_tx_ctl[1];
	uint32_t _phyc_lpi_tx_ctl;
} BCM84834_PHYC_LPI_TX_CTLr_t;

#define BCM84834_PHYC_LPI_TX_CTLr_CLR(r) (r).phyc_lpi_tx_ctl[0] = 0
#define BCM84834_PHYC_LPI_TX_CTLr_SET(r,d) (r).phyc_lpi_tx_ctl[0] = d
#define BCM84834_PHYC_LPI_TX_CTLr_GET(r) (r).phyc_lpi_tx_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_GET(r) ((((r).phyc_lpi_tx_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_GET(r) (((r).phyc_lpi_tx_ctl[0]) & 0x1)
#define BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_SET(r,f) (r).phyc_lpi_tx_ctl[0]=(((r).phyc_lpi_tx_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LPI_TX_CTL.
 *
 */
#define BCM84834_READ_PHYC_LPI_TX_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_TX_CTLr,(_r._phyc_lpi_tx_ctl))
#define BCM84834_WRITE_PHYC_LPI_TX_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_TX_CTLr,(_r._phyc_lpi_tx_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_TX_CTLr BCM84834_PHYC_LPI_TX_CTLr
#define PHYC_LPI_TX_CTLr_SIZE BCM84834_PHYC_LPI_TX_CTLr_SIZE
typedef BCM84834_PHYC_LPI_TX_CTLr_t PHYC_LPI_TX_CTLr_t;
#define PHYC_LPI_TX_CTLr_CLR BCM84834_PHYC_LPI_TX_CTLr_CLR
#define PHYC_LPI_TX_CTLr_SET BCM84834_PHYC_LPI_TX_CTLr_SET
#define PHYC_LPI_TX_CTLr_GET BCM84834_PHYC_LPI_TX_CTLr_GET
#define PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_GET
#define PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_LPWR_SELf_SET
#define PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_GET
#define PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LI_TYPE_SELf_SET
#define PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_GET
#define PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_GEN_CONTf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_WAKE_ERR_MODEf_SET
#define PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_GET
#define PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_WAKE_PASS_THRUf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_LMS_STAG_ENf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_QR_INIT_SELf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_BLK_SELf_SET
#define PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_GET
#define PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_SLEEP_DLYf_SET
#define PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_GET
#define PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_ALERT_DIS_ALLWf_SET
#define PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_GET
#define PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LDPC_ENC_CG_ENf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_ASYM_DAC_CG_ENf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_SYM_DAC_CG_ENf_SET
#define PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_GET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_GET
#define PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_SET BCM84834_PHYC_LPI_TX_CTLr_TX_LPI_XGTX_CG_ENf_SET
#define READ_PHYC_LPI_TX_CTLr BCM84834_READ_PHYC_LPI_TX_CTLr
#define WRITE_PHYC_LPI_TX_CTLr BCM84834_WRITE_PHYC_LPI_TX_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_TX_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa87b
 * DEVAD:    1
 * DESC:     Low Power Idle Receive Control register
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_ADC_CG_EN 
 *     RX_LDPC_DEC_CG_EN 
 *     RX_LPI_BLK_SEL   
 *     RX_LPI_START_EN  
 *     RX_LPI_INIT_SEL  
 *     RX_LPI_QR_INIT_SEL 
 *     RX_ALERT_IGNORE  
 *     RX_LPI_VLD_CTL_EN 
 *     RX_LPI_SLEEP_FORCE 
 *     RX_LPI_ALERT_FORCE 
 *     RX_LPI_WAKE_ERR_EN 
 *     RX_ALERT_1BIT_EN 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_CTLr (0x0001a87b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_CTL.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_ctl[1];
	uint32_t _phyc_lpi_rx_ctl;
} BCM84834_PHYC_LPI_RX_CTLr_t;

#define BCM84834_PHYC_LPI_RX_CTLr_CLR(r) (r).phyc_lpi_rx_ctl[0] = 0
#define BCM84834_PHYC_LPI_RX_CTLr_SET(r,d) (r).phyc_lpi_rx_ctl[0] = d
#define BCM84834_PHYC_LPI_RX_CTLr_GET(r) (r).phyc_lpi_rx_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_GET(r) ((((r).phyc_lpi_rx_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_GET(r) (((r).phyc_lpi_rx_ctl[0]) & 0x1)
#define BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_SET(r,f) (r).phyc_lpi_rx_ctl[0]=(((r).phyc_lpi_rx_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LPI_RX_CTL.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_CTLr,(_r._phyc_lpi_rx_ctl))
#define BCM84834_WRITE_PHYC_LPI_RX_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_CTLr,(_r._phyc_lpi_rx_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_CTLr BCM84834_PHYC_LPI_RX_CTLr
#define PHYC_LPI_RX_CTLr_SIZE BCM84834_PHYC_LPI_RX_CTLr_SIZE
typedef BCM84834_PHYC_LPI_RX_CTLr_t PHYC_LPI_RX_CTLr_t;
#define PHYC_LPI_RX_CTLr_CLR BCM84834_PHYC_LPI_RX_CTLr_CLR
#define PHYC_LPI_RX_CTLr_SET BCM84834_PHYC_LPI_RX_CTLr_SET
#define PHYC_LPI_RX_CTLr_GET BCM84834_PHYC_LPI_RX_CTLr_GET
#define PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_1BIT_ENf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_WAKE_ERR_ENf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ALERT_FORCEf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_SLEEP_FORCEf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_VLD_CTL_ENf_SET
#define PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_GET
#define PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_ALERT_IGNOREf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_QR_INIT_SELf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_INIT_SELf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_START_ENf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_BLK_SELf_SET
#define PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LDPC_DEC_CG_ENf_SET
#define PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_GET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_GET
#define PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_SET BCM84834_PHYC_LPI_RX_CTLr_RX_LPI_ADC_CG_ENf_SET
#define READ_PHYC_LPI_RX_CTLr BCM84834_READ_PHYC_LPI_RX_CTLr
#define WRITE_PHYC_LPI_RX_CTLr BCM84834_WRITE_PHYC_LPI_RX_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_TX_CG_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa87c
 * DEVAD:    1
 * DESC:     Low Power Idle Transmit Clock-Gate Valueregister
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_BK_OFF_VAL 
 *     TX_LPI_EXT_VAL   
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_TX_CG_VALr (0x0001a87c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_TX_CG_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_TX_CG_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_TX_CG_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_tx_cg_val[1];
	uint32_t _phyc_lpi_tx_cg_val;
} BCM84834_PHYC_LPI_TX_CG_VALr_t;

#define BCM84834_PHYC_LPI_TX_CG_VALr_CLR(r) (r).phyc_lpi_tx_cg_val[0] = 0
#define BCM84834_PHYC_LPI_TX_CG_VALr_SET(r,d) (r).phyc_lpi_tx_cg_val[0] = d
#define BCM84834_PHYC_LPI_TX_CG_VALr_GET(r) (r).phyc_lpi_tx_cg_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_GET(r) ((((r).phyc_lpi_tx_cg_val[0]) >> 4) & 0x7)
#define BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_SET(r,f) (r).phyc_lpi_tx_cg_val[0]=(((r).phyc_lpi_tx_cg_val[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_GET(r) (((r).phyc_lpi_tx_cg_val[0]) & 0x7)
#define BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_SET(r,f) (r).phyc_lpi_tx_cg_val[0]=(((r).phyc_lpi_tx_cg_val[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PHYC_LPI_TX_CG_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_TX_CG_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_TX_CG_VALr,(_r._phyc_lpi_tx_cg_val))
#define BCM84834_WRITE_PHYC_LPI_TX_CG_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_TX_CG_VALr,(_r._phyc_lpi_tx_cg_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_TX_CG_VALr BCM84834_PHYC_LPI_TX_CG_VALr
#define PHYC_LPI_TX_CG_VALr_SIZE BCM84834_PHYC_LPI_TX_CG_VALr_SIZE
typedef BCM84834_PHYC_LPI_TX_CG_VALr_t PHYC_LPI_TX_CG_VALr_t;
#define PHYC_LPI_TX_CG_VALr_CLR BCM84834_PHYC_LPI_TX_CG_VALr_CLR
#define PHYC_LPI_TX_CG_VALr_SET BCM84834_PHYC_LPI_TX_CG_VALr_SET
#define PHYC_LPI_TX_CG_VALr_GET BCM84834_PHYC_LPI_TX_CG_VALr_GET
#define PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_GET BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_GET
#define PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_SET BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_EXT_VALf_SET
#define PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_GET BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_GET
#define PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_SET BCM84834_PHYC_LPI_TX_CG_VALr_TX_LPI_BK_OFF_VALf_SET
#define READ_PHYC_LPI_TX_CG_VALr BCM84834_READ_PHYC_LPI_TX_CG_VALr
#define WRITE_PHYC_LPI_TX_CG_VALr BCM84834_WRITE_PHYC_LPI_TX_CG_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_TX_CG_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_CG_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa87d
 * DEVAD:    1
 * DESC:     Low Power Idle Receive Clock-Gate Value register
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_BK_OFF_VAL 
 *     RX_LPI_EXT_VAL   
 *     RX_LPI_MIN_QUIET_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_CG_VALr (0x0001a87d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_CG_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_CG_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_CG_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_cg_val[1];
	uint32_t _phyc_lpi_rx_cg_val;
} BCM84834_PHYC_LPI_RX_CG_VALr_t;

#define BCM84834_PHYC_LPI_RX_CG_VALr_CLR(r) (r).phyc_lpi_rx_cg_val[0] = 0
#define BCM84834_PHYC_LPI_RX_CG_VALr_SET(r,d) (r).phyc_lpi_rx_cg_val[0] = d
#define BCM84834_PHYC_LPI_RX_CG_VALr_GET(r) (r).phyc_lpi_rx_cg_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_GET(r) ((((r).phyc_lpi_rx_cg_val[0]) >> 8) & 0xf)
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_SET(r,f) (r).phyc_lpi_rx_cg_val[0]=(((r).phyc_lpi_rx_cg_val[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_GET(r) ((((r).phyc_lpi_rx_cg_val[0]) >> 4) & 0x7)
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_SET(r,f) (r).phyc_lpi_rx_cg_val[0]=(((r).phyc_lpi_rx_cg_val[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_GET(r) (((r).phyc_lpi_rx_cg_val[0]) & 0x7)
#define BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_SET(r,f) (r).phyc_lpi_rx_cg_val[0]=(((r).phyc_lpi_rx_cg_val[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PHYC_LPI_RX_CG_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_CG_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_CG_VALr,(_r._phyc_lpi_rx_cg_val))
#define BCM84834_WRITE_PHYC_LPI_RX_CG_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_CG_VALr,(_r._phyc_lpi_rx_cg_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_CG_VALr BCM84834_PHYC_LPI_RX_CG_VALr
#define PHYC_LPI_RX_CG_VALr_SIZE BCM84834_PHYC_LPI_RX_CG_VALr_SIZE
typedef BCM84834_PHYC_LPI_RX_CG_VALr_t PHYC_LPI_RX_CG_VALr_t;
#define PHYC_LPI_RX_CG_VALr_CLR BCM84834_PHYC_LPI_RX_CG_VALr_CLR
#define PHYC_LPI_RX_CG_VALr_SET BCM84834_PHYC_LPI_RX_CG_VALr_SET
#define PHYC_LPI_RX_CG_VALr_GET BCM84834_PHYC_LPI_RX_CG_VALr_GET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_GET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_GET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_SET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_MIN_QUIET_VALf_SET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_GET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_GET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_SET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_EXT_VALf_SET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_GET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_GET
#define PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_SET BCM84834_PHYC_LPI_RX_CG_VALr_RX_LPI_BK_OFF_VALf_SET
#define READ_PHYC_LPI_RX_CG_VALr BCM84834_READ_PHYC_LPI_RX_CG_VALr
#define WRITE_PHYC_LPI_RX_CG_VALr BCM84834_WRITE_PHYC_LPI_RX_CG_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_CG_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_DSP_CG_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa87e
 * DEVAD:    1
 * DESC:     Low Power Idle DSP Clock-Gate Values register
 * SIZE:     32
 * FIELDS:
 *     FFT_LPI_BK_OFF_VAL 
 *     ENC_LPI_EXT_VAL  
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_DSP_CG_VALr (0x0001a87e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_DSP_CG_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_DSP_CG_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_DSP_CG_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_dsp_cg_val[1];
	uint32_t _phyc_lpi_dsp_cg_val;
} BCM84834_PHYC_LPI_DSP_CG_VALr_t;

#define BCM84834_PHYC_LPI_DSP_CG_VALr_CLR(r) (r).phyc_lpi_dsp_cg_val[0] = 0
#define BCM84834_PHYC_LPI_DSP_CG_VALr_SET(r,d) (r).phyc_lpi_dsp_cg_val[0] = d
#define BCM84834_PHYC_LPI_DSP_CG_VALr_GET(r) (r).phyc_lpi_dsp_cg_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_GET(r) ((((r).phyc_lpi_dsp_cg_val[0]) >> 4) & 0x7)
#define BCM84834_PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_SET(r,f) (r).phyc_lpi_dsp_cg_val[0]=(((r).phyc_lpi_dsp_cg_val[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_GET(r) (((r).phyc_lpi_dsp_cg_val[0]) & 0x7)
#define BCM84834_PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_SET(r,f) (r).phyc_lpi_dsp_cg_val[0]=(((r).phyc_lpi_dsp_cg_val[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PHYC_LPI_DSP_CG_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_DSP_CG_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_DSP_CG_VALr,(_r._phyc_lpi_dsp_cg_val))
#define BCM84834_WRITE_PHYC_LPI_DSP_CG_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_DSP_CG_VALr,(_r._phyc_lpi_dsp_cg_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_DSP_CG_VALr BCM84834_PHYC_LPI_DSP_CG_VALr
#define PHYC_LPI_DSP_CG_VALr_SIZE BCM84834_PHYC_LPI_DSP_CG_VALr_SIZE
typedef BCM84834_PHYC_LPI_DSP_CG_VALr_t PHYC_LPI_DSP_CG_VALr_t;
#define PHYC_LPI_DSP_CG_VALr_CLR BCM84834_PHYC_LPI_DSP_CG_VALr_CLR
#define PHYC_LPI_DSP_CG_VALr_SET BCM84834_PHYC_LPI_DSP_CG_VALr_SET
#define PHYC_LPI_DSP_CG_VALr_GET BCM84834_PHYC_LPI_DSP_CG_VALr_GET
#define PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_GET BCM84834_PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_GET
#define PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_SET BCM84834_PHYC_LPI_DSP_CG_VALr_ENC_LPI_EXT_VALf_SET
#define PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_GET BCM84834_PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_GET
#define PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_SET BCM84834_PHYC_LPI_DSP_CG_VALr_FFT_LPI_BK_OFF_VALf_SET
#define READ_PHYC_LPI_DSP_CG_VALr BCM84834_READ_PHYC_LPI_DSP_CG_VALr
#define WRITE_PHYC_LPI_DSP_CG_VALr BCM84834_WRITE_PHYC_LPI_DSP_CG_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_DSP_CG_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_LAT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa880
 * DEVAD:    1
 * DESC:     Low Power Idle Receive Latency register
 * SIZE:     32
 * FIELDS:
 *     RX_ALERT_WAKE_LAT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_LATr (0x0001a880 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_LATr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_LAT.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_LATr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_lat[1];
	uint32_t _phyc_lpi_rx_lat;
} BCM84834_PHYC_LPI_RX_LATr_t;

#define BCM84834_PHYC_LPI_RX_LATr_CLR(r) (r).phyc_lpi_rx_lat[0] = 0
#define BCM84834_PHYC_LPI_RX_LATr_SET(r,d) (r).phyc_lpi_rx_lat[0] = d
#define BCM84834_PHYC_LPI_RX_LATr_GET(r) (r).phyc_lpi_rx_lat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_GET(r) ((((r).phyc_lpi_rx_lat[0]) >> 12) & 0x7)
#define BCM84834_PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_SET(r,f) (r).phyc_lpi_rx_lat[0]=(((r).phyc_lpi_rx_lat[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))

/*
 * These macros can be used to access PHYC_LPI_RX_LAT.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_LATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_LATr,(_r._phyc_lpi_rx_lat))
#define BCM84834_WRITE_PHYC_LPI_RX_LATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_LATr,(_r._phyc_lpi_rx_lat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_LATr BCM84834_PHYC_LPI_RX_LATr
#define PHYC_LPI_RX_LATr_SIZE BCM84834_PHYC_LPI_RX_LATr_SIZE
typedef BCM84834_PHYC_LPI_RX_LATr_t PHYC_LPI_RX_LATr_t;
#define PHYC_LPI_RX_LATr_CLR BCM84834_PHYC_LPI_RX_LATr_CLR
#define PHYC_LPI_RX_LATr_SET BCM84834_PHYC_LPI_RX_LATr_SET
#define PHYC_LPI_RX_LATr_GET BCM84834_PHYC_LPI_RX_LATr_GET
#define PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_GET BCM84834_PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_GET
#define PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_SET BCM84834_PHYC_LPI_RX_LATr_RX_ALERT_WAKE_LATf_SET
#define READ_PHYC_LPI_RX_LATr BCM84834_READ_PHYC_LPI_RX_LATr
#define WRITE_PHYC_LPI_RX_LATr BCM84834_WRITE_PHYC_LPI_RX_LATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_LATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_DSP_LAT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa881
 * DEVAD:    1
 * DESC:     Low Power Idle DSP Latency register
 * SIZE:     32
 * FIELDS:
 *     ENC_LPI_REFRESH_LAT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_DSP_LATr (0x0001a881 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_DSP_LATr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_DSP_LAT.
 *
 */
typedef union BCM84834_PHYC_LPI_DSP_LATr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_dsp_lat[1];
	uint32_t _phyc_lpi_dsp_lat;
} BCM84834_PHYC_LPI_DSP_LATr_t;

#define BCM84834_PHYC_LPI_DSP_LATr_CLR(r) (r).phyc_lpi_dsp_lat[0] = 0
#define BCM84834_PHYC_LPI_DSP_LATr_SET(r,d) (r).phyc_lpi_dsp_lat[0] = d
#define BCM84834_PHYC_LPI_DSP_LATr_GET(r) (r).phyc_lpi_dsp_lat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_GET(r) (((r).phyc_lpi_dsp_lat[0]) & 0x7)
#define BCM84834_PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_SET(r,f) (r).phyc_lpi_dsp_lat[0]=(((r).phyc_lpi_dsp_lat[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PHYC_LPI_DSP_LAT.
 *
 */
#define BCM84834_READ_PHYC_LPI_DSP_LATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_DSP_LATr,(_r._phyc_lpi_dsp_lat))
#define BCM84834_WRITE_PHYC_LPI_DSP_LATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_DSP_LATr,(_r._phyc_lpi_dsp_lat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_DSP_LATr BCM84834_PHYC_LPI_DSP_LATr
#define PHYC_LPI_DSP_LATr_SIZE BCM84834_PHYC_LPI_DSP_LATr_SIZE
typedef BCM84834_PHYC_LPI_DSP_LATr_t PHYC_LPI_DSP_LATr_t;
#define PHYC_LPI_DSP_LATr_CLR BCM84834_PHYC_LPI_DSP_LATr_CLR
#define PHYC_LPI_DSP_LATr_SET BCM84834_PHYC_LPI_DSP_LATr_SET
#define PHYC_LPI_DSP_LATr_GET BCM84834_PHYC_LPI_DSP_LATr_GET
#define PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_GET BCM84834_PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_GET
#define PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_SET BCM84834_PHYC_LPI_DSP_LATr_ENC_LPI_REFRESH_LATf_SET
#define READ_PHYC_LPI_DSP_LATr BCM84834_READ_PHYC_LPI_DSP_LATr
#define WRITE_PHYC_LPI_DSP_LATr BCM84834_WRITE_PHYC_LPI_DSP_LATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_DSP_LATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_PHCTL_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa882
 * DEVAD:    1
 * DESC:     Low Power Idle Phase Control
 * SIZE:     32
 * FIELDS:
 *     PHCTL_REFRESH_TRUNC_EN 
 *     PHCTL_REFRESH_DLY 
 *     PHCTL_LPI_FRZ_EXT_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_PHCTL_CTLr (0x0001a882 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_PHCTL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_PHCTL_CTL.
 *
 */
typedef union BCM84834_PHYC_LPI_PHCTL_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_phctl_ctl[1];
	uint32_t _phyc_lpi_phctl_ctl;
} BCM84834_PHYC_LPI_PHCTL_CTLr_t;

#define BCM84834_PHYC_LPI_PHCTL_CTLr_CLR(r) (r).phyc_lpi_phctl_ctl[0] = 0
#define BCM84834_PHYC_LPI_PHCTL_CTLr_SET(r,d) (r).phyc_lpi_phctl_ctl[0] = d
#define BCM84834_PHYC_LPI_PHCTL_CTLr_GET(r) (r).phyc_lpi_phctl_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_GET(r) ((((r).phyc_lpi_phctl_ctl[0]) >> 4) & 0x3)
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_SET(r,f) (r).phyc_lpi_phctl_ctl[0]=(((r).phyc_lpi_phctl_ctl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_GET(r) ((((r).phyc_lpi_phctl_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_SET(r,f) (r).phyc_lpi_phctl_ctl[0]=(((r).phyc_lpi_phctl_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_GET(r) (((r).phyc_lpi_phctl_ctl[0]) & 0x1)
#define BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_SET(r,f) (r).phyc_lpi_phctl_ctl[0]=(((r).phyc_lpi_phctl_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LPI_PHCTL_CTL.
 *
 */
#define BCM84834_READ_PHYC_LPI_PHCTL_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_PHCTL_CTLr,(_r._phyc_lpi_phctl_ctl))
#define BCM84834_WRITE_PHYC_LPI_PHCTL_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_PHCTL_CTLr,(_r._phyc_lpi_phctl_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_PHCTL_CTLr BCM84834_PHYC_LPI_PHCTL_CTLr
#define PHYC_LPI_PHCTL_CTLr_SIZE BCM84834_PHYC_LPI_PHCTL_CTLr_SIZE
typedef BCM84834_PHYC_LPI_PHCTL_CTLr_t PHYC_LPI_PHCTL_CTLr_t;
#define PHYC_LPI_PHCTL_CTLr_CLR BCM84834_PHYC_LPI_PHCTL_CTLr_CLR
#define PHYC_LPI_PHCTL_CTLr_SET BCM84834_PHYC_LPI_PHCTL_CTLr_SET
#define PHYC_LPI_PHCTL_CTLr_GET BCM84834_PHYC_LPI_PHCTL_CTLr_GET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_GET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_GET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_SET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_LPI_FRZ_EXT_VALf_SET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_GET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_GET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_SET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_DLYf_SET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_GET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_GET
#define PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_SET BCM84834_PHYC_LPI_PHCTL_CTLr_PHCTL_REFRESH_TRUNC_ENf_SET
#define READ_PHYC_LPI_PHCTL_CTLr BCM84834_READ_PHYC_LPI_PHCTL_CTLr
#define WRITE_PHYC_LPI_PHCTL_CTLr BCM84834_WRITE_PHYC_LPI_PHCTL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_PHCTL_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_QUIET_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa883
 * DEVAD:    1
 * DESC:     Low Power Idle Quiet Value register
 * SIZE:     32
 * FIELDS:
 *     QUIET_VAL        
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_QUIET_VALr (0x0001a883 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_QUIET_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_QUIET_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_QUIET_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_quiet_val[1];
	uint32_t _phyc_lpi_quiet_val;
} BCM84834_PHYC_LPI_QUIET_VALr_t;

#define BCM84834_PHYC_LPI_QUIET_VALr_CLR(r) (r).phyc_lpi_quiet_val[0] = 0
#define BCM84834_PHYC_LPI_QUIET_VALr_SET(r,d) (r).phyc_lpi_quiet_val[0] = d
#define BCM84834_PHYC_LPI_QUIET_VALr_GET(r) (r).phyc_lpi_quiet_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_QUIET_VALr_QUIET_VALf_GET(r) (((r).phyc_lpi_quiet_val[0]) & 0xff)
#define BCM84834_PHYC_LPI_QUIET_VALr_QUIET_VALf_SET(r,f) (r).phyc_lpi_quiet_val[0]=(((r).phyc_lpi_quiet_val[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_LPI_QUIET_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_QUIET_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_QUIET_VALr,(_r._phyc_lpi_quiet_val))
#define BCM84834_WRITE_PHYC_LPI_QUIET_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_QUIET_VALr,(_r._phyc_lpi_quiet_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_QUIET_VALr BCM84834_PHYC_LPI_QUIET_VALr
#define PHYC_LPI_QUIET_VALr_SIZE BCM84834_PHYC_LPI_QUIET_VALr_SIZE
typedef BCM84834_PHYC_LPI_QUIET_VALr_t PHYC_LPI_QUIET_VALr_t;
#define PHYC_LPI_QUIET_VALr_CLR BCM84834_PHYC_LPI_QUIET_VALr_CLR
#define PHYC_LPI_QUIET_VALr_SET BCM84834_PHYC_LPI_QUIET_VALr_SET
#define PHYC_LPI_QUIET_VALr_GET BCM84834_PHYC_LPI_QUIET_VALr_GET
#define PHYC_LPI_QUIET_VALr_QUIET_VALf_GET BCM84834_PHYC_LPI_QUIET_VALr_QUIET_VALf_GET
#define PHYC_LPI_QUIET_VALr_QUIET_VALf_SET BCM84834_PHYC_LPI_QUIET_VALr_QUIET_VALf_SET
#define READ_PHYC_LPI_QUIET_VALr BCM84834_READ_PHYC_LPI_QUIET_VALr
#define WRITE_PHYC_LPI_QUIET_VALr BCM84834_WRITE_PHYC_LPI_QUIET_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_QUIET_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_REF_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa884
 * DEVAD:    1
 * DESC:     Low Power Idle Refresh Value register
 * SIZE:     32
 * FIELDS:
 *     REFRESH_VAL      
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_REF_VALr (0x0001a884 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_REF_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_REF_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_REF_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_ref_val[1];
	uint32_t _phyc_lpi_ref_val;
} BCM84834_PHYC_LPI_REF_VALr_t;

#define BCM84834_PHYC_LPI_REF_VALr_CLR(r) (r).phyc_lpi_ref_val[0] = 0
#define BCM84834_PHYC_LPI_REF_VALr_SET(r,d) (r).phyc_lpi_ref_val[0] = d
#define BCM84834_PHYC_LPI_REF_VALr_GET(r) (r).phyc_lpi_ref_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_REF_VALr_REFRESH_VALf_GET(r) (((r).phyc_lpi_ref_val[0]) & 0x3f)
#define BCM84834_PHYC_LPI_REF_VALr_REFRESH_VALf_SET(r,f) (r).phyc_lpi_ref_val[0]=(((r).phyc_lpi_ref_val[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_LPI_REF_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_REF_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_REF_VALr,(_r._phyc_lpi_ref_val))
#define BCM84834_WRITE_PHYC_LPI_REF_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_REF_VALr,(_r._phyc_lpi_ref_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_REF_VALr BCM84834_PHYC_LPI_REF_VALr
#define PHYC_LPI_REF_VALr_SIZE BCM84834_PHYC_LPI_REF_VALr_SIZE
typedef BCM84834_PHYC_LPI_REF_VALr_t PHYC_LPI_REF_VALr_t;
#define PHYC_LPI_REF_VALr_CLR BCM84834_PHYC_LPI_REF_VALr_CLR
#define PHYC_LPI_REF_VALr_SET BCM84834_PHYC_LPI_REF_VALr_SET
#define PHYC_LPI_REF_VALr_GET BCM84834_PHYC_LPI_REF_VALr_GET
#define PHYC_LPI_REF_VALr_REFRESH_VALf_GET BCM84834_PHYC_LPI_REF_VALr_REFRESH_VALf_GET
#define PHYC_LPI_REF_VALr_REFRESH_VALf_SET BCM84834_PHYC_LPI_REF_VALr_REFRESH_VALf_SET
#define READ_PHYC_LPI_REF_VALr BCM84834_READ_PHYC_LPI_REF_VALr
#define WRITE_PHYC_LPI_REF_VALr BCM84834_WRITE_PHYC_LPI_REF_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_REF_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_WAKE_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa885
 * DEVAD:    1
 * DESC:     Low Power Idle Wake Value register
 * SIZE:     32
 * FIELDS:
 *     TX_WAKE_VAL      
 *     RX_WAKE_VAL      
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_WAKE_VALr (0x0001a885 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_WAKE_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_WAKE_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_WAKE_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_wake_val[1];
	uint32_t _phyc_lpi_wake_val;
} BCM84834_PHYC_LPI_WAKE_VALr_t;

#define BCM84834_PHYC_LPI_WAKE_VALr_CLR(r) (r).phyc_lpi_wake_val[0] = 0
#define BCM84834_PHYC_LPI_WAKE_VALr_SET(r,d) (r).phyc_lpi_wake_val[0] = d
#define BCM84834_PHYC_LPI_WAKE_VALr_GET(r) (r).phyc_lpi_wake_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_GET(r) ((((r).phyc_lpi_wake_val[0]) >> 4) & 0xf)
#define BCM84834_PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_SET(r,f) (r).phyc_lpi_wake_val[0]=(((r).phyc_lpi_wake_val[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_GET(r) (((r).phyc_lpi_wake_val[0]) & 0xf)
#define BCM84834_PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_SET(r,f) (r).phyc_lpi_wake_val[0]=(((r).phyc_lpi_wake_val[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_LPI_WAKE_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_WAKE_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_WAKE_VALr,(_r._phyc_lpi_wake_val))
#define BCM84834_WRITE_PHYC_LPI_WAKE_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_WAKE_VALr,(_r._phyc_lpi_wake_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_WAKE_VALr BCM84834_PHYC_LPI_WAKE_VALr
#define PHYC_LPI_WAKE_VALr_SIZE BCM84834_PHYC_LPI_WAKE_VALr_SIZE
typedef BCM84834_PHYC_LPI_WAKE_VALr_t PHYC_LPI_WAKE_VALr_t;
#define PHYC_LPI_WAKE_VALr_CLR BCM84834_PHYC_LPI_WAKE_VALr_CLR
#define PHYC_LPI_WAKE_VALr_SET BCM84834_PHYC_LPI_WAKE_VALr_SET
#define PHYC_LPI_WAKE_VALr_GET BCM84834_PHYC_LPI_WAKE_VALr_GET
#define PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_GET BCM84834_PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_GET
#define PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_SET BCM84834_PHYC_LPI_WAKE_VALr_RX_WAKE_VALf_SET
#define PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_GET BCM84834_PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_GET
#define PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_SET BCM84834_PHYC_LPI_WAKE_VALr_TX_WAKE_VALf_SET
#define READ_PHYC_LPI_WAKE_VALr BCM84834_READ_PHYC_LPI_WAKE_VALr
#define WRITE_PHYC_LPI_WAKE_VALr BCM84834_WRITE_PHYC_LPI_WAKE_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_WAKE_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_TX_QR_INIT_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa886
 * DEVAD:    1
 * DESC:     Low Power Idle Quiet Value register
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_QR_INIT_VAL 
 *     TX_LPI_QR_INIT_MODE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr (0x0001a886 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_TX_QR_INIT_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_TX_QR_INIT_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_tx_qr_init_val[1];
	uint32_t _phyc_lpi_tx_qr_init_val;
} BCM84834_PHYC_LPI_TX_QR_INIT_VALr_t;

#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_CLR(r) (r).phyc_lpi_tx_qr_init_val[0] = 0
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_SET(r,d) (r).phyc_lpi_tx_qr_init_val[0] = d
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_GET(r) (r).phyc_lpi_tx_qr_init_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_GET(r) ((((r).phyc_lpi_tx_qr_init_val[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_SET(r,f) (r).phyc_lpi_tx_qr_init_val[0]=(((r).phyc_lpi_tx_qr_init_val[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_GET(r) (((r).phyc_lpi_tx_qr_init_val[0]) & 0xff)
#define BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_SET(r,f) (r).phyc_lpi_tx_qr_init_val[0]=(((r).phyc_lpi_tx_qr_init_val[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_LPI_TX_QR_INIT_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_TX_QR_INIT_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_TX_QR_INIT_VALr,(_r._phyc_lpi_tx_qr_init_val))
#define BCM84834_WRITE_PHYC_LPI_TX_QR_INIT_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_TX_QR_INIT_VALr,(_r._phyc_lpi_tx_qr_init_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_TX_QR_INIT_VALr BCM84834_PHYC_LPI_TX_QR_INIT_VALr
#define PHYC_LPI_TX_QR_INIT_VALr_SIZE BCM84834_PHYC_LPI_TX_QR_INIT_VALr_SIZE
typedef BCM84834_PHYC_LPI_TX_QR_INIT_VALr_t PHYC_LPI_TX_QR_INIT_VALr_t;
#define PHYC_LPI_TX_QR_INIT_VALr_CLR BCM84834_PHYC_LPI_TX_QR_INIT_VALr_CLR
#define PHYC_LPI_TX_QR_INIT_VALr_SET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_SET
#define PHYC_LPI_TX_QR_INIT_VALr_GET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_GET
#define PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_GET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_GET
#define PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_SET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_MODEf_SET
#define PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_GET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_GET
#define PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_SET BCM84834_PHYC_LPI_TX_QR_INIT_VALr_TX_LPI_QR_INIT_VALf_SET
#define READ_PHYC_LPI_TX_QR_INIT_VALr BCM84834_READ_PHYC_LPI_TX_QR_INIT_VALr
#define WRITE_PHYC_LPI_TX_QR_INIT_VALr BCM84834_WRITE_PHYC_LPI_TX_QR_INIT_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_TX_QR_INIT_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_RX_QR_INIT_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa887
 * DEVAD:    1
 * DESC:     Low Power Idle Quiet Value register
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_QR_INIT_VAL 
 *     RX_LPI_QR_INIT_MODE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr (0x0001a887 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_RX_QR_INIT_VAL.
 *
 */
typedef union BCM84834_PHYC_LPI_RX_QR_INIT_VALr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_rx_qr_init_val[1];
	uint32_t _phyc_lpi_rx_qr_init_val;
} BCM84834_PHYC_LPI_RX_QR_INIT_VALr_t;

#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_CLR(r) (r).phyc_lpi_rx_qr_init_val[0] = 0
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_SET(r,d) (r).phyc_lpi_rx_qr_init_val[0] = d
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_GET(r) (r).phyc_lpi_rx_qr_init_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_GET(r) ((((r).phyc_lpi_rx_qr_init_val[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_SET(r,f) (r).phyc_lpi_rx_qr_init_val[0]=(((r).phyc_lpi_rx_qr_init_val[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_GET(r) (((r).phyc_lpi_rx_qr_init_val[0]) & 0xff)
#define BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_SET(r,f) (r).phyc_lpi_rx_qr_init_val[0]=(((r).phyc_lpi_rx_qr_init_val[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_LPI_RX_QR_INIT_VAL.
 *
 */
#define BCM84834_READ_PHYC_LPI_RX_QR_INIT_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_RX_QR_INIT_VALr,(_r._phyc_lpi_rx_qr_init_val))
#define BCM84834_WRITE_PHYC_LPI_RX_QR_INIT_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_RX_QR_INIT_VALr,(_r._phyc_lpi_rx_qr_init_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_RX_QR_INIT_VALr BCM84834_PHYC_LPI_RX_QR_INIT_VALr
#define PHYC_LPI_RX_QR_INIT_VALr_SIZE BCM84834_PHYC_LPI_RX_QR_INIT_VALr_SIZE
typedef BCM84834_PHYC_LPI_RX_QR_INIT_VALr_t PHYC_LPI_RX_QR_INIT_VALr_t;
#define PHYC_LPI_RX_QR_INIT_VALr_CLR BCM84834_PHYC_LPI_RX_QR_INIT_VALr_CLR
#define PHYC_LPI_RX_QR_INIT_VALr_SET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_SET
#define PHYC_LPI_RX_QR_INIT_VALr_GET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_GET
#define PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_GET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_GET
#define PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_SET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_MODEf_SET
#define PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_GET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_GET
#define PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_SET BCM84834_PHYC_LPI_RX_QR_INIT_VALr_RX_LPI_QR_INIT_VALf_SET
#define READ_PHYC_LPI_RX_QR_INIT_VALr BCM84834_READ_PHYC_LPI_RX_QR_INIT_VALr
#define WRITE_PHYC_LPI_RX_QR_INIT_VALr BCM84834_WRITE_PHYC_LPI_RX_QR_INIT_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_RX_QR_INIT_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_10G_CTL_CODE
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa888
 * DEVAD:    1
 * DESC:     Low Power Idle 10GBASE-T Control Coderegister
 * SIZE:     32
 * FIELDS:
 *     LPI_10G_CTL_CODE_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_10G_CTL_CODEr (0x0001a888 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_10G_CTL_CODEr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_10G_CTL_CODE.
 *
 */
typedef union BCM84834_PHYC_LPI_10G_CTL_CODEr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_10g_ctl_code[1];
	uint32_t _phyc_lpi_10g_ctl_code;
} BCM84834_PHYC_LPI_10G_CTL_CODEr_t;

#define BCM84834_PHYC_LPI_10G_CTL_CODEr_CLR(r) (r).phyc_lpi_10g_ctl_code[0] = 0
#define BCM84834_PHYC_LPI_10G_CTL_CODEr_SET(r,d) (r).phyc_lpi_10g_ctl_code[0] = d
#define BCM84834_PHYC_LPI_10G_CTL_CODEr_GET(r) (r).phyc_lpi_10g_ctl_code[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_GET(r) (((r).phyc_lpi_10g_ctl_code[0]) & 0x7f)
#define BCM84834_PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_SET(r,f) (r).phyc_lpi_10g_ctl_code[0]=(((r).phyc_lpi_10g_ctl_code[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access PHYC_LPI_10G_CTL_CODE.
 *
 */
#define BCM84834_READ_PHYC_LPI_10G_CTL_CODEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_10G_CTL_CODEr,(_r._phyc_lpi_10g_ctl_code))
#define BCM84834_WRITE_PHYC_LPI_10G_CTL_CODEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_10G_CTL_CODEr,(_r._phyc_lpi_10g_ctl_code))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_10G_CTL_CODEr BCM84834_PHYC_LPI_10G_CTL_CODEr
#define PHYC_LPI_10G_CTL_CODEr_SIZE BCM84834_PHYC_LPI_10G_CTL_CODEr_SIZE
typedef BCM84834_PHYC_LPI_10G_CTL_CODEr_t PHYC_LPI_10G_CTL_CODEr_t;
#define PHYC_LPI_10G_CTL_CODEr_CLR BCM84834_PHYC_LPI_10G_CTL_CODEr_CLR
#define PHYC_LPI_10G_CTL_CODEr_SET BCM84834_PHYC_LPI_10G_CTL_CODEr_SET
#define PHYC_LPI_10G_CTL_CODEr_GET BCM84834_PHYC_LPI_10G_CTL_CODEr_GET
#define PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_GET BCM84834_PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_GET
#define PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_SET BCM84834_PHYC_LPI_10G_CTL_CODEr_LPI_10G_CTL_CODE_VALf_SET
#define READ_PHYC_LPI_10G_CTL_CODEr BCM84834_READ_PHYC_LPI_10G_CTL_CODEr
#define WRITE_PHYC_LPI_10G_CTL_CODEr BCM84834_WRITE_PHYC_LPI_10G_CTL_CODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_10G_CTL_CODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_LP_ADV_RW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa889
 * DEVAD:    1
 * DESC:     EEE Link Partner Advertisement Read/riteregister
 * SIZE:     32
 * FIELDS:
 *     LP_100BASE_TX_EEE 
 *     LP_1000BASE_TX_EEE 
 *     LP_10GBASE_T_EEE 
 *     LP_1000BASE_KX_EEE 
 *     LP_10GBASE_KX4_EEE 
 *     LP_10GBASE_KR_EEE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_LP_ADV_RWr (0x0001a889 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_LP_ADV_RWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_LP_ADV_RW.
 *
 */
typedef union BCM84834_PHYC_EEE_LP_ADV_RWr_s {
	uint32_t v[1];
	uint32_t phyc_eee_lp_adv_rw[1];
	uint32_t _phyc_eee_lp_adv_rw;
} BCM84834_PHYC_EEE_LP_ADV_RWr_t;

#define BCM84834_PHYC_EEE_LP_ADV_RWr_CLR(r) (r).phyc_eee_lp_adv_rw[0] = 0
#define BCM84834_PHYC_EEE_LP_ADV_RWr_SET(r,d) (r).phyc_eee_lp_adv_rw[0] = d
#define BCM84834_PHYC_EEE_LP_ADV_RWr_GET(r) (r).phyc_eee_lp_adv_rw[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 6) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 5) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 4) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 3) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 2) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_GET(r) ((((r).phyc_eee_lp_adv_rw[0]) >> 1) & 0x1)
#define BCM84834_PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_SET(r,f) (r).phyc_eee_lp_adv_rw[0]=(((r).phyc_eee_lp_adv_rw[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access PHYC_EEE_LP_ADV_RW.
 *
 */
#define BCM84834_READ_PHYC_EEE_LP_ADV_RWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_LP_ADV_RWr,(_r._phyc_eee_lp_adv_rw))
#define BCM84834_WRITE_PHYC_EEE_LP_ADV_RWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_LP_ADV_RWr,(_r._phyc_eee_lp_adv_rw))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_LP_ADV_RWr BCM84834_PHYC_EEE_LP_ADV_RWr
#define PHYC_EEE_LP_ADV_RWr_SIZE BCM84834_PHYC_EEE_LP_ADV_RWr_SIZE
typedef BCM84834_PHYC_EEE_LP_ADV_RWr_t PHYC_EEE_LP_ADV_RWr_t;
#define PHYC_EEE_LP_ADV_RWr_CLR BCM84834_PHYC_EEE_LP_ADV_RWr_CLR
#define PHYC_EEE_LP_ADV_RWr_SET BCM84834_PHYC_EEE_LP_ADV_RWr_SET
#define PHYC_EEE_LP_ADV_RWr_GET BCM84834_PHYC_EEE_LP_ADV_RWr_GET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KR_EEEf_SET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_KX4_EEEf_SET
#define PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_KX_EEEf_SET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_10GBASE_T_EEEf_SET
#define PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_1000BASE_TX_EEEf_SET
#define PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_GET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_GET
#define PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_SET BCM84834_PHYC_EEE_LP_ADV_RWr_LP_100BASE_TX_EEEf_SET
#define READ_PHYC_EEE_LP_ADV_RWr BCM84834_READ_PHYC_EEE_LP_ADV_RWr
#define WRITE_PHYC_EEE_LP_ADV_RWr BCM84834_WRITE_PHYC_EEE_LP_ADV_RWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_LP_ADV_RWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_AI_LPI_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88a
 * DEVAD:    1
 * DESC:     Auto-Initiated Low Power Idle Control register
 * SIZE:     32
 * FIELDS:
 *     TX_AI_EN         
 *     TX_AI_LPI_EN     
 *     TX_AI_LAT_MODE   
 *     TX_AI_RST        
 *     RX_AI_LPI_EN     
 *
 ******************************************************************************/
#define BCM84834_PHYC_AI_LPI_CTLr (0x0001a88a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_AI_LPI_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_AI_LPI_CTL.
 *
 */
typedef union BCM84834_PHYC_AI_LPI_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_ai_lpi_ctl[1];
	uint32_t _phyc_ai_lpi_ctl;
} BCM84834_PHYC_AI_LPI_CTLr_t;

#define BCM84834_PHYC_AI_LPI_CTLr_CLR(r) (r).phyc_ai_lpi_ctl[0] = 0
#define BCM84834_PHYC_AI_LPI_CTLr_SET(r,d) (r).phyc_ai_lpi_ctl[0] = d
#define BCM84834_PHYC_AI_LPI_CTLr_GET(r) (r).phyc_ai_lpi_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_GET(r) ((((r).phyc_ai_lpi_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_SET(r,f) (r).phyc_ai_lpi_ctl[0]=(((r).phyc_ai_lpi_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_RSTf_GET(r) ((((r).phyc_ai_lpi_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_RSTf_SET(r,f) (r).phyc_ai_lpi_ctl[0]=(((r).phyc_ai_lpi_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_GET(r) ((((r).phyc_ai_lpi_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_SET(r,f) (r).phyc_ai_lpi_ctl[0]=(((r).phyc_ai_lpi_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_GET(r) ((((r).phyc_ai_lpi_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_SET(r,f) (r).phyc_ai_lpi_ctl[0]=(((r).phyc_ai_lpi_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_ENf_GET(r) (((r).phyc_ai_lpi_ctl[0]) & 0x1)
#define BCM84834_PHYC_AI_LPI_CTLr_TX_AI_ENf_SET(r,f) (r).phyc_ai_lpi_ctl[0]=(((r).phyc_ai_lpi_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_AI_LPI_CTL.
 *
 */
#define BCM84834_READ_PHYC_AI_LPI_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_AI_LPI_CTLr,(_r._phyc_ai_lpi_ctl))
#define BCM84834_WRITE_PHYC_AI_LPI_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_AI_LPI_CTLr,(_r._phyc_ai_lpi_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_AI_LPI_CTLr BCM84834_PHYC_AI_LPI_CTLr
#define PHYC_AI_LPI_CTLr_SIZE BCM84834_PHYC_AI_LPI_CTLr_SIZE
typedef BCM84834_PHYC_AI_LPI_CTLr_t PHYC_AI_LPI_CTLr_t;
#define PHYC_AI_LPI_CTLr_CLR BCM84834_PHYC_AI_LPI_CTLr_CLR
#define PHYC_AI_LPI_CTLr_SET BCM84834_PHYC_AI_LPI_CTLr_SET
#define PHYC_AI_LPI_CTLr_GET BCM84834_PHYC_AI_LPI_CTLr_GET
#define PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_GET BCM84834_PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_GET
#define PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_SET BCM84834_PHYC_AI_LPI_CTLr_RX_AI_LPI_ENf_SET
#define PHYC_AI_LPI_CTLr_TX_AI_RSTf_GET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_RSTf_GET
#define PHYC_AI_LPI_CTLr_TX_AI_RSTf_SET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_RSTf_SET
#define PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_GET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_GET
#define PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_SET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LAT_MODEf_SET
#define PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_GET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_GET
#define PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_SET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_LPI_ENf_SET
#define PHYC_AI_LPI_CTLr_TX_AI_ENf_GET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_ENf_GET
#define PHYC_AI_LPI_CTLr_TX_AI_ENf_SET BCM84834_PHYC_AI_LPI_CTLr_TX_AI_ENf_SET
#define READ_PHYC_AI_LPI_CTLr BCM84834_READ_PHYC_AI_LPI_CTLr
#define WRITE_PHYC_AI_LPI_CTLr BCM84834_WRITE_PHYC_AI_LPI_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_AI_LPI_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_AI_LPI_STAT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88b
 * DEVAD:    1
 * DESC:     Auto-Initiated Low Power Idle Status register
 * SIZE:     32
 * FIELDS:
 *     TX_AI_FSM_ACTIVE 
 *     TX_AI_LAT_MODE_STAT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_AI_LPI_STATr (0x0001a88b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_AI_LPI_STATr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_AI_LPI_STAT.
 *
 */
typedef union BCM84834_PHYC_AI_LPI_STATr_s {
	uint32_t v[1];
	uint32_t phyc_ai_lpi_stat[1];
	uint32_t _phyc_ai_lpi_stat;
} BCM84834_PHYC_AI_LPI_STATr_t;

#define BCM84834_PHYC_AI_LPI_STATr_CLR(r) (r).phyc_ai_lpi_stat[0] = 0
#define BCM84834_PHYC_AI_LPI_STATr_SET(r,d) (r).phyc_ai_lpi_stat[0] = d
#define BCM84834_PHYC_AI_LPI_STATr_GET(r) (r).phyc_ai_lpi_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_GET(r) ((((r).phyc_ai_lpi_stat[0]) >> 2) & 0x1)
#define BCM84834_PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_SET(r,f) (r).phyc_ai_lpi_stat[0]=(((r).phyc_ai_lpi_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_GET(r) ((((r).phyc_ai_lpi_stat[0]) >> 1) & 0x1)
#define BCM84834_PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_SET(r,f) (r).phyc_ai_lpi_stat[0]=(((r).phyc_ai_lpi_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access PHYC_AI_LPI_STAT.
 *
 */
#define BCM84834_READ_PHYC_AI_LPI_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_AI_LPI_STATr,(_r._phyc_ai_lpi_stat))
#define BCM84834_WRITE_PHYC_AI_LPI_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_AI_LPI_STATr,(_r._phyc_ai_lpi_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_AI_LPI_STATr BCM84834_PHYC_AI_LPI_STATr
#define PHYC_AI_LPI_STATr_SIZE BCM84834_PHYC_AI_LPI_STATr_SIZE
typedef BCM84834_PHYC_AI_LPI_STATr_t PHYC_AI_LPI_STATr_t;
#define PHYC_AI_LPI_STATr_CLR BCM84834_PHYC_AI_LPI_STATr_CLR
#define PHYC_AI_LPI_STATr_SET BCM84834_PHYC_AI_LPI_STATr_SET
#define PHYC_AI_LPI_STATr_GET BCM84834_PHYC_AI_LPI_STATr_GET
#define PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_GET BCM84834_PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_GET
#define PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_SET BCM84834_PHYC_AI_LPI_STATr_TX_AI_LAT_MODE_STATf_SET
#define PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_GET BCM84834_PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_GET
#define PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_SET BCM84834_PHYC_AI_LPI_STATr_TX_AI_FSM_ACTIVEf_SET
#define READ_PHYC_AI_LPI_STATr BCM84834_READ_PHYC_AI_LPI_STATr
#define WRITE_PHYC_AI_LPI_STATr BCM84834_WRITE_PHYC_AI_LPI_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_AI_LPI_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AI_IDLE_TMR_VAL_H
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88c
 * DEVAD:    1
 * DESC:     Tx Auto-Initiated Idle Timer Value High
 * SIZE:     32
 * FIELDS:
 *     TX_AI_IDLE_TMR_VAL_H 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr (0x0001a88c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AI_IDLE_TMR_VAL_H.
 *
 */
typedef union BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_s {
	uint32_t v[1];
	uint32_t phyc_tx_ai_idle_tmr_val_h[1];
	uint32_t _phyc_tx_ai_idle_tmr_val_h;
} BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_t;

#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_CLR(r) (r).phyc_tx_ai_idle_tmr_val_h[0] = 0
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_SET(r,d) (r).phyc_tx_ai_idle_tmr_val_h[0] = d
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_GET(r) (r).phyc_tx_ai_idle_tmr_val_h[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_GET(r) (((r).phyc_tx_ai_idle_tmr_val_h[0]) & 0xffff)
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_SET(r,f) (r).phyc_tx_ai_idle_tmr_val_h[0]=(((r).phyc_tx_ai_idle_tmr_val_h[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AI_IDLE_TMR_VAL_H.
 *
 */
#define BCM84834_READ_PHYC_TX_AI_IDLE_TMR_VAL_Hr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr,(_r._phyc_tx_ai_idle_tmr_val_h))
#define BCM84834_WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Hr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr,(_r._phyc_tx_ai_idle_tmr_val_h))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AI_IDLE_TMR_VAL_Hr BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_SIZE BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_SIZE
typedef BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_t PHYC_TX_AI_IDLE_TMR_VAL_Hr_t;
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_CLR BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_CLR
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_SET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_SET
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_GET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_GET
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_GET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_GET
#define PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_SET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr_TX_AI_IDLE_TMR_VAL_Hf_SET
#define READ_PHYC_TX_AI_IDLE_TMR_VAL_Hr BCM84834_READ_PHYC_TX_AI_IDLE_TMR_VAL_Hr
#define WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Hr BCM84834_WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Hr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Hr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AI_IDLE_TMR_VAL_L
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88d
 * DEVAD:    1
 * DESC:     Tx Auto-Initiated Idle Timer Value Low
 * SIZE:     32
 * FIELDS:
 *     TX_AI_IDLE_TMR_VAL_L 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr (0x0001a88d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AI_IDLE_TMR_VAL_L.
 *
 */
typedef union BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_s {
	uint32_t v[1];
	uint32_t phyc_tx_ai_idle_tmr_val_l[1];
	uint32_t _phyc_tx_ai_idle_tmr_val_l;
} BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_t;

#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_CLR(r) (r).phyc_tx_ai_idle_tmr_val_l[0] = 0
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_SET(r,d) (r).phyc_tx_ai_idle_tmr_val_l[0] = d
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_GET(r) (r).phyc_tx_ai_idle_tmr_val_l[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_GET(r) (((r).phyc_tx_ai_idle_tmr_val_l[0]) & 0xffff)
#define BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_SET(r,f) (r).phyc_tx_ai_idle_tmr_val_l[0]=(((r).phyc_tx_ai_idle_tmr_val_l[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AI_IDLE_TMR_VAL_L.
 *
 */
#define BCM84834_READ_PHYC_TX_AI_IDLE_TMR_VAL_Lr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr,(_r._phyc_tx_ai_idle_tmr_val_l))
#define BCM84834_WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Lr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr,(_r._phyc_tx_ai_idle_tmr_val_l))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AI_IDLE_TMR_VAL_Lr BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_SIZE BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_SIZE
typedef BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_t PHYC_TX_AI_IDLE_TMR_VAL_Lr_t;
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_CLR BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_CLR
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_SET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_SET
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_GET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_GET
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_GET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_GET
#define PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_SET BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr_TX_AI_IDLE_TMR_VAL_Lf_SET
#define READ_PHYC_TX_AI_IDLE_TMR_VAL_Lr BCM84834_READ_PHYC_TX_AI_IDLE_TMR_VAL_Lr
#define WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Lr BCM84834_WRITE_PHYC_TX_AI_IDLE_TMR_VAL_Lr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AI_IDLE_TMR_VAL_Lr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AI_CONST_LAT_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88e
 * DEVAD:    1
 * DESC:     Tx Auto-Initiated Constant Latency Value
 * SIZE:     32
 * FIELDS:
 *     TX_AI_CONST_LAT_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr (0x0001a88e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AI_CONST_LAT_VAL.
 *
 */
typedef union BCM84834_PHYC_TX_AI_CONST_LAT_VALr_s {
	uint32_t v[1];
	uint32_t phyc_tx_ai_const_lat_val[1];
	uint32_t _phyc_tx_ai_const_lat_val;
} BCM84834_PHYC_TX_AI_CONST_LAT_VALr_t;

#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_CLR(r) (r).phyc_tx_ai_const_lat_val[0] = 0
#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_SET(r,d) (r).phyc_tx_ai_const_lat_val[0] = d
#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_GET(r) (r).phyc_tx_ai_const_lat_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_GET(r) (((r).phyc_tx_ai_const_lat_val[0]) & 0x7ff)
#define BCM84834_PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_SET(r,f) (r).phyc_tx_ai_const_lat_val[0]=(((r).phyc_tx_ai_const_lat_val[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access PHYC_TX_AI_CONST_LAT_VAL.
 *
 */
#define BCM84834_READ_PHYC_TX_AI_CONST_LAT_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AI_CONST_LAT_VALr,(_r._phyc_tx_ai_const_lat_val))
#define BCM84834_WRITE_PHYC_TX_AI_CONST_LAT_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AI_CONST_LAT_VALr,(_r._phyc_tx_ai_const_lat_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AI_CONST_LAT_VALr BCM84834_PHYC_TX_AI_CONST_LAT_VALr
#define PHYC_TX_AI_CONST_LAT_VALr_SIZE BCM84834_PHYC_TX_AI_CONST_LAT_VALr_SIZE
typedef BCM84834_PHYC_TX_AI_CONST_LAT_VALr_t PHYC_TX_AI_CONST_LAT_VALr_t;
#define PHYC_TX_AI_CONST_LAT_VALr_CLR BCM84834_PHYC_TX_AI_CONST_LAT_VALr_CLR
#define PHYC_TX_AI_CONST_LAT_VALr_SET BCM84834_PHYC_TX_AI_CONST_LAT_VALr_SET
#define PHYC_TX_AI_CONST_LAT_VALr_GET BCM84834_PHYC_TX_AI_CONST_LAT_VALr_GET
#define PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_GET BCM84834_PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_GET
#define PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_SET BCM84834_PHYC_TX_AI_CONST_LAT_VALr_TX_AI_CONST_LAT_VALf_SET
#define READ_PHYC_TX_AI_CONST_LAT_VALr BCM84834_READ_PHYC_TX_AI_CONST_LAT_VALr
#define WRITE_PHYC_TX_AI_CONST_LAT_VALr BCM84834_WRITE_PHYC_TX_AI_CONST_LAT_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AI_CONST_LAT_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_CUR_RX_16K_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa88f
 * DEVAD:    1
 * DESC:     Current Receive 16k Count Value
 * SIZE:     32
 * FIELDS:
 *     CUR_RX_16K_CNT   
 *
 ******************************************************************************/
#define BCM84834_PHYC_CUR_RX_16K_CNTr (0x0001a88f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_CUR_RX_16K_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_CUR_RX_16K_CNT.
 *
 */
typedef union BCM84834_PHYC_CUR_RX_16K_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_cur_rx_16k_cnt[1];
	uint32_t _phyc_cur_rx_16k_cnt;
} BCM84834_PHYC_CUR_RX_16K_CNTr_t;

#define BCM84834_PHYC_CUR_RX_16K_CNTr_CLR(r) (r).phyc_cur_rx_16k_cnt[0] = 0
#define BCM84834_PHYC_CUR_RX_16K_CNTr_SET(r,d) (r).phyc_cur_rx_16k_cnt[0] = d
#define BCM84834_PHYC_CUR_RX_16K_CNTr_GET(r) (r).phyc_cur_rx_16k_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_GET(r) (((r).phyc_cur_rx_16k_cnt[0]) & 0x1fff)
#define BCM84834_PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_SET(r,f) (r).phyc_cur_rx_16k_cnt[0]=(((r).phyc_cur_rx_16k_cnt[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_CUR_RX_16K_CNT.
 *
 */
#define BCM84834_READ_PHYC_CUR_RX_16K_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_CUR_RX_16K_CNTr,(_r._phyc_cur_rx_16k_cnt))
#define BCM84834_WRITE_PHYC_CUR_RX_16K_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_CUR_RX_16K_CNTr,(_r._phyc_cur_rx_16k_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_CUR_RX_16K_CNTr BCM84834_PHYC_CUR_RX_16K_CNTr
#define PHYC_CUR_RX_16K_CNTr_SIZE BCM84834_PHYC_CUR_RX_16K_CNTr_SIZE
typedef BCM84834_PHYC_CUR_RX_16K_CNTr_t PHYC_CUR_RX_16K_CNTr_t;
#define PHYC_CUR_RX_16K_CNTr_CLR BCM84834_PHYC_CUR_RX_16K_CNTr_CLR
#define PHYC_CUR_RX_16K_CNTr_SET BCM84834_PHYC_CUR_RX_16K_CNTr_SET
#define PHYC_CUR_RX_16K_CNTr_GET BCM84834_PHYC_CUR_RX_16K_CNTr_GET
#define PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_GET BCM84834_PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_GET
#define PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_SET BCM84834_PHYC_CUR_RX_16K_CNTr_CUR_RX_16K_CNTf_SET
#define READ_PHYC_CUR_RX_16K_CNTr BCM84834_READ_PHYC_CUR_RX_16K_CNTr
#define WRITE_PHYC_CUR_RX_16K_CNTr BCM84834_WRITE_PHYC_CUR_RX_16K_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_CUR_RX_16K_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_16K_CNT_ROLLOVER
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa890
 * DEVAD:    1
 * DESC:     Receive 16K Count Rollover
 * SIZE:     32
 * FIELDS:
 *     ROLLOVER_CNT     
 *     RST_ROLLOVER_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr (0x0001a890 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_16K_CNT_ROLLOVER.
 *
 */
typedef union BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_s {
	uint32_t v[1];
	uint32_t phyc_rx_16k_cnt_rollover[1];
	uint32_t _phyc_rx_16k_cnt_rollover;
} BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_t;

#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_CLR(r) (r).phyc_rx_16k_cnt_rollover[0] = 0
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_SET(r,d) (r).phyc_rx_16k_cnt_rollover[0] = d
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_GET(r) (r).phyc_rx_16k_cnt_rollover[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_GET(r) ((((r).phyc_rx_16k_cnt_rollover[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_SET(r,f) (r).phyc_rx_16k_cnt_rollover[0]=(((r).phyc_rx_16k_cnt_rollover[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_GET(r) (((r).phyc_rx_16k_cnt_rollover[0]) & 0x3fff)
#define BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_SET(r,f) (r).phyc_rx_16k_cnt_rollover[0]=(((r).phyc_rx_16k_cnt_rollover[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access PHYC_RX_16K_CNT_ROLLOVER.
 *
 */
#define BCM84834_READ_PHYC_RX_16K_CNT_ROLLOVERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_16K_CNT_ROLLOVERr,(_r._phyc_rx_16k_cnt_rollover))
#define BCM84834_WRITE_PHYC_RX_16K_CNT_ROLLOVERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_16K_CNT_ROLLOVERr,(_r._phyc_rx_16k_cnt_rollover))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_16K_CNT_ROLLOVERr BCM84834_PHYC_RX_16K_CNT_ROLLOVERr
#define PHYC_RX_16K_CNT_ROLLOVERr_SIZE BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_SIZE
typedef BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_t PHYC_RX_16K_CNT_ROLLOVERr_t;
#define PHYC_RX_16K_CNT_ROLLOVERr_CLR BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_CLR
#define PHYC_RX_16K_CNT_ROLLOVERr_SET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_SET
#define PHYC_RX_16K_CNT_ROLLOVERr_GET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_GET
#define PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_GET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_GET
#define PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_SET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_RST_ROLLOVER_CNTf_SET
#define PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_GET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_GET
#define PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_SET BCM84834_PHYC_RX_16K_CNT_ROLLOVERr_ROLLOVER_CNTf_SET
#define READ_PHYC_RX_16K_CNT_ROLLOVERr BCM84834_READ_PHYC_RX_16K_CNT_ROLLOVERr
#define WRITE_PHYC_RX_16K_CNT_ROLLOVERr BCM84834_WRITE_PHYC_RX_16K_CNT_ROLLOVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_16K_CNT_ROLLOVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_PER_LFSR_16K_ADJUST
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa891
 * DEVAD:    1
 * DESC:     Receive Periodic LFSR 16K Adjustvalue
 * SIZE:     32
 * FIELDS:
 *     ADJUST_VALUE     
 *     PLUS_MINUS       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr (0x0001a891 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_PER_LFSR_16K_ADJUST.
 *
 */
typedef union BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_s {
	uint32_t v[1];
	uint32_t phyc_rx_per_lfsr_16k_adjust[1];
	uint32_t _phyc_rx_per_lfsr_16k_adjust;
} BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_t;

#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_CLR(r) (r).phyc_rx_per_lfsr_16k_adjust[0] = 0
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_SET(r,d) (r).phyc_rx_per_lfsr_16k_adjust[0] = d
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_GET(r) (r).phyc_rx_per_lfsr_16k_adjust[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_GET(r) ((((r).phyc_rx_per_lfsr_16k_adjust[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_SET(r,f) (r).phyc_rx_per_lfsr_16k_adjust[0]=(((r).phyc_rx_per_lfsr_16k_adjust[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_GET(r) (((r).phyc_rx_per_lfsr_16k_adjust[0]) & 0x3fff)
#define BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_SET(r,f) (r).phyc_rx_per_lfsr_16k_adjust[0]=(((r).phyc_rx_per_lfsr_16k_adjust[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access PHYC_RX_PER_LFSR_16K_ADJUST.
 *
 */
#define BCM84834_READ_PHYC_RX_PER_LFSR_16K_ADJUSTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr,(_r._phyc_rx_per_lfsr_16k_adjust))
#define BCM84834_WRITE_PHYC_RX_PER_LFSR_16K_ADJUSTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr,(_r._phyc_rx_per_lfsr_16k_adjust))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_PER_LFSR_16K_ADJUSTr BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_SIZE BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_SIZE
typedef BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_t PHYC_RX_PER_LFSR_16K_ADJUSTr_t;
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_CLR BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_CLR
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_SET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_SET
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_GET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_GET
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_GET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_GET
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_SET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_PLUS_MINUSf_SET
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_GET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_GET
#define PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_SET BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr_ADJUST_VALUEf_SET
#define READ_PHYC_RX_PER_LFSR_16K_ADJUSTr BCM84834_READ_PHYC_RX_PER_LFSR_16K_ADJUSTr
#define WRITE_PHYC_RX_PER_LFSR_16K_ADJUSTr BCM84834_WRITE_PHYC_RX_PER_LFSR_16K_ADJUSTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_PER_LFSR_16K_ADJUSTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_CH_MAP
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa892
 * DEVAD:    1
 * DESC:     Receive Channel Map Reg
 * SIZE:     32
 * FIELDS:
 *     RX_CH_A_MAP_SEL  
 *     RX_CH_B_MAP_SEL  
 *     RX_CH_C_MAP_SEL  
 *     RX_CH_D_MAP_SEL  
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_CH_MAPr (0x0001a892 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_CH_MAPr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_CH_MAP.
 *
 */
typedef union BCM84834_PHYC_RX_CH_MAPr_s {
	uint32_t v[1];
	uint32_t phyc_rx_ch_map[1];
	uint32_t _phyc_rx_ch_map;
} BCM84834_PHYC_RX_CH_MAPr_t;

#define BCM84834_PHYC_RX_CH_MAPr_CLR(r) (r).phyc_rx_ch_map[0] = 0
#define BCM84834_PHYC_RX_CH_MAPr_SET(r,d) (r).phyc_rx_ch_map[0] = d
#define BCM84834_PHYC_RX_CH_MAPr_GET(r) (r).phyc_rx_ch_map[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_GET(r) ((((r).phyc_rx_ch_map[0]) >> 6) & 0x3)
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_SET(r,f) (r).phyc_rx_ch_map[0]=(((r).phyc_rx_ch_map[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_GET(r) ((((r).phyc_rx_ch_map[0]) >> 4) & 0x3)
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_SET(r,f) (r).phyc_rx_ch_map[0]=(((r).phyc_rx_ch_map[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_GET(r) ((((r).phyc_rx_ch_map[0]) >> 2) & 0x3)
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_SET(r,f) (r).phyc_rx_ch_map[0]=(((r).phyc_rx_ch_map[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_GET(r) (((r).phyc_rx_ch_map[0]) & 0x3)
#define BCM84834_PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_SET(r,f) (r).phyc_rx_ch_map[0]=(((r).phyc_rx_ch_map[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PHYC_RX_CH_MAP.
 *
 */
#define BCM84834_READ_PHYC_RX_CH_MAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_CH_MAPr,(_r._phyc_rx_ch_map))
#define BCM84834_WRITE_PHYC_RX_CH_MAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_CH_MAPr,(_r._phyc_rx_ch_map))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_CH_MAPr BCM84834_PHYC_RX_CH_MAPr
#define PHYC_RX_CH_MAPr_SIZE BCM84834_PHYC_RX_CH_MAPr_SIZE
typedef BCM84834_PHYC_RX_CH_MAPr_t PHYC_RX_CH_MAPr_t;
#define PHYC_RX_CH_MAPr_CLR BCM84834_PHYC_RX_CH_MAPr_CLR
#define PHYC_RX_CH_MAPr_SET BCM84834_PHYC_RX_CH_MAPr_SET
#define PHYC_RX_CH_MAPr_GET BCM84834_PHYC_RX_CH_MAPr_GET
#define PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_GET BCM84834_PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_GET
#define PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_SET BCM84834_PHYC_RX_CH_MAPr_RX_CH_D_MAP_SELf_SET
#define PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_GET BCM84834_PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_GET
#define PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_SET BCM84834_PHYC_RX_CH_MAPr_RX_CH_C_MAP_SELf_SET
#define PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_GET BCM84834_PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_GET
#define PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_SET BCM84834_PHYC_RX_CH_MAPr_RX_CH_B_MAP_SELf_SET
#define PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_GET BCM84834_PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_GET
#define PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_SET BCM84834_PHYC_RX_CH_MAPr_RX_CH_A_MAP_SELf_SET
#define READ_PHYC_RX_CH_MAPr BCM84834_READ_PHYC_RX_CH_MAPr
#define WRITE_PHYC_RX_CH_MAPr BCM84834_WRITE_PHYC_RX_CH_MAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_CH_MAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_EMI_MITIGATION
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa893
 * DEVAD:    1
 * DESC:     Receive EMI Mitigation register
 * SIZE:     32
 * FIELDS:
 *     EMI_MIT_WINDOW   
 *     EMI_MIT_TRIG_VAL 
 *     EMI_MIT_EN       
 *     CLR_EMI_MIT_ACTIVE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_EMI_MITIGATIONr (0x0001a893 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_EMI_MITIGATIONr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_EMI_MITIGATION.
 *
 */
typedef union BCM84834_PHYC_RX_EMI_MITIGATIONr_s {
	uint32_t v[1];
	uint32_t phyc_rx_emi_mitigation[1];
	uint32_t _phyc_rx_emi_mitigation;
} BCM84834_PHYC_RX_EMI_MITIGATIONr_t;

#define BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR(r) (r).phyc_rx_emi_mitigation[0] = 0
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_SET(r,d) (r).phyc_rx_emi_mitigation[0] = d
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_GET(r) (r).phyc_rx_emi_mitigation[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_GET(r) ((((r).phyc_rx_emi_mitigation[0]) >> 9) & 0x1)
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_SET(r,f) (r).phyc_rx_emi_mitigation[0]=(((r).phyc_rx_emi_mitigation[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_GET(r) ((((r).phyc_rx_emi_mitigation[0]) >> 8) & 0x1)
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_SET(r,f) (r).phyc_rx_emi_mitigation[0]=(((r).phyc_rx_emi_mitigation[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_GET(r) ((((r).phyc_rx_emi_mitigation[0]) >> 4) & 0xf)
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_SET(r,f) (r).phyc_rx_emi_mitigation[0]=(((r).phyc_rx_emi_mitigation[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_GET(r) (((r).phyc_rx_emi_mitigation[0]) & 0xf)
#define BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_SET(r,f) (r).phyc_rx_emi_mitigation[0]=(((r).phyc_rx_emi_mitigation[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_RX_EMI_MITIGATION.
 *
 */
#define BCM84834_READ_PHYC_RX_EMI_MITIGATIONr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_EMI_MITIGATIONr,(_r._phyc_rx_emi_mitigation))
#define BCM84834_WRITE_PHYC_RX_EMI_MITIGATIONr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_EMI_MITIGATIONr,(_r._phyc_rx_emi_mitigation))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_EMI_MITIGATIONr BCM84834_PHYC_RX_EMI_MITIGATIONr
#define PHYC_RX_EMI_MITIGATIONr_SIZE BCM84834_PHYC_RX_EMI_MITIGATIONr_SIZE
typedef BCM84834_PHYC_RX_EMI_MITIGATIONr_t PHYC_RX_EMI_MITIGATIONr_t;
#define PHYC_RX_EMI_MITIGATIONr_CLR BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR
#define PHYC_RX_EMI_MITIGATIONr_SET BCM84834_PHYC_RX_EMI_MITIGATIONr_SET
#define PHYC_RX_EMI_MITIGATIONr_GET BCM84834_PHYC_RX_EMI_MITIGATIONr_GET
#define PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_GET BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_GET
#define PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_SET BCM84834_PHYC_RX_EMI_MITIGATIONr_CLR_EMI_MIT_ACTIVEf_SET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_GET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_GET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_SET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_ENf_SET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_GET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_GET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_SET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_TRIG_VALf_SET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_GET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_GET
#define PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_SET BCM84834_PHYC_RX_EMI_MITIGATIONr_EMI_MIT_WINDOWf_SET
#define READ_PHYC_RX_EMI_MITIGATIONr BCM84834_READ_PHYC_RX_EMI_MITIGATIONr
#define WRITE_PHYC_RX_EMI_MITIGATIONr BCM84834_WRITE_PHYC_RX_EMI_MITIGATIONr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_EMI_MITIGATIONr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SNR_OP_MRGN_CHA
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8d6
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel A
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PHYC_SNR_OP_MRGN_CHAr (0x0001a8d6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SNR_OP_MRGN_CHA.
 *
 */
typedef union BCM84834_PHYC_SNR_OP_MRGN_CHAr_s {
	uint32_t v[1];
	uint32_t phyc_snr_op_mrgn_cha[1];
	uint32_t _phyc_snr_op_mrgn_cha;
} BCM84834_PHYC_SNR_OP_MRGN_CHAr_t;

#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_CLR(r) (r).phyc_snr_op_mrgn_cha[0] = 0
#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_SET(r,d) (r).phyc_snr_op_mrgn_cha[0] = d
#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_GET(r) (r).phyc_snr_op_mrgn_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_SNRf_GET(r) (((r).phyc_snr_op_mrgn_cha[0]) & 0xffff)
#define BCM84834_PHYC_SNR_OP_MRGN_CHAr_SNRf_SET(r,f) (r).phyc_snr_op_mrgn_cha[0]=(((r).phyc_snr_op_mrgn_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SNR_OP_MRGN_CHA.
 *
 */
#define BCM84834_READ_PHYC_SNR_OP_MRGN_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHAr,(_r._phyc_snr_op_mrgn_cha))
#define BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHAr,(_r._phyc_snr_op_mrgn_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SNR_OP_MRGN_CHAr BCM84834_PHYC_SNR_OP_MRGN_CHAr
#define PHYC_SNR_OP_MRGN_CHAr_SIZE BCM84834_PHYC_SNR_OP_MRGN_CHAr_SIZE
typedef BCM84834_PHYC_SNR_OP_MRGN_CHAr_t PHYC_SNR_OP_MRGN_CHAr_t;
#define PHYC_SNR_OP_MRGN_CHAr_CLR BCM84834_PHYC_SNR_OP_MRGN_CHAr_CLR
#define PHYC_SNR_OP_MRGN_CHAr_SET BCM84834_PHYC_SNR_OP_MRGN_CHAr_SET
#define PHYC_SNR_OP_MRGN_CHAr_GET BCM84834_PHYC_SNR_OP_MRGN_CHAr_GET
#define PHYC_SNR_OP_MRGN_CHAr_SNRf_GET BCM84834_PHYC_SNR_OP_MRGN_CHAr_SNRf_GET
#define PHYC_SNR_OP_MRGN_CHAr_SNRf_SET BCM84834_PHYC_SNR_OP_MRGN_CHAr_SNRf_SET
#define READ_PHYC_SNR_OP_MRGN_CHAr BCM84834_READ_PHYC_SNR_OP_MRGN_CHAr
#define WRITE_PHYC_SNR_OP_MRGN_CHAr BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SNR_OP_MRGN_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SNR_OP_MRGN_CHB
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8d7
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel B
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PHYC_SNR_OP_MRGN_CHBr (0x0001a8d7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SNR_OP_MRGN_CHB.
 *
 */
typedef union BCM84834_PHYC_SNR_OP_MRGN_CHBr_s {
	uint32_t v[1];
	uint32_t phyc_snr_op_mrgn_chb[1];
	uint32_t _phyc_snr_op_mrgn_chb;
} BCM84834_PHYC_SNR_OP_MRGN_CHBr_t;

#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_CLR(r) (r).phyc_snr_op_mrgn_chb[0] = 0
#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_SET(r,d) (r).phyc_snr_op_mrgn_chb[0] = d
#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_GET(r) (r).phyc_snr_op_mrgn_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_SNRf_GET(r) (((r).phyc_snr_op_mrgn_chb[0]) & 0xffff)
#define BCM84834_PHYC_SNR_OP_MRGN_CHBr_SNRf_SET(r,f) (r).phyc_snr_op_mrgn_chb[0]=(((r).phyc_snr_op_mrgn_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SNR_OP_MRGN_CHB.
 *
 */
#define BCM84834_READ_PHYC_SNR_OP_MRGN_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHBr,(_r._phyc_snr_op_mrgn_chb))
#define BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHBr,(_r._phyc_snr_op_mrgn_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SNR_OP_MRGN_CHBr BCM84834_PHYC_SNR_OP_MRGN_CHBr
#define PHYC_SNR_OP_MRGN_CHBr_SIZE BCM84834_PHYC_SNR_OP_MRGN_CHBr_SIZE
typedef BCM84834_PHYC_SNR_OP_MRGN_CHBr_t PHYC_SNR_OP_MRGN_CHBr_t;
#define PHYC_SNR_OP_MRGN_CHBr_CLR BCM84834_PHYC_SNR_OP_MRGN_CHBr_CLR
#define PHYC_SNR_OP_MRGN_CHBr_SET BCM84834_PHYC_SNR_OP_MRGN_CHBr_SET
#define PHYC_SNR_OP_MRGN_CHBr_GET BCM84834_PHYC_SNR_OP_MRGN_CHBr_GET
#define PHYC_SNR_OP_MRGN_CHBr_SNRf_GET BCM84834_PHYC_SNR_OP_MRGN_CHBr_SNRf_GET
#define PHYC_SNR_OP_MRGN_CHBr_SNRf_SET BCM84834_PHYC_SNR_OP_MRGN_CHBr_SNRf_SET
#define READ_PHYC_SNR_OP_MRGN_CHBr BCM84834_READ_PHYC_SNR_OP_MRGN_CHBr
#define WRITE_PHYC_SNR_OP_MRGN_CHBr BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SNR_OP_MRGN_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SNR_OP_MRGN_CHC
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8d8
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel C
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PHYC_SNR_OP_MRGN_CHCr (0x0001a8d8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SNR_OP_MRGN_CHC.
 *
 */
typedef union BCM84834_PHYC_SNR_OP_MRGN_CHCr_s {
	uint32_t v[1];
	uint32_t phyc_snr_op_mrgn_chc[1];
	uint32_t _phyc_snr_op_mrgn_chc;
} BCM84834_PHYC_SNR_OP_MRGN_CHCr_t;

#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_CLR(r) (r).phyc_snr_op_mrgn_chc[0] = 0
#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_SET(r,d) (r).phyc_snr_op_mrgn_chc[0] = d
#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_GET(r) (r).phyc_snr_op_mrgn_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_SNRf_GET(r) (((r).phyc_snr_op_mrgn_chc[0]) & 0xffff)
#define BCM84834_PHYC_SNR_OP_MRGN_CHCr_SNRf_SET(r,f) (r).phyc_snr_op_mrgn_chc[0]=(((r).phyc_snr_op_mrgn_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SNR_OP_MRGN_CHC.
 *
 */
#define BCM84834_READ_PHYC_SNR_OP_MRGN_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHCr,(_r._phyc_snr_op_mrgn_chc))
#define BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHCr,(_r._phyc_snr_op_mrgn_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SNR_OP_MRGN_CHCr BCM84834_PHYC_SNR_OP_MRGN_CHCr
#define PHYC_SNR_OP_MRGN_CHCr_SIZE BCM84834_PHYC_SNR_OP_MRGN_CHCr_SIZE
typedef BCM84834_PHYC_SNR_OP_MRGN_CHCr_t PHYC_SNR_OP_MRGN_CHCr_t;
#define PHYC_SNR_OP_MRGN_CHCr_CLR BCM84834_PHYC_SNR_OP_MRGN_CHCr_CLR
#define PHYC_SNR_OP_MRGN_CHCr_SET BCM84834_PHYC_SNR_OP_MRGN_CHCr_SET
#define PHYC_SNR_OP_MRGN_CHCr_GET BCM84834_PHYC_SNR_OP_MRGN_CHCr_GET
#define PHYC_SNR_OP_MRGN_CHCr_SNRf_GET BCM84834_PHYC_SNR_OP_MRGN_CHCr_SNRf_GET
#define PHYC_SNR_OP_MRGN_CHCr_SNRf_SET BCM84834_PHYC_SNR_OP_MRGN_CHCr_SNRf_SET
#define READ_PHYC_SNR_OP_MRGN_CHCr BCM84834_READ_PHYC_SNR_OP_MRGN_CHCr
#define WRITE_PHYC_SNR_OP_MRGN_CHCr BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SNR_OP_MRGN_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_SNR_OP_MRGN_CHD
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8d9
 * DEVAD:    1
 * DESC:     SNR Operating Margin Channel D
 * SIZE:     32
 * FIELDS:
 *     SNR              
 *
 ******************************************************************************/
#define BCM84834_PHYC_SNR_OP_MRGN_CHDr (0x0001a8d9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_SNR_OP_MRGN_CHD.
 *
 */
typedef union BCM84834_PHYC_SNR_OP_MRGN_CHDr_s {
	uint32_t v[1];
	uint32_t phyc_snr_op_mrgn_chd[1];
	uint32_t _phyc_snr_op_mrgn_chd;
} BCM84834_PHYC_SNR_OP_MRGN_CHDr_t;

#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_CLR(r) (r).phyc_snr_op_mrgn_chd[0] = 0
#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_SET(r,d) (r).phyc_snr_op_mrgn_chd[0] = d
#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_GET(r) (r).phyc_snr_op_mrgn_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_SNRf_GET(r) (((r).phyc_snr_op_mrgn_chd[0]) & 0xffff)
#define BCM84834_PHYC_SNR_OP_MRGN_CHDr_SNRf_SET(r,f) (r).phyc_snr_op_mrgn_chd[0]=(((r).phyc_snr_op_mrgn_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_SNR_OP_MRGN_CHD.
 *
 */
#define BCM84834_READ_PHYC_SNR_OP_MRGN_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHDr,(_r._phyc_snr_op_mrgn_chd))
#define BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_SNR_OP_MRGN_CHDr,(_r._phyc_snr_op_mrgn_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_SNR_OP_MRGN_CHDr BCM84834_PHYC_SNR_OP_MRGN_CHDr
#define PHYC_SNR_OP_MRGN_CHDr_SIZE BCM84834_PHYC_SNR_OP_MRGN_CHDr_SIZE
typedef BCM84834_PHYC_SNR_OP_MRGN_CHDr_t PHYC_SNR_OP_MRGN_CHDr_t;
#define PHYC_SNR_OP_MRGN_CHDr_CLR BCM84834_PHYC_SNR_OP_MRGN_CHDr_CLR
#define PHYC_SNR_OP_MRGN_CHDr_SET BCM84834_PHYC_SNR_OP_MRGN_CHDr_SET
#define PHYC_SNR_OP_MRGN_CHDr_GET BCM84834_PHYC_SNR_OP_MRGN_CHDr_GET
#define PHYC_SNR_OP_MRGN_CHDr_SNRf_GET BCM84834_PHYC_SNR_OP_MRGN_CHDr_SNRf_GET
#define PHYC_SNR_OP_MRGN_CHDr_SNRf_SET BCM84834_PHYC_SNR_OP_MRGN_CHDr_SNRf_SET
#define READ_PHYC_SNR_OP_MRGN_CHDr BCM84834_READ_PHYC_SNR_OP_MRGN_CHDr
#define WRITE_PHYC_SNR_OP_MRGN_CHDr BCM84834_WRITE_PHYC_SNR_OP_MRGN_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_SNR_OP_MRGN_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MIN_MRGN_CHA
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8da
 * DEVAD:    1
 * DESC:     Minimum Margin Channel A
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PHYC_MIN_MRGN_CHAr (0x0001a8da | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MIN_MRGN_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MIN_MRGN_CHA.
 *
 */
typedef union BCM84834_PHYC_MIN_MRGN_CHAr_s {
	uint32_t v[1];
	uint32_t phyc_min_mrgn_cha[1];
	uint32_t _phyc_min_mrgn_cha;
} BCM84834_PHYC_MIN_MRGN_CHAr_t;

#define BCM84834_PHYC_MIN_MRGN_CHAr_CLR(r) (r).phyc_min_mrgn_cha[0] = 0
#define BCM84834_PHYC_MIN_MRGN_CHAr_SET(r,d) (r).phyc_min_mrgn_cha[0] = d
#define BCM84834_PHYC_MIN_MRGN_CHAr_GET(r) (r).phyc_min_mrgn_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MIN_MRGN_CHAr_MIN_MARGINf_GET(r) (((r).phyc_min_mrgn_cha[0]) & 0xffff)
#define BCM84834_PHYC_MIN_MRGN_CHAr_MIN_MARGINf_SET(r,f) (r).phyc_min_mrgn_cha[0]=(((r).phyc_min_mrgn_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MIN_MRGN_CHA.
 *
 */
#define BCM84834_READ_PHYC_MIN_MRGN_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MIN_MRGN_CHAr,(_r._phyc_min_mrgn_cha))
#define BCM84834_WRITE_PHYC_MIN_MRGN_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MIN_MRGN_CHAr,(_r._phyc_min_mrgn_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MIN_MRGN_CHAr BCM84834_PHYC_MIN_MRGN_CHAr
#define PHYC_MIN_MRGN_CHAr_SIZE BCM84834_PHYC_MIN_MRGN_CHAr_SIZE
typedef BCM84834_PHYC_MIN_MRGN_CHAr_t PHYC_MIN_MRGN_CHAr_t;
#define PHYC_MIN_MRGN_CHAr_CLR BCM84834_PHYC_MIN_MRGN_CHAr_CLR
#define PHYC_MIN_MRGN_CHAr_SET BCM84834_PHYC_MIN_MRGN_CHAr_SET
#define PHYC_MIN_MRGN_CHAr_GET BCM84834_PHYC_MIN_MRGN_CHAr_GET
#define PHYC_MIN_MRGN_CHAr_MIN_MARGINf_GET BCM84834_PHYC_MIN_MRGN_CHAr_MIN_MARGINf_GET
#define PHYC_MIN_MRGN_CHAr_MIN_MARGINf_SET BCM84834_PHYC_MIN_MRGN_CHAr_MIN_MARGINf_SET
#define READ_PHYC_MIN_MRGN_CHAr BCM84834_READ_PHYC_MIN_MRGN_CHAr
#define WRITE_PHYC_MIN_MRGN_CHAr BCM84834_WRITE_PHYC_MIN_MRGN_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MIN_MRGN_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MIN_MRGN_CHB
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8db
 * DEVAD:    1
 * DESC:     Minimum Margin Channel B
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PHYC_MIN_MRGN_CHBr (0x0001a8db | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MIN_MRGN_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MIN_MRGN_CHB.
 *
 */
typedef union BCM84834_PHYC_MIN_MRGN_CHBr_s {
	uint32_t v[1];
	uint32_t phyc_min_mrgn_chb[1];
	uint32_t _phyc_min_mrgn_chb;
} BCM84834_PHYC_MIN_MRGN_CHBr_t;

#define BCM84834_PHYC_MIN_MRGN_CHBr_CLR(r) (r).phyc_min_mrgn_chb[0] = 0
#define BCM84834_PHYC_MIN_MRGN_CHBr_SET(r,d) (r).phyc_min_mrgn_chb[0] = d
#define BCM84834_PHYC_MIN_MRGN_CHBr_GET(r) (r).phyc_min_mrgn_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MIN_MRGN_CHBr_MIN_MARGINf_GET(r) (((r).phyc_min_mrgn_chb[0]) & 0xffff)
#define BCM84834_PHYC_MIN_MRGN_CHBr_MIN_MARGINf_SET(r,f) (r).phyc_min_mrgn_chb[0]=(((r).phyc_min_mrgn_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MIN_MRGN_CHB.
 *
 */
#define BCM84834_READ_PHYC_MIN_MRGN_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MIN_MRGN_CHBr,(_r._phyc_min_mrgn_chb))
#define BCM84834_WRITE_PHYC_MIN_MRGN_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MIN_MRGN_CHBr,(_r._phyc_min_mrgn_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MIN_MRGN_CHBr BCM84834_PHYC_MIN_MRGN_CHBr
#define PHYC_MIN_MRGN_CHBr_SIZE BCM84834_PHYC_MIN_MRGN_CHBr_SIZE
typedef BCM84834_PHYC_MIN_MRGN_CHBr_t PHYC_MIN_MRGN_CHBr_t;
#define PHYC_MIN_MRGN_CHBr_CLR BCM84834_PHYC_MIN_MRGN_CHBr_CLR
#define PHYC_MIN_MRGN_CHBr_SET BCM84834_PHYC_MIN_MRGN_CHBr_SET
#define PHYC_MIN_MRGN_CHBr_GET BCM84834_PHYC_MIN_MRGN_CHBr_GET
#define PHYC_MIN_MRGN_CHBr_MIN_MARGINf_GET BCM84834_PHYC_MIN_MRGN_CHBr_MIN_MARGINf_GET
#define PHYC_MIN_MRGN_CHBr_MIN_MARGINf_SET BCM84834_PHYC_MIN_MRGN_CHBr_MIN_MARGINf_SET
#define READ_PHYC_MIN_MRGN_CHBr BCM84834_READ_PHYC_MIN_MRGN_CHBr
#define WRITE_PHYC_MIN_MRGN_CHBr BCM84834_WRITE_PHYC_MIN_MRGN_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MIN_MRGN_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MIN_MRGN_CHC
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8dc
 * DEVAD:    1
 * DESC:     Minimum Margin Channel C
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PHYC_MIN_MRGN_CHCr (0x0001a8dc | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MIN_MRGN_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MIN_MRGN_CHC.
 *
 */
typedef union BCM84834_PHYC_MIN_MRGN_CHCr_s {
	uint32_t v[1];
	uint32_t phyc_min_mrgn_chc[1];
	uint32_t _phyc_min_mrgn_chc;
} BCM84834_PHYC_MIN_MRGN_CHCr_t;

#define BCM84834_PHYC_MIN_MRGN_CHCr_CLR(r) (r).phyc_min_mrgn_chc[0] = 0
#define BCM84834_PHYC_MIN_MRGN_CHCr_SET(r,d) (r).phyc_min_mrgn_chc[0] = d
#define BCM84834_PHYC_MIN_MRGN_CHCr_GET(r) (r).phyc_min_mrgn_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MIN_MRGN_CHCr_MIN_MARGINf_GET(r) (((r).phyc_min_mrgn_chc[0]) & 0xffff)
#define BCM84834_PHYC_MIN_MRGN_CHCr_MIN_MARGINf_SET(r,f) (r).phyc_min_mrgn_chc[0]=(((r).phyc_min_mrgn_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MIN_MRGN_CHC.
 *
 */
#define BCM84834_READ_PHYC_MIN_MRGN_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MIN_MRGN_CHCr,(_r._phyc_min_mrgn_chc))
#define BCM84834_WRITE_PHYC_MIN_MRGN_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MIN_MRGN_CHCr,(_r._phyc_min_mrgn_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MIN_MRGN_CHCr BCM84834_PHYC_MIN_MRGN_CHCr
#define PHYC_MIN_MRGN_CHCr_SIZE BCM84834_PHYC_MIN_MRGN_CHCr_SIZE
typedef BCM84834_PHYC_MIN_MRGN_CHCr_t PHYC_MIN_MRGN_CHCr_t;
#define PHYC_MIN_MRGN_CHCr_CLR BCM84834_PHYC_MIN_MRGN_CHCr_CLR
#define PHYC_MIN_MRGN_CHCr_SET BCM84834_PHYC_MIN_MRGN_CHCr_SET
#define PHYC_MIN_MRGN_CHCr_GET BCM84834_PHYC_MIN_MRGN_CHCr_GET
#define PHYC_MIN_MRGN_CHCr_MIN_MARGINf_GET BCM84834_PHYC_MIN_MRGN_CHCr_MIN_MARGINf_GET
#define PHYC_MIN_MRGN_CHCr_MIN_MARGINf_SET BCM84834_PHYC_MIN_MRGN_CHCr_MIN_MARGINf_SET
#define READ_PHYC_MIN_MRGN_CHCr BCM84834_READ_PHYC_MIN_MRGN_CHCr
#define WRITE_PHYC_MIN_MRGN_CHCr BCM84834_WRITE_PHYC_MIN_MRGN_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MIN_MRGN_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_MIN_MRGN_CHD
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8dd
 * DEVAD:    1
 * DESC:     Minimum Margin Channel D
 * SIZE:     32
 * FIELDS:
 *     MIN_MARGIN       
 *
 ******************************************************************************/
#define BCM84834_PHYC_MIN_MRGN_CHDr (0x0001a8dd | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_MIN_MRGN_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_MIN_MRGN_CHD.
 *
 */
typedef union BCM84834_PHYC_MIN_MRGN_CHDr_s {
	uint32_t v[1];
	uint32_t phyc_min_mrgn_chd[1];
	uint32_t _phyc_min_mrgn_chd;
} BCM84834_PHYC_MIN_MRGN_CHDr_t;

#define BCM84834_PHYC_MIN_MRGN_CHDr_CLR(r) (r).phyc_min_mrgn_chd[0] = 0
#define BCM84834_PHYC_MIN_MRGN_CHDr_SET(r,d) (r).phyc_min_mrgn_chd[0] = d
#define BCM84834_PHYC_MIN_MRGN_CHDr_GET(r) (r).phyc_min_mrgn_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_MIN_MRGN_CHDr_MIN_MARGINf_GET(r) (((r).phyc_min_mrgn_chd[0]) & 0xffff)
#define BCM84834_PHYC_MIN_MRGN_CHDr_MIN_MARGINf_SET(r,f) (r).phyc_min_mrgn_chd[0]=(((r).phyc_min_mrgn_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_MIN_MRGN_CHD.
 *
 */
#define BCM84834_READ_PHYC_MIN_MRGN_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_MIN_MRGN_CHDr,(_r._phyc_min_mrgn_chd))
#define BCM84834_WRITE_PHYC_MIN_MRGN_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_MIN_MRGN_CHDr,(_r._phyc_min_mrgn_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_MIN_MRGN_CHDr BCM84834_PHYC_MIN_MRGN_CHDr
#define PHYC_MIN_MRGN_CHDr_SIZE BCM84834_PHYC_MIN_MRGN_CHDr_SIZE
typedef BCM84834_PHYC_MIN_MRGN_CHDr_t PHYC_MIN_MRGN_CHDr_t;
#define PHYC_MIN_MRGN_CHDr_CLR BCM84834_PHYC_MIN_MRGN_CHDr_CLR
#define PHYC_MIN_MRGN_CHDr_SET BCM84834_PHYC_MIN_MRGN_CHDr_SET
#define PHYC_MIN_MRGN_CHDr_GET BCM84834_PHYC_MIN_MRGN_CHDr_GET
#define PHYC_MIN_MRGN_CHDr_MIN_MARGINf_GET BCM84834_PHYC_MIN_MRGN_CHDr_MIN_MARGINf_GET
#define PHYC_MIN_MRGN_CHDr_MIN_MARGINf_SET BCM84834_PHYC_MIN_MRGN_CHDr_MIN_MARGINf_SET
#define READ_PHYC_MIN_MRGN_CHDr BCM84834_READ_PHYC_MIN_MRGN_CHDr
#define WRITE_PHYC_MIN_MRGN_CHDr BCM84834_WRITE_PHYC_MIN_MRGN_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_MIN_MRGN_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_SIG_PWR_CHA
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8de
 * DEVAD:    1
 * DESC:     RX Signal Power Channel A
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_SIG_PWR_CHAr (0x0001a8de | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_SIG_PWR_CHAr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_SIG_PWR_CHA.
 *
 */
typedef union BCM84834_PHYC_RX_SIG_PWR_CHAr_s {
	uint32_t v[1];
	uint32_t phyc_rx_sig_pwr_cha[1];
	uint32_t _phyc_rx_sig_pwr_cha;
} BCM84834_PHYC_RX_SIG_PWR_CHAr_t;

#define BCM84834_PHYC_RX_SIG_PWR_CHAr_CLR(r) (r).phyc_rx_sig_pwr_cha[0] = 0
#define BCM84834_PHYC_RX_SIG_PWR_CHAr_SET(r,d) (r).phyc_rx_sig_pwr_cha[0] = d
#define BCM84834_PHYC_RX_SIG_PWR_CHAr_GET(r) (r).phyc_rx_sig_pwr_cha[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET(r) (((r).phyc_rx_sig_pwr_cha[0]) & 0xffff)
#define BCM84834_PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET(r,f) (r).phyc_rx_sig_pwr_cha[0]=(((r).phyc_rx_sig_pwr_cha[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_SIG_PWR_CHA.
 *
 */
#define BCM84834_READ_PHYC_RX_SIG_PWR_CHAr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_SIG_PWR_CHAr,(_r._phyc_rx_sig_pwr_cha))
#define BCM84834_WRITE_PHYC_RX_SIG_PWR_CHAr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_SIG_PWR_CHAr,(_r._phyc_rx_sig_pwr_cha))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_SIG_PWR_CHAr BCM84834_PHYC_RX_SIG_PWR_CHAr
#define PHYC_RX_SIG_PWR_CHAr_SIZE BCM84834_PHYC_RX_SIG_PWR_CHAr_SIZE
typedef BCM84834_PHYC_RX_SIG_PWR_CHAr_t PHYC_RX_SIG_PWR_CHAr_t;
#define PHYC_RX_SIG_PWR_CHAr_CLR BCM84834_PHYC_RX_SIG_PWR_CHAr_CLR
#define PHYC_RX_SIG_PWR_CHAr_SET BCM84834_PHYC_RX_SIG_PWR_CHAr_SET
#define PHYC_RX_SIG_PWR_CHAr_GET BCM84834_PHYC_RX_SIG_PWR_CHAr_GET
#define PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET BCM84834_PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_GET
#define PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET BCM84834_PHYC_RX_SIG_PWR_CHAr_RX_SIG_POWERf_SET
#define READ_PHYC_RX_SIG_PWR_CHAr BCM84834_READ_PHYC_RX_SIG_PWR_CHAr
#define WRITE_PHYC_RX_SIG_PWR_CHAr BCM84834_WRITE_PHYC_RX_SIG_PWR_CHAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_SIG_PWR_CHAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_SIG_PWR_CHB
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8df
 * DEVAD:    1
 * DESC:     RX Signal Power Channel B
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_SIG_PWR_CHBr (0x0001a8df | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_SIG_PWR_CHBr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_SIG_PWR_CHB.
 *
 */
typedef union BCM84834_PHYC_RX_SIG_PWR_CHBr_s {
	uint32_t v[1];
	uint32_t phyc_rx_sig_pwr_chb[1];
	uint32_t _phyc_rx_sig_pwr_chb;
} BCM84834_PHYC_RX_SIG_PWR_CHBr_t;

#define BCM84834_PHYC_RX_SIG_PWR_CHBr_CLR(r) (r).phyc_rx_sig_pwr_chb[0] = 0
#define BCM84834_PHYC_RX_SIG_PWR_CHBr_SET(r,d) (r).phyc_rx_sig_pwr_chb[0] = d
#define BCM84834_PHYC_RX_SIG_PWR_CHBr_GET(r) (r).phyc_rx_sig_pwr_chb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET(r) (((r).phyc_rx_sig_pwr_chb[0]) & 0xffff)
#define BCM84834_PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET(r,f) (r).phyc_rx_sig_pwr_chb[0]=(((r).phyc_rx_sig_pwr_chb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_SIG_PWR_CHB.
 *
 */
#define BCM84834_READ_PHYC_RX_SIG_PWR_CHBr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_SIG_PWR_CHBr,(_r._phyc_rx_sig_pwr_chb))
#define BCM84834_WRITE_PHYC_RX_SIG_PWR_CHBr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_SIG_PWR_CHBr,(_r._phyc_rx_sig_pwr_chb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_SIG_PWR_CHBr BCM84834_PHYC_RX_SIG_PWR_CHBr
#define PHYC_RX_SIG_PWR_CHBr_SIZE BCM84834_PHYC_RX_SIG_PWR_CHBr_SIZE
typedef BCM84834_PHYC_RX_SIG_PWR_CHBr_t PHYC_RX_SIG_PWR_CHBr_t;
#define PHYC_RX_SIG_PWR_CHBr_CLR BCM84834_PHYC_RX_SIG_PWR_CHBr_CLR
#define PHYC_RX_SIG_PWR_CHBr_SET BCM84834_PHYC_RX_SIG_PWR_CHBr_SET
#define PHYC_RX_SIG_PWR_CHBr_GET BCM84834_PHYC_RX_SIG_PWR_CHBr_GET
#define PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET BCM84834_PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_GET
#define PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET BCM84834_PHYC_RX_SIG_PWR_CHBr_RX_SIG_POWERf_SET
#define READ_PHYC_RX_SIG_PWR_CHBr BCM84834_READ_PHYC_RX_SIG_PWR_CHBr
#define WRITE_PHYC_RX_SIG_PWR_CHBr BCM84834_WRITE_PHYC_RX_SIG_PWR_CHBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_SIG_PWR_CHBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_SIG_PWR_CHC
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e0
 * DEVAD:    1
 * DESC:     RX Signal Power Channel C
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_SIG_PWR_CHCr (0x0001a8e0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_SIG_PWR_CHCr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_SIG_PWR_CHC.
 *
 */
typedef union BCM84834_PHYC_RX_SIG_PWR_CHCr_s {
	uint32_t v[1];
	uint32_t phyc_rx_sig_pwr_chc[1];
	uint32_t _phyc_rx_sig_pwr_chc;
} BCM84834_PHYC_RX_SIG_PWR_CHCr_t;

#define BCM84834_PHYC_RX_SIG_PWR_CHCr_CLR(r) (r).phyc_rx_sig_pwr_chc[0] = 0
#define BCM84834_PHYC_RX_SIG_PWR_CHCr_SET(r,d) (r).phyc_rx_sig_pwr_chc[0] = d
#define BCM84834_PHYC_RX_SIG_PWR_CHCr_GET(r) (r).phyc_rx_sig_pwr_chc[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET(r) (((r).phyc_rx_sig_pwr_chc[0]) & 0xffff)
#define BCM84834_PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET(r,f) (r).phyc_rx_sig_pwr_chc[0]=(((r).phyc_rx_sig_pwr_chc[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_SIG_PWR_CHC.
 *
 */
#define BCM84834_READ_PHYC_RX_SIG_PWR_CHCr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_SIG_PWR_CHCr,(_r._phyc_rx_sig_pwr_chc))
#define BCM84834_WRITE_PHYC_RX_SIG_PWR_CHCr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_SIG_PWR_CHCr,(_r._phyc_rx_sig_pwr_chc))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_SIG_PWR_CHCr BCM84834_PHYC_RX_SIG_PWR_CHCr
#define PHYC_RX_SIG_PWR_CHCr_SIZE BCM84834_PHYC_RX_SIG_PWR_CHCr_SIZE
typedef BCM84834_PHYC_RX_SIG_PWR_CHCr_t PHYC_RX_SIG_PWR_CHCr_t;
#define PHYC_RX_SIG_PWR_CHCr_CLR BCM84834_PHYC_RX_SIG_PWR_CHCr_CLR
#define PHYC_RX_SIG_PWR_CHCr_SET BCM84834_PHYC_RX_SIG_PWR_CHCr_SET
#define PHYC_RX_SIG_PWR_CHCr_GET BCM84834_PHYC_RX_SIG_PWR_CHCr_GET
#define PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET BCM84834_PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_GET
#define PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET BCM84834_PHYC_RX_SIG_PWR_CHCr_RX_SIG_POWERf_SET
#define READ_PHYC_RX_SIG_PWR_CHCr BCM84834_READ_PHYC_RX_SIG_PWR_CHCr
#define WRITE_PHYC_RX_SIG_PWR_CHCr BCM84834_WRITE_PHYC_RX_SIG_PWR_CHCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_SIG_PWR_CHCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_SIG_PWR_CHD
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e1
 * DEVAD:    1
 * DESC:     RX Signal Power Channel D
 * SIZE:     32
 * FIELDS:
 *     RX_SIG_POWER     
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_SIG_PWR_CHDr (0x0001a8e1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_SIG_PWR_CHDr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_SIG_PWR_CHD.
 *
 */
typedef union BCM84834_PHYC_RX_SIG_PWR_CHDr_s {
	uint32_t v[1];
	uint32_t phyc_rx_sig_pwr_chd[1];
	uint32_t _phyc_rx_sig_pwr_chd;
} BCM84834_PHYC_RX_SIG_PWR_CHDr_t;

#define BCM84834_PHYC_RX_SIG_PWR_CHDr_CLR(r) (r).phyc_rx_sig_pwr_chd[0] = 0
#define BCM84834_PHYC_RX_SIG_PWR_CHDr_SET(r,d) (r).phyc_rx_sig_pwr_chd[0] = d
#define BCM84834_PHYC_RX_SIG_PWR_CHDr_GET(r) (r).phyc_rx_sig_pwr_chd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET(r) (((r).phyc_rx_sig_pwr_chd[0]) & 0xffff)
#define BCM84834_PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET(r,f) (r).phyc_rx_sig_pwr_chd[0]=(((r).phyc_rx_sig_pwr_chd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_SIG_PWR_CHD.
 *
 */
#define BCM84834_READ_PHYC_RX_SIG_PWR_CHDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_SIG_PWR_CHDr,(_r._phyc_rx_sig_pwr_chd))
#define BCM84834_WRITE_PHYC_RX_SIG_PWR_CHDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_SIG_PWR_CHDr,(_r._phyc_rx_sig_pwr_chd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_SIG_PWR_CHDr BCM84834_PHYC_RX_SIG_PWR_CHDr
#define PHYC_RX_SIG_PWR_CHDr_SIZE BCM84834_PHYC_RX_SIG_PWR_CHDr_SIZE
typedef BCM84834_PHYC_RX_SIG_PWR_CHDr_t PHYC_RX_SIG_PWR_CHDr_t;
#define PHYC_RX_SIG_PWR_CHDr_CLR BCM84834_PHYC_RX_SIG_PWR_CHDr_CLR
#define PHYC_RX_SIG_PWR_CHDr_SET BCM84834_PHYC_RX_SIG_PWR_CHDr_SET
#define PHYC_RX_SIG_PWR_CHDr_GET BCM84834_PHYC_RX_SIG_PWR_CHDr_GET
#define PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET BCM84834_PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_GET
#define PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET BCM84834_PHYC_RX_SIG_PWR_CHDr_RX_SIG_POWERf_SET
#define READ_PHYC_RX_SIG_PWR_CHDr BCM84834_READ_PHYC_RX_SIG_PWR_CHDr
#define WRITE_PHYC_RX_SIG_PWR_CHDr BCM84834_WRITE_PHYC_RX_SIG_PWR_CHDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_SIG_PWR_CHDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_START_RX_CNT_16K_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e2
 * DEVAD:    1
 * DESC:     TX Start RX Count 16k Count Value
 * SIZE:     32
 * FIELDS:
 *     TX_START_RX_CNT_16K_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr (0x0001a8e2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_START_RX_CNT_16K_VAL.
 *
 */
typedef union BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_s {
	uint32_t v[1];
	uint32_t phyc_tx_start_rx_cnt_16k_val[1];
	uint32_t _phyc_tx_start_rx_cnt_16k_val;
} BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_t;

#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_CLR(r) (r).phyc_tx_start_rx_cnt_16k_val[0] = 0
#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_SET(r,d) (r).phyc_tx_start_rx_cnt_16k_val[0] = d
#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_GET(r) (r).phyc_tx_start_rx_cnt_16k_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_GET(r) (((r).phyc_tx_start_rx_cnt_16k_val[0]) & 0x1fff)
#define BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_SET(r,f) (r).phyc_tx_start_rx_cnt_16k_val[0]=(((r).phyc_tx_start_rx_cnt_16k_val[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access PHYC_TX_START_RX_CNT_16K_VAL.
 *
 */
#define BCM84834_READ_PHYC_TX_START_RX_CNT_16K_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_START_RX_CNT_16K_VALr,(_r._phyc_tx_start_rx_cnt_16k_val))
#define BCM84834_WRITE_PHYC_TX_START_RX_CNT_16K_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_START_RX_CNT_16K_VALr,(_r._phyc_tx_start_rx_cnt_16k_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_START_RX_CNT_16K_VALr BCM84834_PHYC_TX_START_RX_CNT_16K_VALr
#define PHYC_TX_START_RX_CNT_16K_VALr_SIZE BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_SIZE
typedef BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_t PHYC_TX_START_RX_CNT_16K_VALr_t;
#define PHYC_TX_START_RX_CNT_16K_VALr_CLR BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_CLR
#define PHYC_TX_START_RX_CNT_16K_VALr_SET BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_SET
#define PHYC_TX_START_RX_CNT_16K_VALr_GET BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_GET
#define PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_GET BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_GET
#define PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_SET BCM84834_PHYC_TX_START_RX_CNT_16K_VALr_TX_START_RX_CNT_16K_VALf_SET
#define READ_PHYC_TX_START_RX_CNT_16K_VALr BCM84834_READ_PHYC_TX_START_RX_CNT_16K_VALr
#define WRITE_PHYC_TX_START_RX_CNT_16K_VALr BCM84834_WRITE_PHYC_TX_START_RX_CNT_16K_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_START_RX_CNT_16K_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_AUX_BACKCHANNEL_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e3
 * DEVAD:    1
 * DESC:     PCS AUX Bit Backchannel Control
 * SIZE:     32
 * FIELDS:
 *     TX_SHIFT_MODE    
 *     RX_SHIFT_MODE    
 *     RX_AUX_FRAME_CAPTURE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr (0x0001a8e3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_AUX_BACKCHANNEL_CTL.
 *
 */
typedef union BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_aux_backchannel_ctl[1];
	uint32_t _phyc_pcs_aux_backchannel_ctl;
} BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_t;

#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_CLR(r) (r).phyc_pcs_aux_backchannel_ctl[0] = 0
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_SET(r,d) (r).phyc_pcs_aux_backchannel_ctl[0] = d
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_GET(r) (r).phyc_pcs_aux_backchannel_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_GET(r) ((((r).phyc_pcs_aux_backchannel_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_SET(r,f) (r).phyc_pcs_aux_backchannel_ctl[0]=(((r).phyc_pcs_aux_backchannel_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_GET(r) ((((r).phyc_pcs_aux_backchannel_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_SET(r,f) (r).phyc_pcs_aux_backchannel_ctl[0]=(((r).phyc_pcs_aux_backchannel_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_GET(r) (((r).phyc_pcs_aux_backchannel_ctl[0]) & 0x1)
#define BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_SET(r,f) (r).phyc_pcs_aux_backchannel_ctl[0]=(((r).phyc_pcs_aux_backchannel_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_PCS_AUX_BACKCHANNEL_CTL.
 *
 */
#define BCM84834_READ_PHYC_PCS_AUX_BACKCHANNEL_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr,(_r._phyc_pcs_aux_backchannel_ctl))
#define BCM84834_WRITE_PHYC_PCS_AUX_BACKCHANNEL_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr,(_r._phyc_pcs_aux_backchannel_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_AUX_BACKCHANNEL_CTLr BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_SIZE BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_SIZE
typedef BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_t PHYC_PCS_AUX_BACKCHANNEL_CTLr_t;
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_CLR BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_CLR
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_SET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_SET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_GET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_GET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_GET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_GET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_SET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_AUX_FRAME_CAPTUREf_SET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_GET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_GET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_SET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_RX_SHIFT_MODEf_SET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_GET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_GET
#define PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_SET BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr_TX_SHIFT_MODEf_SET
#define READ_PHYC_PCS_AUX_BACKCHANNEL_CTLr BCM84834_READ_PHYC_PCS_AUX_BACKCHANNEL_CTLr
#define WRITE_PHYC_PCS_AUX_BACKCHANNEL_CTLr BCM84834_WRITE_PHYC_PCS_AUX_BACKCHANNEL_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_AUX_BACKCHANNEL_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_AUX_FRAME0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e4
 * DEVAD:    1
 * DESC:     PCS TX AUX Bit Write Data 0
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_FRAME0    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r (0x0001a8e4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_AUX_FRAME0.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_AUX_FRAME0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_aux_frame0[1];
	uint32_t _phyc_pcs_tx_aux_frame0;
} BCM84834_PHYC_PCS_TX_AUX_FRAME0r_t;

#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_CLR(r) (r).phyc_pcs_tx_aux_frame0[0] = 0
#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_SET(r,d) (r).phyc_pcs_tx_aux_frame0[0] = d
#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_GET(r) (r).phyc_pcs_tx_aux_frame0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_GET(r) (((r).phyc_pcs_tx_aux_frame0[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_SET(r,f) (r).phyc_pcs_tx_aux_frame0[0]=(((r).phyc_pcs_tx_aux_frame0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_AUX_FRAME0.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_AUX_FRAME0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME0r,(_r._phyc_pcs_tx_aux_frame0))
#define BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME0r,(_r._phyc_pcs_tx_aux_frame0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_AUX_FRAME0r BCM84834_PHYC_PCS_TX_AUX_FRAME0r
#define PHYC_PCS_TX_AUX_FRAME0r_SIZE BCM84834_PHYC_PCS_TX_AUX_FRAME0r_SIZE
typedef BCM84834_PHYC_PCS_TX_AUX_FRAME0r_t PHYC_PCS_TX_AUX_FRAME0r_t;
#define PHYC_PCS_TX_AUX_FRAME0r_CLR BCM84834_PHYC_PCS_TX_AUX_FRAME0r_CLR
#define PHYC_PCS_TX_AUX_FRAME0r_SET BCM84834_PHYC_PCS_TX_AUX_FRAME0r_SET
#define PHYC_PCS_TX_AUX_FRAME0r_GET BCM84834_PHYC_PCS_TX_AUX_FRAME0r_GET
#define PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_GET BCM84834_PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_GET
#define PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_SET BCM84834_PHYC_PCS_TX_AUX_FRAME0r_TX_AUX_FRAME0f_SET
#define READ_PHYC_PCS_TX_AUX_FRAME0r BCM84834_READ_PHYC_PCS_TX_AUX_FRAME0r
#define WRITE_PHYC_PCS_TX_AUX_FRAME0r BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_AUX_FRAME0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_AUX_FRAME1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e5
 * DEVAD:    1
 * DESC:     PCS TX AUX Bit Write Data 1
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_FRAME1    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r (0x0001a8e5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_AUX_FRAME1.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_AUX_FRAME1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_aux_frame1[1];
	uint32_t _phyc_pcs_tx_aux_frame1;
} BCM84834_PHYC_PCS_TX_AUX_FRAME1r_t;

#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_CLR(r) (r).phyc_pcs_tx_aux_frame1[0] = 0
#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_SET(r,d) (r).phyc_pcs_tx_aux_frame1[0] = d
#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_GET(r) (r).phyc_pcs_tx_aux_frame1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_GET(r) (((r).phyc_pcs_tx_aux_frame1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_SET(r,f) (r).phyc_pcs_tx_aux_frame1[0]=(((r).phyc_pcs_tx_aux_frame1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_AUX_FRAME1.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_AUX_FRAME1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME1r,(_r._phyc_pcs_tx_aux_frame1))
#define BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME1r,(_r._phyc_pcs_tx_aux_frame1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_AUX_FRAME1r BCM84834_PHYC_PCS_TX_AUX_FRAME1r
#define PHYC_PCS_TX_AUX_FRAME1r_SIZE BCM84834_PHYC_PCS_TX_AUX_FRAME1r_SIZE
typedef BCM84834_PHYC_PCS_TX_AUX_FRAME1r_t PHYC_PCS_TX_AUX_FRAME1r_t;
#define PHYC_PCS_TX_AUX_FRAME1r_CLR BCM84834_PHYC_PCS_TX_AUX_FRAME1r_CLR
#define PHYC_PCS_TX_AUX_FRAME1r_SET BCM84834_PHYC_PCS_TX_AUX_FRAME1r_SET
#define PHYC_PCS_TX_AUX_FRAME1r_GET BCM84834_PHYC_PCS_TX_AUX_FRAME1r_GET
#define PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_GET BCM84834_PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_GET
#define PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_SET BCM84834_PHYC_PCS_TX_AUX_FRAME1r_TX_AUX_FRAME1f_SET
#define READ_PHYC_PCS_TX_AUX_FRAME1r BCM84834_READ_PHYC_PCS_TX_AUX_FRAME1r
#define WRITE_PHYC_PCS_TX_AUX_FRAME1r BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_AUX_FRAME1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_AUX_FRAME2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e6
 * DEVAD:    1
 * DESC:     PCS TX AUX Bit Write Data 2
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_FRAME2    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r (0x0001a8e6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_AUX_FRAME2.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_AUX_FRAME2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_aux_frame2[1];
	uint32_t _phyc_pcs_tx_aux_frame2;
} BCM84834_PHYC_PCS_TX_AUX_FRAME2r_t;

#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_CLR(r) (r).phyc_pcs_tx_aux_frame2[0] = 0
#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_SET(r,d) (r).phyc_pcs_tx_aux_frame2[0] = d
#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_GET(r) (r).phyc_pcs_tx_aux_frame2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_GET(r) (((r).phyc_pcs_tx_aux_frame2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_SET(r,f) (r).phyc_pcs_tx_aux_frame2[0]=(((r).phyc_pcs_tx_aux_frame2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_AUX_FRAME2.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_AUX_FRAME2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME2r,(_r._phyc_pcs_tx_aux_frame2))
#define BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME2r,(_r._phyc_pcs_tx_aux_frame2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_AUX_FRAME2r BCM84834_PHYC_PCS_TX_AUX_FRAME2r
#define PHYC_PCS_TX_AUX_FRAME2r_SIZE BCM84834_PHYC_PCS_TX_AUX_FRAME2r_SIZE
typedef BCM84834_PHYC_PCS_TX_AUX_FRAME2r_t PHYC_PCS_TX_AUX_FRAME2r_t;
#define PHYC_PCS_TX_AUX_FRAME2r_CLR BCM84834_PHYC_PCS_TX_AUX_FRAME2r_CLR
#define PHYC_PCS_TX_AUX_FRAME2r_SET BCM84834_PHYC_PCS_TX_AUX_FRAME2r_SET
#define PHYC_PCS_TX_AUX_FRAME2r_GET BCM84834_PHYC_PCS_TX_AUX_FRAME2r_GET
#define PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_GET BCM84834_PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_GET
#define PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_SET BCM84834_PHYC_PCS_TX_AUX_FRAME2r_TX_AUX_FRAME2f_SET
#define READ_PHYC_PCS_TX_AUX_FRAME2r BCM84834_READ_PHYC_PCS_TX_AUX_FRAME2r
#define WRITE_PHYC_PCS_TX_AUX_FRAME2r BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_AUX_FRAME2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_AUX_FRAME3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e7
 * DEVAD:    1
 * DESC:     PCS TX AUX Bit Write Data 3
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_FRAME3    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r (0x0001a8e7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_AUX_FRAME3.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_AUX_FRAME3r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_aux_frame3[1];
	uint32_t _phyc_pcs_tx_aux_frame3;
} BCM84834_PHYC_PCS_TX_AUX_FRAME3r_t;

#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_CLR(r) (r).phyc_pcs_tx_aux_frame3[0] = 0
#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_SET(r,d) (r).phyc_pcs_tx_aux_frame3[0] = d
#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_GET(r) (r).phyc_pcs_tx_aux_frame3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_GET(r) (((r).phyc_pcs_tx_aux_frame3[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_SET(r,f) (r).phyc_pcs_tx_aux_frame3[0]=(((r).phyc_pcs_tx_aux_frame3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_AUX_FRAME3.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_AUX_FRAME3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME3r,(_r._phyc_pcs_tx_aux_frame3))
#define BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_AUX_FRAME3r,(_r._phyc_pcs_tx_aux_frame3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_AUX_FRAME3r BCM84834_PHYC_PCS_TX_AUX_FRAME3r
#define PHYC_PCS_TX_AUX_FRAME3r_SIZE BCM84834_PHYC_PCS_TX_AUX_FRAME3r_SIZE
typedef BCM84834_PHYC_PCS_TX_AUX_FRAME3r_t PHYC_PCS_TX_AUX_FRAME3r_t;
#define PHYC_PCS_TX_AUX_FRAME3r_CLR BCM84834_PHYC_PCS_TX_AUX_FRAME3r_CLR
#define PHYC_PCS_TX_AUX_FRAME3r_SET BCM84834_PHYC_PCS_TX_AUX_FRAME3r_SET
#define PHYC_PCS_TX_AUX_FRAME3r_GET BCM84834_PHYC_PCS_TX_AUX_FRAME3r_GET
#define PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_GET BCM84834_PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_GET
#define PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_SET BCM84834_PHYC_PCS_TX_AUX_FRAME3r_TX_AUX_FRAME3f_SET
#define READ_PHYC_PCS_TX_AUX_FRAME3r BCM84834_READ_PHYC_PCS_TX_AUX_FRAME3r
#define WRITE_PHYC_PCS_TX_AUX_FRAME3r BCM84834_WRITE_PHYC_PCS_TX_AUX_FRAME3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_AUX_FRAME3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_AUX_FRAME0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e8
 * DEVAD:    1
 * DESC:     PCS RX AUX Bit Read Data 0
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_FRAME0    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r (0x0001a8e8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_AUX_FRAME0.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_AUX_FRAME0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_aux_frame0[1];
	uint32_t _phyc_pcs_rx_aux_frame0;
} BCM84834_PHYC_PCS_RX_AUX_FRAME0r_t;

#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_CLR(r) (r).phyc_pcs_rx_aux_frame0[0] = 0
#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_SET(r,d) (r).phyc_pcs_rx_aux_frame0[0] = d
#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_GET(r) (r).phyc_pcs_rx_aux_frame0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_GET(r) (((r).phyc_pcs_rx_aux_frame0[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_SET(r,f) (r).phyc_pcs_rx_aux_frame0[0]=(((r).phyc_pcs_rx_aux_frame0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_AUX_FRAME0.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_AUX_FRAME0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME0r,(_r._phyc_pcs_rx_aux_frame0))
#define BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME0r,(_r._phyc_pcs_rx_aux_frame0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_AUX_FRAME0r BCM84834_PHYC_PCS_RX_AUX_FRAME0r
#define PHYC_PCS_RX_AUX_FRAME0r_SIZE BCM84834_PHYC_PCS_RX_AUX_FRAME0r_SIZE
typedef BCM84834_PHYC_PCS_RX_AUX_FRAME0r_t PHYC_PCS_RX_AUX_FRAME0r_t;
#define PHYC_PCS_RX_AUX_FRAME0r_CLR BCM84834_PHYC_PCS_RX_AUX_FRAME0r_CLR
#define PHYC_PCS_RX_AUX_FRAME0r_SET BCM84834_PHYC_PCS_RX_AUX_FRAME0r_SET
#define PHYC_PCS_RX_AUX_FRAME0r_GET BCM84834_PHYC_PCS_RX_AUX_FRAME0r_GET
#define PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_GET BCM84834_PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_GET
#define PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_SET BCM84834_PHYC_PCS_RX_AUX_FRAME0r_RX_AUX_FRAME0f_SET
#define READ_PHYC_PCS_RX_AUX_FRAME0r BCM84834_READ_PHYC_PCS_RX_AUX_FRAME0r
#define WRITE_PHYC_PCS_RX_AUX_FRAME0r BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_AUX_FRAME0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_AUX_FRAME1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8e9
 * DEVAD:    1
 * DESC:     PCS RX AUX Bit Read Data 1
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_FRAME1    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r (0x0001a8e9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_AUX_FRAME1.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_AUX_FRAME1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_aux_frame1[1];
	uint32_t _phyc_pcs_rx_aux_frame1;
} BCM84834_PHYC_PCS_RX_AUX_FRAME1r_t;

#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_CLR(r) (r).phyc_pcs_rx_aux_frame1[0] = 0
#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_SET(r,d) (r).phyc_pcs_rx_aux_frame1[0] = d
#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_GET(r) (r).phyc_pcs_rx_aux_frame1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_GET(r) (((r).phyc_pcs_rx_aux_frame1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_SET(r,f) (r).phyc_pcs_rx_aux_frame1[0]=(((r).phyc_pcs_rx_aux_frame1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_AUX_FRAME1.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_AUX_FRAME1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME1r,(_r._phyc_pcs_rx_aux_frame1))
#define BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME1r,(_r._phyc_pcs_rx_aux_frame1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_AUX_FRAME1r BCM84834_PHYC_PCS_RX_AUX_FRAME1r
#define PHYC_PCS_RX_AUX_FRAME1r_SIZE BCM84834_PHYC_PCS_RX_AUX_FRAME1r_SIZE
typedef BCM84834_PHYC_PCS_RX_AUX_FRAME1r_t PHYC_PCS_RX_AUX_FRAME1r_t;
#define PHYC_PCS_RX_AUX_FRAME1r_CLR BCM84834_PHYC_PCS_RX_AUX_FRAME1r_CLR
#define PHYC_PCS_RX_AUX_FRAME1r_SET BCM84834_PHYC_PCS_RX_AUX_FRAME1r_SET
#define PHYC_PCS_RX_AUX_FRAME1r_GET BCM84834_PHYC_PCS_RX_AUX_FRAME1r_GET
#define PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_GET BCM84834_PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_GET
#define PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_SET BCM84834_PHYC_PCS_RX_AUX_FRAME1r_RX_AUX_FRAME1f_SET
#define READ_PHYC_PCS_RX_AUX_FRAME1r BCM84834_READ_PHYC_PCS_RX_AUX_FRAME1r
#define WRITE_PHYC_PCS_RX_AUX_FRAME1r BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_AUX_FRAME1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_AUX_FRAME2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ea
 * DEVAD:    1
 * DESC:     PCS RX AUX Bit Read Data 2
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_FRAME2    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r (0x0001a8ea | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_AUX_FRAME2.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_AUX_FRAME2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_aux_frame2[1];
	uint32_t _phyc_pcs_rx_aux_frame2;
} BCM84834_PHYC_PCS_RX_AUX_FRAME2r_t;

#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_CLR(r) (r).phyc_pcs_rx_aux_frame2[0] = 0
#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_SET(r,d) (r).phyc_pcs_rx_aux_frame2[0] = d
#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_GET(r) (r).phyc_pcs_rx_aux_frame2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_GET(r) (((r).phyc_pcs_rx_aux_frame2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_SET(r,f) (r).phyc_pcs_rx_aux_frame2[0]=(((r).phyc_pcs_rx_aux_frame2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_AUX_FRAME2.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_AUX_FRAME2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME2r,(_r._phyc_pcs_rx_aux_frame2))
#define BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME2r,(_r._phyc_pcs_rx_aux_frame2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_AUX_FRAME2r BCM84834_PHYC_PCS_RX_AUX_FRAME2r
#define PHYC_PCS_RX_AUX_FRAME2r_SIZE BCM84834_PHYC_PCS_RX_AUX_FRAME2r_SIZE
typedef BCM84834_PHYC_PCS_RX_AUX_FRAME2r_t PHYC_PCS_RX_AUX_FRAME2r_t;
#define PHYC_PCS_RX_AUX_FRAME2r_CLR BCM84834_PHYC_PCS_RX_AUX_FRAME2r_CLR
#define PHYC_PCS_RX_AUX_FRAME2r_SET BCM84834_PHYC_PCS_RX_AUX_FRAME2r_SET
#define PHYC_PCS_RX_AUX_FRAME2r_GET BCM84834_PHYC_PCS_RX_AUX_FRAME2r_GET
#define PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_GET BCM84834_PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_GET
#define PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_SET BCM84834_PHYC_PCS_RX_AUX_FRAME2r_RX_AUX_FRAME2f_SET
#define READ_PHYC_PCS_RX_AUX_FRAME2r BCM84834_READ_PHYC_PCS_RX_AUX_FRAME2r
#define WRITE_PHYC_PCS_RX_AUX_FRAME2r BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_AUX_FRAME2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_AUX_FRAME3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8eb
 * DEVAD:    1
 * DESC:     PCS RX AUX Bit Read Data 3
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_FRAME3    
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r (0x0001a8eb | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_AUX_FRAME3.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_AUX_FRAME3r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_aux_frame3[1];
	uint32_t _phyc_pcs_rx_aux_frame3;
} BCM84834_PHYC_PCS_RX_AUX_FRAME3r_t;

#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_CLR(r) (r).phyc_pcs_rx_aux_frame3[0] = 0
#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_SET(r,d) (r).phyc_pcs_rx_aux_frame3[0] = d
#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_GET(r) (r).phyc_pcs_rx_aux_frame3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_GET(r) (((r).phyc_pcs_rx_aux_frame3[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_SET(r,f) (r).phyc_pcs_rx_aux_frame3[0]=(((r).phyc_pcs_rx_aux_frame3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_AUX_FRAME3.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_AUX_FRAME3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME3r,(_r._phyc_pcs_rx_aux_frame3))
#define BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_AUX_FRAME3r,(_r._phyc_pcs_rx_aux_frame3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_AUX_FRAME3r BCM84834_PHYC_PCS_RX_AUX_FRAME3r
#define PHYC_PCS_RX_AUX_FRAME3r_SIZE BCM84834_PHYC_PCS_RX_AUX_FRAME3r_SIZE
typedef BCM84834_PHYC_PCS_RX_AUX_FRAME3r_t PHYC_PCS_RX_AUX_FRAME3r_t;
#define PHYC_PCS_RX_AUX_FRAME3r_CLR BCM84834_PHYC_PCS_RX_AUX_FRAME3r_CLR
#define PHYC_PCS_RX_AUX_FRAME3r_SET BCM84834_PHYC_PCS_RX_AUX_FRAME3r_SET
#define PHYC_PCS_RX_AUX_FRAME3r_GET BCM84834_PHYC_PCS_RX_AUX_FRAME3r_GET
#define PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_GET BCM84834_PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_GET
#define PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_SET BCM84834_PHYC_PCS_RX_AUX_FRAME3r_RX_AUX_FRAME3f_SET
#define READ_PHYC_PCS_RX_AUX_FRAME3r BCM84834_READ_PHYC_PCS_RX_AUX_FRAME3r
#define WRITE_PHYC_PCS_RX_AUX_FRAME3r BCM84834_WRITE_PHYC_PCS_RX_AUX_FRAME3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_AUX_FRAME3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_CTL_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ec
 * DEVAD:    1
 * DESC:     LED Control 1
 * SIZE:     32
 * FIELDS:
 *     LED0_SEL_10G     
 *     LED1_SEL_10G     
 *     LED2_SEL_10G     
 *     LED3_SEL_10G     
 *     LED4_SEL_10G     
 *     LED0_STRETCH_EN  
 *     LED1_STRETCH_EN  
 *     LED2_STRETCH_EN  
 *     LED3_STRETCH_EN  
 *     LED4_STRETCH_EN  
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_CTL_1r (0x0001a8ec | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_CTL_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_CTL_1.
 *
 */
typedef union BCM84834_PHYC_LED_CTL_1r_s {
	uint32_t v[1];
	uint32_t phyc_led_ctl_1[1];
	uint32_t _phyc_led_ctl_1;
} BCM84834_PHYC_LED_CTL_1r_t;

#define BCM84834_PHYC_LED_CTL_1r_CLR(r) (r).phyc_led_ctl_1[0] = 0
#define BCM84834_PHYC_LED_CTL_1r_SET(r,d) (r).phyc_led_ctl_1[0] = d
#define BCM84834_PHYC_LED_CTL_1r_GET(r) (r).phyc_led_ctl_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_CTL_1r_LED4_STRETCH_ENf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED4_STRETCH_ENf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED_CTL_1r_LED3_STRETCH_ENf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED3_STRETCH_ENf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED_CTL_1r_LED2_STRETCH_ENf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED2_STRETCH_ENf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED_CTL_1r_LED1_STRETCH_ENf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED1_STRETCH_ENf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED_CTL_1r_LED0_STRETCH_ENf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED0_STRETCH_ENf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED_CTL_1r_LED4_SEL_10Gf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED4_SEL_10Gf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED_CTL_1r_LED3_SEL_10Gf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED3_SEL_10Gf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED_CTL_1r_LED2_SEL_10Gf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED2_SEL_10Gf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED_CTL_1r_LED1_SEL_10Gf_GET(r) ((((r).phyc_led_ctl_1[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED1_SEL_10Gf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED_CTL_1r_LED0_SEL_10Gf_GET(r) (((r).phyc_led_ctl_1[0]) & 0x1)
#define BCM84834_PHYC_LED_CTL_1r_LED0_SEL_10Gf_SET(r,f) (r).phyc_led_ctl_1[0]=(((r).phyc_led_ctl_1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED_CTL_1.
 *
 */
#define BCM84834_READ_PHYC_LED_CTL_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_CTL_1r,(_r._phyc_led_ctl_1))
#define BCM84834_WRITE_PHYC_LED_CTL_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_CTL_1r,(_r._phyc_led_ctl_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_CTL_1r BCM84834_PHYC_LED_CTL_1r
#define PHYC_LED_CTL_1r_SIZE BCM84834_PHYC_LED_CTL_1r_SIZE
typedef BCM84834_PHYC_LED_CTL_1r_t PHYC_LED_CTL_1r_t;
#define PHYC_LED_CTL_1r_CLR BCM84834_PHYC_LED_CTL_1r_CLR
#define PHYC_LED_CTL_1r_SET BCM84834_PHYC_LED_CTL_1r_SET
#define PHYC_LED_CTL_1r_GET BCM84834_PHYC_LED_CTL_1r_GET
#define PHYC_LED_CTL_1r_LED4_STRETCH_ENf_GET BCM84834_PHYC_LED_CTL_1r_LED4_STRETCH_ENf_GET
#define PHYC_LED_CTL_1r_LED4_STRETCH_ENf_SET BCM84834_PHYC_LED_CTL_1r_LED4_STRETCH_ENf_SET
#define PHYC_LED_CTL_1r_LED3_STRETCH_ENf_GET BCM84834_PHYC_LED_CTL_1r_LED3_STRETCH_ENf_GET
#define PHYC_LED_CTL_1r_LED3_STRETCH_ENf_SET BCM84834_PHYC_LED_CTL_1r_LED3_STRETCH_ENf_SET
#define PHYC_LED_CTL_1r_LED2_STRETCH_ENf_GET BCM84834_PHYC_LED_CTL_1r_LED2_STRETCH_ENf_GET
#define PHYC_LED_CTL_1r_LED2_STRETCH_ENf_SET BCM84834_PHYC_LED_CTL_1r_LED2_STRETCH_ENf_SET
#define PHYC_LED_CTL_1r_LED1_STRETCH_ENf_GET BCM84834_PHYC_LED_CTL_1r_LED1_STRETCH_ENf_GET
#define PHYC_LED_CTL_1r_LED1_STRETCH_ENf_SET BCM84834_PHYC_LED_CTL_1r_LED1_STRETCH_ENf_SET
#define PHYC_LED_CTL_1r_LED0_STRETCH_ENf_GET BCM84834_PHYC_LED_CTL_1r_LED0_STRETCH_ENf_GET
#define PHYC_LED_CTL_1r_LED0_STRETCH_ENf_SET BCM84834_PHYC_LED_CTL_1r_LED0_STRETCH_ENf_SET
#define PHYC_LED_CTL_1r_LED4_SEL_10Gf_GET BCM84834_PHYC_LED_CTL_1r_LED4_SEL_10Gf_GET
#define PHYC_LED_CTL_1r_LED4_SEL_10Gf_SET BCM84834_PHYC_LED_CTL_1r_LED4_SEL_10Gf_SET
#define PHYC_LED_CTL_1r_LED3_SEL_10Gf_GET BCM84834_PHYC_LED_CTL_1r_LED3_SEL_10Gf_GET
#define PHYC_LED_CTL_1r_LED3_SEL_10Gf_SET BCM84834_PHYC_LED_CTL_1r_LED3_SEL_10Gf_SET
#define PHYC_LED_CTL_1r_LED2_SEL_10Gf_GET BCM84834_PHYC_LED_CTL_1r_LED2_SEL_10Gf_GET
#define PHYC_LED_CTL_1r_LED2_SEL_10Gf_SET BCM84834_PHYC_LED_CTL_1r_LED2_SEL_10Gf_SET
#define PHYC_LED_CTL_1r_LED1_SEL_10Gf_GET BCM84834_PHYC_LED_CTL_1r_LED1_SEL_10Gf_GET
#define PHYC_LED_CTL_1r_LED1_SEL_10Gf_SET BCM84834_PHYC_LED_CTL_1r_LED1_SEL_10Gf_SET
#define PHYC_LED_CTL_1r_LED0_SEL_10Gf_GET BCM84834_PHYC_LED_CTL_1r_LED0_SEL_10Gf_GET
#define PHYC_LED_CTL_1r_LED0_SEL_10Gf_SET BCM84834_PHYC_LED_CTL_1r_LED0_SEL_10Gf_SET
#define READ_PHYC_LED_CTL_1r BCM84834_READ_PHYC_LED_CTL_1r
#define WRITE_PHYC_LED_CTL_1r BCM84834_WRITE_PHYC_LED_CTL_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_CTL_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_SOURCE_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ed
 * DEVAD:    1
 * DESC:     LED Source Extended
 * SIZE:     32
 * FIELDS:
 *     LED_SOURCE_EXT   
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_SOURCE_EXTr (0x0001a8ed | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_SOURCE_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_SOURCE_EXT.
 *
 */
typedef union BCM84834_PHYC_LED_SOURCE_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led_source_ext[1];
	uint32_t _phyc_led_source_ext;
} BCM84834_PHYC_LED_SOURCE_EXTr_t;

#define BCM84834_PHYC_LED_SOURCE_EXTr_CLR(r) (r).phyc_led_source_ext[0] = 0
#define BCM84834_PHYC_LED_SOURCE_EXTr_SET(r,d) (r).phyc_led_source_ext[0] = d
#define BCM84834_PHYC_LED_SOURCE_EXTr_GET(r) (r).phyc_led_source_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_GET(r) (((r).phyc_led_source_ext[0]) & 0xffff)
#define BCM84834_PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_SET(r,f) (r).phyc_led_source_ext[0]=(((r).phyc_led_source_ext[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_LED_SOURCE_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED_SOURCE_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_SOURCE_EXTr,(_r._phyc_led_source_ext))
#define BCM84834_WRITE_PHYC_LED_SOURCE_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_SOURCE_EXTr,(_r._phyc_led_source_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_SOURCE_EXTr BCM84834_PHYC_LED_SOURCE_EXTr
#define PHYC_LED_SOURCE_EXTr_SIZE BCM84834_PHYC_LED_SOURCE_EXTr_SIZE
typedef BCM84834_PHYC_LED_SOURCE_EXTr_t PHYC_LED_SOURCE_EXTr_t;
#define PHYC_LED_SOURCE_EXTr_CLR BCM84834_PHYC_LED_SOURCE_EXTr_CLR
#define PHYC_LED_SOURCE_EXTr_SET BCM84834_PHYC_LED_SOURCE_EXTr_SET
#define PHYC_LED_SOURCE_EXTr_GET BCM84834_PHYC_LED_SOURCE_EXTr_GET
#define PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_GET BCM84834_PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_GET
#define PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_SET BCM84834_PHYC_LED_SOURCE_EXTr_LED_SOURCE_EXTf_SET
#define READ_PHYC_LED_SOURCE_EXTr BCM84834_READ_PHYC_LED_SOURCE_EXTr
#define WRITE_PHYC_LED_SOURCE_EXTr BCM84834_WRITE_PHYC_LED_SOURCE_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_SOURCE_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED_SOURCE_SEL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ee
 * DEVAD:    1
 * DESC:     LED Source Select
 * SIZE:     32
 * FIELDS:
 *     XAUI2_SELECT     
 *     XAUI1_SELECT     
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED_SOURCE_SELr (0x0001a8ee | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED_SOURCE_SELr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED_SOURCE_SEL.
 *
 */
typedef union BCM84834_PHYC_LED_SOURCE_SELr_s {
	uint32_t v[1];
	uint32_t phyc_led_source_sel[1];
	uint32_t _phyc_led_source_sel;
} BCM84834_PHYC_LED_SOURCE_SELr_t;

#define BCM84834_PHYC_LED_SOURCE_SELr_CLR(r) (r).phyc_led_source_sel[0] = 0
#define BCM84834_PHYC_LED_SOURCE_SELr_SET(r,d) (r).phyc_led_source_sel[0] = d
#define BCM84834_PHYC_LED_SOURCE_SELr_GET(r) (r).phyc_led_source_sel[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_GET(r) ((((r).phyc_led_source_sel[0]) >> 2) & 0x3)
#define BCM84834_PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_SET(r,f) (r).phyc_led_source_sel[0]=(((r).phyc_led_source_sel[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCM84834_PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_GET(r) (((r).phyc_led_source_sel[0]) & 0x3)
#define BCM84834_PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_SET(r,f) (r).phyc_led_source_sel[0]=(((r).phyc_led_source_sel[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PHYC_LED_SOURCE_SEL.
 *
 */
#define BCM84834_READ_PHYC_LED_SOURCE_SELr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED_SOURCE_SELr,(_r._phyc_led_source_sel))
#define BCM84834_WRITE_PHYC_LED_SOURCE_SELr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED_SOURCE_SELr,(_r._phyc_led_source_sel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED_SOURCE_SELr BCM84834_PHYC_LED_SOURCE_SELr
#define PHYC_LED_SOURCE_SELr_SIZE BCM84834_PHYC_LED_SOURCE_SELr_SIZE
typedef BCM84834_PHYC_LED_SOURCE_SELr_t PHYC_LED_SOURCE_SELr_t;
#define PHYC_LED_SOURCE_SELr_CLR BCM84834_PHYC_LED_SOURCE_SELr_CLR
#define PHYC_LED_SOURCE_SELr_SET BCM84834_PHYC_LED_SOURCE_SELr_SET
#define PHYC_LED_SOURCE_SELr_GET BCM84834_PHYC_LED_SOURCE_SELr_GET
#define PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_GET BCM84834_PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_GET
#define PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_SET BCM84834_PHYC_LED_SOURCE_SELr_XAUI1_SELECTf_SET
#define PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_GET BCM84834_PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_GET
#define PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_SET BCM84834_PHYC_LED_SOURCE_SELr_XAUI2_SELECTf_SET
#define READ_PHYC_LED_SOURCE_SELr BCM84834_READ_PHYC_LED_SOURCE_SELr
#define WRITE_PHYC_LED_SOURCE_SELr BCM84834_WRITE_PHYC_LED_SOURCE_SELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED_SOURCE_SELr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED0_MASK_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ef
 * DEVAD:    1
 * DESC:     LED0 Mask Extended
 * SIZE:     32
 * FIELDS:
 *     LED_MASK32       
 *     LED_MASK33       
 *     LED_MASK34       
 *     LED_MASK35       
 *     LED_MASK36       
 *     LED_MASK37       
 *     LED_MASK38       
 *     LED_MASK39       
 *     LED_MASK40       
 *     LED_MASK41       
 *     LED_MASK42       
 *     LED_MASK43       
 *     LED_MASK44       
 *     LED_MASK45       
 *     LED_MASK46       
 *     LED_MASK47       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED0_MASK_EXTr (0x0001a8ef | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED0_MASK_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED0_MASK_EXT.
 *
 */
typedef union BCM84834_PHYC_LED0_MASK_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led0_mask_ext[1];
	uint32_t _phyc_led0_mask_ext;
} BCM84834_PHYC_LED0_MASK_EXTr_t;

#define BCM84834_PHYC_LED0_MASK_EXTr_CLR(r) (r).phyc_led0_mask_ext[0] = 0
#define BCM84834_PHYC_LED0_MASK_EXTr_SET(r,d) (r).phyc_led0_mask_ext[0] = d
#define BCM84834_PHYC_LED0_MASK_EXTr_GET(r) (r).phyc_led0_mask_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK47f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK47f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK46f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK46f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK45f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK45f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK44f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK44f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK43f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK43f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK42f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK42f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK41f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK41f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK40f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK40f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK39f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK39f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK38f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK38f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK37f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK37f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK36f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK36f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK35f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK35f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK34f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK34f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK33f_GET(r) ((((r).phyc_led0_mask_ext[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK33f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK32f_GET(r) (((r).phyc_led0_mask_ext[0]) & 0x1)
#define BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK32f_SET(r,f) (r).phyc_led0_mask_ext[0]=(((r).phyc_led0_mask_ext[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED0_MASK_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED0_MASK_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED0_MASK_EXTr,(_r._phyc_led0_mask_ext))
#define BCM84834_WRITE_PHYC_LED0_MASK_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED0_MASK_EXTr,(_r._phyc_led0_mask_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED0_MASK_EXTr BCM84834_PHYC_LED0_MASK_EXTr
#define PHYC_LED0_MASK_EXTr_SIZE BCM84834_PHYC_LED0_MASK_EXTr_SIZE
typedef BCM84834_PHYC_LED0_MASK_EXTr_t PHYC_LED0_MASK_EXTr_t;
#define PHYC_LED0_MASK_EXTr_CLR BCM84834_PHYC_LED0_MASK_EXTr_CLR
#define PHYC_LED0_MASK_EXTr_SET BCM84834_PHYC_LED0_MASK_EXTr_SET
#define PHYC_LED0_MASK_EXTr_GET BCM84834_PHYC_LED0_MASK_EXTr_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK47f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK47f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK47f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK47f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK46f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK46f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK46f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK46f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK45f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK45f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK45f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK45f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK44f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK44f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK44f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK44f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK43f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK43f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK43f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK43f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK42f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK42f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK42f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK42f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK41f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK41f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK41f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK41f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK40f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK40f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK40f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK40f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK39f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK39f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK39f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK39f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK38f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK38f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK38f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK38f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK37f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK37f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK37f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK37f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK36f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK36f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK36f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK36f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK35f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK35f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK35f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK35f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK34f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK34f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK34f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK34f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK33f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK33f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK33f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK33f_SET
#define PHYC_LED0_MASK_EXTr_LED_MASK32f_GET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK32f_GET
#define PHYC_LED0_MASK_EXTr_LED_MASK32f_SET BCM84834_PHYC_LED0_MASK_EXTr_LED_MASK32f_SET
#define READ_PHYC_LED0_MASK_EXTr BCM84834_READ_PHYC_LED0_MASK_EXTr
#define WRITE_PHYC_LED0_MASK_EXTr BCM84834_WRITE_PHYC_LED0_MASK_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED0_MASK_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED1_MASK_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f0
 * DEVAD:    1
 * DESC:     LED1 Mask Extended
 * SIZE:     32
 * FIELDS:
 *     LED_MASK32       
 *     LED_MASK33       
 *     LED_MASK34       
 *     LED_MASK35       
 *     LED_MASK36       
 *     LED_MASK37       
 *     LED_MASK38       
 *     LED_MASK39       
 *     LED_MASK40       
 *     LED_MASK41       
 *     LED_MASK42       
 *     LED_MASK43       
 *     LED_MASK44       
 *     LED_MASK45       
 *     LED_MASK46       
 *     LED_MASK47       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED1_MASK_EXTr (0x0001a8f0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED1_MASK_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED1_MASK_EXT.
 *
 */
typedef union BCM84834_PHYC_LED1_MASK_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led1_mask_ext[1];
	uint32_t _phyc_led1_mask_ext;
} BCM84834_PHYC_LED1_MASK_EXTr_t;

#define BCM84834_PHYC_LED1_MASK_EXTr_CLR(r) (r).phyc_led1_mask_ext[0] = 0
#define BCM84834_PHYC_LED1_MASK_EXTr_SET(r,d) (r).phyc_led1_mask_ext[0] = d
#define BCM84834_PHYC_LED1_MASK_EXTr_GET(r) (r).phyc_led1_mask_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK47f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK47f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK46f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK46f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK45f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK45f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK44f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK44f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK43f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK43f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK42f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK42f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK41f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK41f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK40f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK40f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK39f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK39f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK38f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK38f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK37f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK37f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK36f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK36f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK35f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK35f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK34f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK34f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK33f_GET(r) ((((r).phyc_led1_mask_ext[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK33f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK32f_GET(r) (((r).phyc_led1_mask_ext[0]) & 0x1)
#define BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK32f_SET(r,f) (r).phyc_led1_mask_ext[0]=(((r).phyc_led1_mask_ext[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED1_MASK_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED1_MASK_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED1_MASK_EXTr,(_r._phyc_led1_mask_ext))
#define BCM84834_WRITE_PHYC_LED1_MASK_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED1_MASK_EXTr,(_r._phyc_led1_mask_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED1_MASK_EXTr BCM84834_PHYC_LED1_MASK_EXTr
#define PHYC_LED1_MASK_EXTr_SIZE BCM84834_PHYC_LED1_MASK_EXTr_SIZE
typedef BCM84834_PHYC_LED1_MASK_EXTr_t PHYC_LED1_MASK_EXTr_t;
#define PHYC_LED1_MASK_EXTr_CLR BCM84834_PHYC_LED1_MASK_EXTr_CLR
#define PHYC_LED1_MASK_EXTr_SET BCM84834_PHYC_LED1_MASK_EXTr_SET
#define PHYC_LED1_MASK_EXTr_GET BCM84834_PHYC_LED1_MASK_EXTr_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK47f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK47f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK47f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK47f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK46f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK46f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK46f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK46f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK45f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK45f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK45f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK45f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK44f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK44f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK44f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK44f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK43f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK43f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK43f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK43f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK42f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK42f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK42f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK42f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK41f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK41f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK41f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK41f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK40f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK40f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK40f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK40f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK39f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK39f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK39f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK39f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK38f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK38f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK38f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK38f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK37f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK37f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK37f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK37f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK36f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK36f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK36f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK36f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK35f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK35f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK35f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK35f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK34f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK34f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK34f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK34f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK33f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK33f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK33f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK33f_SET
#define PHYC_LED1_MASK_EXTr_LED_MASK32f_GET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK32f_GET
#define PHYC_LED1_MASK_EXTr_LED_MASK32f_SET BCM84834_PHYC_LED1_MASK_EXTr_LED_MASK32f_SET
#define READ_PHYC_LED1_MASK_EXTr BCM84834_READ_PHYC_LED1_MASK_EXTr
#define WRITE_PHYC_LED1_MASK_EXTr BCM84834_WRITE_PHYC_LED1_MASK_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED1_MASK_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED2_MASK_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f1
 * DEVAD:    1
 * DESC:     LED2 Mask Extended
 * SIZE:     32
 * FIELDS:
 *     LED_MASK32       
 *     LED_MASK33       
 *     LED_MASK34       
 *     LED_MASK35       
 *     LED_MASK36       
 *     LED_MASK37       
 *     LED_MASK38       
 *     LED_MASK39       
 *     LED_MASK40       
 *     LED_MASK41       
 *     LED_MASK42       
 *     LED_MASK43       
 *     LED_MASK44       
 *     LED_MASK45       
 *     LED_MASK46       
 *     LED_MASK47       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED2_MASK_EXTr (0x0001a8f1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED2_MASK_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED2_MASK_EXT.
 *
 */
typedef union BCM84834_PHYC_LED2_MASK_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led2_mask_ext[1];
	uint32_t _phyc_led2_mask_ext;
} BCM84834_PHYC_LED2_MASK_EXTr_t;

#define BCM84834_PHYC_LED2_MASK_EXTr_CLR(r) (r).phyc_led2_mask_ext[0] = 0
#define BCM84834_PHYC_LED2_MASK_EXTr_SET(r,d) (r).phyc_led2_mask_ext[0] = d
#define BCM84834_PHYC_LED2_MASK_EXTr_GET(r) (r).phyc_led2_mask_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK47f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK47f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK46f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK46f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK45f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK45f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK44f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK44f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK43f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK43f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK42f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK42f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK41f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK41f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK40f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK40f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK39f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK39f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK38f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK38f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK37f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK37f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK36f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK36f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK35f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK35f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK34f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK34f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK33f_GET(r) ((((r).phyc_led2_mask_ext[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK33f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK32f_GET(r) (((r).phyc_led2_mask_ext[0]) & 0x1)
#define BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK32f_SET(r,f) (r).phyc_led2_mask_ext[0]=(((r).phyc_led2_mask_ext[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED2_MASK_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED2_MASK_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED2_MASK_EXTr,(_r._phyc_led2_mask_ext))
#define BCM84834_WRITE_PHYC_LED2_MASK_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED2_MASK_EXTr,(_r._phyc_led2_mask_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED2_MASK_EXTr BCM84834_PHYC_LED2_MASK_EXTr
#define PHYC_LED2_MASK_EXTr_SIZE BCM84834_PHYC_LED2_MASK_EXTr_SIZE
typedef BCM84834_PHYC_LED2_MASK_EXTr_t PHYC_LED2_MASK_EXTr_t;
#define PHYC_LED2_MASK_EXTr_CLR BCM84834_PHYC_LED2_MASK_EXTr_CLR
#define PHYC_LED2_MASK_EXTr_SET BCM84834_PHYC_LED2_MASK_EXTr_SET
#define PHYC_LED2_MASK_EXTr_GET BCM84834_PHYC_LED2_MASK_EXTr_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK47f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK47f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK47f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK47f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK46f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK46f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK46f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK46f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK45f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK45f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK45f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK45f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK44f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK44f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK44f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK44f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK43f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK43f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK43f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK43f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK42f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK42f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK42f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK42f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK41f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK41f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK41f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK41f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK40f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK40f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK40f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK40f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK39f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK39f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK39f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK39f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK38f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK38f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK38f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK38f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK37f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK37f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK37f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK37f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK36f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK36f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK36f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK36f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK35f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK35f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK35f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK35f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK34f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK34f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK34f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK34f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK33f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK33f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK33f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK33f_SET
#define PHYC_LED2_MASK_EXTr_LED_MASK32f_GET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK32f_GET
#define PHYC_LED2_MASK_EXTr_LED_MASK32f_SET BCM84834_PHYC_LED2_MASK_EXTr_LED_MASK32f_SET
#define READ_PHYC_LED2_MASK_EXTr BCM84834_READ_PHYC_LED2_MASK_EXTr
#define WRITE_PHYC_LED2_MASK_EXTr BCM84834_WRITE_PHYC_LED2_MASK_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED2_MASK_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED3_MASK_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f2
 * DEVAD:    1
 * DESC:     LED3 Mask Extended
 * SIZE:     32
 * FIELDS:
 *     LED_MASK32       
 *     LED_MASK33       
 *     LED_MASK34       
 *     LED_MASK35       
 *     LED_MASK36       
 *     LED_MASK37       
 *     LED_MASK38       
 *     LED_MASK39       
 *     LED_MASK40       
 *     LED_MASK41       
 *     LED_MASK42       
 *     LED_MASK43       
 *     LED_MASK44       
 *     LED_MASK45       
 *     LED_MASK46       
 *     LED_MASK47       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED3_MASK_EXTr (0x0001a8f2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED3_MASK_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED3_MASK_EXT.
 *
 */
typedef union BCM84834_PHYC_LED3_MASK_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led3_mask_ext[1];
	uint32_t _phyc_led3_mask_ext;
} BCM84834_PHYC_LED3_MASK_EXTr_t;

#define BCM84834_PHYC_LED3_MASK_EXTr_CLR(r) (r).phyc_led3_mask_ext[0] = 0
#define BCM84834_PHYC_LED3_MASK_EXTr_SET(r,d) (r).phyc_led3_mask_ext[0] = d
#define BCM84834_PHYC_LED3_MASK_EXTr_GET(r) (r).phyc_led3_mask_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK47f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK47f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK46f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK46f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK45f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK45f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK44f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK44f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK43f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK43f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK42f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK42f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK41f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK41f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK40f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK40f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK39f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK39f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK38f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK38f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK37f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK37f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK36f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK36f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK35f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK35f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK34f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK34f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK33f_GET(r) ((((r).phyc_led3_mask_ext[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK33f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK32f_GET(r) (((r).phyc_led3_mask_ext[0]) & 0x1)
#define BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK32f_SET(r,f) (r).phyc_led3_mask_ext[0]=(((r).phyc_led3_mask_ext[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED3_MASK_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED3_MASK_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED3_MASK_EXTr,(_r._phyc_led3_mask_ext))
#define BCM84834_WRITE_PHYC_LED3_MASK_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED3_MASK_EXTr,(_r._phyc_led3_mask_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED3_MASK_EXTr BCM84834_PHYC_LED3_MASK_EXTr
#define PHYC_LED3_MASK_EXTr_SIZE BCM84834_PHYC_LED3_MASK_EXTr_SIZE
typedef BCM84834_PHYC_LED3_MASK_EXTr_t PHYC_LED3_MASK_EXTr_t;
#define PHYC_LED3_MASK_EXTr_CLR BCM84834_PHYC_LED3_MASK_EXTr_CLR
#define PHYC_LED3_MASK_EXTr_SET BCM84834_PHYC_LED3_MASK_EXTr_SET
#define PHYC_LED3_MASK_EXTr_GET BCM84834_PHYC_LED3_MASK_EXTr_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK47f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK47f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK47f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK47f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK46f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK46f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK46f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK46f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK45f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK45f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK45f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK45f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK44f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK44f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK44f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK44f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK43f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK43f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK43f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK43f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK42f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK42f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK42f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK42f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK41f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK41f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK41f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK41f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK40f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK40f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK40f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK40f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK39f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK39f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK39f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK39f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK38f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK38f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK38f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK38f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK37f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK37f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK37f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK37f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK36f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK36f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK36f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK36f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK35f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK35f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK35f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK35f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK34f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK34f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK34f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK34f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK33f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK33f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK33f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK33f_SET
#define PHYC_LED3_MASK_EXTr_LED_MASK32f_GET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK32f_GET
#define PHYC_LED3_MASK_EXTr_LED_MASK32f_SET BCM84834_PHYC_LED3_MASK_EXTr_LED_MASK32f_SET
#define READ_PHYC_LED3_MASK_EXTr BCM84834_READ_PHYC_LED3_MASK_EXTr
#define WRITE_PHYC_LED3_MASK_EXTr BCM84834_WRITE_PHYC_LED3_MASK_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED3_MASK_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LED4_MASK_EXT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f3
 * DEVAD:    1
 * DESC:     LED4 Mask Extended
 * SIZE:     32
 * FIELDS:
 *     LED_MASK32       
 *     LED_MASK33       
 *     LED_MASK34       
 *     LED_MASK35       
 *     LED_MASK36       
 *     LED_MASK37       
 *     LED_MASK38       
 *     LED_MASK39       
 *     LED_MASK40       
 *     LED_MASK41       
 *     LED_MASK42       
 *     LED_MASK43       
 *     LED_MASK44       
 *     LED_MASK45       
 *     LED_MASK46       
 *     LED_MASK47       
 *
 ******************************************************************************/
#define BCM84834_PHYC_LED4_MASK_EXTr (0x0001a8f3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LED4_MASK_EXTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LED4_MASK_EXT.
 *
 */
typedef union BCM84834_PHYC_LED4_MASK_EXTr_s {
	uint32_t v[1];
	uint32_t phyc_led4_mask_ext[1];
	uint32_t _phyc_led4_mask_ext;
} BCM84834_PHYC_LED4_MASK_EXTr_t;

#define BCM84834_PHYC_LED4_MASK_EXTr_CLR(r) (r).phyc_led4_mask_ext[0] = 0
#define BCM84834_PHYC_LED4_MASK_EXTr_SET(r,d) (r).phyc_led4_mask_ext[0] = d
#define BCM84834_PHYC_LED4_MASK_EXTr_GET(r) (r).phyc_led4_mask_ext[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK47f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 15) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK47f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK46f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 14) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK46f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK45f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 13) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK45f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK44f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 12) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK44f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK43f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 11) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK43f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK42f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 10) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK42f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK41f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK41f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK40f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK40f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK39f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 7) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK39f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK38f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 6) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK38f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK37f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 5) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK37f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK36f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 4) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK36f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK35f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 3) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK35f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK34f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 2) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK34f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK33f_GET(r) ((((r).phyc_led4_mask_ext[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK33f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK32f_GET(r) (((r).phyc_led4_mask_ext[0]) & 0x1)
#define BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK32f_SET(r,f) (r).phyc_led4_mask_ext[0]=(((r).phyc_led4_mask_ext[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LED4_MASK_EXT.
 *
 */
#define BCM84834_READ_PHYC_LED4_MASK_EXTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LED4_MASK_EXTr,(_r._phyc_led4_mask_ext))
#define BCM84834_WRITE_PHYC_LED4_MASK_EXTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LED4_MASK_EXTr,(_r._phyc_led4_mask_ext))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LED4_MASK_EXTr BCM84834_PHYC_LED4_MASK_EXTr
#define PHYC_LED4_MASK_EXTr_SIZE BCM84834_PHYC_LED4_MASK_EXTr_SIZE
typedef BCM84834_PHYC_LED4_MASK_EXTr_t PHYC_LED4_MASK_EXTr_t;
#define PHYC_LED4_MASK_EXTr_CLR BCM84834_PHYC_LED4_MASK_EXTr_CLR
#define PHYC_LED4_MASK_EXTr_SET BCM84834_PHYC_LED4_MASK_EXTr_SET
#define PHYC_LED4_MASK_EXTr_GET BCM84834_PHYC_LED4_MASK_EXTr_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK47f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK47f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK47f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK47f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK46f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK46f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK46f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK46f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK45f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK45f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK45f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK45f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK44f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK44f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK44f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK44f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK43f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK43f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK43f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK43f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK42f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK42f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK42f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK42f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK41f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK41f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK41f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK41f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK40f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK40f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK40f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK40f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK39f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK39f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK39f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK39f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK38f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK38f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK38f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK38f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK37f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK37f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK37f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK37f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK36f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK36f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK36f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK36f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK35f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK35f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK35f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK35f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK34f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK34f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK34f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK34f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK33f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK33f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK33f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK33f_SET
#define PHYC_LED4_MASK_EXTr_LED_MASK32f_GET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK32f_GET
#define PHYC_LED4_MASK_EXTr_LED_MASK32f_SET BCM84834_PHYC_LED4_MASK_EXTr_LED_MASK32f_SET
#define READ_PHYC_LED4_MASK_EXTr BCM84834_READ_PHYC_LED4_MASK_EXTr
#define WRITE_PHYC_LED4_MASK_EXTr BCM84834_WRITE_PHYC_LED4_MASK_EXTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LED4_MASK_EXTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_LCFAULT_10G
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f4
 * DEVAD:    1
 * DESC:     10G TX Local Fault
 * SIZE:     32
 * FIELDS:
 *     PMD_TX_LCFAULT_10G 
 *     PCS_TX_LCFAULT_10G 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_LCFAULT_10Gr (0x0001a8f4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_LCFAULT_10Gr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_LCFAULT_10G.
 *
 */
typedef union BCM84834_PHYC_TX_LCFAULT_10Gr_s {
	uint32_t v[1];
	uint32_t phyc_tx_lcfault_10g[1];
	uint32_t _phyc_tx_lcfault_10g;
} BCM84834_PHYC_TX_LCFAULT_10Gr_t;

#define BCM84834_PHYC_TX_LCFAULT_10Gr_CLR(r) (r).phyc_tx_lcfault_10g[0] = 0
#define BCM84834_PHYC_TX_LCFAULT_10Gr_SET(r,d) (r).phyc_tx_lcfault_10g[0] = d
#define BCM84834_PHYC_TX_LCFAULT_10Gr_GET(r) (r).phyc_tx_lcfault_10g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_GET(r) ((((r).phyc_tx_lcfault_10g[0]) >> 1) & 0x1)
#define BCM84834_PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_SET(r,f) (r).phyc_tx_lcfault_10g[0]=(((r).phyc_tx_lcfault_10g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_GET(r) (((r).phyc_tx_lcfault_10g[0]) & 0x1)
#define BCM84834_PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_SET(r,f) (r).phyc_tx_lcfault_10g[0]=(((r).phyc_tx_lcfault_10g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_TX_LCFAULT_10G.
 *
 */
#define BCM84834_READ_PHYC_TX_LCFAULT_10Gr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_LCFAULT_10Gr,(_r._phyc_tx_lcfault_10g))
#define BCM84834_WRITE_PHYC_TX_LCFAULT_10Gr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_LCFAULT_10Gr,(_r._phyc_tx_lcfault_10g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_LCFAULT_10Gr BCM84834_PHYC_TX_LCFAULT_10Gr
#define PHYC_TX_LCFAULT_10Gr_SIZE BCM84834_PHYC_TX_LCFAULT_10Gr_SIZE
typedef BCM84834_PHYC_TX_LCFAULT_10Gr_t PHYC_TX_LCFAULT_10Gr_t;
#define PHYC_TX_LCFAULT_10Gr_CLR BCM84834_PHYC_TX_LCFAULT_10Gr_CLR
#define PHYC_TX_LCFAULT_10Gr_SET BCM84834_PHYC_TX_LCFAULT_10Gr_SET
#define PHYC_TX_LCFAULT_10Gr_GET BCM84834_PHYC_TX_LCFAULT_10Gr_GET
#define PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_GET BCM84834_PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_GET
#define PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_SET BCM84834_PHYC_TX_LCFAULT_10Gr_PCS_TX_LCFAULT_10Gf_SET
#define PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_GET BCM84834_PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_GET
#define PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_SET BCM84834_PHYC_TX_LCFAULT_10Gr_PMD_TX_LCFAULT_10Gf_SET
#define READ_PHYC_TX_LCFAULT_10Gr BCM84834_READ_PHYC_TX_LCFAULT_10Gr
#define WRITE_PHYC_TX_LCFAULT_10Gr BCM84834_WRITE_PHYC_TX_LCFAULT_10Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_LCFAULT_10Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_STATISTICS_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f5
 * DEVAD:    1
 * DESC:     EEE Statistics Control
 * SIZE:     32
 * FIELDS:
 *     LPI_STAT_CLR_EN  
 *     LPI_DURATION_MODE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_STATISTICS_CTLr (0x0001a8f5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_STATISTICS_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_STATISTICS_CTL.
 *
 */
typedef union BCM84834_PHYC_EEE_STATISTICS_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_eee_statistics_ctl[1];
	uint32_t _phyc_eee_statistics_ctl;
} BCM84834_PHYC_EEE_STATISTICS_CTLr_t;

#define BCM84834_PHYC_EEE_STATISTICS_CTLr_CLR(r) (r).phyc_eee_statistics_ctl[0] = 0
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_SET(r,d) (r).phyc_eee_statistics_ctl[0] = d
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_GET(r) (r).phyc_eee_statistics_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_GET(r) ((((r).phyc_eee_statistics_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_SET(r,f) (r).phyc_eee_statistics_ctl[0]=(((r).phyc_eee_statistics_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_GET(r) (((r).phyc_eee_statistics_ctl[0]) & 0x1)
#define BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_SET(r,f) (r).phyc_eee_statistics_ctl[0]=(((r).phyc_eee_statistics_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_EEE_STATISTICS_CTL.
 *
 */
#define BCM84834_READ_PHYC_EEE_STATISTICS_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_STATISTICS_CTLr,(_r._phyc_eee_statistics_ctl))
#define BCM84834_WRITE_PHYC_EEE_STATISTICS_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_STATISTICS_CTLr,(_r._phyc_eee_statistics_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_STATISTICS_CTLr BCM84834_PHYC_EEE_STATISTICS_CTLr
#define PHYC_EEE_STATISTICS_CTLr_SIZE BCM84834_PHYC_EEE_STATISTICS_CTLr_SIZE
typedef BCM84834_PHYC_EEE_STATISTICS_CTLr_t PHYC_EEE_STATISTICS_CTLr_t;
#define PHYC_EEE_STATISTICS_CTLr_CLR BCM84834_PHYC_EEE_STATISTICS_CTLr_CLR
#define PHYC_EEE_STATISTICS_CTLr_SET BCM84834_PHYC_EEE_STATISTICS_CTLr_SET
#define PHYC_EEE_STATISTICS_CTLr_GET BCM84834_PHYC_EEE_STATISTICS_CTLr_GET
#define PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_GET BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_GET
#define PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_SET BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_DURATION_MODEf_SET
#define PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_GET BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_GET
#define PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_SET BCM84834_PHYC_EEE_STATISTICS_CTLr_LPI_STAT_CLR_ENf_SET
#define READ_PHYC_EEE_STATISTICS_CTLr BCM84834_READ_PHYC_EEE_STATISTICS_CTLr
#define WRITE_PHYC_EEE_STATISTICS_CTLr BCM84834_WRITE_PHYC_EEE_STATISTICS_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_STATISTICS_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_TX_EVENT_CNT_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f6
 * DEVAD:    1
 * DESC:     EEE Transmit Event Count High
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_EVENT_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr (0x0001a8f6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_TX_EVENT_CNT_HIGH.
 *
 */
typedef union BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_eee_tx_event_cnt_high[1];
	uint32_t _phyc_eee_tx_event_cnt_high;
} BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_t;

#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_CLR(r) (r).phyc_eee_tx_event_cnt_high[0] = 0
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_SET(r,d) (r).phyc_eee_tx_event_cnt_high[0] = d
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_GET(r) (r).phyc_eee_tx_event_cnt_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_GET(r) (((r).phyc_eee_tx_event_cnt_high[0]) & 0xffff)
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_SET(r,f) (r).phyc_eee_tx_event_cnt_high[0]=(((r).phyc_eee_tx_event_cnt_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_TX_EVENT_CNT_HIGH.
 *
 */
#define BCM84834_READ_PHYC_EEE_TX_EVENT_CNT_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr,(_r._phyc_eee_tx_event_cnt_high))
#define BCM84834_WRITE_PHYC_EEE_TX_EVENT_CNT_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr,(_r._phyc_eee_tx_event_cnt_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_TX_EVENT_CNT_HIGHr BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_SIZE BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_SIZE
typedef BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_t PHYC_EEE_TX_EVENT_CNT_HIGHr_t;
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_CLR BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_CLR
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_SET BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_SET
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_GET BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_GET
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_GET BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_GET
#define PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_SET BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr_TX_LPI_EVENT_CNTf_SET
#define READ_PHYC_EEE_TX_EVENT_CNT_HIGHr BCM84834_READ_PHYC_EEE_TX_EVENT_CNT_HIGHr
#define WRITE_PHYC_EEE_TX_EVENT_CNT_HIGHr BCM84834_WRITE_PHYC_EEE_TX_EVENT_CNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_TX_EVENT_CNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_TX_EVENT_CNT_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f7
 * DEVAD:    1
 * DESC:     EEE Transmit Event Count Low
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_EVENT_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr (0x0001a8f7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_TX_EVENT_CNT_LOW.
 *
 */
typedef union BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_eee_tx_event_cnt_low[1];
	uint32_t _phyc_eee_tx_event_cnt_low;
} BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_t;

#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_CLR(r) (r).phyc_eee_tx_event_cnt_low[0] = 0
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_SET(r,d) (r).phyc_eee_tx_event_cnt_low[0] = d
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_GET(r) (r).phyc_eee_tx_event_cnt_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_GET(r) (((r).phyc_eee_tx_event_cnt_low[0]) & 0xffff)
#define BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_SET(r,f) (r).phyc_eee_tx_event_cnt_low[0]=(((r).phyc_eee_tx_event_cnt_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_TX_EVENT_CNT_LOW.
 *
 */
#define BCM84834_READ_PHYC_EEE_TX_EVENT_CNT_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr,(_r._phyc_eee_tx_event_cnt_low))
#define BCM84834_WRITE_PHYC_EEE_TX_EVENT_CNT_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr,(_r._phyc_eee_tx_event_cnt_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_TX_EVENT_CNT_LOWr BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr
#define PHYC_EEE_TX_EVENT_CNT_LOWr_SIZE BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_SIZE
typedef BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_t PHYC_EEE_TX_EVENT_CNT_LOWr_t;
#define PHYC_EEE_TX_EVENT_CNT_LOWr_CLR BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_CLR
#define PHYC_EEE_TX_EVENT_CNT_LOWr_SET BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_SET
#define PHYC_EEE_TX_EVENT_CNT_LOWr_GET BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_GET
#define PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_GET BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_GET
#define PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_SET BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr_TX_LPI_EVENT_CNTf_SET
#define READ_PHYC_EEE_TX_EVENT_CNT_LOWr BCM84834_READ_PHYC_EEE_TX_EVENT_CNT_LOWr
#define WRITE_PHYC_EEE_TX_EVENT_CNT_LOWr BCM84834_WRITE_PHYC_EEE_TX_EVENT_CNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_TX_EVENT_CNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_TX_DURATION_CNT_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f8
 * DEVAD:    1
 * DESC:     EEE Transmit Duration Count High
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_DURATION_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr (0x0001a8f8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_TX_DURATION_CNT_HIGH.
 *
 */
typedef union BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_eee_tx_duration_cnt_high[1];
	uint32_t _phyc_eee_tx_duration_cnt_high;
} BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_t;

#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_CLR(r) (r).phyc_eee_tx_duration_cnt_high[0] = 0
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_SET(r,d) (r).phyc_eee_tx_duration_cnt_high[0] = d
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_GET(r) (r).phyc_eee_tx_duration_cnt_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_GET(r) (((r).phyc_eee_tx_duration_cnt_high[0]) & 0xffff)
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_SET(r,f) (r).phyc_eee_tx_duration_cnt_high[0]=(((r).phyc_eee_tx_duration_cnt_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_TX_DURATION_CNT_HIGH.
 *
 */
#define BCM84834_READ_PHYC_EEE_TX_DURATION_CNT_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr,(_r._phyc_eee_tx_duration_cnt_high))
#define BCM84834_WRITE_PHYC_EEE_TX_DURATION_CNT_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr,(_r._phyc_eee_tx_duration_cnt_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_TX_DURATION_CNT_HIGHr BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_SIZE BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_SIZE
typedef BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_t PHYC_EEE_TX_DURATION_CNT_HIGHr_t;
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_CLR BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_CLR
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_SET BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_SET
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_GET BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_GET
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_GET BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_GET
#define PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_SET BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr_TX_LPI_DURATION_CNTf_SET
#define READ_PHYC_EEE_TX_DURATION_CNT_HIGHr BCM84834_READ_PHYC_EEE_TX_DURATION_CNT_HIGHr
#define WRITE_PHYC_EEE_TX_DURATION_CNT_HIGHr BCM84834_WRITE_PHYC_EEE_TX_DURATION_CNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_TX_DURATION_CNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_TX_DURATION_CNT_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8f9
 * DEVAD:    1
 * DESC:     EEE Transmit Duration Count Low
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_DURATION_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr (0x0001a8f9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_TX_DURATION_CNT_LOW.
 *
 */
typedef union BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_eee_tx_duration_cnt_low[1];
	uint32_t _phyc_eee_tx_duration_cnt_low;
} BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_t;

#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_CLR(r) (r).phyc_eee_tx_duration_cnt_low[0] = 0
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_SET(r,d) (r).phyc_eee_tx_duration_cnt_low[0] = d
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_GET(r) (r).phyc_eee_tx_duration_cnt_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_GET(r) (((r).phyc_eee_tx_duration_cnt_low[0]) & 0xffff)
#define BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_SET(r,f) (r).phyc_eee_tx_duration_cnt_low[0]=(((r).phyc_eee_tx_duration_cnt_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_TX_DURATION_CNT_LOW.
 *
 */
#define BCM84834_READ_PHYC_EEE_TX_DURATION_CNT_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr,(_r._phyc_eee_tx_duration_cnt_low))
#define BCM84834_WRITE_PHYC_EEE_TX_DURATION_CNT_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr,(_r._phyc_eee_tx_duration_cnt_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_TX_DURATION_CNT_LOWr BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr
#define PHYC_EEE_TX_DURATION_CNT_LOWr_SIZE BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_SIZE
typedef BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_t PHYC_EEE_TX_DURATION_CNT_LOWr_t;
#define PHYC_EEE_TX_DURATION_CNT_LOWr_CLR BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_CLR
#define PHYC_EEE_TX_DURATION_CNT_LOWr_SET BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_SET
#define PHYC_EEE_TX_DURATION_CNT_LOWr_GET BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_GET
#define PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_GET BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_GET
#define PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_SET BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr_TX_LPI_DURATION_CNTf_SET
#define READ_PHYC_EEE_TX_DURATION_CNT_LOWr BCM84834_READ_PHYC_EEE_TX_DURATION_CNT_LOWr
#define WRITE_PHYC_EEE_TX_DURATION_CNT_LOWr BCM84834_WRITE_PHYC_EEE_TX_DURATION_CNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_TX_DURATION_CNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_RX_EVENT_CNT_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8fa
 * DEVAD:    1
 * DESC:     EEE Receive Event Count High
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_EVENT_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr (0x0001a8fa | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_RX_EVENT_CNT_HIGH.
 *
 */
typedef union BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_eee_rx_event_cnt_high[1];
	uint32_t _phyc_eee_rx_event_cnt_high;
} BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_t;

#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_CLR(r) (r).phyc_eee_rx_event_cnt_high[0] = 0
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_SET(r,d) (r).phyc_eee_rx_event_cnt_high[0] = d
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_GET(r) (r).phyc_eee_rx_event_cnt_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_GET(r) (((r).phyc_eee_rx_event_cnt_high[0]) & 0xffff)
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_SET(r,f) (r).phyc_eee_rx_event_cnt_high[0]=(((r).phyc_eee_rx_event_cnt_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_RX_EVENT_CNT_HIGH.
 *
 */
#define BCM84834_READ_PHYC_EEE_RX_EVENT_CNT_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr,(_r._phyc_eee_rx_event_cnt_high))
#define BCM84834_WRITE_PHYC_EEE_RX_EVENT_CNT_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr,(_r._phyc_eee_rx_event_cnt_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_RX_EVENT_CNT_HIGHr BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_SIZE BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_SIZE
typedef BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_t PHYC_EEE_RX_EVENT_CNT_HIGHr_t;
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_CLR BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_CLR
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_SET BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_SET
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_GET BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_GET
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_GET BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_GET
#define PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_SET BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr_RX_LPI_EVENT_CNTf_SET
#define READ_PHYC_EEE_RX_EVENT_CNT_HIGHr BCM84834_READ_PHYC_EEE_RX_EVENT_CNT_HIGHr
#define WRITE_PHYC_EEE_RX_EVENT_CNT_HIGHr BCM84834_WRITE_PHYC_EEE_RX_EVENT_CNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_RX_EVENT_CNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_RX_EVENT_CNT_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8fb
 * DEVAD:    1
 * DESC:     EEE Receive Event Count Low
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_EVENT_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr (0x0001a8fb | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_RX_EVENT_CNT_LOW.
 *
 */
typedef union BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_eee_rx_event_cnt_low[1];
	uint32_t _phyc_eee_rx_event_cnt_low;
} BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_t;

#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_CLR(r) (r).phyc_eee_rx_event_cnt_low[0] = 0
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_SET(r,d) (r).phyc_eee_rx_event_cnt_low[0] = d
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_GET(r) (r).phyc_eee_rx_event_cnt_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_GET(r) (((r).phyc_eee_rx_event_cnt_low[0]) & 0xffff)
#define BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_SET(r,f) (r).phyc_eee_rx_event_cnt_low[0]=(((r).phyc_eee_rx_event_cnt_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_RX_EVENT_CNT_LOW.
 *
 */
#define BCM84834_READ_PHYC_EEE_RX_EVENT_CNT_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr,(_r._phyc_eee_rx_event_cnt_low))
#define BCM84834_WRITE_PHYC_EEE_RX_EVENT_CNT_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr,(_r._phyc_eee_rx_event_cnt_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_RX_EVENT_CNT_LOWr BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr
#define PHYC_EEE_RX_EVENT_CNT_LOWr_SIZE BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_SIZE
typedef BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_t PHYC_EEE_RX_EVENT_CNT_LOWr_t;
#define PHYC_EEE_RX_EVENT_CNT_LOWr_CLR BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_CLR
#define PHYC_EEE_RX_EVENT_CNT_LOWr_SET BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_SET
#define PHYC_EEE_RX_EVENT_CNT_LOWr_GET BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_GET
#define PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_GET BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_GET
#define PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_SET BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr_RX_LPI_EVENT_CNTf_SET
#define READ_PHYC_EEE_RX_EVENT_CNT_LOWr BCM84834_READ_PHYC_EEE_RX_EVENT_CNT_LOWr
#define WRITE_PHYC_EEE_RX_EVENT_CNT_LOWr BCM84834_WRITE_PHYC_EEE_RX_EVENT_CNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_RX_EVENT_CNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_RX_DURATION_CNT_HIGH
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8fc
 * DEVAD:    1
 * DESC:     EEE Receive Duration Count High
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_DURATION_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr (0x0001a8fc | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_RX_DURATION_CNT_HIGH.
 *
 */
typedef union BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_s {
	uint32_t v[1];
	uint32_t phyc_eee_rx_duration_cnt_high[1];
	uint32_t _phyc_eee_rx_duration_cnt_high;
} BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_t;

#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_CLR(r) (r).phyc_eee_rx_duration_cnt_high[0] = 0
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_SET(r,d) (r).phyc_eee_rx_duration_cnt_high[0] = d
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_GET(r) (r).phyc_eee_rx_duration_cnt_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_GET(r) (((r).phyc_eee_rx_duration_cnt_high[0]) & 0xffff)
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_SET(r,f) (r).phyc_eee_rx_duration_cnt_high[0]=(((r).phyc_eee_rx_duration_cnt_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_RX_DURATION_CNT_HIGH.
 *
 */
#define BCM84834_READ_PHYC_EEE_RX_DURATION_CNT_HIGHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr,(_r._phyc_eee_rx_duration_cnt_high))
#define BCM84834_WRITE_PHYC_EEE_RX_DURATION_CNT_HIGHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr,(_r._phyc_eee_rx_duration_cnt_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_RX_DURATION_CNT_HIGHr BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_SIZE BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_SIZE
typedef BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_t PHYC_EEE_RX_DURATION_CNT_HIGHr_t;
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_CLR BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_CLR
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_SET BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_SET
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_GET BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_GET
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_GET BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_GET
#define PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_SET BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr_RX_LPI_DURATION_CNTf_SET
#define READ_PHYC_EEE_RX_DURATION_CNT_HIGHr BCM84834_READ_PHYC_EEE_RX_DURATION_CNT_HIGHr
#define WRITE_PHYC_EEE_RX_DURATION_CNT_HIGHr BCM84834_WRITE_PHYC_EEE_RX_DURATION_CNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_RX_DURATION_CNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_EEE_RX_DURATION_CNT_LOW
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8fd
 * DEVAD:    1
 * DESC:     EEE Receive Duration Count Low
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_DURATION_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr (0x0001a8fd | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_EEE_RX_DURATION_CNT_LOW.
 *
 */
typedef union BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_s {
	uint32_t v[1];
	uint32_t phyc_eee_rx_duration_cnt_low[1];
	uint32_t _phyc_eee_rx_duration_cnt_low;
} BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_t;

#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_CLR(r) (r).phyc_eee_rx_duration_cnt_low[0] = 0
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_SET(r,d) (r).phyc_eee_rx_duration_cnt_low[0] = d
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_GET(r) (r).phyc_eee_rx_duration_cnt_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_GET(r) (((r).phyc_eee_rx_duration_cnt_low[0]) & 0xffff)
#define BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_SET(r,f) (r).phyc_eee_rx_duration_cnt_low[0]=(((r).phyc_eee_rx_duration_cnt_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_EEE_RX_DURATION_CNT_LOW.
 *
 */
#define BCM84834_READ_PHYC_EEE_RX_DURATION_CNT_LOWr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr,(_r._phyc_eee_rx_duration_cnt_low))
#define BCM84834_WRITE_PHYC_EEE_RX_DURATION_CNT_LOWr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr,(_r._phyc_eee_rx_duration_cnt_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_EEE_RX_DURATION_CNT_LOWr BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr
#define PHYC_EEE_RX_DURATION_CNT_LOWr_SIZE BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_SIZE
typedef BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_t PHYC_EEE_RX_DURATION_CNT_LOWr_t;
#define PHYC_EEE_RX_DURATION_CNT_LOWr_CLR BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_CLR
#define PHYC_EEE_RX_DURATION_CNT_LOWr_SET BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_SET
#define PHYC_EEE_RX_DURATION_CNT_LOWr_GET BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_GET
#define PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_GET BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_GET
#define PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_SET BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr_RX_LPI_DURATION_CNTf_SET
#define READ_PHYC_EEE_RX_DURATION_CNT_LOWr BCM84834_READ_PHYC_EEE_RX_DURATION_CNT_LOWr
#define WRITE_PHYC_EEE_RX_DURATION_CNT_LOWr BCM84834_WRITE_PHYC_EEE_RX_DURATION_CNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_EEE_RX_DURATION_CNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_TX_WE_VAL1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8fe
 * DEVAD:    1
 * DESC:     LPI Transmit Wake on Error Register 1
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_WE_VAL_2  
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_TX_WE_VAL1r (0x0001a8fe | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_TX_WE_VAL1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_TX_WE_VAL1.
 *
 */
typedef union BCM84834_PHYC_LPI_TX_WE_VAL1r_s {
	uint32_t v[1];
	uint32_t phyc_lpi_tx_we_val1[1];
	uint32_t _phyc_lpi_tx_we_val1;
} BCM84834_PHYC_LPI_TX_WE_VAL1r_t;

#define BCM84834_PHYC_LPI_TX_WE_VAL1r_CLR(r) (r).phyc_lpi_tx_we_val1[0] = 0
#define BCM84834_PHYC_LPI_TX_WE_VAL1r_SET(r,d) (r).phyc_lpi_tx_we_val1[0] = d
#define BCM84834_PHYC_LPI_TX_WE_VAL1r_GET(r) (r).phyc_lpi_tx_we_val1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_GET(r) (((r).phyc_lpi_tx_we_val1[0]) & 0xff)
#define BCM84834_PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_SET(r,f) (r).phyc_lpi_tx_we_val1[0]=(((r).phyc_lpi_tx_we_val1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_LPI_TX_WE_VAL1.
 *
 */
#define BCM84834_READ_PHYC_LPI_TX_WE_VAL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_TX_WE_VAL1r,(_r._phyc_lpi_tx_we_val1))
#define BCM84834_WRITE_PHYC_LPI_TX_WE_VAL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_TX_WE_VAL1r,(_r._phyc_lpi_tx_we_val1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_TX_WE_VAL1r BCM84834_PHYC_LPI_TX_WE_VAL1r
#define PHYC_LPI_TX_WE_VAL1r_SIZE BCM84834_PHYC_LPI_TX_WE_VAL1r_SIZE
typedef BCM84834_PHYC_LPI_TX_WE_VAL1r_t PHYC_LPI_TX_WE_VAL1r_t;
#define PHYC_LPI_TX_WE_VAL1r_CLR BCM84834_PHYC_LPI_TX_WE_VAL1r_CLR
#define PHYC_LPI_TX_WE_VAL1r_SET BCM84834_PHYC_LPI_TX_WE_VAL1r_SET
#define PHYC_LPI_TX_WE_VAL1r_GET BCM84834_PHYC_LPI_TX_WE_VAL1r_GET
#define PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_GET BCM84834_PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_GET
#define PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_SET BCM84834_PHYC_LPI_TX_WE_VAL1r_TX_LPI_WE_VAL_2f_SET
#define READ_PHYC_LPI_TX_WE_VAL1r BCM84834_READ_PHYC_LPI_TX_WE_VAL1r
#define WRITE_PHYC_LPI_TX_WE_VAL1r BCM84834_WRITE_PHYC_LPI_TX_WE_VAL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_TX_WE_VAL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_TX_WE_VAL0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa8ff
 * DEVAD:    1
 * DESC:     LPI Transmit Wake on Error Register 0
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_WE_VAL_0  
 *     TX_LPI_WE_VAL_1  
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_TX_WE_VAL0r (0x0001a8ff | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_TX_WE_VAL0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_TX_WE_VAL0.
 *
 */
typedef union BCM84834_PHYC_LPI_TX_WE_VAL0r_s {
	uint32_t v[1];
	uint32_t phyc_lpi_tx_we_val0[1];
	uint32_t _phyc_lpi_tx_we_val0;
} BCM84834_PHYC_LPI_TX_WE_VAL0r_t;

#define BCM84834_PHYC_LPI_TX_WE_VAL0r_CLR(r) (r).phyc_lpi_tx_we_val0[0] = 0
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_SET(r,d) (r).phyc_lpi_tx_we_val0[0] = d
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_GET(r) (r).phyc_lpi_tx_we_val0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_GET(r) ((((r).phyc_lpi_tx_we_val0[0]) >> 8) & 0xff)
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_SET(r,f) (r).phyc_lpi_tx_we_val0[0]=(((r).phyc_lpi_tx_we_val0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_GET(r) (((r).phyc_lpi_tx_we_val0[0]) & 0xff)
#define BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_SET(r,f) (r).phyc_lpi_tx_we_val0[0]=(((r).phyc_lpi_tx_we_val0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_LPI_TX_WE_VAL0.
 *
 */
#define BCM84834_READ_PHYC_LPI_TX_WE_VAL0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_TX_WE_VAL0r,(_r._phyc_lpi_tx_we_val0))
#define BCM84834_WRITE_PHYC_LPI_TX_WE_VAL0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_TX_WE_VAL0r,(_r._phyc_lpi_tx_we_val0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_TX_WE_VAL0r BCM84834_PHYC_LPI_TX_WE_VAL0r
#define PHYC_LPI_TX_WE_VAL0r_SIZE BCM84834_PHYC_LPI_TX_WE_VAL0r_SIZE
typedef BCM84834_PHYC_LPI_TX_WE_VAL0r_t PHYC_LPI_TX_WE_VAL0r_t;
#define PHYC_LPI_TX_WE_VAL0r_CLR BCM84834_PHYC_LPI_TX_WE_VAL0r_CLR
#define PHYC_LPI_TX_WE_VAL0r_SET BCM84834_PHYC_LPI_TX_WE_VAL0r_SET
#define PHYC_LPI_TX_WE_VAL0r_GET BCM84834_PHYC_LPI_TX_WE_VAL0r_GET
#define PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_GET BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_GET
#define PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_SET BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_1f_SET
#define PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_GET BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_GET
#define PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_SET BCM84834_PHYC_LPI_TX_WE_VAL0r_TX_LPI_WE_VAL_0f_SET
#define READ_PHYC_LPI_TX_WE_VAL0r BCM84834_READ_PHYC_LPI_TX_WE_VAL0r
#define WRITE_PHYC_LPI_TX_WE_VAL0r BCM84834_WRITE_PHYC_LPI_TX_WE_VAL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_TX_WE_VAL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_EN
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa900
 * DEVAD:    1
 * DESC:     Transmit Aux Enable
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_EN        
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_ENr (0x0001a900 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_ENr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_EN.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_ENr_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_en[1];
	uint32_t _phyc_tx_aux_en;
} BCM84834_PHYC_TX_AUX_ENr_t;

#define BCM84834_PHYC_TX_AUX_ENr_CLR(r) (r).phyc_tx_aux_en[0] = 0
#define BCM84834_PHYC_TX_AUX_ENr_SET(r,d) (r).phyc_tx_aux_en[0] = d
#define BCM84834_PHYC_TX_AUX_ENr_GET(r) (r).phyc_tx_aux_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_ENr_TX_AUX_ENf_GET(r) (((r).phyc_tx_aux_en[0]) & 0x1)
#define BCM84834_PHYC_TX_AUX_ENr_TX_AUX_ENf_SET(r,f) (r).phyc_tx_aux_en[0]=(((r).phyc_tx_aux_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_TX_AUX_EN.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_ENr,(_r._phyc_tx_aux_en))
#define BCM84834_WRITE_PHYC_TX_AUX_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_ENr,(_r._phyc_tx_aux_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_ENr BCM84834_PHYC_TX_AUX_ENr
#define PHYC_TX_AUX_ENr_SIZE BCM84834_PHYC_TX_AUX_ENr_SIZE
typedef BCM84834_PHYC_TX_AUX_ENr_t PHYC_TX_AUX_ENr_t;
#define PHYC_TX_AUX_ENr_CLR BCM84834_PHYC_TX_AUX_ENr_CLR
#define PHYC_TX_AUX_ENr_SET BCM84834_PHYC_TX_AUX_ENr_SET
#define PHYC_TX_AUX_ENr_GET BCM84834_PHYC_TX_AUX_ENr_GET
#define PHYC_TX_AUX_ENr_TX_AUX_ENf_GET BCM84834_PHYC_TX_AUX_ENr_TX_AUX_ENf_GET
#define PHYC_TX_AUX_ENr_TX_AUX_ENf_SET BCM84834_PHYC_TX_AUX_ENr_TX_AUX_ENf_SET
#define READ_PHYC_TX_AUX_ENr BCM84834_READ_PHYC_TX_AUX_ENr
#define WRITE_PHYC_TX_AUX_ENr BCM84834_WRITE_PHYC_TX_AUX_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa901
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 0
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_0r (0x0001a901 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_0.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_0r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_0[1];
	uint32_t _phyc_tx_aux_dat_0;
} BCM84834_PHYC_TX_AUX_DAT_0r_t;

#define BCM84834_PHYC_TX_AUX_DAT_0r_CLR(r) (r).phyc_tx_aux_dat_0[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_0r_SET(r,d) (r).phyc_tx_aux_dat_0[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_0r_GET(r) (r).phyc_tx_aux_dat_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_0[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_0[0]=(((r).phyc_tx_aux_dat_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_0.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_0r,(_r._phyc_tx_aux_dat_0))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_0r,(_r._phyc_tx_aux_dat_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_0r BCM84834_PHYC_TX_AUX_DAT_0r
#define PHYC_TX_AUX_DAT_0r_SIZE BCM84834_PHYC_TX_AUX_DAT_0r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_0r_t PHYC_TX_AUX_DAT_0r_t;
#define PHYC_TX_AUX_DAT_0r_CLR BCM84834_PHYC_TX_AUX_DAT_0r_CLR
#define PHYC_TX_AUX_DAT_0r_SET BCM84834_PHYC_TX_AUX_DAT_0r_SET
#define PHYC_TX_AUX_DAT_0r_GET BCM84834_PHYC_TX_AUX_DAT_0r_GET
#define PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_0r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_0r BCM84834_READ_PHYC_TX_AUX_DAT_0r
#define WRITE_PHYC_TX_AUX_DAT_0r BCM84834_WRITE_PHYC_TX_AUX_DAT_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa902
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 1
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_1r (0x0001a902 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_1.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_1r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_1[1];
	uint32_t _phyc_tx_aux_dat_1;
} BCM84834_PHYC_TX_AUX_DAT_1r_t;

#define BCM84834_PHYC_TX_AUX_DAT_1r_CLR(r) (r).phyc_tx_aux_dat_1[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_1r_SET(r,d) (r).phyc_tx_aux_dat_1[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_1r_GET(r) (r).phyc_tx_aux_dat_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_1[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_1[0]=(((r).phyc_tx_aux_dat_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_1.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_1r,(_r._phyc_tx_aux_dat_1))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_1r,(_r._phyc_tx_aux_dat_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_1r BCM84834_PHYC_TX_AUX_DAT_1r
#define PHYC_TX_AUX_DAT_1r_SIZE BCM84834_PHYC_TX_AUX_DAT_1r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_1r_t PHYC_TX_AUX_DAT_1r_t;
#define PHYC_TX_AUX_DAT_1r_CLR BCM84834_PHYC_TX_AUX_DAT_1r_CLR
#define PHYC_TX_AUX_DAT_1r_SET BCM84834_PHYC_TX_AUX_DAT_1r_SET
#define PHYC_TX_AUX_DAT_1r_GET BCM84834_PHYC_TX_AUX_DAT_1r_GET
#define PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_1r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_1r BCM84834_READ_PHYC_TX_AUX_DAT_1r
#define WRITE_PHYC_TX_AUX_DAT_1r BCM84834_WRITE_PHYC_TX_AUX_DAT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa903
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 2
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_2r (0x0001a903 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_2.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_2r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_2[1];
	uint32_t _phyc_tx_aux_dat_2;
} BCM84834_PHYC_TX_AUX_DAT_2r_t;

#define BCM84834_PHYC_TX_AUX_DAT_2r_CLR(r) (r).phyc_tx_aux_dat_2[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_2r_SET(r,d) (r).phyc_tx_aux_dat_2[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_2r_GET(r) (r).phyc_tx_aux_dat_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_2[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_2[0]=(((r).phyc_tx_aux_dat_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_2.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_2r,(_r._phyc_tx_aux_dat_2))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_2r,(_r._phyc_tx_aux_dat_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_2r BCM84834_PHYC_TX_AUX_DAT_2r
#define PHYC_TX_AUX_DAT_2r_SIZE BCM84834_PHYC_TX_AUX_DAT_2r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_2r_t PHYC_TX_AUX_DAT_2r_t;
#define PHYC_TX_AUX_DAT_2r_CLR BCM84834_PHYC_TX_AUX_DAT_2r_CLR
#define PHYC_TX_AUX_DAT_2r_SET BCM84834_PHYC_TX_AUX_DAT_2r_SET
#define PHYC_TX_AUX_DAT_2r_GET BCM84834_PHYC_TX_AUX_DAT_2r_GET
#define PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_2r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_2r BCM84834_READ_PHYC_TX_AUX_DAT_2r
#define WRITE_PHYC_TX_AUX_DAT_2r BCM84834_WRITE_PHYC_TX_AUX_DAT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa904
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 3
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_3r (0x0001a904 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_3.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_3r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_3[1];
	uint32_t _phyc_tx_aux_dat_3;
} BCM84834_PHYC_TX_AUX_DAT_3r_t;

#define BCM84834_PHYC_TX_AUX_DAT_3r_CLR(r) (r).phyc_tx_aux_dat_3[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_3r_SET(r,d) (r).phyc_tx_aux_dat_3[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_3r_GET(r) (r).phyc_tx_aux_dat_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_3[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_3[0]=(((r).phyc_tx_aux_dat_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_3.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_3r,(_r._phyc_tx_aux_dat_3))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_3r,(_r._phyc_tx_aux_dat_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_3r BCM84834_PHYC_TX_AUX_DAT_3r
#define PHYC_TX_AUX_DAT_3r_SIZE BCM84834_PHYC_TX_AUX_DAT_3r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_3r_t PHYC_TX_AUX_DAT_3r_t;
#define PHYC_TX_AUX_DAT_3r_CLR BCM84834_PHYC_TX_AUX_DAT_3r_CLR
#define PHYC_TX_AUX_DAT_3r_SET BCM84834_PHYC_TX_AUX_DAT_3r_SET
#define PHYC_TX_AUX_DAT_3r_GET BCM84834_PHYC_TX_AUX_DAT_3r_GET
#define PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_3r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_3r BCM84834_READ_PHYC_TX_AUX_DAT_3r
#define WRITE_PHYC_TX_AUX_DAT_3r BCM84834_WRITE_PHYC_TX_AUX_DAT_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_4
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa905
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 4
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_4r (0x0001a905 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_4r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_4.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_4r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_4[1];
	uint32_t _phyc_tx_aux_dat_4;
} BCM84834_PHYC_TX_AUX_DAT_4r_t;

#define BCM84834_PHYC_TX_AUX_DAT_4r_CLR(r) (r).phyc_tx_aux_dat_4[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_4r_SET(r,d) (r).phyc_tx_aux_dat_4[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_4r_GET(r) (r).phyc_tx_aux_dat_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_4[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_4[0]=(((r).phyc_tx_aux_dat_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_4.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_4r,(_r._phyc_tx_aux_dat_4))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_4r,(_r._phyc_tx_aux_dat_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_4r BCM84834_PHYC_TX_AUX_DAT_4r
#define PHYC_TX_AUX_DAT_4r_SIZE BCM84834_PHYC_TX_AUX_DAT_4r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_4r_t PHYC_TX_AUX_DAT_4r_t;
#define PHYC_TX_AUX_DAT_4r_CLR BCM84834_PHYC_TX_AUX_DAT_4r_CLR
#define PHYC_TX_AUX_DAT_4r_SET BCM84834_PHYC_TX_AUX_DAT_4r_SET
#define PHYC_TX_AUX_DAT_4r_GET BCM84834_PHYC_TX_AUX_DAT_4r_GET
#define PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_4r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_4r BCM84834_READ_PHYC_TX_AUX_DAT_4r
#define WRITE_PHYC_TX_AUX_DAT_4r BCM84834_WRITE_PHYC_TX_AUX_DAT_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_5
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa906
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 5
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_5r (0x0001a906 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_5r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_5.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_5r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_5[1];
	uint32_t _phyc_tx_aux_dat_5;
} BCM84834_PHYC_TX_AUX_DAT_5r_t;

#define BCM84834_PHYC_TX_AUX_DAT_5r_CLR(r) (r).phyc_tx_aux_dat_5[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_5r_SET(r,d) (r).phyc_tx_aux_dat_5[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_5r_GET(r) (r).phyc_tx_aux_dat_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_5[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_5[0]=(((r).phyc_tx_aux_dat_5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_5.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_5r,(_r._phyc_tx_aux_dat_5))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_5r,(_r._phyc_tx_aux_dat_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_5r BCM84834_PHYC_TX_AUX_DAT_5r
#define PHYC_TX_AUX_DAT_5r_SIZE BCM84834_PHYC_TX_AUX_DAT_5r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_5r_t PHYC_TX_AUX_DAT_5r_t;
#define PHYC_TX_AUX_DAT_5r_CLR BCM84834_PHYC_TX_AUX_DAT_5r_CLR
#define PHYC_TX_AUX_DAT_5r_SET BCM84834_PHYC_TX_AUX_DAT_5r_SET
#define PHYC_TX_AUX_DAT_5r_GET BCM84834_PHYC_TX_AUX_DAT_5r_GET
#define PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_5r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_5r BCM84834_READ_PHYC_TX_AUX_DAT_5r
#define WRITE_PHYC_TX_AUX_DAT_5r BCM84834_WRITE_PHYC_TX_AUX_DAT_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_6
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa907
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 6
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_6r (0x0001a907 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_6r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_6.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_6r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_6[1];
	uint32_t _phyc_tx_aux_dat_6;
} BCM84834_PHYC_TX_AUX_DAT_6r_t;

#define BCM84834_PHYC_TX_AUX_DAT_6r_CLR(r) (r).phyc_tx_aux_dat_6[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_6r_SET(r,d) (r).phyc_tx_aux_dat_6[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_6r_GET(r) (r).phyc_tx_aux_dat_6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_6[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_6[0]=(((r).phyc_tx_aux_dat_6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_6.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_6r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_6r,(_r._phyc_tx_aux_dat_6))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_6r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_6r,(_r._phyc_tx_aux_dat_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_6r BCM84834_PHYC_TX_AUX_DAT_6r
#define PHYC_TX_AUX_DAT_6r_SIZE BCM84834_PHYC_TX_AUX_DAT_6r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_6r_t PHYC_TX_AUX_DAT_6r_t;
#define PHYC_TX_AUX_DAT_6r_CLR BCM84834_PHYC_TX_AUX_DAT_6r_CLR
#define PHYC_TX_AUX_DAT_6r_SET BCM84834_PHYC_TX_AUX_DAT_6r_SET
#define PHYC_TX_AUX_DAT_6r_GET BCM84834_PHYC_TX_AUX_DAT_6r_GET
#define PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_6r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_6r BCM84834_READ_PHYC_TX_AUX_DAT_6r
#define WRITE_PHYC_TX_AUX_DAT_6r BCM84834_WRITE_PHYC_TX_AUX_DAT_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_DAT_7
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa908
 * DEVAD:    1
 * DESC:     Transmit Aux Data Word 7
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_DAT_7r (0x0001a908 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_DAT_7r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_DAT_7.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_DAT_7r_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_dat_7[1];
	uint32_t _phyc_tx_aux_dat_7;
} BCM84834_PHYC_TX_AUX_DAT_7r_t;

#define BCM84834_PHYC_TX_AUX_DAT_7r_CLR(r) (r).phyc_tx_aux_dat_7[0] = 0
#define BCM84834_PHYC_TX_AUX_DAT_7r_SET(r,d) (r).phyc_tx_aux_dat_7[0] = d
#define BCM84834_PHYC_TX_AUX_DAT_7r_GET(r) (r).phyc_tx_aux_dat_7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_GET(r) (((r).phyc_tx_aux_dat_7[0]) & 0xffff)
#define BCM84834_PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_SET(r,f) (r).phyc_tx_aux_dat_7[0]=(((r).phyc_tx_aux_dat_7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_AUX_DAT_7.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_DAT_7r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_DAT_7r,(_r._phyc_tx_aux_dat_7))
#define BCM84834_WRITE_PHYC_TX_AUX_DAT_7r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_DAT_7r,(_r._phyc_tx_aux_dat_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_DAT_7r BCM84834_PHYC_TX_AUX_DAT_7r
#define PHYC_TX_AUX_DAT_7r_SIZE BCM84834_PHYC_TX_AUX_DAT_7r_SIZE
typedef BCM84834_PHYC_TX_AUX_DAT_7r_t PHYC_TX_AUX_DAT_7r_t;
#define PHYC_TX_AUX_DAT_7r_CLR BCM84834_PHYC_TX_AUX_DAT_7r_CLR
#define PHYC_TX_AUX_DAT_7r_SET BCM84834_PHYC_TX_AUX_DAT_7r_SET
#define PHYC_TX_AUX_DAT_7r_GET BCM84834_PHYC_TX_AUX_DAT_7r_GET
#define PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_GET BCM84834_PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_GET
#define PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_SET BCM84834_PHYC_TX_AUX_DAT_7r_TX_AUX_DATf_SET
#define READ_PHYC_TX_AUX_DAT_7r BCM84834_READ_PHYC_TX_AUX_DAT_7r
#define WRITE_PHYC_TX_AUX_DAT_7r BCM84834_WRITE_PHYC_TX_AUX_DAT_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_DAT_7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_AUX_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa909
 * DEVAD:    1
 * DESC:     Transmit Aux Control
 * SIZE:     32
 * FIELDS:
 *     TX_AUX_CTL       
 *     TX_AUX_TYPE      
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_AUX_CTLr (0x0001a909 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_AUX_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_AUX_CTL.
 *
 */
typedef union BCM84834_PHYC_TX_AUX_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_tx_aux_ctl[1];
	uint32_t _phyc_tx_aux_ctl;
} BCM84834_PHYC_TX_AUX_CTLr_t;

#define BCM84834_PHYC_TX_AUX_CTLr_CLR(r) (r).phyc_tx_aux_ctl[0] = 0
#define BCM84834_PHYC_TX_AUX_CTLr_SET(r,d) (r).phyc_tx_aux_ctl[0] = d
#define BCM84834_PHYC_TX_AUX_CTLr_GET(r) (r).phyc_tx_aux_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_GET(r) ((((r).phyc_tx_aux_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_SET(r,f) (r).phyc_tx_aux_ctl[0]=(((r).phyc_tx_aux_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_CTLf_GET(r) (((r).phyc_tx_aux_ctl[0]) & 0x7fff)
#define BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_CTLf_SET(r,f) (r).phyc_tx_aux_ctl[0]=(((r).phyc_tx_aux_ctl[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff))

/*
 * These macros can be used to access PHYC_TX_AUX_CTL.
 *
 */
#define BCM84834_READ_PHYC_TX_AUX_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_AUX_CTLr,(_r._phyc_tx_aux_ctl))
#define BCM84834_WRITE_PHYC_TX_AUX_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_AUX_CTLr,(_r._phyc_tx_aux_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_AUX_CTLr BCM84834_PHYC_TX_AUX_CTLr
#define PHYC_TX_AUX_CTLr_SIZE BCM84834_PHYC_TX_AUX_CTLr_SIZE
typedef BCM84834_PHYC_TX_AUX_CTLr_t PHYC_TX_AUX_CTLr_t;
#define PHYC_TX_AUX_CTLr_CLR BCM84834_PHYC_TX_AUX_CTLr_CLR
#define PHYC_TX_AUX_CTLr_SET BCM84834_PHYC_TX_AUX_CTLr_SET
#define PHYC_TX_AUX_CTLr_GET BCM84834_PHYC_TX_AUX_CTLr_GET
#define PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_GET BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_GET
#define PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_SET BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_TYPEf_SET
#define PHYC_TX_AUX_CTLr_TX_AUX_CTLf_GET BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_CTLf_GET
#define PHYC_TX_AUX_CTLr_TX_AUX_CTLf_SET BCM84834_PHYC_TX_AUX_CTLr_TX_AUX_CTLf_SET
#define READ_PHYC_TX_AUX_CTLr BCM84834_READ_PHYC_TX_AUX_CTLr
#define WRITE_PHYC_TX_AUX_CTLr BCM84834_WRITE_PHYC_TX_AUX_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_AUX_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_ST
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90a
 * DEVAD:    1
 * DESC:     Receive Aux Ready Status
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_VALID     
 *     AUX_CRC_ERROR    
 *     RX_AUX_READ_DONE 
 *     RX_AUX_OVERFLOW  
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_STr (0x0001a90a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_STr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_ST.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_STr_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_st[1];
	uint32_t _phyc_rx_aux_st;
} BCM84834_PHYC_RX_AUX_STr_t;

#define BCM84834_PHYC_RX_AUX_STr_CLR(r) (r).phyc_rx_aux_st[0] = 0
#define BCM84834_PHYC_RX_AUX_STr_SET(r,d) (r).phyc_rx_aux_st[0] = d
#define BCM84834_PHYC_RX_AUX_STr_GET(r) (r).phyc_rx_aux_st[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_GET(r) ((((r).phyc_rx_aux_st[0]) >> 3) & 0x1)
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_SET(r,f) (r).phyc_rx_aux_st[0]=(((r).phyc_rx_aux_st[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_GET(r) ((((r).phyc_rx_aux_st[0]) >> 2) & 0x1)
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_SET(r,f) (r).phyc_rx_aux_st[0]=(((r).phyc_rx_aux_st[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_RX_AUX_STr_AUX_CRC_ERRORf_GET(r) ((((r).phyc_rx_aux_st[0]) >> 1) & 0x1)
#define BCM84834_PHYC_RX_AUX_STr_AUX_CRC_ERRORf_SET(r,f) (r).phyc_rx_aux_st[0]=(((r).phyc_rx_aux_st[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_VALIDf_GET(r) (((r).phyc_rx_aux_st[0]) & 0x1)
#define BCM84834_PHYC_RX_AUX_STr_RX_AUX_VALIDf_SET(r,f) (r).phyc_rx_aux_st[0]=(((r).phyc_rx_aux_st[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_RX_AUX_ST.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_STr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_STr,(_r._phyc_rx_aux_st))
#define BCM84834_WRITE_PHYC_RX_AUX_STr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_STr,(_r._phyc_rx_aux_st))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_STr BCM84834_PHYC_RX_AUX_STr
#define PHYC_RX_AUX_STr_SIZE BCM84834_PHYC_RX_AUX_STr_SIZE
typedef BCM84834_PHYC_RX_AUX_STr_t PHYC_RX_AUX_STr_t;
#define PHYC_RX_AUX_STr_CLR BCM84834_PHYC_RX_AUX_STr_CLR
#define PHYC_RX_AUX_STr_SET BCM84834_PHYC_RX_AUX_STr_SET
#define PHYC_RX_AUX_STr_GET BCM84834_PHYC_RX_AUX_STr_GET
#define PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_GET BCM84834_PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_GET
#define PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_SET BCM84834_PHYC_RX_AUX_STr_RX_AUX_OVERFLOWf_SET
#define PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_GET BCM84834_PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_GET
#define PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_SET BCM84834_PHYC_RX_AUX_STr_RX_AUX_READ_DONEf_SET
#define PHYC_RX_AUX_STr_AUX_CRC_ERRORf_GET BCM84834_PHYC_RX_AUX_STr_AUX_CRC_ERRORf_GET
#define PHYC_RX_AUX_STr_AUX_CRC_ERRORf_SET BCM84834_PHYC_RX_AUX_STr_AUX_CRC_ERRORf_SET
#define PHYC_RX_AUX_STr_RX_AUX_VALIDf_GET BCM84834_PHYC_RX_AUX_STr_RX_AUX_VALIDf_GET
#define PHYC_RX_AUX_STr_RX_AUX_VALIDf_SET BCM84834_PHYC_RX_AUX_STr_RX_AUX_VALIDf_SET
#define READ_PHYC_RX_AUX_STr BCM84834_READ_PHYC_RX_AUX_STr
#define WRITE_PHYC_RX_AUX_STr BCM84834_WRITE_PHYC_RX_AUX_STr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_STr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90b
 * DEVAD:    1
 * DESC:     Receive Aux Data 0
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_0r (0x0001a90b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_0.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_0r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_0[1];
	uint32_t _phyc_rx_aux_dat_0;
} BCM84834_PHYC_RX_AUX_DAT_0r_t;

#define BCM84834_PHYC_RX_AUX_DAT_0r_CLR(r) (r).phyc_rx_aux_dat_0[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_0r_SET(r,d) (r).phyc_rx_aux_dat_0[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_0r_GET(r) (r).phyc_rx_aux_dat_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_0[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_0[0]=(((r).phyc_rx_aux_dat_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_0.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_0r,(_r._phyc_rx_aux_dat_0))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_0r,(_r._phyc_rx_aux_dat_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_0r BCM84834_PHYC_RX_AUX_DAT_0r
#define PHYC_RX_AUX_DAT_0r_SIZE BCM84834_PHYC_RX_AUX_DAT_0r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_0r_t PHYC_RX_AUX_DAT_0r_t;
#define PHYC_RX_AUX_DAT_0r_CLR BCM84834_PHYC_RX_AUX_DAT_0r_CLR
#define PHYC_RX_AUX_DAT_0r_SET BCM84834_PHYC_RX_AUX_DAT_0r_SET
#define PHYC_RX_AUX_DAT_0r_GET BCM84834_PHYC_RX_AUX_DAT_0r_GET
#define PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_0r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_0r BCM84834_READ_PHYC_RX_AUX_DAT_0r
#define WRITE_PHYC_RX_AUX_DAT_0r BCM84834_WRITE_PHYC_RX_AUX_DAT_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90c
 * DEVAD:    1
 * DESC:     Receive Aux Data 1
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_1r (0x0001a90c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_1.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_1r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_1[1];
	uint32_t _phyc_rx_aux_dat_1;
} BCM84834_PHYC_RX_AUX_DAT_1r_t;

#define BCM84834_PHYC_RX_AUX_DAT_1r_CLR(r) (r).phyc_rx_aux_dat_1[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_1r_SET(r,d) (r).phyc_rx_aux_dat_1[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_1r_GET(r) (r).phyc_rx_aux_dat_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_1[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_1[0]=(((r).phyc_rx_aux_dat_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_1.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_1r,(_r._phyc_rx_aux_dat_1))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_1r,(_r._phyc_rx_aux_dat_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_1r BCM84834_PHYC_RX_AUX_DAT_1r
#define PHYC_RX_AUX_DAT_1r_SIZE BCM84834_PHYC_RX_AUX_DAT_1r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_1r_t PHYC_RX_AUX_DAT_1r_t;
#define PHYC_RX_AUX_DAT_1r_CLR BCM84834_PHYC_RX_AUX_DAT_1r_CLR
#define PHYC_RX_AUX_DAT_1r_SET BCM84834_PHYC_RX_AUX_DAT_1r_SET
#define PHYC_RX_AUX_DAT_1r_GET BCM84834_PHYC_RX_AUX_DAT_1r_GET
#define PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_1r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_1r BCM84834_READ_PHYC_RX_AUX_DAT_1r
#define WRITE_PHYC_RX_AUX_DAT_1r BCM84834_WRITE_PHYC_RX_AUX_DAT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90d
 * DEVAD:    1
 * DESC:     Receive Aux Data 2
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_2r (0x0001a90d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_2.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_2r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_2[1];
	uint32_t _phyc_rx_aux_dat_2;
} BCM84834_PHYC_RX_AUX_DAT_2r_t;

#define BCM84834_PHYC_RX_AUX_DAT_2r_CLR(r) (r).phyc_rx_aux_dat_2[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_2r_SET(r,d) (r).phyc_rx_aux_dat_2[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_2r_GET(r) (r).phyc_rx_aux_dat_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_2[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_2[0]=(((r).phyc_rx_aux_dat_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_2.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_2r,(_r._phyc_rx_aux_dat_2))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_2r,(_r._phyc_rx_aux_dat_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_2r BCM84834_PHYC_RX_AUX_DAT_2r
#define PHYC_RX_AUX_DAT_2r_SIZE BCM84834_PHYC_RX_AUX_DAT_2r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_2r_t PHYC_RX_AUX_DAT_2r_t;
#define PHYC_RX_AUX_DAT_2r_CLR BCM84834_PHYC_RX_AUX_DAT_2r_CLR
#define PHYC_RX_AUX_DAT_2r_SET BCM84834_PHYC_RX_AUX_DAT_2r_SET
#define PHYC_RX_AUX_DAT_2r_GET BCM84834_PHYC_RX_AUX_DAT_2r_GET
#define PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_2r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_2r BCM84834_READ_PHYC_RX_AUX_DAT_2r
#define WRITE_PHYC_RX_AUX_DAT_2r BCM84834_WRITE_PHYC_RX_AUX_DAT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90e
 * DEVAD:    1
 * DESC:     Receive Aux Data 3
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_3r (0x0001a90e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_3.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_3r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_3[1];
	uint32_t _phyc_rx_aux_dat_3;
} BCM84834_PHYC_RX_AUX_DAT_3r_t;

#define BCM84834_PHYC_RX_AUX_DAT_3r_CLR(r) (r).phyc_rx_aux_dat_3[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_3r_SET(r,d) (r).phyc_rx_aux_dat_3[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_3r_GET(r) (r).phyc_rx_aux_dat_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_3[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_3[0]=(((r).phyc_rx_aux_dat_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_3.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_3r,(_r._phyc_rx_aux_dat_3))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_3r,(_r._phyc_rx_aux_dat_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_3r BCM84834_PHYC_RX_AUX_DAT_3r
#define PHYC_RX_AUX_DAT_3r_SIZE BCM84834_PHYC_RX_AUX_DAT_3r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_3r_t PHYC_RX_AUX_DAT_3r_t;
#define PHYC_RX_AUX_DAT_3r_CLR BCM84834_PHYC_RX_AUX_DAT_3r_CLR
#define PHYC_RX_AUX_DAT_3r_SET BCM84834_PHYC_RX_AUX_DAT_3r_SET
#define PHYC_RX_AUX_DAT_3r_GET BCM84834_PHYC_RX_AUX_DAT_3r_GET
#define PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_3r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_3r BCM84834_READ_PHYC_RX_AUX_DAT_3r
#define WRITE_PHYC_RX_AUX_DAT_3r BCM84834_WRITE_PHYC_RX_AUX_DAT_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_4
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa90f
 * DEVAD:    1
 * DESC:     Receive Aux Data 4
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_4r (0x0001a90f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_4r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_4.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_4r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_4[1];
	uint32_t _phyc_rx_aux_dat_4;
} BCM84834_PHYC_RX_AUX_DAT_4r_t;

#define BCM84834_PHYC_RX_AUX_DAT_4r_CLR(r) (r).phyc_rx_aux_dat_4[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_4r_SET(r,d) (r).phyc_rx_aux_dat_4[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_4r_GET(r) (r).phyc_rx_aux_dat_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_4[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_4[0]=(((r).phyc_rx_aux_dat_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_4.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_4r,(_r._phyc_rx_aux_dat_4))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_4r,(_r._phyc_rx_aux_dat_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_4r BCM84834_PHYC_RX_AUX_DAT_4r
#define PHYC_RX_AUX_DAT_4r_SIZE BCM84834_PHYC_RX_AUX_DAT_4r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_4r_t PHYC_RX_AUX_DAT_4r_t;
#define PHYC_RX_AUX_DAT_4r_CLR BCM84834_PHYC_RX_AUX_DAT_4r_CLR
#define PHYC_RX_AUX_DAT_4r_SET BCM84834_PHYC_RX_AUX_DAT_4r_SET
#define PHYC_RX_AUX_DAT_4r_GET BCM84834_PHYC_RX_AUX_DAT_4r_GET
#define PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_4r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_4r BCM84834_READ_PHYC_RX_AUX_DAT_4r
#define WRITE_PHYC_RX_AUX_DAT_4r BCM84834_WRITE_PHYC_RX_AUX_DAT_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_5
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa910
 * DEVAD:    1
 * DESC:     Receive Aux Data 5
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_5r (0x0001a910 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_5r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_5.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_5r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_5[1];
	uint32_t _phyc_rx_aux_dat_5;
} BCM84834_PHYC_RX_AUX_DAT_5r_t;

#define BCM84834_PHYC_RX_AUX_DAT_5r_CLR(r) (r).phyc_rx_aux_dat_5[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_5r_SET(r,d) (r).phyc_rx_aux_dat_5[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_5r_GET(r) (r).phyc_rx_aux_dat_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_5[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_5[0]=(((r).phyc_rx_aux_dat_5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_5.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_5r,(_r._phyc_rx_aux_dat_5))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_5r,(_r._phyc_rx_aux_dat_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_5r BCM84834_PHYC_RX_AUX_DAT_5r
#define PHYC_RX_AUX_DAT_5r_SIZE BCM84834_PHYC_RX_AUX_DAT_5r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_5r_t PHYC_RX_AUX_DAT_5r_t;
#define PHYC_RX_AUX_DAT_5r_CLR BCM84834_PHYC_RX_AUX_DAT_5r_CLR
#define PHYC_RX_AUX_DAT_5r_SET BCM84834_PHYC_RX_AUX_DAT_5r_SET
#define PHYC_RX_AUX_DAT_5r_GET BCM84834_PHYC_RX_AUX_DAT_5r_GET
#define PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_5r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_5r BCM84834_READ_PHYC_RX_AUX_DAT_5r
#define WRITE_PHYC_RX_AUX_DAT_5r BCM84834_WRITE_PHYC_RX_AUX_DAT_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_6
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa911
 * DEVAD:    1
 * DESC:     Receive Aux Data 6
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_6r (0x0001a911 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_6r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_6.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_6r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_6[1];
	uint32_t _phyc_rx_aux_dat_6;
} BCM84834_PHYC_RX_AUX_DAT_6r_t;

#define BCM84834_PHYC_RX_AUX_DAT_6r_CLR(r) (r).phyc_rx_aux_dat_6[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_6r_SET(r,d) (r).phyc_rx_aux_dat_6[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_6r_GET(r) (r).phyc_rx_aux_dat_6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_6[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_6[0]=(((r).phyc_rx_aux_dat_6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_6.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_6r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_6r,(_r._phyc_rx_aux_dat_6))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_6r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_6r,(_r._phyc_rx_aux_dat_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_6r BCM84834_PHYC_RX_AUX_DAT_6r
#define PHYC_RX_AUX_DAT_6r_SIZE BCM84834_PHYC_RX_AUX_DAT_6r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_6r_t PHYC_RX_AUX_DAT_6r_t;
#define PHYC_RX_AUX_DAT_6r_CLR BCM84834_PHYC_RX_AUX_DAT_6r_CLR
#define PHYC_RX_AUX_DAT_6r_SET BCM84834_PHYC_RX_AUX_DAT_6r_SET
#define PHYC_RX_AUX_DAT_6r_GET BCM84834_PHYC_RX_AUX_DAT_6r_GET
#define PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_6r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_6r BCM84834_READ_PHYC_RX_AUX_DAT_6r
#define WRITE_PHYC_RX_AUX_DAT_6r BCM84834_WRITE_PHYC_RX_AUX_DAT_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_DAT_7
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa912
 * DEVAD:    1
 * DESC:     Receive Aux Data 7
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_DAT       
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_DAT_7r (0x0001a912 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_DAT_7r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_DAT_7.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_DAT_7r_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_dat_7[1];
	uint32_t _phyc_rx_aux_dat_7;
} BCM84834_PHYC_RX_AUX_DAT_7r_t;

#define BCM84834_PHYC_RX_AUX_DAT_7r_CLR(r) (r).phyc_rx_aux_dat_7[0] = 0
#define BCM84834_PHYC_RX_AUX_DAT_7r_SET(r,d) (r).phyc_rx_aux_dat_7[0] = d
#define BCM84834_PHYC_RX_AUX_DAT_7r_GET(r) (r).phyc_rx_aux_dat_7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_GET(r) (((r).phyc_rx_aux_dat_7[0]) & 0xffff)
#define BCM84834_PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_SET(r,f) (r).phyc_rx_aux_dat_7[0]=(((r).phyc_rx_aux_dat_7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_RX_AUX_DAT_7.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_DAT_7r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_DAT_7r,(_r._phyc_rx_aux_dat_7))
#define BCM84834_WRITE_PHYC_RX_AUX_DAT_7r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_DAT_7r,(_r._phyc_rx_aux_dat_7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_DAT_7r BCM84834_PHYC_RX_AUX_DAT_7r
#define PHYC_RX_AUX_DAT_7r_SIZE BCM84834_PHYC_RX_AUX_DAT_7r_SIZE
typedef BCM84834_PHYC_RX_AUX_DAT_7r_t PHYC_RX_AUX_DAT_7r_t;
#define PHYC_RX_AUX_DAT_7r_CLR BCM84834_PHYC_RX_AUX_DAT_7r_CLR
#define PHYC_RX_AUX_DAT_7r_SET BCM84834_PHYC_RX_AUX_DAT_7r_SET
#define PHYC_RX_AUX_DAT_7r_GET BCM84834_PHYC_RX_AUX_DAT_7r_GET
#define PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_GET BCM84834_PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_GET
#define PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_SET BCM84834_PHYC_RX_AUX_DAT_7r_RX_AUX_DATf_SET
#define READ_PHYC_RX_AUX_DAT_7r BCM84834_READ_PHYC_RX_AUX_DAT_7r
#define WRITE_PHYC_RX_AUX_DAT_7r BCM84834_WRITE_PHYC_RX_AUX_DAT_7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_DAT_7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_RX_AUX_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa913
 * DEVAD:    1
 * DESC:     Receive Aux Control
 * SIZE:     32
 * FIELDS:
 *     RX_AUX_CTL       
 *     RX_AUX_TYPE      
 *
 ******************************************************************************/
#define BCM84834_PHYC_RX_AUX_CTLr (0x0001a913 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_RX_AUX_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_RX_AUX_CTL.
 *
 */
typedef union BCM84834_PHYC_RX_AUX_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_rx_aux_ctl[1];
	uint32_t _phyc_rx_aux_ctl;
} BCM84834_PHYC_RX_AUX_CTLr_t;

#define BCM84834_PHYC_RX_AUX_CTLr_CLR(r) (r).phyc_rx_aux_ctl[0] = 0
#define BCM84834_PHYC_RX_AUX_CTLr_SET(r,d) (r).phyc_rx_aux_ctl[0] = d
#define BCM84834_PHYC_RX_AUX_CTLr_GET(r) (r).phyc_rx_aux_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_GET(r) ((((r).phyc_rx_aux_ctl[0]) >> 15) & 0x1)
#define BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_SET(r,f) (r).phyc_rx_aux_ctl[0]=(((r).phyc_rx_aux_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_CTLf_GET(r) (((r).phyc_rx_aux_ctl[0]) & 0x7fff)
#define BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_CTLf_SET(r,f) (r).phyc_rx_aux_ctl[0]=(((r).phyc_rx_aux_ctl[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff))

/*
 * These macros can be used to access PHYC_RX_AUX_CTL.
 *
 */
#define BCM84834_READ_PHYC_RX_AUX_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_RX_AUX_CTLr,(_r._phyc_rx_aux_ctl))
#define BCM84834_WRITE_PHYC_RX_AUX_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_RX_AUX_CTLr,(_r._phyc_rx_aux_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_RX_AUX_CTLr BCM84834_PHYC_RX_AUX_CTLr
#define PHYC_RX_AUX_CTLr_SIZE BCM84834_PHYC_RX_AUX_CTLr_SIZE
typedef BCM84834_PHYC_RX_AUX_CTLr_t PHYC_RX_AUX_CTLr_t;
#define PHYC_RX_AUX_CTLr_CLR BCM84834_PHYC_RX_AUX_CTLr_CLR
#define PHYC_RX_AUX_CTLr_SET BCM84834_PHYC_RX_AUX_CTLr_SET
#define PHYC_RX_AUX_CTLr_GET BCM84834_PHYC_RX_AUX_CTLr_GET
#define PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_GET BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_GET
#define PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_SET BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_TYPEf_SET
#define PHYC_RX_AUX_CTLr_RX_AUX_CTLf_GET BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_CTLf_GET
#define PHYC_RX_AUX_CTLr_RX_AUX_CTLf_SET BCM84834_PHYC_RX_AUX_CTLr_RX_AUX_CTLf_SET
#define READ_PHYC_RX_AUX_CTLr BCM84834_READ_PHYC_RX_AUX_CTLr
#define WRITE_PHYC_RX_AUX_CTLr BCM84834_WRITE_PHYC_RX_AUX_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_RX_AUX_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_LPI_WAKE_ERR_CNT_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa914
 * DEVAD:    1
 * DESC:     LPI Wake Error Count Control register
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_WAKE_ERR_CNT_EN 
 *     TX_LPI_WAKE_ERR_CNT_LD 
 *     EEE_LPI_WAKE_ERR_CNT_EN 
 *     EEE_LPI_WAKE_ERR_CNT_LD 
 *
 ******************************************************************************/
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr (0x0001a914 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_LPI_WAKE_ERR_CNT_CTL.
 *
 */
typedef union BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_lpi_wake_err_cnt_ctl[1];
	uint32_t _phyc_lpi_wake_err_cnt_ctl;
} BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_t;

#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_CLR(r) (r).phyc_lpi_wake_err_cnt_ctl[0] = 0
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_SET(r,d) (r).phyc_lpi_wake_err_cnt_ctl[0] = d
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_GET(r) (r).phyc_lpi_wake_err_cnt_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_GET(r) ((((r).phyc_lpi_wake_err_cnt_ctl[0]) >> 9) & 0x1)
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_SET(r,f) (r).phyc_lpi_wake_err_cnt_ctl[0]=(((r).phyc_lpi_wake_err_cnt_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_GET(r) ((((r).phyc_lpi_wake_err_cnt_ctl[0]) >> 8) & 0x1)
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_SET(r,f) (r).phyc_lpi_wake_err_cnt_ctl[0]=(((r).phyc_lpi_wake_err_cnt_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_GET(r) ((((r).phyc_lpi_wake_err_cnt_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_SET(r,f) (r).phyc_lpi_wake_err_cnt_ctl[0]=(((r).phyc_lpi_wake_err_cnt_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_GET(r) (((r).phyc_lpi_wake_err_cnt_ctl[0]) & 0x1)
#define BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_SET(r,f) (r).phyc_lpi_wake_err_cnt_ctl[0]=(((r).phyc_lpi_wake_err_cnt_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_LPI_WAKE_ERR_CNT_CTL.
 *
 */
#define BCM84834_READ_PHYC_LPI_WAKE_ERR_CNT_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr,(_r._phyc_lpi_wake_err_cnt_ctl))
#define BCM84834_WRITE_PHYC_LPI_WAKE_ERR_CNT_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr,(_r._phyc_lpi_wake_err_cnt_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_LPI_WAKE_ERR_CNT_CTLr BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_SIZE BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_SIZE
typedef BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_t PHYC_LPI_WAKE_ERR_CNT_CTLr_t;
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_CLR BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_CLR
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_SET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_SET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_GET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_GET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_GET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_GET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_SET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_LDf_SET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_GET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_GET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_SET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_EEE_LPI_WAKE_ERR_CNT_ENf_SET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_GET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_GET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_SET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_LDf_SET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_GET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_GET
#define PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_SET BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr_TX_LPI_WAKE_ERR_CNT_ENf_SET
#define READ_PHYC_LPI_WAKE_ERR_CNT_CTLr BCM84834_READ_PHYC_LPI_WAKE_ERR_CNT_CTLr
#define WRITE_PHYC_LPI_WAKE_ERR_CNT_CTLr BCM84834_WRITE_PHYC_LPI_WAKE_ERR_CNT_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_LPI_WAKE_ERR_CNT_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_LPI_WAKE_ERR_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa915
 * DEVAD:    1
 * DESC:     Tx LPI Wake Error Count register
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_WAKE_ERR_CNT 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr (0x0001a915 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_LPI_WAKE_ERR_CNT.
 *
 */
typedef union BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_tx_lpi_wake_err_cnt[1];
	uint32_t _phyc_tx_lpi_wake_err_cnt;
} BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_t;

#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_CLR(r) (r).phyc_tx_lpi_wake_err_cnt[0] = 0
#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_SET(r,d) (r).phyc_tx_lpi_wake_err_cnt[0] = d
#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_GET(r) (r).phyc_tx_lpi_wake_err_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_GET(r) (((r).phyc_tx_lpi_wake_err_cnt[0]) & 0xffff)
#define BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_SET(r,f) (r).phyc_tx_lpi_wake_err_cnt[0]=(((r).phyc_tx_lpi_wake_err_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_TX_LPI_WAKE_ERR_CNT.
 *
 */
#define BCM84834_READ_PHYC_TX_LPI_WAKE_ERR_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr,(_r._phyc_tx_lpi_wake_err_cnt))
#define BCM84834_WRITE_PHYC_TX_LPI_WAKE_ERR_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr,(_r._phyc_tx_lpi_wake_err_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_LPI_WAKE_ERR_CNTr BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr
#define PHYC_TX_LPI_WAKE_ERR_CNTr_SIZE BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_SIZE
typedef BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_t PHYC_TX_LPI_WAKE_ERR_CNTr_t;
#define PHYC_TX_LPI_WAKE_ERR_CNTr_CLR BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_CLR
#define PHYC_TX_LPI_WAKE_ERR_CNTr_SET BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_SET
#define PHYC_TX_LPI_WAKE_ERR_CNTr_GET BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_GET
#define PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_GET BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_GET
#define PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_SET BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr_TX_LPI_WAKE_ERR_CNTf_SET
#define READ_PHYC_TX_LPI_WAKE_ERR_CNTr BCM84834_READ_PHYC_TX_LPI_WAKE_ERR_CNTr
#define WRITE_PHYC_TX_LPI_WAKE_ERR_CNTr BCM84834_WRITE_PHYC_TX_LPI_WAKE_ERR_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_LPI_WAKE_ERR_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_TRAN_CNT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa916
 * DEVAD:    1
 * DESC:     Transmit Transition Counter
 * SIZE:     32
 * FIELDS:
 *     TX_TRAN_CNT      
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_TRAN_CNTr (0x0001a916 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_TRAN_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_TRAN_CNT.
 *
 */
typedef union BCM84834_PHYC_TX_TRAN_CNTr_s {
	uint32_t v[1];
	uint32_t phyc_tx_tran_cnt[1];
	uint32_t _phyc_tx_tran_cnt;
} BCM84834_PHYC_TX_TRAN_CNTr_t;

#define BCM84834_PHYC_TX_TRAN_CNTr_CLR(r) (r).phyc_tx_tran_cnt[0] = 0
#define BCM84834_PHYC_TX_TRAN_CNTr_SET(r,d) (r).phyc_tx_tran_cnt[0] = d
#define BCM84834_PHYC_TX_TRAN_CNTr_GET(r) (r).phyc_tx_tran_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_GET(r) (((r).phyc_tx_tran_cnt[0]) & 0x3ff)
#define BCM84834_PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_SET(r,f) (r).phyc_tx_tran_cnt[0]=(((r).phyc_tx_tran_cnt[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access PHYC_TX_TRAN_CNT.
 *
 */
#define BCM84834_READ_PHYC_TX_TRAN_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_TRAN_CNTr,(_r._phyc_tx_tran_cnt))
#define BCM84834_WRITE_PHYC_TX_TRAN_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_TRAN_CNTr,(_r._phyc_tx_tran_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_TRAN_CNTr BCM84834_PHYC_TX_TRAN_CNTr
#define PHYC_TX_TRAN_CNTr_SIZE BCM84834_PHYC_TX_TRAN_CNTr_SIZE
typedef BCM84834_PHYC_TX_TRAN_CNTr_t PHYC_TX_TRAN_CNTr_t;
#define PHYC_TX_TRAN_CNTr_CLR BCM84834_PHYC_TX_TRAN_CNTr_CLR
#define PHYC_TX_TRAN_CNTr_SET BCM84834_PHYC_TX_TRAN_CNTr_SET
#define PHYC_TX_TRAN_CNTr_GET BCM84834_PHYC_TX_TRAN_CNTr_GET
#define PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_GET BCM84834_PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_GET
#define PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_SET BCM84834_PHYC_TX_TRAN_CNTr_TX_TRAN_CNTf_SET
#define READ_PHYC_TX_TRAN_CNTr BCM84834_READ_PHYC_TX_TRAN_CNTr
#define WRITE_PHYC_TX_TRAN_CNTr BCM84834_WRITE_PHYC_TX_TRAN_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_TRAN_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FR_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa917
 * DEVAD:    1
 * DESC:     Fast Retrain Control
 * SIZE:     32
 * FIELDS:
 *     LOC_FR_MODE      
 *     FR_TX_CNT_INC    
 *     FR_RX_CNT_INC    
 *     FR_IF_DISABLE    
 *
 ******************************************************************************/
#define BCM84834_PHYC_FR_CTLr (0x0001a917 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FR_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FR_CTL.
 *
 */
typedef union BCM84834_PHYC_FR_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_fr_ctl[1];
	uint32_t _phyc_fr_ctl;
} BCM84834_PHYC_FR_CTLr_t;

#define BCM84834_PHYC_FR_CTLr_CLR(r) (r).phyc_fr_ctl[0] = 0
#define BCM84834_PHYC_FR_CTLr_SET(r,d) (r).phyc_fr_ctl[0] = d
#define BCM84834_PHYC_FR_CTLr_GET(r) (r).phyc_fr_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FR_CTLr_FR_IF_DISABLEf_GET(r) ((((r).phyc_fr_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_FR_CTLr_FR_IF_DISABLEf_SET(r,f) (r).phyc_fr_ctl[0]=(((r).phyc_fr_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_FR_CTLr_FR_RX_CNT_INCf_GET(r) ((((r).phyc_fr_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_FR_CTLr_FR_RX_CNT_INCf_SET(r,f) (r).phyc_fr_ctl[0]=(((r).phyc_fr_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_FR_CTLr_FR_TX_CNT_INCf_GET(r) ((((r).phyc_fr_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_FR_CTLr_FR_TX_CNT_INCf_SET(r,f) (r).phyc_fr_ctl[0]=(((r).phyc_fr_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_FR_CTLr_LOC_FR_MODEf_GET(r) (((r).phyc_fr_ctl[0]) & 0x1)
#define BCM84834_PHYC_FR_CTLr_LOC_FR_MODEf_SET(r,f) (r).phyc_fr_ctl[0]=(((r).phyc_fr_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_FR_CTL.
 *
 */
#define BCM84834_READ_PHYC_FR_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FR_CTLr,(_r._phyc_fr_ctl))
#define BCM84834_WRITE_PHYC_FR_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FR_CTLr,(_r._phyc_fr_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FR_CTLr BCM84834_PHYC_FR_CTLr
#define PHYC_FR_CTLr_SIZE BCM84834_PHYC_FR_CTLr_SIZE
typedef BCM84834_PHYC_FR_CTLr_t PHYC_FR_CTLr_t;
#define PHYC_FR_CTLr_CLR BCM84834_PHYC_FR_CTLr_CLR
#define PHYC_FR_CTLr_SET BCM84834_PHYC_FR_CTLr_SET
#define PHYC_FR_CTLr_GET BCM84834_PHYC_FR_CTLr_GET
#define PHYC_FR_CTLr_FR_IF_DISABLEf_GET BCM84834_PHYC_FR_CTLr_FR_IF_DISABLEf_GET
#define PHYC_FR_CTLr_FR_IF_DISABLEf_SET BCM84834_PHYC_FR_CTLr_FR_IF_DISABLEf_SET
#define PHYC_FR_CTLr_FR_RX_CNT_INCf_GET BCM84834_PHYC_FR_CTLr_FR_RX_CNT_INCf_GET
#define PHYC_FR_CTLr_FR_RX_CNT_INCf_SET BCM84834_PHYC_FR_CTLr_FR_RX_CNT_INCf_SET
#define PHYC_FR_CTLr_FR_TX_CNT_INCf_GET BCM84834_PHYC_FR_CTLr_FR_TX_CNT_INCf_GET
#define PHYC_FR_CTLr_FR_TX_CNT_INCf_SET BCM84834_PHYC_FR_CTLr_FR_TX_CNT_INCf_SET
#define PHYC_FR_CTLr_LOC_FR_MODEf_GET BCM84834_PHYC_FR_CTLr_LOC_FR_MODEf_GET
#define PHYC_FR_CTLr_LOC_FR_MODEf_SET BCM84834_PHYC_FR_CTLr_LOC_FR_MODEf_SET
#define READ_PHYC_FR_CTLr BCM84834_READ_PHYC_FR_CTLr
#define WRITE_PHYC_FR_CTLr BCM84834_WRITE_PHYC_FR_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FR_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL0
 * BLOCKS:   PHYC
 * REGADDR:  0xa918
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 0
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r (0x0001a918 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL0.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val0[1];
	uint32_t _phyc_tx_alert_lpwr_val0;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_CLR(r) (r).phyc_tx_alert_lpwr_val0[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_SET(r,d) (r).phyc_tx_alert_lpwr_val0[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_GET(r) (r).phyc_tx_alert_lpwr_val0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val0[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val0[0]=(((r).phyc_tx_alert_lpwr_val0[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val0[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val0[0]=(((r).phyc_tx_alert_lpwr_val0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL0.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL0r,(_r._phyc_tx_alert_lpwr_val0))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL0r,(_r._phyc_tx_alert_lpwr_val0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL0r BCM84834_PHYC_TX_ALERT_LPWR_VAL0r
#define PHYC_TX_ALERT_LPWR_VAL0r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_t PHYC_TX_ALERT_LPWR_VAL0r_t;
#define PHYC_TX_ALERT_LPWR_VAL0r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_CLR
#define PHYC_TX_ALERT_LPWR_VAL0r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_SET
#define PHYC_TX_ALERT_LPWR_VAL0r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_GET
#define PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL0r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL0r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL0r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL0r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL1
 * BLOCKS:   PHYC
 * REGADDR:  0xa919
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 1
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r (0x0001a919 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL1.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val1[1];
	uint32_t _phyc_tx_alert_lpwr_val1;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_CLR(r) (r).phyc_tx_alert_lpwr_val1[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_SET(r,d) (r).phyc_tx_alert_lpwr_val1[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_GET(r) (r).phyc_tx_alert_lpwr_val1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val1[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val1[0]=(((r).phyc_tx_alert_lpwr_val1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val1[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val1[0]=(((r).phyc_tx_alert_lpwr_val1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL1.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL1r,(_r._phyc_tx_alert_lpwr_val1))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL1r,(_r._phyc_tx_alert_lpwr_val1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL1r BCM84834_PHYC_TX_ALERT_LPWR_VAL1r
#define PHYC_TX_ALERT_LPWR_VAL1r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_t PHYC_TX_ALERT_LPWR_VAL1r_t;
#define PHYC_TX_ALERT_LPWR_VAL1r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_CLR
#define PHYC_TX_ALERT_LPWR_VAL1r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_SET
#define PHYC_TX_ALERT_LPWR_VAL1r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_GET
#define PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL1r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL1r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL1r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL1r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL2
 * BLOCKS:   PHYC
 * REGADDR:  0xa91a
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 2
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r (0x0001a91a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL2.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val2[1];
	uint32_t _phyc_tx_alert_lpwr_val2;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_CLR(r) (r).phyc_tx_alert_lpwr_val2[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_SET(r,d) (r).phyc_tx_alert_lpwr_val2[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_GET(r) (r).phyc_tx_alert_lpwr_val2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val2[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val2[0]=(((r).phyc_tx_alert_lpwr_val2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val2[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val2[0]=(((r).phyc_tx_alert_lpwr_val2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL2.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL2r,(_r._phyc_tx_alert_lpwr_val2))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL2r,(_r._phyc_tx_alert_lpwr_val2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL2r BCM84834_PHYC_TX_ALERT_LPWR_VAL2r
#define PHYC_TX_ALERT_LPWR_VAL2r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_t PHYC_TX_ALERT_LPWR_VAL2r_t;
#define PHYC_TX_ALERT_LPWR_VAL2r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_CLR
#define PHYC_TX_ALERT_LPWR_VAL2r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_SET
#define PHYC_TX_ALERT_LPWR_VAL2r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_GET
#define PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL2r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL2r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL2r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL2r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL3
 * BLOCKS:   PHYC
 * REGADDR:  0xa91b
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 3
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r (0x0001a91b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL3.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val3[1];
	uint32_t _phyc_tx_alert_lpwr_val3;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_CLR(r) (r).phyc_tx_alert_lpwr_val3[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_SET(r,d) (r).phyc_tx_alert_lpwr_val3[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_GET(r) (r).phyc_tx_alert_lpwr_val3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val3[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val3[0]=(((r).phyc_tx_alert_lpwr_val3[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val3[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val3[0]=(((r).phyc_tx_alert_lpwr_val3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL3.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL3r,(_r._phyc_tx_alert_lpwr_val3))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL3r,(_r._phyc_tx_alert_lpwr_val3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL3r BCM84834_PHYC_TX_ALERT_LPWR_VAL3r
#define PHYC_TX_ALERT_LPWR_VAL3r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_t PHYC_TX_ALERT_LPWR_VAL3r_t;
#define PHYC_TX_ALERT_LPWR_VAL3r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_CLR
#define PHYC_TX_ALERT_LPWR_VAL3r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_SET
#define PHYC_TX_ALERT_LPWR_VAL3r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_GET
#define PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL3r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL3r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL3r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL3r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL4
 * BLOCKS:   PHYC
 * REGADDR:  0xa91c
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 4
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r (0x0001a91c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL4.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val4[1];
	uint32_t _phyc_tx_alert_lpwr_val4;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_CLR(r) (r).phyc_tx_alert_lpwr_val4[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_SET(r,d) (r).phyc_tx_alert_lpwr_val4[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_GET(r) (r).phyc_tx_alert_lpwr_val4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val4[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val4[0]=(((r).phyc_tx_alert_lpwr_val4[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val4[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val4[0]=(((r).phyc_tx_alert_lpwr_val4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL4.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL4r,(_r._phyc_tx_alert_lpwr_val4))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL4r,(_r._phyc_tx_alert_lpwr_val4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL4r BCM84834_PHYC_TX_ALERT_LPWR_VAL4r
#define PHYC_TX_ALERT_LPWR_VAL4r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_t PHYC_TX_ALERT_LPWR_VAL4r_t;
#define PHYC_TX_ALERT_LPWR_VAL4r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_CLR
#define PHYC_TX_ALERT_LPWR_VAL4r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_SET
#define PHYC_TX_ALERT_LPWR_VAL4r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_GET
#define PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL4r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL4r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL4r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL4r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL5
 * BLOCKS:   PHYC
 * REGADDR:  0xa91d
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 5
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r (0x0001a91d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL5.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val5[1];
	uint32_t _phyc_tx_alert_lpwr_val5;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_CLR(r) (r).phyc_tx_alert_lpwr_val5[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_SET(r,d) (r).phyc_tx_alert_lpwr_val5[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_GET(r) (r).phyc_tx_alert_lpwr_val5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val5[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val5[0]=(((r).phyc_tx_alert_lpwr_val5[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val5[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val5[0]=(((r).phyc_tx_alert_lpwr_val5[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL5.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL5r,(_r._phyc_tx_alert_lpwr_val5))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL5r,(_r._phyc_tx_alert_lpwr_val5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL5r BCM84834_PHYC_TX_ALERT_LPWR_VAL5r
#define PHYC_TX_ALERT_LPWR_VAL5r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_t PHYC_TX_ALERT_LPWR_VAL5r_t;
#define PHYC_TX_ALERT_LPWR_VAL5r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_CLR
#define PHYC_TX_ALERT_LPWR_VAL5r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_SET
#define PHYC_TX_ALERT_LPWR_VAL5r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_GET
#define PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL5r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL5r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL5r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL5r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL6
 * BLOCKS:   PHYC
 * REGADDR:  0xa91e
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 6
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r (0x0001a91e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL6.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val6[1];
	uint32_t _phyc_tx_alert_lpwr_val6;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_CLR(r) (r).phyc_tx_alert_lpwr_val6[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_SET(r,d) (r).phyc_tx_alert_lpwr_val6[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_GET(r) (r).phyc_tx_alert_lpwr_val6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val6[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val6[0]=(((r).phyc_tx_alert_lpwr_val6[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val6[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val6[0]=(((r).phyc_tx_alert_lpwr_val6[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL6.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL6r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL6r,(_r._phyc_tx_alert_lpwr_val6))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL6r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL6r,(_r._phyc_tx_alert_lpwr_val6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL6r BCM84834_PHYC_TX_ALERT_LPWR_VAL6r
#define PHYC_TX_ALERT_LPWR_VAL6r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_t PHYC_TX_ALERT_LPWR_VAL6r_t;
#define PHYC_TX_ALERT_LPWR_VAL6r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_CLR
#define PHYC_TX_ALERT_LPWR_VAL6r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_SET
#define PHYC_TX_ALERT_LPWR_VAL6r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_GET
#define PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL6r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL6r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL6r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL6r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL7
 * BLOCKS:   PHYC
 * REGADDR:  0xa91f
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 7
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r (0x0001a91f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL7.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val7[1];
	uint32_t _phyc_tx_alert_lpwr_val7;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_CLR(r) (r).phyc_tx_alert_lpwr_val7[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_SET(r,d) (r).phyc_tx_alert_lpwr_val7[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_GET(r) (r).phyc_tx_alert_lpwr_val7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val7[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val7[0]=(((r).phyc_tx_alert_lpwr_val7[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val7[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val7[0]=(((r).phyc_tx_alert_lpwr_val7[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL7.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL7r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL7r,(_r._phyc_tx_alert_lpwr_val7))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL7r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL7r,(_r._phyc_tx_alert_lpwr_val7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL7r BCM84834_PHYC_TX_ALERT_LPWR_VAL7r
#define PHYC_TX_ALERT_LPWR_VAL7r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_t PHYC_TX_ALERT_LPWR_VAL7r_t;
#define PHYC_TX_ALERT_LPWR_VAL7r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_CLR
#define PHYC_TX_ALERT_LPWR_VAL7r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_SET
#define PHYC_TX_ALERT_LPWR_VAL7r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_GET
#define PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL7r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL7r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL7r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL7r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL8
 * BLOCKS:   PHYC
 * REGADDR:  0xa920
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 8
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r (0x0001a920 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL8.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val8[1];
	uint32_t _phyc_tx_alert_lpwr_val8;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_CLR(r) (r).phyc_tx_alert_lpwr_val8[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_SET(r,d) (r).phyc_tx_alert_lpwr_val8[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_GET(r) (r).phyc_tx_alert_lpwr_val8[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val8[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val8[0]=(((r).phyc_tx_alert_lpwr_val8[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val8[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val8[0]=(((r).phyc_tx_alert_lpwr_val8[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL8.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL8r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL8r,(_r._phyc_tx_alert_lpwr_val8))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL8r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL8r,(_r._phyc_tx_alert_lpwr_val8))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL8r BCM84834_PHYC_TX_ALERT_LPWR_VAL8r
#define PHYC_TX_ALERT_LPWR_VAL8r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_t PHYC_TX_ALERT_LPWR_VAL8r_t;
#define PHYC_TX_ALERT_LPWR_VAL8r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_CLR
#define PHYC_TX_ALERT_LPWR_VAL8r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_SET
#define PHYC_TX_ALERT_LPWR_VAL8r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_GET
#define PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL8r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL8r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL8r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL8r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL8r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL8r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL9
 * BLOCKS:   PHYC
 * REGADDR:  0xa921
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 9
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r (0x0001a921 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL9.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val9[1];
	uint32_t _phyc_tx_alert_lpwr_val9;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_CLR(r) (r).phyc_tx_alert_lpwr_val9[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_SET(r,d) (r).phyc_tx_alert_lpwr_val9[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_GET(r) (r).phyc_tx_alert_lpwr_val9[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val9[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val9[0]=(((r).phyc_tx_alert_lpwr_val9[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val9[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val9[0]=(((r).phyc_tx_alert_lpwr_val9[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL9.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL9r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL9r,(_r._phyc_tx_alert_lpwr_val9))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL9r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL9r,(_r._phyc_tx_alert_lpwr_val9))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL9r BCM84834_PHYC_TX_ALERT_LPWR_VAL9r
#define PHYC_TX_ALERT_LPWR_VAL9r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_t PHYC_TX_ALERT_LPWR_VAL9r_t;
#define PHYC_TX_ALERT_LPWR_VAL9r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_CLR
#define PHYC_TX_ALERT_LPWR_VAL9r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_SET
#define PHYC_TX_ALERT_LPWR_VAL9r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_GET
#define PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL9r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL9r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL9r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL9r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL9r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL9r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL10
 * BLOCKS:   PHYC
 * REGADDR:  0xa922
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 10
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r (0x0001a922 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL10.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val10[1];
	uint32_t _phyc_tx_alert_lpwr_val10;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_CLR(r) (r).phyc_tx_alert_lpwr_val10[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_SET(r,d) (r).phyc_tx_alert_lpwr_val10[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_GET(r) (r).phyc_tx_alert_lpwr_val10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val10[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val10[0]=(((r).phyc_tx_alert_lpwr_val10[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val10[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val10[0]=(((r).phyc_tx_alert_lpwr_val10[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL10.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL10r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL10r,(_r._phyc_tx_alert_lpwr_val10))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL10r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL10r,(_r._phyc_tx_alert_lpwr_val10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL10r BCM84834_PHYC_TX_ALERT_LPWR_VAL10r
#define PHYC_TX_ALERT_LPWR_VAL10r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_t PHYC_TX_ALERT_LPWR_VAL10r_t;
#define PHYC_TX_ALERT_LPWR_VAL10r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_CLR
#define PHYC_TX_ALERT_LPWR_VAL10r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_SET
#define PHYC_TX_ALERT_LPWR_VAL10r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_GET
#define PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL10r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL10r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL10r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL10r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL11
 * BLOCKS:   PHYC
 * REGADDR:  0xa923
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 11
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r (0x0001a923 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL11.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val11[1];
	uint32_t _phyc_tx_alert_lpwr_val11;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_CLR(r) (r).phyc_tx_alert_lpwr_val11[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_SET(r,d) (r).phyc_tx_alert_lpwr_val11[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_GET(r) (r).phyc_tx_alert_lpwr_val11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val11[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val11[0]=(((r).phyc_tx_alert_lpwr_val11[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val11[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val11[0]=(((r).phyc_tx_alert_lpwr_val11[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL11.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL11r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL11r,(_r._phyc_tx_alert_lpwr_val11))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL11r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL11r,(_r._phyc_tx_alert_lpwr_val11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL11r BCM84834_PHYC_TX_ALERT_LPWR_VAL11r
#define PHYC_TX_ALERT_LPWR_VAL11r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_t PHYC_TX_ALERT_LPWR_VAL11r_t;
#define PHYC_TX_ALERT_LPWR_VAL11r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_CLR
#define PHYC_TX_ALERT_LPWR_VAL11r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_SET
#define PHYC_TX_ALERT_LPWR_VAL11r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_GET
#define PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL11r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL11r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL11r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL11r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL12
 * BLOCKS:   PHYC
 * REGADDR:  0xa924
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 12
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r (0x0001a924 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL12.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val12[1];
	uint32_t _phyc_tx_alert_lpwr_val12;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_CLR(r) (r).phyc_tx_alert_lpwr_val12[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_SET(r,d) (r).phyc_tx_alert_lpwr_val12[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_GET(r) (r).phyc_tx_alert_lpwr_val12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val12[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val12[0]=(((r).phyc_tx_alert_lpwr_val12[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val12[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val12[0]=(((r).phyc_tx_alert_lpwr_val12[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL12.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL12r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL12r,(_r._phyc_tx_alert_lpwr_val12))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL12r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL12r,(_r._phyc_tx_alert_lpwr_val12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL12r BCM84834_PHYC_TX_ALERT_LPWR_VAL12r
#define PHYC_TX_ALERT_LPWR_VAL12r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_t PHYC_TX_ALERT_LPWR_VAL12r_t;
#define PHYC_TX_ALERT_LPWR_VAL12r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_CLR
#define PHYC_TX_ALERT_LPWR_VAL12r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_SET
#define PHYC_TX_ALERT_LPWR_VAL12r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_GET
#define PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL12r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL12r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL12r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL12r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL13
 * BLOCKS:   PHYC
 * REGADDR:  0xa925
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 13
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r (0x0001a925 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL13.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val13[1];
	uint32_t _phyc_tx_alert_lpwr_val13;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_CLR(r) (r).phyc_tx_alert_lpwr_val13[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_SET(r,d) (r).phyc_tx_alert_lpwr_val13[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_GET(r) (r).phyc_tx_alert_lpwr_val13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val13[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val13[0]=(((r).phyc_tx_alert_lpwr_val13[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val13[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val13[0]=(((r).phyc_tx_alert_lpwr_val13[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL13.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL13r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL13r,(_r._phyc_tx_alert_lpwr_val13))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL13r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL13r,(_r._phyc_tx_alert_lpwr_val13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL13r BCM84834_PHYC_TX_ALERT_LPWR_VAL13r
#define PHYC_TX_ALERT_LPWR_VAL13r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_t PHYC_TX_ALERT_LPWR_VAL13r_t;
#define PHYC_TX_ALERT_LPWR_VAL13r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_CLR
#define PHYC_TX_ALERT_LPWR_VAL13r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_SET
#define PHYC_TX_ALERT_LPWR_VAL13r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_GET
#define PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL13r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL13r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL13r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL13r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL14
 * BLOCKS:   PHYC
 * REGADDR:  0xa926
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 14
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r (0x0001a926 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL14.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val14[1];
	uint32_t _phyc_tx_alert_lpwr_val14;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_CLR(r) (r).phyc_tx_alert_lpwr_val14[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_SET(r,d) (r).phyc_tx_alert_lpwr_val14[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_GET(r) (r).phyc_tx_alert_lpwr_val14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val14[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val14[0]=(((r).phyc_tx_alert_lpwr_val14[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val14[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val14[0]=(((r).phyc_tx_alert_lpwr_val14[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL14.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL14r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL14r,(_r._phyc_tx_alert_lpwr_val14))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL14r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL14r,(_r._phyc_tx_alert_lpwr_val14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL14r BCM84834_PHYC_TX_ALERT_LPWR_VAL14r
#define PHYC_TX_ALERT_LPWR_VAL14r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_t PHYC_TX_ALERT_LPWR_VAL14r_t;
#define PHYC_TX_ALERT_LPWR_VAL14r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_CLR
#define PHYC_TX_ALERT_LPWR_VAL14r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_SET
#define PHYC_TX_ALERT_LPWR_VAL14r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_GET
#define PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL14r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL14r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL14r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL14r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_TX_ALERT_LPWR_VAL15
 * BLOCKS:   PHYC
 * REGADDR:  0xa927
 * DEVAD:    1
 * DESC:     Transmit Alert Low Power Value 15
 * SIZE:     32
 * FIELDS:
 *     TX_ALERT_LPWR_VAL_E 
 *     TX_ALERT_LPWR_VAL_O 
 *
 ******************************************************************************/
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r (0x0001a927 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_TX_ALERT_LPWR_VAL15.
 *
 */
typedef union BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_s {
	uint32_t v[1];
	uint32_t phyc_tx_alert_lpwr_val15[1];
	uint32_t _phyc_tx_alert_lpwr_val15;
} BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_t;

#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_CLR(r) (r).phyc_tx_alert_lpwr_val15[0] = 0
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_SET(r,d) (r).phyc_tx_alert_lpwr_val15[0] = d
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_GET(r) (r).phyc_tx_alert_lpwr_val15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_GET(r) ((((r).phyc_tx_alert_lpwr_val15[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_SET(r,f) (r).phyc_tx_alert_lpwr_val15[0]=(((r).phyc_tx_alert_lpwr_val15[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_GET(r) (((r).phyc_tx_alert_lpwr_val15[0]) & 0x3f)
#define BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_SET(r,f) (r).phyc_tx_alert_lpwr_val15[0]=(((r).phyc_tx_alert_lpwr_val15[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PHYC_TX_ALERT_LPWR_VAL15.
 *
 */
#define BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL15r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL15r,(_r._phyc_tx_alert_lpwr_val15))
#define BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL15r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_TX_ALERT_LPWR_VAL15r,(_r._phyc_tx_alert_lpwr_val15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_TX_ALERT_LPWR_VAL15r BCM84834_PHYC_TX_ALERT_LPWR_VAL15r
#define PHYC_TX_ALERT_LPWR_VAL15r_SIZE BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_SIZE
typedef BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_t PHYC_TX_ALERT_LPWR_VAL15r_t;
#define PHYC_TX_ALERT_LPWR_VAL15r_CLR BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_CLR
#define PHYC_TX_ALERT_LPWR_VAL15r_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_SET
#define PHYC_TX_ALERT_LPWR_VAL15r_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_GET
#define PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_GET
#define PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Of_SET
#define PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_GET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_GET
#define PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_SET BCM84834_PHYC_TX_ALERT_LPWR_VAL15r_TX_ALERT_LPWR_VAL_Ef_SET
#define READ_PHYC_TX_ALERT_LPWR_VAL15r BCM84834_READ_PHYC_TX_ALERT_LPWR_VAL15r
#define WRITE_PHYC_TX_ALERT_LPWR_VAL15r BCM84834_WRITE_PHYC_TX_ALERT_LPWR_VAL15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_TX_ALERT_LPWR_VAL15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_OVERRD_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa928
 * DEVAD:    1
 * DESC:     PCS Rx Override 0
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_OVERRD_CTL 
 *     PCS_RX_OVERRD_SEL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_OVERRD_0r (0x0001a928 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_OVERRD_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_OVERRD_0.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_OVERRD_0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_overrd_0[1];
	uint32_t _phyc_pcs_rx_overrd_0;
} BCM84834_PHYC_PCS_RX_OVERRD_0r_t;

#define BCM84834_PHYC_PCS_RX_OVERRD_0r_CLR(r) (r).phyc_pcs_rx_overrd_0[0] = 0
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_SET(r,d) (r).phyc_pcs_rx_overrd_0[0] = d
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_GET(r) (r).phyc_pcs_rx_overrd_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_GET(r) ((((r).phyc_pcs_rx_overrd_0[0]) >> 4) & 0x1)
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_SET(r,f) (r).phyc_pcs_rx_overrd_0[0]=(((r).phyc_pcs_rx_overrd_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_GET(r) (((r).phyc_pcs_rx_overrd_0[0]) & 0xf)
#define BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_SET(r,f) (r).phyc_pcs_rx_overrd_0[0]=(((r).phyc_pcs_rx_overrd_0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_PCS_RX_OVERRD_0.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_OVERRD_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_OVERRD_0r,(_r._phyc_pcs_rx_overrd_0))
#define BCM84834_WRITE_PHYC_PCS_RX_OVERRD_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_OVERRD_0r,(_r._phyc_pcs_rx_overrd_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_OVERRD_0r BCM84834_PHYC_PCS_RX_OVERRD_0r
#define PHYC_PCS_RX_OVERRD_0r_SIZE BCM84834_PHYC_PCS_RX_OVERRD_0r_SIZE
typedef BCM84834_PHYC_PCS_RX_OVERRD_0r_t PHYC_PCS_RX_OVERRD_0r_t;
#define PHYC_PCS_RX_OVERRD_0r_CLR BCM84834_PHYC_PCS_RX_OVERRD_0r_CLR
#define PHYC_PCS_RX_OVERRD_0r_SET BCM84834_PHYC_PCS_RX_OVERRD_0r_SET
#define PHYC_PCS_RX_OVERRD_0r_GET BCM84834_PHYC_PCS_RX_OVERRD_0r_GET
#define PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_GET BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_GET
#define PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_SET BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_SELf_SET
#define PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_GET BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_GET
#define PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_SET BCM84834_PHYC_PCS_RX_OVERRD_0r_PCS_RX_OVERRD_CTLf_SET
#define READ_PHYC_PCS_RX_OVERRD_0r BCM84834_READ_PHYC_PCS_RX_OVERRD_0r
#define WRITE_PHYC_PCS_RX_OVERRD_0r BCM84834_WRITE_PHYC_PCS_RX_OVERRD_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_OVERRD_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_OVERRD_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa929
 * DEVAD:    1
 * DESC:     PCS Rx Override 1
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_OVERRD_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_OVERRD_1r (0x0001a929 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_OVERRD_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_OVERRD_1.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_OVERRD_1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_overrd_1[1];
	uint32_t _phyc_pcs_rx_overrd_1;
} BCM84834_PHYC_PCS_RX_OVERRD_1r_t;

#define BCM84834_PHYC_PCS_RX_OVERRD_1r_CLR(r) (r).phyc_pcs_rx_overrd_1[0] = 0
#define BCM84834_PHYC_PCS_RX_OVERRD_1r_SET(r,d) (r).phyc_pcs_rx_overrd_1[0] = d
#define BCM84834_PHYC_PCS_RX_OVERRD_1r_GET(r) (r).phyc_pcs_rx_overrd_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_GET(r) (((r).phyc_pcs_rx_overrd_1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_SET(r,f) (r).phyc_pcs_rx_overrd_1[0]=(((r).phyc_pcs_rx_overrd_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_OVERRD_1.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_OVERRD_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_OVERRD_1r,(_r._phyc_pcs_rx_overrd_1))
#define BCM84834_WRITE_PHYC_PCS_RX_OVERRD_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_OVERRD_1r,(_r._phyc_pcs_rx_overrd_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_OVERRD_1r BCM84834_PHYC_PCS_RX_OVERRD_1r
#define PHYC_PCS_RX_OVERRD_1r_SIZE BCM84834_PHYC_PCS_RX_OVERRD_1r_SIZE
typedef BCM84834_PHYC_PCS_RX_OVERRD_1r_t PHYC_PCS_RX_OVERRD_1r_t;
#define PHYC_PCS_RX_OVERRD_1r_CLR BCM84834_PHYC_PCS_RX_OVERRD_1r_CLR
#define PHYC_PCS_RX_OVERRD_1r_SET BCM84834_PHYC_PCS_RX_OVERRD_1r_SET
#define PHYC_PCS_RX_OVERRD_1r_GET BCM84834_PHYC_PCS_RX_OVERRD_1r_GET
#define PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_GET BCM84834_PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_GET
#define PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_SET BCM84834_PHYC_PCS_RX_OVERRD_1r_PCS_RX_OVERRD_VALf_SET
#define READ_PHYC_PCS_RX_OVERRD_1r BCM84834_READ_PHYC_PCS_RX_OVERRD_1r
#define WRITE_PHYC_PCS_RX_OVERRD_1r BCM84834_WRITE_PHYC_PCS_RX_OVERRD_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_OVERRD_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_OVERRD_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92a
 * DEVAD:    1
 * DESC:     PCS Rx Override 2
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_OVERRD_VAL 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_OVERRD_2r (0x0001a92a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_OVERRD_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_OVERRD_2.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_OVERRD_2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_overrd_2[1];
	uint32_t _phyc_pcs_rx_overrd_2;
} BCM84834_PHYC_PCS_RX_OVERRD_2r_t;

#define BCM84834_PHYC_PCS_RX_OVERRD_2r_CLR(r) (r).phyc_pcs_rx_overrd_2[0] = 0
#define BCM84834_PHYC_PCS_RX_OVERRD_2r_SET(r,d) (r).phyc_pcs_rx_overrd_2[0] = d
#define BCM84834_PHYC_PCS_RX_OVERRD_2r_GET(r) (r).phyc_pcs_rx_overrd_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_GET(r) (((r).phyc_pcs_rx_overrd_2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_SET(r,f) (r).phyc_pcs_rx_overrd_2[0]=(((r).phyc_pcs_rx_overrd_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_OVERRD_2.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_OVERRD_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_OVERRD_2r,(_r._phyc_pcs_rx_overrd_2))
#define BCM84834_WRITE_PHYC_PCS_RX_OVERRD_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_OVERRD_2r,(_r._phyc_pcs_rx_overrd_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_OVERRD_2r BCM84834_PHYC_PCS_RX_OVERRD_2r
#define PHYC_PCS_RX_OVERRD_2r_SIZE BCM84834_PHYC_PCS_RX_OVERRD_2r_SIZE
typedef BCM84834_PHYC_PCS_RX_OVERRD_2r_t PHYC_PCS_RX_OVERRD_2r_t;
#define PHYC_PCS_RX_OVERRD_2r_CLR BCM84834_PHYC_PCS_RX_OVERRD_2r_CLR
#define PHYC_PCS_RX_OVERRD_2r_SET BCM84834_PHYC_PCS_RX_OVERRD_2r_SET
#define PHYC_PCS_RX_OVERRD_2r_GET BCM84834_PHYC_PCS_RX_OVERRD_2r_GET
#define PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_GET BCM84834_PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_GET
#define PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_SET BCM84834_PHYC_PCS_RX_OVERRD_2r_PCS_RX_OVERRD_VALf_SET
#define READ_PHYC_PCS_RX_OVERRD_2r BCM84834_READ_PHYC_PCS_RX_OVERRD_2r
#define WRITE_PHYC_PCS_RX_OVERRD_2r BCM84834_WRITE_PHYC_PCS_RX_OVERRD_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_OVERRD_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_FR_PMD_IEEE_STAT
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92b
 * DEVAD:    1
 * DESC:     Fast Retrain PMD IEEE Status
 * SIZE:     32
 * FIELDS:
 *     FR_NEGOTIATED    
 *     FR_ABIL          
 *
 ******************************************************************************/
#define BCM84834_PHYC_FR_PMD_IEEE_STATr (0x0001a92b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_FR_PMD_IEEE_STATr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_FR_PMD_IEEE_STAT.
 *
 */
typedef union BCM84834_PHYC_FR_PMD_IEEE_STATr_s {
	uint32_t v[1];
	uint32_t phyc_fr_pmd_ieee_stat[1];
	uint32_t _phyc_fr_pmd_ieee_stat;
} BCM84834_PHYC_FR_PMD_IEEE_STATr_t;

#define BCM84834_PHYC_FR_PMD_IEEE_STATr_CLR(r) (r).phyc_fr_pmd_ieee_stat[0] = 0
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_SET(r,d) (r).phyc_fr_pmd_ieee_stat[0] = d
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_GET(r) (r).phyc_fr_pmd_ieee_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_ABILf_GET(r) ((((r).phyc_fr_pmd_ieee_stat[0]) >> 4) & 0x1)
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_ABILf_SET(r,f) (r).phyc_fr_pmd_ieee_stat[0]=(((r).phyc_fr_pmd_ieee_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_GET(r) ((((r).phyc_fr_pmd_ieee_stat[0]) >> 3) & 0x1)
#define BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_SET(r,f) (r).phyc_fr_pmd_ieee_stat[0]=(((r).phyc_fr_pmd_ieee_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access PHYC_FR_PMD_IEEE_STAT.
 *
 */
#define BCM84834_READ_PHYC_FR_PMD_IEEE_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_FR_PMD_IEEE_STATr,(_r._phyc_fr_pmd_ieee_stat))
#define BCM84834_WRITE_PHYC_FR_PMD_IEEE_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_FR_PMD_IEEE_STATr,(_r._phyc_fr_pmd_ieee_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_FR_PMD_IEEE_STATr BCM84834_PHYC_FR_PMD_IEEE_STATr
#define PHYC_FR_PMD_IEEE_STATr_SIZE BCM84834_PHYC_FR_PMD_IEEE_STATr_SIZE
typedef BCM84834_PHYC_FR_PMD_IEEE_STATr_t PHYC_FR_PMD_IEEE_STATr_t;
#define PHYC_FR_PMD_IEEE_STATr_CLR BCM84834_PHYC_FR_PMD_IEEE_STATr_CLR
#define PHYC_FR_PMD_IEEE_STATr_SET BCM84834_PHYC_FR_PMD_IEEE_STATr_SET
#define PHYC_FR_PMD_IEEE_STATr_GET BCM84834_PHYC_FR_PMD_IEEE_STATr_GET
#define PHYC_FR_PMD_IEEE_STATr_FR_ABILf_GET BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_ABILf_GET
#define PHYC_FR_PMD_IEEE_STATr_FR_ABILf_SET BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_ABILf_SET
#define PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_GET BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_GET
#define PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_SET BCM84834_PHYC_FR_PMD_IEEE_STATr_FR_NEGOTIATEDf_SET
#define READ_PHYC_FR_PMD_IEEE_STATr BCM84834_READ_PHYC_FR_PMD_IEEE_STATr
#define WRITE_PHYC_FR_PMD_IEEE_STATr BCM84834_WRITE_PHYC_FR_PMD_IEEE_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_FR_PMD_IEEE_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_SCRAM_CTL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92c
 * DEVAD:    1
 * DESC:     PCS Scrambler Capture Control Register
 * SIZE:     32
 * FIELDS:
 *     RX_DESCR_EN      
 *     TX_SCR_EN        
 *     SCR_CRC_EN       
 *     SCR_SYNDROME_EN  
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_SCRAM_CTLr (0x0001a92c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_SCRAM_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_SCRAM_CTL.
 *
 */
typedef union BCM84834_PHYC_PCS_SCRAM_CTLr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_scram_ctl[1];
	uint32_t _phyc_pcs_scram_ctl;
} BCM84834_PHYC_PCS_SCRAM_CTLr_t;

#define BCM84834_PHYC_PCS_SCRAM_CTLr_CLR(r) (r).phyc_pcs_scram_ctl[0] = 0
#define BCM84834_PHYC_PCS_SCRAM_CTLr_SET(r,d) (r).phyc_pcs_scram_ctl[0] = d
#define BCM84834_PHYC_PCS_SCRAM_CTLr_GET(r) (r).phyc_pcs_scram_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_GET(r) ((((r).phyc_pcs_scram_ctl[0]) >> 3) & 0x1)
#define BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_SET(r,f) (r).phyc_pcs_scram_ctl[0]=(((r).phyc_pcs_scram_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_GET(r) ((((r).phyc_pcs_scram_ctl[0]) >> 2) & 0x1)
#define BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_SET(r,f) (r).phyc_pcs_scram_ctl[0]=(((r).phyc_pcs_scram_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_GET(r) ((((r).phyc_pcs_scram_ctl[0]) >> 1) & 0x1)
#define BCM84834_PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_SET(r,f) (r).phyc_pcs_scram_ctl[0]=(((r).phyc_pcs_scram_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_GET(r) (((r).phyc_pcs_scram_ctl[0]) & 0x1)
#define BCM84834_PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_SET(r,f) (r).phyc_pcs_scram_ctl[0]=(((r).phyc_pcs_scram_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PHYC_PCS_SCRAM_CTL.
 *
 */
#define BCM84834_READ_PHYC_PCS_SCRAM_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_SCRAM_CTLr,(_r._phyc_pcs_scram_ctl))
#define BCM84834_WRITE_PHYC_PCS_SCRAM_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_SCRAM_CTLr,(_r._phyc_pcs_scram_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_SCRAM_CTLr BCM84834_PHYC_PCS_SCRAM_CTLr
#define PHYC_PCS_SCRAM_CTLr_SIZE BCM84834_PHYC_PCS_SCRAM_CTLr_SIZE
typedef BCM84834_PHYC_PCS_SCRAM_CTLr_t PHYC_PCS_SCRAM_CTLr_t;
#define PHYC_PCS_SCRAM_CTLr_CLR BCM84834_PHYC_PCS_SCRAM_CTLr_CLR
#define PHYC_PCS_SCRAM_CTLr_SET BCM84834_PHYC_PCS_SCRAM_CTLr_SET
#define PHYC_PCS_SCRAM_CTLr_GET BCM84834_PHYC_PCS_SCRAM_CTLr_GET
#define PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_GET BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_GET
#define PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_SET BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_SYNDROME_ENf_SET
#define PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_GET BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_GET
#define PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_SET BCM84834_PHYC_PCS_SCRAM_CTLr_SCR_CRC_ENf_SET
#define PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_GET BCM84834_PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_GET
#define PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_SET BCM84834_PHYC_PCS_SCRAM_CTLr_TX_SCR_ENf_SET
#define PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_GET BCM84834_PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_GET
#define PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_SET BCM84834_PHYC_PCS_SCRAM_CTLr_RX_DESCR_ENf_SET
#define READ_PHYC_PCS_SCRAM_CTLr BCM84834_READ_PHYC_PCS_SCRAM_CTLr
#define WRITE_PHYC_PCS_SCRAM_CTLr BCM84834_WRITE_PHYC_PCS_SCRAM_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_SCRAM_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SCRAM_3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92d
 * DEVAD:    1
 * DESC:     PCS Tx Scrambler State 3
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SCRAM_3r (0x0001a92d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SCRAM_3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SCRAM_3.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SCRAM_3r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_scram_3[1];
	uint32_t _phyc_pcs_tx_scram_3;
} BCM84834_PHYC_PCS_TX_SCRAM_3r_t;

#define BCM84834_PHYC_PCS_TX_SCRAM_3r_CLR(r) (r).phyc_pcs_tx_scram_3[0] = 0
#define BCM84834_PHYC_PCS_TX_SCRAM_3r_SET(r,d) (r).phyc_pcs_tx_scram_3[0] = d
#define BCM84834_PHYC_PCS_TX_SCRAM_3r_GET(r) (r).phyc_pcs_tx_scram_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_GET(r) (((r).phyc_pcs_tx_scram_3[0]) & 0x3ff)
#define BCM84834_PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_SET(r,f) (r).phyc_pcs_tx_scram_3[0]=(((r).phyc_pcs_tx_scram_3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access PHYC_PCS_TX_SCRAM_3.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SCRAM_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SCRAM_3r,(_r._phyc_pcs_tx_scram_3))
#define BCM84834_WRITE_PHYC_PCS_TX_SCRAM_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SCRAM_3r,(_r._phyc_pcs_tx_scram_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SCRAM_3r BCM84834_PHYC_PCS_TX_SCRAM_3r
#define PHYC_PCS_TX_SCRAM_3r_SIZE BCM84834_PHYC_PCS_TX_SCRAM_3r_SIZE
typedef BCM84834_PHYC_PCS_TX_SCRAM_3r_t PHYC_PCS_TX_SCRAM_3r_t;
#define PHYC_PCS_TX_SCRAM_3r_CLR BCM84834_PHYC_PCS_TX_SCRAM_3r_CLR
#define PHYC_PCS_TX_SCRAM_3r_SET BCM84834_PHYC_PCS_TX_SCRAM_3r_SET
#define PHYC_PCS_TX_SCRAM_3r_GET BCM84834_PHYC_PCS_TX_SCRAM_3r_GET
#define PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_GET BCM84834_PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_GET
#define PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_SET BCM84834_PHYC_PCS_TX_SCRAM_3r_PCS_TX_SCR_STATEf_SET
#define READ_PHYC_PCS_TX_SCRAM_3r BCM84834_READ_PHYC_PCS_TX_SCRAM_3r
#define WRITE_PHYC_PCS_TX_SCRAM_3r BCM84834_WRITE_PHYC_PCS_TX_SCRAM_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SCRAM_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SCRAM_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92e
 * DEVAD:    1
 * DESC:     PCS Tx Scrambler State 2
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SCRAM_2r (0x0001a92e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SCRAM_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SCRAM_2.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SCRAM_2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_scram_2[1];
	uint32_t _phyc_pcs_tx_scram_2;
} BCM84834_PHYC_PCS_TX_SCRAM_2r_t;

#define BCM84834_PHYC_PCS_TX_SCRAM_2r_CLR(r) (r).phyc_pcs_tx_scram_2[0] = 0
#define BCM84834_PHYC_PCS_TX_SCRAM_2r_SET(r,d) (r).phyc_pcs_tx_scram_2[0] = d
#define BCM84834_PHYC_PCS_TX_SCRAM_2r_GET(r) (r).phyc_pcs_tx_scram_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_GET(r) (((r).phyc_pcs_tx_scram_2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_SET(r,f) (r).phyc_pcs_tx_scram_2[0]=(((r).phyc_pcs_tx_scram_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_SCRAM_2.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SCRAM_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SCRAM_2r,(_r._phyc_pcs_tx_scram_2))
#define BCM84834_WRITE_PHYC_PCS_TX_SCRAM_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SCRAM_2r,(_r._phyc_pcs_tx_scram_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SCRAM_2r BCM84834_PHYC_PCS_TX_SCRAM_2r
#define PHYC_PCS_TX_SCRAM_2r_SIZE BCM84834_PHYC_PCS_TX_SCRAM_2r_SIZE
typedef BCM84834_PHYC_PCS_TX_SCRAM_2r_t PHYC_PCS_TX_SCRAM_2r_t;
#define PHYC_PCS_TX_SCRAM_2r_CLR BCM84834_PHYC_PCS_TX_SCRAM_2r_CLR
#define PHYC_PCS_TX_SCRAM_2r_SET BCM84834_PHYC_PCS_TX_SCRAM_2r_SET
#define PHYC_PCS_TX_SCRAM_2r_GET BCM84834_PHYC_PCS_TX_SCRAM_2r_GET
#define PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_GET BCM84834_PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_GET
#define PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_SET BCM84834_PHYC_PCS_TX_SCRAM_2r_PCS_TX_SCR_STATEf_SET
#define READ_PHYC_PCS_TX_SCRAM_2r BCM84834_READ_PHYC_PCS_TX_SCRAM_2r
#define WRITE_PHYC_PCS_TX_SCRAM_2r BCM84834_WRITE_PHYC_PCS_TX_SCRAM_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SCRAM_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SCRAM_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa92f
 * DEVAD:    1
 * DESC:     PCS Tx Scrambler State 1
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SCRAM_1r (0x0001a92f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SCRAM_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SCRAM_1.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SCRAM_1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_scram_1[1];
	uint32_t _phyc_pcs_tx_scram_1;
} BCM84834_PHYC_PCS_TX_SCRAM_1r_t;

#define BCM84834_PHYC_PCS_TX_SCRAM_1r_CLR(r) (r).phyc_pcs_tx_scram_1[0] = 0
#define BCM84834_PHYC_PCS_TX_SCRAM_1r_SET(r,d) (r).phyc_pcs_tx_scram_1[0] = d
#define BCM84834_PHYC_PCS_TX_SCRAM_1r_GET(r) (r).phyc_pcs_tx_scram_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_GET(r) (((r).phyc_pcs_tx_scram_1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_SET(r,f) (r).phyc_pcs_tx_scram_1[0]=(((r).phyc_pcs_tx_scram_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_SCRAM_1.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SCRAM_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SCRAM_1r,(_r._phyc_pcs_tx_scram_1))
#define BCM84834_WRITE_PHYC_PCS_TX_SCRAM_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SCRAM_1r,(_r._phyc_pcs_tx_scram_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SCRAM_1r BCM84834_PHYC_PCS_TX_SCRAM_1r
#define PHYC_PCS_TX_SCRAM_1r_SIZE BCM84834_PHYC_PCS_TX_SCRAM_1r_SIZE
typedef BCM84834_PHYC_PCS_TX_SCRAM_1r_t PHYC_PCS_TX_SCRAM_1r_t;
#define PHYC_PCS_TX_SCRAM_1r_CLR BCM84834_PHYC_PCS_TX_SCRAM_1r_CLR
#define PHYC_PCS_TX_SCRAM_1r_SET BCM84834_PHYC_PCS_TX_SCRAM_1r_SET
#define PHYC_PCS_TX_SCRAM_1r_GET BCM84834_PHYC_PCS_TX_SCRAM_1r_GET
#define PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_GET BCM84834_PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_GET
#define PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_SET BCM84834_PHYC_PCS_TX_SCRAM_1r_PCS_TX_SCR_STATEf_SET
#define READ_PHYC_PCS_TX_SCRAM_1r BCM84834_READ_PHYC_PCS_TX_SCRAM_1r
#define WRITE_PHYC_PCS_TX_SCRAM_1r BCM84834_WRITE_PHYC_PCS_TX_SCRAM_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SCRAM_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SCRAM_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa930
 * DEVAD:    1
 * DESC:     PCS Tx Scrambler State 0
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SCRAM_0r (0x0001a930 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SCRAM_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SCRAM_0.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SCRAM_0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_scram_0[1];
	uint32_t _phyc_pcs_tx_scram_0;
} BCM84834_PHYC_PCS_TX_SCRAM_0r_t;

#define BCM84834_PHYC_PCS_TX_SCRAM_0r_CLR(r) (r).phyc_pcs_tx_scram_0[0] = 0
#define BCM84834_PHYC_PCS_TX_SCRAM_0r_SET(r,d) (r).phyc_pcs_tx_scram_0[0] = d
#define BCM84834_PHYC_PCS_TX_SCRAM_0r_GET(r) (r).phyc_pcs_tx_scram_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_GET(r) (((r).phyc_pcs_tx_scram_0[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_SET(r,f) (r).phyc_pcs_tx_scram_0[0]=(((r).phyc_pcs_tx_scram_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_SCRAM_0.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SCRAM_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SCRAM_0r,(_r._phyc_pcs_tx_scram_0))
#define BCM84834_WRITE_PHYC_PCS_TX_SCRAM_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SCRAM_0r,(_r._phyc_pcs_tx_scram_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SCRAM_0r BCM84834_PHYC_PCS_TX_SCRAM_0r
#define PHYC_PCS_TX_SCRAM_0r_SIZE BCM84834_PHYC_PCS_TX_SCRAM_0r_SIZE
typedef BCM84834_PHYC_PCS_TX_SCRAM_0r_t PHYC_PCS_TX_SCRAM_0r_t;
#define PHYC_PCS_TX_SCRAM_0r_CLR BCM84834_PHYC_PCS_TX_SCRAM_0r_CLR
#define PHYC_PCS_TX_SCRAM_0r_SET BCM84834_PHYC_PCS_TX_SCRAM_0r_SET
#define PHYC_PCS_TX_SCRAM_0r_GET BCM84834_PHYC_PCS_TX_SCRAM_0r_GET
#define PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_GET BCM84834_PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_GET
#define PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_SET BCM84834_PHYC_PCS_TX_SCRAM_0r_PCS_TX_SCR_STATEf_SET
#define READ_PHYC_PCS_TX_SCRAM_0r BCM84834_READ_PHYC_PCS_TX_SCRAM_0r
#define WRITE_PHYC_PCS_TX_SCRAM_0r BCM84834_WRITE_PHYC_PCS_TX_SCRAM_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SCRAM_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_DSCRAM_3
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa931
 * DEVAD:    1
 * DESC:     PCS Rx Descrambler State 3
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_DESCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_DSCRAM_3r (0x0001a931 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_DSCRAM_3.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_DSCRAM_3r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_dscram_3[1];
	uint32_t _phyc_pcs_rx_dscram_3;
} BCM84834_PHYC_PCS_RX_DSCRAM_3r_t;

#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_CLR(r) (r).phyc_pcs_rx_dscram_3[0] = 0
#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_SET(r,d) (r).phyc_pcs_rx_dscram_3[0] = d
#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_GET(r) (r).phyc_pcs_rx_dscram_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_GET(r) (((r).phyc_pcs_rx_dscram_3[0]) & 0x3ff)
#define BCM84834_PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_SET(r,f) (r).phyc_pcs_rx_dscram_3[0]=(((r).phyc_pcs_rx_dscram_3[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access PHYC_PCS_RX_DSCRAM_3.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_DSCRAM_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_3r,(_r._phyc_pcs_rx_dscram_3))
#define BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_3r,(_r._phyc_pcs_rx_dscram_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_DSCRAM_3r BCM84834_PHYC_PCS_RX_DSCRAM_3r
#define PHYC_PCS_RX_DSCRAM_3r_SIZE BCM84834_PHYC_PCS_RX_DSCRAM_3r_SIZE
typedef BCM84834_PHYC_PCS_RX_DSCRAM_3r_t PHYC_PCS_RX_DSCRAM_3r_t;
#define PHYC_PCS_RX_DSCRAM_3r_CLR BCM84834_PHYC_PCS_RX_DSCRAM_3r_CLR
#define PHYC_PCS_RX_DSCRAM_3r_SET BCM84834_PHYC_PCS_RX_DSCRAM_3r_SET
#define PHYC_PCS_RX_DSCRAM_3r_GET BCM84834_PHYC_PCS_RX_DSCRAM_3r_GET
#define PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_GET BCM84834_PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_GET
#define PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_SET BCM84834_PHYC_PCS_RX_DSCRAM_3r_PCS_RX_DESCR_STATEf_SET
#define READ_PHYC_PCS_RX_DSCRAM_3r BCM84834_READ_PHYC_PCS_RX_DSCRAM_3r
#define WRITE_PHYC_PCS_RX_DSCRAM_3r BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_DSCRAM_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_DSCRAM_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa932
 * DEVAD:    1
 * DESC:     PCS Rx Descrambler State 2
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_DESCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_DSCRAM_2r (0x0001a932 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_DSCRAM_2.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_DSCRAM_2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_dscram_2[1];
	uint32_t _phyc_pcs_rx_dscram_2;
} BCM84834_PHYC_PCS_RX_DSCRAM_2r_t;

#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_CLR(r) (r).phyc_pcs_rx_dscram_2[0] = 0
#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_SET(r,d) (r).phyc_pcs_rx_dscram_2[0] = d
#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_GET(r) (r).phyc_pcs_rx_dscram_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_GET(r) (((r).phyc_pcs_rx_dscram_2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_SET(r,f) (r).phyc_pcs_rx_dscram_2[0]=(((r).phyc_pcs_rx_dscram_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_DSCRAM_2.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_DSCRAM_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_2r,(_r._phyc_pcs_rx_dscram_2))
#define BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_2r,(_r._phyc_pcs_rx_dscram_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_DSCRAM_2r BCM84834_PHYC_PCS_RX_DSCRAM_2r
#define PHYC_PCS_RX_DSCRAM_2r_SIZE BCM84834_PHYC_PCS_RX_DSCRAM_2r_SIZE
typedef BCM84834_PHYC_PCS_RX_DSCRAM_2r_t PHYC_PCS_RX_DSCRAM_2r_t;
#define PHYC_PCS_RX_DSCRAM_2r_CLR BCM84834_PHYC_PCS_RX_DSCRAM_2r_CLR
#define PHYC_PCS_RX_DSCRAM_2r_SET BCM84834_PHYC_PCS_RX_DSCRAM_2r_SET
#define PHYC_PCS_RX_DSCRAM_2r_GET BCM84834_PHYC_PCS_RX_DSCRAM_2r_GET
#define PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_GET BCM84834_PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_GET
#define PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_SET BCM84834_PHYC_PCS_RX_DSCRAM_2r_PCS_RX_DESCR_STATEf_SET
#define READ_PHYC_PCS_RX_DSCRAM_2r BCM84834_READ_PHYC_PCS_RX_DSCRAM_2r
#define WRITE_PHYC_PCS_RX_DSCRAM_2r BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_DSCRAM_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_DSCRAM_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa933
 * DEVAD:    1
 * DESC:     PCS Rx Descrambler State 1
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_DESCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_DSCRAM_1r (0x0001a933 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_DSCRAM_1.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_DSCRAM_1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_dscram_1[1];
	uint32_t _phyc_pcs_rx_dscram_1;
} BCM84834_PHYC_PCS_RX_DSCRAM_1r_t;

#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_CLR(r) (r).phyc_pcs_rx_dscram_1[0] = 0
#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_SET(r,d) (r).phyc_pcs_rx_dscram_1[0] = d
#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_GET(r) (r).phyc_pcs_rx_dscram_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_GET(r) (((r).phyc_pcs_rx_dscram_1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_SET(r,f) (r).phyc_pcs_rx_dscram_1[0]=(((r).phyc_pcs_rx_dscram_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_DSCRAM_1.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_DSCRAM_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_1r,(_r._phyc_pcs_rx_dscram_1))
#define BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_1r,(_r._phyc_pcs_rx_dscram_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_DSCRAM_1r BCM84834_PHYC_PCS_RX_DSCRAM_1r
#define PHYC_PCS_RX_DSCRAM_1r_SIZE BCM84834_PHYC_PCS_RX_DSCRAM_1r_SIZE
typedef BCM84834_PHYC_PCS_RX_DSCRAM_1r_t PHYC_PCS_RX_DSCRAM_1r_t;
#define PHYC_PCS_RX_DSCRAM_1r_CLR BCM84834_PHYC_PCS_RX_DSCRAM_1r_CLR
#define PHYC_PCS_RX_DSCRAM_1r_SET BCM84834_PHYC_PCS_RX_DSCRAM_1r_SET
#define PHYC_PCS_RX_DSCRAM_1r_GET BCM84834_PHYC_PCS_RX_DSCRAM_1r_GET
#define PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_GET BCM84834_PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_GET
#define PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_SET BCM84834_PHYC_PCS_RX_DSCRAM_1r_PCS_RX_DESCR_STATEf_SET
#define READ_PHYC_PCS_RX_DSCRAM_1r BCM84834_READ_PHYC_PCS_RX_DSCRAM_1r
#define WRITE_PHYC_PCS_RX_DSCRAM_1r BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_DSCRAM_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_DSCRAM_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa934
 * DEVAD:    1
 * DESC:     PCS Rx Descrambler State 0
 * SIZE:     32
 * FIELDS:
 *     PCS_RX_DESCR_STATE 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_DSCRAM_0r (0x0001a934 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_DSCRAM_0.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_DSCRAM_0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_dscram_0[1];
	uint32_t _phyc_pcs_rx_dscram_0;
} BCM84834_PHYC_PCS_RX_DSCRAM_0r_t;

#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_CLR(r) (r).phyc_pcs_rx_dscram_0[0] = 0
#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_SET(r,d) (r).phyc_pcs_rx_dscram_0[0] = d
#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_GET(r) (r).phyc_pcs_rx_dscram_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_GET(r) (((r).phyc_pcs_rx_dscram_0[0]) & 0xffff)
#define BCM84834_PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_SET(r,f) (r).phyc_pcs_rx_dscram_0[0]=(((r).phyc_pcs_rx_dscram_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_RX_DSCRAM_0.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_DSCRAM_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_0r,(_r._phyc_pcs_rx_dscram_0))
#define BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_DSCRAM_0r,(_r._phyc_pcs_rx_dscram_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_DSCRAM_0r BCM84834_PHYC_PCS_RX_DSCRAM_0r
#define PHYC_PCS_RX_DSCRAM_0r_SIZE BCM84834_PHYC_PCS_RX_DSCRAM_0r_SIZE
typedef BCM84834_PHYC_PCS_RX_DSCRAM_0r_t PHYC_PCS_RX_DSCRAM_0r_t;
#define PHYC_PCS_RX_DSCRAM_0r_CLR BCM84834_PHYC_PCS_RX_DSCRAM_0r_CLR
#define PHYC_PCS_RX_DSCRAM_0r_SET BCM84834_PHYC_PCS_RX_DSCRAM_0r_SET
#define PHYC_PCS_RX_DSCRAM_0r_GET BCM84834_PHYC_PCS_RX_DSCRAM_0r_GET
#define PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_GET BCM84834_PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_GET
#define PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_SET BCM84834_PHYC_PCS_RX_DSCRAM_0r_PCS_RX_DESCR_STATEf_SET
#define READ_PHYC_PCS_RX_DSCRAM_0r BCM84834_READ_PHYC_PCS_RX_DSCRAM_0r
#define WRITE_PHYC_PCS_RX_DSCRAM_0r BCM84834_WRITE_PHYC_PCS_RX_DSCRAM_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_DSCRAM_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_RX_LFER_VAL
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa935
 * DEVAD:    1
 * DESC:     PCS Rx LDPC Frame Error Values
 * SIZE:     32
 * FIELDS:
 *     CON_FRM_ERR_VAL  
 *     HI_LFER_VAL      
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_RX_LFER_VALr (0x0001a935 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_RX_LFER_VALr_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_RX_LFER_VAL.
 *
 */
typedef union BCM84834_PHYC_PCS_RX_LFER_VALr_s {
	uint32_t v[1];
	uint32_t phyc_pcs_rx_lfer_val[1];
	uint32_t _phyc_pcs_rx_lfer_val;
} BCM84834_PHYC_PCS_RX_LFER_VALr_t;

#define BCM84834_PHYC_PCS_RX_LFER_VALr_CLR(r) (r).phyc_pcs_rx_lfer_val[0] = 0
#define BCM84834_PHYC_PCS_RX_LFER_VALr_SET(r,d) (r).phyc_pcs_rx_lfer_val[0] = d
#define BCM84834_PHYC_PCS_RX_LFER_VALr_GET(r) (r).phyc_pcs_rx_lfer_val[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_GET(r) ((((r).phyc_pcs_rx_lfer_val[0]) >> 8) & 0x3f)
#define BCM84834_PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_SET(r,f) (r).phyc_pcs_rx_lfer_val[0]=(((r).phyc_pcs_rx_lfer_val[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_GET(r) (((r).phyc_pcs_rx_lfer_val[0]) & 0xff)
#define BCM84834_PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_SET(r,f) (r).phyc_pcs_rx_lfer_val[0]=(((r).phyc_pcs_rx_lfer_val[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PHYC_PCS_RX_LFER_VAL.
 *
 */
#define BCM84834_READ_PHYC_PCS_RX_LFER_VALr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_RX_LFER_VALr,(_r._phyc_pcs_rx_lfer_val))
#define BCM84834_WRITE_PHYC_PCS_RX_LFER_VALr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_RX_LFER_VALr,(_r._phyc_pcs_rx_lfer_val))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_RX_LFER_VALr BCM84834_PHYC_PCS_RX_LFER_VALr
#define PHYC_PCS_RX_LFER_VALr_SIZE BCM84834_PHYC_PCS_RX_LFER_VALr_SIZE
typedef BCM84834_PHYC_PCS_RX_LFER_VALr_t PHYC_PCS_RX_LFER_VALr_t;
#define PHYC_PCS_RX_LFER_VALr_CLR BCM84834_PHYC_PCS_RX_LFER_VALr_CLR
#define PHYC_PCS_RX_LFER_VALr_SET BCM84834_PHYC_PCS_RX_LFER_VALr_SET
#define PHYC_PCS_RX_LFER_VALr_GET BCM84834_PHYC_PCS_RX_LFER_VALr_GET
#define PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_GET BCM84834_PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_GET
#define PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_SET BCM84834_PHYC_PCS_RX_LFER_VALr_HI_LFER_VALf_SET
#define PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_GET BCM84834_PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_GET
#define PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_SET BCM84834_PHYC_PCS_RX_LFER_VALr_CON_FRM_ERR_VALf_SET
#define READ_PHYC_PCS_RX_LFER_VALr BCM84834_READ_PHYC_PCS_RX_LFER_VALr
#define WRITE_PHYC_PCS_RX_LFER_VALr BCM84834_WRITE_PHYC_PCS_RX_LFER_VALr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_RX_LFER_VALr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SUB_0
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa936
 * DEVAD:    1
 * DESC:     PCS Tx Substitute 0
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SUB_CTL   
 *     PCS_TX_SUB_LF_EN 
 *     PCS_TX_SUB_RF_EN 
 *     PCS_TX_SUB_ERR_EN 
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SUB_0r (0x0001a936 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SUB_0r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SUB_0.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SUB_0r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_sub_0[1];
	uint32_t _phyc_pcs_tx_sub_0;
} BCM84834_PHYC_PCS_TX_SUB_0r_t;

#define BCM84834_PHYC_PCS_TX_SUB_0r_CLR(r) (r).phyc_pcs_tx_sub_0[0] = 0
#define BCM84834_PHYC_PCS_TX_SUB_0r_SET(r,d) (r).phyc_pcs_tx_sub_0[0] = d
#define BCM84834_PHYC_PCS_TX_SUB_0r_GET(r) (r).phyc_pcs_tx_sub_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_GET(r) ((((r).phyc_pcs_tx_sub_0[0]) >> 6) & 0x1)
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_SET(r,f) (r).phyc_pcs_tx_sub_0[0]=(((r).phyc_pcs_tx_sub_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_GET(r) ((((r).phyc_pcs_tx_sub_0[0]) >> 5) & 0x1)
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_SET(r,f) (r).phyc_pcs_tx_sub_0[0]=(((r).phyc_pcs_tx_sub_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_GET(r) ((((r).phyc_pcs_tx_sub_0[0]) >> 4) & 0x1)
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_SET(r,f) (r).phyc_pcs_tx_sub_0[0]=(((r).phyc_pcs_tx_sub_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_GET(r) (((r).phyc_pcs_tx_sub_0[0]) & 0xf)
#define BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_SET(r,f) (r).phyc_pcs_tx_sub_0[0]=(((r).phyc_pcs_tx_sub_0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYC_PCS_TX_SUB_0.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SUB_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SUB_0r,(_r._phyc_pcs_tx_sub_0))
#define BCM84834_WRITE_PHYC_PCS_TX_SUB_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SUB_0r,(_r._phyc_pcs_tx_sub_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SUB_0r BCM84834_PHYC_PCS_TX_SUB_0r
#define PHYC_PCS_TX_SUB_0r_SIZE BCM84834_PHYC_PCS_TX_SUB_0r_SIZE
typedef BCM84834_PHYC_PCS_TX_SUB_0r_t PHYC_PCS_TX_SUB_0r_t;
#define PHYC_PCS_TX_SUB_0r_CLR BCM84834_PHYC_PCS_TX_SUB_0r_CLR
#define PHYC_PCS_TX_SUB_0r_SET BCM84834_PHYC_PCS_TX_SUB_0r_SET
#define PHYC_PCS_TX_SUB_0r_GET BCM84834_PHYC_PCS_TX_SUB_0r_GET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_GET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_GET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_SET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_ERR_ENf_SET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_GET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_GET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_SET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_RF_ENf_SET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_GET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_GET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_SET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_LF_ENf_SET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_GET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_GET
#define PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_SET BCM84834_PHYC_PCS_TX_SUB_0r_PCS_TX_SUB_CTLf_SET
#define READ_PHYC_PCS_TX_SUB_0r BCM84834_READ_PHYC_PCS_TX_SUB_0r
#define WRITE_PHYC_PCS_TX_SUB_0r BCM84834_WRITE_PHYC_PCS_TX_SUB_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SUB_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SUB_1
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa937
 * DEVAD:    1
 * DESC:     PCS Tx Substitute 1
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SUB_VAL   
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SUB_1r (0x0001a937 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SUB_1r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SUB_1.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SUB_1r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_sub_1[1];
	uint32_t _phyc_pcs_tx_sub_1;
} BCM84834_PHYC_PCS_TX_SUB_1r_t;

#define BCM84834_PHYC_PCS_TX_SUB_1r_CLR(r) (r).phyc_pcs_tx_sub_1[0] = 0
#define BCM84834_PHYC_PCS_TX_SUB_1r_SET(r,d) (r).phyc_pcs_tx_sub_1[0] = d
#define BCM84834_PHYC_PCS_TX_SUB_1r_GET(r) (r).phyc_pcs_tx_sub_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_GET(r) (((r).phyc_pcs_tx_sub_1[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_SET(r,f) (r).phyc_pcs_tx_sub_1[0]=(((r).phyc_pcs_tx_sub_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_SUB_1.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SUB_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SUB_1r,(_r._phyc_pcs_tx_sub_1))
#define BCM84834_WRITE_PHYC_PCS_TX_SUB_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SUB_1r,(_r._phyc_pcs_tx_sub_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SUB_1r BCM84834_PHYC_PCS_TX_SUB_1r
#define PHYC_PCS_TX_SUB_1r_SIZE BCM84834_PHYC_PCS_TX_SUB_1r_SIZE
typedef BCM84834_PHYC_PCS_TX_SUB_1r_t PHYC_PCS_TX_SUB_1r_t;
#define PHYC_PCS_TX_SUB_1r_CLR BCM84834_PHYC_PCS_TX_SUB_1r_CLR
#define PHYC_PCS_TX_SUB_1r_SET BCM84834_PHYC_PCS_TX_SUB_1r_SET
#define PHYC_PCS_TX_SUB_1r_GET BCM84834_PHYC_PCS_TX_SUB_1r_GET
#define PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_GET BCM84834_PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_GET
#define PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_SET BCM84834_PHYC_PCS_TX_SUB_1r_PCS_TX_SUB_VALf_SET
#define READ_PHYC_PCS_TX_SUB_1r BCM84834_READ_PHYC_PCS_TX_SUB_1r
#define WRITE_PHYC_PCS_TX_SUB_1r BCM84834_WRITE_PHYC_PCS_TX_SUB_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SUB_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PHYC_PCS_TX_SUB_2
 * BLOCKS:   PHYC_CTL
 * REGADDR:  0xa938
 * DEVAD:    1
 * DESC:     PCS Tx Substitute 2
 * SIZE:     32
 * FIELDS:
 *     PCS_TX_SUB_VAL   
 *
 ******************************************************************************/
#define BCM84834_PHYC_PCS_TX_SUB_2r (0x0001a938 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PHYC_PCS_TX_SUB_2r_SIZE 4

/*
 * This structure should be used to declare and program PHYC_PCS_TX_SUB_2.
 *
 */
typedef union BCM84834_PHYC_PCS_TX_SUB_2r_s {
	uint32_t v[1];
	uint32_t phyc_pcs_tx_sub_2[1];
	uint32_t _phyc_pcs_tx_sub_2;
} BCM84834_PHYC_PCS_TX_SUB_2r_t;

#define BCM84834_PHYC_PCS_TX_SUB_2r_CLR(r) (r).phyc_pcs_tx_sub_2[0] = 0
#define BCM84834_PHYC_PCS_TX_SUB_2r_SET(r,d) (r).phyc_pcs_tx_sub_2[0] = d
#define BCM84834_PHYC_PCS_TX_SUB_2r_GET(r) (r).phyc_pcs_tx_sub_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_GET(r) (((r).phyc_pcs_tx_sub_2[0]) & 0xffff)
#define BCM84834_PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_SET(r,f) (r).phyc_pcs_tx_sub_2[0]=(((r).phyc_pcs_tx_sub_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYC_PCS_TX_SUB_2.
 *
 */
#define BCM84834_READ_PHYC_PCS_TX_SUB_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PHYC_PCS_TX_SUB_2r,(_r._phyc_pcs_tx_sub_2))
#define BCM84834_WRITE_PHYC_PCS_TX_SUB_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PHYC_PCS_TX_SUB_2r,(_r._phyc_pcs_tx_sub_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYC_PCS_TX_SUB_2r BCM84834_PHYC_PCS_TX_SUB_2r
#define PHYC_PCS_TX_SUB_2r_SIZE BCM84834_PHYC_PCS_TX_SUB_2r_SIZE
typedef BCM84834_PHYC_PCS_TX_SUB_2r_t PHYC_PCS_TX_SUB_2r_t;
#define PHYC_PCS_TX_SUB_2r_CLR BCM84834_PHYC_PCS_TX_SUB_2r_CLR
#define PHYC_PCS_TX_SUB_2r_SET BCM84834_PHYC_PCS_TX_SUB_2r_SET
#define PHYC_PCS_TX_SUB_2r_GET BCM84834_PHYC_PCS_TX_SUB_2r_GET
#define PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_GET BCM84834_PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_GET
#define PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_SET BCM84834_PHYC_PCS_TX_SUB_2r_PCS_TX_SUB_VALf_SET
#define READ_PHYC_PCS_TX_SUB_2r BCM84834_READ_PHYC_PCS_TX_SUB_2r
#define WRITE_PHYC_PCS_TX_SUB_2r BCM84834_WRITE_PHYC_PCS_TX_SUB_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PHYC_PCS_TX_SUB_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_INT_EN
 * BLOCKS:   PTP
 * REGADDR:  0xd808
 * DEVAD:    1
 * DESC:     Interrupt Enable Register
 * SIZE:     32
 * FIELDS:
 *     INT_FSYNC_EN     
 *     INT_PIC_EN       
 *
 ******************************************************************************/
#define BCM84834_PTP_INT_ENr (0x0001d808 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_INT_ENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_INT_EN.
 *
 */
typedef union BCM84834_PTP_INT_ENr_s {
	uint32_t v[1];
	uint32_t ptp_int_en[1];
	uint32_t _ptp_int_en;
} BCM84834_PTP_INT_ENr_t;

#define BCM84834_PTP_INT_ENr_CLR(r) (r).ptp_int_en[0] = 0
#define BCM84834_PTP_INT_ENr_SET(r,d) (r).ptp_int_en[0] = d
#define BCM84834_PTP_INT_ENr_GET(r) (r).ptp_int_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_INT_ENr_INT_PIC_ENf_GET(r) ((((r).ptp_int_en[0]) >> 1) & 0x1)
#define BCM84834_PTP_INT_ENr_INT_PIC_ENf_SET(r,f) (r).ptp_int_en[0]=(((r).ptp_int_en[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_INT_ENr_INT_FSYNC_ENf_GET(r) (((r).ptp_int_en[0]) & 0x1)
#define BCM84834_PTP_INT_ENr_INT_FSYNC_ENf_SET(r,f) (r).ptp_int_en[0]=(((r).ptp_int_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_INT_EN.
 *
 */
#define BCM84834_READ_PTP_INT_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_INT_ENr,(_r._ptp_int_en))
#define BCM84834_WRITE_PTP_INT_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_INT_ENr,(_r._ptp_int_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_INT_ENr BCM84834_PTP_INT_ENr
#define PTP_INT_ENr_SIZE BCM84834_PTP_INT_ENr_SIZE
typedef BCM84834_PTP_INT_ENr_t PTP_INT_ENr_t;
#define PTP_INT_ENr_CLR BCM84834_PTP_INT_ENr_CLR
#define PTP_INT_ENr_SET BCM84834_PTP_INT_ENr_SET
#define PTP_INT_ENr_GET BCM84834_PTP_INT_ENr_GET
#define PTP_INT_ENr_INT_PIC_ENf_GET BCM84834_PTP_INT_ENr_INT_PIC_ENf_GET
#define PTP_INT_ENr_INT_PIC_ENf_SET BCM84834_PTP_INT_ENr_INT_PIC_ENf_SET
#define PTP_INT_ENr_INT_FSYNC_ENf_GET BCM84834_PTP_INT_ENr_INT_FSYNC_ENf_GET
#define PTP_INT_ENr_INT_FSYNC_ENf_SET BCM84834_PTP_INT_ENr_INT_FSYNC_ENf_SET
#define READ_PTP_INT_ENr BCM84834_READ_PTP_INT_ENr
#define WRITE_PTP_INT_ENr BCM84834_WRITE_PTP_INT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_INT_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_INT_STAT
 * BLOCKS:   PTP
 * REGADDR:  0xd809
 * DEVAD:    1
 * DESC:     Interrupt Status Register
 * SIZE:     32
 * FIELDS:
 *     INT_FSYNC        
 *     INT_PIC          
 *
 ******************************************************************************/
#define BCM84834_PTP_INT_STATr (0x0001d809 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_INT_STATr_SIZE 4

/*
 * This structure should be used to declare and program PTP_INT_STAT.
 *
 */
typedef union BCM84834_PTP_INT_STATr_s {
	uint32_t v[1];
	uint32_t ptp_int_stat[1];
	uint32_t _ptp_int_stat;
} BCM84834_PTP_INT_STATr_t;

#define BCM84834_PTP_INT_STATr_CLR(r) (r).ptp_int_stat[0] = 0
#define BCM84834_PTP_INT_STATr_SET(r,d) (r).ptp_int_stat[0] = d
#define BCM84834_PTP_INT_STATr_GET(r) (r).ptp_int_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_INT_STATr_INT_PICf_GET(r) ((((r).ptp_int_stat[0]) >> 1) & 0x1)
#define BCM84834_PTP_INT_STATr_INT_PICf_SET(r,f) (r).ptp_int_stat[0]=(((r).ptp_int_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_INT_STATr_INT_FSYNCf_GET(r) (((r).ptp_int_stat[0]) & 0x1)
#define BCM84834_PTP_INT_STATr_INT_FSYNCf_SET(r,f) (r).ptp_int_stat[0]=(((r).ptp_int_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_INT_STAT.
 *
 */
#define BCM84834_READ_PTP_INT_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_INT_STATr,(_r._ptp_int_stat))
#define BCM84834_WRITE_PTP_INT_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_INT_STATr,(_r._ptp_int_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_INT_STATr BCM84834_PTP_INT_STATr
#define PTP_INT_STATr_SIZE BCM84834_PTP_INT_STATr_SIZE
typedef BCM84834_PTP_INT_STATr_t PTP_INT_STATr_t;
#define PTP_INT_STATr_CLR BCM84834_PTP_INT_STATr_CLR
#define PTP_INT_STATr_SET BCM84834_PTP_INT_STATr_SET
#define PTP_INT_STATr_GET BCM84834_PTP_INT_STATr_GET
#define PTP_INT_STATr_INT_PICf_GET BCM84834_PTP_INT_STATr_INT_PICf_GET
#define PTP_INT_STATr_INT_PICf_SET BCM84834_PTP_INT_STATr_INT_PICf_SET
#define PTP_INT_STATr_INT_FSYNCf_GET BCM84834_PTP_INT_STATr_INT_FSYNCf_GET
#define PTP_INT_STATr_INT_FSYNCf_SET BCM84834_PTP_INT_STATr_INT_FSYNCf_SET
#define READ_PTP_INT_STATr BCM84834_READ_PTP_INT_STATr
#define WRITE_PTP_INT_STATr BCM84834_WRITE_PTP_INT_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_INT_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_INT_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xd80a
 * DEVAD:    1
 * DESC:     Interrupt Clear Register
 * SIZE:     32
 * FIELDS:
 *     INT_FSYNC_CLR    
 *     INT_PIC_CLR      
 *
 ******************************************************************************/
#define BCM84834_PTP_INT_CLRr (0x0001d80a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_INT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_INT_CLR.
 *
 */
typedef union BCM84834_PTP_INT_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_int_clr[1];
	uint32_t _ptp_int_clr;
} BCM84834_PTP_INT_CLRr_t;

#define BCM84834_PTP_INT_CLRr_CLR(r) (r).ptp_int_clr[0] = 0
#define BCM84834_PTP_INT_CLRr_SET(r,d) (r).ptp_int_clr[0] = d
#define BCM84834_PTP_INT_CLRr_GET(r) (r).ptp_int_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_INT_CLRr_INT_PIC_CLRf_GET(r) ((((r).ptp_int_clr[0]) >> 1) & 0x1)
#define BCM84834_PTP_INT_CLRr_INT_PIC_CLRf_SET(r,f) (r).ptp_int_clr[0]=(((r).ptp_int_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_INT_CLRr_INT_FSYNC_CLRf_GET(r) (((r).ptp_int_clr[0]) & 0x1)
#define BCM84834_PTP_INT_CLRr_INT_FSYNC_CLRf_SET(r,f) (r).ptp_int_clr[0]=(((r).ptp_int_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_INT_CLR.
 *
 */
#define BCM84834_READ_PTP_INT_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_INT_CLRr,(_r._ptp_int_clr))
#define BCM84834_WRITE_PTP_INT_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_INT_CLRr,(_r._ptp_int_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_INT_CLRr BCM84834_PTP_INT_CLRr
#define PTP_INT_CLRr_SIZE BCM84834_PTP_INT_CLRr_SIZE
typedef BCM84834_PTP_INT_CLRr_t PTP_INT_CLRr_t;
#define PTP_INT_CLRr_CLR BCM84834_PTP_INT_CLRr_CLR
#define PTP_INT_CLRr_SET BCM84834_PTP_INT_CLRr_SET
#define PTP_INT_CLRr_GET BCM84834_PTP_INT_CLRr_GET
#define PTP_INT_CLRr_INT_PIC_CLRf_GET BCM84834_PTP_INT_CLRr_INT_PIC_CLRf_GET
#define PTP_INT_CLRr_INT_PIC_CLRf_SET BCM84834_PTP_INT_CLRr_INT_PIC_CLRf_SET
#define PTP_INT_CLRr_INT_FSYNC_CLRf_GET BCM84834_PTP_INT_CLRr_INT_FSYNC_CLRf_GET
#define PTP_INT_CLRr_INT_FSYNC_CLRf_SET BCM84834_PTP_INT_CLRr_INT_FSYNC_CLRf_SET
#define READ_PTP_INT_CLRr BCM84834_READ_PTP_INT_CLRr
#define WRITE_PTP_INT_CLRr BCM84834_WRITE_PTP_INT_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_INT_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TPO_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd810
 * DEVAD:    1
 * DESC:     TPO Configuration Register
 * SIZE:     32
 * FIELDS:
 *     TPO_SEL          
 *
 ******************************************************************************/
#define BCM84834_PTP_TPO_CFGr (0x0001d810 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TPO_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_TPO_CFG.
 *
 */
typedef union BCM84834_PTP_TPO_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_tpo_cfg[1];
	uint32_t _ptp_tpo_cfg;
} BCM84834_PTP_TPO_CFGr_t;

#define BCM84834_PTP_TPO_CFGr_CLR(r) (r).ptp_tpo_cfg[0] = 0
#define BCM84834_PTP_TPO_CFGr_SET(r,d) (r).ptp_tpo_cfg[0] = d
#define BCM84834_PTP_TPO_CFGr_GET(r) (r).ptp_tpo_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TPO_CFGr_TPO_SELf_GET(r) (((r).ptp_tpo_cfg[0]) & 0x1f)
#define BCM84834_PTP_TPO_CFGr_TPO_SELf_SET(r,f) (r).ptp_tpo_cfg[0]=(((r).ptp_tpo_cfg[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access PTP_TPO_CFG.
 *
 */
#define BCM84834_READ_PTP_TPO_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TPO_CFGr,(_r._ptp_tpo_cfg))
#define BCM84834_WRITE_PTP_TPO_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TPO_CFGr,(_r._ptp_tpo_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TPO_CFGr BCM84834_PTP_TPO_CFGr
#define PTP_TPO_CFGr_SIZE BCM84834_PTP_TPO_CFGr_SIZE
typedef BCM84834_PTP_TPO_CFGr_t PTP_TPO_CFGr_t;
#define PTP_TPO_CFGr_CLR BCM84834_PTP_TPO_CFGr_CLR
#define PTP_TPO_CFGr_SET BCM84834_PTP_TPO_CFGr_SET
#define PTP_TPO_CFGr_GET BCM84834_PTP_TPO_CFGr_GET
#define PTP_TPO_CFGr_TPO_SELf_GET BCM84834_PTP_TPO_CFGr_TPO_SELf_GET
#define PTP_TPO_CFGr_TPO_SELf_SET BCM84834_PTP_TPO_CFGr_TPO_SELf_SET
#define READ_PTP_TPO_CFGr BCM84834_READ_PTP_TPO_CFGr
#define WRITE_PTP_TPO_CFGr BCM84834_WRITE_PTP_TPO_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TPO_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CTL
 * BLOCKS:   PTP
 * REGADDR:  0xd882
 * DEVAD:    1
 * DESC:     NSE Shadow Control Register
 * SIZE:     32
 * FIELDS:
 *     NSE_ORIGIN_TIMESTAMP_LOAD 
 *     NSE_CORRECTION_FIELD_LOAD 
 *     NSE_SC_DPLL_SYNC_DIV_LOAD 
 *     NSE_SC_SYNCOUT_LOAD 
 *     NSE_DPLL_GAIN1_LOAD 
 *     NSE_DPLL_GAIN2_LOAD 
 *     NSE_DPLL_GAIN3_LOAD 
 *     NSE_DPLL_REF_PERIOD_LOAD 
 *     NSE_DPLL_REF_PHASE_LOAD 
 *     NSE_DPLL_FCW_LOAD 
 *     NSE_NCO_FCW_LOAD 
 *     NSE_NCO_TIME_LOW_LOAD 
 *     NSE_NCO_TIME_HIGH_LOAD 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CTLr (0x0001d882 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CTL.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CTLr_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_ctl[1];
	uint32_t _ptp_nse_shadow_ctl;
} BCM84834_PTP_NSE_SHADOW_CTLr_t;

#define BCM84834_PTP_NSE_SHADOW_CTLr_CLR(r) (r).ptp_nse_shadow_ctl[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CTLr_SET(r,d) (r).ptp_nse_shadow_ctl[0] = d
#define BCM84834_PTP_NSE_SHADOW_CTLr_GET(r) (r).ptp_nse_shadow_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 12) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 11) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 10) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 9) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 8) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 7) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 6) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 5) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 4) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 3) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 2) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_GET(r) ((((r).ptp_nse_shadow_ctl[0]) >> 1) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_GET(r) (((r).ptp_nse_shadow_ctl[0]) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_SET(r,f) (r).ptp_nse_shadow_ctl[0]=(((r).ptp_nse_shadow_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CTL.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CTLr,(_r._ptp_nse_shadow_ctl))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CTLr,(_r._ptp_nse_shadow_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CTLr BCM84834_PTP_NSE_SHADOW_CTLr
#define PTP_NSE_SHADOW_CTLr_SIZE BCM84834_PTP_NSE_SHADOW_CTLr_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CTLr_t PTP_NSE_SHADOW_CTLr_t;
#define PTP_NSE_SHADOW_CTLr_CLR BCM84834_PTP_NSE_SHADOW_CTLr_CLR
#define PTP_NSE_SHADOW_CTLr_SET BCM84834_PTP_NSE_SHADOW_CTLr_SET
#define PTP_NSE_SHADOW_CTLr_GET BCM84834_PTP_NSE_SHADOW_CTLr_GET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_HIGH_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_TIME_LOW_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_NCO_FCW_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_FCW_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PHASE_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_REF_PERIOD_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN3_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN2_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_DPLL_GAIN1_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_SYNCOUT_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_SC_DPLL_SYNC_DIV_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_CORRECTION_FIELD_LOADf_SET
#define PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_GET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_GET
#define PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_SET BCM84834_PTP_NSE_SHADOW_CTLr_NSE_ORIGIN_TIMESTAMP_LOADf_SET
#define READ_PTP_NSE_SHADOW_CTLr BCM84834_READ_PTP_NSE_SHADOW_CTLr
#define WRITE_PTP_NSE_SHADOW_CTLr BCM84834_WRITE_PTP_NSE_SHADOW_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xd883
 * DEVAD:    1
 * DESC:     NSE Shadow Clear Register
 * SIZE:     32
 * FIELDS:
 *     NSE_ORIGIN_TIMESTAMP_CLR 
 *     NSE_CORRECTION_FIELD_CLR 
 *     NSE_SC_DPLL_SYNC_DIV_CLR 
 *     NSE_SC_SYNCOUT_CLR 
 *     NSE_DPLL_GAIN1_CLR 
 *     NSE_DPLL_GAIN2_CLR 
 *     NSE_DPLL_GAIN3_CLR 
 *     NSE_DPLL_REF_PERIOD_CLR 
 *     NSE_DPLL_REF_PHASE_CLR 
 *     NSE_DPLL_FCW_CLR 
 *     NSE_NCO_FCW_CLR  
 *     NSE_NCO_TIME_LOW_CLR 
 *     NSE_NCO_TIME_HIGH_CLR 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CLRr (0x0001d883 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CLR.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_clr[1];
	uint32_t _ptp_nse_shadow_clr;
} BCM84834_PTP_NSE_SHADOW_CLRr_t;

#define BCM84834_PTP_NSE_SHADOW_CLRr_CLR(r) (r).ptp_nse_shadow_clr[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CLRr_SET(r,d) (r).ptp_nse_shadow_clr[0] = d
#define BCM84834_PTP_NSE_SHADOW_CLRr_GET(r) (r).ptp_nse_shadow_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 12) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 11) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 10) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 9) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 8) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 7) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 6) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 5) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 4) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 3) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 2) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_GET(r) ((((r).ptp_nse_shadow_clr[0]) >> 1) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_GET(r) (((r).ptp_nse_shadow_clr[0]) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_SET(r,f) (r).ptp_nse_shadow_clr[0]=(((r).ptp_nse_shadow_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CLR.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CLRr,(_r._ptp_nse_shadow_clr))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CLRr,(_r._ptp_nse_shadow_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CLRr BCM84834_PTP_NSE_SHADOW_CLRr
#define PTP_NSE_SHADOW_CLRr_SIZE BCM84834_PTP_NSE_SHADOW_CLRr_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CLRr_t PTP_NSE_SHADOW_CLRr_t;
#define PTP_NSE_SHADOW_CLRr_CLR BCM84834_PTP_NSE_SHADOW_CLRr_CLR
#define PTP_NSE_SHADOW_CLRr_SET BCM84834_PTP_NSE_SHADOW_CLRr_SET
#define PTP_NSE_SHADOW_CLRr_GET BCM84834_PTP_NSE_SHADOW_CLRr_GET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_HIGH_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_TIME_LOW_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_NCO_FCW_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_FCW_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PHASE_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_REF_PERIOD_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN3_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN2_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_DPLL_GAIN1_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_SYNCOUT_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_SC_DPLL_SYNC_DIV_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_CORRECTION_FIELD_CLRf_SET
#define PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_GET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_GET
#define PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_SET BCM84834_PTP_NSE_SHADOW_CLRr_NSE_ORIGIN_TIMESTAMP_CLRf_SET
#define READ_PTP_NSE_SHADOW_CLRr BCM84834_READ_PTP_NSE_SHADOW_CLRr
#define WRITE_PTP_NSE_SHADOW_CLRr BCM84834_WRITE_PTP_NSE_SHADOW_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd884
 * DEVAD:    1
 * DESC:     NSE Shadow Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_CORRECTION_FIELD_SEL 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CFGr (0x0001d884 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_cfg[1];
	uint32_t _ptp_nse_shadow_cfg;
} BCM84834_PTP_NSE_SHADOW_CFGr_t;

#define BCM84834_PTP_NSE_SHADOW_CFGr_CLR(r) (r).ptp_nse_shadow_cfg[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CFGr_SET(r,d) (r).ptp_nse_shadow_cfg[0] = d
#define BCM84834_PTP_NSE_SHADOW_CFGr_GET(r) (r).ptp_nse_shadow_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_GET(r) (((r).ptp_nse_shadow_cfg[0]) & 0x1)
#define BCM84834_PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_SET(r,f) (r).ptp_nse_shadow_cfg[0]=(((r).ptp_nse_shadow_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CFGr,(_r._ptp_nse_shadow_cfg))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CFGr,(_r._ptp_nse_shadow_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CFGr BCM84834_PTP_NSE_SHADOW_CFGr
#define PTP_NSE_SHADOW_CFGr_SIZE BCM84834_PTP_NSE_SHADOW_CFGr_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CFGr_t PTP_NSE_SHADOW_CFGr_t;
#define PTP_NSE_SHADOW_CFGr_CLR BCM84834_PTP_NSE_SHADOW_CFGr_CLR
#define PTP_NSE_SHADOW_CFGr_SET BCM84834_PTP_NSE_SHADOW_CFGr_SET
#define PTP_NSE_SHADOW_CFGr_GET BCM84834_PTP_NSE_SHADOW_CFGr_GET
#define PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_GET BCM84834_PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_GET
#define PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_SET BCM84834_PTP_NSE_SHADOW_CFGr_NSE_CORRECTION_FIELD_SELf_SET
#define READ_PTP_NSE_SHADOW_CFGr BCM84834_READ_PTP_NSE_SHADOW_CFGr
#define WRITE_PTP_NSE_SHADOW_CFGr BCM84834_WRITE_PTP_NSE_SHADOW_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0
 * BLOCKS:   PTP
 * REGADDR:  0xd890
 * DEVAD:    1
 * DESC:     NSE Origin Timestamp Bits[15:0] Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r (0x0001d890 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_0[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_0;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_CLR(r) (r).ptp_nse_shadow_origin_timestamp_0[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_0[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_GET(r) (r).ptp_nse_shadow_origin_timestamp_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_0[0]=(((r).ptp_nse_shadow_origin_timestamp_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r,(_r._ptp_nse_shadow_origin_timestamp_0))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r,(_r._ptp_nse_shadow_origin_timestamp_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r_ORIGIN_TIMESTAMPf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1
 * BLOCKS:   PTP
 * REGADDR:  0xd891
 * DEVAD:    1
 * DESC:     NSE Origin Timestamp Bits[31:16] Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r (0x0001d891 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_1[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_1;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_CLR(r) (r).ptp_nse_shadow_origin_timestamp_1[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_1[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_GET(r) (r).ptp_nse_shadow_origin_timestamp_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_1[0]=(((r).ptp_nse_shadow_origin_timestamp_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r,(_r._ptp_nse_shadow_origin_timestamp_1))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r,(_r._ptp_nse_shadow_origin_timestamp_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r_ORIGIN_TIMESTAMPf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2
 * BLOCKS:   PTP
 * REGADDR:  0xd892
 * DEVAD:    1
 * DESC:     NSE Origin Timestamp Bits[47:32] Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r (0x0001d892 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_2[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_2;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_CLR(r) (r).ptp_nse_shadow_origin_timestamp_2[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_2[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_GET(r) (r).ptp_nse_shadow_origin_timestamp_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_2[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_2[0]=(((r).ptp_nse_shadow_origin_timestamp_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r,(_r._ptp_nse_shadow_origin_timestamp_2))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r,(_r._ptp_nse_shadow_origin_timestamp_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r_ORIGIN_TIMESTAMPf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3
 * BLOCKS:   PTP
 * REGADDR:  0xd893
 * DEVAD:    1
 * DESC:     NSE Origin Timestamp Bits[63:48] Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r (0x0001d893 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_3[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_3;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_CLR(r) (r).ptp_nse_shadow_origin_timestamp_3[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_3[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_GET(r) (r).ptp_nse_shadow_origin_timestamp_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_3[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_3[0]=(((r).ptp_nse_shadow_origin_timestamp_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r,(_r._ptp_nse_shadow_origin_timestamp_3))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r,(_r._ptp_nse_shadow_origin_timestamp_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r_ORIGIN_TIMESTAMPf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4
 * BLOCKS:   PTP
 * REGADDR:  0xd894
 * DEVAD:    1
 * DESC:     NSE Origin Timestamp Bits[79:64] Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r (0x0001d894 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_4[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_4;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_CLR(r) (r).ptp_nse_shadow_origin_timestamp_4[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_4[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_GET(r) (r).ptp_nse_shadow_origin_timestamp_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_4[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_4[0]=(((r).ptp_nse_shadow_origin_timestamp_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r,(_r._ptp_nse_shadow_origin_timestamp_4))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r,(_r._ptp_nse_shadow_origin_timestamp_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r_ORIGIN_TIMESTAMPf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CS
 * BLOCKS:   PTP
 * REGADDR:  0xd895
 * DEVAD:    1
 * DESC:     NSE Origin TimestampChecksum Register
 * SIZE:     32
 * FIELDS:
 *     ORIGIN_TIMESTAMP_CS 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr (0x0001d895 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CS.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_origin_timestamp_cs[1];
	uint32_t _ptp_nse_shadow_origin_timestamp_cs;
} BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_t;

#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_CLR(r) (r).ptp_nse_shadow_origin_timestamp_cs[0] = 0
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SET(r,d) (r).ptp_nse_shadow_origin_timestamp_cs[0] = d
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_GET(r) (r).ptp_nse_shadow_origin_timestamp_cs[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_GET(r) (((r).ptp_nse_shadow_origin_timestamp_cs[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_SET(r,f) (r).ptp_nse_shadow_origin_timestamp_cs[0]=(((r).ptp_nse_shadow_origin_timestamp_cs[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CS.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr,(_r._ptp_nse_shadow_origin_timestamp_cs))
#define BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr,(_r._ptp_nse_shadow_origin_timestamp_cs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SIZE BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SIZE
typedef BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_t PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_t;
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_CLR BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_CLR
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_SET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_GET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_GET
#define PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_SET BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr_ORIGIN_TIMESTAMP_CSf_SET
#define READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr BCM84834_READ_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr
#define WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr BCM84834_WRITE_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_ORIGIN_TIMESTAMP_CSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CORRECTION_FIELD_0
 * BLOCKS:   PTP
 * REGADDR:  0xd896
 * DEVAD:    1
 * DESC:     NSE Correction Field Bits[15:0] Register
 * SIZE:     32
 * FIELDS:
 *     CORRECTION_FIELD 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r (0x0001d896 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CORRECTION_FIELD_0.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_correction_field_0[1];
	uint32_t _ptp_nse_shadow_correction_field_0;
} BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_t;

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CLR(r) (r).ptp_nse_shadow_correction_field_0[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SET(r,d) (r).ptp_nse_shadow_correction_field_0[0] = d
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_GET(r) (r).ptp_nse_shadow_correction_field_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_GET(r) (((r).ptp_nse_shadow_correction_field_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_SET(r,f) (r).ptp_nse_shadow_correction_field_0[0]=(((r).ptp_nse_shadow_correction_field_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CORRECTION_FIELD_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r,(_r._ptp_nse_shadow_correction_field_0))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r,(_r._ptp_nse_shadow_correction_field_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SIZE BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_t PTP_NSE_SHADOW_CORRECTION_FIELD_0r_t;
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CLR BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CLR
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_SET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r_CORRECTION_FIELDf_SET
#define READ_PTP_NSE_SHADOW_CORRECTION_FIELD_0r BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_0r
#define WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_0r BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CORRECTION_FIELD_1
 * BLOCKS:   PTP
 * REGADDR:  0xd897
 * DEVAD:    1
 * DESC:     NSE Correction Field Bits[31:16] Register
 * SIZE:     32
 * FIELDS:
 *     CORRECTION_FIELD 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r (0x0001d897 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CORRECTION_FIELD_1.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_correction_field_1[1];
	uint32_t _ptp_nse_shadow_correction_field_1;
} BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_t;

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CLR(r) (r).ptp_nse_shadow_correction_field_1[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SET(r,d) (r).ptp_nse_shadow_correction_field_1[0] = d
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_GET(r) (r).ptp_nse_shadow_correction_field_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_GET(r) (((r).ptp_nse_shadow_correction_field_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_SET(r,f) (r).ptp_nse_shadow_correction_field_1[0]=(((r).ptp_nse_shadow_correction_field_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CORRECTION_FIELD_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r,(_r._ptp_nse_shadow_correction_field_1))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r,(_r._ptp_nse_shadow_correction_field_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SIZE BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_t PTP_NSE_SHADOW_CORRECTION_FIELD_1r_t;
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CLR BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CLR
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_SET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r_CORRECTION_FIELDf_SET
#define READ_PTP_NSE_SHADOW_CORRECTION_FIELD_1r BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_1r
#define WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_1r BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SHADOW_CORRECTION_FIELD_2
 * BLOCKS:   PTP
 * REGADDR:  0xd898
 * DEVAD:    1
 * DESC:     NSE Correction Field Bits[47:32] Register
 * SIZE:     32
 * FIELDS:
 *     CORRECTION_FIELD 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r (0x0001d898 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SHADOW_CORRECTION_FIELD_2.
 *
 */
typedef union BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_shadow_correction_field_2[1];
	uint32_t _ptp_nse_shadow_correction_field_2;
} BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_t;

#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CLR(r) (r).ptp_nse_shadow_correction_field_2[0] = 0
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SET(r,d) (r).ptp_nse_shadow_correction_field_2[0] = d
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_GET(r) (r).ptp_nse_shadow_correction_field_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_GET(r) (((r).ptp_nse_shadow_correction_field_2[0]) & 0xffff)
#define BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_SET(r,f) (r).ptp_nse_shadow_correction_field_2[0]=(((r).ptp_nse_shadow_correction_field_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SHADOW_CORRECTION_FIELD_2.
 *
 */
#define BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r,(_r._ptp_nse_shadow_correction_field_2))
#define BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r,(_r._ptp_nse_shadow_correction_field_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SIZE BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SIZE
typedef BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_t PTP_NSE_SHADOW_CORRECTION_FIELD_2r_t;
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CLR BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CLR
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_SET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_GET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_GET
#define PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_SET BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r_CORRECTION_FIELDf_SET
#define READ_PTP_NSE_SHADOW_CORRECTION_FIELD_2r BCM84834_READ_PTP_NSE_SHADOW_CORRECTION_FIELD_2r
#define WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_2r BCM84834_WRITE_PTP_NSE_SHADOW_CORRECTION_FIELD_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SHADOW_CORRECTION_FIELD_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd8a0
 * DEVAD:    1
 * DESC:     NSE SC Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_SC_GS_MODE   
 *     NSE_SC_SI_MODE   
 *     NSE_SC_SO_MODE   
 *     NSE_SC_FSYNC_EN  
 *     NSE_SC_FSYNC_TS_EN 
 *     NSE_SC_DSYNC_EN  
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_CFGr (0x0001d8a0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_SC_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_cfg[1];
	uint32_t _ptp_nse_sc_cfg;
} BCM84834_PTP_NSE_SC_CFGr_t;

#define BCM84834_PTP_NSE_SC_CFGr_CLR(r) (r).ptp_nse_sc_cfg[0] = 0
#define BCM84834_PTP_NSE_SC_CFGr_SET(r,d) (r).ptp_nse_sc_cfg[0] = d
#define BCM84834_PTP_NSE_SC_CFGr_GET(r) (r).ptp_nse_sc_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_GET(r) ((((r).ptp_nse_sc_cfg[0]) >> 14) & 0x1)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_GET(r) ((((r).ptp_nse_sc_cfg[0]) >> 13) & 0x1)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_GET(r) ((((r).ptp_nse_sc_cfg[0]) >> 12) & 0x1)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_GET(r) ((((r).ptp_nse_sc_cfg[0]) >> 8) & 0x3)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_GET(r) ((((r).ptp_nse_sc_cfg[0]) >> 4) & 0x7)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_GET(r) (((r).ptp_nse_sc_cfg[0]) & 0x3)
#define BCM84834_PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_SET(r,f) (r).ptp_nse_sc_cfg[0]=(((r).ptp_nse_sc_cfg[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PTP_NSE_SC_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_CFGr,(_r._ptp_nse_sc_cfg))
#define BCM84834_WRITE_PTP_NSE_SC_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_CFGr,(_r._ptp_nse_sc_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_CFGr BCM84834_PTP_NSE_SC_CFGr
#define PTP_NSE_SC_CFGr_SIZE BCM84834_PTP_NSE_SC_CFGr_SIZE
typedef BCM84834_PTP_NSE_SC_CFGr_t PTP_NSE_SC_CFGr_t;
#define PTP_NSE_SC_CFGr_CLR BCM84834_PTP_NSE_SC_CFGr_CLR
#define PTP_NSE_SC_CFGr_SET BCM84834_PTP_NSE_SC_CFGr_SET
#define PTP_NSE_SC_CFGr_GET BCM84834_PTP_NSE_SC_CFGr_GET
#define PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_DSYNC_ENf_SET
#define PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_TS_ENf_SET
#define PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_FSYNC_ENf_SET
#define PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SO_MODEf_SET
#define PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_SI_MODEf_SET
#define PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_GET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_GET
#define PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_SET BCM84834_PTP_NSE_SC_CFGr_NSE_SC_GS_MODEf_SET
#define READ_PTP_NSE_SC_CFGr BCM84834_READ_PTP_NSE_SC_CFGr
#define WRITE_PTP_NSE_SC_CFGr BCM84834_WRITE_PTP_NSE_SC_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCIN_FSYNC_LEN_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8a1
 * DEVAD:    1
 * DESC:     NSE SC Syncin Frame Sync LengthBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCIN_FSYNC_LEN 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r (0x0001d8a1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCIN_FSYNC_LEN_0.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncin_fsync_len_0[1];
	uint32_t _ptp_nse_sc_syncin_fsync_len_0;
} BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_t;

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_CLR(r) (r).ptp_nse_sc_syncin_fsync_len_0[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SET(r,d) (r).ptp_nse_sc_syncin_fsync_len_0[0] = d
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_GET(r) (r).ptp_nse_sc_syncin_fsync_len_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_GET(r) (((r).ptp_nse_sc_syncin_fsync_len_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_SET(r,f) (r).ptp_nse_sc_syncin_fsync_len_0[0]=(((r).ptp_nse_sc_syncin_fsync_len_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCIN_FSYNC_LEN_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r,(_r._ptp_nse_sc_syncin_fsync_len_0))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r,(_r._ptp_nse_sc_syncin_fsync_len_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SIZE BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_t PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_t;
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_CLR BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_CLR
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r_SYNCIN_FSYNC_LENf_SET
#define READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r
#define WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCIN_FSYNC_LEN_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8a2
 * DEVAD:    1
 * DESC:     NSE SC Syncin Frame Sync LengthBits [18:16] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCIN_FSYNC_LEN 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r (0x0001d8a2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCIN_FSYNC_LEN_1.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncin_fsync_len_1[1];
	uint32_t _ptp_nse_sc_syncin_fsync_len_1;
} BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_t;

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_CLR(r) (r).ptp_nse_sc_syncin_fsync_len_1[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SET(r,d) (r).ptp_nse_sc_syncin_fsync_len_1[0] = d
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_GET(r) (r).ptp_nse_sc_syncin_fsync_len_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_GET(r) (((r).ptp_nse_sc_syncin_fsync_len_1[0]) & 0x7)
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_SET(r,f) (r).ptp_nse_sc_syncin_fsync_len_1[0]=(((r).ptp_nse_sc_syncin_fsync_len_1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCIN_FSYNC_LEN_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r,(_r._ptp_nse_sc_syncin_fsync_len_1))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r,(_r._ptp_nse_sc_syncin_fsync_len_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SIZE BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_t PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_t;
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_CLR BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_CLR
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r_SYNCIN_FSYNC_LENf_SET
#define READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r
#define WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_LEN_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCIN_FSYNC_DLY_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8a3
 * DEVAD:    1
 * DESC:     NSE SC Syncin Frame Sync DelayBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCIN_FSYNC_DLY 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r (0x0001d8a3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCIN_FSYNC_DLY_0.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncin_fsync_dly_0[1];
	uint32_t _ptp_nse_sc_syncin_fsync_dly_0;
} BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_t;

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_CLR(r) (r).ptp_nse_sc_syncin_fsync_dly_0[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SET(r,d) (r).ptp_nse_sc_syncin_fsync_dly_0[0] = d
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_GET(r) (r).ptp_nse_sc_syncin_fsync_dly_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_GET(r) (((r).ptp_nse_sc_syncin_fsync_dly_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_SET(r,f) (r).ptp_nse_sc_syncin_fsync_dly_0[0]=(((r).ptp_nse_sc_syncin_fsync_dly_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCIN_FSYNC_DLY_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r,(_r._ptp_nse_sc_syncin_fsync_dly_0))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r,(_r._ptp_nse_sc_syncin_fsync_dly_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SIZE BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_t PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_t;
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_CLR BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_CLR
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r_SYNCIN_FSYNC_DLYf_SET
#define READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r
#define WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCIN_FSYNC_DLY_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8a4
 * DEVAD:    1
 * DESC:     NSE SC Syncin Frame Sync DelayBits [18:16] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCIN_FSYNC_DLY 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r (0x0001d8a4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCIN_FSYNC_DLY_1.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncin_fsync_dly_1[1];
	uint32_t _ptp_nse_sc_syncin_fsync_dly_1;
} BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_t;

#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_CLR(r) (r).ptp_nse_sc_syncin_fsync_dly_1[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SET(r,d) (r).ptp_nse_sc_syncin_fsync_dly_1[0] = d
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_GET(r) (r).ptp_nse_sc_syncin_fsync_dly_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_GET(r) (((r).ptp_nse_sc_syncin_fsync_dly_1[0]) & 0x7)
#define BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_SET(r,f) (r).ptp_nse_sc_syncin_fsync_dly_1[0]=(((r).ptp_nse_sc_syncin_fsync_dly_1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCIN_FSYNC_DLY_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r,(_r._ptp_nse_sc_syncin_fsync_dly_1))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r,(_r._ptp_nse_sc_syncin_fsync_dly_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SIZE BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_t PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_t;
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_CLR BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_CLR
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_GET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_GET
#define PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_SET BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r_SYNCIN_FSYNC_DLYf_SET
#define READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r BCM84834_READ_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r
#define WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r BCM84834_WRITE_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCIN_FSYNC_DLY_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8a5
 * DEVAD:    1
 * DESC:     NSE SC SyncoutTimestamp Compare Bits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_TIMESTAMP_CMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r (0x0001d8a5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncout_timestamp_cmp_0[1];
	uint32_t _ptp_nse_sc_syncout_timestamp_cmp_0;
} BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_t;

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_CLR(r) (r).ptp_nse_sc_syncout_timestamp_cmp_0[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SET(r,d) (r).ptp_nse_sc_syncout_timestamp_cmp_0[0] = d
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_GET(r) (r).ptp_nse_sc_syncout_timestamp_cmp_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_GET(r) (((r).ptp_nse_sc_syncout_timestamp_cmp_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_SET(r,f) (r).ptp_nse_sc_syncout_timestamp_cmp_0[0]=(((r).ptp_nse_sc_syncout_timestamp_cmp_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r,(_r._ptp_nse_sc_syncout_timestamp_cmp_0))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r,(_r._ptp_nse_sc_syncout_timestamp_cmp_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SIZE BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_t PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_t;
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_CLR BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_CLR
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r_SYNCOUT_TIMESTAMP_CMPf_SET
#define READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r
#define WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8a6
 * DEVAD:    1
 * DESC:     NSE SC SyncoutTimestamp Compare Bits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_TIMESTAMP_CMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r (0x0001d8a6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncout_timestamp_cmp_1[1];
	uint32_t _ptp_nse_sc_syncout_timestamp_cmp_1;
} BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_t;

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_CLR(r) (r).ptp_nse_sc_syncout_timestamp_cmp_1[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SET(r,d) (r).ptp_nse_sc_syncout_timestamp_cmp_1[0] = d
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_GET(r) (r).ptp_nse_sc_syncout_timestamp_cmp_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_GET(r) (((r).ptp_nse_sc_syncout_timestamp_cmp_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_SET(r,f) (r).ptp_nse_sc_syncout_timestamp_cmp_1[0]=(((r).ptp_nse_sc_syncout_timestamp_cmp_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r,(_r._ptp_nse_sc_syncout_timestamp_cmp_1))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r,(_r._ptp_nse_sc_syncout_timestamp_cmp_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SIZE BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_t PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_t;
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_CLR BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_CLR
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r_SYNCOUT_TIMESTAMP_CMPf_SET
#define READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r
#define WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2
 * BLOCKS:   PTP
 * REGADDR:  0xd8a7
 * DEVAD:    1
 * DESC:     NSE SC SyncoutTimestamp Compare Bits [47:32] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_TIMESTAMP_CMP 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r (0x0001d8a7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_syncout_timestamp_cmp_2[1];
	uint32_t _ptp_nse_sc_syncout_timestamp_cmp_2;
} BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_t;

#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_CLR(r) (r).ptp_nse_sc_syncout_timestamp_cmp_2[0] = 0
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SET(r,d) (r).ptp_nse_sc_syncout_timestamp_cmp_2[0] = d
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_GET(r) (r).ptp_nse_sc_syncout_timestamp_cmp_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_GET(r) (((r).ptp_nse_sc_syncout_timestamp_cmp_2[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_SET(r,f) (r).ptp_nse_sc_syncout_timestamp_cmp_2[0]=(((r).ptp_nse_sc_syncout_timestamp_cmp_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r,(_r._ptp_nse_sc_syncout_timestamp_cmp_2))
#define BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r,(_r._ptp_nse_sc_syncout_timestamp_cmp_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SIZE BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SIZE
typedef BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_t PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_t;
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_CLR BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_CLR
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_GET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_GET
#define PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_SET BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r_SYNCOUT_TIMESTAMP_CMPf_SET
#define READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r BCM84834_READ_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r
#define WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r BCM84834_WRITE_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SYNCOUT_TIMESTAMP_CMP_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SHADOW_DPLL_SYNC_DIV
 * BLOCKS:   PTP
 * REGADDR:  0xd8a8
 * DEVAD:    1
 * DESC:     NSE SC Shadow DPLL SyncDivider Register
 * SIZE:     32
 * FIELDS:
 *     DPLL_SYNC_DIV    
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr (0x0001d8a8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SHADOW_DPLL_SYNC_DIV.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_shadow_dpll_sync_div[1];
	uint32_t _ptp_nse_sc_shadow_dpll_sync_div;
} BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_t;

#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_CLR(r) (r).ptp_nse_sc_shadow_dpll_sync_div[0] = 0
#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SET(r,d) (r).ptp_nse_sc_shadow_dpll_sync_div[0] = d
#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_GET(r) (r).ptp_nse_sc_shadow_dpll_sync_div[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_GET(r) (((r).ptp_nse_sc_shadow_dpll_sync_div[0]) & 0xfff)
#define BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_SET(r,f) (r).ptp_nse_sc_shadow_dpll_sync_div[0]=(((r).ptp_nse_sc_shadow_dpll_sync_div[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PTP_NSE_SC_SHADOW_DPLL_SYNC_DIV.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr,(_r._ptp_nse_sc_shadow_dpll_sync_div))
#define BCM84834_WRITE_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr,(_r._ptp_nse_sc_shadow_dpll_sync_div))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SIZE BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SIZE
typedef BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_t PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_t;
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_CLR BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_CLR
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SET BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_SET
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_GET BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_GET
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_GET BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_GET
#define PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_SET BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr_DPLL_SYNC_DIVf_SET
#define READ_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr BCM84834_READ_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr
#define WRITE_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr BCM84834_WRITE_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SHADOW_DPLL_SYNC_DIVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8a9
 * DEVAD:    1
 * DESC:     NSE SC ShadowSyncout Interval Bits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_INTERVAL 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r (0x0001d8a9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_shadow_syncout_interval_0[1];
	uint32_t _ptp_nse_sc_shadow_syncout_interval_0;
} BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_t;

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_CLR(r) (r).ptp_nse_sc_shadow_syncout_interval_0[0] = 0
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SET(r,d) (r).ptp_nse_sc_shadow_syncout_interval_0[0] = d
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_GET(r) (r).ptp_nse_sc_shadow_syncout_interval_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_GET(r) (((r).ptp_nse_sc_shadow_syncout_interval_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_SET(r,f) (r).ptp_nse_sc_shadow_syncout_interval_0[0]=(((r).ptp_nse_sc_shadow_syncout_interval_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r,(_r._ptp_nse_sc_shadow_syncout_interval_0))
#define BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r,(_r._ptp_nse_sc_shadow_syncout_interval_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SIZE BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SIZE
typedef BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_t PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_t;
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_CLR BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_CLR
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r_SYNCOUT_INTERVALf_SET
#define READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r
#define WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8aa
 * DEVAD:    1
 * DESC:     NSE SC ShadowSyncout Interval Bits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_INTERVAL 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r (0x0001d8aa | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_shadow_syncout_interval_1[1];
	uint32_t _ptp_nse_sc_shadow_syncout_interval_1;
} BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_t;

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_CLR(r) (r).ptp_nse_sc_shadow_syncout_interval_1[0] = 0
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SET(r,d) (r).ptp_nse_sc_shadow_syncout_interval_1[0] = d
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_GET(r) (r).ptp_nse_sc_shadow_syncout_interval_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_GET(r) (((r).ptp_nse_sc_shadow_syncout_interval_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_SET(r,f) (r).ptp_nse_sc_shadow_syncout_interval_1[0]=(((r).ptp_nse_sc_shadow_syncout_interval_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r,(_r._ptp_nse_sc_shadow_syncout_interval_1))
#define BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r,(_r._ptp_nse_sc_shadow_syncout_interval_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SIZE BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SIZE
typedef BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_t PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_t;
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_CLR BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_CLR
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r_SYNCOUT_INTERVALf_SET
#define READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r
#define WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_INTERVAL_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LEN
 * BLOCKS:   PTP
 * REGADDR:  0xd8ab
 * DEVAD:    1
 * DESC:     NSE SC ShadowSyncout Pulse1 Length Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_PULSE1_LEN 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr (0x0001d8ab | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LEN.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_shadow_syncout_pulse1_len[1];
	uint32_t _ptp_nse_sc_shadow_syncout_pulse1_len;
} BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_t;

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_CLR(r) (r).ptp_nse_sc_shadow_syncout_pulse1_len[0] = 0
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SET(r,d) (r).ptp_nse_sc_shadow_syncout_pulse1_len[0] = d
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_GET(r) (r).ptp_nse_sc_shadow_syncout_pulse1_len[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_GET(r) (((r).ptp_nse_sc_shadow_syncout_pulse1_len[0]) & 0xfff)
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_SET(r,f) (r).ptp_nse_sc_shadow_syncout_pulse1_len[0]=(((r).ptp_nse_sc_shadow_syncout_pulse1_len[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LEN.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr,(_r._ptp_nse_sc_shadow_syncout_pulse1_len))
#define BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr,(_r._ptp_nse_sc_shadow_syncout_pulse1_len))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SIZE BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SIZE
typedef BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_t PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_t;
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_CLR BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_CLR
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr_SYNCOUT_PULSE1_LENf_SET
#define READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr
#define WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE1_LENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LEN
 * BLOCKS:   PTP
 * REGADDR:  0xd8ac
 * DEVAD:    1
 * DESC:     NSE SC ShadowSyncout Pulse2 Length Register
 * SIZE:     32
 * FIELDS:
 *     SYNCOUT_PULSE2_LEN 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr (0x0001d8ac | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LEN.
 *
 */
typedef union BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_shadow_syncout_pulse2_len[1];
	uint32_t _ptp_nse_sc_shadow_syncout_pulse2_len;
} BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_t;

#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_CLR(r) (r).ptp_nse_sc_shadow_syncout_pulse2_len[0] = 0
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SET(r,d) (r).ptp_nse_sc_shadow_syncout_pulse2_len[0] = d
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_GET(r) (r).ptp_nse_sc_shadow_syncout_pulse2_len[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_GET(r) (((r).ptp_nse_sc_shadow_syncout_pulse2_len[0]) & 0xfff)
#define BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_SET(r,f) (r).ptp_nse_sc_shadow_syncout_pulse2_len[0]=(((r).ptp_nse_sc_shadow_syncout_pulse2_len[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LEN.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr,(_r._ptp_nse_sc_shadow_syncout_pulse2_len))
#define BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr,(_r._ptp_nse_sc_shadow_syncout_pulse2_len))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SIZE BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SIZE
typedef BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_t PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_t;
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_CLR BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_CLR
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_GET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_GET
#define PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_SET BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr_SYNCOUT_PULSE2_LENf_SET
#define READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr BCM84834_READ_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr
#define WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr BCM84834_WRITE_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_SHADOW_SYNCOUT_PULSE2_LENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_TIMESTAMP_FSYNC_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8b0
 * DEVAD:    1
 * DESC:     NSE SC Frame Sync TimestampBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP_FSYNC  
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r (0x0001d8b0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_TIMESTAMP_FSYNC_0.
 *
 */
typedef union BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_timestamp_fsync_0[1];
	uint32_t _ptp_nse_sc_timestamp_fsync_0;
} BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_t;

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_CLR(r) (r).ptp_nse_sc_timestamp_fsync_0[0] = 0
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SET(r,d) (r).ptp_nse_sc_timestamp_fsync_0[0] = d
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_GET(r) (r).ptp_nse_sc_timestamp_fsync_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_GET(r) (((r).ptp_nse_sc_timestamp_fsync_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_SET(r,f) (r).ptp_nse_sc_timestamp_fsync_0[0]=(((r).ptp_nse_sc_timestamp_fsync_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_TIMESTAMP_FSYNC_0.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r,(_r._ptp_nse_sc_timestamp_fsync_0))
#define BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r,(_r._ptp_nse_sc_timestamp_fsync_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SIZE BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SIZE
typedef BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_t PTP_NSE_SC_TIMESTAMP_FSYNC_0r_t;
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_CLR BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_CLR
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_SET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r_TIMESTAMP_FSYNCf_SET
#define READ_PTP_NSE_SC_TIMESTAMP_FSYNC_0r BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_0r
#define WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_0r BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_TIMESTAMP_FSYNC_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8b1
 * DEVAD:    1
 * DESC:     NSE SC Frame Sync TimestampBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP_FSYNC  
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r (0x0001d8b1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_TIMESTAMP_FSYNC_1.
 *
 */
typedef union BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_timestamp_fsync_1[1];
	uint32_t _ptp_nse_sc_timestamp_fsync_1;
} BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_t;

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_CLR(r) (r).ptp_nse_sc_timestamp_fsync_1[0] = 0
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SET(r,d) (r).ptp_nse_sc_timestamp_fsync_1[0] = d
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_GET(r) (r).ptp_nse_sc_timestamp_fsync_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_GET(r) (((r).ptp_nse_sc_timestamp_fsync_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_SET(r,f) (r).ptp_nse_sc_timestamp_fsync_1[0]=(((r).ptp_nse_sc_timestamp_fsync_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_TIMESTAMP_FSYNC_1.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r,(_r._ptp_nse_sc_timestamp_fsync_1))
#define BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r,(_r._ptp_nse_sc_timestamp_fsync_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SIZE BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SIZE
typedef BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_t PTP_NSE_SC_TIMESTAMP_FSYNC_1r_t;
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_CLR BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_CLR
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_SET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r_TIMESTAMP_FSYNCf_SET
#define READ_PTP_NSE_SC_TIMESTAMP_FSYNC_1r BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_1r
#define WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_1r BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_TIMESTAMP_FSYNC_2
 * BLOCKS:   PTP
 * REGADDR:  0xd8b2
 * DEVAD:    1
 * DESC:     NSE SC Frame Sync TimestampBits [47:32] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP_FSYNC  
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r (0x0001d8b2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_TIMESTAMP_FSYNC_2.
 *
 */
typedef union BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_timestamp_fsync_2[1];
	uint32_t _ptp_nse_sc_timestamp_fsync_2;
} BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_t;

#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_CLR(r) (r).ptp_nse_sc_timestamp_fsync_2[0] = 0
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SET(r,d) (r).ptp_nse_sc_timestamp_fsync_2[0] = d
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_GET(r) (r).ptp_nse_sc_timestamp_fsync_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_GET(r) (((r).ptp_nse_sc_timestamp_fsync_2[0]) & 0xffff)
#define BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_SET(r,f) (r).ptp_nse_sc_timestamp_fsync_2[0]=(((r).ptp_nse_sc_timestamp_fsync_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_SC_TIMESTAMP_FSYNC_2.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r,(_r._ptp_nse_sc_timestamp_fsync_2))
#define BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r,(_r._ptp_nse_sc_timestamp_fsync_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SIZE BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SIZE
typedef BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_t PTP_NSE_SC_TIMESTAMP_FSYNC_2r_t;
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_CLR BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_CLR
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_SET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_GET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_GET
#define PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_SET BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r_TIMESTAMP_FSYNCf_SET
#define READ_PTP_NSE_SC_TIMESTAMP_FSYNC_2r BCM84834_READ_PTP_NSE_SC_TIMESTAMP_FSYNC_2r
#define WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_2r BCM84834_WRITE_PTP_NSE_SC_TIMESTAMP_FSYNC_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_TIMESTAMP_FSYNC_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_SC_DEBUG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd8bf
 * DEVAD:    1
 * DESC:     NSE SC Debug Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_SC_RESET_LOCK_SM 
 *     NSE_SC_RESET_SYNCIN_SM 
 *     NSE_SC_RESET_SYNCOUT_SM 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr (0x0001d8bf | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_SC_DEBUG_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_SC_DEBUG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_sc_debug_cfg[1];
	uint32_t _ptp_nse_sc_debug_cfg;
} BCM84834_PTP_NSE_SC_DEBUG_CFGr_t;

#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_CLR(r) (r).ptp_nse_sc_debug_cfg[0] = 0
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_SET(r,d) (r).ptp_nse_sc_debug_cfg[0] = d
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_GET(r) (r).ptp_nse_sc_debug_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_GET(r) ((((r).ptp_nse_sc_debug_cfg[0]) >> 2) & 0x1)
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_SET(r,f) (r).ptp_nse_sc_debug_cfg[0]=(((r).ptp_nse_sc_debug_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_GET(r) ((((r).ptp_nse_sc_debug_cfg[0]) >> 1) & 0x1)
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_SET(r,f) (r).ptp_nse_sc_debug_cfg[0]=(((r).ptp_nse_sc_debug_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_GET(r) (((r).ptp_nse_sc_debug_cfg[0]) & 0x1)
#define BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_SET(r,f) (r).ptp_nse_sc_debug_cfg[0]=(((r).ptp_nse_sc_debug_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_SC_DEBUG_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_SC_DEBUG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_SC_DEBUG_CFGr,(_r._ptp_nse_sc_debug_cfg))
#define BCM84834_WRITE_PTP_NSE_SC_DEBUG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_SC_DEBUG_CFGr,(_r._ptp_nse_sc_debug_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_SC_DEBUG_CFGr BCM84834_PTP_NSE_SC_DEBUG_CFGr
#define PTP_NSE_SC_DEBUG_CFGr_SIZE BCM84834_PTP_NSE_SC_DEBUG_CFGr_SIZE
typedef BCM84834_PTP_NSE_SC_DEBUG_CFGr_t PTP_NSE_SC_DEBUG_CFGr_t;
#define PTP_NSE_SC_DEBUG_CFGr_CLR BCM84834_PTP_NSE_SC_DEBUG_CFGr_CLR
#define PTP_NSE_SC_DEBUG_CFGr_SET BCM84834_PTP_NSE_SC_DEBUG_CFGr_SET
#define PTP_NSE_SC_DEBUG_CFGr_GET BCM84834_PTP_NSE_SC_DEBUG_CFGr_GET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_GET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_GET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_SET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCOUT_SMf_SET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_GET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_GET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_SET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_SYNCIN_SMf_SET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_GET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_GET
#define PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_SET BCM84834_PTP_NSE_SC_DEBUG_CFGr_NSE_SC_RESET_LOCK_SMf_SET
#define READ_PTP_NSE_SC_DEBUG_CFGr BCM84834_READ_PTP_NSE_SC_DEBUG_CFGr
#define WRITE_PTP_NSE_SC_DEBUG_CFGr BCM84834_WRITE_PTP_NSE_SC_DEBUG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_SC_DEBUG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd8c0
 * DEVAD:    1
 * DESC:     NSE DPLL Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_DPLL_LOCK_MODE 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_CFGr (0x0001d8c0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_cfg[1];
	uint32_t _ptp_nse_dpll_cfg;
} BCM84834_PTP_NSE_DPLL_CFGr_t;

#define BCM84834_PTP_NSE_DPLL_CFGr_CLR(r) (r).ptp_nse_dpll_cfg[0] = 0
#define BCM84834_PTP_NSE_DPLL_CFGr_SET(r,d) (r).ptp_nse_dpll_cfg[0] = d
#define BCM84834_PTP_NSE_DPLL_CFGr_GET(r) (r).ptp_nse_dpll_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_GET(r) (((r).ptp_nse_dpll_cfg[0]) & 0x1)
#define BCM84834_PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_SET(r,f) (r).ptp_nse_dpll_cfg[0]=(((r).ptp_nse_dpll_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_DPLL_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_CFGr,(_r._ptp_nse_dpll_cfg))
#define BCM84834_WRITE_PTP_NSE_DPLL_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_CFGr,(_r._ptp_nse_dpll_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_CFGr BCM84834_PTP_NSE_DPLL_CFGr
#define PTP_NSE_DPLL_CFGr_SIZE BCM84834_PTP_NSE_DPLL_CFGr_SIZE
typedef BCM84834_PTP_NSE_DPLL_CFGr_t PTP_NSE_DPLL_CFGr_t;
#define PTP_NSE_DPLL_CFGr_CLR BCM84834_PTP_NSE_DPLL_CFGr_CLR
#define PTP_NSE_DPLL_CFGr_SET BCM84834_PTP_NSE_DPLL_CFGr_SET
#define PTP_NSE_DPLL_CFGr_GET BCM84834_PTP_NSE_DPLL_CFGr_GET
#define PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_GET BCM84834_PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_GET
#define PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_SET BCM84834_PTP_NSE_DPLL_CFGr_NSE_DPLL_LOCK_MODEf_SET
#define READ_PTP_NSE_DPLL_CFGr BCM84834_READ_PTP_NSE_DPLL_CFGr
#define WRITE_PTP_NSE_DPLL_CFGr BCM84834_WRITE_PTP_NSE_DPLL_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_GAIN1
 * BLOCKS:   PTP
 * REGADDR:  0xd8c1
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow Gain1 Register
 * SIZE:     32
 * FIELDS:
 *     GAIN1            
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r (0x0001d8c1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_GAIN1.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_gain1[1];
	uint32_t _ptp_nse_dpll_shadow_gain1;
} BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_CLR(r) (r).ptp_nse_dpll_shadow_gain1[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_SET(r,d) (r).ptp_nse_dpll_shadow_gain1[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GET(r) (r).ptp_nse_dpll_shadow_gain1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_GET(r) (((r).ptp_nse_dpll_shadow_gain1[0]) & 0x3f)
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_SET(r,f) (r).ptp_nse_dpll_shadow_gain1[0]=(((r).ptp_nse_dpll_shadow_gain1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_GAIN1.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r,(_r._ptp_nse_dpll_shadow_gain1))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r,(_r._ptp_nse_dpll_shadow_gain1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_GAIN1r BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r
#define PTP_NSE_DPLL_SHADOW_GAIN1r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_t PTP_NSE_DPLL_SHADOW_GAIN1r_t;
#define PTP_NSE_DPLL_SHADOW_GAIN1r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_CLR
#define PTP_NSE_DPLL_SHADOW_GAIN1r_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_SET
#define PTP_NSE_DPLL_SHADOW_GAIN1r_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GET
#define PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_GET
#define PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r_GAIN1f_SET
#define READ_PTP_NSE_DPLL_SHADOW_GAIN1r BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN1r
#define WRITE_PTP_NSE_DPLL_SHADOW_GAIN1r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_GAIN1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_GAIN2
 * BLOCKS:   PTP
 * REGADDR:  0xd8c2
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow Gain2 Register
 * SIZE:     32
 * FIELDS:
 *     GAIN2            
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r (0x0001d8c2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_GAIN2.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_gain2[1];
	uint32_t _ptp_nse_dpll_shadow_gain2;
} BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_CLR(r) (r).ptp_nse_dpll_shadow_gain2[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_SET(r,d) (r).ptp_nse_dpll_shadow_gain2[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GET(r) (r).ptp_nse_dpll_shadow_gain2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_GET(r) (((r).ptp_nse_dpll_shadow_gain2[0]) & 0x3f)
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_SET(r,f) (r).ptp_nse_dpll_shadow_gain2[0]=(((r).ptp_nse_dpll_shadow_gain2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_GAIN2.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r,(_r._ptp_nse_dpll_shadow_gain2))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r,(_r._ptp_nse_dpll_shadow_gain2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_GAIN2r BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r
#define PTP_NSE_DPLL_SHADOW_GAIN2r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_t PTP_NSE_DPLL_SHADOW_GAIN2r_t;
#define PTP_NSE_DPLL_SHADOW_GAIN2r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_CLR
#define PTP_NSE_DPLL_SHADOW_GAIN2r_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_SET
#define PTP_NSE_DPLL_SHADOW_GAIN2r_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GET
#define PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_GET
#define PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r_GAIN2f_SET
#define READ_PTP_NSE_DPLL_SHADOW_GAIN2r BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN2r
#define WRITE_PTP_NSE_DPLL_SHADOW_GAIN2r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_GAIN2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_GAIN3
 * BLOCKS:   PTP
 * REGADDR:  0xd8c3
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow Gain3 Register
 * SIZE:     32
 * FIELDS:
 *     GAIN3            
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r (0x0001d8c3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_GAIN3.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_gain3[1];
	uint32_t _ptp_nse_dpll_shadow_gain3;
} BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_CLR(r) (r).ptp_nse_dpll_shadow_gain3[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_SET(r,d) (r).ptp_nse_dpll_shadow_gain3[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GET(r) (r).ptp_nse_dpll_shadow_gain3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_GET(r) (((r).ptp_nse_dpll_shadow_gain3[0]) & 0x3f)
#define BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_SET(r,f) (r).ptp_nse_dpll_shadow_gain3[0]=(((r).ptp_nse_dpll_shadow_gain3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_GAIN3.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r,(_r._ptp_nse_dpll_shadow_gain3))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r,(_r._ptp_nse_dpll_shadow_gain3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_GAIN3r BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r
#define PTP_NSE_DPLL_SHADOW_GAIN3r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_t PTP_NSE_DPLL_SHADOW_GAIN3r_t;
#define PTP_NSE_DPLL_SHADOW_GAIN3r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_CLR
#define PTP_NSE_DPLL_SHADOW_GAIN3r_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_SET
#define PTP_NSE_DPLL_SHADOW_GAIN3r_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GET
#define PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_GET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_GET
#define PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_SET BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r_GAIN3f_SET
#define READ_PTP_NSE_DPLL_SHADOW_GAIN3r BCM84834_READ_PTP_NSE_DPLL_SHADOW_GAIN3r
#define WRITE_PTP_NSE_DPLL_SHADOW_GAIN3r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_GAIN3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_GAIN3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_REF_PERIOD_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8c4
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow ReferencePeriod Bits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     REF_PERIOD       
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r (0x0001d8c4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_REF_PERIOD_0.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_ref_period_0[1];
	uint32_t _ptp_nse_dpll_shadow_ref_period_0;
} BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_CLR(r) (r).ptp_nse_dpll_shadow_ref_period_0[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SET(r,d) (r).ptp_nse_dpll_shadow_ref_period_0[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_GET(r) (r).ptp_nse_dpll_shadow_ref_period_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_GET(r) (((r).ptp_nse_dpll_shadow_ref_period_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_SET(r,f) (r).ptp_nse_dpll_shadow_ref_period_0[0]=(((r).ptp_nse_dpll_shadow_ref_period_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_REF_PERIOD_0.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r,(_r._ptp_nse_dpll_shadow_ref_period_0))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r,(_r._ptp_nse_dpll_shadow_ref_period_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_t PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_t;
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_CLR
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_SET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_GET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_GET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r_REF_PERIODf_SET
#define READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r
#define WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_REF_PERIOD_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8c5
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow ReferencePeriod Bits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     REF_PERIOD       
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r (0x0001d8c5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_REF_PERIOD_1.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_ref_period_1[1];
	uint32_t _ptp_nse_dpll_shadow_ref_period_1;
} BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_CLR(r) (r).ptp_nse_dpll_shadow_ref_period_1[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SET(r,d) (r).ptp_nse_dpll_shadow_ref_period_1[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_GET(r) (r).ptp_nse_dpll_shadow_ref_period_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_GET(r) (((r).ptp_nse_dpll_shadow_ref_period_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_SET(r,f) (r).ptp_nse_dpll_shadow_ref_period_1[0]=(((r).ptp_nse_dpll_shadow_ref_period_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_REF_PERIOD_1.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r,(_r._ptp_nse_dpll_shadow_ref_period_1))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r,(_r._ptp_nse_dpll_shadow_ref_period_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_t PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_t;
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_CLR
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_SET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_GET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_GET
#define PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r_REF_PERIODf_SET
#define READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r
#define WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_REF_PERIOD_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_REF_PHASE_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8c6
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow ReferencePhase Bits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     REF_PHASE        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r (0x0001d8c6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_REF_PHASE_0.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_ref_phase_0[1];
	uint32_t _ptp_nse_dpll_shadow_ref_phase_0;
} BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_CLR(r) (r).ptp_nse_dpll_shadow_ref_phase_0[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SET(r,d) (r).ptp_nse_dpll_shadow_ref_phase_0[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_GET(r) (r).ptp_nse_dpll_shadow_ref_phase_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_GET(r) (((r).ptp_nse_dpll_shadow_ref_phase_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_SET(r,f) (r).ptp_nse_dpll_shadow_ref_phase_0[0]=(((r).ptp_nse_dpll_shadow_ref_phase_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_REF_PHASE_0.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r,(_r._ptp_nse_dpll_shadow_ref_phase_0))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r,(_r._ptp_nse_dpll_shadow_ref_phase_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_t PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_t;
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_CLR
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_SET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r_REF_PHASEf_SET
#define READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r
#define WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_REF_PHASE_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8c7
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow ReferencePhase Bits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     REF_PHASE        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r (0x0001d8c7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_REF_PHASE_1.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_ref_phase_1[1];
	uint32_t _ptp_nse_dpll_shadow_ref_phase_1;
} BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_CLR(r) (r).ptp_nse_dpll_shadow_ref_phase_1[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SET(r,d) (r).ptp_nse_dpll_shadow_ref_phase_1[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_GET(r) (r).ptp_nse_dpll_shadow_ref_phase_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_GET(r) (((r).ptp_nse_dpll_shadow_ref_phase_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_SET(r,f) (r).ptp_nse_dpll_shadow_ref_phase_1[0]=(((r).ptp_nse_dpll_shadow_ref_phase_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_REF_PHASE_1.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r,(_r._ptp_nse_dpll_shadow_ref_phase_1))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r,(_r._ptp_nse_dpll_shadow_ref_phase_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_t PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_t;
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_CLR
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_SET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r_REF_PHASEf_SET
#define READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r
#define WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_REF_PHASE_2
 * BLOCKS:   PTP
 * REGADDR:  0xd8c8
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow ReferencePhase Bits [47:32] Register
 * SIZE:     32
 * FIELDS:
 *     REF_PHASE        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r (0x0001d8c8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_REF_PHASE_2.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_ref_phase_2[1];
	uint32_t _ptp_nse_dpll_shadow_ref_phase_2;
} BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_CLR(r) (r).ptp_nse_dpll_shadow_ref_phase_2[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SET(r,d) (r).ptp_nse_dpll_shadow_ref_phase_2[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_GET(r) (r).ptp_nse_dpll_shadow_ref_phase_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_GET(r) (((r).ptp_nse_dpll_shadow_ref_phase_2[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_SET(r,f) (r).ptp_nse_dpll_shadow_ref_phase_2[0]=(((r).ptp_nse_dpll_shadow_ref_phase_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_REF_PHASE_2.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r,(_r._ptp_nse_dpll_shadow_ref_phase_2))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r,(_r._ptp_nse_dpll_shadow_ref_phase_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_t PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_t;
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_CLR
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_SET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_GET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_GET
#define PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_SET BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r_REF_PHASEf_SET
#define READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r BCM84834_READ_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r
#define WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_REF_PHASE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_FCW_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8c9
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow FCW Bits [15:0]Register
 * SIZE:     32
 * FIELDS:
 *     FCW              
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r (0x0001d8c9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_FCW_0.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_fcw_0[1];
	uint32_t _ptp_nse_dpll_shadow_fcw_0;
} BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_CLR(r) (r).ptp_nse_dpll_shadow_fcw_0[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_SET(r,d) (r).ptp_nse_dpll_shadow_fcw_0[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_GET(r) (r).ptp_nse_dpll_shadow_fcw_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_GET(r) (((r).ptp_nse_dpll_shadow_fcw_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_SET(r,f) (r).ptp_nse_dpll_shadow_fcw_0[0]=(((r).ptp_nse_dpll_shadow_fcw_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_FCW_0.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_FCW_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r,(_r._ptp_nse_dpll_shadow_fcw_0))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_FCW_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r,(_r._ptp_nse_dpll_shadow_fcw_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_FCW_0r BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r
#define PTP_NSE_DPLL_SHADOW_FCW_0r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_t PTP_NSE_DPLL_SHADOW_FCW_0r_t;
#define PTP_NSE_DPLL_SHADOW_FCW_0r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_CLR
#define PTP_NSE_DPLL_SHADOW_FCW_0r_SET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_SET
#define PTP_NSE_DPLL_SHADOW_FCW_0r_GET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_GET
#define PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_GET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_GET
#define PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_SET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r_FCWf_SET
#define READ_PTP_NSE_DPLL_SHADOW_FCW_0r BCM84834_READ_PTP_NSE_DPLL_SHADOW_FCW_0r
#define WRITE_PTP_NSE_DPLL_SHADOW_FCW_0r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_FCW_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_FCW_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_SHADOW_FCW_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8ca
 * DEVAD:    1
 * DESC:     NSE DPLL Shadow FCW Bits [31:16]Register
 * SIZE:     32
 * FIELDS:
 *     FCW              
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r (0x0001d8ca | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_SHADOW_FCW_1.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_shadow_fcw_1[1];
	uint32_t _ptp_nse_dpll_shadow_fcw_1;
} BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_t;

#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_CLR(r) (r).ptp_nse_dpll_shadow_fcw_1[0] = 0
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_SET(r,d) (r).ptp_nse_dpll_shadow_fcw_1[0] = d
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_GET(r) (r).ptp_nse_dpll_shadow_fcw_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_GET(r) (((r).ptp_nse_dpll_shadow_fcw_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_SET(r,f) (r).ptp_nse_dpll_shadow_fcw_1[0]=(((r).ptp_nse_dpll_shadow_fcw_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_SHADOW_FCW_1.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_SHADOW_FCW_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r,(_r._ptp_nse_dpll_shadow_fcw_1))
#define BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_FCW_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r,(_r._ptp_nse_dpll_shadow_fcw_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_SHADOW_FCW_1r BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r
#define PTP_NSE_DPLL_SHADOW_FCW_1r_SIZE BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_SIZE
typedef BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_t PTP_NSE_DPLL_SHADOW_FCW_1r_t;
#define PTP_NSE_DPLL_SHADOW_FCW_1r_CLR BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_CLR
#define PTP_NSE_DPLL_SHADOW_FCW_1r_SET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_SET
#define PTP_NSE_DPLL_SHADOW_FCW_1r_GET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_GET
#define PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_GET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_GET
#define PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_SET BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r_FCWf_SET
#define READ_PTP_NSE_DPLL_SHADOW_FCW_1r BCM84834_READ_PTP_NSE_DPLL_SHADOW_FCW_1r
#define WRITE_PTP_NSE_DPLL_SHADOW_FCW_1r BCM84834_WRITE_PTP_NSE_DPLL_SHADOW_FCW_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_SHADOW_FCW_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_DEBUG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd8cb
 * DEVAD:    1
 * DESC:     NSE DPLL Debug Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_DPLL_DEBUG_SEL 
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr (0x0001d8cb | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_DEBUG_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_debug_cfg[1];
	uint32_t _ptp_nse_dpll_debug_cfg;
} BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_t;

#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_CLR(r) (r).ptp_nse_dpll_debug_cfg[0] = 0
#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_SET(r,d) (r).ptp_nse_dpll_debug_cfg[0] = d
#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_GET(r) (r).ptp_nse_dpll_debug_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_GET(r) (((r).ptp_nse_dpll_debug_cfg[0]) & 0xff)
#define BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_SET(r,f) (r).ptp_nse_dpll_debug_cfg[0]=(((r).ptp_nse_dpll_debug_cfg[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PTP_NSE_DPLL_DEBUG_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_DEBUG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_CFGr,(_r._ptp_nse_dpll_debug_cfg))
#define BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_CFGr,(_r._ptp_nse_dpll_debug_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_DEBUG_CFGr BCM84834_PTP_NSE_DPLL_DEBUG_CFGr
#define PTP_NSE_DPLL_DEBUG_CFGr_SIZE BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_SIZE
typedef BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_t PTP_NSE_DPLL_DEBUG_CFGr_t;
#define PTP_NSE_DPLL_DEBUG_CFGr_CLR BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_CLR
#define PTP_NSE_DPLL_DEBUG_CFGr_SET BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_SET
#define PTP_NSE_DPLL_DEBUG_CFGr_GET BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_GET
#define PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_GET BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_GET
#define PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_SET BCM84834_PTP_NSE_DPLL_DEBUG_CFGr_NSE_DPLL_DEBUG_SELf_SET
#define READ_PTP_NSE_DPLL_DEBUG_CFGr BCM84834_READ_PTP_NSE_DPLL_DEBUG_CFGr
#define WRITE_PTP_NSE_DPLL_DEBUG_CFGr BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_DEBUG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_DEBUG_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8cc
 * DEVAD:    1
 * DESC:     NSE DPLL Debug Bits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     NSE_DPLL_DEBUG   
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_DEBUG_0r (0x0001d8cc | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_DEBUG_0.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_DEBUG_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_debug_0[1];
	uint32_t _ptp_nse_dpll_debug_0;
} BCM84834_PTP_NSE_DPLL_DEBUG_0r_t;

#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_CLR(r) (r).ptp_nse_dpll_debug_0[0] = 0
#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_SET(r,d) (r).ptp_nse_dpll_debug_0[0] = d
#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_GET(r) (r).ptp_nse_dpll_debug_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_GET(r) (((r).ptp_nse_dpll_debug_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_SET(r,f) (r).ptp_nse_dpll_debug_0[0]=(((r).ptp_nse_dpll_debug_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_DEBUG_0.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_DEBUG_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_0r,(_r._ptp_nse_dpll_debug_0))
#define BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_0r,(_r._ptp_nse_dpll_debug_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_DEBUG_0r BCM84834_PTP_NSE_DPLL_DEBUG_0r
#define PTP_NSE_DPLL_DEBUG_0r_SIZE BCM84834_PTP_NSE_DPLL_DEBUG_0r_SIZE
typedef BCM84834_PTP_NSE_DPLL_DEBUG_0r_t PTP_NSE_DPLL_DEBUG_0r_t;
#define PTP_NSE_DPLL_DEBUG_0r_CLR BCM84834_PTP_NSE_DPLL_DEBUG_0r_CLR
#define PTP_NSE_DPLL_DEBUG_0r_SET BCM84834_PTP_NSE_DPLL_DEBUG_0r_SET
#define PTP_NSE_DPLL_DEBUG_0r_GET BCM84834_PTP_NSE_DPLL_DEBUG_0r_GET
#define PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_GET BCM84834_PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_GET
#define PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_SET BCM84834_PTP_NSE_DPLL_DEBUG_0r_NSE_DPLL_DEBUGf_SET
#define READ_PTP_NSE_DPLL_DEBUG_0r BCM84834_READ_PTP_NSE_DPLL_DEBUG_0r
#define WRITE_PTP_NSE_DPLL_DEBUG_0r BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_DEBUG_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_DPLL_DEBUG_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8cd
 * DEVAD:    1
 * DESC:     NSE DPLL Debug Bits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     NSE_DPLL_DEBUG   
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_DPLL_DEBUG_1r (0x0001d8cd | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_DPLL_DEBUG_1.
 *
 */
typedef union BCM84834_PTP_NSE_DPLL_DEBUG_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_dpll_debug_1[1];
	uint32_t _ptp_nse_dpll_debug_1;
} BCM84834_PTP_NSE_DPLL_DEBUG_1r_t;

#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_CLR(r) (r).ptp_nse_dpll_debug_1[0] = 0
#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_SET(r,d) (r).ptp_nse_dpll_debug_1[0] = d
#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_GET(r) (r).ptp_nse_dpll_debug_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_GET(r) (((r).ptp_nse_dpll_debug_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_SET(r,f) (r).ptp_nse_dpll_debug_1[0]=(((r).ptp_nse_dpll_debug_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_DPLL_DEBUG_1.
 *
 */
#define BCM84834_READ_PTP_NSE_DPLL_DEBUG_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_1r,(_r._ptp_nse_dpll_debug_1))
#define BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_DPLL_DEBUG_1r,(_r._ptp_nse_dpll_debug_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_DPLL_DEBUG_1r BCM84834_PTP_NSE_DPLL_DEBUG_1r
#define PTP_NSE_DPLL_DEBUG_1r_SIZE BCM84834_PTP_NSE_DPLL_DEBUG_1r_SIZE
typedef BCM84834_PTP_NSE_DPLL_DEBUG_1r_t PTP_NSE_DPLL_DEBUG_1r_t;
#define PTP_NSE_DPLL_DEBUG_1r_CLR BCM84834_PTP_NSE_DPLL_DEBUG_1r_CLR
#define PTP_NSE_DPLL_DEBUG_1r_SET BCM84834_PTP_NSE_DPLL_DEBUG_1r_SET
#define PTP_NSE_DPLL_DEBUG_1r_GET BCM84834_PTP_NSE_DPLL_DEBUG_1r_GET
#define PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_GET BCM84834_PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_GET
#define PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_SET BCM84834_PTP_NSE_DPLL_DEBUG_1r_NSE_DPLL_DEBUGf_SET
#define READ_PTP_NSE_DPLL_DEBUG_1r BCM84834_READ_PTP_NSE_DPLL_DEBUG_1r
#define WRITE_PTP_NSE_DPLL_DEBUG_1r BCM84834_WRITE_PTP_NSE_DPLL_DEBUG_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_DPLL_DEBUG_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd8e0
 * DEVAD:    1
 * DESC:     NSE NCO Configuration Register
 * SIZE:     32
 * FIELDS:
 *     NSE_NCO_FCW_SEL  
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_CFGr (0x0001d8e0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_CFG.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_cfg[1];
	uint32_t _ptp_nse_nco_cfg;
} BCM84834_PTP_NSE_NCO_CFGr_t;

#define BCM84834_PTP_NSE_NCO_CFGr_CLR(r) (r).ptp_nse_nco_cfg[0] = 0
#define BCM84834_PTP_NSE_NCO_CFGr_SET(r,d) (r).ptp_nse_nco_cfg[0] = d
#define BCM84834_PTP_NSE_NCO_CFGr_GET(r) (r).ptp_nse_nco_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_GET(r) (((r).ptp_nse_nco_cfg[0]) & 0x1)
#define BCM84834_PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_SET(r,f) (r).ptp_nse_nco_cfg[0]=(((r).ptp_nse_nco_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_NSE_NCO_CFG.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_CFGr,(_r._ptp_nse_nco_cfg))
#define BCM84834_WRITE_PTP_NSE_NCO_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_CFGr,(_r._ptp_nse_nco_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_CFGr BCM84834_PTP_NSE_NCO_CFGr
#define PTP_NSE_NCO_CFGr_SIZE BCM84834_PTP_NSE_NCO_CFGr_SIZE
typedef BCM84834_PTP_NSE_NCO_CFGr_t PTP_NSE_NCO_CFGr_t;
#define PTP_NSE_NCO_CFGr_CLR BCM84834_PTP_NSE_NCO_CFGr_CLR
#define PTP_NSE_NCO_CFGr_SET BCM84834_PTP_NSE_NCO_CFGr_SET
#define PTP_NSE_NCO_CFGr_GET BCM84834_PTP_NSE_NCO_CFGr_GET
#define PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_GET BCM84834_PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_GET
#define PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_SET BCM84834_PTP_NSE_NCO_CFGr_NSE_NCO_FCW_SELf_SET
#define READ_PTP_NSE_NCO_CFGr BCM84834_READ_PTP_NSE_NCO_CFGr
#define WRITE_PTP_NSE_NCO_CFGr BCM84834_WRITE_PTP_NSE_NCO_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_FCW_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8e1
 * DEVAD:    1
 * DESC:     NSE NCO Shadow FCW Bits [15:0]Register
 * SIZE:     32
 * FIELDS:
 *     FCW              
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r (0x0001d8e1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_FCW_0.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_fcw_0[1];
	uint32_t _ptp_nse_nco_shadow_fcw_0;
} BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_CLR(r) (r).ptp_nse_nco_shadow_fcw_0[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_SET(r,d) (r).ptp_nse_nco_shadow_fcw_0[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_GET(r) (r).ptp_nse_nco_shadow_fcw_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_GET(r) (((r).ptp_nse_nco_shadow_fcw_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_SET(r,f) (r).ptp_nse_nco_shadow_fcw_0[0]=(((r).ptp_nse_nco_shadow_fcw_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_FCW_0.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_FCW_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r,(_r._ptp_nse_nco_shadow_fcw_0))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_FCW_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r,(_r._ptp_nse_nco_shadow_fcw_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_FCW_0r BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r
#define PTP_NSE_NCO_SHADOW_FCW_0r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_t PTP_NSE_NCO_SHADOW_FCW_0r_t;
#define PTP_NSE_NCO_SHADOW_FCW_0r_CLR BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_CLR
#define PTP_NSE_NCO_SHADOW_FCW_0r_SET BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_SET
#define PTP_NSE_NCO_SHADOW_FCW_0r_GET BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_GET
#define PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_GET BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_GET
#define PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_SET BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r_FCWf_SET
#define READ_PTP_NSE_NCO_SHADOW_FCW_0r BCM84834_READ_PTP_NSE_NCO_SHADOW_FCW_0r
#define WRITE_PTP_NSE_NCO_SHADOW_FCW_0r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_FCW_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_FCW_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_FCW_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8e2
 * DEVAD:    1
 * DESC:     NSE NCO Shadow FCW Bits [31:16]Register
 * SIZE:     32
 * FIELDS:
 *     FCW              
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r (0x0001d8e2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_FCW_1.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_fcw_1[1];
	uint32_t _ptp_nse_nco_shadow_fcw_1;
} BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_CLR(r) (r).ptp_nse_nco_shadow_fcw_1[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_SET(r,d) (r).ptp_nse_nco_shadow_fcw_1[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_GET(r) (r).ptp_nse_nco_shadow_fcw_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_GET(r) (((r).ptp_nse_nco_shadow_fcw_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_SET(r,f) (r).ptp_nse_nco_shadow_fcw_1[0]=(((r).ptp_nse_nco_shadow_fcw_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_FCW_1.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_FCW_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r,(_r._ptp_nse_nco_shadow_fcw_1))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_FCW_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r,(_r._ptp_nse_nco_shadow_fcw_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_FCW_1r BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r
#define PTP_NSE_NCO_SHADOW_FCW_1r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_t PTP_NSE_NCO_SHADOW_FCW_1r_t;
#define PTP_NSE_NCO_SHADOW_FCW_1r_CLR BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_CLR
#define PTP_NSE_NCO_SHADOW_FCW_1r_SET BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_SET
#define PTP_NSE_NCO_SHADOW_FCW_1r_GET BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_GET
#define PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_GET BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_GET
#define PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_SET BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r_FCWf_SET
#define READ_PTP_NSE_NCO_SHADOW_FCW_1r BCM84834_READ_PTP_NSE_NCO_SHADOW_FCW_1r
#define WRITE_PTP_NSE_NCO_SHADOW_FCW_1r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_FCW_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_FCW_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_TIME_LOW_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8e3
 * DEVAD:    1
 * DESC:     NCO Shadow NCO Time LowBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     TIME_LOW         
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r (0x0001d8e3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_TIME_LOW_0.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_time_low_0[1];
	uint32_t _ptp_nse_nco_shadow_time_low_0;
} BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_CLR(r) (r).ptp_nse_nco_shadow_time_low_0[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SET(r,d) (r).ptp_nse_nco_shadow_time_low_0[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_GET(r) (r).ptp_nse_nco_shadow_time_low_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_GET(r) (((r).ptp_nse_nco_shadow_time_low_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_SET(r,f) (r).ptp_nse_nco_shadow_time_low_0[0]=(((r).ptp_nse_nco_shadow_time_low_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_TIME_LOW_0.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_LOW_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r,(_r._ptp_nse_nco_shadow_time_low_0))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r,(_r._ptp_nse_nco_shadow_time_low_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_t PTP_NSE_NCO_SHADOW_TIME_LOW_0r_t;
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_CLR BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_CLR
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_SET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_GET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_GET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r_TIME_LOWf_SET
#define READ_PTP_NSE_NCO_SHADOW_TIME_LOW_0r BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_LOW_0r
#define WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_0r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_TIME_LOW_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8e4
 * DEVAD:    1
 * DESC:     NCO Shadow NCO Time LowBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     TIME_LOW         
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r (0x0001d8e4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_TIME_LOW_1.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_time_low_1[1];
	uint32_t _ptp_nse_nco_shadow_time_low_1;
} BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_CLR(r) (r).ptp_nse_nco_shadow_time_low_1[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SET(r,d) (r).ptp_nse_nco_shadow_time_low_1[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_GET(r) (r).ptp_nse_nco_shadow_time_low_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_GET(r) (((r).ptp_nse_nco_shadow_time_low_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_SET(r,f) (r).ptp_nse_nco_shadow_time_low_1[0]=(((r).ptp_nse_nco_shadow_time_low_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_TIME_LOW_1.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_LOW_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r,(_r._ptp_nse_nco_shadow_time_low_1))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r,(_r._ptp_nse_nco_shadow_time_low_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_t PTP_NSE_NCO_SHADOW_TIME_LOW_1r_t;
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_CLR BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_CLR
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_SET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_GET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_GET
#define PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r_TIME_LOWf_SET
#define READ_PTP_NSE_NCO_SHADOW_TIME_LOW_1r BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_LOW_1r
#define WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_1r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_LOW_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_TIME_LOW_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_TIME_HIGH_0
 * BLOCKS:   PTP
 * REGADDR:  0xd8e5
 * DEVAD:    1
 * DESC:     NCO Shadow NCO Time HighBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     TIME_HIGH        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r (0x0001d8e5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_TIME_HIGH_0.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_time_high_0[1];
	uint32_t _ptp_nse_nco_shadow_time_high_0;
} BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_CLR(r) (r).ptp_nse_nco_shadow_time_high_0[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SET(r,d) (r).ptp_nse_nco_shadow_time_high_0[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_GET(r) (r).ptp_nse_nco_shadow_time_high_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_GET(r) (((r).ptp_nse_nco_shadow_time_high_0[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_SET(r,f) (r).ptp_nse_nco_shadow_time_high_0[0]=(((r).ptp_nse_nco_shadow_time_high_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_TIME_HIGH_0.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r,(_r._ptp_nse_nco_shadow_time_high_0))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r,(_r._ptp_nse_nco_shadow_time_high_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_t PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_t;
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_CLR BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_CLR
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_SET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r_TIME_HIGHf_SET
#define READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r
#define WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_TIME_HIGH_1
 * BLOCKS:   PTP
 * REGADDR:  0xd8e6
 * DEVAD:    1
 * DESC:     NSE NCO Shadow Time HighBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     TIME_HIGH        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r (0x0001d8e6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_TIME_HIGH_1.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_time_high_1[1];
	uint32_t _ptp_nse_nco_shadow_time_high_1;
} BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_CLR(r) (r).ptp_nse_nco_shadow_time_high_1[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SET(r,d) (r).ptp_nse_nco_shadow_time_high_1[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_GET(r) (r).ptp_nse_nco_shadow_time_high_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_GET(r) (((r).ptp_nse_nco_shadow_time_high_1[0]) & 0xffff)
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_SET(r,f) (r).ptp_nse_nco_shadow_time_high_1[0]=(((r).ptp_nse_nco_shadow_time_high_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_TIME_HIGH_1.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r,(_r._ptp_nse_nco_shadow_time_high_1))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r,(_r._ptp_nse_nco_shadow_time_high_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_t PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_t;
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_CLR BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_CLR
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_SET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r_TIME_HIGHf_SET
#define READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r
#define WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_NSE_NCO_SHADOW_TIME_HIGH_2
 * BLOCKS:   PTP
 * REGADDR:  0xd8e7
 * DEVAD:    1
 * DESC:     NSE NCO Shadow Time HighBits [43:32] Register
 * SIZE:     32
 * FIELDS:
 *     TIME_HIGH        
 *
 ******************************************************************************/
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r (0x0001d8e7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_NSE_NCO_SHADOW_TIME_HIGH_2.
 *
 */
typedef union BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_s {
	uint32_t v[1];
	uint32_t ptp_nse_nco_shadow_time_high_2[1];
	uint32_t _ptp_nse_nco_shadow_time_high_2;
} BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_t;

#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_CLR(r) (r).ptp_nse_nco_shadow_time_high_2[0] = 0
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SET(r,d) (r).ptp_nse_nco_shadow_time_high_2[0] = d
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_GET(r) (r).ptp_nse_nco_shadow_time_high_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_GET(r) (((r).ptp_nse_nco_shadow_time_high_2[0]) & 0xfff)
#define BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_SET(r,f) (r).ptp_nse_nco_shadow_time_high_2[0]=(((r).ptp_nse_nco_shadow_time_high_2[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access PTP_NSE_NCO_SHADOW_TIME_HIGH_2.
 *
 */
#define BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r,(_r._ptp_nse_nco_shadow_time_high_2))
#define BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r,(_r._ptp_nse_nco_shadow_time_high_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SIZE BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SIZE
typedef BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_t PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_t;
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_CLR BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_CLR
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_SET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_GET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_GET
#define PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_SET BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r_TIME_HIGHf_SET
#define READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r BCM84834_READ_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r
#define WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r BCM84834_WRITE_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_NSE_NCO_SHADOW_TIME_HIGH_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TS_EG_SOP_OFFSET_0
 * BLOCKS:   PTP
 * REGADDR:  0xd908
 * DEVAD:    1
 * DESC:     TS Egress SOP Timestamp Offset Bits [15:0]Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET           
 *
 ******************************************************************************/
#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r (0x0001d908 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_TS_EG_SOP_OFFSET_0.
 *
 */
typedef union BCM84834_PTP_TS_EG_SOP_OFFSET_0r_s {
	uint32_t v[1];
	uint32_t ptp_ts_eg_sop_offset_0[1];
	uint32_t _ptp_ts_eg_sop_offset_0;
} BCM84834_PTP_TS_EG_SOP_OFFSET_0r_t;

#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_CLR(r) (r).ptp_ts_eg_sop_offset_0[0] = 0
#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_SET(r,d) (r).ptp_ts_eg_sop_offset_0[0] = d
#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_GET(r) (r).ptp_ts_eg_sop_offset_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_GET(r) (((r).ptp_ts_eg_sop_offset_0[0]) & 0xffff)
#define BCM84834_PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_SET(r,f) (r).ptp_ts_eg_sop_offset_0[0]=(((r).ptp_ts_eg_sop_offset_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_TS_EG_SOP_OFFSET_0.
 *
 */
#define BCM84834_READ_PTP_TS_EG_SOP_OFFSET_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TS_EG_SOP_OFFSET_0r,(_r._ptp_ts_eg_sop_offset_0))
#define BCM84834_WRITE_PTP_TS_EG_SOP_OFFSET_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TS_EG_SOP_OFFSET_0r,(_r._ptp_ts_eg_sop_offset_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TS_EG_SOP_OFFSET_0r BCM84834_PTP_TS_EG_SOP_OFFSET_0r
#define PTP_TS_EG_SOP_OFFSET_0r_SIZE BCM84834_PTP_TS_EG_SOP_OFFSET_0r_SIZE
typedef BCM84834_PTP_TS_EG_SOP_OFFSET_0r_t PTP_TS_EG_SOP_OFFSET_0r_t;
#define PTP_TS_EG_SOP_OFFSET_0r_CLR BCM84834_PTP_TS_EG_SOP_OFFSET_0r_CLR
#define PTP_TS_EG_SOP_OFFSET_0r_SET BCM84834_PTP_TS_EG_SOP_OFFSET_0r_SET
#define PTP_TS_EG_SOP_OFFSET_0r_GET BCM84834_PTP_TS_EG_SOP_OFFSET_0r_GET
#define PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_GET BCM84834_PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_GET
#define PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_SET BCM84834_PTP_TS_EG_SOP_OFFSET_0r_OFFSETf_SET
#define READ_PTP_TS_EG_SOP_OFFSET_0r BCM84834_READ_PTP_TS_EG_SOP_OFFSET_0r
#define WRITE_PTP_TS_EG_SOP_OFFSET_0r BCM84834_WRITE_PTP_TS_EG_SOP_OFFSET_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TS_EG_SOP_OFFSET_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TS_EG_SOP_OFFSET_1
 * BLOCKS:   PTP
 * REGADDR:  0xd909
 * DEVAD:    1
 * DESC:     TS Egress SOP Timestamp Offset Bits[31:16] Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET           
 *
 ******************************************************************************/
#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r (0x0001d909 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_TS_EG_SOP_OFFSET_1.
 *
 */
typedef union BCM84834_PTP_TS_EG_SOP_OFFSET_1r_s {
	uint32_t v[1];
	uint32_t ptp_ts_eg_sop_offset_1[1];
	uint32_t _ptp_ts_eg_sop_offset_1;
} BCM84834_PTP_TS_EG_SOP_OFFSET_1r_t;

#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_CLR(r) (r).ptp_ts_eg_sop_offset_1[0] = 0
#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_SET(r,d) (r).ptp_ts_eg_sop_offset_1[0] = d
#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_GET(r) (r).ptp_ts_eg_sop_offset_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_GET(r) (((r).ptp_ts_eg_sop_offset_1[0]) & 0xf)
#define BCM84834_PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_SET(r,f) (r).ptp_ts_eg_sop_offset_1[0]=(((r).ptp_ts_eg_sop_offset_1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PTP_TS_EG_SOP_OFFSET_1.
 *
 */
#define BCM84834_READ_PTP_TS_EG_SOP_OFFSET_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TS_EG_SOP_OFFSET_1r,(_r._ptp_ts_eg_sop_offset_1))
#define BCM84834_WRITE_PTP_TS_EG_SOP_OFFSET_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TS_EG_SOP_OFFSET_1r,(_r._ptp_ts_eg_sop_offset_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TS_EG_SOP_OFFSET_1r BCM84834_PTP_TS_EG_SOP_OFFSET_1r
#define PTP_TS_EG_SOP_OFFSET_1r_SIZE BCM84834_PTP_TS_EG_SOP_OFFSET_1r_SIZE
typedef BCM84834_PTP_TS_EG_SOP_OFFSET_1r_t PTP_TS_EG_SOP_OFFSET_1r_t;
#define PTP_TS_EG_SOP_OFFSET_1r_CLR BCM84834_PTP_TS_EG_SOP_OFFSET_1r_CLR
#define PTP_TS_EG_SOP_OFFSET_1r_SET BCM84834_PTP_TS_EG_SOP_OFFSET_1r_SET
#define PTP_TS_EG_SOP_OFFSET_1r_GET BCM84834_PTP_TS_EG_SOP_OFFSET_1r_GET
#define PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_GET BCM84834_PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_GET
#define PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_SET BCM84834_PTP_TS_EG_SOP_OFFSET_1r_OFFSETf_SET
#define READ_PTP_TS_EG_SOP_OFFSET_1r BCM84834_READ_PTP_TS_EG_SOP_OFFSET_1r
#define WRITE_PTP_TS_EG_SOP_OFFSET_1r BCM84834_WRITE_PTP_TS_EG_SOP_OFFSET_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TS_EG_SOP_OFFSET_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TS_IG_SOP_OFFSET_0
 * BLOCKS:   PTP
 * REGADDR:  0xd910
 * DEVAD:    1
 * DESC:     TS Ingress SOP Timestamp Offset Bits [15:0]Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET           
 *
 ******************************************************************************/
#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r (0x0001d910 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_TS_IG_SOP_OFFSET_0.
 *
 */
typedef union BCM84834_PTP_TS_IG_SOP_OFFSET_0r_s {
	uint32_t v[1];
	uint32_t ptp_ts_ig_sop_offset_0[1];
	uint32_t _ptp_ts_ig_sop_offset_0;
} BCM84834_PTP_TS_IG_SOP_OFFSET_0r_t;

#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_CLR(r) (r).ptp_ts_ig_sop_offset_0[0] = 0
#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_SET(r,d) (r).ptp_ts_ig_sop_offset_0[0] = d
#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_GET(r) (r).ptp_ts_ig_sop_offset_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_GET(r) (((r).ptp_ts_ig_sop_offset_0[0]) & 0xffff)
#define BCM84834_PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_SET(r,f) (r).ptp_ts_ig_sop_offset_0[0]=(((r).ptp_ts_ig_sop_offset_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_TS_IG_SOP_OFFSET_0.
 *
 */
#define BCM84834_READ_PTP_TS_IG_SOP_OFFSET_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TS_IG_SOP_OFFSET_0r,(_r._ptp_ts_ig_sop_offset_0))
#define BCM84834_WRITE_PTP_TS_IG_SOP_OFFSET_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TS_IG_SOP_OFFSET_0r,(_r._ptp_ts_ig_sop_offset_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TS_IG_SOP_OFFSET_0r BCM84834_PTP_TS_IG_SOP_OFFSET_0r
#define PTP_TS_IG_SOP_OFFSET_0r_SIZE BCM84834_PTP_TS_IG_SOP_OFFSET_0r_SIZE
typedef BCM84834_PTP_TS_IG_SOP_OFFSET_0r_t PTP_TS_IG_SOP_OFFSET_0r_t;
#define PTP_TS_IG_SOP_OFFSET_0r_CLR BCM84834_PTP_TS_IG_SOP_OFFSET_0r_CLR
#define PTP_TS_IG_SOP_OFFSET_0r_SET BCM84834_PTP_TS_IG_SOP_OFFSET_0r_SET
#define PTP_TS_IG_SOP_OFFSET_0r_GET BCM84834_PTP_TS_IG_SOP_OFFSET_0r_GET
#define PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_GET BCM84834_PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_GET
#define PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_SET BCM84834_PTP_TS_IG_SOP_OFFSET_0r_OFFSETf_SET
#define READ_PTP_TS_IG_SOP_OFFSET_0r BCM84834_READ_PTP_TS_IG_SOP_OFFSET_0r
#define WRITE_PTP_TS_IG_SOP_OFFSET_0r BCM84834_WRITE_PTP_TS_IG_SOP_OFFSET_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TS_IG_SOP_OFFSET_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TS_IG_SOP_OFFSET_1
 * BLOCKS:   PTP
 * REGADDR:  0xd911
 * DEVAD:    1
 * DESC:     TS Ingress SOP Timestamp Offset Bits[31:16] Register
 * SIZE:     32
 * FIELDS:
 *     OFFSET           
 *
 ******************************************************************************/
#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r (0x0001d911 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_TS_IG_SOP_OFFSET_1.
 *
 */
typedef union BCM84834_PTP_TS_IG_SOP_OFFSET_1r_s {
	uint32_t v[1];
	uint32_t ptp_ts_ig_sop_offset_1[1];
	uint32_t _ptp_ts_ig_sop_offset_1;
} BCM84834_PTP_TS_IG_SOP_OFFSET_1r_t;

#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_CLR(r) (r).ptp_ts_ig_sop_offset_1[0] = 0
#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_SET(r,d) (r).ptp_ts_ig_sop_offset_1[0] = d
#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_GET(r) (r).ptp_ts_ig_sop_offset_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_GET(r) (((r).ptp_ts_ig_sop_offset_1[0]) & 0xf)
#define BCM84834_PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_SET(r,f) (r).ptp_ts_ig_sop_offset_1[0]=(((r).ptp_ts_ig_sop_offset_1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PTP_TS_IG_SOP_OFFSET_1.
 *
 */
#define BCM84834_READ_PTP_TS_IG_SOP_OFFSET_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TS_IG_SOP_OFFSET_1r,(_r._ptp_ts_ig_sop_offset_1))
#define BCM84834_WRITE_PTP_TS_IG_SOP_OFFSET_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TS_IG_SOP_OFFSET_1r,(_r._ptp_ts_ig_sop_offset_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TS_IG_SOP_OFFSET_1r BCM84834_PTP_TS_IG_SOP_OFFSET_1r
#define PTP_TS_IG_SOP_OFFSET_1r_SIZE BCM84834_PTP_TS_IG_SOP_OFFSET_1r_SIZE
typedef BCM84834_PTP_TS_IG_SOP_OFFSET_1r_t PTP_TS_IG_SOP_OFFSET_1r_t;
#define PTP_TS_IG_SOP_OFFSET_1r_CLR BCM84834_PTP_TS_IG_SOP_OFFSET_1r_CLR
#define PTP_TS_IG_SOP_OFFSET_1r_SET BCM84834_PTP_TS_IG_SOP_OFFSET_1r_SET
#define PTP_TS_IG_SOP_OFFSET_1r_GET BCM84834_PTP_TS_IG_SOP_OFFSET_1r_GET
#define PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_GET BCM84834_PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_GET
#define PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_SET BCM84834_PTP_TS_IG_SOP_OFFSET_1r_OFFSETf_SET
#define READ_PTP_TS_IG_SOP_OFFSET_1r BCM84834_READ_PTP_TS_IG_SOP_OFFSET_1r
#define WRITE_PTP_TS_IG_SOP_OFFSET_1r BCM84834_WRITE_PTP_TS_IG_SOP_OFFSET_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TS_IG_SOP_OFFSET_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_TS_DEBUG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd940
 * DEVAD:    1
 * DESC:     TS Debug Configuration Register
 * SIZE:     32
 * FIELDS:
 *     TS_DEBUG_EN      
 *     TS_DEBUG_SEL     
 *
 ******************************************************************************/
#define BCM84834_PTP_TS_DEBUG_CFGr (0x0001d940 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_TS_DEBUG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_TS_DEBUG_CFG.
 *
 */
typedef union BCM84834_PTP_TS_DEBUG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_ts_debug_cfg[1];
	uint32_t _ptp_ts_debug_cfg;
} BCM84834_PTP_TS_DEBUG_CFGr_t;

#define BCM84834_PTP_TS_DEBUG_CFGr_CLR(r) (r).ptp_ts_debug_cfg[0] = 0
#define BCM84834_PTP_TS_DEBUG_CFGr_SET(r,d) (r).ptp_ts_debug_cfg[0] = d
#define BCM84834_PTP_TS_DEBUG_CFGr_GET(r) (r).ptp_ts_debug_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_GET(r) ((((r).ptp_ts_debug_cfg[0]) >> 8) & 0x7)
#define BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_SET(r,f) (r).ptp_ts_debug_cfg[0]=(((r).ptp_ts_debug_cfg[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_GET(r) (((r).ptp_ts_debug_cfg[0]) & 0x1)
#define BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_SET(r,f) (r).ptp_ts_debug_cfg[0]=(((r).ptp_ts_debug_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_TS_DEBUG_CFG.
 *
 */
#define BCM84834_READ_PTP_TS_DEBUG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_TS_DEBUG_CFGr,(_r._ptp_ts_debug_cfg))
#define BCM84834_WRITE_PTP_TS_DEBUG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_TS_DEBUG_CFGr,(_r._ptp_ts_debug_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_TS_DEBUG_CFGr BCM84834_PTP_TS_DEBUG_CFGr
#define PTP_TS_DEBUG_CFGr_SIZE BCM84834_PTP_TS_DEBUG_CFGr_SIZE
typedef BCM84834_PTP_TS_DEBUG_CFGr_t PTP_TS_DEBUG_CFGr_t;
#define PTP_TS_DEBUG_CFGr_CLR BCM84834_PTP_TS_DEBUG_CFGr_CLR
#define PTP_TS_DEBUG_CFGr_SET BCM84834_PTP_TS_DEBUG_CFGr_SET
#define PTP_TS_DEBUG_CFGr_GET BCM84834_PTP_TS_DEBUG_CFGr_GET
#define PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_GET BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_GET
#define PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_SET BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_SELf_SET
#define PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_GET BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_GET
#define PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_SET BCM84834_PTP_TS_DEBUG_CFGr_TS_DEBUG_ENf_SET
#define READ_PTP_TS_DEBUG_CFGr BCM84834_READ_PTP_TS_DEBUG_CFGr
#define WRITE_PTP_TS_DEBUG_CFGr BCM84834_WRITE_PTP_TS_DEBUG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_TS_DEBUG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xd981
 * DEVAD:    1
 * DESC:     Parser Configuration Register
 * SIZE:     32
 * FIELDS:
 *     PARSER_SPEED     
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_CFGr (0x0001d981 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_cfg[1];
	uint32_t _ptp_parser_cfg;
} BCM84834_PTP_PARSER_CFGr_t;

#define BCM84834_PTP_PARSER_CFGr_CLR(r) (r).ptp_parser_cfg[0] = 0
#define BCM84834_PTP_PARSER_CFGr_SET(r,d) (r).ptp_parser_cfg[0] = d
#define BCM84834_PTP_PARSER_CFGr_GET(r) (r).ptp_parser_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_CFGr_PARSER_SPEEDf_GET(r) (((r).ptp_parser_cfg[0]) & 0xf)
#define BCM84834_PTP_PARSER_CFGr_PARSER_SPEEDf_SET(r,f) (r).ptp_parser_cfg[0]=(((r).ptp_parser_cfg[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PTP_PARSER_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_CFGr,(_r._ptp_parser_cfg))
#define BCM84834_WRITE_PTP_PARSER_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_CFGr,(_r._ptp_parser_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_CFGr BCM84834_PTP_PARSER_CFGr
#define PTP_PARSER_CFGr_SIZE BCM84834_PTP_PARSER_CFGr_SIZE
typedef BCM84834_PTP_PARSER_CFGr_t PTP_PARSER_CFGr_t;
#define PTP_PARSER_CFGr_CLR BCM84834_PTP_PARSER_CFGr_CLR
#define PTP_PARSER_CFGr_SET BCM84834_PTP_PARSER_CFGr_SET
#define PTP_PARSER_CFGr_GET BCM84834_PTP_PARSER_CFGr_GET
#define PTP_PARSER_CFGr_PARSER_SPEEDf_GET BCM84834_PTP_PARSER_CFGr_PARSER_SPEEDf_GET
#define PTP_PARSER_CFGr_PARSER_SPEEDf_SET BCM84834_PTP_PARSER_CFGr_PARSER_SPEEDf_SET
#define READ_PTP_PARSER_CFGr BCM84834_READ_PTP_PARSER_CFGr
#define WRITE_PTP_PARSER_CFGr BCM84834_WRITE_PTP_PARSER_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_VLAN_1TAG_TPID
 * BLOCKS:   PTP
 * REGADDR:  0xd990
 * DEVAD:    1
 * DESC:     Parser VLAN 1 Tag TPID Register
 * SIZE:     32
 * FIELDS:
 *     TPID             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr (0x0001d990 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_VLAN_1TAG_TPID.
 *
 */
typedef union BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_s {
	uint32_t v[1];
	uint32_t ptp_parser_vlan_1tag_tpid[1];
	uint32_t _ptp_parser_vlan_1tag_tpid;
} BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_t;

#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_CLR(r) (r).ptp_parser_vlan_1tag_tpid[0] = 0
#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_SET(r,d) (r).ptp_parser_vlan_1tag_tpid[0] = d
#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_GET(r) (r).ptp_parser_vlan_1tag_tpid[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_GET(r) (((r).ptp_parser_vlan_1tag_tpid[0]) & 0xffff)
#define BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_SET(r,f) (r).ptp_parser_vlan_1tag_tpid[0]=(((r).ptp_parser_vlan_1tag_tpid[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_VLAN_1TAG_TPID.
 *
 */
#define BCM84834_READ_PTP_PARSER_VLAN_1TAG_TPIDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr,(_r._ptp_parser_vlan_1tag_tpid))
#define BCM84834_WRITE_PTP_PARSER_VLAN_1TAG_TPIDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr,(_r._ptp_parser_vlan_1tag_tpid))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_VLAN_1TAG_TPIDr BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr
#define PTP_PARSER_VLAN_1TAG_TPIDr_SIZE BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_SIZE
typedef BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_t PTP_PARSER_VLAN_1TAG_TPIDr_t;
#define PTP_PARSER_VLAN_1TAG_TPIDr_CLR BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_CLR
#define PTP_PARSER_VLAN_1TAG_TPIDr_SET BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_SET
#define PTP_PARSER_VLAN_1TAG_TPIDr_GET BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_GET
#define PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_GET BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_GET
#define PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_SET BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr_TPIDf_SET
#define READ_PTP_PARSER_VLAN_1TAG_TPIDr BCM84834_READ_PTP_PARSER_VLAN_1TAG_TPIDr
#define WRITE_PTP_PARSER_VLAN_1TAG_TPIDr BCM84834_WRITE_PTP_PARSER_VLAN_1TAG_TPIDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_VLAN_1TAG_TPIDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_VLAN_2TAG_OTPID_0
 * BLOCKS:   PTP
 * REGADDR:  0xd991
 * DEVAD:    1
 * DESC:     Parser VLAN 2 Tag OTPID 0Register
 * SIZE:     32
 * FIELDS:
 *     OTPID            
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r (0x0001d991 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_VLAN_2TAG_OTPID_0.
 *
 */
typedef union BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_s {
	uint32_t v[1];
	uint32_t ptp_parser_vlan_2tag_otpid_0[1];
	uint32_t _ptp_parser_vlan_2tag_otpid_0;
} BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_t;

#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_CLR(r) (r).ptp_parser_vlan_2tag_otpid_0[0] = 0
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_SET(r,d) (r).ptp_parser_vlan_2tag_otpid_0[0] = d
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_GET(r) (r).ptp_parser_vlan_2tag_otpid_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_GET(r) (((r).ptp_parser_vlan_2tag_otpid_0[0]) & 0xffff)
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_SET(r,f) (r).ptp_parser_vlan_2tag_otpid_0[0]=(((r).ptp_parser_vlan_2tag_otpid_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_VLAN_2TAG_OTPID_0.
 *
 */
#define BCM84834_READ_PTP_PARSER_VLAN_2TAG_OTPID_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r,(_r._ptp_parser_vlan_2tag_otpid_0))
#define BCM84834_WRITE_PTP_PARSER_VLAN_2TAG_OTPID_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r,(_r._ptp_parser_vlan_2tag_otpid_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_VLAN_2TAG_OTPID_0r BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_SIZE BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_SIZE
typedef BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_t PTP_PARSER_VLAN_2TAG_OTPID_0r_t;
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_CLR BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_CLR
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_SET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_SET
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_GET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_GET
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_GET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_GET
#define PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_SET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r_OTPIDf_SET
#define READ_PTP_PARSER_VLAN_2TAG_OTPID_0r BCM84834_READ_PTP_PARSER_VLAN_2TAG_OTPID_0r
#define WRITE_PTP_PARSER_VLAN_2TAG_OTPID_0r BCM84834_WRITE_PTP_PARSER_VLAN_2TAG_OTPID_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_VLAN_2TAG_OTPID_1
 * BLOCKS:   PTP
 * REGADDR:  0xd992
 * DEVAD:    1
 * DESC:     Parser VLAN 2 Tag OTPID 1Register
 * SIZE:     32
 * FIELDS:
 *     OTPID            
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r (0x0001d992 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_VLAN_2TAG_OTPID_1.
 *
 */
typedef union BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_s {
	uint32_t v[1];
	uint32_t ptp_parser_vlan_2tag_otpid_1[1];
	uint32_t _ptp_parser_vlan_2tag_otpid_1;
} BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_t;

#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_CLR(r) (r).ptp_parser_vlan_2tag_otpid_1[0] = 0
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_SET(r,d) (r).ptp_parser_vlan_2tag_otpid_1[0] = d
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_GET(r) (r).ptp_parser_vlan_2tag_otpid_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_GET(r) (((r).ptp_parser_vlan_2tag_otpid_1[0]) & 0xffff)
#define BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_SET(r,f) (r).ptp_parser_vlan_2tag_otpid_1[0]=(((r).ptp_parser_vlan_2tag_otpid_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_VLAN_2TAG_OTPID_1.
 *
 */
#define BCM84834_READ_PTP_PARSER_VLAN_2TAG_OTPID_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r,(_r._ptp_parser_vlan_2tag_otpid_1))
#define BCM84834_WRITE_PTP_PARSER_VLAN_2TAG_OTPID_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r,(_r._ptp_parser_vlan_2tag_otpid_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_VLAN_2TAG_OTPID_1r BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_SIZE BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_SIZE
typedef BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_t PTP_PARSER_VLAN_2TAG_OTPID_1r_t;
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_CLR BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_CLR
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_SET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_SET
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_GET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_GET
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_GET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_GET
#define PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_SET BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r_OTPIDf_SET
#define READ_PTP_PARSER_VLAN_2TAG_OTPID_1r BCM84834_READ_PTP_PARSER_VLAN_2TAG_OTPID_1r
#define WRITE_PTP_PARSER_VLAN_2TAG_OTPID_1r BCM84834_WRITE_PTP_PARSER_VLAN_2TAG_OTPID_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_VLAN_2TAG_OTPID_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xda01
 * DEVAD:    1
 * DESC:     Egress Parser Configuration Register
 * SIZE:     32
 * FIELDS:
 *     FCS_CHK_EN       
 *     L2_EN            
 *     L4_IPV4_UDP_EN   
 *     L4_IPV6_UDP_EN   
 *     L2_ADDR_EN       
 *     L4_IPV4_UDP_ADDR_EN 
 *     L4_IPV4_ADDR_CHK_0 
 *     L4_IPV4_ADDR_CHK_1 
 *     L4_IPV4_ADDR_CHK_2 
 *     L4_IPV6_UDP_ADDR_EN 
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CFGr (0x0001da01 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cfg[1];
	uint32_t _ptp_parser_eg_cfg;
} BCM84834_PTP_PARSER_EG_CFGr_t;

#define BCM84834_PTP_PARSER_EG_CFGr_CLR(r) (r).ptp_parser_eg_cfg[0] = 0
#define BCM84834_PTP_PARSER_EG_CFGr_SET(r,d) (r).ptp_parser_eg_cfg[0] = d
#define BCM84834_PTP_PARSER_EG_CFGr_GET(r) (r).ptp_parser_eg_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 13) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 12) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 11) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 10) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 9) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PTP_PARSER_EG_CFGr_L2_ADDR_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 8) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L2_ADDR_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 6) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 5) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_PARSER_EG_CFGr_L2_ENf_GET(r) ((((r).ptp_parser_eg_cfg[0]) >> 4) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_L2_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_PARSER_EG_CFGr_FCS_CHK_ENf_GET(r) (((r).ptp_parser_eg_cfg[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_CFGr_FCS_CHK_ENf_SET(r,f) (r).ptp_parser_eg_cfg[0]=(((r).ptp_parser_eg_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CFGr,(_r._ptp_parser_eg_cfg))
#define BCM84834_WRITE_PTP_PARSER_EG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CFGr,(_r._ptp_parser_eg_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CFGr BCM84834_PTP_PARSER_EG_CFGr
#define PTP_PARSER_EG_CFGr_SIZE BCM84834_PTP_PARSER_EG_CFGr_SIZE
typedef BCM84834_PTP_PARSER_EG_CFGr_t PTP_PARSER_EG_CFGr_t;
#define PTP_PARSER_EG_CFGr_CLR BCM84834_PTP_PARSER_EG_CFGr_CLR
#define PTP_PARSER_EG_CFGr_SET BCM84834_PTP_PARSER_EG_CFGr_SET
#define PTP_PARSER_EG_CFGr_GET BCM84834_PTP_PARSER_EG_CFGr_GET
#define PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET
#define PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_GET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_2f_SET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_GET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_1f_SET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_GET
#define PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_ADDR_CHK_0f_SET
#define PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET
#define PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET
#define PTP_PARSER_EG_CFGr_L2_ADDR_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L2_ADDR_ENf_GET
#define PTP_PARSER_EG_CFGr_L2_ADDR_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L2_ADDR_ENf_SET
#define PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_GET
#define PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV6_UDP_ENf_SET
#define PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_GET
#define PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L4_IPV4_UDP_ENf_SET
#define PTP_PARSER_EG_CFGr_L2_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_L2_ENf_GET
#define PTP_PARSER_EG_CFGr_L2_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_L2_ENf_SET
#define PTP_PARSER_EG_CFGr_FCS_CHK_ENf_GET BCM84834_PTP_PARSER_EG_CFGr_FCS_CHK_ENf_GET
#define PTP_PARSER_EG_CFGr_FCS_CHK_ENf_SET BCM84834_PTP_PARSER_EG_CFGr_FCS_CHK_ENf_SET
#define READ_PTP_PARSER_EG_CFGr BCM84834_READ_PTP_PARSER_EG_CFGr
#define WRITE_PTP_PARSER_EG_CFGr BCM84834_WRITE_PTP_PARSER_EG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_PTP_PKT_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xda08
 * DEVAD:    1
 * DESC:     Egress Parser PTP PacketConfiguration Register
 * SIZE:     32
 * FIELDS:
 *     ACTION_PTP_SYNC  
 *     CAPT_PTP_SYNC    
 *     ACTION_PTP_DREQ  
 *     CAPT_PTP_DREQ    
 *     ACTION_PTP_PDREQ 
 *     CAPT_PTP_PDREQ   
 *     ACTION_PTP_PDRESP 
 *     CAPT_PTP_PDRESP  
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr (0x0001da08 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_PTP_PKT_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_ptp_pkt_cfg[1];
	uint32_t _ptp_parser_eg_ptp_pkt_cfg;
} BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_t;

#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CLR(r) (r).ptp_parser_eg_ptp_pkt_cfg[0] = 0
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_SET(r,d) (r).ptp_parser_eg_ptp_pkt_cfg[0] = d
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_GET(r) (r).ptp_parser_eg_ptp_pkt_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 15) & 0x1)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 12) & 0x7)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 11) & 0x1)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 8) & 0x7)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 7) & 0x1)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 4) & 0x7)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET(r) ((((r).ptp_parser_eg_ptp_pkt_cfg[0]) >> 3) & 0x1)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET(r) (((r).ptp_parser_eg_ptp_pkt_cfg[0]) & 0x7)
#define BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET(r,f) (r).ptp_parser_eg_ptp_pkt_cfg[0]=(((r).ptp_parser_eg_ptp_pkt_cfg[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PTP_PARSER_EG_PTP_PKT_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_PTP_PKT_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr,(_r._ptp_parser_eg_ptp_pkt_cfg))
#define BCM84834_WRITE_PTP_PARSER_EG_PTP_PKT_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr,(_r._ptp_parser_eg_ptp_pkt_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_PTP_PKT_CFGr BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr
#define PTP_PARSER_EG_PTP_PKT_CFGr_SIZE BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_SIZE
typedef BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_t PTP_PARSER_EG_PTP_PKT_CFGr_t;
#define PTP_PARSER_EG_PTP_PKT_CFGr_CLR BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CLR
#define PTP_PARSER_EG_PTP_PKT_CFGr_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET
#define PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET
#define READ_PTP_PARSER_EG_PTP_PKT_CFGr BCM84834_READ_PTP_PARSER_EG_PTP_PKT_CFGr
#define WRITE_PTP_PARSER_EG_PTP_PKT_CFGr BCM84834_WRITE_PTP_PARSER_EG_PTP_PKT_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_PTP_PKT_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_ALL_PKT_EN
 * BLOCKS:   PTP
 * REGADDR:  0xda20
 * DEVAD:    1
 * DESC:     Egress Parser All Packet CounterEnable Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_EN          
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr (0x0001da20 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_ALL_PKT_EN.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_all_pkt_en[1];
	uint32_t _ptp_parser_eg_cntr_all_pkt_en;
} BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_t;

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CLR(r) (r).ptp_parser_eg_cntr_all_pkt_en[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SET(r,d) (r).ptp_parser_eg_cntr_all_pkt_en[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_GET(r) (r).ptp_parser_eg_cntr_all_pkt_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET(r) (((r).ptp_parser_eg_cntr_all_pkt_en[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET(r,f) (r).ptp_parser_eg_cntr_all_pkt_en[0]=(((r).ptp_parser_eg_cntr_all_pkt_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_ALL_PKT_EN.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr,(_r._ptp_parser_eg_cntr_all_pkt_en))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr,(_r._ptp_parser_eg_cntr_all_pkt_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SIZE BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_t PTP_PARSER_EG_CNTR_ALL_PKT_ENr_t;
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CLR BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CLR
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_SET
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET
#define READ_PTP_PARSER_EG_CNTR_ALL_PKT_ENr BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_ENr
#define WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_ENr BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_ALL_PKT_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xda21
 * DEVAD:    1
 * DESC:     Egress Parser All PacketCounter Clear Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_CLR         
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr (0x0001da21 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_ALL_PKT_CLR.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_all_pkt_clr[1];
	uint32_t _ptp_parser_eg_cntr_all_pkt_clr;
} BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_t;

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CLR(r) (r).ptp_parser_eg_cntr_all_pkt_clr[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SET(r,d) (r).ptp_parser_eg_cntr_all_pkt_clr[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_GET(r) (r).ptp_parser_eg_cntr_all_pkt_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET(r) (((r).ptp_parser_eg_cntr_all_pkt_clr[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET(r,f) (r).ptp_parser_eg_cntr_all_pkt_clr[0]=(((r).ptp_parser_eg_cntr_all_pkt_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_ALL_PKT_CLR.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr,(_r._ptp_parser_eg_cntr_all_pkt_clr))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr,(_r._ptp_parser_eg_cntr_all_pkt_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SIZE BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_t PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_t;
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CLR BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CLR
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_SET
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET
#define READ_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr
#define WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_ALL_PKT_0
 * BLOCKS:   PTP
 * REGADDR:  0xda28
 * DEVAD:    1
 * DESC:     Egress Parser All Packet CounterBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r (0x0001da28 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_ALL_PKT_0.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_all_pkt_0[1];
	uint32_t _ptp_parser_eg_cntr_all_pkt_0;
} BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_t;

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CLR(r) (r).ptp_parser_eg_cntr_all_pkt_0[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_SET(r,d) (r).ptp_parser_eg_cntr_all_pkt_0[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_GET(r) (r).ptp_parser_eg_cntr_all_pkt_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_GET(r) (((r).ptp_parser_eg_cntr_all_pkt_0[0]) & 0xffff)
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_SET(r,f) (r).ptp_parser_eg_cntr_all_pkt_0[0]=(((r).ptp_parser_eg_cntr_all_pkt_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_ALL_PKT_0.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r,(_r._ptp_parser_eg_cntr_all_pkt_0))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r,(_r._ptp_parser_eg_cntr_all_pkt_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_ALL_PKT_0r BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_SIZE BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_t PTP_PARSER_EG_CNTR_ALL_PKT_0r_t;
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_CLR BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CLR
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_SET
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r_CNTRf_SET
#define READ_PTP_PARSER_EG_CNTR_ALL_PKT_0r BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_0r
#define WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_0r BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_ALL_PKT_1
 * BLOCKS:   PTP
 * REGADDR:  0xda29
 * DEVAD:    1
 * DESC:     Egress Parser All Packet CounterBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r (0x0001da29 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_ALL_PKT_1.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_all_pkt_1[1];
	uint32_t _ptp_parser_eg_cntr_all_pkt_1;
} BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_t;

#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CLR(r) (r).ptp_parser_eg_cntr_all_pkt_1[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_SET(r,d) (r).ptp_parser_eg_cntr_all_pkt_1[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_GET(r) (r).ptp_parser_eg_cntr_all_pkt_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_GET(r) (((r).ptp_parser_eg_cntr_all_pkt_1[0]) & 0xffff)
#define BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_SET(r,f) (r).ptp_parser_eg_cntr_all_pkt_1[0]=(((r).ptp_parser_eg_cntr_all_pkt_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_ALL_PKT_1.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r,(_r._ptp_parser_eg_cntr_all_pkt_1))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r,(_r._ptp_parser_eg_cntr_all_pkt_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_ALL_PKT_1r BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_SIZE BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_t PTP_PARSER_EG_CNTR_ALL_PKT_1r_t;
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_CLR BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CLR
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_SET
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_GET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_GET
#define PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_SET BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r_CNTRf_SET
#define READ_PTP_PARSER_EG_CNTR_ALL_PKT_1r BCM84834_READ_PTP_PARSER_EG_CNTR_ALL_PKT_1r
#define WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_1r BCM84834_WRITE_PTP_PARSER_EG_CNTR_ALL_PKT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_ALL_PKT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_PTP_PKT_EN
 * BLOCKS:   PTP
 * REGADDR:  0xda30
 * DEVAD:    1
 * DESC:     Egress Parser PTP PacketCounter Enable Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_EN          
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr (0x0001da30 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_PTP_PKT_EN.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_ptp_pkt_en[1];
	uint32_t _ptp_parser_eg_cntr_ptp_pkt_en;
} BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_t;

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CLR(r) (r).ptp_parser_eg_cntr_ptp_pkt_en[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SET(r,d) (r).ptp_parser_eg_cntr_ptp_pkt_en[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_GET(r) (r).ptp_parser_eg_cntr_ptp_pkt_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET(r) (((r).ptp_parser_eg_cntr_ptp_pkt_en[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET(r,f) (r).ptp_parser_eg_cntr_ptp_pkt_en[0]=(((r).ptp_parser_eg_cntr_ptp_pkt_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_PTP_PKT_EN.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKT_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr,(_r._ptp_parser_eg_cntr_ptp_pkt_en))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr,(_r._ptp_parser_eg_cntr_ptp_pkt_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SIZE BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_t PTP_PARSER_EG_CNTR_PTP_PKT_ENr_t;
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CLR BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CLR
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_SET
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_GET
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET
#define PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET
#define READ_PTP_PARSER_EG_CNTR_PTP_PKT_ENr BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKT_ENr
#define WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_ENr BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_PTP_PKT_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xda31
 * DEVAD:    1
 * DESC:     Egress Parser PTP PacketCounter Clear Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_CLR         
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr (0x0001da31 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_PTP_PKT_CLR.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_ptp_pkt_clr[1];
	uint32_t _ptp_parser_eg_cntr_ptp_pkt_clr;
} BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_t;

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CLR(r) (r).ptp_parser_eg_cntr_ptp_pkt_clr[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SET(r,d) (r).ptp_parser_eg_cntr_ptp_pkt_clr[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_GET(r) (r).ptp_parser_eg_cntr_ptp_pkt_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET(r) (((r).ptp_parser_eg_cntr_ptp_pkt_clr[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET(r,f) (r).ptp_parser_eg_cntr_ptp_pkt_clr[0]=(((r).ptp_parser_eg_cntr_ptp_pkt_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_PTP_PKT_CLR.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr,(_r._ptp_parser_eg_cntr_ptp_pkt_clr))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr,(_r._ptp_parser_eg_cntr_ptp_pkt_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SIZE BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_t PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_t;
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CLR BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CLR
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_SET
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_GET
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET
#define PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET
#define READ_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr
#define WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_PTP_PKT_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_CNTR_PTP_PKT
 * BLOCKS:   PTP
 * REGADDR:  0xda38
 * DEVAD:    1
 * DESC:     Egress Parser PTP Packet CounterRegister
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr (0x0001da38 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_CNTR_PTP_PKT.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_cntr_ptp_pkt[1];
	uint32_t _ptp_parser_eg_cntr_ptp_pkt;
} BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_t;

#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CLR(r) (r).ptp_parser_eg_cntr_ptp_pkt[0] = 0
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_SET(r,d) (r).ptp_parser_eg_cntr_ptp_pkt[0] = d
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_GET(r) (r).ptp_parser_eg_cntr_ptp_pkt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_GET(r) (((r).ptp_parser_eg_cntr_ptp_pkt[0]) & 0xffff)
#define BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_SET(r,f) (r).ptp_parser_eg_cntr_ptp_pkt[0]=(((r).ptp_parser_eg_cntr_ptp_pkt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_EG_CNTR_PTP_PKT.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr,(_r._ptp_parser_eg_cntr_ptp_pkt))
#define BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr,(_r._ptp_parser_eg_cntr_ptp_pkt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_CNTR_PTP_PKTr BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr
#define PTP_PARSER_EG_CNTR_PTP_PKTr_SIZE BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_SIZE
typedef BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_t PTP_PARSER_EG_CNTR_PTP_PKTr_t;
#define PTP_PARSER_EG_CNTR_PTP_PKTr_CLR BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CLR
#define PTP_PARSER_EG_CNTR_PTP_PKTr_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_SET
#define PTP_PARSER_EG_CNTR_PTP_PKTr_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_GET
#define PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_GET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_GET
#define PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_SET BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr_CNTRf_SET
#define READ_PTP_PARSER_EG_CNTR_PTP_PKTr BCM84834_READ_PTP_PARSER_EG_CNTR_PTP_PKTr
#define WRITE_PTP_PARSER_EG_CNTR_PTP_PKTr BCM84834_WRITE_PTP_PARSER_EG_CNTR_PTP_PKTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_CNTR_PTP_PKTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_EG_DEBUG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xda40
 * DEVAD:    1
 * DESC:     Egress Parser Debug ConfigurationRegister
 * SIZE:     32
 * FIELDS:
 *     CF_DIS           
 *     CF_SUB_TS        
 *     CF_SAT           
 *     CS_FORCE_ZERO    
 *     CS_DIS           
 *     PTP_EVENT_CHK    
 *     FCS_KEEP         
 *     PTP_VER_CHK_DIS  
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr (0x0001da40 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_EG_DEBUG_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_EG_DEBUG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_eg_debug_cfg[1];
	uint32_t _ptp_parser_eg_debug_cfg;
} BCM84834_PTP_PARSER_EG_DEBUG_CFGr_t;

#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CLR(r) (r).ptp_parser_eg_debug_cfg[0] = 0
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_SET(r,d) (r).ptp_parser_eg_debug_cfg[0] = d
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_GET(r) (r).ptp_parser_eg_debug_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 7) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 6) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 5) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 4) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 3) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 2) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_GET(r) ((((r).ptp_parser_eg_debug_cfg[0]) >> 1) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_GET(r) (((r).ptp_parser_eg_debug_cfg[0]) & 0x1)
#define BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_SET(r,f) (r).ptp_parser_eg_debug_cfg[0]=(((r).ptp_parser_eg_debug_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_EG_DEBUG_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_EG_DEBUG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_EG_DEBUG_CFGr,(_r._ptp_parser_eg_debug_cfg))
#define BCM84834_WRITE_PTP_PARSER_EG_DEBUG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_EG_DEBUG_CFGr,(_r._ptp_parser_eg_debug_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_EG_DEBUG_CFGr BCM84834_PTP_PARSER_EG_DEBUG_CFGr
#define PTP_PARSER_EG_DEBUG_CFGr_SIZE BCM84834_PTP_PARSER_EG_DEBUG_CFGr_SIZE
typedef BCM84834_PTP_PARSER_EG_DEBUG_CFGr_t PTP_PARSER_EG_DEBUG_CFGr_t;
#define PTP_PARSER_EG_DEBUG_CFGr_CLR BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CLR
#define PTP_PARSER_EG_DEBUG_CFGr_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_SET
#define PTP_PARSER_EG_DEBUG_CFGr_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_GET
#define PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_FCS_KEEPf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_PTP_EVENT_CHKf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_DISf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CS_FORCE_ZEROf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SATf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_SUB_TSf_SET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_GET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_GET
#define PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_SET BCM84834_PTP_PARSER_EG_DEBUG_CFGr_CF_DISf_SET
#define READ_PTP_PARSER_EG_DEBUG_CFGr BCM84834_READ_PTP_PARSER_EG_DEBUG_CFGr
#define WRITE_PTP_PARSER_EG_DEBUG_CFGr BCM84834_WRITE_PTP_PARSER_EG_DEBUG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_EG_DEBUG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xda81
 * DEVAD:    1
 * DESC:     Ingress Parser Configuration Register
 * SIZE:     32
 * FIELDS:
 *     FCS_CHK_EN       
 *     L2_EN            
 *     L4_IPV4_UDP_EN   
 *     L4_IPV6_UDP_EN   
 *     L2_ADDR_EN       
 *     L4_IPV4_UDP_ADDR_EN 
 *     L4_IPV4_ADDR_CHK_0 
 *     L4_IPV4_ADDR_CHK_1 
 *     L4_IPV4_ADDR_CHK_2 
 *     L4_IPV6_UDP_ADDR_EN 
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CFGr (0x0001da81 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cfg[1];
	uint32_t _ptp_parser_ig_cfg;
} BCM84834_PTP_PARSER_IG_CFGr_t;

#define BCM84834_PTP_PARSER_IG_CFGr_CLR(r) (r).ptp_parser_ig_cfg[0] = 0
#define BCM84834_PTP_PARSER_IG_CFGr_SET(r,d) (r).ptp_parser_ig_cfg[0] = d
#define BCM84834_PTP_PARSER_IG_CFGr_GET(r) (r).ptp_parser_ig_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 13) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 12) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 11) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 10) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 9) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PTP_PARSER_IG_CFGr_L2_ADDR_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 8) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L2_ADDR_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 6) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 5) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_PARSER_IG_CFGr_L2_ENf_GET(r) ((((r).ptp_parser_ig_cfg[0]) >> 4) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_L2_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_PARSER_IG_CFGr_FCS_CHK_ENf_GET(r) (((r).ptp_parser_ig_cfg[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_CFGr_FCS_CHK_ENf_SET(r,f) (r).ptp_parser_ig_cfg[0]=(((r).ptp_parser_ig_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CFGr,(_r._ptp_parser_ig_cfg))
#define BCM84834_WRITE_PTP_PARSER_IG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CFGr,(_r._ptp_parser_ig_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CFGr BCM84834_PTP_PARSER_IG_CFGr
#define PTP_PARSER_IG_CFGr_SIZE BCM84834_PTP_PARSER_IG_CFGr_SIZE
typedef BCM84834_PTP_PARSER_IG_CFGr_t PTP_PARSER_IG_CFGr_t;
#define PTP_PARSER_IG_CFGr_CLR BCM84834_PTP_PARSER_IG_CFGr_CLR
#define PTP_PARSER_IG_CFGr_SET BCM84834_PTP_PARSER_IG_CFGr_SET
#define PTP_PARSER_IG_CFGr_GET BCM84834_PTP_PARSER_IG_CFGr_GET
#define PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_GET
#define PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ADDR_ENf_SET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_GET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_2f_SET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_GET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_1f_SET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_GET
#define PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_ADDR_CHK_0f_SET
#define PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_GET
#define PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ADDR_ENf_SET
#define PTP_PARSER_IG_CFGr_L2_ADDR_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L2_ADDR_ENf_GET
#define PTP_PARSER_IG_CFGr_L2_ADDR_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L2_ADDR_ENf_SET
#define PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_GET
#define PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV6_UDP_ENf_SET
#define PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_GET
#define PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L4_IPV4_UDP_ENf_SET
#define PTP_PARSER_IG_CFGr_L2_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_L2_ENf_GET
#define PTP_PARSER_IG_CFGr_L2_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_L2_ENf_SET
#define PTP_PARSER_IG_CFGr_FCS_CHK_ENf_GET BCM84834_PTP_PARSER_IG_CFGr_FCS_CHK_ENf_GET
#define PTP_PARSER_IG_CFGr_FCS_CHK_ENf_SET BCM84834_PTP_PARSER_IG_CFGr_FCS_CHK_ENf_SET
#define READ_PTP_PARSER_IG_CFGr BCM84834_READ_PTP_PARSER_IG_CFGr
#define WRITE_PTP_PARSER_IG_CFGr BCM84834_WRITE_PTP_PARSER_IG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_PTP_PKT_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xda88
 * DEVAD:    1
 * DESC:     Ingress Parser PTP PacketConfiguration Register
 * SIZE:     32
 * FIELDS:
 *     ACTION_PTP_SYNC  
 *     CAPT_PTP_SYNC    
 *     ACTION_PTP_DREQ  
 *     CAPT_PTP_DREQ    
 *     ACTION_PTP_PDREQ 
 *     CAPT_PTP_PDREQ   
 *     ACTION_PTP_PDRESP 
 *     CAPT_PTP_PDRESP  
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr (0x0001da88 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_PTP_PKT_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_ptp_pkt_cfg[1];
	uint32_t _ptp_parser_ig_ptp_pkt_cfg;
} BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_t;

#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CLR(r) (r).ptp_parser_ig_ptp_pkt_cfg[0] = 0
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_SET(r,d) (r).ptp_parser_ig_ptp_pkt_cfg[0] = d
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_GET(r) (r).ptp_parser_ig_ptp_pkt_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 15) & 0x1)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 12) & 0x7)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 11) & 0x1)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 8) & 0x7)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 7) & 0x1)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 4) & 0x7)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET(r) ((((r).ptp_parser_ig_ptp_pkt_cfg[0]) >> 3) & 0x1)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET(r) (((r).ptp_parser_ig_ptp_pkt_cfg[0]) & 0x7)
#define BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET(r,f) (r).ptp_parser_ig_ptp_pkt_cfg[0]=(((r).ptp_parser_ig_ptp_pkt_cfg[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PTP_PARSER_IG_PTP_PKT_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_PTP_PKT_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr,(_r._ptp_parser_ig_ptp_pkt_cfg))
#define BCM84834_WRITE_PTP_PARSER_IG_PTP_PKT_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr,(_r._ptp_parser_ig_ptp_pkt_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_PTP_PKT_CFGr BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr
#define PTP_PARSER_IG_PTP_PKT_CFGr_SIZE BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_SIZE
typedef BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_t PTP_PARSER_IG_PTP_PKT_CFGr_t;
#define PTP_PARSER_IG_PTP_PKT_CFGr_CLR BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CLR
#define PTP_PARSER_IG_PTP_PKT_CFGr_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDRESPf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDRESPf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_PDREQf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_PDREQf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_DREQf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_DREQf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_CAPT_PTP_SYNCf_SET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_GET
#define PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr_ACTION_PTP_SYNCf_SET
#define READ_PTP_PARSER_IG_PTP_PKT_CFGr BCM84834_READ_PTP_PARSER_IG_PTP_PKT_CFGr
#define WRITE_PTP_PARSER_IG_PTP_PKT_CFGr BCM84834_WRITE_PTP_PARSER_IG_PTP_PKT_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_PTP_PKT_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_ALL_PKT_EN
 * BLOCKS:   PTP
 * REGADDR:  0xdaa0
 * DEVAD:    1
 * DESC:     Ingress Parser All Packet CounterEnable Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_EN          
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr (0x0001daa0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_ALL_PKT_EN.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_all_pkt_en[1];
	uint32_t _ptp_parser_ig_cntr_all_pkt_en;
} BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_t;

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CLR(r) (r).ptp_parser_ig_cntr_all_pkt_en[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SET(r,d) (r).ptp_parser_ig_cntr_all_pkt_en[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_GET(r) (r).ptp_parser_ig_cntr_all_pkt_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET(r) (((r).ptp_parser_ig_cntr_all_pkt_en[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET(r,f) (r).ptp_parser_ig_cntr_all_pkt_en[0]=(((r).ptp_parser_ig_cntr_all_pkt_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_ALL_PKT_EN.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr,(_r._ptp_parser_ig_cntr_all_pkt_en))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr,(_r._ptp_parser_ig_cntr_all_pkt_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SIZE BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_t PTP_PARSER_IG_CNTR_ALL_PKT_ENr_t;
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CLR BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CLR
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_SET
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr_CNTR_ENf_SET
#define READ_PTP_PARSER_IG_CNTR_ALL_PKT_ENr BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_ENr
#define WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_ENr BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_ALL_PKT_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xdaa1
 * DEVAD:    1
 * DESC:     Ingress Parser All PacketCounter Clear Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_CLR         
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr (0x0001daa1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_ALL_PKT_CLR.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_all_pkt_clr[1];
	uint32_t _ptp_parser_ig_cntr_all_pkt_clr;
} BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_t;

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CLR(r) (r).ptp_parser_ig_cntr_all_pkt_clr[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SET(r,d) (r).ptp_parser_ig_cntr_all_pkt_clr[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_GET(r) (r).ptp_parser_ig_cntr_all_pkt_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET(r) (((r).ptp_parser_ig_cntr_all_pkt_clr[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET(r,f) (r).ptp_parser_ig_cntr_all_pkt_clr[0]=(((r).ptp_parser_ig_cntr_all_pkt_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_ALL_PKT_CLR.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr,(_r._ptp_parser_ig_cntr_all_pkt_clr))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr,(_r._ptp_parser_ig_cntr_all_pkt_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SIZE BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_t PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_t;
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CLR BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CLR
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_SET
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr_CNTR_CLRf_SET
#define READ_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr
#define WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_ALL_PKT_0
 * BLOCKS:   PTP
 * REGADDR:  0xdaa8
 * DEVAD:    1
 * DESC:     Ingress Parser All Packet CounterBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r (0x0001daa8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_ALL_PKT_0.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_all_pkt_0[1];
	uint32_t _ptp_parser_ig_cntr_all_pkt_0;
} BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_t;

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CLR(r) (r).ptp_parser_ig_cntr_all_pkt_0[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_SET(r,d) (r).ptp_parser_ig_cntr_all_pkt_0[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_GET(r) (r).ptp_parser_ig_cntr_all_pkt_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_GET(r) (((r).ptp_parser_ig_cntr_all_pkt_0[0]) & 0xffff)
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_SET(r,f) (r).ptp_parser_ig_cntr_all_pkt_0[0]=(((r).ptp_parser_ig_cntr_all_pkt_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_ALL_PKT_0.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r,(_r._ptp_parser_ig_cntr_all_pkt_0))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r,(_r._ptp_parser_ig_cntr_all_pkt_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_ALL_PKT_0r BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_SIZE BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_t PTP_PARSER_IG_CNTR_ALL_PKT_0r_t;
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_CLR BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CLR
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_SET
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r_CNTRf_SET
#define READ_PTP_PARSER_IG_CNTR_ALL_PKT_0r BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_0r
#define WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_0r BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_ALL_PKT_1
 * BLOCKS:   PTP
 * REGADDR:  0xdaa9
 * DEVAD:    1
 * DESC:     Ingress Parser All Packet CounterBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r (0x0001daa9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_ALL_PKT_1.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_all_pkt_1[1];
	uint32_t _ptp_parser_ig_cntr_all_pkt_1;
} BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_t;

#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CLR(r) (r).ptp_parser_ig_cntr_all_pkt_1[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_SET(r,d) (r).ptp_parser_ig_cntr_all_pkt_1[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_GET(r) (r).ptp_parser_ig_cntr_all_pkt_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_GET(r) (((r).ptp_parser_ig_cntr_all_pkt_1[0]) & 0xffff)
#define BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_SET(r,f) (r).ptp_parser_ig_cntr_all_pkt_1[0]=(((r).ptp_parser_ig_cntr_all_pkt_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_ALL_PKT_1.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r,(_r._ptp_parser_ig_cntr_all_pkt_1))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r,(_r._ptp_parser_ig_cntr_all_pkt_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_ALL_PKT_1r BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_SIZE BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_t PTP_PARSER_IG_CNTR_ALL_PKT_1r_t;
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_CLR BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CLR
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_SET
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_GET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_GET
#define PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_SET BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r_CNTRf_SET
#define READ_PTP_PARSER_IG_CNTR_ALL_PKT_1r BCM84834_READ_PTP_PARSER_IG_CNTR_ALL_PKT_1r
#define WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_1r BCM84834_WRITE_PTP_PARSER_IG_CNTR_ALL_PKT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_ALL_PKT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_PTP_PKT_EN
 * BLOCKS:   PTP
 * REGADDR:  0xdab0
 * DEVAD:    1
 * DESC:     Ingress Parser PTP PacketCounter Enable Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_EN          
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr (0x0001dab0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_PTP_PKT_EN.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_ptp_pkt_en[1];
	uint32_t _ptp_parser_ig_cntr_ptp_pkt_en;
} BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_t;

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CLR(r) (r).ptp_parser_ig_cntr_ptp_pkt_en[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SET(r,d) (r).ptp_parser_ig_cntr_ptp_pkt_en[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_GET(r) (r).ptp_parser_ig_cntr_ptp_pkt_en[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET(r) (((r).ptp_parser_ig_cntr_ptp_pkt_en[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET(r,f) (r).ptp_parser_ig_cntr_ptp_pkt_en[0]=(((r).ptp_parser_ig_cntr_ptp_pkt_en[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_PTP_PKT_EN.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKT_ENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr,(_r._ptp_parser_ig_cntr_ptp_pkt_en))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_ENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr,(_r._ptp_parser_ig_cntr_ptp_pkt_en))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SIZE BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_t PTP_PARSER_IG_CNTR_PTP_PKT_ENr_t;
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CLR BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CLR
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_SET
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_GET
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_GET
#define PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr_CNTR_ENf_SET
#define READ_PTP_PARSER_IG_CNTR_PTP_PKT_ENr BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKT_ENr
#define WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_ENr BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_ENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_ENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_PTP_PKT_CLR
 * BLOCKS:   PTP
 * REGADDR:  0xdab1
 * DEVAD:    1
 * DESC:     Ingress Parser PTP PacketCounter Clear Register
 * SIZE:     32
 * FIELDS:
 *     CNTR_CLR         
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr (0x0001dab1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_PTP_PKT_CLR.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_ptp_pkt_clr[1];
	uint32_t _ptp_parser_ig_cntr_ptp_pkt_clr;
} BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_t;

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CLR(r) (r).ptp_parser_ig_cntr_ptp_pkt_clr[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SET(r,d) (r).ptp_parser_ig_cntr_ptp_pkt_clr[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_GET(r) (r).ptp_parser_ig_cntr_ptp_pkt_clr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET(r) (((r).ptp_parser_ig_cntr_ptp_pkt_clr[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET(r,f) (r).ptp_parser_ig_cntr_ptp_pkt_clr[0]=(((r).ptp_parser_ig_cntr_ptp_pkt_clr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_PTP_PKT_CLR.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr,(_r._ptp_parser_ig_cntr_ptp_pkt_clr))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr,(_r._ptp_parser_ig_cntr_ptp_pkt_clr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SIZE BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_t PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_t;
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CLR BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CLR
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_SET
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_GET
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_GET
#define PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr_CNTR_CLRf_SET
#define READ_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr
#define WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_PTP_PKT_CLRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_CNTR_PTP_PKT
 * BLOCKS:   PTP
 * REGADDR:  0xdab8
 * DEVAD:    1
 * DESC:     Ingress Parser PTP Packet CounterRegister
 * SIZE:     32
 * FIELDS:
 *     CNTR             
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr (0x0001dab8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_CNTR_PTP_PKT.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_cntr_ptp_pkt[1];
	uint32_t _ptp_parser_ig_cntr_ptp_pkt;
} BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_t;

#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CLR(r) (r).ptp_parser_ig_cntr_ptp_pkt[0] = 0
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_SET(r,d) (r).ptp_parser_ig_cntr_ptp_pkt[0] = d
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_GET(r) (r).ptp_parser_ig_cntr_ptp_pkt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_GET(r) (((r).ptp_parser_ig_cntr_ptp_pkt[0]) & 0xffff)
#define BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_SET(r,f) (r).ptp_parser_ig_cntr_ptp_pkt[0]=(((r).ptp_parser_ig_cntr_ptp_pkt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PARSER_IG_CNTR_PTP_PKT.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr,(_r._ptp_parser_ig_cntr_ptp_pkt))
#define BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr,(_r._ptp_parser_ig_cntr_ptp_pkt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_CNTR_PTP_PKTr BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr
#define PTP_PARSER_IG_CNTR_PTP_PKTr_SIZE BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_SIZE
typedef BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_t PTP_PARSER_IG_CNTR_PTP_PKTr_t;
#define PTP_PARSER_IG_CNTR_PTP_PKTr_CLR BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CLR
#define PTP_PARSER_IG_CNTR_PTP_PKTr_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_SET
#define PTP_PARSER_IG_CNTR_PTP_PKTr_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_GET
#define PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_GET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_GET
#define PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_SET BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr_CNTRf_SET
#define READ_PTP_PARSER_IG_CNTR_PTP_PKTr BCM84834_READ_PTP_PARSER_IG_CNTR_PTP_PKTr
#define WRITE_PTP_PARSER_IG_CNTR_PTP_PKTr BCM84834_WRITE_PTP_PARSER_IG_CNTR_PTP_PKTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_CNTR_PTP_PKTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PARSER_IG_DEBUG_CFG
 * BLOCKS:   PTP
 * REGADDR:  0xdac0
 * DEVAD:    1
 * DESC:     Ingress Parser Debug ConfigurationRegister
 * SIZE:     32
 * FIELDS:
 *     CF_DIS           
 *     CF_SUB_TS        
 *     CF_SAT           
 *     CS_FORCE_ZERO    
 *     CS_DIS           
 *     PTP_EVENT_CHK    
 *     FCS_KEEP         
 *     PTP_VER_CHK_DIS  
 *
 ******************************************************************************/
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr (0x0001dac0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PARSER_IG_DEBUG_CFG.
 *
 */
typedef union BCM84834_PTP_PARSER_IG_DEBUG_CFGr_s {
	uint32_t v[1];
	uint32_t ptp_parser_ig_debug_cfg[1];
	uint32_t _ptp_parser_ig_debug_cfg;
} BCM84834_PTP_PARSER_IG_DEBUG_CFGr_t;

#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CLR(r) (r).ptp_parser_ig_debug_cfg[0] = 0
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_SET(r,d) (r).ptp_parser_ig_debug_cfg[0] = d
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_GET(r) (r).ptp_parser_ig_debug_cfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 7) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 6) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 5) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 4) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 3) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 2) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_GET(r) ((((r).ptp_parser_ig_debug_cfg[0]) >> 1) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_GET(r) (((r).ptp_parser_ig_debug_cfg[0]) & 0x1)
#define BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_SET(r,f) (r).ptp_parser_ig_debug_cfg[0]=(((r).ptp_parser_ig_debug_cfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PARSER_IG_DEBUG_CFG.
 *
 */
#define BCM84834_READ_PTP_PARSER_IG_DEBUG_CFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PARSER_IG_DEBUG_CFGr,(_r._ptp_parser_ig_debug_cfg))
#define BCM84834_WRITE_PTP_PARSER_IG_DEBUG_CFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PARSER_IG_DEBUG_CFGr,(_r._ptp_parser_ig_debug_cfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PARSER_IG_DEBUG_CFGr BCM84834_PTP_PARSER_IG_DEBUG_CFGr
#define PTP_PARSER_IG_DEBUG_CFGr_SIZE BCM84834_PTP_PARSER_IG_DEBUG_CFGr_SIZE
typedef BCM84834_PTP_PARSER_IG_DEBUG_CFGr_t PTP_PARSER_IG_DEBUG_CFGr_t;
#define PTP_PARSER_IG_DEBUG_CFGr_CLR BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CLR
#define PTP_PARSER_IG_DEBUG_CFGr_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_SET
#define PTP_PARSER_IG_DEBUG_CFGr_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_GET
#define PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_VER_CHK_DISf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_FCS_KEEPf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_PTP_EVENT_CHKf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_DISf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CS_FORCE_ZEROf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SATf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_SUB_TSf_SET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_GET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_GET
#define PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_SET BCM84834_PTP_PARSER_IG_DEBUG_CFGr_CF_DISf_SET
#define READ_PTP_PARSER_IG_DEBUG_CFGr BCM84834_READ_PTP_PARSER_IG_DEBUG_CFGr
#define WRITE_PTP_PARSER_IG_DEBUG_CFGr BCM84834_WRITE_PTP_PARSER_IG_DEBUG_CFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PARSER_IG_DEBUG_CFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_CTL
 * BLOCKS:   PTP
 * REGADDR:  0xdb08
 * DEVAD:    1
 * DESC:     PIC FIFO Control Register
 * SIZE:     32
 * FIELDS:
 *     PIC_FIFO_NEXT    
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_CTLr (0x0001db08 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_CTLr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_CTL.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_CTLr_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_ctl[1];
	uint32_t _ptp_pic_fifo_ctl;
} BCM84834_PTP_PIC_FIFO_CTLr_t;

#define BCM84834_PTP_PIC_FIFO_CTLr_CLR(r) (r).ptp_pic_fifo_ctl[0] = 0
#define BCM84834_PTP_PIC_FIFO_CTLr_SET(r,d) (r).ptp_pic_fifo_ctl[0] = d
#define BCM84834_PTP_PIC_FIFO_CTLr_GET(r) (r).ptp_pic_fifo_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_GET(r) (((r).ptp_pic_fifo_ctl[0]) & 0x1)
#define BCM84834_PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_SET(r,f) (r).ptp_pic_fifo_ctl[0]=(((r).ptp_pic_fifo_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PIC_FIFO_CTL.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_CTLr,(_r._ptp_pic_fifo_ctl))
#define BCM84834_WRITE_PTP_PIC_FIFO_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_CTLr,(_r._ptp_pic_fifo_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_CTLr BCM84834_PTP_PIC_FIFO_CTLr
#define PTP_PIC_FIFO_CTLr_SIZE BCM84834_PTP_PIC_FIFO_CTLr_SIZE
typedef BCM84834_PTP_PIC_FIFO_CTLr_t PTP_PIC_FIFO_CTLr_t;
#define PTP_PIC_FIFO_CTLr_CLR BCM84834_PTP_PIC_FIFO_CTLr_CLR
#define PTP_PIC_FIFO_CTLr_SET BCM84834_PTP_PIC_FIFO_CTLr_SET
#define PTP_PIC_FIFO_CTLr_GET BCM84834_PTP_PIC_FIFO_CTLr_GET
#define PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_GET BCM84834_PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_GET
#define PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_SET BCM84834_PTP_PIC_FIFO_CTLr_PIC_FIFO_NEXTf_SET
#define READ_PTP_PIC_FIFO_CTLr BCM84834_READ_PTP_PIC_FIFO_CTLr
#define WRITE_PTP_PIC_FIFO_CTLr BCM84834_WRITE_PTP_PIC_FIFO_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_STAT
 * BLOCKS:   PTP
 * REGADDR:  0xdb09
 * DEVAD:    1
 * DESC:     PIC FIFO Status Register
 * SIZE:     32
 * FIELDS:
 *     PIC_FIFO_OVERFLOW 
 *     PIC_FIFO_UNDERFLOW 
 *     PIC_FIFO_COUNT   
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_STATr (0x0001db09 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_STATr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_STAT.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_STATr_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_stat[1];
	uint32_t _ptp_pic_fifo_stat;
} BCM84834_PTP_PIC_FIFO_STATr_t;

#define BCM84834_PTP_PIC_FIFO_STATr_CLR(r) (r).ptp_pic_fifo_stat[0] = 0
#define BCM84834_PTP_PIC_FIFO_STATr_SET(r,d) (r).ptp_pic_fifo_stat[0] = d
#define BCM84834_PTP_PIC_FIFO_STATr_GET(r) (r).ptp_pic_fifo_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_GET(r) ((((r).ptp_pic_fifo_stat[0]) >> 8) & 0xff)
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_SET(r,f) (r).ptp_pic_fifo_stat[0]=(((r).ptp_pic_fifo_stat[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_GET(r) ((((r).ptp_pic_fifo_stat[0]) >> 1) & 0x1)
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_SET(r,f) (r).ptp_pic_fifo_stat[0]=(((r).ptp_pic_fifo_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_GET(r) (((r).ptp_pic_fifo_stat[0]) & 0x1)
#define BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_SET(r,f) (r).ptp_pic_fifo_stat[0]=(((r).ptp_pic_fifo_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PIC_FIFO_STAT.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_STATr,(_r._ptp_pic_fifo_stat))
#define BCM84834_WRITE_PTP_PIC_FIFO_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_STATr,(_r._ptp_pic_fifo_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_STATr BCM84834_PTP_PIC_FIFO_STATr
#define PTP_PIC_FIFO_STATr_SIZE BCM84834_PTP_PIC_FIFO_STATr_SIZE
typedef BCM84834_PTP_PIC_FIFO_STATr_t PTP_PIC_FIFO_STATr_t;
#define PTP_PIC_FIFO_STATr_CLR BCM84834_PTP_PIC_FIFO_STATr_CLR
#define PTP_PIC_FIFO_STATr_SET BCM84834_PTP_PIC_FIFO_STATr_SET
#define PTP_PIC_FIFO_STATr_GET BCM84834_PTP_PIC_FIFO_STATr_GET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_GET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_GET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_SET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_COUNTf_SET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_GET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_GET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_SET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_UNDERFLOWf_SET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_GET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_GET
#define PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_SET BCM84834_PTP_PIC_FIFO_STATr_PIC_FIFO_OVERFLOWf_SET
#define READ_PTP_PIC_FIFO_STATr BCM84834_READ_PTP_PIC_FIFO_STATr
#define WRITE_PTP_PIC_FIFO_STATr BCM84834_WRITE_PTP_PIC_FIFO_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0
 * BLOCKS:   PTP
 * REGADDR:  0xdb10
 * DEVAD:    1
 * DESC:     PIC FIFO Read Packet TimestampBits [15:0] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP        
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r (0x0001db10 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_rd_pkt_timestamp_0[1];
	uint32_t _ptp_pic_fifo_rd_pkt_timestamp_0;
} BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_t;

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_CLR(r) (r).ptp_pic_fifo_rd_pkt_timestamp_0[0] = 0
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SET(r,d) (r).ptp_pic_fifo_rd_pkt_timestamp_0[0] = d
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_GET(r) (r).ptp_pic_fifo_rd_pkt_timestamp_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_GET(r) (((r).ptp_pic_fifo_rd_pkt_timestamp_0[0]) & 0xffff)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_timestamp_0[0]=(((r).ptp_pic_fifo_rd_pkt_timestamp_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r,(_r._ptp_pic_fifo_rd_pkt_timestamp_0))
#define BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r,(_r._ptp_pic_fifo_rd_pkt_timestamp_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SIZE BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SIZE
typedef BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_t PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_t;
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_CLR BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_CLR
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_SET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r_TIMESTAMPf_SET
#define READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r
#define WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1
 * BLOCKS:   PTP
 * REGADDR:  0xdb11
 * DEVAD:    1
 * DESC:     PIC FIFO Read Packet TimestampBits [31:16] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP        
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r (0x0001db11 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_rd_pkt_timestamp_1[1];
	uint32_t _ptp_pic_fifo_rd_pkt_timestamp_1;
} BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_t;

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_CLR(r) (r).ptp_pic_fifo_rd_pkt_timestamp_1[0] = 0
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SET(r,d) (r).ptp_pic_fifo_rd_pkt_timestamp_1[0] = d
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_GET(r) (r).ptp_pic_fifo_rd_pkt_timestamp_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_GET(r) (((r).ptp_pic_fifo_rd_pkt_timestamp_1[0]) & 0xffff)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_timestamp_1[0]=(((r).ptp_pic_fifo_rd_pkt_timestamp_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r,(_r._ptp_pic_fifo_rd_pkt_timestamp_1))
#define BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r,(_r._ptp_pic_fifo_rd_pkt_timestamp_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SIZE BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SIZE
typedef BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_t PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_t;
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_CLR BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_CLR
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_SET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r_TIMESTAMPf_SET
#define READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r
#define WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2
 * BLOCKS:   PTP
 * REGADDR:  0xdb12
 * DEVAD:    1
 * DESC:     PIC FIFO Read Packet TimestampBits [47:32] Register
 * SIZE:     32
 * FIELDS:
 *     TIMESTAMP        
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r (0x0001db12 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_rd_pkt_timestamp_2[1];
	uint32_t _ptp_pic_fifo_rd_pkt_timestamp_2;
} BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_t;

#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_CLR(r) (r).ptp_pic_fifo_rd_pkt_timestamp_2[0] = 0
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SET(r,d) (r).ptp_pic_fifo_rd_pkt_timestamp_2[0] = d
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_GET(r) (r).ptp_pic_fifo_rd_pkt_timestamp_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_GET(r) (((r).ptp_pic_fifo_rd_pkt_timestamp_2[0]) & 0xffff)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_timestamp_2[0]=(((r).ptp_pic_fifo_rd_pkt_timestamp_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r,(_r._ptp_pic_fifo_rd_pkt_timestamp_2))
#define BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r,(_r._ptp_pic_fifo_rd_pkt_timestamp_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SIZE BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SIZE
typedef BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_t PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_t;
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_CLR BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_CLR
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_SET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_GET
#define PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r_TIMESTAMPf_SET
#define READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r BCM84834_READ_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r
#define WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_RD_PKT_TIMESTAMP_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_RD_PKT_SEQ_ID
 * BLOCKS:   PTP
 * REGADDR:  0xdb13
 * DEVAD:    1
 * DESC:     PIC FIFO Read Packet Sequence IDRegister
 * SIZE:     32
 * FIELDS:
 *     SEQ_ID           
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr (0x0001db13 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_RD_PKT_SEQ_ID.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_rd_pkt_seq_id[1];
	uint32_t _ptp_pic_fifo_rd_pkt_seq_id;
} BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_t;

#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_CLR(r) (r).ptp_pic_fifo_rd_pkt_seq_id[0] = 0
#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SET(r,d) (r).ptp_pic_fifo_rd_pkt_seq_id[0] = d
#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_GET(r) (r).ptp_pic_fifo_rd_pkt_seq_id[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_GET(r) (((r).ptp_pic_fifo_rd_pkt_seq_id[0]) & 0xffff)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_seq_id[0]=(((r).ptp_pic_fifo_rd_pkt_seq_id[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_PIC_FIFO_RD_PKT_SEQ_ID.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_RD_PKT_SEQ_IDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr,(_r._ptp_pic_fifo_rd_pkt_seq_id))
#define BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_SEQ_IDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr,(_r._ptp_pic_fifo_rd_pkt_seq_id))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SIZE BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SIZE
typedef BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_t PTP_PIC_FIFO_RD_PKT_SEQ_IDr_t;
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_CLR BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_CLR
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SET BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SET
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_GET BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_GET
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_GET
#define PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr_SEQ_IDf_SET
#define READ_PTP_PIC_FIFO_RD_PKT_SEQ_IDr BCM84834_READ_PTP_PIC_FIFO_RD_PKT_SEQ_IDr
#define WRITE_PTP_PIC_FIFO_RD_PKT_SEQ_IDr BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_SEQ_IDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_RD_PKT_SEQ_IDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_PIC_FIFO_RD_PKT_INFO
 * BLOCKS:   PTP
 * REGADDR:  0xdb14
 * DEVAD:    1
 * DESC:     PIC FIFO Read Packet Information Register
 * SIZE:     32
 * FIELDS:
 *     DIRECTION        
 *     PORT_NUM         
 *     TYPE             
 *     MSG_TYPE         
 *
 ******************************************************************************/
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr (0x0001db14 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_SIZE 4

/*
 * This structure should be used to declare and program PTP_PIC_FIFO_RD_PKT_INFO.
 *
 */
typedef union BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_s {
	uint32_t v[1];
	uint32_t ptp_pic_fifo_rd_pkt_info[1];
	uint32_t _ptp_pic_fifo_rd_pkt_info;
} BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_t;

#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_CLR(r) (r).ptp_pic_fifo_rd_pkt_info[0] = 0
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_SET(r,d) (r).ptp_pic_fifo_rd_pkt_info[0] = d
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_GET(r) (r).ptp_pic_fifo_rd_pkt_info[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_GET(r) ((((r).ptp_pic_fifo_rd_pkt_info[0]) >> 12) & 0xf)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_info[0]=(((r).ptp_pic_fifo_rd_pkt_info[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_GET(r) ((((r).ptp_pic_fifo_rd_pkt_info[0]) >> 8) & 0xf)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_info[0]=(((r).ptp_pic_fifo_rd_pkt_info[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_GET(r) ((((r).ptp_pic_fifo_rd_pkt_info[0]) >> 4) & 0xf)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_info[0]=(((r).ptp_pic_fifo_rd_pkt_info[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_GET(r) (((r).ptp_pic_fifo_rd_pkt_info[0]) & 0x1)
#define BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_SET(r,f) (r).ptp_pic_fifo_rd_pkt_info[0]=(((r).ptp_pic_fifo_rd_pkt_info[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PTP_PIC_FIFO_RD_PKT_INFO.
 *
 */
#define BCM84834_READ_PTP_PIC_FIFO_RD_PKT_INFOr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr,(_r._ptp_pic_fifo_rd_pkt_info))
#define BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_INFOr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr,(_r._ptp_pic_fifo_rd_pkt_info))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_PIC_FIFO_RD_PKT_INFOr BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr
#define PTP_PIC_FIFO_RD_PKT_INFOr_SIZE BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_SIZE
typedef BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_t PTP_PIC_FIFO_RD_PKT_INFOr_t;
#define PTP_PIC_FIFO_RD_PKT_INFOr_CLR BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_CLR
#define PTP_PIC_FIFO_RD_PKT_INFOr_SET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_SET
#define PTP_PIC_FIFO_RD_PKT_INFOr_GET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_GET
#define PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_GET
#define PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_MSG_TYPEf_SET
#define PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_GET
#define PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_TYPEf_SET
#define PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_GET
#define PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_PORT_NUMf_SET
#define PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_GET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_GET
#define PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_SET BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr_DIRECTIONf_SET
#define READ_PTP_PIC_FIFO_RD_PKT_INFOr BCM84834_READ_PTP_PIC_FIFO_RD_PKT_INFOr
#define WRITE_PTP_PIC_FIFO_RD_PKT_INFOr BCM84834_WRITE_PTP_PIC_FIFO_RD_PKT_INFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_PIC_FIFO_RD_PKT_INFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PTP_SCRATCH
 * BLOCKS:   PTP
 * REGADDR:  0xdfff
 * DEVAD:    1
 * DESC:     Scratch Register
 * SIZE:     32
 * FIELDS:
 *     SCRATCH_REG      
 *
 ******************************************************************************/
#define BCM84834_PTP_SCRATCHr (0x0001dfff | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PTP_SCRATCHr_SIZE 4

/*
 * This structure should be used to declare and program PTP_SCRATCH.
 *
 */
typedef union BCM84834_PTP_SCRATCHr_s {
	uint32_t v[1];
	uint32_t ptp_scratch[1];
	uint32_t _ptp_scratch;
} BCM84834_PTP_SCRATCHr_t;

#define BCM84834_PTP_SCRATCHr_CLR(r) (r).ptp_scratch[0] = 0
#define BCM84834_PTP_SCRATCHr_SET(r,d) (r).ptp_scratch[0] = d
#define BCM84834_PTP_SCRATCHr_GET(r) (r).ptp_scratch[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PTP_SCRATCHr_SCRATCH_REGf_GET(r) (((r).ptp_scratch[0]) & 0xffff)
#define BCM84834_PTP_SCRATCHr_SCRATCH_REGf_SET(r,f) (r).ptp_scratch[0]=(((r).ptp_scratch[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PTP_SCRATCH.
 *
 */
#define BCM84834_READ_PTP_SCRATCHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PTP_SCRATCHr,(_r._ptp_scratch))
#define BCM84834_WRITE_PTP_SCRATCHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PTP_SCRATCHr,(_r._ptp_scratch))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PTP_SCRATCHr BCM84834_PTP_SCRATCHr
#define PTP_SCRATCHr_SIZE BCM84834_PTP_SCRATCHr_SIZE
typedef BCM84834_PTP_SCRATCHr_t PTP_SCRATCHr_t;
#define PTP_SCRATCHr_CLR BCM84834_PTP_SCRATCHr_CLR
#define PTP_SCRATCHr_SET BCM84834_PTP_SCRATCHr_SET
#define PTP_SCRATCHr_GET BCM84834_PTP_SCRATCHr_GET
#define PTP_SCRATCHr_SCRATCH_REGf_GET BCM84834_PTP_SCRATCHr_SCRATCH_REGf_GET
#define PTP_SCRATCHr_SCRATCH_REGf_SET BCM84834_PTP_SCRATCHr_SCRATCH_REGf_SET
#define READ_PTP_SCRATCHr BCM84834_READ_PTP_SCRATCHr
#define WRITE_PTP_SCRATCHr BCM84834_WRITE_PTP_SCRATCHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PTP_SCRATCHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_CTL1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0000
 * DEVAD:    3
 * DESC:     IEEE PCS control 1 register
 * SIZE:     32
 * FIELDS:
 *     SPEED_SEL_10G    
 *     SPEED_SEL_1      
 *     CLK_STOPPABLE    
 *     LOW_PWR          
 *     SPEED_SEL_0      
 *     PCS_LPBK         
 *     RESET            
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_CTL1r (0x00030000 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_CTL1.
 *
 */
typedef union BCM84834_PCS_IEEE_CTL1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_ctl1[1];
	uint32_t _pcs_ieee_ctl1;
} BCM84834_PCS_IEEE_CTL1r_t;

#define BCM84834_PCS_IEEE_CTL1r_CLR(r) (r).pcs_ieee_ctl1[0] = 0
#define BCM84834_PCS_IEEE_CTL1r_SET(r,d) (r).pcs_ieee_ctl1[0] = d
#define BCM84834_PCS_IEEE_CTL1r_GET(r) (r).pcs_ieee_ctl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_CTL1r_RESETf_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 15) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_RESETf_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PCS_IEEE_CTL1r_PCS_LPBKf_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 14) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_PCS_LPBKf_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_0f_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 13) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_0f_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_PCS_IEEE_CTL1r_LOW_PWRf_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 11) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_LOW_PWRf_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PCS_IEEE_CTL1r_CLK_STOPPABLEf_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 10) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_CLK_STOPPABLEf_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_1f_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 6) & 0x1)
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_1f_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_10Gf_GET(r) ((((r).pcs_ieee_ctl1[0]) >> 2) & 0xf)
#define BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_10Gf_SET(r,f) (r).pcs_ieee_ctl1[0]=(((r).pcs_ieee_ctl1[0] & ~((uint32_t)0xf << 2)) | ((((uint32_t)f) & 0xf) << 2))

/*
 * These macros can be used to access PCS_IEEE_CTL1.
 *
 */
#define BCM84834_READ_PCS_IEEE_CTL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_CTL1r,(_r._pcs_ieee_ctl1))
#define BCM84834_WRITE_PCS_IEEE_CTL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_CTL1r,(_r._pcs_ieee_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_CTL1r BCM84834_PCS_IEEE_CTL1r
#define PCS_IEEE_CTL1r_SIZE BCM84834_PCS_IEEE_CTL1r_SIZE
typedef BCM84834_PCS_IEEE_CTL1r_t PCS_IEEE_CTL1r_t;
#define PCS_IEEE_CTL1r_CLR BCM84834_PCS_IEEE_CTL1r_CLR
#define PCS_IEEE_CTL1r_SET BCM84834_PCS_IEEE_CTL1r_SET
#define PCS_IEEE_CTL1r_GET BCM84834_PCS_IEEE_CTL1r_GET
#define PCS_IEEE_CTL1r_RESETf_GET BCM84834_PCS_IEEE_CTL1r_RESETf_GET
#define PCS_IEEE_CTL1r_RESETf_SET BCM84834_PCS_IEEE_CTL1r_RESETf_SET
#define PCS_IEEE_CTL1r_PCS_LPBKf_GET BCM84834_PCS_IEEE_CTL1r_PCS_LPBKf_GET
#define PCS_IEEE_CTL1r_PCS_LPBKf_SET BCM84834_PCS_IEEE_CTL1r_PCS_LPBKf_SET
#define PCS_IEEE_CTL1r_SPEED_SEL_0f_GET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_0f_GET
#define PCS_IEEE_CTL1r_SPEED_SEL_0f_SET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_0f_SET
#define PCS_IEEE_CTL1r_LOW_PWRf_GET BCM84834_PCS_IEEE_CTL1r_LOW_PWRf_GET
#define PCS_IEEE_CTL1r_LOW_PWRf_SET BCM84834_PCS_IEEE_CTL1r_LOW_PWRf_SET
#define PCS_IEEE_CTL1r_CLK_STOPPABLEf_GET BCM84834_PCS_IEEE_CTL1r_CLK_STOPPABLEf_GET
#define PCS_IEEE_CTL1r_CLK_STOPPABLEf_SET BCM84834_PCS_IEEE_CTL1r_CLK_STOPPABLEf_SET
#define PCS_IEEE_CTL1r_SPEED_SEL_1f_GET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_1f_GET
#define PCS_IEEE_CTL1r_SPEED_SEL_1f_SET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_1f_SET
#define PCS_IEEE_CTL1r_SPEED_SEL_10Gf_GET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_10Gf_GET
#define PCS_IEEE_CTL1r_SPEED_SEL_10Gf_SET BCM84834_PCS_IEEE_CTL1r_SPEED_SEL_10Gf_SET
#define READ_PCS_IEEE_CTL1r BCM84834_READ_PCS_IEEE_CTL1r
#define WRITE_PCS_IEEE_CTL1r BCM84834_WRITE_PCS_IEEE_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_CTL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_ST1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0001
 * DEVAD:    3
 * DESC:     IEEE PCS status 1 register
 * SIZE:     32
 * FIELDS:
 *     LOW_PWR_AB       
 *     PCS_RCV_LINK_ST  
 *     FAULT            
 *     RX_LPI_INDCT     
 *     TX_LPI_INDCT     
 *     RX_LPI_RCVD      
 *     TX_LPI_RCVD      
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_ST1r (0x00030001 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_ST1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_ST1.
 *
 */
typedef union BCM84834_PCS_IEEE_ST1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_st1[1];
	uint32_t _pcs_ieee_st1;
} BCM84834_PCS_IEEE_ST1r_t;

#define BCM84834_PCS_IEEE_ST1r_CLR(r) (r).pcs_ieee_st1[0] = 0
#define BCM84834_PCS_IEEE_ST1r_SET(r,d) (r).pcs_ieee_st1[0] = d
#define BCM84834_PCS_IEEE_ST1r_GET(r) (r).pcs_ieee_st1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_ST1r_TX_LPI_RCVDf_GET(r) ((((r).pcs_ieee_st1[0]) >> 11) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_TX_LPI_RCVDf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PCS_IEEE_ST1r_RX_LPI_RCVDf_GET(r) ((((r).pcs_ieee_st1[0]) >> 10) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_RX_LPI_RCVDf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PCS_IEEE_ST1r_TX_LPI_INDCTf_GET(r) ((((r).pcs_ieee_st1[0]) >> 9) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_TX_LPI_INDCTf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_PCS_IEEE_ST1r_RX_LPI_INDCTf_GET(r) ((((r).pcs_ieee_st1[0]) >> 8) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_RX_LPI_INDCTf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_PCS_IEEE_ST1r_FAULTf_GET(r) ((((r).pcs_ieee_st1[0]) >> 7) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_FAULTf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PCS_IEEE_ST1r_PCS_RCV_LINK_STf_GET(r) ((((r).pcs_ieee_st1[0]) >> 2) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_PCS_RCV_LINK_STf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PCS_IEEE_ST1r_LOW_PWR_ABf_GET(r) ((((r).pcs_ieee_st1[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_ST1r_LOW_PWR_ABf_SET(r,f) (r).pcs_ieee_st1[0]=(((r).pcs_ieee_st1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access PCS_IEEE_ST1.
 *
 */
#define BCM84834_READ_PCS_IEEE_ST1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_ST1r,(_r._pcs_ieee_st1))
#define BCM84834_WRITE_PCS_IEEE_ST1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_ST1r,(_r._pcs_ieee_st1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_ST1r BCM84834_PCS_IEEE_ST1r
#define PCS_IEEE_ST1r_SIZE BCM84834_PCS_IEEE_ST1r_SIZE
typedef BCM84834_PCS_IEEE_ST1r_t PCS_IEEE_ST1r_t;
#define PCS_IEEE_ST1r_CLR BCM84834_PCS_IEEE_ST1r_CLR
#define PCS_IEEE_ST1r_SET BCM84834_PCS_IEEE_ST1r_SET
#define PCS_IEEE_ST1r_GET BCM84834_PCS_IEEE_ST1r_GET
#define PCS_IEEE_ST1r_TX_LPI_RCVDf_GET BCM84834_PCS_IEEE_ST1r_TX_LPI_RCVDf_GET
#define PCS_IEEE_ST1r_TX_LPI_RCVDf_SET BCM84834_PCS_IEEE_ST1r_TX_LPI_RCVDf_SET
#define PCS_IEEE_ST1r_RX_LPI_RCVDf_GET BCM84834_PCS_IEEE_ST1r_RX_LPI_RCVDf_GET
#define PCS_IEEE_ST1r_RX_LPI_RCVDf_SET BCM84834_PCS_IEEE_ST1r_RX_LPI_RCVDf_SET
#define PCS_IEEE_ST1r_TX_LPI_INDCTf_GET BCM84834_PCS_IEEE_ST1r_TX_LPI_INDCTf_GET
#define PCS_IEEE_ST1r_TX_LPI_INDCTf_SET BCM84834_PCS_IEEE_ST1r_TX_LPI_INDCTf_SET
#define PCS_IEEE_ST1r_RX_LPI_INDCTf_GET BCM84834_PCS_IEEE_ST1r_RX_LPI_INDCTf_GET
#define PCS_IEEE_ST1r_RX_LPI_INDCTf_SET BCM84834_PCS_IEEE_ST1r_RX_LPI_INDCTf_SET
#define PCS_IEEE_ST1r_FAULTf_GET BCM84834_PCS_IEEE_ST1r_FAULTf_GET
#define PCS_IEEE_ST1r_FAULTf_SET BCM84834_PCS_IEEE_ST1r_FAULTf_SET
#define PCS_IEEE_ST1r_PCS_RCV_LINK_STf_GET BCM84834_PCS_IEEE_ST1r_PCS_RCV_LINK_STf_GET
#define PCS_IEEE_ST1r_PCS_RCV_LINK_STf_SET BCM84834_PCS_IEEE_ST1r_PCS_RCV_LINK_STf_SET
#define PCS_IEEE_ST1r_LOW_PWR_ABf_GET BCM84834_PCS_IEEE_ST1r_LOW_PWR_ABf_GET
#define PCS_IEEE_ST1r_LOW_PWR_ABf_SET BCM84834_PCS_IEEE_ST1r_LOW_PWR_ABf_SET
#define READ_PCS_IEEE_ST1r BCM84834_READ_PCS_IEEE_ST1r
#define WRITE_PCS_IEEE_ST1r BCM84834_WRITE_PCS_IEEE_ST1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_ST1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_PHY_ID0
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0002
 * DEVAD:    3
 * DESC:     IEEE PCS device identifier part 0
 * SIZE:     32
 * FIELDS:
 *     DEV_ID0          
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_PHY_ID0r (0x00030002 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_PHY_ID0r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_PHY_ID0.
 *
 */
typedef union BCM84834_PCS_IEEE_PHY_ID0r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_phy_id0[1];
	uint32_t _pcs_ieee_phy_id0;
} BCM84834_PCS_IEEE_PHY_ID0r_t;

#define BCM84834_PCS_IEEE_PHY_ID0r_CLR(r) (r).pcs_ieee_phy_id0[0] = 0
#define BCM84834_PCS_IEEE_PHY_ID0r_SET(r,d) (r).pcs_ieee_phy_id0[0] = d
#define BCM84834_PCS_IEEE_PHY_ID0r_GET(r) (r).pcs_ieee_phy_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_PHY_ID0r_DEV_ID0f_GET(r) (((r).pcs_ieee_phy_id0[0]) & 0xffff)
#define BCM84834_PCS_IEEE_PHY_ID0r_DEV_ID0f_SET(r,f) (r).pcs_ieee_phy_id0[0]=(((r).pcs_ieee_phy_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PCS_IEEE_PHY_ID0.
 *
 */
#define BCM84834_READ_PCS_IEEE_PHY_ID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_PHY_ID0r,(_r._pcs_ieee_phy_id0))
#define BCM84834_WRITE_PCS_IEEE_PHY_ID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_PHY_ID0r,(_r._pcs_ieee_phy_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_PHY_ID0r BCM84834_PCS_IEEE_PHY_ID0r
#define PCS_IEEE_PHY_ID0r_SIZE BCM84834_PCS_IEEE_PHY_ID0r_SIZE
typedef BCM84834_PCS_IEEE_PHY_ID0r_t PCS_IEEE_PHY_ID0r_t;
#define PCS_IEEE_PHY_ID0r_CLR BCM84834_PCS_IEEE_PHY_ID0r_CLR
#define PCS_IEEE_PHY_ID0r_SET BCM84834_PCS_IEEE_PHY_ID0r_SET
#define PCS_IEEE_PHY_ID0r_GET BCM84834_PCS_IEEE_PHY_ID0r_GET
#define PCS_IEEE_PHY_ID0r_DEV_ID0f_GET BCM84834_PCS_IEEE_PHY_ID0r_DEV_ID0f_GET
#define PCS_IEEE_PHY_ID0r_DEV_ID0f_SET BCM84834_PCS_IEEE_PHY_ID0r_DEV_ID0f_SET
#define READ_PCS_IEEE_PHY_ID0r BCM84834_READ_PCS_IEEE_PHY_ID0r
#define WRITE_PCS_IEEE_PHY_ID0r BCM84834_WRITE_PCS_IEEE_PHY_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_PHY_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_PHY_ID1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0003
 * DEVAD:    3
 * DESC:     IEEE PCS device identifier part 1
 * SIZE:     32
 * FIELDS:
 *     DEV_ID1          
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_PHY_ID1r (0x00030003 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_PHY_ID1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_PHY_ID1.
 *
 */
typedef union BCM84834_PCS_IEEE_PHY_ID1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_phy_id1[1];
	uint32_t _pcs_ieee_phy_id1;
} BCM84834_PCS_IEEE_PHY_ID1r_t;

#define BCM84834_PCS_IEEE_PHY_ID1r_CLR(r) (r).pcs_ieee_phy_id1[0] = 0
#define BCM84834_PCS_IEEE_PHY_ID1r_SET(r,d) (r).pcs_ieee_phy_id1[0] = d
#define BCM84834_PCS_IEEE_PHY_ID1r_GET(r) (r).pcs_ieee_phy_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_PHY_ID1r_DEV_ID1f_GET(r) (((r).pcs_ieee_phy_id1[0]) & 0xffff)
#define BCM84834_PCS_IEEE_PHY_ID1r_DEV_ID1f_SET(r,f) (r).pcs_ieee_phy_id1[0]=(((r).pcs_ieee_phy_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PCS_IEEE_PHY_ID1.
 *
 */
#define BCM84834_READ_PCS_IEEE_PHY_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_PHY_ID1r,(_r._pcs_ieee_phy_id1))
#define BCM84834_WRITE_PCS_IEEE_PHY_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_PHY_ID1r,(_r._pcs_ieee_phy_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_PHY_ID1r BCM84834_PCS_IEEE_PHY_ID1r
#define PCS_IEEE_PHY_ID1r_SIZE BCM84834_PCS_IEEE_PHY_ID1r_SIZE
typedef BCM84834_PCS_IEEE_PHY_ID1r_t PCS_IEEE_PHY_ID1r_t;
#define PCS_IEEE_PHY_ID1r_CLR BCM84834_PCS_IEEE_PHY_ID1r_CLR
#define PCS_IEEE_PHY_ID1r_SET BCM84834_PCS_IEEE_PHY_ID1r_SET
#define PCS_IEEE_PHY_ID1r_GET BCM84834_PCS_IEEE_PHY_ID1r_GET
#define PCS_IEEE_PHY_ID1r_DEV_ID1f_GET BCM84834_PCS_IEEE_PHY_ID1r_DEV_ID1f_GET
#define PCS_IEEE_PHY_ID1r_DEV_ID1f_SET BCM84834_PCS_IEEE_PHY_ID1r_DEV_ID1f_SET
#define READ_PCS_IEEE_PHY_ID1r BCM84834_READ_PCS_IEEE_PHY_ID1r
#define WRITE_PCS_IEEE_PHY_ID1r BCM84834_WRITE_PCS_IEEE_PHY_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_PHY_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_SP_CAP
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0004
 * DEVAD:    3
 * DESC:     IEEE PCS speed ability
 * SIZE:     32
 * FIELDS:
 *     CAP_10G          
 *     CAP_10P2B        
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_SP_CAPr (0x00030004 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_SP_CAPr_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_SP_CAP.
 *
 */
typedef union BCM84834_PCS_IEEE_SP_CAPr_s {
	uint32_t v[1];
	uint32_t pcs_ieee_sp_cap[1];
	uint32_t _pcs_ieee_sp_cap;
} BCM84834_PCS_IEEE_SP_CAPr_t;

#define BCM84834_PCS_IEEE_SP_CAPr_CLR(r) (r).pcs_ieee_sp_cap[0] = 0
#define BCM84834_PCS_IEEE_SP_CAPr_SET(r,d) (r).pcs_ieee_sp_cap[0] = d
#define BCM84834_PCS_IEEE_SP_CAPr_GET(r) (r).pcs_ieee_sp_cap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_SP_CAPr_CAP_10P2Bf_GET(r) ((((r).pcs_ieee_sp_cap[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_SP_CAPr_CAP_10P2Bf_SET(r,f) (r).pcs_ieee_sp_cap[0]=(((r).pcs_ieee_sp_cap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PCS_IEEE_SP_CAPr_CAP_10Gf_GET(r) (((r).pcs_ieee_sp_cap[0]) & 0x1)
#define BCM84834_PCS_IEEE_SP_CAPr_CAP_10Gf_SET(r,f) (r).pcs_ieee_sp_cap[0]=(((r).pcs_ieee_sp_cap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PCS_IEEE_SP_CAP.
 *
 */
#define BCM84834_READ_PCS_IEEE_SP_CAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_SP_CAPr,(_r._pcs_ieee_sp_cap))
#define BCM84834_WRITE_PCS_IEEE_SP_CAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_SP_CAPr,(_r._pcs_ieee_sp_cap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_SP_CAPr BCM84834_PCS_IEEE_SP_CAPr
#define PCS_IEEE_SP_CAPr_SIZE BCM84834_PCS_IEEE_SP_CAPr_SIZE
typedef BCM84834_PCS_IEEE_SP_CAPr_t PCS_IEEE_SP_CAPr_t;
#define PCS_IEEE_SP_CAPr_CLR BCM84834_PCS_IEEE_SP_CAPr_CLR
#define PCS_IEEE_SP_CAPr_SET BCM84834_PCS_IEEE_SP_CAPr_SET
#define PCS_IEEE_SP_CAPr_GET BCM84834_PCS_IEEE_SP_CAPr_GET
#define PCS_IEEE_SP_CAPr_CAP_10P2Bf_GET BCM84834_PCS_IEEE_SP_CAPr_CAP_10P2Bf_GET
#define PCS_IEEE_SP_CAPr_CAP_10P2Bf_SET BCM84834_PCS_IEEE_SP_CAPr_CAP_10P2Bf_SET
#define PCS_IEEE_SP_CAPr_CAP_10Gf_GET BCM84834_PCS_IEEE_SP_CAPr_CAP_10Gf_GET
#define PCS_IEEE_SP_CAPr_CAP_10Gf_SET BCM84834_PCS_IEEE_SP_CAPr_CAP_10Gf_SET
#define READ_PCS_IEEE_SP_CAPr BCM84834_READ_PCS_IEEE_SP_CAPr
#define WRITE_PCS_IEEE_SP_CAPr BCM84834_WRITE_PCS_IEEE_SP_CAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_SP_CAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_DEV0
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0005
 * DEVAD:    3
 * DESC:     Devices in package register part 0
 * SIZE:     32
 * FIELDS:
 *     CLA22_PRE        
 *     PMD_PRE          
 *     WIS_PRE          
 *     PCS_PRE          
 *     PHYXS_PRE        
 *     DTEXS_PRE        
 *     TC_PRE           
 *     AUTONEG_PRE      
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_DEV0r (0x00030005 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_DEV0r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_DEV0.
 *
 */
typedef union BCM84834_PCS_IEEE_DEV0r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_dev0[1];
	uint32_t _pcs_ieee_dev0;
} BCM84834_PCS_IEEE_DEV0r_t;

#define BCM84834_PCS_IEEE_DEV0r_CLR(r) (r).pcs_ieee_dev0[0] = 0
#define BCM84834_PCS_IEEE_DEV0r_SET(r,d) (r).pcs_ieee_dev0[0] = d
#define BCM84834_PCS_IEEE_DEV0r_GET(r) (r).pcs_ieee_dev0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_DEV0r_AUTONEG_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 7) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_AUTONEG_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_PCS_IEEE_DEV0r_TC_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 6) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_TC_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PCS_IEEE_DEV0r_DTEXS_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 5) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_DTEXS_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PCS_IEEE_DEV0r_PHYXS_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 4) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_PHYXS_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PCS_IEEE_DEV0r_PCS_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 3) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_PCS_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PCS_IEEE_DEV0r_WIS_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 2) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_WIS_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PCS_IEEE_DEV0r_PMD_PREf_GET(r) ((((r).pcs_ieee_dev0[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_PMD_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PCS_IEEE_DEV0r_CLA22_PREf_GET(r) (((r).pcs_ieee_dev0[0]) & 0x1)
#define BCM84834_PCS_IEEE_DEV0r_CLA22_PREf_SET(r,f) (r).pcs_ieee_dev0[0]=(((r).pcs_ieee_dev0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PCS_IEEE_DEV0.
 *
 */
#define BCM84834_READ_PCS_IEEE_DEV0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_DEV0r,(_r._pcs_ieee_dev0))
#define BCM84834_WRITE_PCS_IEEE_DEV0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_DEV0r,(_r._pcs_ieee_dev0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_DEV0r BCM84834_PCS_IEEE_DEV0r
#define PCS_IEEE_DEV0r_SIZE BCM84834_PCS_IEEE_DEV0r_SIZE
typedef BCM84834_PCS_IEEE_DEV0r_t PCS_IEEE_DEV0r_t;
#define PCS_IEEE_DEV0r_CLR BCM84834_PCS_IEEE_DEV0r_CLR
#define PCS_IEEE_DEV0r_SET BCM84834_PCS_IEEE_DEV0r_SET
#define PCS_IEEE_DEV0r_GET BCM84834_PCS_IEEE_DEV0r_GET
#define PCS_IEEE_DEV0r_AUTONEG_PREf_GET BCM84834_PCS_IEEE_DEV0r_AUTONEG_PREf_GET
#define PCS_IEEE_DEV0r_AUTONEG_PREf_SET BCM84834_PCS_IEEE_DEV0r_AUTONEG_PREf_SET
#define PCS_IEEE_DEV0r_TC_PREf_GET BCM84834_PCS_IEEE_DEV0r_TC_PREf_GET
#define PCS_IEEE_DEV0r_TC_PREf_SET BCM84834_PCS_IEEE_DEV0r_TC_PREf_SET
#define PCS_IEEE_DEV0r_DTEXS_PREf_GET BCM84834_PCS_IEEE_DEV0r_DTEXS_PREf_GET
#define PCS_IEEE_DEV0r_DTEXS_PREf_SET BCM84834_PCS_IEEE_DEV0r_DTEXS_PREf_SET
#define PCS_IEEE_DEV0r_PHYXS_PREf_GET BCM84834_PCS_IEEE_DEV0r_PHYXS_PREf_GET
#define PCS_IEEE_DEV0r_PHYXS_PREf_SET BCM84834_PCS_IEEE_DEV0r_PHYXS_PREf_SET
#define PCS_IEEE_DEV0r_PCS_PREf_GET BCM84834_PCS_IEEE_DEV0r_PCS_PREf_GET
#define PCS_IEEE_DEV0r_PCS_PREf_SET BCM84834_PCS_IEEE_DEV0r_PCS_PREf_SET
#define PCS_IEEE_DEV0r_WIS_PREf_GET BCM84834_PCS_IEEE_DEV0r_WIS_PREf_GET
#define PCS_IEEE_DEV0r_WIS_PREf_SET BCM84834_PCS_IEEE_DEV0r_WIS_PREf_SET
#define PCS_IEEE_DEV0r_PMD_PREf_GET BCM84834_PCS_IEEE_DEV0r_PMD_PREf_GET
#define PCS_IEEE_DEV0r_PMD_PREf_SET BCM84834_PCS_IEEE_DEV0r_PMD_PREf_SET
#define PCS_IEEE_DEV0r_CLA22_PREf_GET BCM84834_PCS_IEEE_DEV0r_CLA22_PREf_GET
#define PCS_IEEE_DEV0r_CLA22_PREf_SET BCM84834_PCS_IEEE_DEV0r_CLA22_PREf_SET
#define READ_PCS_IEEE_DEV0r BCM84834_READ_PCS_IEEE_DEV0r
#define WRITE_PCS_IEEE_DEV0r BCM84834_WRITE_PCS_IEEE_DEV0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_DEV0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_DEV1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0006
 * DEVAD:    3
 * DESC:     Devices in package register part 1
 * SIZE:     32
 * FIELDS:
 *     CLA22_EXT_PRE    
 *     VENSP_DEV1_PRE   
 *     VENSP_DEV2_PRE   
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_DEV1r (0x00030006 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_DEV1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_DEV1.
 *
 */
typedef union BCM84834_PCS_IEEE_DEV1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_dev1[1];
	uint32_t _pcs_ieee_dev1;
} BCM84834_PCS_IEEE_DEV1r_t;

#define BCM84834_PCS_IEEE_DEV1r_CLR(r) (r).pcs_ieee_dev1[0] = 0
#define BCM84834_PCS_IEEE_DEV1r_SET(r,d) (r).pcs_ieee_dev1[0] = d
#define BCM84834_PCS_IEEE_DEV1r_GET(r) (r).pcs_ieee_dev1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_DEV1r_VENSP_DEV2_PREf_GET(r) ((((r).pcs_ieee_dev1[0]) >> 15) & 0x1)
#define BCM84834_PCS_IEEE_DEV1r_VENSP_DEV2_PREf_SET(r,f) (r).pcs_ieee_dev1[0]=(((r).pcs_ieee_dev1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PCS_IEEE_DEV1r_VENSP_DEV1_PREf_GET(r) ((((r).pcs_ieee_dev1[0]) >> 14) & 0x1)
#define BCM84834_PCS_IEEE_DEV1r_VENSP_DEV1_PREf_SET(r,f) (r).pcs_ieee_dev1[0]=(((r).pcs_ieee_dev1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PCS_IEEE_DEV1r_CLA22_EXT_PREf_GET(r) ((((r).pcs_ieee_dev1[0]) >> 13) & 0x1)
#define BCM84834_PCS_IEEE_DEV1r_CLA22_EXT_PREf_SET(r,f) (r).pcs_ieee_dev1[0]=(((r).pcs_ieee_dev1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access PCS_IEEE_DEV1.
 *
 */
#define BCM84834_READ_PCS_IEEE_DEV1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_DEV1r,(_r._pcs_ieee_dev1))
#define BCM84834_WRITE_PCS_IEEE_DEV1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_DEV1r,(_r._pcs_ieee_dev1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_DEV1r BCM84834_PCS_IEEE_DEV1r
#define PCS_IEEE_DEV1r_SIZE BCM84834_PCS_IEEE_DEV1r_SIZE
typedef BCM84834_PCS_IEEE_DEV1r_t PCS_IEEE_DEV1r_t;
#define PCS_IEEE_DEV1r_CLR BCM84834_PCS_IEEE_DEV1r_CLR
#define PCS_IEEE_DEV1r_SET BCM84834_PCS_IEEE_DEV1r_SET
#define PCS_IEEE_DEV1r_GET BCM84834_PCS_IEEE_DEV1r_GET
#define PCS_IEEE_DEV1r_VENSP_DEV2_PREf_GET BCM84834_PCS_IEEE_DEV1r_VENSP_DEV2_PREf_GET
#define PCS_IEEE_DEV1r_VENSP_DEV2_PREf_SET BCM84834_PCS_IEEE_DEV1r_VENSP_DEV2_PREf_SET
#define PCS_IEEE_DEV1r_VENSP_DEV1_PREf_GET BCM84834_PCS_IEEE_DEV1r_VENSP_DEV1_PREf_GET
#define PCS_IEEE_DEV1r_VENSP_DEV1_PREf_SET BCM84834_PCS_IEEE_DEV1r_VENSP_DEV1_PREf_SET
#define PCS_IEEE_DEV1r_CLA22_EXT_PREf_GET BCM84834_PCS_IEEE_DEV1r_CLA22_EXT_PREf_GET
#define PCS_IEEE_DEV1r_CLA22_EXT_PREf_SET BCM84834_PCS_IEEE_DEV1r_CLA22_EXT_PREf_SET
#define READ_PCS_IEEE_DEV1r BCM84834_READ_PCS_IEEE_DEV1r
#define WRITE_PCS_IEEE_DEV1r BCM84834_WRITE_PCS_IEEE_DEV1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_DEV1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_CTL2
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0007
 * DEVAD:    3
 * DESC:     PCS control 2 register
 * SIZE:     32
 * FIELDS:
 *     TYPE_SEL         
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_CTL2r (0x00030007 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_CTL2.
 *
 */
typedef union BCM84834_PCS_IEEE_CTL2r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_ctl2[1];
	uint32_t _pcs_ieee_ctl2;
} BCM84834_PCS_IEEE_CTL2r_t;

#define BCM84834_PCS_IEEE_CTL2r_CLR(r) (r).pcs_ieee_ctl2[0] = 0
#define BCM84834_PCS_IEEE_CTL2r_SET(r,d) (r).pcs_ieee_ctl2[0] = d
#define BCM84834_PCS_IEEE_CTL2r_GET(r) (r).pcs_ieee_ctl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_CTL2r_TYPE_SELf_GET(r) (((r).pcs_ieee_ctl2[0]) & 0x3)
#define BCM84834_PCS_IEEE_CTL2r_TYPE_SELf_SET(r,f) (r).pcs_ieee_ctl2[0]=(((r).pcs_ieee_ctl2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access PCS_IEEE_CTL2.
 *
 */
#define BCM84834_READ_PCS_IEEE_CTL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_CTL2r,(_r._pcs_ieee_ctl2))
#define BCM84834_WRITE_PCS_IEEE_CTL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_CTL2r,(_r._pcs_ieee_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_CTL2r BCM84834_PCS_IEEE_CTL2r
#define PCS_IEEE_CTL2r_SIZE BCM84834_PCS_IEEE_CTL2r_SIZE
typedef BCM84834_PCS_IEEE_CTL2r_t PCS_IEEE_CTL2r_t;
#define PCS_IEEE_CTL2r_CLR BCM84834_PCS_IEEE_CTL2r_CLR
#define PCS_IEEE_CTL2r_SET BCM84834_PCS_IEEE_CTL2r_SET
#define PCS_IEEE_CTL2r_GET BCM84834_PCS_IEEE_CTL2r_GET
#define PCS_IEEE_CTL2r_TYPE_SELf_GET BCM84834_PCS_IEEE_CTL2r_TYPE_SELf_GET
#define PCS_IEEE_CTL2r_TYPE_SELf_SET BCM84834_PCS_IEEE_CTL2r_TYPE_SELf_SET
#define READ_PCS_IEEE_CTL2r BCM84834_READ_PCS_IEEE_CTL2r
#define WRITE_PCS_IEEE_CTL2r BCM84834_WRITE_PCS_IEEE_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_CTL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_ST2
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0008
 * DEVAD:    3
 * DESC:     10G PCS status 2 register
 * SIZE:     32
 * FIELDS:
 *     CAP_10G_R        
 *     CAP_10G_X        
 *     CAP_10G_W        
 *     CAP_10G_T        
 *     RCV_FALT         
 *     TRAN_FALT        
 *     DEV_PRE          
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_ST2r (0x00030008 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_ST2r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_ST2.
 *
 */
typedef union BCM84834_PCS_IEEE_ST2r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_st2[1];
	uint32_t _pcs_ieee_st2;
} BCM84834_PCS_IEEE_ST2r_t;

#define BCM84834_PCS_IEEE_ST2r_CLR(r) (r).pcs_ieee_st2[0] = 0
#define BCM84834_PCS_IEEE_ST2r_SET(r,d) (r).pcs_ieee_st2[0] = d
#define BCM84834_PCS_IEEE_ST2r_GET(r) (r).pcs_ieee_st2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_ST2r_DEV_PREf_GET(r) ((((r).pcs_ieee_st2[0]) >> 14) & 0x3)
#define BCM84834_PCS_IEEE_ST2r_DEV_PREf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCM84834_PCS_IEEE_ST2r_TRAN_FALTf_GET(r) ((((r).pcs_ieee_st2[0]) >> 11) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_TRAN_FALTf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_PCS_IEEE_ST2r_RCV_FALTf_GET(r) ((((r).pcs_ieee_st2[0]) >> 10) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_RCV_FALTf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Tf_GET(r) ((((r).pcs_ieee_st2[0]) >> 3) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Tf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Wf_GET(r) ((((r).pcs_ieee_st2[0]) >> 2) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Wf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Xf_GET(r) ((((r).pcs_ieee_st2[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Xf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Rf_GET(r) (((r).pcs_ieee_st2[0]) & 0x1)
#define BCM84834_PCS_IEEE_ST2r_CAP_10G_Rf_SET(r,f) (r).pcs_ieee_st2[0]=(((r).pcs_ieee_st2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PCS_IEEE_ST2.
 *
 */
#define BCM84834_READ_PCS_IEEE_ST2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_ST2r,(_r._pcs_ieee_st2))
#define BCM84834_WRITE_PCS_IEEE_ST2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_ST2r,(_r._pcs_ieee_st2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_ST2r BCM84834_PCS_IEEE_ST2r
#define PCS_IEEE_ST2r_SIZE BCM84834_PCS_IEEE_ST2r_SIZE
typedef BCM84834_PCS_IEEE_ST2r_t PCS_IEEE_ST2r_t;
#define PCS_IEEE_ST2r_CLR BCM84834_PCS_IEEE_ST2r_CLR
#define PCS_IEEE_ST2r_SET BCM84834_PCS_IEEE_ST2r_SET
#define PCS_IEEE_ST2r_GET BCM84834_PCS_IEEE_ST2r_GET
#define PCS_IEEE_ST2r_DEV_PREf_GET BCM84834_PCS_IEEE_ST2r_DEV_PREf_GET
#define PCS_IEEE_ST2r_DEV_PREf_SET BCM84834_PCS_IEEE_ST2r_DEV_PREf_SET
#define PCS_IEEE_ST2r_TRAN_FALTf_GET BCM84834_PCS_IEEE_ST2r_TRAN_FALTf_GET
#define PCS_IEEE_ST2r_TRAN_FALTf_SET BCM84834_PCS_IEEE_ST2r_TRAN_FALTf_SET
#define PCS_IEEE_ST2r_RCV_FALTf_GET BCM84834_PCS_IEEE_ST2r_RCV_FALTf_GET
#define PCS_IEEE_ST2r_RCV_FALTf_SET BCM84834_PCS_IEEE_ST2r_RCV_FALTf_SET
#define PCS_IEEE_ST2r_CAP_10G_Tf_GET BCM84834_PCS_IEEE_ST2r_CAP_10G_Tf_GET
#define PCS_IEEE_ST2r_CAP_10G_Tf_SET BCM84834_PCS_IEEE_ST2r_CAP_10G_Tf_SET
#define PCS_IEEE_ST2r_CAP_10G_Wf_GET BCM84834_PCS_IEEE_ST2r_CAP_10G_Wf_GET
#define PCS_IEEE_ST2r_CAP_10G_Wf_SET BCM84834_PCS_IEEE_ST2r_CAP_10G_Wf_SET
#define PCS_IEEE_ST2r_CAP_10G_Xf_GET BCM84834_PCS_IEEE_ST2r_CAP_10G_Xf_GET
#define PCS_IEEE_ST2r_CAP_10G_Xf_SET BCM84834_PCS_IEEE_ST2r_CAP_10G_Xf_SET
#define PCS_IEEE_ST2r_CAP_10G_Rf_GET BCM84834_PCS_IEEE_ST2r_CAP_10G_Rf_GET
#define PCS_IEEE_ST2r_CAP_10G_Rf_SET BCM84834_PCS_IEEE_ST2r_CAP_10G_Rf_SET
#define READ_PCS_IEEE_ST2r BCM84834_READ_PCS_IEEE_ST2r
#define WRITE_PCS_IEEE_ST2r BCM84834_WRITE_PCS_IEEE_ST2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_ST2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_PKG_ID0
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x000e
 * DEVAD:    3
 * DESC:     PCS package identifier
 * SIZE:     32
 * FIELDS:
 *     PKG_ID_0         
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_PKG_ID0r (0x0003000e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_PKG_ID0r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_PKG_ID0.
 *
 */
typedef union BCM84834_PCS_IEEE_PKG_ID0r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_pkg_id0[1];
	uint32_t _pcs_ieee_pkg_id0;
} BCM84834_PCS_IEEE_PKG_ID0r_t;

#define BCM84834_PCS_IEEE_PKG_ID0r_CLR(r) (r).pcs_ieee_pkg_id0[0] = 0
#define BCM84834_PCS_IEEE_PKG_ID0r_SET(r,d) (r).pcs_ieee_pkg_id0[0] = d
#define BCM84834_PCS_IEEE_PKG_ID0r_GET(r) (r).pcs_ieee_pkg_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_PKG_ID0r_PKG_ID_0f_GET(r) (((r).pcs_ieee_pkg_id0[0]) & 0xffff)
#define BCM84834_PCS_IEEE_PKG_ID0r_PKG_ID_0f_SET(r,f) (r).pcs_ieee_pkg_id0[0]=(((r).pcs_ieee_pkg_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PCS_IEEE_PKG_ID0.
 *
 */
#define BCM84834_READ_PCS_IEEE_PKG_ID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_PKG_ID0r,(_r._pcs_ieee_pkg_id0))
#define BCM84834_WRITE_PCS_IEEE_PKG_ID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_PKG_ID0r,(_r._pcs_ieee_pkg_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_PKG_ID0r BCM84834_PCS_IEEE_PKG_ID0r
#define PCS_IEEE_PKG_ID0r_SIZE BCM84834_PCS_IEEE_PKG_ID0r_SIZE
typedef BCM84834_PCS_IEEE_PKG_ID0r_t PCS_IEEE_PKG_ID0r_t;
#define PCS_IEEE_PKG_ID0r_CLR BCM84834_PCS_IEEE_PKG_ID0r_CLR
#define PCS_IEEE_PKG_ID0r_SET BCM84834_PCS_IEEE_PKG_ID0r_SET
#define PCS_IEEE_PKG_ID0r_GET BCM84834_PCS_IEEE_PKG_ID0r_GET
#define PCS_IEEE_PKG_ID0r_PKG_ID_0f_GET BCM84834_PCS_IEEE_PKG_ID0r_PKG_ID_0f_GET
#define PCS_IEEE_PKG_ID0r_PKG_ID_0f_SET BCM84834_PCS_IEEE_PKG_ID0r_PKG_ID_0f_SET
#define READ_PCS_IEEE_PKG_ID0r BCM84834_READ_PCS_IEEE_PKG_ID0r
#define WRITE_PCS_IEEE_PKG_ID0r BCM84834_WRITE_PCS_IEEE_PKG_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_PKG_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_PKG_ID1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x000f
 * DEVAD:    3
 * DESC:     PCS package identifier
 * SIZE:     32
 * FIELDS:
 *     PKG_ID_1         
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_PKG_ID1r (0x0003000f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_PKG_ID1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_PKG_ID1.
 *
 */
typedef union BCM84834_PCS_IEEE_PKG_ID1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_pkg_id1[1];
	uint32_t _pcs_ieee_pkg_id1;
} BCM84834_PCS_IEEE_PKG_ID1r_t;

#define BCM84834_PCS_IEEE_PKG_ID1r_CLR(r) (r).pcs_ieee_pkg_id1[0] = 0
#define BCM84834_PCS_IEEE_PKG_ID1r_SET(r,d) (r).pcs_ieee_pkg_id1[0] = d
#define BCM84834_PCS_IEEE_PKG_ID1r_GET(r) (r).pcs_ieee_pkg_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_PKG_ID1r_PKG_ID_1f_GET(r) (((r).pcs_ieee_pkg_id1[0]) & 0xffff)
#define BCM84834_PCS_IEEE_PKG_ID1r_PKG_ID_1f_SET(r,f) (r).pcs_ieee_pkg_id1[0]=(((r).pcs_ieee_pkg_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PCS_IEEE_PKG_ID1.
 *
 */
#define BCM84834_READ_PCS_IEEE_PKG_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_PKG_ID1r,(_r._pcs_ieee_pkg_id1))
#define BCM84834_WRITE_PCS_IEEE_PKG_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_PKG_ID1r,(_r._pcs_ieee_pkg_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_PKG_ID1r BCM84834_PCS_IEEE_PKG_ID1r
#define PCS_IEEE_PKG_ID1r_SIZE BCM84834_PCS_IEEE_PKG_ID1r_SIZE
typedef BCM84834_PCS_IEEE_PKG_ID1r_t PCS_IEEE_PKG_ID1r_t;
#define PCS_IEEE_PKG_ID1r_CLR BCM84834_PCS_IEEE_PKG_ID1r_CLR
#define PCS_IEEE_PKG_ID1r_SET BCM84834_PCS_IEEE_PKG_ID1r_SET
#define PCS_IEEE_PKG_ID1r_GET BCM84834_PCS_IEEE_PKG_ID1r_GET
#define PCS_IEEE_PKG_ID1r_PKG_ID_1f_GET BCM84834_PCS_IEEE_PKG_ID1r_PKG_ID_1f_GET
#define PCS_IEEE_PKG_ID1r_PKG_ID_1f_SET BCM84834_PCS_IEEE_PKG_ID1r_PKG_ID_1f_SET
#define READ_PCS_IEEE_PKG_ID1r BCM84834_READ_PCS_IEEE_PKG_ID1r
#define WRITE_PCS_IEEE_PKG_ID1r BCM84834_WRITE_PCS_IEEE_PKG_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_PKG_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_EEE_CAP
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0014
 * DEVAD:    3
 * DESC:     EEE Capability Register
 * SIZE:     32
 * FIELDS:
 *     CAP_100BASE_TX_EEE 
 *     CAP_1000BASE_T_EEE 
 *     CAP_10GBASE_T_EEE 
 *     CAP_10GBASE_KX_EEE 
 *     CAP_10GBASE_KX4_EEE 
 *     CAP_10GBASE_KR_EEE 
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_EEE_CAPr (0x00030014 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_EEE_CAPr_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_EEE_CAP.
 *
 */
typedef union BCM84834_PCS_IEEE_EEE_CAPr_s {
	uint32_t v[1];
	uint32_t pcs_ieee_eee_cap[1];
	uint32_t _pcs_ieee_eee_cap;
} BCM84834_PCS_IEEE_EEE_CAPr_t;

#define BCM84834_PCS_IEEE_EEE_CAPr_CLR(r) (r).pcs_ieee_eee_cap[0] = 0
#define BCM84834_PCS_IEEE_EEE_CAPr_SET(r,d) (r).pcs_ieee_eee_cap[0] = d
#define BCM84834_PCS_IEEE_EEE_CAPr_GET(r) (r).pcs_ieee_eee_cap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 6) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 5) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 4) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 3) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 2) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_GET(r) ((((r).pcs_ieee_eee_cap[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_SET(r,f) (r).pcs_ieee_eee_cap[0]=(((r).pcs_ieee_eee_cap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access PCS_IEEE_EEE_CAP.
 *
 */
#define BCM84834_READ_PCS_IEEE_EEE_CAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_EEE_CAPr,(_r._pcs_ieee_eee_cap))
#define BCM84834_WRITE_PCS_IEEE_EEE_CAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_EEE_CAPr,(_r._pcs_ieee_eee_cap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_EEE_CAPr BCM84834_PCS_IEEE_EEE_CAPr
#define PCS_IEEE_EEE_CAPr_SIZE BCM84834_PCS_IEEE_EEE_CAPr_SIZE
typedef BCM84834_PCS_IEEE_EEE_CAPr_t PCS_IEEE_EEE_CAPr_t;
#define PCS_IEEE_EEE_CAPr_CLR BCM84834_PCS_IEEE_EEE_CAPr_CLR
#define PCS_IEEE_EEE_CAPr_SET BCM84834_PCS_IEEE_EEE_CAPr_SET
#define PCS_IEEE_EEE_CAPr_GET BCM84834_PCS_IEEE_EEE_CAPr_GET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KR_EEEf_SET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX4_EEEf_SET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_KX_EEEf_SET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_10GBASE_T_EEEf_SET
#define PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_1000BASE_T_EEEf_SET
#define PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_GET BCM84834_PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_GET
#define PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_SET BCM84834_PCS_IEEE_EEE_CAPr_CAP_100BASE_TX_EEEf_SET
#define READ_PCS_IEEE_EEE_CAPr BCM84834_READ_PCS_IEEE_EEE_CAPr
#define WRITE_PCS_IEEE_EEE_CAPr BCM84834_WRITE_PCS_IEEE_EEE_CAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_EEE_CAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_EEE_WAKE_ERR_CNT
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0016
 * DEVAD:    3
 * DESC:     Wake Error Count Register
 * SIZE:     32
 * FIELDS:
 *     EEE_WAKE_ERR_CNT 
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr (0x00030016 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_EEE_WAKE_ERR_CNT.
 *
 */
typedef union BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_s {
	uint32_t v[1];
	uint32_t pcs_ieee_eee_wake_err_cnt[1];
	uint32_t _pcs_ieee_eee_wake_err_cnt;
} BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_t;

#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_CLR(r) (r).pcs_ieee_eee_wake_err_cnt[0] = 0
#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_SET(r,d) (r).pcs_ieee_eee_wake_err_cnt[0] = d
#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_GET(r) (r).pcs_ieee_eee_wake_err_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_GET(r) (((r).pcs_ieee_eee_wake_err_cnt[0]) & 0xffff)
#define BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_SET(r,f) (r).pcs_ieee_eee_wake_err_cnt[0]=(((r).pcs_ieee_eee_wake_err_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PCS_IEEE_EEE_WAKE_ERR_CNT.
 *
 */
#define BCM84834_READ_PCS_IEEE_EEE_WAKE_ERR_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr,(_r._pcs_ieee_eee_wake_err_cnt))
#define BCM84834_WRITE_PCS_IEEE_EEE_WAKE_ERR_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr,(_r._pcs_ieee_eee_wake_err_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_EEE_WAKE_ERR_CNTr BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_SIZE BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_SIZE
typedef BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_t PCS_IEEE_EEE_WAKE_ERR_CNTr_t;
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_CLR BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_CLR
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_SET BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_SET
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_GET BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_GET
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_GET BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_GET
#define PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_SET BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr_EEE_WAKE_ERR_CNTf_SET
#define READ_PCS_IEEE_EEE_WAKE_ERR_CNTr BCM84834_READ_PCS_IEEE_EEE_WAKE_ERR_CNTr
#define WRITE_PCS_IEEE_EEE_WAKE_ERR_CNTr BCM84834_WRITE_PCS_IEEE_EEE_WAKE_ERR_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_EEE_WAKE_ERR_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_RT_10G_ST1
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0020
 * DEVAD:    3
 * DESC:     10GBASE_R & 10GBASE_T PCS status 1
 * SIZE:     32
 * FIELDS:
 *     BLK_LOCK         
 *     HBER             
 *     PRBS31_CAP       
 *     RCV_LINK_STS     
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_RT_10G_ST1r (0x00030020 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_RT_10G_ST1r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_RT_10G_ST1.
 *
 */
typedef union BCM84834_PCS_IEEE_RT_10G_ST1r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_rt_10g_st1[1];
	uint32_t _pcs_ieee_rt_10g_st1;
} BCM84834_PCS_IEEE_RT_10G_ST1r_t;

#define BCM84834_PCS_IEEE_RT_10G_ST1r_CLR(r) (r).pcs_ieee_rt_10g_st1[0] = 0
#define BCM84834_PCS_IEEE_RT_10G_ST1r_SET(r,d) (r).pcs_ieee_rt_10g_st1[0] = d
#define BCM84834_PCS_IEEE_RT_10G_ST1r_GET(r) (r).pcs_ieee_rt_10g_st1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_GET(r) ((((r).pcs_ieee_rt_10g_st1[0]) >> 12) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_SET(r,f) (r).pcs_ieee_rt_10g_st1[0]=(((r).pcs_ieee_rt_10g_st1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_GET(r) ((((r).pcs_ieee_rt_10g_st1[0]) >> 2) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_SET(r,f) (r).pcs_ieee_rt_10g_st1[0]=(((r).pcs_ieee_rt_10g_st1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_PCS_IEEE_RT_10G_ST1r_HBERf_GET(r) ((((r).pcs_ieee_rt_10g_st1[0]) >> 1) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST1r_HBERf_SET(r,f) (r).pcs_ieee_rt_10g_st1[0]=(((r).pcs_ieee_rt_10g_st1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_GET(r) (((r).pcs_ieee_rt_10g_st1[0]) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_SET(r,f) (r).pcs_ieee_rt_10g_st1[0]=(((r).pcs_ieee_rt_10g_st1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PCS_IEEE_RT_10G_ST1.
 *
 */
#define BCM84834_READ_PCS_IEEE_RT_10G_ST1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_RT_10G_ST1r,(_r._pcs_ieee_rt_10g_st1))
#define BCM84834_WRITE_PCS_IEEE_RT_10G_ST1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_RT_10G_ST1r,(_r._pcs_ieee_rt_10g_st1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_RT_10G_ST1r BCM84834_PCS_IEEE_RT_10G_ST1r
#define PCS_IEEE_RT_10G_ST1r_SIZE BCM84834_PCS_IEEE_RT_10G_ST1r_SIZE
typedef BCM84834_PCS_IEEE_RT_10G_ST1r_t PCS_IEEE_RT_10G_ST1r_t;
#define PCS_IEEE_RT_10G_ST1r_CLR BCM84834_PCS_IEEE_RT_10G_ST1r_CLR
#define PCS_IEEE_RT_10G_ST1r_SET BCM84834_PCS_IEEE_RT_10G_ST1r_SET
#define PCS_IEEE_RT_10G_ST1r_GET BCM84834_PCS_IEEE_RT_10G_ST1r_GET
#define PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_GET BCM84834_PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_GET
#define PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_SET BCM84834_PCS_IEEE_RT_10G_ST1r_RCV_LINK_STSf_SET
#define PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_GET BCM84834_PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_GET
#define PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_SET BCM84834_PCS_IEEE_RT_10G_ST1r_PRBS31_CAPf_SET
#define PCS_IEEE_RT_10G_ST1r_HBERf_GET BCM84834_PCS_IEEE_RT_10G_ST1r_HBERf_GET
#define PCS_IEEE_RT_10G_ST1r_HBERf_SET BCM84834_PCS_IEEE_RT_10G_ST1r_HBERf_SET
#define PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_GET BCM84834_PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_GET
#define PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_SET BCM84834_PCS_IEEE_RT_10G_ST1r_BLK_LOCKf_SET
#define READ_PCS_IEEE_RT_10G_ST1r BCM84834_READ_PCS_IEEE_RT_10G_ST1r
#define WRITE_PCS_IEEE_RT_10G_ST1r BCM84834_WRITE_PCS_IEEE_RT_10G_ST1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_RT_10G_ST1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  PCS_IEEE_RT_10G_ST2
 * BLOCKS:   PCS_IEEE
 * REGADDR:  0x0021
 * DEVAD:    3
 * DESC:     10GBASE_R & 10GBASE_T PCS status 2
 * SIZE:     32
 * FIELDS:
 *     ERR_BLK_CNT      
 *     BER              
 *     HBER_L           
 *     BLK_LOCK_L       
 *
 ******************************************************************************/
#define BCM84834_PCS_IEEE_RT_10G_ST2r (0x00030021 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_PCS_IEEE_RT_10G_ST2r_SIZE 4

/*
 * This structure should be used to declare and program PCS_IEEE_RT_10G_ST2.
 *
 */
typedef union BCM84834_PCS_IEEE_RT_10G_ST2r_s {
	uint32_t v[1];
	uint32_t pcs_ieee_rt_10g_st2[1];
	uint32_t _pcs_ieee_rt_10g_st2;
} BCM84834_PCS_IEEE_RT_10G_ST2r_t;

#define BCM84834_PCS_IEEE_RT_10G_ST2r_CLR(r) (r).pcs_ieee_rt_10g_st2[0] = 0
#define BCM84834_PCS_IEEE_RT_10G_ST2r_SET(r,d) (r).pcs_ieee_rt_10g_st2[0] = d
#define BCM84834_PCS_IEEE_RT_10G_ST2r_GET(r) (r).pcs_ieee_rt_10g_st2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_GET(r) ((((r).pcs_ieee_rt_10g_st2[0]) >> 15) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_SET(r,f) (r).pcs_ieee_rt_10g_st2[0]=(((r).pcs_ieee_rt_10g_st2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_PCS_IEEE_RT_10G_ST2r_HBER_Lf_GET(r) ((((r).pcs_ieee_rt_10g_st2[0]) >> 14) & 0x1)
#define BCM84834_PCS_IEEE_RT_10G_ST2r_HBER_Lf_SET(r,f) (r).pcs_ieee_rt_10g_st2[0]=(((r).pcs_ieee_rt_10g_st2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_PCS_IEEE_RT_10G_ST2r_BERf_GET(r) ((((r).pcs_ieee_rt_10g_st2[0]) >> 8) & 0x3f)
#define BCM84834_PCS_IEEE_RT_10G_ST2r_BERf_SET(r,f) (r).pcs_ieee_rt_10g_st2[0]=(((r).pcs_ieee_rt_10g_st2[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCM84834_PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_GET(r) (((r).pcs_ieee_rt_10g_st2[0]) & 0xff)
#define BCM84834_PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_SET(r,f) (r).pcs_ieee_rt_10g_st2[0]=(((r).pcs_ieee_rt_10g_st2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PCS_IEEE_RT_10G_ST2.
 *
 */
#define BCM84834_READ_PCS_IEEE_RT_10G_ST2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_PCS_IEEE_RT_10G_ST2r,(_r._pcs_ieee_rt_10g_st2))
#define BCM84834_WRITE_PCS_IEEE_RT_10G_ST2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_PCS_IEEE_RT_10G_ST2r,(_r._pcs_ieee_rt_10g_st2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PCS_IEEE_RT_10G_ST2r BCM84834_PCS_IEEE_RT_10G_ST2r
#define PCS_IEEE_RT_10G_ST2r_SIZE BCM84834_PCS_IEEE_RT_10G_ST2r_SIZE
typedef BCM84834_PCS_IEEE_RT_10G_ST2r_t PCS_IEEE_RT_10G_ST2r_t;
#define PCS_IEEE_RT_10G_ST2r_CLR BCM84834_PCS_IEEE_RT_10G_ST2r_CLR
#define PCS_IEEE_RT_10G_ST2r_SET BCM84834_PCS_IEEE_RT_10G_ST2r_SET
#define PCS_IEEE_RT_10G_ST2r_GET BCM84834_PCS_IEEE_RT_10G_ST2r_GET
#define PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_GET BCM84834_PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_GET
#define PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_SET BCM84834_PCS_IEEE_RT_10G_ST2r_BLK_LOCK_Lf_SET
#define PCS_IEEE_RT_10G_ST2r_HBER_Lf_GET BCM84834_PCS_IEEE_RT_10G_ST2r_HBER_Lf_GET
#define PCS_IEEE_RT_10G_ST2r_HBER_Lf_SET BCM84834_PCS_IEEE_RT_10G_ST2r_HBER_Lf_SET
#define PCS_IEEE_RT_10G_ST2r_BERf_GET BCM84834_PCS_IEEE_RT_10G_ST2r_BERf_GET
#define PCS_IEEE_RT_10G_ST2r_BERf_SET BCM84834_PCS_IEEE_RT_10G_ST2r_BERf_SET
#define PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_GET BCM84834_PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_GET
#define PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_SET BCM84834_PCS_IEEE_RT_10G_ST2r_ERR_BLK_CNTf_SET
#define READ_PCS_IEEE_RT_10G_ST2r BCM84834_READ_PCS_IEEE_RT_10G_ST2r
#define WRITE_PCS_IEEE_RT_10G_ST2r BCM84834_WRITE_PCS_IEEE_RT_10G_ST2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_PCS_IEEE_RT_10G_ST2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_CTRL
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe0
 * DEVAD:    4
 * DESC:     IEEE MII control register
 * SIZE:     32
 * FIELDS:
 *     MANUAL_SPEED1    
 *     COLLISION_TEST_EN 
 *     FULL_DUPLEX      
 *     RESTART_AUTONEG  
 *     PWRDWN_SW        
 *     AUTONEG_ENABLE   
 *     MANUAL_SPEED0    
 *     GLOOPBACK        
 *     RST_HW           
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_CTRLr (0x0004ffe0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_CTRL.
 *
 */
typedef union BCM84834_COMBO_1000X_CTRLr_s {
	uint32_t v[1];
	uint32_t combo_1000x_ctrl[1];
	uint32_t _combo_1000x_ctrl;
} BCM84834_COMBO_1000X_CTRLr_t;

#define BCM84834_COMBO_1000X_CTRLr_CLR(r) (r).combo_1000x_ctrl[0] = 0
#define BCM84834_COMBO_1000X_CTRLr_SET(r,d) (r).combo_1000x_ctrl[0] = d
#define BCM84834_COMBO_1000X_CTRLr_GET(r) (r).combo_1000x_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_CTRLr_RST_HWf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_RST_HWf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_CTRLr_GLOOPBACKf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_GLOOPBACKf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED0f_GET(r) ((((r).combo_1000x_ctrl[0]) >> 13) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED0f_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_1000X_CTRLr_AUTONEG_ENABLEf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 12) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_AUTONEG_ENABLEf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_1000X_CTRLr_PWRDWN_SWf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 11) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_PWRDWN_SWf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_1000X_CTRLr_RESTART_AUTONEGf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 9) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_RESTART_AUTONEGf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_1000X_CTRLr_FULL_DUPLEXf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 8) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_FULL_DUPLEXf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_1000X_CTRLr_COLLISION_TEST_ENf_GET(r) ((((r).combo_1000x_ctrl[0]) >> 7) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_COLLISION_TEST_ENf_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED1f_GET(r) ((((r).combo_1000x_ctrl[0]) >> 6) & 0x1)
#define BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED1f_SET(r,f) (r).combo_1000x_ctrl[0]=(((r).combo_1000x_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))

/*
 * These macros can be used to access COMBO_1000X_CTRL.
 *
 */
#define BCM84834_READ_COMBO_1000X_CTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_CTRLr,(_r._combo_1000x_ctrl))
#define BCM84834_WRITE_COMBO_1000X_CTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_CTRLr,(_r._combo_1000x_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_CTRLr BCM84834_COMBO_1000X_CTRLr
#define COMBO_1000X_CTRLr_SIZE BCM84834_COMBO_1000X_CTRLr_SIZE
typedef BCM84834_COMBO_1000X_CTRLr_t COMBO_1000X_CTRLr_t;
#define COMBO_1000X_CTRLr_CLR BCM84834_COMBO_1000X_CTRLr_CLR
#define COMBO_1000X_CTRLr_SET BCM84834_COMBO_1000X_CTRLr_SET
#define COMBO_1000X_CTRLr_GET BCM84834_COMBO_1000X_CTRLr_GET
#define COMBO_1000X_CTRLr_RST_HWf_GET BCM84834_COMBO_1000X_CTRLr_RST_HWf_GET
#define COMBO_1000X_CTRLr_RST_HWf_SET BCM84834_COMBO_1000X_CTRLr_RST_HWf_SET
#define COMBO_1000X_CTRLr_GLOOPBACKf_GET BCM84834_COMBO_1000X_CTRLr_GLOOPBACKf_GET
#define COMBO_1000X_CTRLr_GLOOPBACKf_SET BCM84834_COMBO_1000X_CTRLr_GLOOPBACKf_SET
#define COMBO_1000X_CTRLr_MANUAL_SPEED0f_GET BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED0f_GET
#define COMBO_1000X_CTRLr_MANUAL_SPEED0f_SET BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED0f_SET
#define COMBO_1000X_CTRLr_AUTONEG_ENABLEf_GET BCM84834_COMBO_1000X_CTRLr_AUTONEG_ENABLEf_GET
#define COMBO_1000X_CTRLr_AUTONEG_ENABLEf_SET BCM84834_COMBO_1000X_CTRLr_AUTONEG_ENABLEf_SET
#define COMBO_1000X_CTRLr_PWRDWN_SWf_GET BCM84834_COMBO_1000X_CTRLr_PWRDWN_SWf_GET
#define COMBO_1000X_CTRLr_PWRDWN_SWf_SET BCM84834_COMBO_1000X_CTRLr_PWRDWN_SWf_SET
#define COMBO_1000X_CTRLr_RESTART_AUTONEGf_GET BCM84834_COMBO_1000X_CTRLr_RESTART_AUTONEGf_GET
#define COMBO_1000X_CTRLr_RESTART_AUTONEGf_SET BCM84834_COMBO_1000X_CTRLr_RESTART_AUTONEGf_SET
#define COMBO_1000X_CTRLr_FULL_DUPLEXf_GET BCM84834_COMBO_1000X_CTRLr_FULL_DUPLEXf_GET
#define COMBO_1000X_CTRLr_FULL_DUPLEXf_SET BCM84834_COMBO_1000X_CTRLr_FULL_DUPLEXf_SET
#define COMBO_1000X_CTRLr_COLLISION_TEST_ENf_GET BCM84834_COMBO_1000X_CTRLr_COLLISION_TEST_ENf_GET
#define COMBO_1000X_CTRLr_COLLISION_TEST_ENf_SET BCM84834_COMBO_1000X_CTRLr_COLLISION_TEST_ENf_SET
#define COMBO_1000X_CTRLr_MANUAL_SPEED1f_GET BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED1f_GET
#define COMBO_1000X_CTRLr_MANUAL_SPEED1f_SET BCM84834_COMBO_1000X_CTRLr_MANUAL_SPEED1f_SET
#define READ_COMBO_1000X_CTRLr BCM84834_READ_COMBO_1000X_CTRLr
#define WRITE_COMBO_1000X_CTRLr BCM84834_WRITE_COMBO_1000X_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_STAT
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe1
 * DEVAD:    4
 * DESC:     IEEE MII status register
 * SIZE:     32
 * FIELDS:
 *     EXTENDED_CAP     
 *     JABBER_DETECT    
 *     LINK_STATUS      
 *     AUTONEG_ABIL     
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     MF_PREAMBLE_SUPRESSION 
 *     EXTENDED_STATUS  
 *     S100BASE_T2_HALF_DUPLEX_CAPABLE 
 *     S100BASE_T2_FULL_DUPLEX_CAPABLE 
 *     S10BASE_T_HALF_DUPLEX_CAPABLE 
 *     S10BASE_T_FULL_DUPLEX_CAPABLE 
 *     S100BASE_X_HALF_DUPLEX_CAPABLE 
 *     S100BASE_X_FULL_DUPLEX_CAPABLE 
 *     S100BASE_T4_CAPABLE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_STATr (0x0004ffe1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_STATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_STAT.
 *
 */
typedef union BCM84834_COMBO_1000X_STATr_s {
	uint32_t v[1];
	uint32_t combo_1000x_stat[1];
	uint32_t _combo_1000x_stat;
} BCM84834_COMBO_1000X_STATr_t;

#define BCM84834_COMBO_1000X_STATr_CLR(r) (r).combo_1000x_stat[0] = 0
#define BCM84834_COMBO_1000X_STATr_SET(r,d) (r).combo_1000x_stat[0] = d
#define BCM84834_COMBO_1000X_STATr_GET(r) (r).combo_1000x_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 11) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 10) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_stat[0]) >> 9) & 0x1)
#define BCM84834_COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_1000X_STATr_EXTENDED_STATUSf_GET(r) ((((r).combo_1000x_stat[0]) >> 8) & 0x1)
#define BCM84834_COMBO_1000X_STATr_EXTENDED_STATUSf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_GET(r) ((((r).combo_1000x_stat[0]) >> 6) & 0x1)
#define BCM84834_COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_1000X_STATr_AUTONEG_COMPLETEf_GET(r) ((((r).combo_1000x_stat[0]) >> 5) & 0x1)
#define BCM84834_COMBO_1000X_STATr_AUTONEG_COMPLETEf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_1000X_STATr_REMOTE_FAULTf_GET(r) ((((r).combo_1000x_stat[0]) >> 4) & 0x1)
#define BCM84834_COMBO_1000X_STATr_REMOTE_FAULTf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_1000X_STATr_AUTONEG_ABILf_GET(r) ((((r).combo_1000x_stat[0]) >> 3) & 0x1)
#define BCM84834_COMBO_1000X_STATr_AUTONEG_ABILf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_1000X_STATr_LINK_STATUSf_GET(r) ((((r).combo_1000x_stat[0]) >> 2) & 0x1)
#define BCM84834_COMBO_1000X_STATr_LINK_STATUSf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_1000X_STATr_JABBER_DETECTf_GET(r) ((((r).combo_1000x_stat[0]) >> 1) & 0x1)
#define BCM84834_COMBO_1000X_STATr_JABBER_DETECTf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_1000X_STATr_EXTENDED_CAPf_GET(r) (((r).combo_1000x_stat[0]) & 0x1)
#define BCM84834_COMBO_1000X_STATr_EXTENDED_CAPf_SET(r,f) (r).combo_1000x_stat[0]=(((r).combo_1000x_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_1000X_STAT.
 *
 */
#define BCM84834_READ_COMBO_1000X_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_STATr,(_r._combo_1000x_stat))
#define BCM84834_WRITE_COMBO_1000X_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_STATr,(_r._combo_1000x_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_STATr BCM84834_COMBO_1000X_STATr
#define COMBO_1000X_STATr_SIZE BCM84834_COMBO_1000X_STATr_SIZE
typedef BCM84834_COMBO_1000X_STATr_t COMBO_1000X_STATr_t;
#define COMBO_1000X_STATr_CLR BCM84834_COMBO_1000X_STATr_CLR
#define COMBO_1000X_STATr_SET BCM84834_COMBO_1000X_STATr_SET
#define COMBO_1000X_STATr_GET BCM84834_COMBO_1000X_STATr_GET
#define COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_GET
#define COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S100BASE_T4_CAPABLEf_SET
#define COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S100BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S100BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S10BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S10BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S100BASE_T2_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_STATr_S100BASE_T2_HALF_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_STATr_EXTENDED_STATUSf_GET BCM84834_COMBO_1000X_STATr_EXTENDED_STATUSf_GET
#define COMBO_1000X_STATr_EXTENDED_STATUSf_SET BCM84834_COMBO_1000X_STATr_EXTENDED_STATUSf_SET
#define COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_GET BCM84834_COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_GET
#define COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_SET BCM84834_COMBO_1000X_STATr_MF_PREAMBLE_SUPRESSIONf_SET
#define COMBO_1000X_STATr_AUTONEG_COMPLETEf_GET BCM84834_COMBO_1000X_STATr_AUTONEG_COMPLETEf_GET
#define COMBO_1000X_STATr_AUTONEG_COMPLETEf_SET BCM84834_COMBO_1000X_STATr_AUTONEG_COMPLETEf_SET
#define COMBO_1000X_STATr_REMOTE_FAULTf_GET BCM84834_COMBO_1000X_STATr_REMOTE_FAULTf_GET
#define COMBO_1000X_STATr_REMOTE_FAULTf_SET BCM84834_COMBO_1000X_STATr_REMOTE_FAULTf_SET
#define COMBO_1000X_STATr_AUTONEG_ABILf_GET BCM84834_COMBO_1000X_STATr_AUTONEG_ABILf_GET
#define COMBO_1000X_STATr_AUTONEG_ABILf_SET BCM84834_COMBO_1000X_STATr_AUTONEG_ABILf_SET
#define COMBO_1000X_STATr_LINK_STATUSf_GET BCM84834_COMBO_1000X_STATr_LINK_STATUSf_GET
#define COMBO_1000X_STATr_LINK_STATUSf_SET BCM84834_COMBO_1000X_STATr_LINK_STATUSf_SET
#define COMBO_1000X_STATr_JABBER_DETECTf_GET BCM84834_COMBO_1000X_STATr_JABBER_DETECTf_GET
#define COMBO_1000X_STATr_JABBER_DETECTf_SET BCM84834_COMBO_1000X_STATr_JABBER_DETECTf_SET
#define COMBO_1000X_STATr_EXTENDED_CAPf_GET BCM84834_COMBO_1000X_STATr_EXTENDED_CAPf_GET
#define COMBO_1000X_STATr_EXTENDED_CAPf_SET BCM84834_COMBO_1000X_STATr_EXTENDED_CAPf_SET
#define READ_COMBO_1000X_STATr BCM84834_READ_COMBO_1000X_STATr
#define WRITE_COMBO_1000X_STATr BCM84834_WRITE_COMBO_1000X_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_ID1
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe2
 * DEVAD:    4
 * DESC:     IEEE phy ID LSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_ID1r (0x0004ffe2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_ID1r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_ID1.
 *
 */
typedef union BCM84834_COMBO_1000X_ID1r_s {
	uint32_t v[1];
	uint32_t combo_1000x_id1[1];
	uint32_t _combo_1000x_id1;
} BCM84834_COMBO_1000X_ID1r_t;

#define BCM84834_COMBO_1000X_ID1r_CLR(r) (r).combo_1000x_id1[0] = 0
#define BCM84834_COMBO_1000X_ID1r_SET(r,d) (r).combo_1000x_id1[0] = d
#define BCM84834_COMBO_1000X_ID1r_GET(r) (r).combo_1000x_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_ID1r_REGIDf_GET(r) (((r).combo_1000x_id1[0]) & 0xffff)
#define BCM84834_COMBO_1000X_ID1r_REGIDf_SET(r,f) (r).combo_1000x_id1[0]=(((r).combo_1000x_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access COMBO_1000X_ID1.
 *
 */
#define BCM84834_READ_COMBO_1000X_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_ID1r,(_r._combo_1000x_id1))
#define BCM84834_WRITE_COMBO_1000X_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_ID1r,(_r._combo_1000x_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_ID1r BCM84834_COMBO_1000X_ID1r
#define COMBO_1000X_ID1r_SIZE BCM84834_COMBO_1000X_ID1r_SIZE
typedef BCM84834_COMBO_1000X_ID1r_t COMBO_1000X_ID1r_t;
#define COMBO_1000X_ID1r_CLR BCM84834_COMBO_1000X_ID1r_CLR
#define COMBO_1000X_ID1r_SET BCM84834_COMBO_1000X_ID1r_SET
#define COMBO_1000X_ID1r_GET BCM84834_COMBO_1000X_ID1r_GET
#define COMBO_1000X_ID1r_REGIDf_GET BCM84834_COMBO_1000X_ID1r_REGIDf_GET
#define COMBO_1000X_ID1r_REGIDf_SET BCM84834_COMBO_1000X_ID1r_REGIDf_SET
#define READ_COMBO_1000X_ID1r BCM84834_READ_COMBO_1000X_ID1r
#define WRITE_COMBO_1000X_ID1r BCM84834_WRITE_COMBO_1000X_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_ID2
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe3
 * DEVAD:    4
 * DESC:     IEEE phy ID MSByte register
 * SIZE:     32
 * FIELDS:
 *     REGID            
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_ID2r (0x0004ffe3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_ID2r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_ID2.
 *
 */
typedef union BCM84834_COMBO_1000X_ID2r_s {
	uint32_t v[1];
	uint32_t combo_1000x_id2[1];
	uint32_t _combo_1000x_id2;
} BCM84834_COMBO_1000X_ID2r_t;

#define BCM84834_COMBO_1000X_ID2r_CLR(r) (r).combo_1000x_id2[0] = 0
#define BCM84834_COMBO_1000X_ID2r_SET(r,d) (r).combo_1000x_id2[0] = d
#define BCM84834_COMBO_1000X_ID2r_GET(r) (r).combo_1000x_id2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_ID2r_REGIDf_GET(r) (((r).combo_1000x_id2[0]) & 0xffff)
#define BCM84834_COMBO_1000X_ID2r_REGIDf_SET(r,f) (r).combo_1000x_id2[0]=(((r).combo_1000x_id2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access COMBO_1000X_ID2.
 *
 */
#define BCM84834_READ_COMBO_1000X_ID2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_ID2r,(_r._combo_1000x_id2))
#define BCM84834_WRITE_COMBO_1000X_ID2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_ID2r,(_r._combo_1000x_id2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_ID2r BCM84834_COMBO_1000X_ID2r
#define COMBO_1000X_ID2r_SIZE BCM84834_COMBO_1000X_ID2r_SIZE
typedef BCM84834_COMBO_1000X_ID2r_t COMBO_1000X_ID2r_t;
#define COMBO_1000X_ID2r_CLR BCM84834_COMBO_1000X_ID2r_CLR
#define COMBO_1000X_ID2r_SET BCM84834_COMBO_1000X_ID2r_SET
#define COMBO_1000X_ID2r_GET BCM84834_COMBO_1000X_ID2r_GET
#define COMBO_1000X_ID2r_REGIDf_GET BCM84834_COMBO_1000X_ID2r_REGIDf_GET
#define COMBO_1000X_ID2r_REGIDf_SET BCM84834_COMBO_1000X_ID2r_REGIDf_SET
#define READ_COMBO_1000X_ID2r BCM84834_READ_COMBO_1000X_ID2r
#define WRITE_COMBO_1000X_ID2r BCM84834_WRITE_COMBO_1000X_ID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_ID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_AUTONEGADV
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe4
 * DEVAD:    4
 * DESC:     IEEE auto-negotiation advertised abilities register
 * SIZE:     32
 * FIELDS:
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     REMOTE_FAULT     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_AUTONEGADVr (0x0004ffe4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_AUTONEGADV.
 *
 */
typedef union BCM84834_COMBO_1000X_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t combo_1000x_autonegadv[1];
	uint32_t _combo_1000x_autonegadv;
} BCM84834_COMBO_1000X_AUTONEGADVr_t;

#define BCM84834_COMBO_1000X_AUTONEGADVr_CLR(r) (r).combo_1000x_autonegadv[0] = 0
#define BCM84834_COMBO_1000X_AUTONEGADVr_SET(r,d) (r).combo_1000x_autonegadv[0] = d
#define BCM84834_COMBO_1000X_AUTONEGADVr_GET(r) (r).combo_1000x_autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).combo_1000x_autonegadv[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).combo_1000x_autonegadv[0]=(((r).combo_1000x_autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).combo_1000x_autonegadv[0]) >> 12) & 0x3)
#define BCM84834_COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).combo_1000x_autonegadv[0]=(((r).combo_1000x_autonegadv[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCM84834_COMBO_1000X_AUTONEGADVr_PAUSEf_GET(r) ((((r).combo_1000x_autonegadv[0]) >> 7) & 0x3)
#define BCM84834_COMBO_1000X_AUTONEGADVr_PAUSEf_SET(r,f) (r).combo_1000x_autonegadv[0]=(((r).combo_1000x_autonegadv[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCM84834_COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_GET(r) ((((r).combo_1000x_autonegadv[0]) >> 6) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_SET(r,f) (r).combo_1000x_autonegadv[0]=(((r).combo_1000x_autonegadv[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_GET(r) ((((r).combo_1000x_autonegadv[0]) >> 5) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_SET(r,f) (r).combo_1000x_autonegadv[0]=(((r).combo_1000x_autonegadv[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access COMBO_1000X_AUTONEGADV.
 *
 */
#define BCM84834_READ_COMBO_1000X_AUTONEGADVr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_AUTONEGADVr,(_r._combo_1000x_autonegadv))
#define BCM84834_WRITE_COMBO_1000X_AUTONEGADVr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_AUTONEGADVr,(_r._combo_1000x_autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_AUTONEGADVr BCM84834_COMBO_1000X_AUTONEGADVr
#define COMBO_1000X_AUTONEGADVr_SIZE BCM84834_COMBO_1000X_AUTONEGADVr_SIZE
typedef BCM84834_COMBO_1000X_AUTONEGADVr_t COMBO_1000X_AUTONEGADVr_t;
#define COMBO_1000X_AUTONEGADVr_CLR BCM84834_COMBO_1000X_AUTONEGADVr_CLR
#define COMBO_1000X_AUTONEGADVr_SET BCM84834_COMBO_1000X_AUTONEGADVr_SET
#define COMBO_1000X_AUTONEGADVr_GET BCM84834_COMBO_1000X_AUTONEGADVr_GET
#define COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_GET
#define COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGADVr_NEXT_PAGEf_SET
#define COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_GET BCM84834_COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_GET
#define COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_SET BCM84834_COMBO_1000X_AUTONEGADVr_REMOTE_FAULTf_SET
#define COMBO_1000X_AUTONEGADVr_PAUSEf_GET BCM84834_COMBO_1000X_AUTONEGADVr_PAUSEf_GET
#define COMBO_1000X_AUTONEGADVr_PAUSEf_SET BCM84834_COMBO_1000X_AUTONEGADVr_PAUSEf_SET
#define COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_GET BCM84834_COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_GET
#define COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_SET BCM84834_COMBO_1000X_AUTONEGADVr_HALF_DUPLEXf_SET
#define COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_GET BCM84834_COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_GET
#define COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_SET BCM84834_COMBO_1000X_AUTONEGADVr_FULL_DUPLEXf_SET
#define READ_COMBO_1000X_AUTONEGADVr BCM84834_READ_COMBO_1000X_AUTONEGADVr
#define WRITE_COMBO_1000X_AUTONEGADVr BCM84834_WRITE_COMBO_1000X_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_AUTONEGLPABIL
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe5
 * DEVAD:    4
 * DESC:     IEEE auto-negotiation link partner abilities register
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_AUTONEGLPABILr (0x0004ffe5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_AUTONEGLPABILr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_AUTONEGLPABIL.
 *
 */
typedef union BCM84834_COMBO_1000X_AUTONEGLPABILr_s {
	uint32_t v[1];
	uint32_t combo_1000x_autoneglpabil[1];
	uint32_t _combo_1000x_autoneglpabil;
} BCM84834_COMBO_1000X_AUTONEGLPABILr_t;

#define BCM84834_COMBO_1000X_AUTONEGLPABILr_CLR(r) (r).combo_1000x_autoneglpabil[0] = 0
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_SET(r,d) (r).combo_1000x_autoneglpabil[0] = d
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_GET(r) (r).combo_1000x_autoneglpabil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 12) & 0x3)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_PAUSEf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 7) & 0x3)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_PAUSEf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 6) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_GET(r) ((((r).combo_1000x_autoneglpabil[0]) >> 5) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_GET(r) (((r).combo_1000x_autoneglpabil[0]) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_SET(r,f) (r).combo_1000x_autoneglpabil[0]=(((r).combo_1000x_autoneglpabil[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_1000X_AUTONEGLPABIL.
 *
 */
#define BCM84834_READ_COMBO_1000X_AUTONEGLPABILr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_AUTONEGLPABILr,(_r._combo_1000x_autoneglpabil))
#define BCM84834_WRITE_COMBO_1000X_AUTONEGLPABILr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_AUTONEGLPABILr,(_r._combo_1000x_autoneglpabil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_AUTONEGLPABILr BCM84834_COMBO_1000X_AUTONEGLPABILr
#define COMBO_1000X_AUTONEGLPABILr_SIZE BCM84834_COMBO_1000X_AUTONEGLPABILr_SIZE
typedef BCM84834_COMBO_1000X_AUTONEGLPABILr_t COMBO_1000X_AUTONEGLPABILr_t;
#define COMBO_1000X_AUTONEGLPABILr_CLR BCM84834_COMBO_1000X_AUTONEGLPABILr_CLR
#define COMBO_1000X_AUTONEGLPABILr_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_SET
#define COMBO_1000X_AUTONEGLPABILr_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_GET
#define COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_GET
#define COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_NEXT_PAGEf_SET
#define COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_GET
#define COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_ACKNOWLEDGEf_SET
#define COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_GET
#define COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_REMOTE_FAULTf_SET
#define COMBO_1000X_AUTONEGLPABILr_PAUSEf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_PAUSEf_GET
#define COMBO_1000X_AUTONEGLPABILr_PAUSEf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_PAUSEf_SET
#define COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_GET
#define COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_HALF_DUPLEXf_SET
#define COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_GET
#define COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_FULL_DUPLEXf_SET
#define COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_GET BCM84834_COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_GET
#define COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_SET BCM84834_COMBO_1000X_AUTONEGLPABILr_SGMII_MODEf_SET
#define READ_COMBO_1000X_AUTONEGLPABILr BCM84834_READ_COMBO_1000X_AUTONEGLPABILr
#define WRITE_COMBO_1000X_AUTONEGLPABILr BCM84834_WRITE_COMBO_1000X_AUTONEGLPABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_AUTONEGLPABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_AUTONEGEXP
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe6
 * DEVAD:    4
 * DESC:     IEEE auto-negotiation expansion register
 * SIZE:     32
 * FIELDS:
 *     PAGE_RECEIVED    
 *     NEXT_PAGE_ABIL   
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_AUTONEGEXPr (0x0004ffe6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_AUTONEGEXPr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_AUTONEGEXP.
 *
 */
typedef union BCM84834_COMBO_1000X_AUTONEGEXPr_s {
	uint32_t v[1];
	uint32_t combo_1000x_autonegexp[1];
	uint32_t _combo_1000x_autonegexp;
} BCM84834_COMBO_1000X_AUTONEGEXPr_t;

#define BCM84834_COMBO_1000X_AUTONEGEXPr_CLR(r) (r).combo_1000x_autonegexp[0] = 0
#define BCM84834_COMBO_1000X_AUTONEGEXPr_SET(r,d) (r).combo_1000x_autonegexp[0] = d
#define BCM84834_COMBO_1000X_AUTONEGEXPr_GET(r) (r).combo_1000x_autonegexp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_GET(r) ((((r).combo_1000x_autonegexp[0]) >> 2) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_SET(r,f) (r).combo_1000x_autonegexp[0]=(((r).combo_1000x_autonegexp[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_GET(r) ((((r).combo_1000x_autonegexp[0]) >> 1) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_SET(r,f) (r).combo_1000x_autonegexp[0]=(((r).combo_1000x_autonegexp[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access COMBO_1000X_AUTONEGEXP.
 *
 */
#define BCM84834_READ_COMBO_1000X_AUTONEGEXPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_AUTONEGEXPr,(_r._combo_1000x_autonegexp))
#define BCM84834_WRITE_COMBO_1000X_AUTONEGEXPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_AUTONEGEXPr,(_r._combo_1000x_autonegexp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_AUTONEGEXPr BCM84834_COMBO_1000X_AUTONEGEXPr
#define COMBO_1000X_AUTONEGEXPr_SIZE BCM84834_COMBO_1000X_AUTONEGEXPr_SIZE
typedef BCM84834_COMBO_1000X_AUTONEGEXPr_t COMBO_1000X_AUTONEGEXPr_t;
#define COMBO_1000X_AUTONEGEXPr_CLR BCM84834_COMBO_1000X_AUTONEGEXPr_CLR
#define COMBO_1000X_AUTONEGEXPr_SET BCM84834_COMBO_1000X_AUTONEGEXPr_SET
#define COMBO_1000X_AUTONEGEXPr_GET BCM84834_COMBO_1000X_AUTONEGEXPr_GET
#define COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_GET BCM84834_COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_GET
#define COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_SET BCM84834_COMBO_1000X_AUTONEGEXPr_NEXT_PAGE_ABILf_SET
#define COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_GET BCM84834_COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_GET
#define COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_SET BCM84834_COMBO_1000X_AUTONEGEXPr_PAGE_RECEIVEDf_SET
#define READ_COMBO_1000X_AUTONEGEXPr BCM84834_READ_COMBO_1000X_AUTONEGEXPr
#define WRITE_COMBO_1000X_AUTONEGEXPr BCM84834_WRITE_COMBO_1000X_AUTONEGEXPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_AUTONEGEXPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_AUTONEGNP
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe7
 * DEVAD:    4
 * DESC:     IEEE auto-negotiation next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_AUTONEGNPr (0x0004ffe7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_AUTONEGNPr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_AUTONEGNP.
 *
 */
typedef union BCM84834_COMBO_1000X_AUTONEGNPr_s {
	uint32_t v[1];
	uint32_t combo_1000x_autonegnp[1];
	uint32_t _combo_1000x_autonegnp;
} BCM84834_COMBO_1000X_AUTONEGNPr_t;

#define BCM84834_COMBO_1000X_AUTONEGNPr_CLR(r) (r).combo_1000x_autonegnp[0] = 0
#define BCM84834_COMBO_1000X_AUTONEGNPr_SET(r,d) (r).combo_1000x_autonegnp[0] = d
#define BCM84834_COMBO_1000X_AUTONEGNPr_GET(r) (r).combo_1000x_autonegnp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_GET(r) ((((r).combo_1000x_autonegnp[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_AUTONEGNPr_ACKf_GET(r) ((((r).combo_1000x_autonegnp[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGNPr_ACKf_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_GET(r) ((((r).combo_1000x_autonegnp[0]) >> 13) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_1000X_AUTONEGNPr_ACK2f_GET(r) ((((r).combo_1000x_autonegnp[0]) >> 12) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGNPr_ACK2f_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_1000X_AUTONEGNPr_TOGGLEf_GET(r) ((((r).combo_1000x_autonegnp[0]) >> 11) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGNPr_TOGGLEf_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGEf_GET(r) (((r).combo_1000x_autonegnp[0]) & 0x7ff)
#define BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGEf_SET(r,f) (r).combo_1000x_autonegnp[0]=(((r).combo_1000x_autonegnp[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access COMBO_1000X_AUTONEGNP.
 *
 */
#define BCM84834_READ_COMBO_1000X_AUTONEGNPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_AUTONEGNPr,(_r._combo_1000x_autonegnp))
#define BCM84834_WRITE_COMBO_1000X_AUTONEGNPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_AUTONEGNPr,(_r._combo_1000x_autonegnp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_AUTONEGNPr BCM84834_COMBO_1000X_AUTONEGNPr
#define COMBO_1000X_AUTONEGNPr_SIZE BCM84834_COMBO_1000X_AUTONEGNPr_SIZE
typedef BCM84834_COMBO_1000X_AUTONEGNPr_t COMBO_1000X_AUTONEGNPr_t;
#define COMBO_1000X_AUTONEGNPr_CLR BCM84834_COMBO_1000X_AUTONEGNPr_CLR
#define COMBO_1000X_AUTONEGNPr_SET BCM84834_COMBO_1000X_AUTONEGNPr_SET
#define COMBO_1000X_AUTONEGNPr_GET BCM84834_COMBO_1000X_AUTONEGNPr_GET
#define COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_GET
#define COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGNPr_NEXT_PAGEf_SET
#define COMBO_1000X_AUTONEGNPr_ACKf_GET BCM84834_COMBO_1000X_AUTONEGNPr_ACKf_GET
#define COMBO_1000X_AUTONEGNPr_ACKf_SET BCM84834_COMBO_1000X_AUTONEGNPr_ACKf_SET
#define COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_GET
#define COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGE_PAGEf_SET
#define COMBO_1000X_AUTONEGNPr_ACK2f_GET BCM84834_COMBO_1000X_AUTONEGNPr_ACK2f_GET
#define COMBO_1000X_AUTONEGNPr_ACK2f_SET BCM84834_COMBO_1000X_AUTONEGNPr_ACK2f_SET
#define COMBO_1000X_AUTONEGNPr_TOGGLEf_GET BCM84834_COMBO_1000X_AUTONEGNPr_TOGGLEf_GET
#define COMBO_1000X_AUTONEGNPr_TOGGLEf_SET BCM84834_COMBO_1000X_AUTONEGNPr_TOGGLEf_SET
#define COMBO_1000X_AUTONEGNPr_MESSAGEf_GET BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGEf_GET
#define COMBO_1000X_AUTONEGNPr_MESSAGEf_SET BCM84834_COMBO_1000X_AUTONEGNPr_MESSAGEf_SET
#define READ_COMBO_1000X_AUTONEGNPr BCM84834_READ_COMBO_1000X_AUTONEGNPr
#define WRITE_COMBO_1000X_AUTONEGNPr BCM84834_WRITE_COMBO_1000X_AUTONEGNPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_AUTONEGNPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_AUTONEGLPABIL2
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffe8
 * DEVAD:    4
 * DESC:     IEEE auto-negotiation link partner next page register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE          
 *     TOGGLE           
 *     ACK2             
 *     MESSAGE_PAGE     
 *     ACK              
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r (0x0004ffe8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_AUTONEGLPABIL2.
 *
 */
typedef union BCM84834_COMBO_1000X_AUTONEGLPABIL2r_s {
	uint32_t v[1];
	uint32_t combo_1000x_autoneglpabil2[1];
	uint32_t _combo_1000x_autoneglpabil2;
} BCM84834_COMBO_1000X_AUTONEGLPABIL2r_t;

#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_CLR(r) (r).combo_1000x_autoneglpabil2[0] = 0
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_SET(r,d) (r).combo_1000x_autoneglpabil2[0] = d
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_GET(r) (r).combo_1000x_autoneglpabil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_GET(r) ((((r).combo_1000x_autoneglpabil2[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACKf_GET(r) ((((r).combo_1000x_autoneglpabil2[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACKf_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET(r) ((((r).combo_1000x_autoneglpabil2[0]) >> 13) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACK2f_GET(r) ((((r).combo_1000x_autoneglpabil2[0]) >> 12) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACK2f_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_GET(r) ((((r).combo_1000x_autoneglpabil2[0]) >> 11) & 0x1)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_GET(r) (((r).combo_1000x_autoneglpabil2[0]) & 0x7ff)
#define BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_SET(r,f) (r).combo_1000x_autoneglpabil2[0]=(((r).combo_1000x_autoneglpabil2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access COMBO_1000X_AUTONEGLPABIL2.
 *
 */
#define BCM84834_READ_COMBO_1000X_AUTONEGLPABIL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_AUTONEGLPABIL2r,(_r._combo_1000x_autoneglpabil2))
#define BCM84834_WRITE_COMBO_1000X_AUTONEGLPABIL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_AUTONEGLPABIL2r,(_r._combo_1000x_autoneglpabil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_AUTONEGLPABIL2r BCM84834_COMBO_1000X_AUTONEGLPABIL2r
#define COMBO_1000X_AUTONEGLPABIL2r_SIZE BCM84834_COMBO_1000X_AUTONEGLPABIL2r_SIZE
typedef BCM84834_COMBO_1000X_AUTONEGLPABIL2r_t COMBO_1000X_AUTONEGLPABIL2r_t;
#define COMBO_1000X_AUTONEGLPABIL2r_CLR BCM84834_COMBO_1000X_AUTONEGLPABIL2r_CLR
#define COMBO_1000X_AUTONEGLPABIL2r_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_SET
#define COMBO_1000X_AUTONEGLPABIL2r_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_GET
#define COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_GET
#define COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_NEXT_PAGEf_SET
#define COMBO_1000X_AUTONEGLPABIL2r_ACKf_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACKf_GET
#define COMBO_1000X_AUTONEGLPABIL2r_ACKf_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACKf_SET
#define COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET
#define COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET
#define COMBO_1000X_AUTONEGLPABIL2r_ACK2f_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACK2f_GET
#define COMBO_1000X_AUTONEGLPABIL2r_ACK2f_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_ACK2f_SET
#define COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_GET
#define COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_TOGGLEf_SET
#define COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_GET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_GET
#define COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_SET BCM84834_COMBO_1000X_AUTONEGLPABIL2r_MESSAGEf_SET
#define READ_COMBO_1000X_AUTONEGLPABIL2r BCM84834_READ_COMBO_1000X_AUTONEGLPABIL2r
#define WRITE_COMBO_1000X_AUTONEGLPABIL2r BCM84834_WRITE_COMBO_1000X_AUTONEGLPABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_AUTONEGLPABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_1000X_MIIEXTSTAT
 * BLOCKS:   XFIM_CL22_REGS
 * REGADDR:  0xffef
 * DEVAD:    4
 * DESC:     IEEE MII extended status register
 * SIZE:     32
 * FIELDS:
 *     S1000BASE_T_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_T_FULL_DUPLEX_CAPABLE 
 *     S1000BASE_X_HALF_DUPLEX_CAPABLE 
 *     S1000BASE_X_FULL_DUPLEX_CAPABLE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_1000X_MIIEXTSTATr (0x0004ffef | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_1000X_MIIEXTSTATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_1000X_MIIEXTSTAT.
 *
 */
typedef union BCM84834_COMBO_1000X_MIIEXTSTATr_s {
	uint32_t v[1];
	uint32_t combo_1000x_miiextstat[1];
	uint32_t _combo_1000x_miiextstat;
} BCM84834_COMBO_1000X_MIIEXTSTATr_t;

#define BCM84834_COMBO_1000X_MIIEXTSTATr_CLR(r) (r).combo_1000x_miiextstat[0] = 0
#define BCM84834_COMBO_1000X_MIIEXTSTATr_SET(r,d) (r).combo_1000x_miiextstat[0] = d
#define BCM84834_COMBO_1000X_MIIEXTSTATr_GET(r) (r).combo_1000x_miiextstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_miiextstat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_miiextstat[0]=(((r).combo_1000x_miiextstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_miiextstat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_miiextstat[0]=(((r).combo_1000x_miiextstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_miiextstat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_miiextstat[0]=(((r).combo_1000x_miiextstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_1000x_miiextstat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_1000x_miiextstat[0]=(((r).combo_1000x_miiextstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access COMBO_1000X_MIIEXTSTAT.
 *
 */
#define BCM84834_READ_COMBO_1000X_MIIEXTSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_1000X_MIIEXTSTATr,(_r._combo_1000x_miiextstat))
#define BCM84834_WRITE_COMBO_1000X_MIIEXTSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_1000X_MIIEXTSTATr,(_r._combo_1000x_miiextstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_1000X_MIIEXTSTATr BCM84834_COMBO_1000X_MIIEXTSTATr
#define COMBO_1000X_MIIEXTSTATr_SIZE BCM84834_COMBO_1000X_MIIEXTSTATr_SIZE
typedef BCM84834_COMBO_1000X_MIIEXTSTATr_t COMBO_1000X_MIIEXTSTATr_t;
#define COMBO_1000X_MIIEXTSTATr_CLR BCM84834_COMBO_1000X_MIIEXTSTATr_CLR
#define COMBO_1000X_MIIEXTSTATr_SET BCM84834_COMBO_1000X_MIIEXTSTATr_SET
#define COMBO_1000X_MIIEXTSTATr_GET BCM84834_COMBO_1000X_MIIEXTSTATr_GET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_1000X_MIIEXTSTATr_S1000BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define READ_COMBO_1000X_MIIEXTSTATr BCM84834_READ_COMBO_1000X_MIIEXTSTATr
#define WRITE_COMBO_1000X_MIIEXTSTATr BCM84834_WRITE_COMBO_1000X_MIIEXTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_1000X_MIIEXTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGCTRL
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0000
 * DEVAD:    7
 * DESC:     AutoNegCtrl Register
 * SIZE:     32
 * FIELDS:
 *     RESTART_AN       
 *     AN_ENABLE        
 *     EXTENDED_NP_CTRL 
 *     AN_RESET         
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGCTRLr (0x00070000 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGCTRLr_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGCTRL.
 *
 */
typedef union BCM84834_AN_AUTONEGCTRLr_s {
	uint32_t v[1];
	uint32_t an_autonegctrl[1];
	uint32_t _an_autonegctrl;
} BCM84834_AN_AUTONEGCTRLr_t;

#define BCM84834_AN_AUTONEGCTRLr_CLR(r) (r).an_autonegctrl[0] = 0
#define BCM84834_AN_AUTONEGCTRLr_SET(r,d) (r).an_autonegctrl[0] = d
#define BCM84834_AN_AUTONEGCTRLr_GET(r) (r).an_autonegctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGCTRLr_AN_RESETf_GET(r) ((((r).an_autonegctrl[0]) >> 15) & 0x1)
#define BCM84834_AN_AUTONEGCTRLr_AN_RESETf_SET(r,f) (r).an_autonegctrl[0]=(((r).an_autonegctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_GET(r) ((((r).an_autonegctrl[0]) >> 13) & 0x1)
#define BCM84834_AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_SET(r,f) (r).an_autonegctrl[0]=(((r).an_autonegctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_AN_AUTONEGCTRLr_AN_ENABLEf_GET(r) ((((r).an_autonegctrl[0]) >> 12) & 0x1)
#define BCM84834_AN_AUTONEGCTRLr_AN_ENABLEf_SET(r,f) (r).an_autonegctrl[0]=(((r).an_autonegctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_AUTONEGCTRLr_RESTART_ANf_GET(r) ((((r).an_autonegctrl[0]) >> 9) & 0x1)
#define BCM84834_AN_AUTONEGCTRLr_RESTART_ANf_SET(r,f) (r).an_autonegctrl[0]=(((r).an_autonegctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*
 * These macros can be used to access AN_AUTONEGCTRL.
 *
 */
#define BCM84834_READ_AN_AUTONEGCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGCTRLr,(_r._an_autonegctrl))
#define BCM84834_WRITE_AN_AUTONEGCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGCTRLr,(_r._an_autonegctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGCTRLr BCM84834_AN_AUTONEGCTRLr
#define AN_AUTONEGCTRLr_SIZE BCM84834_AN_AUTONEGCTRLr_SIZE
typedef BCM84834_AN_AUTONEGCTRLr_t AN_AUTONEGCTRLr_t;
#define AN_AUTONEGCTRLr_CLR BCM84834_AN_AUTONEGCTRLr_CLR
#define AN_AUTONEGCTRLr_SET BCM84834_AN_AUTONEGCTRLr_SET
#define AN_AUTONEGCTRLr_GET BCM84834_AN_AUTONEGCTRLr_GET
#define AN_AUTONEGCTRLr_AN_RESETf_GET BCM84834_AN_AUTONEGCTRLr_AN_RESETf_GET
#define AN_AUTONEGCTRLr_AN_RESETf_SET BCM84834_AN_AUTONEGCTRLr_AN_RESETf_SET
#define AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_GET BCM84834_AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_GET
#define AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_SET BCM84834_AN_AUTONEGCTRLr_EXTENDED_NP_CTRLf_SET
#define AN_AUTONEGCTRLr_AN_ENABLEf_GET BCM84834_AN_AUTONEGCTRLr_AN_ENABLEf_GET
#define AN_AUTONEGCTRLr_AN_ENABLEf_SET BCM84834_AN_AUTONEGCTRLr_AN_ENABLEf_SET
#define AN_AUTONEGCTRLr_RESTART_ANf_GET BCM84834_AN_AUTONEGCTRLr_RESTART_ANf_GET
#define AN_AUTONEGCTRLr_RESTART_ANf_SET BCM84834_AN_AUTONEGCTRLr_RESTART_ANf_SET
#define READ_AN_AUTONEGCTRLr BCM84834_READ_AN_AUTONEGCTRLr
#define WRITE_AN_AUTONEGCTRLr BCM84834_WRITE_AN_AUTONEGCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGSTAT
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0001
 * DEVAD:    7
 * DESC:     AutoNegStat Register
 * SIZE:     32
 * FIELDS:
 *     LP_AUTONEG_ABIL  
 *     LINK_STATUS      
 *     AUTONEG_ABIL     
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     PAGE_RECEIVED    
 *     EXTENDED_NEXT_PAGE_STAT 
 *     PARALLEL_DETECTION_FAULT 
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGSTATr (0x00070001 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGSTATr_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGSTAT.
 *
 */
typedef union BCM84834_AN_AUTONEGSTATr_s {
	uint32_t v[1];
	uint32_t an_autonegstat[1];
	uint32_t _an_autonegstat;
} BCM84834_AN_AUTONEGSTATr_t;

#define BCM84834_AN_AUTONEGSTATr_CLR(r) (r).an_autonegstat[0] = 0
#define BCM84834_AN_AUTONEGSTATr_SET(r,d) (r).an_autonegstat[0] = d
#define BCM84834_AN_AUTONEGSTATr_GET(r) (r).an_autonegstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_GET(r) ((((r).an_autonegstat[0]) >> 9) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_GET(r) ((((r).an_autonegstat[0]) >> 7) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_AN_AUTONEGSTATr_PAGE_RECEIVEDf_GET(r) ((((r).an_autonegstat[0]) >> 6) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_PAGE_RECEIVEDf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_AN_AUTONEGSTATr_AUTONEG_COMPLETEf_GET(r) ((((r).an_autonegstat[0]) >> 5) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_AUTONEG_COMPLETEf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_AN_AUTONEGSTATr_REMOTE_FAULTf_GET(r) ((((r).an_autonegstat[0]) >> 4) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_REMOTE_FAULTf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_AN_AUTONEGSTATr_AUTONEG_ABILf_GET(r) ((((r).an_autonegstat[0]) >> 3) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_AUTONEG_ABILf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_AN_AUTONEGSTATr_LINK_STATUSf_GET(r) ((((r).an_autonegstat[0]) >> 2) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_LINK_STATUSf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_AN_AUTONEGSTATr_LP_AUTONEG_ABILf_GET(r) (((r).an_autonegstat[0]) & 0x1)
#define BCM84834_AN_AUTONEGSTATr_LP_AUTONEG_ABILf_SET(r,f) (r).an_autonegstat[0]=(((r).an_autonegstat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AN_AUTONEGSTAT.
 *
 */
#define BCM84834_READ_AN_AUTONEGSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGSTATr,(_r._an_autonegstat))
#define BCM84834_WRITE_AN_AUTONEGSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGSTATr,(_r._an_autonegstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGSTATr BCM84834_AN_AUTONEGSTATr
#define AN_AUTONEGSTATr_SIZE BCM84834_AN_AUTONEGSTATr_SIZE
typedef BCM84834_AN_AUTONEGSTATr_t AN_AUTONEGSTATr_t;
#define AN_AUTONEGSTATr_CLR BCM84834_AN_AUTONEGSTATr_CLR
#define AN_AUTONEGSTATr_SET BCM84834_AN_AUTONEGSTATr_SET
#define AN_AUTONEGSTATr_GET BCM84834_AN_AUTONEGSTATr_GET
#define AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_GET BCM84834_AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_GET
#define AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_SET BCM84834_AN_AUTONEGSTATr_PARALLEL_DETECTION_FAULTf_SET
#define AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_GET BCM84834_AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_GET
#define AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_SET BCM84834_AN_AUTONEGSTATr_EXTENDED_NEXT_PAGE_STATf_SET
#define AN_AUTONEGSTATr_PAGE_RECEIVEDf_GET BCM84834_AN_AUTONEGSTATr_PAGE_RECEIVEDf_GET
#define AN_AUTONEGSTATr_PAGE_RECEIVEDf_SET BCM84834_AN_AUTONEGSTATr_PAGE_RECEIVEDf_SET
#define AN_AUTONEGSTATr_AUTONEG_COMPLETEf_GET BCM84834_AN_AUTONEGSTATr_AUTONEG_COMPLETEf_GET
#define AN_AUTONEGSTATr_AUTONEG_COMPLETEf_SET BCM84834_AN_AUTONEGSTATr_AUTONEG_COMPLETEf_SET
#define AN_AUTONEGSTATr_REMOTE_FAULTf_GET BCM84834_AN_AUTONEGSTATr_REMOTE_FAULTf_GET
#define AN_AUTONEGSTATr_REMOTE_FAULTf_SET BCM84834_AN_AUTONEGSTATr_REMOTE_FAULTf_SET
#define AN_AUTONEGSTATr_AUTONEG_ABILf_GET BCM84834_AN_AUTONEGSTATr_AUTONEG_ABILf_GET
#define AN_AUTONEGSTATr_AUTONEG_ABILf_SET BCM84834_AN_AUTONEGSTATr_AUTONEG_ABILf_SET
#define AN_AUTONEGSTATr_LINK_STATUSf_GET BCM84834_AN_AUTONEGSTATr_LINK_STATUSf_GET
#define AN_AUTONEGSTATr_LINK_STATUSf_SET BCM84834_AN_AUTONEGSTATr_LINK_STATUSf_SET
#define AN_AUTONEGSTATr_LP_AUTONEG_ABILf_GET BCM84834_AN_AUTONEGSTATr_LP_AUTONEG_ABILf_GET
#define AN_AUTONEGSTATr_LP_AUTONEG_ABILf_SET BCM84834_AN_AUTONEGSTATr_LP_AUTONEG_ABILf_SET
#define READ_AN_AUTONEGSTATr BCM84834_READ_AN_AUTONEGSTATr
#define WRITE_AN_AUTONEGSTATr BCM84834_WRITE_AN_AUTONEGSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGDEVID0
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0002
 * DEVAD:    7
 * DESC:     AutoNegDevID0 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGDEVID0    
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGDEVID0r (0x00070002 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGDEVID0r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGDEVID0.
 *
 */
typedef union BCM84834_AN_AUTONEGDEVID0r_s {
	uint32_t v[1];
	uint32_t an_autonegdevid0[1];
	uint32_t _an_autonegdevid0;
} BCM84834_AN_AUTONEGDEVID0r_t;

#define BCM84834_AN_AUTONEGDEVID0r_CLR(r) (r).an_autonegdevid0[0] = 0
#define BCM84834_AN_AUTONEGDEVID0r_SET(r,d) (r).an_autonegdevid0[0] = d
#define BCM84834_AN_AUTONEGDEVID0r_GET(r) (r).an_autonegdevid0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGDEVID0r_AUTONEGDEVID0f_GET(r) (((r).an_autonegdevid0[0]) & 0xffff)
#define BCM84834_AN_AUTONEGDEVID0r_AUTONEGDEVID0f_SET(r,f) (r).an_autonegdevid0[0]=(((r).an_autonegdevid0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGDEVID0.
 *
 */
#define BCM84834_READ_AN_AUTONEGDEVID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGDEVID0r,(_r._an_autonegdevid0))
#define BCM84834_WRITE_AN_AUTONEGDEVID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGDEVID0r,(_r._an_autonegdevid0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGDEVID0r BCM84834_AN_AUTONEGDEVID0r
#define AN_AUTONEGDEVID0r_SIZE BCM84834_AN_AUTONEGDEVID0r_SIZE
typedef BCM84834_AN_AUTONEGDEVID0r_t AN_AUTONEGDEVID0r_t;
#define AN_AUTONEGDEVID0r_CLR BCM84834_AN_AUTONEGDEVID0r_CLR
#define AN_AUTONEGDEVID0r_SET BCM84834_AN_AUTONEGDEVID0r_SET
#define AN_AUTONEGDEVID0r_GET BCM84834_AN_AUTONEGDEVID0r_GET
#define AN_AUTONEGDEVID0r_AUTONEGDEVID0f_GET BCM84834_AN_AUTONEGDEVID0r_AUTONEGDEVID0f_GET
#define AN_AUTONEGDEVID0r_AUTONEGDEVID0f_SET BCM84834_AN_AUTONEGDEVID0r_AUTONEGDEVID0f_SET
#define READ_AN_AUTONEGDEVID0r BCM84834_READ_AN_AUTONEGDEVID0r
#define WRITE_AN_AUTONEGDEVID0r BCM84834_WRITE_AN_AUTONEGDEVID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGDEVID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGDEVID1
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0003
 * DEVAD:    7
 * DESC:     AutoNegDevID1 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGDEVID1    
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGDEVID1r (0x00070003 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGDEVID1r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGDEVID1.
 *
 */
typedef union BCM84834_AN_AUTONEGDEVID1r_s {
	uint32_t v[1];
	uint32_t an_autonegdevid1[1];
	uint32_t _an_autonegdevid1;
} BCM84834_AN_AUTONEGDEVID1r_t;

#define BCM84834_AN_AUTONEGDEVID1r_CLR(r) (r).an_autonegdevid1[0] = 0
#define BCM84834_AN_AUTONEGDEVID1r_SET(r,d) (r).an_autonegdevid1[0] = d
#define BCM84834_AN_AUTONEGDEVID1r_GET(r) (r).an_autonegdevid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGDEVID1r_AUTONEGDEVID1f_GET(r) (((r).an_autonegdevid1[0]) & 0xffff)
#define BCM84834_AN_AUTONEGDEVID1r_AUTONEGDEVID1f_SET(r,f) (r).an_autonegdevid1[0]=(((r).an_autonegdevid1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGDEVID1.
 *
 */
#define BCM84834_READ_AN_AUTONEGDEVID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGDEVID1r,(_r._an_autonegdevid1))
#define BCM84834_WRITE_AN_AUTONEGDEVID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGDEVID1r,(_r._an_autonegdevid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGDEVID1r BCM84834_AN_AUTONEGDEVID1r
#define AN_AUTONEGDEVID1r_SIZE BCM84834_AN_AUTONEGDEVID1r_SIZE
typedef BCM84834_AN_AUTONEGDEVID1r_t AN_AUTONEGDEVID1r_t;
#define AN_AUTONEGDEVID1r_CLR BCM84834_AN_AUTONEGDEVID1r_CLR
#define AN_AUTONEGDEVID1r_SET BCM84834_AN_AUTONEGDEVID1r_SET
#define AN_AUTONEGDEVID1r_GET BCM84834_AN_AUTONEGDEVID1r_GET
#define AN_AUTONEGDEVID1r_AUTONEGDEVID1f_GET BCM84834_AN_AUTONEGDEVID1r_AUTONEGDEVID1f_GET
#define AN_AUTONEGDEVID1r_AUTONEGDEVID1f_SET BCM84834_AN_AUTONEGDEVID1r_AUTONEGDEVID1f_SET
#define READ_AN_AUTONEGDEVID1r BCM84834_READ_AN_AUTONEGDEVID1r
#define WRITE_AN_AUTONEGDEVID1r BCM84834_WRITE_AN_AUTONEGDEVID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGDEVID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGDEVINPKG0
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0005
 * DEVAD:    7
 * DESC:     AutoNegDevInPkg0 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGDEVINPKG0 
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGDEVINPKG0r (0x00070005 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGDEVINPKG0r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGDEVINPKG0.
 *
 */
typedef union BCM84834_AN_AUTONEGDEVINPKG0r_s {
	uint32_t v[1];
	uint32_t an_autonegdevinpkg0[1];
	uint32_t _an_autonegdevinpkg0;
} BCM84834_AN_AUTONEGDEVINPKG0r_t;

#define BCM84834_AN_AUTONEGDEVINPKG0r_CLR(r) (r).an_autonegdevinpkg0[0] = 0
#define BCM84834_AN_AUTONEGDEVINPKG0r_SET(r,d) (r).an_autonegdevinpkg0[0] = d
#define BCM84834_AN_AUTONEGDEVINPKG0r_GET(r) (r).an_autonegdevinpkg0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_GET(r) (((r).an_autonegdevinpkg0[0]) & 0xffff)
#define BCM84834_AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_SET(r,f) (r).an_autonegdevinpkg0[0]=(((r).an_autonegdevinpkg0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGDEVINPKG0.
 *
 */
#define BCM84834_READ_AN_AUTONEGDEVINPKG0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGDEVINPKG0r,(_r._an_autonegdevinpkg0))
#define BCM84834_WRITE_AN_AUTONEGDEVINPKG0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGDEVINPKG0r,(_r._an_autonegdevinpkg0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGDEVINPKG0r BCM84834_AN_AUTONEGDEVINPKG0r
#define AN_AUTONEGDEVINPKG0r_SIZE BCM84834_AN_AUTONEGDEVINPKG0r_SIZE
typedef BCM84834_AN_AUTONEGDEVINPKG0r_t AN_AUTONEGDEVINPKG0r_t;
#define AN_AUTONEGDEVINPKG0r_CLR BCM84834_AN_AUTONEGDEVINPKG0r_CLR
#define AN_AUTONEGDEVINPKG0r_SET BCM84834_AN_AUTONEGDEVINPKG0r_SET
#define AN_AUTONEGDEVINPKG0r_GET BCM84834_AN_AUTONEGDEVINPKG0r_GET
#define AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_GET BCM84834_AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_GET
#define AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_SET BCM84834_AN_AUTONEGDEVINPKG0r_AUTONEGDEVINPKG0f_SET
#define READ_AN_AUTONEGDEVINPKG0r BCM84834_READ_AN_AUTONEGDEVINPKG0r
#define WRITE_AN_AUTONEGDEVINPKG0r BCM84834_WRITE_AN_AUTONEGDEVINPKG0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGDEVINPKG0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGDEVINPKG1
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0006
 * DEVAD:    7
 * DESC:     AutoNegDevInPkg1 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGDEVINPKG1 
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGDEVINPKG1r (0x00070006 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGDEVINPKG1r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGDEVINPKG1.
 *
 */
typedef union BCM84834_AN_AUTONEGDEVINPKG1r_s {
	uint32_t v[1];
	uint32_t an_autonegdevinpkg1[1];
	uint32_t _an_autonegdevinpkg1;
} BCM84834_AN_AUTONEGDEVINPKG1r_t;

#define BCM84834_AN_AUTONEGDEVINPKG1r_CLR(r) (r).an_autonegdevinpkg1[0] = 0
#define BCM84834_AN_AUTONEGDEVINPKG1r_SET(r,d) (r).an_autonegdevinpkg1[0] = d
#define BCM84834_AN_AUTONEGDEVINPKG1r_GET(r) (r).an_autonegdevinpkg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_GET(r) (((r).an_autonegdevinpkg1[0]) & 0xffff)
#define BCM84834_AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_SET(r,f) (r).an_autonegdevinpkg1[0]=(((r).an_autonegdevinpkg1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGDEVINPKG1.
 *
 */
#define BCM84834_READ_AN_AUTONEGDEVINPKG1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGDEVINPKG1r,(_r._an_autonegdevinpkg1))
#define BCM84834_WRITE_AN_AUTONEGDEVINPKG1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGDEVINPKG1r,(_r._an_autonegdevinpkg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGDEVINPKG1r BCM84834_AN_AUTONEGDEVINPKG1r
#define AN_AUTONEGDEVINPKG1r_SIZE BCM84834_AN_AUTONEGDEVINPKG1r_SIZE
typedef BCM84834_AN_AUTONEGDEVINPKG1r_t AN_AUTONEGDEVINPKG1r_t;
#define AN_AUTONEGDEVINPKG1r_CLR BCM84834_AN_AUTONEGDEVINPKG1r_CLR
#define AN_AUTONEGDEVINPKG1r_SET BCM84834_AN_AUTONEGDEVINPKG1r_SET
#define AN_AUTONEGDEVINPKG1r_GET BCM84834_AN_AUTONEGDEVINPKG1r_GET
#define AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_GET BCM84834_AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_GET
#define AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_SET BCM84834_AN_AUTONEGDEVINPKG1r_AUTONEGDEVINPKG1f_SET
#define READ_AN_AUTONEGDEVINPKG1r BCM84834_READ_AN_AUTONEGDEVINPKG1r
#define WRITE_AN_AUTONEGDEVINPKG1r BCM84834_WRITE_AN_AUTONEGDEVINPKG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGDEVINPKG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGPKGID0
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x000e
 * DEVAD:    7
 * DESC:     AutoNegPkgID0 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGPKGID0    
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGPKGID0r (0x0007000e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGPKGID0r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGPKGID0.
 *
 */
typedef union BCM84834_AN_AUTONEGPKGID0r_s {
	uint32_t v[1];
	uint32_t an_autonegpkgid0[1];
	uint32_t _an_autonegpkgid0;
} BCM84834_AN_AUTONEGPKGID0r_t;

#define BCM84834_AN_AUTONEGPKGID0r_CLR(r) (r).an_autonegpkgid0[0] = 0
#define BCM84834_AN_AUTONEGPKGID0r_SET(r,d) (r).an_autonegpkgid0[0] = d
#define BCM84834_AN_AUTONEGPKGID0r_GET(r) (r).an_autonegpkgid0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGPKGID0r_AUTONEGPKGID0f_GET(r) (((r).an_autonegpkgid0[0]) & 0xffff)
#define BCM84834_AN_AUTONEGPKGID0r_AUTONEGPKGID0f_SET(r,f) (r).an_autonegpkgid0[0]=(((r).an_autonegpkgid0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGPKGID0.
 *
 */
#define BCM84834_READ_AN_AUTONEGPKGID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGPKGID0r,(_r._an_autonegpkgid0))
#define BCM84834_WRITE_AN_AUTONEGPKGID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGPKGID0r,(_r._an_autonegpkgid0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGPKGID0r BCM84834_AN_AUTONEGPKGID0r
#define AN_AUTONEGPKGID0r_SIZE BCM84834_AN_AUTONEGPKGID0r_SIZE
typedef BCM84834_AN_AUTONEGPKGID0r_t AN_AUTONEGPKGID0r_t;
#define AN_AUTONEGPKGID0r_CLR BCM84834_AN_AUTONEGPKGID0r_CLR
#define AN_AUTONEGPKGID0r_SET BCM84834_AN_AUTONEGPKGID0r_SET
#define AN_AUTONEGPKGID0r_GET BCM84834_AN_AUTONEGPKGID0r_GET
#define AN_AUTONEGPKGID0r_AUTONEGPKGID0f_GET BCM84834_AN_AUTONEGPKGID0r_AUTONEGPKGID0f_GET
#define AN_AUTONEGPKGID0r_AUTONEGPKGID0f_SET BCM84834_AN_AUTONEGPKGID0r_AUTONEGPKGID0f_SET
#define READ_AN_AUTONEGPKGID0r BCM84834_READ_AN_AUTONEGPKGID0r
#define WRITE_AN_AUTONEGPKGID0r BCM84834_WRITE_AN_AUTONEGPKGID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGPKGID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGPKGID1
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x000f
 * DEVAD:    7
 * DESC:     AutoNegPkgID1 Register
 * SIZE:     32
 * FIELDS:
 *     AUTONEGPKGID1    
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGPKGID1r (0x0007000f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGPKGID1r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGPKGID1.
 *
 */
typedef union BCM84834_AN_AUTONEGPKGID1r_s {
	uint32_t v[1];
	uint32_t an_autonegpkgid1[1];
	uint32_t _an_autonegpkgid1;
} BCM84834_AN_AUTONEGPKGID1r_t;

#define BCM84834_AN_AUTONEGPKGID1r_CLR(r) (r).an_autonegpkgid1[0] = 0
#define BCM84834_AN_AUTONEGPKGID1r_SET(r,d) (r).an_autonegpkgid1[0] = d
#define BCM84834_AN_AUTONEGPKGID1r_GET(r) (r).an_autonegpkgid1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGPKGID1r_AUTONEGPKGID1f_GET(r) (((r).an_autonegpkgid1[0]) & 0xffff)
#define BCM84834_AN_AUTONEGPKGID1r_AUTONEGPKGID1f_SET(r,f) (r).an_autonegpkgid1[0]=(((r).an_autonegpkgid1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGPKGID1.
 *
 */
#define BCM84834_READ_AN_AUTONEGPKGID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGPKGID1r,(_r._an_autonegpkgid1))
#define BCM84834_WRITE_AN_AUTONEGPKGID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGPKGID1r,(_r._an_autonegpkgid1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGPKGID1r BCM84834_AN_AUTONEGPKGID1r
#define AN_AUTONEGPKGID1r_SIZE BCM84834_AN_AUTONEGPKGID1r_SIZE
typedef BCM84834_AN_AUTONEGPKGID1r_t AN_AUTONEGPKGID1r_t;
#define AN_AUTONEGPKGID1r_CLR BCM84834_AN_AUTONEGPKGID1r_CLR
#define AN_AUTONEGPKGID1r_SET BCM84834_AN_AUTONEGPKGID1r_SET
#define AN_AUTONEGPKGID1r_GET BCM84834_AN_AUTONEGPKGID1r_GET
#define AN_AUTONEGPKGID1r_AUTONEGPKGID1f_GET BCM84834_AN_AUTONEGPKGID1r_AUTONEGPKGID1f_GET
#define AN_AUTONEGPKGID1r_AUTONEGPKGID1f_SET BCM84834_AN_AUTONEGPKGID1r_AUTONEGPKGID1f_SET
#define READ_AN_AUTONEGPKGID1r BCM84834_READ_AN_AUTONEGPKGID1r
#define WRITE_AN_AUTONEGPKGID1r BCM84834_WRITE_AN_AUTONEGPKGID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGPKGID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGADV
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0010
 * DEVAD:    7
 * DESC:     AutoNegAdv Register
 * SIZE:     32
 * FIELDS:
 *     SELECTOR         
 *     TECHNOLOGY_ABIL  
 *     XNP              
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGADVr (0x00070010 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGADV.
 *
 */
typedef union BCM84834_AN_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t an_autonegadv[1];
	uint32_t _an_autonegadv;
} BCM84834_AN_AUTONEGADVr_t;

#define BCM84834_AN_AUTONEGADVr_CLR(r) (r).an_autonegadv[0] = 0
#define BCM84834_AN_AUTONEGADVr_SET(r,d) (r).an_autonegadv[0] = d
#define BCM84834_AN_AUTONEGADVr_GET(r) (r).an_autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).an_autonegadv[0]) >> 15) & 0x1)
#define BCM84834_AN_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_AN_AUTONEGADVr_ACKNOWLEDGEf_GET(r) ((((r).an_autonegadv[0]) >> 14) & 0x1)
#define BCM84834_AN_AUTONEGADVr_ACKNOWLEDGEf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_AN_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).an_autonegadv[0]) >> 13) & 0x1)
#define BCM84834_AN_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_AN_AUTONEGADVr_XNPf_GET(r) ((((r).an_autonegadv[0]) >> 12) & 0x1)
#define BCM84834_AN_AUTONEGADVr_XNPf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_AUTONEGADVr_TECHNOLOGY_ABILf_GET(r) ((((r).an_autonegadv[0]) >> 5) & 0x7f)
#define BCM84834_AN_AUTONEGADVr_TECHNOLOGY_ABILf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x7f << 5)) | ((((uint32_t)f) & 0x7f) << 5))
#define BCM84834_AN_AUTONEGADVr_SELECTORf_GET(r) (((r).an_autonegadv[0]) & 0x1f)
#define BCM84834_AN_AUTONEGADVr_SELECTORf_SET(r,f) (r).an_autonegadv[0]=(((r).an_autonegadv[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_AUTONEGADV.
 *
 */
#define BCM84834_READ_AN_AUTONEGADVr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGADVr,(_r._an_autonegadv))
#define BCM84834_WRITE_AN_AUTONEGADVr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGADVr,(_r._an_autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGADVr BCM84834_AN_AUTONEGADVr
#define AN_AUTONEGADVr_SIZE BCM84834_AN_AUTONEGADVr_SIZE
typedef BCM84834_AN_AUTONEGADVr_t AN_AUTONEGADVr_t;
#define AN_AUTONEGADVr_CLR BCM84834_AN_AUTONEGADVr_CLR
#define AN_AUTONEGADVr_SET BCM84834_AN_AUTONEGADVr_SET
#define AN_AUTONEGADVr_GET BCM84834_AN_AUTONEGADVr_GET
#define AN_AUTONEGADVr_NEXT_PAGEf_GET BCM84834_AN_AUTONEGADVr_NEXT_PAGEf_GET
#define AN_AUTONEGADVr_NEXT_PAGEf_SET BCM84834_AN_AUTONEGADVr_NEXT_PAGEf_SET
#define AN_AUTONEGADVr_ACKNOWLEDGEf_GET BCM84834_AN_AUTONEGADVr_ACKNOWLEDGEf_GET
#define AN_AUTONEGADVr_ACKNOWLEDGEf_SET BCM84834_AN_AUTONEGADVr_ACKNOWLEDGEf_SET
#define AN_AUTONEGADVr_REMOTE_FAULTf_GET BCM84834_AN_AUTONEGADVr_REMOTE_FAULTf_GET
#define AN_AUTONEGADVr_REMOTE_FAULTf_SET BCM84834_AN_AUTONEGADVr_REMOTE_FAULTf_SET
#define AN_AUTONEGADVr_XNPf_GET BCM84834_AN_AUTONEGADVr_XNPf_GET
#define AN_AUTONEGADVr_XNPf_SET BCM84834_AN_AUTONEGADVr_XNPf_SET
#define AN_AUTONEGADVr_TECHNOLOGY_ABILf_GET BCM84834_AN_AUTONEGADVr_TECHNOLOGY_ABILf_GET
#define AN_AUTONEGADVr_TECHNOLOGY_ABILf_SET BCM84834_AN_AUTONEGADVr_TECHNOLOGY_ABILf_SET
#define AN_AUTONEGADVr_SELECTORf_GET BCM84834_AN_AUTONEGADVr_SELECTORf_GET
#define AN_AUTONEGADVr_SELECTORf_SET BCM84834_AN_AUTONEGADVr_SELECTORf_SET
#define READ_AN_AUTONEGADVr BCM84834_READ_AN_AUTONEGADVr
#define WRITE_AN_AUTONEGADVr BCM84834_WRITE_AN_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGADV2
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0011
 * DEVAD:    7
 * DESC:     AutoNegAdv2 Register
 * SIZE:     32
 * FIELDS:
 *     TX_NONCE         
 *     TECH_ABIL_10_0   
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGADV2r (0x00070011 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGADV2r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGADV2.
 *
 */
typedef union BCM84834_AN_AUTONEGADV2r_s {
	uint32_t v[1];
	uint32_t an_autonegadv2[1];
	uint32_t _an_autonegadv2;
} BCM84834_AN_AUTONEGADV2r_t;

#define BCM84834_AN_AUTONEGADV2r_CLR(r) (r).an_autonegadv2[0] = 0
#define BCM84834_AN_AUTONEGADV2r_SET(r,d) (r).an_autonegadv2[0] = d
#define BCM84834_AN_AUTONEGADV2r_GET(r) (r).an_autonegadv2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGADV2r_TECH_ABIL_10_0f_GET(r) ((((r).an_autonegadv2[0]) >> 5) & 0x7ff)
#define BCM84834_AN_AUTONEGADV2r_TECH_ABIL_10_0f_SET(r,f) (r).an_autonegadv2[0]=(((r).an_autonegadv2[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCM84834_AN_AUTONEGADV2r_TX_NONCEf_GET(r) (((r).an_autonegadv2[0]) & 0x1f)
#define BCM84834_AN_AUTONEGADV2r_TX_NONCEf_SET(r,f) (r).an_autonegadv2[0]=(((r).an_autonegadv2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_AUTONEGADV2.
 *
 */
#define BCM84834_READ_AN_AUTONEGADV2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGADV2r,(_r._an_autonegadv2))
#define BCM84834_WRITE_AN_AUTONEGADV2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGADV2r,(_r._an_autonegadv2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGADV2r BCM84834_AN_AUTONEGADV2r
#define AN_AUTONEGADV2r_SIZE BCM84834_AN_AUTONEGADV2r_SIZE
typedef BCM84834_AN_AUTONEGADV2r_t AN_AUTONEGADV2r_t;
#define AN_AUTONEGADV2r_CLR BCM84834_AN_AUTONEGADV2r_CLR
#define AN_AUTONEGADV2r_SET BCM84834_AN_AUTONEGADV2r_SET
#define AN_AUTONEGADV2r_GET BCM84834_AN_AUTONEGADV2r_GET
#define AN_AUTONEGADV2r_TECH_ABIL_10_0f_GET BCM84834_AN_AUTONEGADV2r_TECH_ABIL_10_0f_GET
#define AN_AUTONEGADV2r_TECH_ABIL_10_0f_SET BCM84834_AN_AUTONEGADV2r_TECH_ABIL_10_0f_SET
#define AN_AUTONEGADV2r_TX_NONCEf_GET BCM84834_AN_AUTONEGADV2r_TX_NONCEf_GET
#define AN_AUTONEGADV2r_TX_NONCEf_SET BCM84834_AN_AUTONEGADV2r_TX_NONCEf_SET
#define READ_AN_AUTONEGADV2r BCM84834_READ_AN_AUTONEGADV2r
#define WRITE_AN_AUTONEGADV2r BCM84834_WRITE_AN_AUTONEGADV2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGADV2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGADV3
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0012
 * DEVAD:    7
 * DESC:     AutoNegAdv3 Register
 * SIZE:     32
 * FIELDS:
 *     TECH_ABIL_24_11  
 *     FEC_CAP          
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGADV3r (0x00070012 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGADV3r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGADV3.
 *
 */
typedef union BCM84834_AN_AUTONEGADV3r_s {
	uint32_t v[1];
	uint32_t an_autonegadv3[1];
	uint32_t _an_autonegadv3;
} BCM84834_AN_AUTONEGADV3r_t;

#define BCM84834_AN_AUTONEGADV3r_CLR(r) (r).an_autonegadv3[0] = 0
#define BCM84834_AN_AUTONEGADV3r_SET(r,d) (r).an_autonegadv3[0] = d
#define BCM84834_AN_AUTONEGADV3r_GET(r) (r).an_autonegadv3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGADV3r_FEC_CAPf_GET(r) ((((r).an_autonegadv3[0]) >> 14) & 0x3)
#define BCM84834_AN_AUTONEGADV3r_FEC_CAPf_SET(r,f) (r).an_autonegadv3[0]=(((r).an_autonegadv3[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCM84834_AN_AUTONEGADV3r_TECH_ABIL_24_11f_GET(r) (((r).an_autonegadv3[0]) & 0x3fff)
#define BCM84834_AN_AUTONEGADV3r_TECH_ABIL_24_11f_SET(r,f) (r).an_autonegadv3[0]=(((r).an_autonegadv3[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access AN_AUTONEGADV3.
 *
 */
#define BCM84834_READ_AN_AUTONEGADV3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGADV3r,(_r._an_autonegadv3))
#define BCM84834_WRITE_AN_AUTONEGADV3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGADV3r,(_r._an_autonegadv3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGADV3r BCM84834_AN_AUTONEGADV3r
#define AN_AUTONEGADV3r_SIZE BCM84834_AN_AUTONEGADV3r_SIZE
typedef BCM84834_AN_AUTONEGADV3r_t AN_AUTONEGADV3r_t;
#define AN_AUTONEGADV3r_CLR BCM84834_AN_AUTONEGADV3r_CLR
#define AN_AUTONEGADV3r_SET BCM84834_AN_AUTONEGADV3r_SET
#define AN_AUTONEGADV3r_GET BCM84834_AN_AUTONEGADV3r_GET
#define AN_AUTONEGADV3r_FEC_CAPf_GET BCM84834_AN_AUTONEGADV3r_FEC_CAPf_GET
#define AN_AUTONEGADV3r_FEC_CAPf_SET BCM84834_AN_AUTONEGADV3r_FEC_CAPf_SET
#define AN_AUTONEGADV3r_TECH_ABIL_24_11f_GET BCM84834_AN_AUTONEGADV3r_TECH_ABIL_24_11f_GET
#define AN_AUTONEGADV3r_TECH_ABIL_24_11f_SET BCM84834_AN_AUTONEGADV3r_TECH_ABIL_24_11f_SET
#define READ_AN_AUTONEGADV3r BCM84834_READ_AN_AUTONEGADV3r
#define WRITE_AN_AUTONEGADV3r BCM84834_WRITE_AN_AUTONEGADV3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGADV3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGLPBASEPAGEABIL
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0013
 * DEVAD:    7
 * DESC:     AutoNegLpBasePageAbility Register
 * SIZE:     32
 * FIELDS:
 *     AN_LP_BASE_PAGE  
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGLPBASEPAGEABILr (0x00070013 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGLPBASEPAGEABIL.
 *
 */
typedef union BCM84834_AN_AUTONEGLPBASEPAGEABILr_s {
	uint32_t v[1];
	uint32_t an_autoneglpbasepageabil[1];
	uint32_t _an_autoneglpbasepageabil;
} BCM84834_AN_AUTONEGLPBASEPAGEABILr_t;

#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_CLR(r) (r).an_autoneglpbasepageabil[0] = 0
#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_SET(r,d) (r).an_autoneglpbasepageabil[0] = d
#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_GET(r) (r).an_autoneglpbasepageabil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_GET(r) (((r).an_autoneglpbasepageabil[0]) & 0xffff)
#define BCM84834_AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_SET(r,f) (r).an_autoneglpbasepageabil[0]=(((r).an_autoneglpbasepageabil[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGLPBASEPAGEABIL.
 *
 */
#define BCM84834_READ_AN_AUTONEGLPBASEPAGEABILr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABILr,(_r._an_autoneglpbasepageabil))
#define BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABILr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABILr,(_r._an_autoneglpbasepageabil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGLPBASEPAGEABILr BCM84834_AN_AUTONEGLPBASEPAGEABILr
#define AN_AUTONEGLPBASEPAGEABILr_SIZE BCM84834_AN_AUTONEGLPBASEPAGEABILr_SIZE
typedef BCM84834_AN_AUTONEGLPBASEPAGEABILr_t AN_AUTONEGLPBASEPAGEABILr_t;
#define AN_AUTONEGLPBASEPAGEABILr_CLR BCM84834_AN_AUTONEGLPBASEPAGEABILr_CLR
#define AN_AUTONEGLPBASEPAGEABILr_SET BCM84834_AN_AUTONEGLPBASEPAGEABILr_SET
#define AN_AUTONEGLPBASEPAGEABILr_GET BCM84834_AN_AUTONEGLPBASEPAGEABILr_GET
#define AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_GET BCM84834_AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_GET
#define AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_SET BCM84834_AN_AUTONEGLPBASEPAGEABILr_AN_LP_BASE_PAGEf_SET
#define READ_AN_AUTONEGLPBASEPAGEABILr BCM84834_READ_AN_AUTONEGLPBASEPAGEABILr
#define WRITE_AN_AUTONEGLPBASEPAGEABILr BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGLPBASEPAGEABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGLPBASEPAGEABIL2
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0014
 * DEVAD:    7
 * DESC:     AutoNegLpBasePageAbility2 Register
 * SIZE:     32
 * FIELDS:
 *     AN_LP_BASE_PAGE  
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r (0x00070014 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGLPBASEPAGEABIL2.
 *
 */
typedef union BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_s {
	uint32_t v[1];
	uint32_t an_autoneglpbasepageabil2[1];
	uint32_t _an_autoneglpbasepageabil2;
} BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_t;

#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_CLR(r) (r).an_autoneglpbasepageabil2[0] = 0
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_SET(r,d) (r).an_autoneglpbasepageabil2[0] = d
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_GET(r) (r).an_autoneglpbasepageabil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_GET(r) (((r).an_autoneglpbasepageabil2[0]) & 0xffff)
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_SET(r,f) (r).an_autoneglpbasepageabil2[0]=(((r).an_autoneglpbasepageabil2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGLPBASEPAGEABIL2.
 *
 */
#define BCM84834_READ_AN_AUTONEGLPBASEPAGEABIL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABIL2r,(_r._an_autoneglpbasepageabil2))
#define BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABIL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABIL2r,(_r._an_autoneglpbasepageabil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGLPBASEPAGEABIL2r BCM84834_AN_AUTONEGLPBASEPAGEABIL2r
#define AN_AUTONEGLPBASEPAGEABIL2r_SIZE BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_SIZE
typedef BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_t AN_AUTONEGLPBASEPAGEABIL2r_t;
#define AN_AUTONEGLPBASEPAGEABIL2r_CLR BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_CLR
#define AN_AUTONEGLPBASEPAGEABIL2r_SET BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_SET
#define AN_AUTONEGLPBASEPAGEABIL2r_GET BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_GET
#define AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_GET BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_GET
#define AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_SET BCM84834_AN_AUTONEGLPBASEPAGEABIL2r_AN_LP_BASE_PAGEf_SET
#define READ_AN_AUTONEGLPBASEPAGEABIL2r BCM84834_READ_AN_AUTONEGLPBASEPAGEABIL2r
#define WRITE_AN_AUTONEGLPBASEPAGEABIL2r BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGLPBASEPAGEABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_AUTONEGLPBASEPAGEABIL3
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0015
 * DEVAD:    7
 * DESC:     AutoNegLpBasePageAbility3 Register
 * SIZE:     32
 * FIELDS:
 *     AN_LP_BASE_PAGE  
 *
 ******************************************************************************/
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r (0x00070015 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_SIZE 4

/*
 * This structure should be used to declare and program AN_AUTONEGLPBASEPAGEABIL3.
 *
 */
typedef union BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_s {
	uint32_t v[1];
	uint32_t an_autoneglpbasepageabil3[1];
	uint32_t _an_autoneglpbasepageabil3;
} BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_t;

#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_CLR(r) (r).an_autoneglpbasepageabil3[0] = 0
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_SET(r,d) (r).an_autoneglpbasepageabil3[0] = d
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_GET(r) (r).an_autoneglpbasepageabil3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_GET(r) (((r).an_autoneglpbasepageabil3[0]) & 0xffff)
#define BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_SET(r,f) (r).an_autoneglpbasepageabil3[0]=(((r).an_autoneglpbasepageabil3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_AUTONEGLPBASEPAGEABIL3.
 *
 */
#define BCM84834_READ_AN_AUTONEGLPBASEPAGEABIL3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABIL3r,(_r._an_autoneglpbasepageabil3))
#define BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABIL3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_AUTONEGLPBASEPAGEABIL3r,(_r._an_autoneglpbasepageabil3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_AUTONEGLPBASEPAGEABIL3r BCM84834_AN_AUTONEGLPBASEPAGEABIL3r
#define AN_AUTONEGLPBASEPAGEABIL3r_SIZE BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_SIZE
typedef BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_t AN_AUTONEGLPBASEPAGEABIL3r_t;
#define AN_AUTONEGLPBASEPAGEABIL3r_CLR BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_CLR
#define AN_AUTONEGLPBASEPAGEABIL3r_SET BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_SET
#define AN_AUTONEGLPBASEPAGEABIL3r_GET BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_GET
#define AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_GET BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_GET
#define AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_SET BCM84834_AN_AUTONEGLPBASEPAGEABIL3r_AN_LP_BASE_PAGEf_SET
#define READ_AN_AUTONEGLPBASEPAGEABIL3r BCM84834_READ_AN_AUTONEGLPBASEPAGEABIL3r
#define WRITE_AN_AUTONEGLPBASEPAGEABIL3r BCM84834_WRITE_AN_AUTONEGLPBASEPAGEABIL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_AUTONEGLPBASEPAGEABIL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_XNP_TX
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0016
 * DEVAD:    7
 * DESC:     AN_XNP_Tx Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *     TOGGLE           
 *     ACKNOWLEDGE2     
 *     MESSAGE_PAGE     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_AN_XNP_TXr (0x00070016 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_XNP_TXr_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TX.
 *
 */
typedef union BCM84834_AN_XNP_TXr_s {
	uint32_t v[1];
	uint32_t an_xnp_tx[1];
	uint32_t _an_xnp_tx;
} BCM84834_AN_XNP_TXr_t;

#define BCM84834_AN_XNP_TXr_CLR(r) (r).an_xnp_tx[0] = 0
#define BCM84834_AN_XNP_TXr_SET(r,d) (r).an_xnp_tx[0] = d
#define BCM84834_AN_XNP_TXr_GET(r) (r).an_xnp_tx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_XNP_TXr_NEXT_PAGEf_GET(r) ((((r).an_xnp_tx[0]) >> 15) & 0x1)
#define BCM84834_AN_XNP_TXr_NEXT_PAGEf_SET(r,f) (r).an_xnp_tx[0]=(((r).an_xnp_tx[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_AN_XNP_TXr_MESSAGE_PAGEf_GET(r) ((((r).an_xnp_tx[0]) >> 13) & 0x1)
#define BCM84834_AN_XNP_TXr_MESSAGE_PAGEf_SET(r,f) (r).an_xnp_tx[0]=(((r).an_xnp_tx[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_AN_XNP_TXr_ACKNOWLEDGE2f_GET(r) ((((r).an_xnp_tx[0]) >> 12) & 0x1)
#define BCM84834_AN_XNP_TXr_ACKNOWLEDGE2f_SET(r,f) (r).an_xnp_tx[0]=(((r).an_xnp_tx[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_XNP_TXr_TOGGLEf_GET(r) ((((r).an_xnp_tx[0]) >> 11) & 0x1)
#define BCM84834_AN_XNP_TXr_TOGGLEf_SET(r,f) (r).an_xnp_tx[0]=(((r).an_xnp_tx[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_xnp_tx[0]) & 0x7ff)
#define BCM84834_AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_xnp_tx[0]=(((r).an_xnp_tx[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_XNP_TX.
 *
 */
#define BCM84834_READ_AN_XNP_TXr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_XNP_TXr,(_r._an_xnp_tx))
#define BCM84834_WRITE_AN_XNP_TXr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_XNP_TXr,(_r._an_xnp_tx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TXr BCM84834_AN_XNP_TXr
#define AN_XNP_TXr_SIZE BCM84834_AN_XNP_TXr_SIZE
typedef BCM84834_AN_XNP_TXr_t AN_XNP_TXr_t;
#define AN_XNP_TXr_CLR BCM84834_AN_XNP_TXr_CLR
#define AN_XNP_TXr_SET BCM84834_AN_XNP_TXr_SET
#define AN_XNP_TXr_GET BCM84834_AN_XNP_TXr_GET
#define AN_XNP_TXr_NEXT_PAGEf_GET BCM84834_AN_XNP_TXr_NEXT_PAGEf_GET
#define AN_XNP_TXr_NEXT_PAGEf_SET BCM84834_AN_XNP_TXr_NEXT_PAGEf_SET
#define AN_XNP_TXr_MESSAGE_PAGEf_GET BCM84834_AN_XNP_TXr_MESSAGE_PAGEf_GET
#define AN_XNP_TXr_MESSAGE_PAGEf_SET BCM84834_AN_XNP_TXr_MESSAGE_PAGEf_SET
#define AN_XNP_TXr_ACKNOWLEDGE2f_GET BCM84834_AN_XNP_TXr_ACKNOWLEDGE2f_GET
#define AN_XNP_TXr_ACKNOWLEDGE2f_SET BCM84834_AN_XNP_TXr_ACKNOWLEDGE2f_SET
#define AN_XNP_TXr_TOGGLEf_GET BCM84834_AN_XNP_TXr_TOGGLEf_GET
#define AN_XNP_TXr_TOGGLEf_SET BCM84834_AN_XNP_TXr_TOGGLEf_SET
#define AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_XNP_TXr_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_XNP_TXr BCM84834_READ_AN_XNP_TXr
#define WRITE_AN_XNP_TXr BCM84834_WRITE_AN_XNP_TXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_XNP_TXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_XNP_TX2
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0017
 * DEVAD:    7
 * DESC:     AN_XNP_Tx2 Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *
 ******************************************************************************/
#define BCM84834_AN_XNP_TX2r (0x00070017 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_XNP_TX2r_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TX2.
 *
 */
typedef union BCM84834_AN_XNP_TX2r_s {
	uint32_t v[1];
	uint32_t an_xnp_tx2[1];
	uint32_t _an_xnp_tx2;
} BCM84834_AN_XNP_TX2r_t;

#define BCM84834_AN_XNP_TX2r_CLR(r) (r).an_xnp_tx2[0] = 0
#define BCM84834_AN_XNP_TX2r_SET(r,d) (r).an_xnp_tx2[0] = d
#define BCM84834_AN_XNP_TX2r_GET(r) (r).an_xnp_tx2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_xnp_tx2[0]) & 0xffff)
#define BCM84834_AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_xnp_tx2[0]=(((r).an_xnp_tx2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_XNP_TX2.
 *
 */
#define BCM84834_READ_AN_XNP_TX2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_XNP_TX2r,(_r._an_xnp_tx2))
#define BCM84834_WRITE_AN_XNP_TX2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_XNP_TX2r,(_r._an_xnp_tx2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TX2r BCM84834_AN_XNP_TX2r
#define AN_XNP_TX2r_SIZE BCM84834_AN_XNP_TX2r_SIZE
typedef BCM84834_AN_XNP_TX2r_t AN_XNP_TX2r_t;
#define AN_XNP_TX2r_CLR BCM84834_AN_XNP_TX2r_CLR
#define AN_XNP_TX2r_SET BCM84834_AN_XNP_TX2r_SET
#define AN_XNP_TX2r_GET BCM84834_AN_XNP_TX2r_GET
#define AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_XNP_TX2r_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_XNP_TX2r BCM84834_READ_AN_XNP_TX2r
#define WRITE_AN_XNP_TX2r BCM84834_WRITE_AN_XNP_TX2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_XNP_TX2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_XNP_TX3
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     AN_XNP_Tx3 Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *
 ******************************************************************************/
#define BCM84834_AN_XNP_TX3r (0x00070018 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_XNP_TX3r_SIZE 4

/*
 * This structure should be used to declare and program AN_XNP_TX3.
 *
 */
typedef union BCM84834_AN_XNP_TX3r_s {
	uint32_t v[1];
	uint32_t an_xnp_tx3[1];
	uint32_t _an_xnp_tx3;
} BCM84834_AN_XNP_TX3r_t;

#define BCM84834_AN_XNP_TX3r_CLR(r) (r).an_xnp_tx3[0] = 0
#define BCM84834_AN_XNP_TX3r_SET(r,d) (r).an_xnp_tx3[0] = d
#define BCM84834_AN_XNP_TX3r_GET(r) (r).an_xnp_tx3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_xnp_tx3[0]) & 0xffff)
#define BCM84834_AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_xnp_tx3[0]=(((r).an_xnp_tx3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_XNP_TX3.
 *
 */
#define BCM84834_READ_AN_XNP_TX3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_XNP_TX3r,(_r._an_xnp_tx3))
#define BCM84834_WRITE_AN_XNP_TX3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_XNP_TX3r,(_r._an_xnp_tx3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_XNP_TX3r BCM84834_AN_XNP_TX3r
#define AN_XNP_TX3r_SIZE BCM84834_AN_XNP_TX3r_SIZE
typedef BCM84834_AN_XNP_TX3r_t AN_XNP_TX3r_t;
#define AN_XNP_TX3r_CLR BCM84834_AN_XNP_TX3r_CLR
#define AN_XNP_TX3r_SET BCM84834_AN_XNP_TX3r_SET
#define AN_XNP_TX3r_GET BCM84834_AN_XNP_TX3r_GET
#define AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_XNP_TX3r_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_XNP_TX3r BCM84834_READ_AN_XNP_TX3r
#define WRITE_AN_XNP_TX3r BCM84834_WRITE_AN_XNP_TX3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_XNP_TX3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUXCTRL
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Auxiliary Control Register (Shadow Register Selector = "000")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     DIAGNOSTIC_MODE  
 *     EDGERATE_CONTROL_100TX 
 *     DISABLE_INVERSE_PRF 
 *     DIS_PARTIAL_RESPONSE_FILTER 
 *     RECEIVE_SLICING  
 *     TRANSMIT_6DB_CODING 
 *     ENABLE_SM_DSP_CLOCK 
 *     EDGERATE_CONTROL_1000T 
 *     EXTENDED_PACKET_LENGTH 
 *     EXTERNAL_LOOPBACK 
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUXCTRLr (0x00000018 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUXCTRLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUXCTRL.
 *
 */
typedef union BCM84834_SHDW_AUXCTRLr_s {
	uint32_t v[1];
	uint32_t shdw_auxctrl[1];
	uint32_t _shdw_auxctrl;
} BCM84834_SHDW_AUXCTRLr_t;

#define BCM84834_SHDW_AUXCTRLr_CLR(r) (r).shdw_auxctrl[0] = 0
#define BCM84834_SHDW_AUXCTRLr_SET(r,d) (r).shdw_auxctrl[0] = d
#define BCM84834_SHDW_AUXCTRLr_GET(r) (r).shdw_auxctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_GET(r) ((((r).shdw_auxctrl[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_GET(r) ((((r).shdw_auxctrl[0]) >> 14) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_GET(r) ((((r).shdw_auxctrl[0]) >> 12) & 0x3)
#define BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCM84834_SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_GET(r) ((((r).shdw_auxctrl[0]) >> 11) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_GET(r) ((((r).shdw_auxctrl[0]) >> 10) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_SHDW_AUXCTRLr_RECEIVE_SLICINGf_GET(r) ((((r).shdw_auxctrl[0]) >> 8) & 0x3)
#define BCM84834_SHDW_AUXCTRLr_RECEIVE_SLICINGf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_GET(r) ((((r).shdw_auxctrl[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_GET(r) ((((r).shdw_auxctrl[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_GET(r) ((((r).shdw_auxctrl[0]) >> 4) & 0x3)
#define BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_GET(r) ((((r).shdw_auxctrl[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_auxctrl[0]) & 0x7)
#define BCM84834_SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_auxctrl[0]=(((r).shdw_auxctrl[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_AUXCTRL.
 *
 */
#define BCM84834_READ_SHDW_AUXCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUXCTRLr,(_r._shdw_auxctrl))
#define BCM84834_WRITE_SHDW_AUXCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUXCTRLr,(_r._shdw_auxctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUXCTRLr BCM84834_SHDW_AUXCTRLr
#define SHDW_AUXCTRLr_SIZE BCM84834_SHDW_AUXCTRLr_SIZE
typedef BCM84834_SHDW_AUXCTRLr_t SHDW_AUXCTRLr_t;
#define SHDW_AUXCTRLr_CLR BCM84834_SHDW_AUXCTRLr_CLR
#define SHDW_AUXCTRLr_SET BCM84834_SHDW_AUXCTRLr_SET
#define SHDW_AUXCTRLr_GET BCM84834_SHDW_AUXCTRLr_GET
#define SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_GET BCM84834_SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_GET
#define SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_SET BCM84834_SHDW_AUXCTRLr_EXTERNAL_LOOPBACKf_SET
#define SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_GET BCM84834_SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_GET
#define SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_SET BCM84834_SHDW_AUXCTRLr_EXTENDED_PACKET_LENGTHf_SET
#define SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_GET BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_GET
#define SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_SET BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_1000Tf_SET
#define SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_GET BCM84834_SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_GET
#define SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_SET BCM84834_SHDW_AUXCTRLr_ENABLE_SM_DSP_CLOCKf_SET
#define SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_GET BCM84834_SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_GET
#define SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_SET BCM84834_SHDW_AUXCTRLr_TRANSMIT_6DB_CODINGf_SET
#define SHDW_AUXCTRLr_RECEIVE_SLICINGf_GET BCM84834_SHDW_AUXCTRLr_RECEIVE_SLICINGf_GET
#define SHDW_AUXCTRLr_RECEIVE_SLICINGf_SET BCM84834_SHDW_AUXCTRLr_RECEIVE_SLICINGf_SET
#define SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_GET BCM84834_SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_GET
#define SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_SET BCM84834_SHDW_AUXCTRLr_DIS_PARTIAL_RESPONSE_FILTERf_SET
#define SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_GET BCM84834_SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_GET
#define SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_SET BCM84834_SHDW_AUXCTRLr_DISABLE_INVERSE_PRFf_SET
#define SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_GET BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_GET
#define SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_SET BCM84834_SHDW_AUXCTRLr_EDGERATE_CONTROL_100TXf_SET
#define SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_GET BCM84834_SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_GET
#define SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_SET BCM84834_SHDW_AUXCTRLr_DIAGNOSTIC_MODEf_SET
#define SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_AUXCTRLr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_AUXCTRLr BCM84834_READ_SHDW_AUXCTRLr
#define WRITE_SHDW_AUXCTRLr BCM84834_WRITE_SHDW_AUXCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUXCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_X10BASET
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     10 Base-T Register (Shadow Register Selector = "001")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     X10BT_POLARITY_ERR_CNT_MAX 
 *     X10BT_NO_DRIBBLE 
 *     SQE_ENABLE_MODE  
 *     X10BT_ECHO_MODE  
 *     X10BT_SIG_DET_THRESHOLD 
 *     X10BT_SIG_DET_AUTOSWITCH 
 *     JABBER_DISABLE   
 *     CLASS_A_B_LINE_DRVR_SEL 
 *     X10BT_TXC_INVERT_MODE 
 *     BLOCK_RXDC_EXTENSION_IPG 
 *     POLARITY_ERROR   
 *     EOF_ERROR        
 *     MANCHESTER_CODE_ERROR 
 *
 ******************************************************************************/
#define BCM84834_SHDW_X10BASETr (0x00000118 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_X10BASETr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_X10BASET.
 *
 */
typedef union BCM84834_SHDW_X10BASETr_s {
	uint32_t v[1];
	uint32_t shdw_x10baset[1];
	uint32_t _shdw_x10baset;
} BCM84834_SHDW_X10BASETr_t;

#define BCM84834_SHDW_X10BASETr_CLR(r) (r).shdw_x10baset[0] = 0
#define BCM84834_SHDW_X10BASETr_SET(r,d) (r).shdw_x10baset[0] = d
#define BCM84834_SHDW_X10BASETr_GET(r) (r).shdw_x10baset[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_GET(r) ((((r).shdw_x10baset[0]) >> 15) & 0x1)
#define BCM84834_SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_X10BASETr_EOF_ERRORf_GET(r) ((((r).shdw_x10baset[0]) >> 14) & 0x1)
#define BCM84834_SHDW_X10BASETr_EOF_ERRORf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_SHDW_X10BASETr_POLARITY_ERRORf_GET(r) ((((r).shdw_x10baset[0]) >> 13) & 0x1)
#define BCM84834_SHDW_X10BASETr_POLARITY_ERRORf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_GET(r) ((((r).shdw_x10baset[0]) >> 12) & 0x1)
#define BCM84834_SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_GET(r) ((((r).shdw_x10baset[0]) >> 11) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_GET(r) ((((r).shdw_x10baset[0]) >> 10) & 0x1)
#define BCM84834_SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_SHDW_X10BASETr_JABBER_DISABLEf_GET(r) ((((r).shdw_x10baset[0]) >> 9) & 0x1)
#define BCM84834_SHDW_X10BASETr_JABBER_DISABLEf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_GET(r) ((((r).shdw_x10baset[0]) >> 8) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_GET(r) ((((r).shdw_x10baset[0]) >> 7) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_X10BASETr_X10BT_ECHO_MODEf_GET(r) ((((r).shdw_x10baset[0]) >> 6) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_ECHO_MODEf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_X10BASETr_SQE_ENABLE_MODEf_GET(r) ((((r).shdw_x10baset[0]) >> 5) & 0x1)
#define BCM84834_SHDW_X10BASETr_SQE_ENABLE_MODEf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_X10BASETr_X10BT_NO_DRIBBLEf_GET(r) ((((r).shdw_x10baset[0]) >> 4) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_NO_DRIBBLEf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_GET(r) ((((r).shdw_x10baset[0]) >> 3) & 0x1)
#define BCM84834_SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_x10baset[0]) & 0x7)
#define BCM84834_SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_x10baset[0]=(((r).shdw_x10baset[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_X10BASET.
 *
 */
#define BCM84834_READ_SHDW_X10BASETr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_X10BASETr,(_r._shdw_x10baset))
#define BCM84834_WRITE_SHDW_X10BASETr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_X10BASETr,(_r._shdw_x10baset))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_X10BASETr BCM84834_SHDW_X10BASETr
#define SHDW_X10BASETr_SIZE BCM84834_SHDW_X10BASETr_SIZE
typedef BCM84834_SHDW_X10BASETr_t SHDW_X10BASETr_t;
#define SHDW_X10BASETr_CLR BCM84834_SHDW_X10BASETr_CLR
#define SHDW_X10BASETr_SET BCM84834_SHDW_X10BASETr_SET
#define SHDW_X10BASETr_GET BCM84834_SHDW_X10BASETr_GET
#define SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_GET BCM84834_SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_GET
#define SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_SET BCM84834_SHDW_X10BASETr_MANCHESTER_CODE_ERRORf_SET
#define SHDW_X10BASETr_EOF_ERRORf_GET BCM84834_SHDW_X10BASETr_EOF_ERRORf_GET
#define SHDW_X10BASETr_EOF_ERRORf_SET BCM84834_SHDW_X10BASETr_EOF_ERRORf_SET
#define SHDW_X10BASETr_POLARITY_ERRORf_GET BCM84834_SHDW_X10BASETr_POLARITY_ERRORf_GET
#define SHDW_X10BASETr_POLARITY_ERRORf_SET BCM84834_SHDW_X10BASETr_POLARITY_ERRORf_SET
#define SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_GET BCM84834_SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_GET
#define SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_SET BCM84834_SHDW_X10BASETr_BLOCK_RXDC_EXTENSION_IPGf_SET
#define SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_GET BCM84834_SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_GET
#define SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_SET BCM84834_SHDW_X10BASETr_X10BT_TXC_INVERT_MODEf_SET
#define SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_GET BCM84834_SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_GET
#define SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_SET BCM84834_SHDW_X10BASETr_CLASS_A_B_LINE_DRVR_SELf_SET
#define SHDW_X10BASETr_JABBER_DISABLEf_GET BCM84834_SHDW_X10BASETr_JABBER_DISABLEf_GET
#define SHDW_X10BASETr_JABBER_DISABLEf_SET BCM84834_SHDW_X10BASETr_JABBER_DISABLEf_SET
#define SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_GET BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_GET
#define SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_SET BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_AUTOSWITCHf_SET
#define SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_GET BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_GET
#define SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_SET BCM84834_SHDW_X10BASETr_X10BT_SIG_DET_THRESHOLDf_SET
#define SHDW_X10BASETr_X10BT_ECHO_MODEf_GET BCM84834_SHDW_X10BASETr_X10BT_ECHO_MODEf_GET
#define SHDW_X10BASETr_X10BT_ECHO_MODEf_SET BCM84834_SHDW_X10BASETr_X10BT_ECHO_MODEf_SET
#define SHDW_X10BASETr_SQE_ENABLE_MODEf_GET BCM84834_SHDW_X10BASETr_SQE_ENABLE_MODEf_GET
#define SHDW_X10BASETr_SQE_ENABLE_MODEf_SET BCM84834_SHDW_X10BASETr_SQE_ENABLE_MODEf_SET
#define SHDW_X10BASETr_X10BT_NO_DRIBBLEf_GET BCM84834_SHDW_X10BASETr_X10BT_NO_DRIBBLEf_GET
#define SHDW_X10BASETr_X10BT_NO_DRIBBLEf_SET BCM84834_SHDW_X10BASETr_X10BT_NO_DRIBBLEf_SET
#define SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_GET BCM84834_SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_GET
#define SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_SET BCM84834_SHDW_X10BASETr_X10BT_POLARITY_ERR_CNT_MAXf_SET
#define SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_X10BASETr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_X10BASETr BCM84834_READ_SHDW_X10BASETr
#define WRITE_SHDW_X10BASETr BCM84834_WRITE_SHDW_X10BASETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_X10BASETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MII_CTRL
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Power/MII Control Register (Shadow Register Selector ="010")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     WAKE_ON_LAN      
 *     X100TX_TXDAC_CLASS_B_MODE 
 *     SUPER_ISOLATE    
 *     CLASS_A_B_ENABLE 
 *     ANA_VREG_CONTROL 
 *     DIG_VOLTAGE_REGULATOR_OUT 
 *     VREG_LPWR_ENABLE 
 *     GIGABIT_TXDAC_CLASS_B_MODE 
 *     CLASS_A_B_DEGREE 
 *
 ******************************************************************************/
#define BCM84834_SHDW_MII_CTRLr (0x00000218 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MII_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MII_CTRL.
 *
 */
typedef union BCM84834_SHDW_MII_CTRLr_s {
	uint32_t v[1];
	uint32_t shdw_mii_ctrl[1];
	uint32_t _shdw_mii_ctrl;
} BCM84834_SHDW_MII_CTRLr_t;

#define BCM84834_SHDW_MII_CTRLr_CLR(r) (r).shdw_mii_ctrl[0] = 0
#define BCM84834_SHDW_MII_CTRLr_SET(r,d) (r).shdw_mii_ctrl[0] = d
#define BCM84834_SHDW_MII_CTRLr_GET(r) (r).shdw_mii_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 13) & 0x7)
#define BCM84834_SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCM84834_SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 12) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 11) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 9) & 0x3)
#define BCM84834_SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCM84834_SHDW_MII_CTRLr_ANA_VREG_CONTROLf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 7) & 0x3)
#define BCM84834_SHDW_MII_CTRLr_ANA_VREG_CONTROLf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCM84834_SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MII_CTRLr_SUPER_ISOLATEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_SUPER_ISOLATEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MII_CTRLr_WAKE_ON_LANf_GET(r) ((((r).shdw_mii_ctrl[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MII_CTRLr_WAKE_ON_LANf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_mii_ctrl[0]) & 0x7)
#define BCM84834_SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_mii_ctrl[0]=(((r).shdw_mii_ctrl[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_MII_CTRL.
 *
 */
#define BCM84834_READ_SHDW_MII_CTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MII_CTRLr,(_r._shdw_mii_ctrl))
#define BCM84834_WRITE_SHDW_MII_CTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MII_CTRLr,(_r._shdw_mii_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MII_CTRLr BCM84834_SHDW_MII_CTRLr
#define SHDW_MII_CTRLr_SIZE BCM84834_SHDW_MII_CTRLr_SIZE
typedef BCM84834_SHDW_MII_CTRLr_t SHDW_MII_CTRLr_t;
#define SHDW_MII_CTRLr_CLR BCM84834_SHDW_MII_CTRLr_CLR
#define SHDW_MII_CTRLr_SET BCM84834_SHDW_MII_CTRLr_SET
#define SHDW_MII_CTRLr_GET BCM84834_SHDW_MII_CTRLr_GET
#define SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_GET BCM84834_SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_GET
#define SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_SET BCM84834_SHDW_MII_CTRLr_CLASS_A_B_DEGREEf_SET
#define SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_GET BCM84834_SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_GET
#define SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_SET BCM84834_SHDW_MII_CTRLr_GIGABIT_TXDAC_CLASS_B_MODEf_SET
#define SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_GET BCM84834_SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_GET
#define SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_SET BCM84834_SHDW_MII_CTRLr_VREG_LPWR_ENABLEf_SET
#define SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_GET BCM84834_SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_GET
#define SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_SET BCM84834_SHDW_MII_CTRLr_DIG_VOLTAGE_REGULATOR_OUTf_SET
#define SHDW_MII_CTRLr_ANA_VREG_CONTROLf_GET BCM84834_SHDW_MII_CTRLr_ANA_VREG_CONTROLf_GET
#define SHDW_MII_CTRLr_ANA_VREG_CONTROLf_SET BCM84834_SHDW_MII_CTRLr_ANA_VREG_CONTROLf_SET
#define SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_GET BCM84834_SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_GET
#define SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_SET BCM84834_SHDW_MII_CTRLr_CLASS_A_B_ENABLEf_SET
#define SHDW_MII_CTRLr_SUPER_ISOLATEf_GET BCM84834_SHDW_MII_CTRLr_SUPER_ISOLATEf_GET
#define SHDW_MII_CTRLr_SUPER_ISOLATEf_SET BCM84834_SHDW_MII_CTRLr_SUPER_ISOLATEf_SET
#define SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_GET BCM84834_SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_GET
#define SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_SET BCM84834_SHDW_MII_CTRLr_X100TX_TXDAC_CLASS_B_MODEf_SET
#define SHDW_MII_CTRLr_WAKE_ON_LANf_GET BCM84834_SHDW_MII_CTRLr_WAKE_ON_LANf_GET
#define SHDW_MII_CTRLr_WAKE_ON_LANf_SET BCM84834_SHDW_MII_CTRLr_WAKE_ON_LANf_SET
#define SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_MII_CTRLr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_MII_CTRLr BCM84834_READ_SHDW_MII_CTRLr
#define WRITE_SHDW_MII_CTRLr BCM84834_WRITE_SHDW_MII_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MII_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_IPPHONE
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     IP Phone Register (Shadow Register Selector = "011")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     DIS_SWITCH_ON_OFF_BLK_LNK 
 *     DIS_BLK_LNK_WINDOW_MODE 
 *     ENABLE_IP_PHONE_DETECT 
 *     EXT_LINK_PULSE_WIDTH_EN 
 *     IP_PHONE_WINDOW_MODE 
 *     RESTART_AUTONEG  
 *     ALT_RANDOM_SEED_GEN 
 *     EXT_LINK_PULSE_WIDTH_CNTR 
 *     NON_STOP_IP_PHONE_DETECT 
 *
 ******************************************************************************/
#define BCM84834_SHDW_IPPHONEr (0x00000318 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_IPPHONEr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_IPPHONE.
 *
 */
typedef union BCM84834_SHDW_IPPHONEr_s {
	uint32_t v[1];
	uint32_t shdw_ipphone[1];
	uint32_t _shdw_ipphone;
} BCM84834_SHDW_IPPHONEr_t;

#define BCM84834_SHDW_IPPHONEr_CLR(r) (r).shdw_ipphone[0] = 0
#define BCM84834_SHDW_IPPHONEr_SET(r,d) (r).shdw_ipphone[0] = d
#define BCM84834_SHDW_IPPHONEr_GET(r) (r).shdw_ipphone[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_GET(r) ((((r).shdw_ipphone[0]) >> 15) & 0x1)
#define BCM84834_SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_GET(r) ((((r).shdw_ipphone[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_GET(r) ((((r).shdw_ipphone[0]) >> 9) & 0x1)
#define BCM84834_SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_IPPHONEr_RESTART_AUTONEGf_GET(r) ((((r).shdw_ipphone[0]) >> 8) & 0x1)
#define BCM84834_SHDW_IPPHONEr_RESTART_AUTONEGf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_GET(r) ((((r).shdw_ipphone[0]) >> 7) & 0x1)
#define BCM84834_SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_GET(r) ((((r).shdw_ipphone[0]) >> 6) & 0x1)
#define BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_GET(r) ((((r).shdw_ipphone[0]) >> 5) & 0x1)
#define BCM84834_SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_GET(r) ((((r).shdw_ipphone[0]) >> 4) & 0x1)
#define BCM84834_SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_GET(r) ((((r).shdw_ipphone[0]) >> 3) & 0x1)
#define BCM84834_SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_ipphone[0]) & 0x7)
#define BCM84834_SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_ipphone[0]=(((r).shdw_ipphone[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_IPPHONE.
 *
 */
#define BCM84834_READ_SHDW_IPPHONEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_IPPHONEr,(_r._shdw_ipphone))
#define BCM84834_WRITE_SHDW_IPPHONEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_IPPHONEr,(_r._shdw_ipphone))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_IPPHONEr BCM84834_SHDW_IPPHONEr
#define SHDW_IPPHONEr_SIZE BCM84834_SHDW_IPPHONEr_SIZE
typedef BCM84834_SHDW_IPPHONEr_t SHDW_IPPHONEr_t;
#define SHDW_IPPHONEr_CLR BCM84834_SHDW_IPPHONEr_CLR
#define SHDW_IPPHONEr_SET BCM84834_SHDW_IPPHONEr_SET
#define SHDW_IPPHONEr_GET BCM84834_SHDW_IPPHONEr_GET
#define SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_GET BCM84834_SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_GET
#define SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_SET BCM84834_SHDW_IPPHONEr_NON_STOP_IP_PHONE_DETECTf_SET
#define SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_GET BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_GET
#define SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_SET BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_CNTRf_SET
#define SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_GET BCM84834_SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_GET
#define SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_SET BCM84834_SHDW_IPPHONEr_ALT_RANDOM_SEED_GENf_SET
#define SHDW_IPPHONEr_RESTART_AUTONEGf_GET BCM84834_SHDW_IPPHONEr_RESTART_AUTONEGf_GET
#define SHDW_IPPHONEr_RESTART_AUTONEGf_SET BCM84834_SHDW_IPPHONEr_RESTART_AUTONEGf_SET
#define SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_GET BCM84834_SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_GET
#define SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_SET BCM84834_SHDW_IPPHONEr_IP_PHONE_WINDOW_MODEf_SET
#define SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_GET BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_GET
#define SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_SET BCM84834_SHDW_IPPHONEr_EXT_LINK_PULSE_WIDTH_ENf_SET
#define SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_GET BCM84834_SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_GET
#define SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_SET BCM84834_SHDW_IPPHONEr_ENABLE_IP_PHONE_DETECTf_SET
#define SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_GET BCM84834_SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_GET
#define SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_SET BCM84834_SHDW_IPPHONEr_DIS_BLK_LNK_WINDOW_MODEf_SET
#define SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_GET BCM84834_SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_GET
#define SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_SET BCM84834_SHDW_IPPHONEr_DIS_SWITCH_ON_OFF_BLK_LNKf_SET
#define SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_IPPHONEr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_IPPHONEr BCM84834_READ_SHDW_IPPHONEr
#define WRITE_SHDW_IPPHONEr BCM84834_WRITE_SHDW_IPPHONEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_IPPHONEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISCTEST1
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Misc Test Register 1 (Shadow Register Selector = "100")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     HALFOUT          
 *     SWAP_RXMDIX      
 *     X10BT_BYPASS_CRS 
 *     X10BT_BYPASS_ADC 
 *     X10BT_CLOCK_RESET_ENABLE 
 *     X10BT_IDLE_BYPASS 
 *     X10BT_POLARITY_BYPASS 
 *     X10BT_WAKEUP     
 *     REMOTE_LOOPBACK_TRISTATE 
 *     BLK_10BT_RESTART_AUTONEG 
 *     EN_DED_10BT_DLL_BYP_CLK 
 *     TDK_FIX_ENABLE   
 *     REMOTE_LOOPBACK_ENABLE 
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISCTEST1r (0x00000418 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISCTEST1r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISCTEST1.
 *
 */
typedef union BCM84834_SHDW_MISCTEST1r_s {
	uint32_t v[1];
	uint32_t shdw_misctest1[1];
	uint32_t _shdw_misctest1;
} BCM84834_SHDW_MISCTEST1r_t;

#define BCM84834_SHDW_MISCTEST1r_CLR(r) (r).shdw_misctest1[0] = 0
#define BCM84834_SHDW_MISCTEST1r_SET(r,d) (r).shdw_misctest1[0] = d
#define BCM84834_SHDW_MISCTEST1r_GET(r) (r).shdw_misctest1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_GET(r) ((((r).shdw_misctest1[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISCTEST1r_TDK_FIX_ENABLEf_GET(r) ((((r).shdw_misctest1[0]) >> 14) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_TDK_FIX_ENABLEf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_GET(r) ((((r).shdw_misctest1[0]) >> 13) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_GET(r) ((((r).shdw_misctest1[0]) >> 12) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_GET(r) ((((r).shdw_misctest1[0]) >> 11) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_SHDW_MISCTEST1r_X10BT_WAKEUPf_GET(r) ((((r).shdw_misctest1[0]) >> 10) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_WAKEUPf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_GET(r) ((((r).shdw_misctest1[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_GET(r) ((((r).shdw_misctest1[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_GET(r) ((((r).shdw_misctest1[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_GET(r) ((((r).shdw_misctest1[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_GET(r) ((((r).shdw_misctest1[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISCTEST1r_SWAP_RXMDIXf_GET(r) ((((r).shdw_misctest1[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_SWAP_RXMDIXf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISCTEST1r_HALFOUTf_GET(r) ((((r).shdw_misctest1[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISCTEST1r_HALFOUTf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_misctest1[0]) & 0x7)
#define BCM84834_SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_misctest1[0]=(((r).shdw_misctest1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_MISCTEST1.
 *
 */
#define BCM84834_READ_SHDW_MISCTEST1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISCTEST1r,(_r._shdw_misctest1))
#define BCM84834_WRITE_SHDW_MISCTEST1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISCTEST1r,(_r._shdw_misctest1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISCTEST1r BCM84834_SHDW_MISCTEST1r
#define SHDW_MISCTEST1r_SIZE BCM84834_SHDW_MISCTEST1r_SIZE
typedef BCM84834_SHDW_MISCTEST1r_t SHDW_MISCTEST1r_t;
#define SHDW_MISCTEST1r_CLR BCM84834_SHDW_MISCTEST1r_CLR
#define SHDW_MISCTEST1r_SET BCM84834_SHDW_MISCTEST1r_SET
#define SHDW_MISCTEST1r_GET BCM84834_SHDW_MISCTEST1r_GET
#define SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_GET BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_GET
#define SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_SET BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_ENABLEf_SET
#define SHDW_MISCTEST1r_TDK_FIX_ENABLEf_GET BCM84834_SHDW_MISCTEST1r_TDK_FIX_ENABLEf_GET
#define SHDW_MISCTEST1r_TDK_FIX_ENABLEf_SET BCM84834_SHDW_MISCTEST1r_TDK_FIX_ENABLEf_SET
#define SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_GET BCM84834_SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_GET
#define SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_SET BCM84834_SHDW_MISCTEST1r_EN_DED_10BT_DLL_BYP_CLKf_SET
#define SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_GET BCM84834_SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_GET
#define SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_SET BCM84834_SHDW_MISCTEST1r_BLK_10BT_RESTART_AUTONEGf_SET
#define SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_GET BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_GET
#define SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_SET BCM84834_SHDW_MISCTEST1r_REMOTE_LOOPBACK_TRISTATEf_SET
#define SHDW_MISCTEST1r_X10BT_WAKEUPf_GET BCM84834_SHDW_MISCTEST1r_X10BT_WAKEUPf_GET
#define SHDW_MISCTEST1r_X10BT_WAKEUPf_SET BCM84834_SHDW_MISCTEST1r_X10BT_WAKEUPf_SET
#define SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_GET BCM84834_SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_GET
#define SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_SET BCM84834_SHDW_MISCTEST1r_X10BT_POLARITY_BYPASSf_SET
#define SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_GET BCM84834_SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_GET
#define SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_SET BCM84834_SHDW_MISCTEST1r_X10BT_IDLE_BYPASSf_SET
#define SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_GET BCM84834_SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_GET
#define SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_SET BCM84834_SHDW_MISCTEST1r_X10BT_CLOCK_RESET_ENABLEf_SET
#define SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_GET BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_GET
#define SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_SET BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_ADCf_SET
#define SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_GET BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_GET
#define SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_SET BCM84834_SHDW_MISCTEST1r_X10BT_BYPASS_CRSf_SET
#define SHDW_MISCTEST1r_SWAP_RXMDIXf_GET BCM84834_SHDW_MISCTEST1r_SWAP_RXMDIXf_GET
#define SHDW_MISCTEST1r_SWAP_RXMDIXf_SET BCM84834_SHDW_MISCTEST1r_SWAP_RXMDIXf_SET
#define SHDW_MISCTEST1r_HALFOUTf_GET BCM84834_SHDW_MISCTEST1r_HALFOUTf_GET
#define SHDW_MISCTEST1r_HALFOUTf_SET BCM84834_SHDW_MISCTEST1r_HALFOUTf_SET
#define SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_MISCTEST1r_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_MISCTEST1r BCM84834_READ_SHDW_MISCTEST1r
#define WRITE_SHDW_MISCTEST1r BCM84834_WRITE_SHDW_MISCTEST1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISCTEST1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISCTEST2
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Misc Test Register 2 (Shadow Register Selector = "101")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     EN_PWRDNTDAC     
 *     ENABLE_FORCE_MDIX 
 *     ENABLE_EC_AS_NEXT 
 *     OLD_PCS_ENCODING_TX 
 *     OLD_PCS_ENCODING_RX 
 *     DISABLE_AUTO_ENCODING_CORRECTION 
 *     SPARE            
 *     CLASS_A_B_ENABLE_100TX 
 *     CLASS_A_B_DVT_ENABLE 
 *     ADCFIFO_TX_FIX   
 *     CU_ENERGY_DETECT_OVERRIDE 
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISCTEST2r (0x00000518 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISCTEST2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISCTEST2.
 *
 */
typedef union BCM84834_SHDW_MISCTEST2r_s {
	uint32_t v[1];
	uint32_t shdw_misctest2[1];
	uint32_t _shdw_misctest2;
} BCM84834_SHDW_MISCTEST2r_t;

#define BCM84834_SHDW_MISCTEST2r_CLR(r) (r).shdw_misctest2[0] = 0
#define BCM84834_SHDW_MISCTEST2r_SET(r,d) (r).shdw_misctest2[0] = d
#define BCM84834_SHDW_MISCTEST2r_GET(r) (r).shdw_misctest2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_GET(r) ((((r).shdw_misctest2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_GET(r) ((((r).shdw_misctest2[0]) >> 14) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_GET(r) ((((r).shdw_misctest2[0]) >> 13) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_GET(r) ((((r).shdw_misctest2[0]) >> 12) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_SHDW_MISCTEST2r_SPAREf_GET(r) ((((r).shdw_misctest2[0]) >> 9) & 0x7)
#define BCM84834_SHDW_MISCTEST2r_SPAREf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCM84834_SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_GET(r) ((((r).shdw_misctest2[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_GET(r) ((((r).shdw_misctest2[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_GET(r) ((((r).shdw_misctest2[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_GET(r) ((((r).shdw_misctest2[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_GET(r) ((((r).shdw_misctest2[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISCTEST2r_EN_PWRDNTDACf_GET(r) ((((r).shdw_misctest2[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISCTEST2r_EN_PWRDNTDACf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_misctest2[0]) & 0x7)
#define BCM84834_SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_misctest2[0]=(((r).shdw_misctest2[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_MISCTEST2.
 *
 */
#define BCM84834_READ_SHDW_MISCTEST2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISCTEST2r,(_r._shdw_misctest2))
#define BCM84834_WRITE_SHDW_MISCTEST2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISCTEST2r,(_r._shdw_misctest2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISCTEST2r BCM84834_SHDW_MISCTEST2r
#define SHDW_MISCTEST2r_SIZE BCM84834_SHDW_MISCTEST2r_SIZE
typedef BCM84834_SHDW_MISCTEST2r_t SHDW_MISCTEST2r_t;
#define SHDW_MISCTEST2r_CLR BCM84834_SHDW_MISCTEST2r_CLR
#define SHDW_MISCTEST2r_SET BCM84834_SHDW_MISCTEST2r_SET
#define SHDW_MISCTEST2r_GET BCM84834_SHDW_MISCTEST2r_GET
#define SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_GET BCM84834_SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_GET
#define SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_SET BCM84834_SHDW_MISCTEST2r_CU_ENERGY_DETECT_OVERRIDEf_SET
#define SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_GET BCM84834_SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_GET
#define SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_SET BCM84834_SHDW_MISCTEST2r_ADCFIFO_TX_FIXf_SET
#define SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_GET BCM84834_SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_GET
#define SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_SET BCM84834_SHDW_MISCTEST2r_CLASS_A_B_DVT_ENABLEf_SET
#define SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_GET BCM84834_SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_GET
#define SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_SET BCM84834_SHDW_MISCTEST2r_CLASS_A_B_ENABLE_100TXf_SET
#define SHDW_MISCTEST2r_SPAREf_GET BCM84834_SHDW_MISCTEST2r_SPAREf_GET
#define SHDW_MISCTEST2r_SPAREf_SET BCM84834_SHDW_MISCTEST2r_SPAREf_SET
#define SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_GET BCM84834_SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_GET
#define SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_SET BCM84834_SHDW_MISCTEST2r_DISABLE_AUTO_ENCODING_CORRECTIONf_SET
#define SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_GET BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_GET
#define SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_SET BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_RXf_SET
#define SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_GET BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_GET
#define SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_SET BCM84834_SHDW_MISCTEST2r_OLD_PCS_ENCODING_TXf_SET
#define SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_GET BCM84834_SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_GET
#define SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_SET BCM84834_SHDW_MISCTEST2r_ENABLE_EC_AS_NEXTf_SET
#define SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_GET BCM84834_SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_GET
#define SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_SET BCM84834_SHDW_MISCTEST2r_ENABLE_FORCE_MDIXf_SET
#define SHDW_MISCTEST2r_EN_PWRDNTDACf_GET BCM84834_SHDW_MISCTEST2r_EN_PWRDNTDACf_GET
#define SHDW_MISCTEST2r_EN_PWRDNTDACf_SET BCM84834_SHDW_MISCTEST2r_EN_PWRDNTDACf_SET
#define SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_MISCTEST2r_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_MISCTEST2r BCM84834_READ_SHDW_MISCTEST2r
#define WRITE_SHDW_MISCTEST2r BCM84834_WRITE_SHDW_MISCTEST2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISCTEST2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MANUALIPPHONESEED
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Manual IP Phone Seed Register (Shadow RegisterSelector = "110")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     LOCAL_IP_PHONE_SEED 
 *     SPARE            
 *     WRITEABLE_IP_PHONE_SEED 
 *
 ******************************************************************************/
#define BCM84834_SHDW_MANUALIPPHONESEEDr (0x00000618 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MANUALIPPHONESEEDr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MANUALIPPHONESEED.
 *
 */
typedef union BCM84834_SHDW_MANUALIPPHONESEEDr_s {
	uint32_t v[1];
	uint32_t shdw_manualipphoneseed[1];
	uint32_t _shdw_manualipphoneseed;
} BCM84834_SHDW_MANUALIPPHONESEEDr_t;

#define BCM84834_SHDW_MANUALIPPHONESEEDr_CLR(r) (r).shdw_manualipphoneseed[0] = 0
#define BCM84834_SHDW_MANUALIPPHONESEEDr_SET(r,d) (r).shdw_manualipphoneseed[0] = d
#define BCM84834_SHDW_MANUALIPPHONESEEDr_GET(r) (r).shdw_manualipphoneseed[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_GET(r) ((((r).shdw_manualipphoneseed[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_SET(r,f) (r).shdw_manualipphoneseed[0]=(((r).shdw_manualipphoneseed[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MANUALIPPHONESEEDr_SPAREf_GET(r) ((((r).shdw_manualipphoneseed[0]) >> 14) & 0x1)
#define BCM84834_SHDW_MANUALIPPHONESEEDr_SPAREf_SET(r,f) (r).shdw_manualipphoneseed[0]=(((r).shdw_manualipphoneseed[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_GET(r) ((((r).shdw_manualipphoneseed[0]) >> 3) & 0x7ff)
#define BCM84834_SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_SET(r,f) (r).shdw_manualipphoneseed[0]=(((r).shdw_manualipphoneseed[0] & ~((uint32_t)0x7ff << 3)) | ((((uint32_t)f) & 0x7ff) << 3))
#define BCM84834_SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_manualipphoneseed[0]) & 0x7)
#define BCM84834_SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_manualipphoneseed[0]=(((r).shdw_manualipphoneseed[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_MANUALIPPHONESEED.
 *
 */
#define BCM84834_READ_SHDW_MANUALIPPHONESEEDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MANUALIPPHONESEEDr,(_r._shdw_manualipphoneseed))
#define BCM84834_WRITE_SHDW_MANUALIPPHONESEEDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MANUALIPPHONESEEDr,(_r._shdw_manualipphoneseed))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MANUALIPPHONESEEDr BCM84834_SHDW_MANUALIPPHONESEEDr
#define SHDW_MANUALIPPHONESEEDr_SIZE BCM84834_SHDW_MANUALIPPHONESEEDr_SIZE
typedef BCM84834_SHDW_MANUALIPPHONESEEDr_t SHDW_MANUALIPPHONESEEDr_t;
#define SHDW_MANUALIPPHONESEEDr_CLR BCM84834_SHDW_MANUALIPPHONESEEDr_CLR
#define SHDW_MANUALIPPHONESEEDr_SET BCM84834_SHDW_MANUALIPPHONESEEDr_SET
#define SHDW_MANUALIPPHONESEEDr_GET BCM84834_SHDW_MANUALIPPHONESEEDr_GET
#define SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_GET BCM84834_SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_GET
#define SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_SET BCM84834_SHDW_MANUALIPPHONESEEDr_WRITEABLE_IP_PHONE_SEEDf_SET
#define SHDW_MANUALIPPHONESEEDr_SPAREf_GET BCM84834_SHDW_MANUALIPPHONESEEDr_SPAREf_GET
#define SHDW_MANUALIPPHONESEEDr_SPAREf_SET BCM84834_SHDW_MANUALIPPHONESEEDr_SPAREf_SET
#define SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_GET BCM84834_SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_GET
#define SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_SET BCM84834_SHDW_MANUALIPPHONESEEDr_LOCAL_IP_PHONE_SEEDf_SET
#define SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_MANUALIPPHONESEEDr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_MANUALIPPHONESEEDr BCM84834_READ_SHDW_MANUALIPPHONESEEDr
#define WRITE_SHDW_MANUALIPPHONESEEDr BCM84834_WRITE_SHDW_MANUALIPPHONESEEDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MANUALIPPHONESEEDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISCCONTROL
 * BLOCKS:   SHDW_18H
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     Misc Control Register (Shadow Register Selector = "111")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECTOR 
 *     MDIO_ALL_PHY_SEL 
 *     WIRESPEED_ENABLE 
 *     RGMII_OUT_OF_BAND_STAT_DIS 
 *     RGMII_RXER_MODE  
 *     RGMII_MODE       
 *     RGMII_TIMING_MODE 
 *     FORCE_AUTO_MDIX_MODE 
 *     BYPASS_WIRESPEED_TIMER 
 *     PACKET_COUNTER_MODE 
 *     SHADOW_REG_READ_SEL 
 *     WRITE_ENABLE_BITS_8_3 
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISCCONTROLr (0x00000718 | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISCCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISCCONTROL.
 *
 */
typedef union BCM84834_SHDW_MISCCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_misccontrol[1];
	uint32_t _shdw_misccontrol;
} BCM84834_SHDW_MISCCONTROLr_t;

#define BCM84834_SHDW_MISCCONTROLr_CLR(r) (r).shdw_misccontrol[0] = 0
#define BCM84834_SHDW_MISCCONTROLr_SET(r,d) (r).shdw_misccontrol[0] = d
#define BCM84834_SHDW_MISCCONTROLr_GET(r) (r).shdw_misccontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_GET(r) ((((r).shdw_misccontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_GET(r) ((((r).shdw_misccontrol[0]) >> 12) & 0x7)
#define BCM84834_SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCM84834_SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_GET(r) ((((r).shdw_misccontrol[0]) >> 11) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_GET(r) ((((r).shdw_misccontrol[0]) >> 10) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_GET(r) ((((r).shdw_misccontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_GET(r) ((((r).shdw_misccontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISCCONTROLr_RGMII_MODEf_GET(r) ((((r).shdw_misccontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_RGMII_MODEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISCCONTROLr_RGMII_RXER_MODEf_GET(r) ((((r).shdw_misccontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_RGMII_RXER_MODEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_GET(r) ((((r).shdw_misccontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_GET(r) ((((r).shdw_misccontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_GET(r) ((((r).shdw_misccontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_GET(r) (((r).shdw_misccontrol[0]) & 0x7)
#define BCM84834_SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_SET(r,f) (r).shdw_misccontrol[0]=(((r).shdw_misccontrol[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access SHDW_MISCCONTROL.
 *
 */
#define BCM84834_READ_SHDW_MISCCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISCCONTROLr,(_r._shdw_misccontrol))
#define BCM84834_WRITE_SHDW_MISCCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISCCONTROLr,(_r._shdw_misccontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISCCONTROLr BCM84834_SHDW_MISCCONTROLr
#define SHDW_MISCCONTROLr_SIZE BCM84834_SHDW_MISCCONTROLr_SIZE
typedef BCM84834_SHDW_MISCCONTROLr_t SHDW_MISCCONTROLr_t;
#define SHDW_MISCCONTROLr_CLR BCM84834_SHDW_MISCCONTROLr_CLR
#define SHDW_MISCCONTROLr_SET BCM84834_SHDW_MISCCONTROLr_SET
#define SHDW_MISCCONTROLr_GET BCM84834_SHDW_MISCCONTROLr_GET
#define SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_GET BCM84834_SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_GET
#define SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_SET BCM84834_SHDW_MISCCONTROLr_WRITE_ENABLE_BITS_8_3f_SET
#define SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_GET BCM84834_SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_GET
#define SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_SET BCM84834_SHDW_MISCCONTROLr_SHADOW_REG_READ_SELf_SET
#define SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_GET BCM84834_SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_GET
#define SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_SET BCM84834_SHDW_MISCCONTROLr_PACKET_COUNTER_MODEf_SET
#define SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_GET BCM84834_SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_GET
#define SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_SET BCM84834_SHDW_MISCCONTROLr_BYPASS_WIRESPEED_TIMERf_SET
#define SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_GET BCM84834_SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_GET
#define SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_SET BCM84834_SHDW_MISCCONTROLr_FORCE_AUTO_MDIX_MODEf_SET
#define SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_GET BCM84834_SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_GET
#define SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_SET BCM84834_SHDW_MISCCONTROLr_RGMII_TIMING_MODEf_SET
#define SHDW_MISCCONTROLr_RGMII_MODEf_GET BCM84834_SHDW_MISCCONTROLr_RGMII_MODEf_GET
#define SHDW_MISCCONTROLr_RGMII_MODEf_SET BCM84834_SHDW_MISCCONTROLr_RGMII_MODEf_SET
#define SHDW_MISCCONTROLr_RGMII_RXER_MODEf_GET BCM84834_SHDW_MISCCONTROLr_RGMII_RXER_MODEf_GET
#define SHDW_MISCCONTROLr_RGMII_RXER_MODEf_SET BCM84834_SHDW_MISCCONTROLr_RGMII_RXER_MODEf_SET
#define SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_GET BCM84834_SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_GET
#define SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_SET BCM84834_SHDW_MISCCONTROLr_RGMII_OUT_OF_BAND_STAT_DISf_SET
#define SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_GET BCM84834_SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_GET
#define SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_SET BCM84834_SHDW_MISCCONTROLr_WIRESPEED_ENABLEf_SET
#define SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_GET BCM84834_SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_GET
#define SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_SET BCM84834_SHDW_MISCCONTROLr_MDIO_ALL_PHY_SELf_SET
#define SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_GET BCM84834_SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_GET
#define SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_SET BCM84834_SHDW_MISCCONTROLr_SHADOW_REGISTER_SELECTORf_SET
#define READ_SHDW_MISCCONTROLr BCM84834_READ_SHDW_MISCCONTROLr
#define WRITE_SHDW_MISCCONTROLr BCM84834_WRITE_SHDW_MISCCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISCCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_LP_XNP_ABIL
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0019
 * DEVAD:    7
 * DESC:     AN_LP_XNP_Ability Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *     TOGGLE           
 *     ACKNOWLEDGE2     
 *     MESSAGE_PAGE     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_AN_LP_XNP_ABILr (0x00070019 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_LP_XNP_ABILr_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABIL.
 *
 */
typedef union BCM84834_AN_LP_XNP_ABILr_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_abil[1];
	uint32_t _an_lp_xnp_abil;
} BCM84834_AN_LP_XNP_ABILr_t;

#define BCM84834_AN_LP_XNP_ABILr_CLR(r) (r).an_lp_xnp_abil[0] = 0
#define BCM84834_AN_LP_XNP_ABILr_SET(r,d) (r).an_lp_xnp_abil[0] = d
#define BCM84834_AN_LP_XNP_ABILr_GET(r) (r).an_lp_xnp_abil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_LP_XNP_ABILr_NEXT_PAGEf_GET(r) ((((r).an_lp_xnp_abil[0]) >> 15) & 0x1)
#define BCM84834_AN_LP_XNP_ABILr_NEXT_PAGEf_SET(r,f) (r).an_lp_xnp_abil[0]=(((r).an_lp_xnp_abil[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_AN_LP_XNP_ABILr_MESSAGE_PAGEf_GET(r) ((((r).an_lp_xnp_abil[0]) >> 13) & 0x1)
#define BCM84834_AN_LP_XNP_ABILr_MESSAGE_PAGEf_SET(r,f) (r).an_lp_xnp_abil[0]=(((r).an_lp_xnp_abil[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_AN_LP_XNP_ABILr_ACKNOWLEDGE2f_GET(r) ((((r).an_lp_xnp_abil[0]) >> 12) & 0x1)
#define BCM84834_AN_LP_XNP_ABILr_ACKNOWLEDGE2f_SET(r,f) (r).an_lp_xnp_abil[0]=(((r).an_lp_xnp_abil[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_LP_XNP_ABILr_TOGGLEf_GET(r) ((((r).an_lp_xnp_abil[0]) >> 11) & 0x1)
#define BCM84834_AN_LP_XNP_ABILr_TOGGLEf_SET(r,f) (r).an_lp_xnp_abil[0]=(((r).an_lp_xnp_abil[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_lp_xnp_abil[0]) & 0x7ff)
#define BCM84834_AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_lp_xnp_abil[0]=(((r).an_lp_xnp_abil[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_LP_XNP_ABIL.
 *
 */
#define BCM84834_READ_AN_LP_XNP_ABILr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_LP_XNP_ABILr,(_r._an_lp_xnp_abil))
#define BCM84834_WRITE_AN_LP_XNP_ABILr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_LP_XNP_ABILr,(_r._an_lp_xnp_abil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABILr BCM84834_AN_LP_XNP_ABILr
#define AN_LP_XNP_ABILr_SIZE BCM84834_AN_LP_XNP_ABILr_SIZE
typedef BCM84834_AN_LP_XNP_ABILr_t AN_LP_XNP_ABILr_t;
#define AN_LP_XNP_ABILr_CLR BCM84834_AN_LP_XNP_ABILr_CLR
#define AN_LP_XNP_ABILr_SET BCM84834_AN_LP_XNP_ABILr_SET
#define AN_LP_XNP_ABILr_GET BCM84834_AN_LP_XNP_ABILr_GET
#define AN_LP_XNP_ABILr_NEXT_PAGEf_GET BCM84834_AN_LP_XNP_ABILr_NEXT_PAGEf_GET
#define AN_LP_XNP_ABILr_NEXT_PAGEf_SET BCM84834_AN_LP_XNP_ABILr_NEXT_PAGEf_SET
#define AN_LP_XNP_ABILr_MESSAGE_PAGEf_GET BCM84834_AN_LP_XNP_ABILr_MESSAGE_PAGEf_GET
#define AN_LP_XNP_ABILr_MESSAGE_PAGEf_SET BCM84834_AN_LP_XNP_ABILr_MESSAGE_PAGEf_SET
#define AN_LP_XNP_ABILr_ACKNOWLEDGE2f_GET BCM84834_AN_LP_XNP_ABILr_ACKNOWLEDGE2f_GET
#define AN_LP_XNP_ABILr_ACKNOWLEDGE2f_SET BCM84834_AN_LP_XNP_ABILr_ACKNOWLEDGE2f_SET
#define AN_LP_XNP_ABILr_TOGGLEf_GET BCM84834_AN_LP_XNP_ABILr_TOGGLEf_GET
#define AN_LP_XNP_ABILr_TOGGLEf_SET BCM84834_AN_LP_XNP_ABILr_TOGGLEf_SET
#define AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_LP_XNP_ABILr_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_LP_XNP_ABILr BCM84834_READ_AN_LP_XNP_ABILr
#define WRITE_AN_LP_XNP_ABILr BCM84834_WRITE_AN_LP_XNP_ABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_LP_XNP_ABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_LP_XNP_ABIL2
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x001a
 * DEVAD:    7
 * DESC:     AN_LP_XNP_Ability2 Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *
 ******************************************************************************/
#define BCM84834_AN_LP_XNP_ABIL2r (0x0007001a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_LP_XNP_ABIL2r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABIL2.
 *
 */
typedef union BCM84834_AN_LP_XNP_ABIL2r_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_abil2[1];
	uint32_t _an_lp_xnp_abil2;
} BCM84834_AN_LP_XNP_ABIL2r_t;

#define BCM84834_AN_LP_XNP_ABIL2r_CLR(r) (r).an_lp_xnp_abil2[0] = 0
#define BCM84834_AN_LP_XNP_ABIL2r_SET(r,d) (r).an_lp_xnp_abil2[0] = d
#define BCM84834_AN_LP_XNP_ABIL2r_GET(r) (r).an_lp_xnp_abil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_lp_xnp_abil2[0]) & 0xffff)
#define BCM84834_AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_lp_xnp_abil2[0]=(((r).an_lp_xnp_abil2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_XNP_ABIL2.
 *
 */
#define BCM84834_READ_AN_LP_XNP_ABIL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_LP_XNP_ABIL2r,(_r._an_lp_xnp_abil2))
#define BCM84834_WRITE_AN_LP_XNP_ABIL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_LP_XNP_ABIL2r,(_r._an_lp_xnp_abil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABIL2r BCM84834_AN_LP_XNP_ABIL2r
#define AN_LP_XNP_ABIL2r_SIZE BCM84834_AN_LP_XNP_ABIL2r_SIZE
typedef BCM84834_AN_LP_XNP_ABIL2r_t AN_LP_XNP_ABIL2r_t;
#define AN_LP_XNP_ABIL2r_CLR BCM84834_AN_LP_XNP_ABIL2r_CLR
#define AN_LP_XNP_ABIL2r_SET BCM84834_AN_LP_XNP_ABIL2r_SET
#define AN_LP_XNP_ABIL2r_GET BCM84834_AN_LP_XNP_ABIL2r_GET
#define AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_LP_XNP_ABIL2r_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_LP_XNP_ABIL2r BCM84834_READ_AN_LP_XNP_ABIL2r
#define WRITE_AN_LP_XNP_ABIL2r BCM84834_WRITE_AN_LP_XNP_ABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_LP_XNP_ABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_LP_XNP_ABIL3
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x001b
 * DEVAD:    7
 * DESC:     AN_LP_XNP_Ability3 Register
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_UNFORMATTED_CODE 
 *
 ******************************************************************************/
#define BCM84834_AN_LP_XNP_ABIL3r (0x0007001b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_LP_XNP_ABIL3r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_XNP_ABIL3.
 *
 */
typedef union BCM84834_AN_LP_XNP_ABIL3r_s {
	uint32_t v[1];
	uint32_t an_lp_xnp_abil3[1];
	uint32_t _an_lp_xnp_abil3;
} BCM84834_AN_LP_XNP_ABIL3r_t;

#define BCM84834_AN_LP_XNP_ABIL3r_CLR(r) (r).an_lp_xnp_abil3[0] = 0
#define BCM84834_AN_LP_XNP_ABIL3r_SET(r,d) (r).an_lp_xnp_abil3[0] = d
#define BCM84834_AN_LP_XNP_ABIL3r_GET(r) (r).an_lp_xnp_abil3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_GET(r) (((r).an_lp_xnp_abil3[0]) & 0xffff)
#define BCM84834_AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_SET(r,f) (r).an_lp_xnp_abil3[0]=(((r).an_lp_xnp_abil3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_XNP_ABIL3.
 *
 */
#define BCM84834_READ_AN_LP_XNP_ABIL3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_LP_XNP_ABIL3r,(_r._an_lp_xnp_abil3))
#define BCM84834_WRITE_AN_LP_XNP_ABIL3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_LP_XNP_ABIL3r,(_r._an_lp_xnp_abil3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_XNP_ABIL3r BCM84834_AN_LP_XNP_ABIL3r
#define AN_LP_XNP_ABIL3r_SIZE BCM84834_AN_LP_XNP_ABIL3r_SIZE
typedef BCM84834_AN_LP_XNP_ABIL3r_t AN_LP_XNP_ABIL3r_t;
#define AN_LP_XNP_ABIL3r_CLR BCM84834_AN_LP_XNP_ABIL3r_CLR
#define AN_LP_XNP_ABIL3r_SET BCM84834_AN_LP_XNP_ABIL3r_SET
#define AN_LP_XNP_ABIL3r_GET BCM84834_AN_LP_XNP_ABIL3r_GET
#define AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_GET BCM84834_AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_GET
#define AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_SET BCM84834_AN_LP_XNP_ABIL3r_MESSAGE_UNFORMATTED_CODEf_SET
#define READ_AN_LP_XNP_ABIL3r BCM84834_READ_AN_LP_XNP_ABIL3r
#define WRITE_AN_LP_XNP_ABIL3r BCM84834_WRITE_AN_LP_XNP_ABIL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_LP_XNP_ABIL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_CABLETRONLED
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Cabletron LED Register (Shadow Register Selector ="00h")
 * SIZE:     32
 * FIELDS:
 *     CABLETRON_LED_REGISTER 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_CABLETRONLEDr (0x0000001c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_CABLETRONLEDr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_CABLETRONLED.
 *
 */
typedef union BCM84834_SHDW_CABLETRONLEDr_s {
	uint32_t v[1];
	uint32_t shdw_cabletronled[1];
	uint32_t _shdw_cabletronled;
} BCM84834_SHDW_CABLETRONLEDr_t;

#define BCM84834_SHDW_CABLETRONLEDr_CLR(r) (r).shdw_cabletronled[0] = 0
#define BCM84834_SHDW_CABLETRONLEDr_SET(r,d) (r).shdw_cabletronled[0] = d
#define BCM84834_SHDW_CABLETRONLEDr_GET(r) (r).shdw_cabletronled[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_CABLETRONLEDr_WRITE_ENABLEf_GET(r) ((((r).shdw_cabletronled[0]) >> 15) & 0x1)
#define BCM84834_SHDW_CABLETRONLEDr_WRITE_ENABLEf_SET(r,f) (r).shdw_cabletronled[0]=(((r).shdw_cabletronled[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_cabletronled[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_cabletronled[0]=(((r).shdw_cabletronled[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_GET(r) (((r).shdw_cabletronled[0]) & 0xff)
#define BCM84834_SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_SET(r,f) (r).shdw_cabletronled[0]=(((r).shdw_cabletronled[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access SHDW_CABLETRONLED.
 *
 */
#define BCM84834_READ_SHDW_CABLETRONLEDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_CABLETRONLEDr,(_r._shdw_cabletronled))
#define BCM84834_WRITE_SHDW_CABLETRONLEDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_CABLETRONLEDr,(_r._shdw_cabletronled))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_CABLETRONLEDr BCM84834_SHDW_CABLETRONLEDr
#define SHDW_CABLETRONLEDr_SIZE BCM84834_SHDW_CABLETRONLEDr_SIZE
typedef BCM84834_SHDW_CABLETRONLEDr_t SHDW_CABLETRONLEDr_t;
#define SHDW_CABLETRONLEDr_CLR BCM84834_SHDW_CABLETRONLEDr_CLR
#define SHDW_CABLETRONLEDr_SET BCM84834_SHDW_CABLETRONLEDr_SET
#define SHDW_CABLETRONLEDr_GET BCM84834_SHDW_CABLETRONLEDr_GET
#define SHDW_CABLETRONLEDr_WRITE_ENABLEf_GET BCM84834_SHDW_CABLETRONLEDr_WRITE_ENABLEf_GET
#define SHDW_CABLETRONLEDr_WRITE_ENABLEf_SET BCM84834_SHDW_CABLETRONLEDr_WRITE_ENABLEf_SET
#define SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_CABLETRONLEDr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_GET BCM84834_SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_GET
#define SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_SET BCM84834_SHDW_CABLETRONLEDr_CABLETRON_LED_REGISTERf_SET
#define READ_SHDW_CABLETRONLEDr BCM84834_READ_SHDW_CABLETRONLEDr
#define WRITE_SHDW_CABLETRONLEDr BCM84834_WRITE_SHDW_CABLETRONLEDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_CABLETRONLEDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_DLLSELECTION
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     DLL Selection Register (Shadow Register Selector = "01h")
 * SIZE:     32
 * FIELDS:
 *     HIGH_QUAL_CLOCK_TMODE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_DLLSELECTIONr (0x0000011c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_DLLSELECTIONr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_DLLSELECTION.
 *
 */
typedef union BCM84834_SHDW_DLLSELECTIONr_s {
	uint32_t v[1];
	uint32_t shdw_dllselection[1];
	uint32_t _shdw_dllselection;
} BCM84834_SHDW_DLLSELECTIONr_t;

#define BCM84834_SHDW_DLLSELECTIONr_CLR(r) (r).shdw_dllselection[0] = 0
#define BCM84834_SHDW_DLLSELECTIONr_SET(r,d) (r).shdw_dllselection[0] = d
#define BCM84834_SHDW_DLLSELECTIONr_GET(r) (r).shdw_dllselection[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_DLLSELECTIONr_WRITE_ENABLEf_GET(r) ((((r).shdw_dllselection[0]) >> 15) & 0x1)
#define BCM84834_SHDW_DLLSELECTIONr_WRITE_ENABLEf_SET(r,f) (r).shdw_dllselection[0]=(((r).shdw_dllselection[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_dllselection[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_dllselection[0]=(((r).shdw_dllselection[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_GET(r) (((r).shdw_dllselection[0]) & 0x3f)
#define BCM84834_SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_SET(r,f) (r).shdw_dllselection[0]=(((r).shdw_dllselection[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access SHDW_DLLSELECTION.
 *
 */
#define BCM84834_READ_SHDW_DLLSELECTIONr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_DLLSELECTIONr,(_r._shdw_dllselection))
#define BCM84834_WRITE_SHDW_DLLSELECTIONr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_DLLSELECTIONr,(_r._shdw_dllselection))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_DLLSELECTIONr BCM84834_SHDW_DLLSELECTIONr
#define SHDW_DLLSELECTIONr_SIZE BCM84834_SHDW_DLLSELECTIONr_SIZE
typedef BCM84834_SHDW_DLLSELECTIONr_t SHDW_DLLSELECTIONr_t;
#define SHDW_DLLSELECTIONr_CLR BCM84834_SHDW_DLLSELECTIONr_CLR
#define SHDW_DLLSELECTIONr_SET BCM84834_SHDW_DLLSELECTIONr_SET
#define SHDW_DLLSELECTIONr_GET BCM84834_SHDW_DLLSELECTIONr_GET
#define SHDW_DLLSELECTIONr_WRITE_ENABLEf_GET BCM84834_SHDW_DLLSELECTIONr_WRITE_ENABLEf_GET
#define SHDW_DLLSELECTIONr_WRITE_ENABLEf_SET BCM84834_SHDW_DLLSELECTIONr_WRITE_ENABLEf_SET
#define SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_DLLSELECTIONr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_GET BCM84834_SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_GET
#define SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_SET BCM84834_SHDW_DLLSELECTIONr_HIGH_QUAL_CLOCK_TMODEf_SET
#define READ_SHDW_DLLSELECTIONr BCM84834_READ_SHDW_DLLSELECTIONr
#define WRITE_SHDW_DLLSELECTIONr BCM84834_WRITE_SHDW_DLLSELECTIONr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_DLLSELECTIONr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SPARECONTROL1
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Spare Control 1 Register (Shadow Register Selector ="02h")
 * SIZE:     32
 * FIELDS:
 *     LINK_LED_MODE    
 *     LOST_TOKEN_FIX_DISABLE 
 *     BICOLOR_LINK_SPD_LED 
 *     X100FX_MODE_CU_PATH 
 *     USE_FILTERED_SD  
 *     CFC_INITFILTER_ENABLE 
 *     INVERT_SD_PIN    
 *     FORCE_SD_ON      
 *     SD_STATUS        
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SPARECONTROL1r (0x0000021c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SPARECONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SPARECONTROL1.
 *
 */
typedef union BCM84834_SHDW_SPARECONTROL1r_s {
	uint32_t v[1];
	uint32_t shdw_sparecontrol1[1];
	uint32_t _shdw_sparecontrol1;
} BCM84834_SHDW_SPARECONTROL1r_t;

#define BCM84834_SHDW_SPARECONTROL1r_CLR(r) (r).shdw_sparecontrol1[0] = 0
#define BCM84834_SHDW_SPARECONTROL1r_SET(r,d) (r).shdw_sparecontrol1[0] = d
#define BCM84834_SHDW_SPARECONTROL1r_GET(r) (r).shdw_sparecontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SPARECONTROL1r_WRITE_ENABLEf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_WRITE_ENABLEf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SPARECONTROL1r_SD_STATUSf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 9) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_SD_STATUSf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_SPARECONTROL1r_FORCE_SD_ONf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 8) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_FORCE_SD_ONf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_SPARECONTROL1r_INVERT_SD_PINf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 7) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_INVERT_SD_PINf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SPARECONTROL1r_USE_FILTERED_SDf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_USE_FILTERED_SDf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 4) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_GET(r) ((((r).shdw_sparecontrol1[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SPARECONTROL1r_LINK_LED_MODEf_GET(r) (((r).shdw_sparecontrol1[0]) & 0x1)
#define BCM84834_SHDW_SPARECONTROL1r_LINK_LED_MODEf_SET(r,f) (r).shdw_sparecontrol1[0]=(((r).shdw_sparecontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SPARECONTROL1.
 *
 */
#define BCM84834_READ_SHDW_SPARECONTROL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SPARECONTROL1r,(_r._shdw_sparecontrol1))
#define BCM84834_WRITE_SHDW_SPARECONTROL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SPARECONTROL1r,(_r._shdw_sparecontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SPARECONTROL1r BCM84834_SHDW_SPARECONTROL1r
#define SHDW_SPARECONTROL1r_SIZE BCM84834_SHDW_SPARECONTROL1r_SIZE
typedef BCM84834_SHDW_SPARECONTROL1r_t SHDW_SPARECONTROL1r_t;
#define SHDW_SPARECONTROL1r_CLR BCM84834_SHDW_SPARECONTROL1r_CLR
#define SHDW_SPARECONTROL1r_SET BCM84834_SHDW_SPARECONTROL1r_SET
#define SHDW_SPARECONTROL1r_GET BCM84834_SHDW_SPARECONTROL1r_GET
#define SHDW_SPARECONTROL1r_WRITE_ENABLEf_GET BCM84834_SHDW_SPARECONTROL1r_WRITE_ENABLEf_GET
#define SHDW_SPARECONTROL1r_WRITE_ENABLEf_SET BCM84834_SHDW_SPARECONTROL1r_WRITE_ENABLEf_SET
#define SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SPARECONTROL1r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SPARECONTROL1r_SD_STATUSf_GET BCM84834_SHDW_SPARECONTROL1r_SD_STATUSf_GET
#define SHDW_SPARECONTROL1r_SD_STATUSf_SET BCM84834_SHDW_SPARECONTROL1r_SD_STATUSf_SET
#define SHDW_SPARECONTROL1r_FORCE_SD_ONf_GET BCM84834_SHDW_SPARECONTROL1r_FORCE_SD_ONf_GET
#define SHDW_SPARECONTROL1r_FORCE_SD_ONf_SET BCM84834_SHDW_SPARECONTROL1r_FORCE_SD_ONf_SET
#define SHDW_SPARECONTROL1r_INVERT_SD_PINf_GET BCM84834_SHDW_SPARECONTROL1r_INVERT_SD_PINf_GET
#define SHDW_SPARECONTROL1r_INVERT_SD_PINf_SET BCM84834_SHDW_SPARECONTROL1r_INVERT_SD_PINf_SET
#define SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_GET BCM84834_SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_GET
#define SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_SET BCM84834_SHDW_SPARECONTROL1r_CFC_INITFILTER_ENABLEf_SET
#define SHDW_SPARECONTROL1r_USE_FILTERED_SDf_GET BCM84834_SHDW_SPARECONTROL1r_USE_FILTERED_SDf_GET
#define SHDW_SPARECONTROL1r_USE_FILTERED_SDf_SET BCM84834_SHDW_SPARECONTROL1r_USE_FILTERED_SDf_SET
#define SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_GET BCM84834_SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_GET
#define SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_SET BCM84834_SHDW_SPARECONTROL1r_X100FX_MODE_CU_PATHf_SET
#define SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_GET BCM84834_SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_GET
#define SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_SET BCM84834_SHDW_SPARECONTROL1r_BICOLOR_LINK_SPD_LEDf_SET
#define SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_GET BCM84834_SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_GET
#define SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_SET BCM84834_SHDW_SPARECONTROL1r_LOST_TOKEN_FIX_DISABLEf_SET
#define SHDW_SPARECONTROL1r_LINK_LED_MODEf_GET BCM84834_SHDW_SPARECONTROL1r_LINK_LED_MODEf_GET
#define SHDW_SPARECONTROL1r_LINK_LED_MODEf_SET BCM84834_SHDW_SPARECONTROL1r_LINK_LED_MODEf_SET
#define READ_SHDW_SPARECONTROL1r BCM84834_READ_SHDW_SPARECONTROL1r
#define WRITE_SHDW_SPARECONTROL1r BCM84834_WRITE_SHDW_SPARECONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SPARECONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_CLOCKALIGNMENTCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Clock Alignment Control Register (ShadowRegister Selector = "03h")
 * SIZE:     32
 * FIELDS:
 *     DELAY_LINE_SELECTOR 
 *     DELAY_VALUE      
 *     RXCLK_ALIGN_STROBE 
 *     GMII_CLK_ALIGN_STROBE 
 *     GTXCLK_DELAY_BYPASS_DISABLE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr (0x0000031c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_CLOCKALIGNMENTCONTROL.
 *
 */
typedef union BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_clockalignmentcontrol[1];
	uint32_t _shdw_clockalignmentcontrol;
} BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_t;

#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_CLR(r) (r).shdw_clockalignmentcontrol[0] = 0
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SET(r,d) (r).shdw_clockalignmentcontrol[0] = d
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GET(r) (r).shdw_clockalignmentcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_GET(r) ((((r).shdw_clockalignmentcontrol[0]) >> 4) & 0x7)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_GET(r) (((r).shdw_clockalignmentcontrol[0]) & 0xf)
#define BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_SET(r,f) (r).shdw_clockalignmentcontrol[0]=(((r).shdw_clockalignmentcontrol[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_CLOCKALIGNMENTCONTROL.
 *
 */
#define BCM84834_READ_SHDW_CLOCKALIGNMENTCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_CLOCKALIGNMENTCONTROLr,(_r._shdw_clockalignmentcontrol))
#define BCM84834_WRITE_SHDW_CLOCKALIGNMENTCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_CLOCKALIGNMENTCONTROLr,(_r._shdw_clockalignmentcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_CLOCKALIGNMENTCONTROLr BCM84834_SHDW_CLOCKALIGNMENTCONTROLr
#define SHDW_CLOCKALIGNMENTCONTROLr_SIZE BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SIZE
typedef BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_t SHDW_CLOCKALIGNMENTCONTROLr_t;
#define SHDW_CLOCKALIGNMENTCONTROLr_CLR BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_CLR
#define SHDW_CLOCKALIGNMENTCONTROLr_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_WRITE_ENABLEf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GTXCLK_DELAY_BYPASS_DISABLEf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_GMII_CLK_ALIGN_STROBEf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_RXCLK_ALIGN_STROBEf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_VALUEf_SET
#define SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_GET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_GET
#define SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_SET BCM84834_SHDW_CLOCKALIGNMENTCONTROLr_DELAY_LINE_SELECTORf_SET
#define READ_SHDW_CLOCKALIGNMENTCONTROLr BCM84834_READ_SHDW_CLOCKALIGNMENTCONTROLr
#define WRITE_SHDW_CLOCKALIGNMENTCONTROLr BCM84834_WRITE_SHDW_CLOCKALIGNMENTCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_CLOCKALIGNMENTCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SPARECONTROL2
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Spare Control 2 Register (Shadow Register Selector ="04h")
 * SIZE:     32
 * FIELDS:
 *     TESTONBYTE7_0    
 *     ENERGY_DETECT_ON_INTR 
 *     WIRESPEED_RETRY_LIMIT 
 *     ENABLE_RBC0_1_TXC_RXC_TRISTATE 
 *     DISABLE_PHYA2    
 *     SELECT_TPOUT_RXD 
 *     WIRESPEED_RETRY_DISABLE 
 *     SPARE            
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SPARECONTROL2r (0x0000041c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SPARECONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SPARECONTROL2.
 *
 */
typedef union BCM84834_SHDW_SPARECONTROL2r_s {
	uint32_t v[1];
	uint32_t shdw_sparecontrol2[1];
	uint32_t _shdw_sparecontrol2;
} BCM84834_SHDW_SPARECONTROL2r_t;

#define BCM84834_SHDW_SPARECONTROL2r_CLR(r) (r).shdw_sparecontrol2[0] = 0
#define BCM84834_SHDW_SPARECONTROL2r_SET(r,d) (r).shdw_sparecontrol2[0] = d
#define BCM84834_SHDW_SPARECONTROL2r_GET(r) (r).shdw_sparecontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SPARECONTROL2r_WRITE_ENABLEf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_WRITE_ENABLEf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SPARECONTROL2r_SPAREf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 9) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_SPAREf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 8) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 7) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_SPARECONTROL2r_DISABLE_PHYA2f_GET(r) ((((r).shdw_sparecontrol2[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_DISABLE_PHYA2f_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 2) & 0x7)
#define BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x7 << 2)) | ((((uint32_t)f) & 0x7) << 2))
#define BCM84834_SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_GET(r) ((((r).shdw_sparecontrol2[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SPARECONTROL2r_TESTONBYTE7_0f_GET(r) (((r).shdw_sparecontrol2[0]) & 0x1)
#define BCM84834_SHDW_SPARECONTROL2r_TESTONBYTE7_0f_SET(r,f) (r).shdw_sparecontrol2[0]=(((r).shdw_sparecontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SPARECONTROL2.
 *
 */
#define BCM84834_READ_SHDW_SPARECONTROL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SPARECONTROL2r,(_r._shdw_sparecontrol2))
#define BCM84834_WRITE_SHDW_SPARECONTROL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SPARECONTROL2r,(_r._shdw_sparecontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SPARECONTROL2r BCM84834_SHDW_SPARECONTROL2r
#define SHDW_SPARECONTROL2r_SIZE BCM84834_SHDW_SPARECONTROL2r_SIZE
typedef BCM84834_SHDW_SPARECONTROL2r_t SHDW_SPARECONTROL2r_t;
#define SHDW_SPARECONTROL2r_CLR BCM84834_SHDW_SPARECONTROL2r_CLR
#define SHDW_SPARECONTROL2r_SET BCM84834_SHDW_SPARECONTROL2r_SET
#define SHDW_SPARECONTROL2r_GET BCM84834_SHDW_SPARECONTROL2r_GET
#define SHDW_SPARECONTROL2r_WRITE_ENABLEf_GET BCM84834_SHDW_SPARECONTROL2r_WRITE_ENABLEf_GET
#define SHDW_SPARECONTROL2r_WRITE_ENABLEf_SET BCM84834_SHDW_SPARECONTROL2r_WRITE_ENABLEf_SET
#define SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SPARECONTROL2r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SPARECONTROL2r_SPAREf_GET BCM84834_SHDW_SPARECONTROL2r_SPAREf_GET
#define SHDW_SPARECONTROL2r_SPAREf_SET BCM84834_SHDW_SPARECONTROL2r_SPAREf_SET
#define SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_GET BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_GET
#define SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_SET BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_DISABLEf_SET
#define SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_GET BCM84834_SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_GET
#define SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_SET BCM84834_SHDW_SPARECONTROL2r_SELECT_TPOUT_RXDf_SET
#define SHDW_SPARECONTROL2r_DISABLE_PHYA2f_GET BCM84834_SHDW_SPARECONTROL2r_DISABLE_PHYA2f_GET
#define SHDW_SPARECONTROL2r_DISABLE_PHYA2f_SET BCM84834_SHDW_SPARECONTROL2r_DISABLE_PHYA2f_SET
#define SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_GET BCM84834_SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_GET
#define SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_SET BCM84834_SHDW_SPARECONTROL2r_ENABLE_RBC0_1_TXC_RXC_TRISTATEf_SET
#define SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_GET BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_GET
#define SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_SET BCM84834_SHDW_SPARECONTROL2r_WIRESPEED_RETRY_LIMITf_SET
#define SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_GET BCM84834_SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_GET
#define SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_SET BCM84834_SHDW_SPARECONTROL2r_ENERGY_DETECT_ON_INTRf_SET
#define SHDW_SPARECONTROL2r_TESTONBYTE7_0f_GET BCM84834_SHDW_SPARECONTROL2r_TESTONBYTE7_0f_GET
#define SHDW_SPARECONTROL2r_TESTONBYTE7_0f_SET BCM84834_SHDW_SPARECONTROL2r_TESTONBYTE7_0f_SET
#define READ_SHDW_SPARECONTROL2r BCM84834_READ_SHDW_SPARECONTROL2r
#define WRITE_SHDW_SPARECONTROL2r BCM84834_WRITE_SHDW_SPARECONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SPARECONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SPARECONTROL3
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Spare Control 3 Register (Shadow Register Selector ="05h")
 * SIZE:     32
 * FIELDS:
 *     CLK125_OUTPUT_ENABLE 
 *     AUTO_PWDN_DLL_OFF_DIS 
 *     SIGDET_DEASSERT_TIMER 
 *     DIS_LOW_PWR_10BT_LINK 
 *     LOW_PWR_ENC_DISABLE 
 *     SD_ENERGY_DETECT_CHANGE_SEL 
 *     TXC_OFF_ENABLE   
 *     X10BT_CARR_REJECT_FILT 
 *     TXC_RXC_DIS_DUR_AUTO_PD 
 *     DLL_LOCK_ENABLE_DUR_AUTO_PD 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SPARECONTROL3r (0x0000051c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SPARECONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SPARECONTROL3.
 *
 */
typedef union BCM84834_SHDW_SPARECONTROL3r_s {
	uint32_t v[1];
	uint32_t shdw_sparecontrol3[1];
	uint32_t _shdw_sparecontrol3;
} BCM84834_SHDW_SPARECONTROL3r_t;

#define BCM84834_SHDW_SPARECONTROL3r_CLR(r) (r).shdw_sparecontrol3[0] = 0
#define BCM84834_SHDW_SPARECONTROL3r_SET(r,d) (r).shdw_sparecontrol3[0] = d
#define BCM84834_SHDW_SPARECONTROL3r_GET(r) (r).shdw_sparecontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SPARECONTROL3r_WRITE_ENABLEf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_WRITE_ENABLEf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 9) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 8) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 7) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 4) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 3) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_GET(r) ((((r).shdw_sparecontrol3[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_GET(r) (((r).shdw_sparecontrol3[0]) & 0x1)
#define BCM84834_SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_SET(r,f) (r).shdw_sparecontrol3[0]=(((r).shdw_sparecontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SPARECONTROL3.
 *
 */
#define BCM84834_READ_SHDW_SPARECONTROL3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SPARECONTROL3r,(_r._shdw_sparecontrol3))
#define BCM84834_WRITE_SHDW_SPARECONTROL3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SPARECONTROL3r,(_r._shdw_sparecontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SPARECONTROL3r BCM84834_SHDW_SPARECONTROL3r
#define SHDW_SPARECONTROL3r_SIZE BCM84834_SHDW_SPARECONTROL3r_SIZE
typedef BCM84834_SHDW_SPARECONTROL3r_t SHDW_SPARECONTROL3r_t;
#define SHDW_SPARECONTROL3r_CLR BCM84834_SHDW_SPARECONTROL3r_CLR
#define SHDW_SPARECONTROL3r_SET BCM84834_SHDW_SPARECONTROL3r_SET
#define SHDW_SPARECONTROL3r_GET BCM84834_SHDW_SPARECONTROL3r_GET
#define SHDW_SPARECONTROL3r_WRITE_ENABLEf_GET BCM84834_SHDW_SPARECONTROL3r_WRITE_ENABLEf_GET
#define SHDW_SPARECONTROL3r_WRITE_ENABLEf_SET BCM84834_SHDW_SPARECONTROL3r_WRITE_ENABLEf_SET
#define SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SPARECONTROL3r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_GET BCM84834_SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_GET
#define SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_SET BCM84834_SHDW_SPARECONTROL3r_DLL_LOCK_ENABLE_DUR_AUTO_PDf_SET
#define SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_GET BCM84834_SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_GET
#define SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_SET BCM84834_SHDW_SPARECONTROL3r_TXC_RXC_DIS_DUR_AUTO_PDf_SET
#define SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_GET BCM84834_SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_GET
#define SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_SET BCM84834_SHDW_SPARECONTROL3r_X10BT_CARR_REJECT_FILTf_SET
#define SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_GET BCM84834_SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_GET
#define SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_SET BCM84834_SHDW_SPARECONTROL3r_TXC_OFF_ENABLEf_SET
#define SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_GET BCM84834_SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_GET
#define SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_SET BCM84834_SHDW_SPARECONTROL3r_SD_ENERGY_DETECT_CHANGE_SELf_SET
#define SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_GET BCM84834_SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_GET
#define SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_SET BCM84834_SHDW_SPARECONTROL3r_LOW_PWR_ENC_DISABLEf_SET
#define SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_GET BCM84834_SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_GET
#define SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_SET BCM84834_SHDW_SPARECONTROL3r_DIS_LOW_PWR_10BT_LINKf_SET
#define SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_GET BCM84834_SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_GET
#define SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_SET BCM84834_SHDW_SPARECONTROL3r_SIGDET_DEASSERT_TIMERf_SET
#define SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_GET BCM84834_SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_GET
#define SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_SET BCM84834_SHDW_SPARECONTROL3r_AUTO_PWDN_DLL_OFF_DISf_SET
#define SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_GET BCM84834_SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_GET
#define SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_SET BCM84834_SHDW_SPARECONTROL3r_CLK125_OUTPUT_ENABLEf_SET
#define READ_SHDW_SPARECONTROL3r BCM84834_READ_SHDW_SPARECONTROL3r
#define WRITE_SHDW_SPARECONTROL3r BCM84834_WRITE_SHDW_SPARECONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SPARECONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_TDRCONTROL1
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Tdr Control 1 Register (Shadow Register Selector = "06h")
 * SIZE:     32
 * FIELDS:
 *     TDR_START_DONE   
 *     RX_CHANNEL_SEL   
 *     TX_CHANNEL_SEL   
 *     TEST_PULSE_SIZE  
 *     TDR_LINK_TIME_OUT 
 *     SPARE            
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_TDRCONTROL1r (0x0000061c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_TDRCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_TDRCONTROL1.
 *
 */
typedef union BCM84834_SHDW_TDRCONTROL1r_s {
	uint32_t v[1];
	uint32_t shdw_tdrcontrol1[1];
	uint32_t _shdw_tdrcontrol1;
} BCM84834_SHDW_TDRCONTROL1r_t;

#define BCM84834_SHDW_TDRCONTROL1r_CLR(r) (r).shdw_tdrcontrol1[0] = 0
#define BCM84834_SHDW_TDRCONTROL1r_SET(r,d) (r).shdw_tdrcontrol1[0] = d
#define BCM84834_SHDW_TDRCONTROL1r_GET(r) (r).shdw_tdrcontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_TDRCONTROL1r_WRITE_ENABLEf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 15) & 0x1)
#define BCM84834_SHDW_TDRCONTROL1r_WRITE_ENABLEf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_TDRCONTROL1r_SPAREf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 9) & 0x1)
#define BCM84834_SHDW_TDRCONTROL1r_SPAREf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 8) & 0x1)
#define BCM84834_SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 5) & 0x7)
#define BCM84834_SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCM84834_SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 3) & 0x3)
#define BCM84834_SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCM84834_SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_GET(r) ((((r).shdw_tdrcontrol1[0]) >> 1) & 0x3)
#define BCM84834_SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCM84834_SHDW_TDRCONTROL1r_TDR_START_DONEf_GET(r) (((r).shdw_tdrcontrol1[0]) & 0x1)
#define BCM84834_SHDW_TDRCONTROL1r_TDR_START_DONEf_SET(r,f) (r).shdw_tdrcontrol1[0]=(((r).shdw_tdrcontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_TDRCONTROL1.
 *
 */
#define BCM84834_READ_SHDW_TDRCONTROL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_TDRCONTROL1r,(_r._shdw_tdrcontrol1))
#define BCM84834_WRITE_SHDW_TDRCONTROL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_TDRCONTROL1r,(_r._shdw_tdrcontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_TDRCONTROL1r BCM84834_SHDW_TDRCONTROL1r
#define SHDW_TDRCONTROL1r_SIZE BCM84834_SHDW_TDRCONTROL1r_SIZE
typedef BCM84834_SHDW_TDRCONTROL1r_t SHDW_TDRCONTROL1r_t;
#define SHDW_TDRCONTROL1r_CLR BCM84834_SHDW_TDRCONTROL1r_CLR
#define SHDW_TDRCONTROL1r_SET BCM84834_SHDW_TDRCONTROL1r_SET
#define SHDW_TDRCONTROL1r_GET BCM84834_SHDW_TDRCONTROL1r_GET
#define SHDW_TDRCONTROL1r_WRITE_ENABLEf_GET BCM84834_SHDW_TDRCONTROL1r_WRITE_ENABLEf_GET
#define SHDW_TDRCONTROL1r_WRITE_ENABLEf_SET BCM84834_SHDW_TDRCONTROL1r_WRITE_ENABLEf_SET
#define SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_TDRCONTROL1r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_TDRCONTROL1r_SPAREf_GET BCM84834_SHDW_TDRCONTROL1r_SPAREf_GET
#define SHDW_TDRCONTROL1r_SPAREf_SET BCM84834_SHDW_TDRCONTROL1r_SPAREf_SET
#define SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_GET BCM84834_SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_GET
#define SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_SET BCM84834_SHDW_TDRCONTROL1r_TDR_LINK_TIME_OUTf_SET
#define SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_GET BCM84834_SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_GET
#define SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_SET BCM84834_SHDW_TDRCONTROL1r_TEST_PULSE_SIZEf_SET
#define SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_GET BCM84834_SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_GET
#define SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_SET BCM84834_SHDW_TDRCONTROL1r_TX_CHANNEL_SELf_SET
#define SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_GET BCM84834_SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_GET
#define SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_SET BCM84834_SHDW_TDRCONTROL1r_RX_CHANNEL_SELf_SET
#define SHDW_TDRCONTROL1r_TDR_START_DONEf_GET BCM84834_SHDW_TDRCONTROL1r_TDR_START_DONEf_GET
#define SHDW_TDRCONTROL1r_TDR_START_DONEf_SET BCM84834_SHDW_TDRCONTROL1r_TDR_START_DONEf_SET
#define READ_SHDW_TDRCONTROL1r BCM84834_READ_SHDW_TDRCONTROL1r
#define WRITE_SHDW_TDRCONTROL1r BCM84834_WRITE_SHDW_TDRCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_TDRCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_TDRCONTROL2
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Tdr Control 2 Register (Shadow Register Selector = "07h")
 * SIZE:     32
 * FIELDS:
 *     TDR_MODE_ENABLE  
 *     EXT_PHY          
 *     EXT_PHY_NO_AUTONEG 
 *     MASTER           
 *     FEXT             
 *     FAST_TIMERS      
 *     PHASE_STATUS_CLEAR 
 *     PHASE_STATUS     
 *     SPARE            
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_TDRCONTROL2r (0x0000071c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_TDRCONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_TDRCONTROL2.
 *
 */
typedef union BCM84834_SHDW_TDRCONTROL2r_s {
	uint32_t v[1];
	uint32_t shdw_tdrcontrol2[1];
	uint32_t _shdw_tdrcontrol2;
} BCM84834_SHDW_TDRCONTROL2r_t;

#define BCM84834_SHDW_TDRCONTROL2r_CLR(r) (r).shdw_tdrcontrol2[0] = 0
#define BCM84834_SHDW_TDRCONTROL2r_SET(r,d) (r).shdw_tdrcontrol2[0] = d
#define BCM84834_SHDW_TDRCONTROL2r_GET(r) (r).shdw_tdrcontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_TDRCONTROL2r_WRITE_ENABLEf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_WRITE_ENABLEf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_TDRCONTROL2r_SPAREf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 8) & 0x3)
#define BCM84834_SHDW_TDRCONTROL2r_SPAREf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUSf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 7) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUSf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 6) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_TDRCONTROL2r_FAST_TIMERSf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 5) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_FAST_TIMERSf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_TDRCONTROL2r_FEXTf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 4) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_FEXTf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_TDRCONTROL2r_MASTERf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 3) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_MASTERf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 2) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_TDRCONTROL2r_EXT_PHYf_GET(r) ((((r).shdw_tdrcontrol2[0]) >> 1) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_EXT_PHYf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_GET(r) (((r).shdw_tdrcontrol2[0]) & 0x1)
#define BCM84834_SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_SET(r,f) (r).shdw_tdrcontrol2[0]=(((r).shdw_tdrcontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_TDRCONTROL2.
 *
 */
#define BCM84834_READ_SHDW_TDRCONTROL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_TDRCONTROL2r,(_r._shdw_tdrcontrol2))
#define BCM84834_WRITE_SHDW_TDRCONTROL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_TDRCONTROL2r,(_r._shdw_tdrcontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_TDRCONTROL2r BCM84834_SHDW_TDRCONTROL2r
#define SHDW_TDRCONTROL2r_SIZE BCM84834_SHDW_TDRCONTROL2r_SIZE
typedef BCM84834_SHDW_TDRCONTROL2r_t SHDW_TDRCONTROL2r_t;
#define SHDW_TDRCONTROL2r_CLR BCM84834_SHDW_TDRCONTROL2r_CLR
#define SHDW_TDRCONTROL2r_SET BCM84834_SHDW_TDRCONTROL2r_SET
#define SHDW_TDRCONTROL2r_GET BCM84834_SHDW_TDRCONTROL2r_GET
#define SHDW_TDRCONTROL2r_WRITE_ENABLEf_GET BCM84834_SHDW_TDRCONTROL2r_WRITE_ENABLEf_GET
#define SHDW_TDRCONTROL2r_WRITE_ENABLEf_SET BCM84834_SHDW_TDRCONTROL2r_WRITE_ENABLEf_SET
#define SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_TDRCONTROL2r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_TDRCONTROL2r_SPAREf_GET BCM84834_SHDW_TDRCONTROL2r_SPAREf_GET
#define SHDW_TDRCONTROL2r_SPAREf_SET BCM84834_SHDW_TDRCONTROL2r_SPAREf_SET
#define SHDW_TDRCONTROL2r_PHASE_STATUSf_GET BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUSf_GET
#define SHDW_TDRCONTROL2r_PHASE_STATUSf_SET BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUSf_SET
#define SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_GET BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_GET
#define SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_SET BCM84834_SHDW_TDRCONTROL2r_PHASE_STATUS_CLEARf_SET
#define SHDW_TDRCONTROL2r_FAST_TIMERSf_GET BCM84834_SHDW_TDRCONTROL2r_FAST_TIMERSf_GET
#define SHDW_TDRCONTROL2r_FAST_TIMERSf_SET BCM84834_SHDW_TDRCONTROL2r_FAST_TIMERSf_SET
#define SHDW_TDRCONTROL2r_FEXTf_GET BCM84834_SHDW_TDRCONTROL2r_FEXTf_GET
#define SHDW_TDRCONTROL2r_FEXTf_SET BCM84834_SHDW_TDRCONTROL2r_FEXTf_SET
#define SHDW_TDRCONTROL2r_MASTERf_GET BCM84834_SHDW_TDRCONTROL2r_MASTERf_GET
#define SHDW_TDRCONTROL2r_MASTERf_SET BCM84834_SHDW_TDRCONTROL2r_MASTERf_SET
#define SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_GET BCM84834_SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_GET
#define SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_SET BCM84834_SHDW_TDRCONTROL2r_EXT_PHY_NO_AUTONEGf_SET
#define SHDW_TDRCONTROL2r_EXT_PHYf_GET BCM84834_SHDW_TDRCONTROL2r_EXT_PHYf_GET
#define SHDW_TDRCONTROL2r_EXT_PHYf_SET BCM84834_SHDW_TDRCONTROL2r_EXT_PHYf_SET
#define SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_GET BCM84834_SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_GET
#define SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_SET BCM84834_SHDW_TDRCONTROL2r_TDR_MODE_ENABLEf_SET
#define READ_SHDW_TDRCONTROL2r BCM84834_READ_SHDW_TDRCONTROL2r
#define WRITE_SHDW_TDRCONTROL2r BCM84834_WRITE_SHDW_TDRCONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_TDRCONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_LEDSTATUS
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     LED Status Register (Shadow Register Selector = "08h")
 * SIZE:     32
 * FIELDS:
 *     QUALITY_LED      
 *     RECEIVE_LED      
 *     TRANSMIT_LED     
 *     LINKSPD_N        
 *     SPARE            
 *     INTR_N           
 *     FDXLED_N         
 *     SLAVE_N          
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_LEDSTATUSr (0x0000081c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_LEDSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_LEDSTATUS.
 *
 */
typedef union BCM84834_SHDW_LEDSTATUSr_s {
	uint32_t v[1];
	uint32_t shdw_ledstatus[1];
	uint32_t _shdw_ledstatus;
} BCM84834_SHDW_LEDSTATUSr_t;

#define BCM84834_SHDW_LEDSTATUSr_CLR(r) (r).shdw_ledstatus[0] = 0
#define BCM84834_SHDW_LEDSTATUSr_SET(r,d) (r).shdw_ledstatus[0] = d
#define BCM84834_SHDW_LEDSTATUSr_GET(r) (r).shdw_ledstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_LEDSTATUSr_WRITE_ENABLEf_GET(r) ((((r).shdw_ledstatus[0]) >> 15) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_WRITE_ENABLEf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ledstatus[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_LEDSTATUSr_SLAVE_Nf_GET(r) ((((r).shdw_ledstatus[0]) >> 8) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_SLAVE_Nf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_LEDSTATUSr_FDXLED_Nf_GET(r) ((((r).shdw_ledstatus[0]) >> 7) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_FDXLED_Nf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_LEDSTATUSr_INTR_Nf_GET(r) ((((r).shdw_ledstatus[0]) >> 6) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_INTR_Nf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_LEDSTATUSr_SPAREf_GET(r) ((((r).shdw_ledstatus[0]) >> 5) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_SPAREf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_LEDSTATUSr_LINKSPD_Nf_GET(r) ((((r).shdw_ledstatus[0]) >> 3) & 0x3)
#define BCM84834_SHDW_LEDSTATUSr_LINKSPD_Nf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCM84834_SHDW_LEDSTATUSr_TRANSMIT_LEDf_GET(r) ((((r).shdw_ledstatus[0]) >> 2) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_TRANSMIT_LEDf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_LEDSTATUSr_RECEIVE_LEDf_GET(r) ((((r).shdw_ledstatus[0]) >> 1) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_RECEIVE_LEDf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_LEDSTATUSr_QUALITY_LEDf_GET(r) (((r).shdw_ledstatus[0]) & 0x1)
#define BCM84834_SHDW_LEDSTATUSr_QUALITY_LEDf_SET(r,f) (r).shdw_ledstatus[0]=(((r).shdw_ledstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_LEDSTATUS.
 *
 */
#define BCM84834_READ_SHDW_LEDSTATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_LEDSTATUSr,(_r._shdw_ledstatus))
#define BCM84834_WRITE_SHDW_LEDSTATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_LEDSTATUSr,(_r._shdw_ledstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_LEDSTATUSr BCM84834_SHDW_LEDSTATUSr
#define SHDW_LEDSTATUSr_SIZE BCM84834_SHDW_LEDSTATUSr_SIZE
typedef BCM84834_SHDW_LEDSTATUSr_t SHDW_LEDSTATUSr_t;
#define SHDW_LEDSTATUSr_CLR BCM84834_SHDW_LEDSTATUSr_CLR
#define SHDW_LEDSTATUSr_SET BCM84834_SHDW_LEDSTATUSr_SET
#define SHDW_LEDSTATUSr_GET BCM84834_SHDW_LEDSTATUSr_GET
#define SHDW_LEDSTATUSr_WRITE_ENABLEf_GET BCM84834_SHDW_LEDSTATUSr_WRITE_ENABLEf_GET
#define SHDW_LEDSTATUSr_WRITE_ENABLEf_SET BCM84834_SHDW_LEDSTATUSr_WRITE_ENABLEf_SET
#define SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_LEDSTATUSr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_LEDSTATUSr_SLAVE_Nf_GET BCM84834_SHDW_LEDSTATUSr_SLAVE_Nf_GET
#define SHDW_LEDSTATUSr_SLAVE_Nf_SET BCM84834_SHDW_LEDSTATUSr_SLAVE_Nf_SET
#define SHDW_LEDSTATUSr_FDXLED_Nf_GET BCM84834_SHDW_LEDSTATUSr_FDXLED_Nf_GET
#define SHDW_LEDSTATUSr_FDXLED_Nf_SET BCM84834_SHDW_LEDSTATUSr_FDXLED_Nf_SET
#define SHDW_LEDSTATUSr_INTR_Nf_GET BCM84834_SHDW_LEDSTATUSr_INTR_Nf_GET
#define SHDW_LEDSTATUSr_INTR_Nf_SET BCM84834_SHDW_LEDSTATUSr_INTR_Nf_SET
#define SHDW_LEDSTATUSr_SPAREf_GET BCM84834_SHDW_LEDSTATUSr_SPAREf_GET
#define SHDW_LEDSTATUSr_SPAREf_SET BCM84834_SHDW_LEDSTATUSr_SPAREf_SET
#define SHDW_LEDSTATUSr_LINKSPD_Nf_GET BCM84834_SHDW_LEDSTATUSr_LINKSPD_Nf_GET
#define SHDW_LEDSTATUSr_LINKSPD_Nf_SET BCM84834_SHDW_LEDSTATUSr_LINKSPD_Nf_SET
#define SHDW_LEDSTATUSr_TRANSMIT_LEDf_GET BCM84834_SHDW_LEDSTATUSr_TRANSMIT_LEDf_GET
#define SHDW_LEDSTATUSr_TRANSMIT_LEDf_SET BCM84834_SHDW_LEDSTATUSr_TRANSMIT_LEDf_SET
#define SHDW_LEDSTATUSr_RECEIVE_LEDf_GET BCM84834_SHDW_LEDSTATUSr_RECEIVE_LEDf_GET
#define SHDW_LEDSTATUSr_RECEIVE_LEDf_SET BCM84834_SHDW_LEDSTATUSr_RECEIVE_LEDf_SET
#define SHDW_LEDSTATUSr_QUALITY_LEDf_GET BCM84834_SHDW_LEDSTATUSr_QUALITY_LEDf_GET
#define SHDW_LEDSTATUSr_QUALITY_LEDf_SET BCM84834_SHDW_LEDSTATUSr_QUALITY_LEDf_SET
#define READ_SHDW_LEDSTATUSr BCM84834_READ_SHDW_LEDSTATUSr
#define WRITE_SHDW_LEDSTATUSr BCM84834_WRITE_SHDW_LEDSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_LEDSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_LEDCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     LED Control Register (Shadow Register Selector = "09h")
 * SIZE:     32
 * FIELDS:
 *     LINK_UTIL_LED_SEL 
 *     REMOTE_FAULT_LED_EN 
 *     ACTIVITY_LED_ENABLE 
 *     ACTIVITY_LINK_LED_LSB 
 *     OVERRIDE_GBIC_LED_MODE 
 *     EXT_SERDES_INUSE_LED_MODE 
 *     SPARE            
 *     ACTIVITY_LINK_LED_MSB 
 *     COLLISION_BLINK_LED_MODE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_LEDCONTROLr (0x0000091c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_LEDCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_LEDCONTROL.
 *
 */
typedef union BCM84834_SHDW_LEDCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_ledcontrol[1];
	uint32_t _shdw_ledcontrol;
} BCM84834_SHDW_LEDCONTROLr_t;

#define BCM84834_SHDW_LEDCONTROLr_CLR(r) (r).shdw_ledcontrol[0] = 0
#define BCM84834_SHDW_LEDCONTROLr_SET(r,d) (r).shdw_ledcontrol[0] = d
#define BCM84834_SHDW_LEDCONTROLr_GET(r) (r).shdw_ledcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_LEDCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_ledcontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ledcontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_GET(r) ((((r).shdw_ledcontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_GET(r) ((((r).shdw_ledcontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_LEDCONTROLr_SPAREf_GET(r) ((((r).shdw_ledcontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_SPAREf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_GET(r) ((((r).shdw_ledcontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_GET(r) ((((r).shdw_ledcontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_GET(r) ((((r).shdw_ledcontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_GET(r) ((((r).shdw_ledcontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_GET(r) ((((r).shdw_ledcontrol[0]) >> 2) & 0x1)
#define BCM84834_SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_GET(r) (((r).shdw_ledcontrol[0]) & 0x3)
#define BCM84834_SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_SET(r,f) (r).shdw_ledcontrol[0]=(((r).shdw_ledcontrol[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access SHDW_LEDCONTROL.
 *
 */
#define BCM84834_READ_SHDW_LEDCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_LEDCONTROLr,(_r._shdw_ledcontrol))
#define BCM84834_WRITE_SHDW_LEDCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_LEDCONTROLr,(_r._shdw_ledcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_LEDCONTROLr BCM84834_SHDW_LEDCONTROLr
#define SHDW_LEDCONTROLr_SIZE BCM84834_SHDW_LEDCONTROLr_SIZE
typedef BCM84834_SHDW_LEDCONTROLr_t SHDW_LEDCONTROLr_t;
#define SHDW_LEDCONTROLr_CLR BCM84834_SHDW_LEDCONTROLr_CLR
#define SHDW_LEDCONTROLr_SET BCM84834_SHDW_LEDCONTROLr_SET
#define SHDW_LEDCONTROLr_GET BCM84834_SHDW_LEDCONTROLr_GET
#define SHDW_LEDCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_LEDCONTROLr_WRITE_ENABLEf_GET
#define SHDW_LEDCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_LEDCONTROLr_WRITE_ENABLEf_SET
#define SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_LEDCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_GET BCM84834_SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_GET
#define SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_SET BCM84834_SHDW_LEDCONTROLr_COLLISION_BLINK_LED_MODEf_SET
#define SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_GET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_GET
#define SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_SET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_MSBf_SET
#define SHDW_LEDCONTROLr_SPAREf_GET BCM84834_SHDW_LEDCONTROLr_SPAREf_GET
#define SHDW_LEDCONTROLr_SPAREf_SET BCM84834_SHDW_LEDCONTROLr_SPAREf_SET
#define SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_GET BCM84834_SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_GET
#define SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_SET BCM84834_SHDW_LEDCONTROLr_EXT_SERDES_INUSE_LED_MODEf_SET
#define SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_GET BCM84834_SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_GET
#define SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_SET BCM84834_SHDW_LEDCONTROLr_OVERRIDE_GBIC_LED_MODEf_SET
#define SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_GET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_GET
#define SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_SET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LINK_LED_LSBf_SET
#define SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_GET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_GET
#define SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_SET BCM84834_SHDW_LEDCONTROLr_ACTIVITY_LED_ENABLEf_SET
#define SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_GET BCM84834_SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_GET
#define SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_SET BCM84834_SHDW_LEDCONTROLr_REMOTE_FAULT_LED_ENf_SET
#define SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_GET BCM84834_SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_GET
#define SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_SET BCM84834_SHDW_LEDCONTROLr_LINK_UTIL_LED_SELf_SET
#define READ_SHDW_LEDCONTROLr BCM84834_READ_SHDW_LEDCONTROLr
#define WRITE_SHDW_LEDCONTROLr BCM84834_WRITE_SHDW_LEDCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_LEDCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUTOPOWERDOWN
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Auto-Power Down Register (Shadow Register Selector= "0Ah")
 * SIZE:     32
 * FIELDS:
 *     WAKE_UP_TIMER_SEL 
 *     SLEEP_TIMER_SEL  
 *     AUTO_PWRDN_MODE_EN 
 *     AUTO_PWRDN_IGNORE_AN 
 *     LOWPWR136_ENC_EN 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUTOPOWERDOWNr (0x00000a1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUTOPOWERDOWNr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUTOPOWERDOWN.
 *
 */
typedef union BCM84834_SHDW_AUTOPOWERDOWNr_s {
	uint32_t v[1];
	uint32_t shdw_autopowerdown[1];
	uint32_t _shdw_autopowerdown;
} BCM84834_SHDW_AUTOPOWERDOWNr_t;

#define BCM84834_SHDW_AUTOPOWERDOWNr_CLR(r) (r).shdw_autopowerdown[0] = 0
#define BCM84834_SHDW_AUTOPOWERDOWNr_SET(r,d) (r).shdw_autopowerdown[0] = d
#define BCM84834_SHDW_AUTOPOWERDOWNr_GET(r) (r).shdw_autopowerdown[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_GET(r) ((((r).shdw_autopowerdown[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_autopowerdown[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_GET(r) ((((r).shdw_autopowerdown[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_GET(r) ((((r).shdw_autopowerdown[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_GET(r) ((((r).shdw_autopowerdown[0]) >> 5) & 0x1)
#define BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_GET(r) ((((r).shdw_autopowerdown[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_GET(r) (((r).shdw_autopowerdown[0]) & 0xf)
#define BCM84834_SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_SET(r,f) (r).shdw_autopowerdown[0]=(((r).shdw_autopowerdown[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_AUTOPOWERDOWN.
 *
 */
#define BCM84834_READ_SHDW_AUTOPOWERDOWNr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUTOPOWERDOWNr,(_r._shdw_autopowerdown))
#define BCM84834_WRITE_SHDW_AUTOPOWERDOWNr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUTOPOWERDOWNr,(_r._shdw_autopowerdown))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUTOPOWERDOWNr BCM84834_SHDW_AUTOPOWERDOWNr
#define SHDW_AUTOPOWERDOWNr_SIZE BCM84834_SHDW_AUTOPOWERDOWNr_SIZE
typedef BCM84834_SHDW_AUTOPOWERDOWNr_t SHDW_AUTOPOWERDOWNr_t;
#define SHDW_AUTOPOWERDOWNr_CLR BCM84834_SHDW_AUTOPOWERDOWNr_CLR
#define SHDW_AUTOPOWERDOWNr_SET BCM84834_SHDW_AUTOPOWERDOWNr_SET
#define SHDW_AUTOPOWERDOWNr_GET BCM84834_SHDW_AUTOPOWERDOWNr_GET
#define SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_GET BCM84834_SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_GET
#define SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_SET BCM84834_SHDW_AUTOPOWERDOWNr_WRITE_ENABLEf_SET
#define SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUTOPOWERDOWNr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_GET BCM84834_SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_GET
#define SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_SET BCM84834_SHDW_AUTOPOWERDOWNr_LOWPWR136_ENC_ENf_SET
#define SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_GET BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_GET
#define SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_SET BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_IGNORE_ANf_SET
#define SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_GET BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_GET
#define SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_SET BCM84834_SHDW_AUTOPOWERDOWNr_AUTO_PWRDN_MODE_ENf_SET
#define SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_GET BCM84834_SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_GET
#define SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_SET BCM84834_SHDW_AUTOPOWERDOWNr_SLEEP_TIMER_SELf_SET
#define SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_GET BCM84834_SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_GET
#define SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_SET BCM84834_SHDW_AUTOPOWERDOWNr_WAKE_UP_TIMER_SELf_SET
#define READ_SHDW_AUTOPOWERDOWNr BCM84834_READ_SHDW_AUTOPOWERDOWNr
#define WRITE_SHDW_AUTOPOWERDOWNr BCM84834_WRITE_SHDW_AUTOPOWERDOWNr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUTOPOWERDOWNr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_EXTERNALCONTROL1
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     External Control 1 Register (Shadow Register Selector= "0Bh")
 * SIZE:     32
 * FIELDS:
 *     EXTERNAL_CONTROL_1 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_EXTERNALCONTROL1r (0x00000b1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_EXTERNALCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_EXTERNALCONTROL1.
 *
 */
typedef union BCM84834_SHDW_EXTERNALCONTROL1r_s {
	uint32_t v[1];
	uint32_t shdw_externalcontrol1[1];
	uint32_t _shdw_externalcontrol1;
} BCM84834_SHDW_EXTERNALCONTROL1r_t;

#define BCM84834_SHDW_EXTERNALCONTROL1r_CLR(r) (r).shdw_externalcontrol1[0] = 0
#define BCM84834_SHDW_EXTERNALCONTROL1r_SET(r,d) (r).shdw_externalcontrol1[0] = d
#define BCM84834_SHDW_EXTERNALCONTROL1r_GET(r) (r).shdw_externalcontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_GET(r) ((((r).shdw_externalcontrol1[0]) >> 15) & 0x1)
#define BCM84834_SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_SET(r,f) (r).shdw_externalcontrol1[0]=(((r).shdw_externalcontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_externalcontrol1[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_externalcontrol1[0]=(((r).shdw_externalcontrol1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_GET(r) (((r).shdw_externalcontrol1[0]) & 0xff)
#define BCM84834_SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_SET(r,f) (r).shdw_externalcontrol1[0]=(((r).shdw_externalcontrol1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access SHDW_EXTERNALCONTROL1.
 *
 */
#define BCM84834_READ_SHDW_EXTERNALCONTROL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_EXTERNALCONTROL1r,(_r._shdw_externalcontrol1))
#define BCM84834_WRITE_SHDW_EXTERNALCONTROL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_EXTERNALCONTROL1r,(_r._shdw_externalcontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_EXTERNALCONTROL1r BCM84834_SHDW_EXTERNALCONTROL1r
#define SHDW_EXTERNALCONTROL1r_SIZE BCM84834_SHDW_EXTERNALCONTROL1r_SIZE
typedef BCM84834_SHDW_EXTERNALCONTROL1r_t SHDW_EXTERNALCONTROL1r_t;
#define SHDW_EXTERNALCONTROL1r_CLR BCM84834_SHDW_EXTERNALCONTROL1r_CLR
#define SHDW_EXTERNALCONTROL1r_SET BCM84834_SHDW_EXTERNALCONTROL1r_SET
#define SHDW_EXTERNALCONTROL1r_GET BCM84834_SHDW_EXTERNALCONTROL1r_GET
#define SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_GET BCM84834_SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_GET
#define SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_SET BCM84834_SHDW_EXTERNALCONTROL1r_WRITE_ENABLEf_SET
#define SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_EXTERNALCONTROL1r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_GET BCM84834_SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_GET
#define SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_SET BCM84834_SHDW_EXTERNALCONTROL1r_EXTERNAL_CONTROL_1f_SET
#define READ_SHDW_EXTERNALCONTROL1r BCM84834_READ_SHDW_EXTERNALCONTROL1r
#define WRITE_SHDW_EXTERNALCONTROL1r BCM84834_WRITE_SHDW_EXTERNALCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_EXTERNALCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_EXTERNALCONTROL2
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     External Control 2 Register (Shadow Register Selector= "0Ch")
 * SIZE:     32
 * FIELDS:
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_EXTERNALCONTROL2r (0x00000c1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_EXTERNALCONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_EXTERNALCONTROL2.
 *
 */
typedef union BCM84834_SHDW_EXTERNALCONTROL2r_s {
	uint32_t v[1];
	uint32_t shdw_externalcontrol2[1];
	uint32_t _shdw_externalcontrol2;
} BCM84834_SHDW_EXTERNALCONTROL2r_t;

#define BCM84834_SHDW_EXTERNALCONTROL2r_CLR(r) (r).shdw_externalcontrol2[0] = 0
#define BCM84834_SHDW_EXTERNALCONTROL2r_SET(r,d) (r).shdw_externalcontrol2[0] = d
#define BCM84834_SHDW_EXTERNALCONTROL2r_GET(r) (r).shdw_externalcontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_GET(r) ((((r).shdw_externalcontrol2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_SET(r,f) (r).shdw_externalcontrol2[0]=(((r).shdw_externalcontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_externalcontrol2[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_externalcontrol2[0]=(((r).shdw_externalcontrol2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))

/*
 * These macros can be used to access SHDW_EXTERNALCONTROL2.
 *
 */
#define BCM84834_READ_SHDW_EXTERNALCONTROL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_EXTERNALCONTROL2r,(_r._shdw_externalcontrol2))
#define BCM84834_WRITE_SHDW_EXTERNALCONTROL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_EXTERNALCONTROL2r,(_r._shdw_externalcontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_EXTERNALCONTROL2r BCM84834_SHDW_EXTERNALCONTROL2r
#define SHDW_EXTERNALCONTROL2r_SIZE BCM84834_SHDW_EXTERNALCONTROL2r_SIZE
typedef BCM84834_SHDW_EXTERNALCONTROL2r_t SHDW_EXTERNALCONTROL2r_t;
#define SHDW_EXTERNALCONTROL2r_CLR BCM84834_SHDW_EXTERNALCONTROL2r_CLR
#define SHDW_EXTERNALCONTROL2r_SET BCM84834_SHDW_EXTERNALCONTROL2r_SET
#define SHDW_EXTERNALCONTROL2r_GET BCM84834_SHDW_EXTERNALCONTROL2r_GET
#define SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_GET BCM84834_SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_GET
#define SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_SET BCM84834_SHDW_EXTERNALCONTROL2r_WRITE_ENABLEf_SET
#define SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_EXTERNALCONTROL2r_SHADOW_REGISTER_SELECTf_SET
#define READ_SHDW_EXTERNALCONTROL2r BCM84834_READ_SHDW_EXTERNALCONTROL2r
#define WRITE_SHDW_EXTERNALCONTROL2r BCM84834_WRITE_SHDW_EXTERNALCONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_EXTERNALCONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_LEDSELECTOR1
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     LED Selector 1 Register (Shadow Register Selector ="0Dh")
 * SIZE:     32
 * FIELDS:
 *     LED1_SELECT      
 *     LED2_SELECT      
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_LEDSELECTOR1r (0x00000d1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_LEDSELECTOR1r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_LEDSELECTOR1.
 *
 */
typedef union BCM84834_SHDW_LEDSELECTOR1r_s {
	uint32_t v[1];
	uint32_t shdw_ledselector1[1];
	uint32_t _shdw_ledselector1;
} BCM84834_SHDW_LEDSELECTOR1r_t;

#define BCM84834_SHDW_LEDSELECTOR1r_CLR(r) (r).shdw_ledselector1[0] = 0
#define BCM84834_SHDW_LEDSELECTOR1r_SET(r,d) (r).shdw_ledselector1[0] = d
#define BCM84834_SHDW_LEDSELECTOR1r_GET(r) (r).shdw_ledselector1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_LEDSELECTOR1r_WRITE_ENABLEf_GET(r) ((((r).shdw_ledselector1[0]) >> 15) & 0x1)
#define BCM84834_SHDW_LEDSELECTOR1r_WRITE_ENABLEf_SET(r,f) (r).shdw_ledselector1[0]=(((r).shdw_ledselector1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ledselector1[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ledselector1[0]=(((r).shdw_ledselector1[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_LEDSELECTOR1r_LED2_SELECTf_GET(r) ((((r).shdw_ledselector1[0]) >> 4) & 0xf)
#define BCM84834_SHDW_LEDSELECTOR1r_LED2_SELECTf_SET(r,f) (r).shdw_ledselector1[0]=(((r).shdw_ledselector1[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_SHDW_LEDSELECTOR1r_LED1_SELECTf_GET(r) (((r).shdw_ledselector1[0]) & 0xf)
#define BCM84834_SHDW_LEDSELECTOR1r_LED1_SELECTf_SET(r,f) (r).shdw_ledselector1[0]=(((r).shdw_ledselector1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_LEDSELECTOR1.
 *
 */
#define BCM84834_READ_SHDW_LEDSELECTOR1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_LEDSELECTOR1r,(_r._shdw_ledselector1))
#define BCM84834_WRITE_SHDW_LEDSELECTOR1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_LEDSELECTOR1r,(_r._shdw_ledselector1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_LEDSELECTOR1r BCM84834_SHDW_LEDSELECTOR1r
#define SHDW_LEDSELECTOR1r_SIZE BCM84834_SHDW_LEDSELECTOR1r_SIZE
typedef BCM84834_SHDW_LEDSELECTOR1r_t SHDW_LEDSELECTOR1r_t;
#define SHDW_LEDSELECTOR1r_CLR BCM84834_SHDW_LEDSELECTOR1r_CLR
#define SHDW_LEDSELECTOR1r_SET BCM84834_SHDW_LEDSELECTOR1r_SET
#define SHDW_LEDSELECTOR1r_GET BCM84834_SHDW_LEDSELECTOR1r_GET
#define SHDW_LEDSELECTOR1r_WRITE_ENABLEf_GET BCM84834_SHDW_LEDSELECTOR1r_WRITE_ENABLEf_GET
#define SHDW_LEDSELECTOR1r_WRITE_ENABLEf_SET BCM84834_SHDW_LEDSELECTOR1r_WRITE_ENABLEf_SET
#define SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_LEDSELECTOR1r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_LEDSELECTOR1r_LED2_SELECTf_GET BCM84834_SHDW_LEDSELECTOR1r_LED2_SELECTf_GET
#define SHDW_LEDSELECTOR1r_LED2_SELECTf_SET BCM84834_SHDW_LEDSELECTOR1r_LED2_SELECTf_SET
#define SHDW_LEDSELECTOR1r_LED1_SELECTf_GET BCM84834_SHDW_LEDSELECTOR1r_LED1_SELECTf_GET
#define SHDW_LEDSELECTOR1r_LED1_SELECTf_SET BCM84834_SHDW_LEDSELECTOR1r_LED1_SELECTf_SET
#define READ_SHDW_LEDSELECTOR1r BCM84834_READ_SHDW_LEDSELECTOR1r
#define WRITE_SHDW_LEDSELECTOR1r BCM84834_WRITE_SHDW_LEDSELECTOR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_LEDSELECTOR1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_LEDSELECTOR2
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     LED Selector 2 Register (Shadow Register Selector ="0Eh")
 * SIZE:     32
 * FIELDS:
 *     LED3_SELECT      
 *     LED4_SELECT      
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_LEDSELECTOR2r (0x00000e1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_LEDSELECTOR2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_LEDSELECTOR2.
 *
 */
typedef union BCM84834_SHDW_LEDSELECTOR2r_s {
	uint32_t v[1];
	uint32_t shdw_ledselector2[1];
	uint32_t _shdw_ledselector2;
} BCM84834_SHDW_LEDSELECTOR2r_t;

#define BCM84834_SHDW_LEDSELECTOR2r_CLR(r) (r).shdw_ledselector2[0] = 0
#define BCM84834_SHDW_LEDSELECTOR2r_SET(r,d) (r).shdw_ledselector2[0] = d
#define BCM84834_SHDW_LEDSELECTOR2r_GET(r) (r).shdw_ledselector2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_LEDSELECTOR2r_WRITE_ENABLEf_GET(r) ((((r).shdw_ledselector2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_LEDSELECTOR2r_WRITE_ENABLEf_SET(r,f) (r).shdw_ledselector2[0]=(((r).shdw_ledselector2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ledselector2[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ledselector2[0]=(((r).shdw_ledselector2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_LEDSELECTOR2r_LED4_SELECTf_GET(r) ((((r).shdw_ledselector2[0]) >> 4) & 0xf)
#define BCM84834_SHDW_LEDSELECTOR2r_LED4_SELECTf_SET(r,f) (r).shdw_ledselector2[0]=(((r).shdw_ledselector2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_SHDW_LEDSELECTOR2r_LED3_SELECTf_GET(r) (((r).shdw_ledselector2[0]) & 0xf)
#define BCM84834_SHDW_LEDSELECTOR2r_LED3_SELECTf_SET(r,f) (r).shdw_ledselector2[0]=(((r).shdw_ledselector2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_LEDSELECTOR2.
 *
 */
#define BCM84834_READ_SHDW_LEDSELECTOR2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_LEDSELECTOR2r,(_r._shdw_ledselector2))
#define BCM84834_WRITE_SHDW_LEDSELECTOR2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_LEDSELECTOR2r,(_r._shdw_ledselector2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_LEDSELECTOR2r BCM84834_SHDW_LEDSELECTOR2r
#define SHDW_LEDSELECTOR2r_SIZE BCM84834_SHDW_LEDSELECTOR2r_SIZE
typedef BCM84834_SHDW_LEDSELECTOR2r_t SHDW_LEDSELECTOR2r_t;
#define SHDW_LEDSELECTOR2r_CLR BCM84834_SHDW_LEDSELECTOR2r_CLR
#define SHDW_LEDSELECTOR2r_SET BCM84834_SHDW_LEDSELECTOR2r_SET
#define SHDW_LEDSELECTOR2r_GET BCM84834_SHDW_LEDSELECTOR2r_GET
#define SHDW_LEDSELECTOR2r_WRITE_ENABLEf_GET BCM84834_SHDW_LEDSELECTOR2r_WRITE_ENABLEf_GET
#define SHDW_LEDSELECTOR2r_WRITE_ENABLEf_SET BCM84834_SHDW_LEDSELECTOR2r_WRITE_ENABLEf_SET
#define SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_LEDSELECTOR2r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_LEDSELECTOR2r_LED4_SELECTf_GET BCM84834_SHDW_LEDSELECTOR2r_LED4_SELECTf_GET
#define SHDW_LEDSELECTOR2r_LED4_SELECTf_SET BCM84834_SHDW_LEDSELECTOR2r_LED4_SELECTf_SET
#define SHDW_LEDSELECTOR2r_LED3_SELECTf_GET BCM84834_SHDW_LEDSELECTOR2r_LED3_SELECTf_GET
#define SHDW_LEDSELECTOR2r_LED3_SELECTf_SET BCM84834_SHDW_LEDSELECTOR2r_LED3_SELECTf_SET
#define READ_SHDW_LEDSELECTOR2r BCM84834_READ_SHDW_LEDSELECTOR2r
#define WRITE_SHDW_LEDSELECTOR2r BCM84834_WRITE_SHDW_LEDSELECTOR2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_LEDSELECTOR2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_LEDGPIOCONTROLSTAT
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     LED GPIO Control/Status Register (ShadowRegister Selector = "0Fh")
 * SIZE:     32
 * FIELDS:
 *     PROG_LED_OUTPUT_DIS 
 *     LED_DATA_IN      
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr (0x00000f1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_LEDGPIOCONTROLSTAT.
 *
 */
typedef union BCM84834_SHDW_LEDGPIOCONTROLSTATr_s {
	uint32_t v[1];
	uint32_t shdw_ledgpiocontrolstat[1];
	uint32_t _shdw_ledgpiocontrolstat;
} BCM84834_SHDW_LEDGPIOCONTROLSTATr_t;

#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_CLR(r) (r).shdw_ledgpiocontrolstat[0] = 0
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_SET(r,d) (r).shdw_ledgpiocontrolstat[0] = d
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_GET(r) (r).shdw_ledgpiocontrolstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_GET(r) ((((r).shdw_ledgpiocontrolstat[0]) >> 15) & 0x1)
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_SET(r,f) (r).shdw_ledgpiocontrolstat[0]=(((r).shdw_ledgpiocontrolstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ledgpiocontrolstat[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ledgpiocontrolstat[0]=(((r).shdw_ledgpiocontrolstat[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_GET(r) ((((r).shdw_ledgpiocontrolstat[0]) >> 4) & 0xf)
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_SET(r,f) (r).shdw_ledgpiocontrolstat[0]=(((r).shdw_ledgpiocontrolstat[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_GET(r) (((r).shdw_ledgpiocontrolstat[0]) & 0xf)
#define BCM84834_SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_SET(r,f) (r).shdw_ledgpiocontrolstat[0]=(((r).shdw_ledgpiocontrolstat[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_LEDGPIOCONTROLSTAT.
 *
 */
#define BCM84834_READ_SHDW_LEDGPIOCONTROLSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_LEDGPIOCONTROLSTATr,(_r._shdw_ledgpiocontrolstat))
#define BCM84834_WRITE_SHDW_LEDGPIOCONTROLSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_LEDGPIOCONTROLSTATr,(_r._shdw_ledgpiocontrolstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_LEDGPIOCONTROLSTATr BCM84834_SHDW_LEDGPIOCONTROLSTATr
#define SHDW_LEDGPIOCONTROLSTATr_SIZE BCM84834_SHDW_LEDGPIOCONTROLSTATr_SIZE
typedef BCM84834_SHDW_LEDGPIOCONTROLSTATr_t SHDW_LEDGPIOCONTROLSTATr_t;
#define SHDW_LEDGPIOCONTROLSTATr_CLR BCM84834_SHDW_LEDGPIOCONTROLSTATr_CLR
#define SHDW_LEDGPIOCONTROLSTATr_SET BCM84834_SHDW_LEDGPIOCONTROLSTATr_SET
#define SHDW_LEDGPIOCONTROLSTATr_GET BCM84834_SHDW_LEDGPIOCONTROLSTATr_GET
#define SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_GET BCM84834_SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_GET
#define SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_SET BCM84834_SHDW_LEDGPIOCONTROLSTATr_WRITE_ENABLEf_SET
#define SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_LEDGPIOCONTROLSTATr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_GET BCM84834_SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_GET
#define SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_SET BCM84834_SHDW_LEDGPIOCONTROLSTATr_LED_DATA_INf_SET
#define SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_GET BCM84834_SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_GET
#define SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_SET BCM84834_SHDW_LEDGPIOCONTROLSTATr_PROG_LED_OUTPUT_DISf_SET
#define READ_SHDW_LEDGPIOCONTROLSTATr BCM84834_READ_SHDW_LEDGPIOCONTROLSTATr
#define WRITE_SHDW_LEDGPIOCONTROLSTATr BCM84834_WRITE_SHDW_LEDGPIOCONTROLSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_LEDGPIOCONTROLSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_CISCOLINKSTATUSMODECONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Cisco Enhanced Link Status ModeControl Register (Shadow Register Selector = "10h")
 * SIZE:     32
 * FIELDS:
 *     DISCONNECT_TIMER_VAL 
 *     EN_ENH_PWR_DISCONNECT 
 *     EN_VISIBLE_BLINK 
 *     USE_ALT_LINKFLT  
 *     SPARE            
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr (0x0000101c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_CISCOLINKSTATUSMODECONTROL.
 *
 */
typedef union BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_ciscolinkstatusmodecontrol[1];
	uint32_t _shdw_ciscolinkstatusmodecontrol;
} BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_t;

#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_CLR(r) (r).shdw_ciscolinkstatusmodecontrol[0] = 0
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SET(r,d) (r).shdw_ciscolinkstatusmodecontrol[0] = d
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_GET(r) (r).shdw_ciscolinkstatusmodecontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_GET(r) ((((r).shdw_ciscolinkstatusmodecontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_GET(r) (((r).shdw_ciscolinkstatusmodecontrol[0]) & 0xf)
#define BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_SET(r,f) (r).shdw_ciscolinkstatusmodecontrol[0]=(((r).shdw_ciscolinkstatusmodecontrol[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access SHDW_CISCOLINKSTATUSMODECONTROL.
 *
 */
#define BCM84834_READ_SHDW_CISCOLINKSTATUSMODECONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr,(_r._shdw_ciscolinkstatusmodecontrol))
#define BCM84834_WRITE_SHDW_CISCOLINKSTATUSMODECONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr,(_r._shdw_ciscolinkstatusmodecontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_CISCOLINKSTATUSMODECONTROLr BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SIZE BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SIZE
typedef BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_t SHDW_CISCOLINKSTATUSMODECONTROLr_t;
#define SHDW_CISCOLINKSTATUSMODECONTROLr_CLR BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_CLR
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_WRITE_ENABLEf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_SPAREf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_USE_ALT_LINKFLTf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_VISIBLE_BLINKf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_EN_ENH_PWR_DISCONNECTf_SET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_GET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_GET
#define SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_SET BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr_DISCONNECT_TIMER_VALf_SET
#define READ_SHDW_CISCOLINKSTATUSMODECONTROLr BCM84834_READ_SHDW_CISCOLINKSTATUSMODECONTROLr
#define WRITE_SHDW_CISCOLINKSTATUSMODECONTROLr BCM84834_WRITE_SHDW_CISCOLINKSTATUSMODECONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_CISCOLINKSTATUSMODECONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SERDES100FXSTATUS
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     SERDES 100-FX Status Register (Shadow RegisterSelector = "11h")
 * SIZE:     32
 * FIELDS:
 *     X100FX_LINK_SERDES 
 *     LOCKED           
 *     FAULTING         
 *     LOST_LOCK        
 *     LOCK_TIMER_EXPIRED 
 *     RCV_ERROR_DETECTED 
 *     XMIT_ERROR_DETECTED 
 *     FALSE_CARRIER_DETECTED 
 *     BAD_ESD_DETECTED 
 *     X100FX_LINK_STAT_CHANGE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SERDES100FXSTATUSr (0x0000111c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SERDES100FXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SERDES100FXSTATUS.
 *
 */
typedef union BCM84834_SHDW_SERDES100FXSTATUSr_s {
	uint32_t v[1];
	uint32_t shdw_serdes100fxstatus[1];
	uint32_t _shdw_serdes100fxstatus;
} BCM84834_SHDW_SERDES100FXSTATUSr_t;

#define BCM84834_SHDW_SERDES100FXSTATUSr_CLR(r) (r).shdw_serdes100fxstatus[0] = 0
#define BCM84834_SHDW_SERDES100FXSTATUSr_SET(r,d) (r).shdw_serdes100fxstatus[0] = d
#define BCM84834_SHDW_SERDES100FXSTATUSr_GET(r) (r).shdw_serdes100fxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 9) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 8) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 7) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 4) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOST_LOCKf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 3) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOST_LOCKf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_SERDES100FXSTATUSr_FAULTINGf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_FAULTINGf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOCKEDf_GET(r) ((((r).shdw_serdes100fxstatus[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_LOCKEDf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_GET(r) (((r).shdw_serdes100fxstatus[0]) & 0x1)
#define BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_SET(r,f) (r).shdw_serdes100fxstatus[0]=(((r).shdw_serdes100fxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SERDES100FXSTATUS.
 *
 */
#define BCM84834_READ_SHDW_SERDES100FXSTATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SERDES100FXSTATUSr,(_r._shdw_serdes100fxstatus))
#define BCM84834_WRITE_SHDW_SERDES100FXSTATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SERDES100FXSTATUSr,(_r._shdw_serdes100fxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SERDES100FXSTATUSr BCM84834_SHDW_SERDES100FXSTATUSr
#define SHDW_SERDES100FXSTATUSr_SIZE BCM84834_SHDW_SERDES100FXSTATUSr_SIZE
typedef BCM84834_SHDW_SERDES100FXSTATUSr_t SHDW_SERDES100FXSTATUSr_t;
#define SHDW_SERDES100FXSTATUSr_CLR BCM84834_SHDW_SERDES100FXSTATUSr_CLR
#define SHDW_SERDES100FXSTATUSr_SET BCM84834_SHDW_SERDES100FXSTATUSr_SET
#define SHDW_SERDES100FXSTATUSr_GET BCM84834_SHDW_SERDES100FXSTATUSr_GET
#define SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_GET BCM84834_SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_GET
#define SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_SET BCM84834_SHDW_SERDES100FXSTATUSr_WRITE_ENABLEf_SET
#define SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SERDES100FXSTATUSr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_GET BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_GET
#define SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_SET BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_STAT_CHANGEf_SET
#define SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_GET
#define SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_BAD_ESD_DETECTEDf_SET
#define SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_GET
#define SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_FALSE_CARRIER_DETECTEDf_SET
#define SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_GET
#define SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_XMIT_ERROR_DETECTEDf_SET
#define SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_GET
#define SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_RCV_ERROR_DETECTEDf_SET
#define SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_GET
#define SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_LOCK_TIMER_EXPIREDf_SET
#define SHDW_SERDES100FXSTATUSr_LOST_LOCKf_GET BCM84834_SHDW_SERDES100FXSTATUSr_LOST_LOCKf_GET
#define SHDW_SERDES100FXSTATUSr_LOST_LOCKf_SET BCM84834_SHDW_SERDES100FXSTATUSr_LOST_LOCKf_SET
#define SHDW_SERDES100FXSTATUSr_FAULTINGf_GET BCM84834_SHDW_SERDES100FXSTATUSr_FAULTINGf_GET
#define SHDW_SERDES100FXSTATUSr_FAULTINGf_SET BCM84834_SHDW_SERDES100FXSTATUSr_FAULTINGf_SET
#define SHDW_SERDES100FXSTATUSr_LOCKEDf_GET BCM84834_SHDW_SERDES100FXSTATUSr_LOCKEDf_GET
#define SHDW_SERDES100FXSTATUSr_LOCKEDf_SET BCM84834_SHDW_SERDES100FXSTATUSr_LOCKEDf_SET
#define SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_GET BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_GET
#define SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_SET BCM84834_SHDW_SERDES100FXSTATUSr_X100FX_LINK_SERDESf_SET
#define READ_SHDW_SERDES100FXSTATUSr BCM84834_READ_SHDW_SERDES100FXSTATUSr
#define WRITE_SHDW_SERDES100FXSTATUSr BCM84834_WRITE_SHDW_SERDES100FXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SERDES100FXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SERDES100FXTEST
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     SERDES 100-FX Test Register (Shadow RegisterSelector = "12h")
 * SIZE:     32
 * FIELDS:
 *     FAST_TIMERS      
 *     FAST_UNLOCK_TIMER 
 *     FORCE_LOCK       
 *     FORCE_LINK       
 *     BYPASS_ALIGNMENT 
 *     BYPASS_ENCODER   
 *     BYPASS_NRZ       
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SERDES100FXTESTr (0x0000121c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SERDES100FXTESTr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SERDES100FXTEST.
 *
 */
typedef union BCM84834_SHDW_SERDES100FXTESTr_s {
	uint32_t v[1];
	uint32_t shdw_serdes100fxtest[1];
	uint32_t _shdw_serdes100fxtest;
} BCM84834_SHDW_SERDES100FXTESTr_t;

#define BCM84834_SHDW_SERDES100FXTESTr_CLR(r) (r).shdw_serdes100fxtest[0] = 0
#define BCM84834_SHDW_SERDES100FXTESTr_SET(r,d) (r).shdw_serdes100fxtest[0] = d
#define BCM84834_SHDW_SERDES100FXTESTr_GET(r) (r).shdw_serdes100fxtest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SERDES100FXTESTr_WRITE_ENABLEf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_WRITE_ENABLEf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_NRZf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_NRZf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 4) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_SERDES100FXTESTr_FORCE_LINKf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 3) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_FORCE_LINKf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_SERDES100FXTESTr_FORCE_LOCKf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_FORCE_LOCKf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_GET(r) ((((r).shdw_serdes100fxtest[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SERDES100FXTESTr_FAST_TIMERSf_GET(r) (((r).shdw_serdes100fxtest[0]) & 0x1)
#define BCM84834_SHDW_SERDES100FXTESTr_FAST_TIMERSf_SET(r,f) (r).shdw_serdes100fxtest[0]=(((r).shdw_serdes100fxtest[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SERDES100FXTEST.
 *
 */
#define BCM84834_READ_SHDW_SERDES100FXTESTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SERDES100FXTESTr,(_r._shdw_serdes100fxtest))
#define BCM84834_WRITE_SHDW_SERDES100FXTESTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SERDES100FXTESTr,(_r._shdw_serdes100fxtest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SERDES100FXTESTr BCM84834_SHDW_SERDES100FXTESTr
#define SHDW_SERDES100FXTESTr_SIZE BCM84834_SHDW_SERDES100FXTESTr_SIZE
typedef BCM84834_SHDW_SERDES100FXTESTr_t SHDW_SERDES100FXTESTr_t;
#define SHDW_SERDES100FXTESTr_CLR BCM84834_SHDW_SERDES100FXTESTr_CLR
#define SHDW_SERDES100FXTESTr_SET BCM84834_SHDW_SERDES100FXTESTr_SET
#define SHDW_SERDES100FXTESTr_GET BCM84834_SHDW_SERDES100FXTESTr_GET
#define SHDW_SERDES100FXTESTr_WRITE_ENABLEf_GET BCM84834_SHDW_SERDES100FXTESTr_WRITE_ENABLEf_GET
#define SHDW_SERDES100FXTESTr_WRITE_ENABLEf_SET BCM84834_SHDW_SERDES100FXTESTr_WRITE_ENABLEf_SET
#define SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SERDES100FXTESTr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SERDES100FXTESTr_BYPASS_NRZf_GET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_NRZf_GET
#define SHDW_SERDES100FXTESTr_BYPASS_NRZf_SET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_NRZf_SET
#define SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_GET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_GET
#define SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_SET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ENCODERf_SET
#define SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_GET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_GET
#define SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_SET BCM84834_SHDW_SERDES100FXTESTr_BYPASS_ALIGNMENTf_SET
#define SHDW_SERDES100FXTESTr_FORCE_LINKf_GET BCM84834_SHDW_SERDES100FXTESTr_FORCE_LINKf_GET
#define SHDW_SERDES100FXTESTr_FORCE_LINKf_SET BCM84834_SHDW_SERDES100FXTESTr_FORCE_LINKf_SET
#define SHDW_SERDES100FXTESTr_FORCE_LOCKf_GET BCM84834_SHDW_SERDES100FXTESTr_FORCE_LOCKf_GET
#define SHDW_SERDES100FXTESTr_FORCE_LOCKf_SET BCM84834_SHDW_SERDES100FXTESTr_FORCE_LOCKf_SET
#define SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_GET BCM84834_SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_GET
#define SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_SET BCM84834_SHDW_SERDES100FXTESTr_FAST_UNLOCK_TIMERf_SET
#define SHDW_SERDES100FXTESTr_FAST_TIMERSf_GET BCM84834_SHDW_SERDES100FXTESTr_FAST_TIMERSf_GET
#define SHDW_SERDES100FXTESTr_FAST_TIMERSf_SET BCM84834_SHDW_SERDES100FXTESTr_FAST_TIMERSf_SET
#define READ_SHDW_SERDES100FXTESTr BCM84834_READ_SHDW_SERDES100FXTESTr
#define WRITE_SHDW_SERDES100FXTESTr BCM84834_WRITE_SHDW_SERDES100FXTESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SERDES100FXTESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SERDES100FXCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     SERDES 100-FX Control Register (ShadowRegister Selector = "13h")
 * SIZE:     32
 * FIELDS:
 *     SERDES_ENABLE    
 *     SERDES_FULL_DUPLEX 
 *     AUTO_DETECT_SERDES 
 *     FAR_END_FAULT_ENABLE 
 *     FORCE_RX_QUALITY 
 *     DISABLE_RX_QUALITY 
 *     AUTO_DETECT_TIMER_SEL 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SERDES100FXCONTROLr (0x0000131c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SERDES100FXCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SERDES100FXCONTROL.
 *
 */
typedef union BCM84834_SHDW_SERDES100FXCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_serdes100fxcontrol[1];
	uint32_t _shdw_serdes100fxcontrol;
} BCM84834_SHDW_SERDES100FXCONTROLr_t;

#define BCM84834_SHDW_SERDES100FXCONTROLr_CLR(r) (r).shdw_serdes100fxcontrol[0] = 0
#define BCM84834_SHDW_SERDES100FXCONTROLr_SET(r,d) (r).shdw_serdes100fxcontrol[0] = d
#define BCM84834_SHDW_SERDES100FXCONTROLr_GET(r) (r).shdw_serdes100fxcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_GET(r) ((((r).shdw_serdes100fxcontrol[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_GET(r) (((r).shdw_serdes100fxcontrol[0]) & 0x1)
#define BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_SET(r,f) (r).shdw_serdes100fxcontrol[0]=(((r).shdw_serdes100fxcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SERDES100FXCONTROL.
 *
 */
#define BCM84834_READ_SHDW_SERDES100FXCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SERDES100FXCONTROLr,(_r._shdw_serdes100fxcontrol))
#define BCM84834_WRITE_SHDW_SERDES100FXCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SERDES100FXCONTROLr,(_r._shdw_serdes100fxcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SERDES100FXCONTROLr BCM84834_SHDW_SERDES100FXCONTROLr
#define SHDW_SERDES100FXCONTROLr_SIZE BCM84834_SHDW_SERDES100FXCONTROLr_SIZE
typedef BCM84834_SHDW_SERDES100FXCONTROLr_t SHDW_SERDES100FXCONTROLr_t;
#define SHDW_SERDES100FXCONTROLr_CLR BCM84834_SHDW_SERDES100FXCONTROLr_CLR
#define SHDW_SERDES100FXCONTROLr_SET BCM84834_SHDW_SERDES100FXCONTROLr_SET
#define SHDW_SERDES100FXCONTROLr_GET BCM84834_SHDW_SERDES100FXCONTROLr_GET
#define SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_GET
#define SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_SERDES100FXCONTROLr_WRITE_ENABLEf_SET
#define SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SERDES100FXCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_GET BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_GET
#define SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_SET BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_TIMER_SELf_SET
#define SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_GET BCM84834_SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_GET
#define SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_SET BCM84834_SHDW_SERDES100FXCONTROLr_DISABLE_RX_QUALITYf_SET
#define SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_GET BCM84834_SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_GET
#define SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_SET BCM84834_SHDW_SERDES100FXCONTROLr_FORCE_RX_QUALITYf_SET
#define SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_GET BCM84834_SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_GET
#define SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_SET BCM84834_SHDW_SERDES100FXCONTROLr_FAR_END_FAULT_ENABLEf_SET
#define SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_GET BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_GET
#define SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_SET BCM84834_SHDW_SERDES100FXCONTROLr_AUTO_DETECT_SERDESf_SET
#define SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_GET BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_GET
#define SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_SET BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_FULL_DUPLEXf_SET
#define SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_GET BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_GET
#define SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_SET BCM84834_SHDW_SERDES100FXCONTROLr_SERDES_ENABLEf_SET
#define READ_SHDW_SERDES100FXCONTROLr BCM84834_READ_SHDW_SERDES100FXCONTROLr
#define WRITE_SHDW_SERDES100FXCONTROLr BCM84834_WRITE_SHDW_SERDES100FXCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SERDES100FXCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_EXTERNALSERDESCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     External SERDES Control Register (ShadowRegister Selector = "14h")
 * SIZE:     32
 * FIELDS:
 *     EXT_SERDES_SELECT 
 *     SELECT_SD        
 *     SELECT_SYNC_STATUS 
 *     EXT_SERDES_LED_MODE 
 *     EXT_SERDES_100FX_MODE 
 *     X100FX_FULL_DUPLEX 
 *     AUTO_DETECT_100FX_MODE 
 *     EXT_SERDES_DUPLEX 
 *     EXT_SERDES_LINK  
 *     EXT_LINK_STAT_CHANGE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr (0x0000141c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_EXTERNALSERDESCONTROL.
 *
 */
typedef union BCM84834_SHDW_EXTERNALSERDESCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_externalserdescontrol[1];
	uint32_t _shdw_externalserdescontrol;
} BCM84834_SHDW_EXTERNALSERDESCONTROLr_t;

#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_CLR(r) (r).shdw_externalserdescontrol[0] = 0
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SET(r,d) (r).shdw_externalserdescontrol[0] = d
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_GET(r) (r).shdw_externalserdescontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 2) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_GET(r) ((((r).shdw_externalserdescontrol[0]) >> 1) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_GET(r) (((r).shdw_externalserdescontrol[0]) & 0x1)
#define BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_SET(r,f) (r).shdw_externalserdescontrol[0]=(((r).shdw_externalserdescontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_EXTERNALSERDESCONTROL.
 *
 */
#define BCM84834_READ_SHDW_EXTERNALSERDESCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_EXTERNALSERDESCONTROLr,(_r._shdw_externalserdescontrol))
#define BCM84834_WRITE_SHDW_EXTERNALSERDESCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_EXTERNALSERDESCONTROLr,(_r._shdw_externalserdescontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_EXTERNALSERDESCONTROLr BCM84834_SHDW_EXTERNALSERDESCONTROLr
#define SHDW_EXTERNALSERDESCONTROLr_SIZE BCM84834_SHDW_EXTERNALSERDESCONTROLr_SIZE
typedef BCM84834_SHDW_EXTERNALSERDESCONTROLr_t SHDW_EXTERNALSERDESCONTROLr_t;
#define SHDW_EXTERNALSERDESCONTROLr_CLR BCM84834_SHDW_EXTERNALSERDESCONTROLr_CLR
#define SHDW_EXTERNALSERDESCONTROLr_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SET
#define SHDW_EXTERNALSERDESCONTROLr_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_GET
#define SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_GET
#define SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_WRITE_ENABLEf_SET
#define SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_LINK_STAT_CHANGEf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LINKf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_DUPLEXf_SET
#define SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_GET
#define SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_AUTO_DETECT_100FX_MODEf_SET
#define SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_GET
#define SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_X100FX_FULL_DUPLEXf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_100FX_MODEf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_LED_MODEf_SET
#define SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_GET
#define SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SYNC_STATUSf_SET
#define SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_GET
#define SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_SELECT_SDf_SET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_GET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_GET
#define SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_SET BCM84834_SHDW_EXTERNALSERDESCONTROLr_EXT_SERDES_SELECTf_SET
#define READ_SHDW_EXTERNALSERDESCONTROLr BCM84834_READ_SHDW_EXTERNALSERDESCONTROLr
#define WRITE_SHDW_EXTERNALSERDESCONTROLr BCM84834_WRITE_SHDW_EXTERNALSERDESCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_EXTERNALSERDESCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_SGMIISLAVE
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     SGMII Slave Register (Shadow Register Selector = "15h")
 * SIZE:     32
 * FIELDS:
 *     SGMII_SLV_AUTO_DETECT 
 *     SGMII_SLAVE_MODE 
 *     RGMII_MII_SLV_FREQ_LOCK 
 *     MODE_SELECT      
 *     SERDES_LINK_STAT_CHNG 
 *     SERDES_SPEED     
 *     SERDES_DUPLEX    
 *     SERDES_LINK      
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_SGMIISLAVEr (0x0000151c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_SGMIISLAVEr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_SGMIISLAVE.
 *
 */
typedef union BCM84834_SHDW_SGMIISLAVEr_s {
	uint32_t v[1];
	uint32_t shdw_sgmiislave[1];
	uint32_t _shdw_sgmiislave;
} BCM84834_SHDW_SGMIISLAVEr_t;

#define BCM84834_SHDW_SGMIISLAVEr_CLR(r) (r).shdw_sgmiislave[0] = 0
#define BCM84834_SHDW_SGMIISLAVEr_SET(r,d) (r).shdw_sgmiislave[0] = d
#define BCM84834_SHDW_SGMIISLAVEr_GET(r) (r).shdw_sgmiislave[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_SGMIISLAVEr_WRITE_ENABLEf_GET(r) ((((r).shdw_sgmiislave[0]) >> 15) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_WRITE_ENABLEf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_sgmiislave[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_LINKf_GET(r) ((((r).shdw_sgmiislave[0]) >> 9) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_LINKf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_DUPLEXf_GET(r) ((((r).shdw_sgmiislave[0]) >> 8) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_DUPLEXf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_SPEEDf_GET(r) ((((r).shdw_sgmiislave[0]) >> 6) & 0x3)
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_SPEEDf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_GET(r) ((((r).shdw_sgmiislave[0]) >> 5) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_SGMIISLAVEr_MODE_SELECTf_GET(r) ((((r).shdw_sgmiislave[0]) >> 3) & 0x3)
#define BCM84834_SHDW_SGMIISLAVEr_MODE_SELECTf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCM84834_SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_GET(r) ((((r).shdw_sgmiislave[0]) >> 2) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_GET(r) ((((r).shdw_sgmiislave[0]) >> 1) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_GET(r) (((r).shdw_sgmiislave[0]) & 0x1)
#define BCM84834_SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_SET(r,f) (r).shdw_sgmiislave[0]=(((r).shdw_sgmiislave[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_SGMIISLAVE.
 *
 */
#define BCM84834_READ_SHDW_SGMIISLAVEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_SGMIISLAVEr,(_r._shdw_sgmiislave))
#define BCM84834_WRITE_SHDW_SGMIISLAVEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_SGMIISLAVEr,(_r._shdw_sgmiislave))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_SGMIISLAVEr BCM84834_SHDW_SGMIISLAVEr
#define SHDW_SGMIISLAVEr_SIZE BCM84834_SHDW_SGMIISLAVEr_SIZE
typedef BCM84834_SHDW_SGMIISLAVEr_t SHDW_SGMIISLAVEr_t;
#define SHDW_SGMIISLAVEr_CLR BCM84834_SHDW_SGMIISLAVEr_CLR
#define SHDW_SGMIISLAVEr_SET BCM84834_SHDW_SGMIISLAVEr_SET
#define SHDW_SGMIISLAVEr_GET BCM84834_SHDW_SGMIISLAVEr_GET
#define SHDW_SGMIISLAVEr_WRITE_ENABLEf_GET BCM84834_SHDW_SGMIISLAVEr_WRITE_ENABLEf_GET
#define SHDW_SGMIISLAVEr_WRITE_ENABLEf_SET BCM84834_SHDW_SGMIISLAVEr_WRITE_ENABLEf_SET
#define SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_SGMIISLAVEr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_SGMIISLAVEr_SERDES_LINKf_GET BCM84834_SHDW_SGMIISLAVEr_SERDES_LINKf_GET
#define SHDW_SGMIISLAVEr_SERDES_LINKf_SET BCM84834_SHDW_SGMIISLAVEr_SERDES_LINKf_SET
#define SHDW_SGMIISLAVEr_SERDES_DUPLEXf_GET BCM84834_SHDW_SGMIISLAVEr_SERDES_DUPLEXf_GET
#define SHDW_SGMIISLAVEr_SERDES_DUPLEXf_SET BCM84834_SHDW_SGMIISLAVEr_SERDES_DUPLEXf_SET
#define SHDW_SGMIISLAVEr_SERDES_SPEEDf_GET BCM84834_SHDW_SGMIISLAVEr_SERDES_SPEEDf_GET
#define SHDW_SGMIISLAVEr_SERDES_SPEEDf_SET BCM84834_SHDW_SGMIISLAVEr_SERDES_SPEEDf_SET
#define SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_GET BCM84834_SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_GET
#define SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_SET BCM84834_SHDW_SGMIISLAVEr_SERDES_LINK_STAT_CHNGf_SET
#define SHDW_SGMIISLAVEr_MODE_SELECTf_GET BCM84834_SHDW_SGMIISLAVEr_MODE_SELECTf_GET
#define SHDW_SGMIISLAVEr_MODE_SELECTf_SET BCM84834_SHDW_SGMIISLAVEr_MODE_SELECTf_SET
#define SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_GET BCM84834_SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_GET
#define SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_SET BCM84834_SHDW_SGMIISLAVEr_RGMII_MII_SLV_FREQ_LOCKf_SET
#define SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_GET BCM84834_SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_GET
#define SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_SET BCM84834_SHDW_SGMIISLAVEr_SGMII_SLAVE_MODEf_SET
#define SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_GET BCM84834_SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_GET
#define SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_SET BCM84834_SHDW_SGMIISLAVEr_SGMII_SLV_AUTO_DETECTf_SET
#define READ_SHDW_SGMIISLAVEr BCM84834_READ_SHDW_SGMIISLAVEr
#define WRITE_SHDW_SGMIISLAVEr BCM84834_WRITE_SHDW_SGMIISLAVEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_SGMIISLAVEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISC1000XCONTROL2
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Misc 1000-X Control 2 Register (Shadow RegisterSelector = "16h")
 * SIZE:     32
 * FIELDS:
 *     FIFO_ELASTICITY_1 
 *     PAR_DETECT_ENABLE 
 *     DISABLE_FALSE_LINK 
 *     FILTER_FORCED_LINK 
 *     SNOOP_MODE       
 *     EN_AMP_SIGNAL_DETECT 
 *     REG_WRITE_SELECTOR 
 *     RESTART_SERDES_AN 
 *     ENABLE_REMOTE_ACCESS 
 *     REMOTE_CU_MODE   
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISC1000XCONTROL2r (0x0000161c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISC1000XCONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISC1000XCONTROL2.
 *
 */
typedef union BCM84834_SHDW_MISC1000XCONTROL2r_s {
	uint32_t v[1];
	uint32_t shdw_misc1000xcontrol2[1];
	uint32_t _shdw_misc1000xcontrol2;
} BCM84834_SHDW_MISC1000XCONTROL2r_t;

#define BCM84834_SHDW_MISC1000XCONTROL2r_CLR(r) (r).shdw_misc1000xcontrol2[0] = 0
#define BCM84834_SHDW_MISC1000XCONTROL2r_SET(r,d) (r).shdw_misc1000xcontrol2[0] = d
#define BCM84834_SHDW_MISC1000XCONTROL2r_GET(r) (r).shdw_misc1000xcontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 2) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_GET(r) ((((r).shdw_misc1000xcontrol2[0]) >> 1) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_GET(r) (((r).shdw_misc1000xcontrol2[0]) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_SET(r,f) (r).shdw_misc1000xcontrol2[0]=(((r).shdw_misc1000xcontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_MISC1000XCONTROL2.
 *
 */
#define BCM84834_READ_SHDW_MISC1000XCONTROL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISC1000XCONTROL2r,(_r._shdw_misc1000xcontrol2))
#define BCM84834_WRITE_SHDW_MISC1000XCONTROL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISC1000XCONTROL2r,(_r._shdw_misc1000xcontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISC1000XCONTROL2r BCM84834_SHDW_MISC1000XCONTROL2r
#define SHDW_MISC1000XCONTROL2r_SIZE BCM84834_SHDW_MISC1000XCONTROL2r_SIZE
typedef BCM84834_SHDW_MISC1000XCONTROL2r_t SHDW_MISC1000XCONTROL2r_t;
#define SHDW_MISC1000XCONTROL2r_CLR BCM84834_SHDW_MISC1000XCONTROL2r_CLR
#define SHDW_MISC1000XCONTROL2r_SET BCM84834_SHDW_MISC1000XCONTROL2r_SET
#define SHDW_MISC1000XCONTROL2r_GET BCM84834_SHDW_MISC1000XCONTROL2r_GET
#define SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_GET BCM84834_SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_GET
#define SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_SET BCM84834_SHDW_MISC1000XCONTROL2r_WRITE_ENABLEf_SET
#define SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_GET
#define SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_MISC1000XCONTROL2r_SHADOW_REGISTER_SELECTf_SET
#define SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_GET BCM84834_SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_GET
#define SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_SET BCM84834_SHDW_MISC1000XCONTROL2r_REMOTE_CU_MODEf_SET
#define SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_GET BCM84834_SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_GET
#define SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_SET BCM84834_SHDW_MISC1000XCONTROL2r_ENABLE_REMOTE_ACCESSf_SET
#define SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_GET BCM84834_SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_GET
#define SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_SET BCM84834_SHDW_MISC1000XCONTROL2r_RESTART_SERDES_ANf_SET
#define SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_GET BCM84834_SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_GET
#define SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_SET BCM84834_SHDW_MISC1000XCONTROL2r_REG_WRITE_SELECTORf_SET
#define SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_GET BCM84834_SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_GET
#define SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_SET BCM84834_SHDW_MISC1000XCONTROL2r_EN_AMP_SIGNAL_DETECTf_SET
#define SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_GET BCM84834_SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_GET
#define SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_SET BCM84834_SHDW_MISC1000XCONTROL2r_SNOOP_MODEf_SET
#define SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_GET BCM84834_SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_GET
#define SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_SET BCM84834_SHDW_MISC1000XCONTROL2r_FILTER_FORCED_LINKf_SET
#define SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_GET BCM84834_SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_GET
#define SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_SET BCM84834_SHDW_MISC1000XCONTROL2r_DISABLE_FALSE_LINKf_SET
#define SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_GET BCM84834_SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_GET
#define SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_SET BCM84834_SHDW_MISC1000XCONTROL2r_PAR_DETECT_ENABLEf_SET
#define SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_GET BCM84834_SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_GET
#define SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_SET BCM84834_SHDW_MISC1000XCONTROL2r_FIFO_ELASTICITY_1f_SET
#define READ_SHDW_MISC1000XCONTROL2r BCM84834_READ_SHDW_MISC1000XCONTROL2r
#define WRITE_SHDW_MISC1000XCONTROL2r BCM84834_WRITE_SHDW_MISC1000XCONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISC1000XCONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISC1000XCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Misc 1000-X Control Register (Shadow RegisterSelector = "17h")
 * SIZE:     32
 * FIELDS:
 *     DIS_1000X_PWRDN  
 *     DISABLE_AMP_SWITCHING 
 *     FORCE_XMIT_DATA  
 *     DISABLE_GBIC_UPDATES 
 *     SIGNAL_DETECT_ENABLE 
 *     SERDES_XMIT_DISABLE 
 *     FIBER_PWRDN_SLEEP_TIME 
 *     FIBER_PWRDN_WAKE_TIME 
 *     QUALIFY_DIS_CARRIER_EXT 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISC1000XCONTROLr (0x0000171c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISC1000XCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISC1000XCONTROL.
 *
 */
typedef union BCM84834_SHDW_MISC1000XCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_misc1000xcontrol[1];
	uint32_t _shdw_misc1000xcontrol;
} BCM84834_SHDW_MISC1000XCONTROLr_t;

#define BCM84834_SHDW_MISC1000XCONTROLr_CLR(r) (r).shdw_misc1000xcontrol[0] = 0
#define BCM84834_SHDW_MISC1000XCONTROLr_SET(r,d) (r).shdw_misc1000xcontrol[0] = d
#define BCM84834_SHDW_MISC1000XCONTROLr_GET(r) (r).shdw_misc1000xcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_GET(r) ((((r).shdw_misc1000xcontrol[0]) >> 2) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_GET(r) (((r).shdw_misc1000xcontrol[0]) & 0x1)
#define BCM84834_SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_SET(r,f) (r).shdw_misc1000xcontrol[0]=(((r).shdw_misc1000xcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_MISC1000XCONTROL.
 *
 */
#define BCM84834_READ_SHDW_MISC1000XCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISC1000XCONTROLr,(_r._shdw_misc1000xcontrol))
#define BCM84834_WRITE_SHDW_MISC1000XCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISC1000XCONTROLr,(_r._shdw_misc1000xcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISC1000XCONTROLr BCM84834_SHDW_MISC1000XCONTROLr
#define SHDW_MISC1000XCONTROLr_SIZE BCM84834_SHDW_MISC1000XCONTROLr_SIZE
typedef BCM84834_SHDW_MISC1000XCONTROLr_t SHDW_MISC1000XCONTROLr_t;
#define SHDW_MISC1000XCONTROLr_CLR BCM84834_SHDW_MISC1000XCONTROLr_CLR
#define SHDW_MISC1000XCONTROLr_SET BCM84834_SHDW_MISC1000XCONTROLr_SET
#define SHDW_MISC1000XCONTROLr_GET BCM84834_SHDW_MISC1000XCONTROLr_GET
#define SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_GET
#define SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_MISC1000XCONTROLr_WRITE_ENABLEf_SET
#define SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_MISC1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_GET BCM84834_SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_GET
#define SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_SET BCM84834_SHDW_MISC1000XCONTROLr_QUALIFY_DIS_CARRIER_EXTf_SET
#define SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_GET BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_GET
#define SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_SET BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_WAKE_TIMEf_SET
#define SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_GET BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_GET
#define SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_SET BCM84834_SHDW_MISC1000XCONTROLr_FIBER_PWRDN_SLEEP_TIMEf_SET
#define SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_GET BCM84834_SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_GET
#define SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_SET BCM84834_SHDW_MISC1000XCONTROLr_SERDES_XMIT_DISABLEf_SET
#define SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_GET BCM84834_SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_GET
#define SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_SET BCM84834_SHDW_MISC1000XCONTROLr_SIGNAL_DETECT_ENABLEf_SET
#define SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_GET BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_GET
#define SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_SET BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_GBIC_UPDATESf_SET
#define SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_GET BCM84834_SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_GET
#define SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_SET BCM84834_SHDW_MISC1000XCONTROLr_FORCE_XMIT_DATAf_SET
#define SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_GET BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_GET
#define SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_SET BCM84834_SHDW_MISC1000XCONTROLr_DISABLE_AMP_SWITCHINGf_SET
#define SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_GET BCM84834_SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_GET
#define SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_SET BCM84834_SHDW_MISC1000XCONTROLr_DIS_1000X_PWRDNf_SET
#define READ_SHDW_MISC1000XCONTROLr BCM84834_READ_SHDW_MISC1000XCONTROLr
#define WRITE_SHDW_MISC1000XCONTROLr BCM84834_WRITE_SHDW_MISC1000XCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISC1000XCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUTODETECTSGMIIGBIC
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Auto-Detect SGMII/GBIC Register (ShadowRegister Selector = "18h")
 * SIZE:     32
 * FIELDS:
 *     AUTO_DETECT_SGMII_GBIC 
 *     SGMII_FREQ_LOCK_MODE 
 *     FIFO_ELASTICITY_0 
 *     MEDIA_CONVERTER_MODE 
 *     EN_CRC_FRAGMENT_ERRS 
 *     SD_AMP_STATUS_CHANGED 
 *     SD_AMP_STATUS    
 *     FIBER_SD         
 *     XMIT_DATA        
 *     SERDES_RES_FAULT 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr (0x0000181c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUTODETECTSGMIIGBIC.
 *
 */
typedef union BCM84834_SHDW_AUTODETECTSGMIIGBICr_s {
	uint32_t v[1];
	uint32_t shdw_autodetectsgmiigbic[1];
	uint32_t _shdw_autodetectsgmiigbic;
} BCM84834_SHDW_AUTODETECTSGMIIGBICr_t;

#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_CLR(r) (r).shdw_autodetectsgmiigbic[0] = 0
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SET(r,d) (r).shdw_autodetectsgmiigbic[0] = d
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_GET(r) (r).shdw_autodetectsgmiigbic[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 9) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 8) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 5) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 2) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_GET(r) ((((r).shdw_autodetectsgmiigbic[0]) >> 1) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_GET(r) (((r).shdw_autodetectsgmiigbic[0]) & 0x1)
#define BCM84834_SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_SET(r,f) (r).shdw_autodetectsgmiigbic[0]=(((r).shdw_autodetectsgmiigbic[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_AUTODETECTSGMIIGBIC.
 *
 */
#define BCM84834_READ_SHDW_AUTODETECTSGMIIGBICr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUTODETECTSGMIIGBICr,(_r._shdw_autodetectsgmiigbic))
#define BCM84834_WRITE_SHDW_AUTODETECTSGMIIGBICr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUTODETECTSGMIIGBICr,(_r._shdw_autodetectsgmiigbic))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUTODETECTSGMIIGBICr BCM84834_SHDW_AUTODETECTSGMIIGBICr
#define SHDW_AUTODETECTSGMIIGBICr_SIZE BCM84834_SHDW_AUTODETECTSGMIIGBICr_SIZE
typedef BCM84834_SHDW_AUTODETECTSGMIIGBICr_t SHDW_AUTODETECTSGMIIGBICr_t;
#define SHDW_AUTODETECTSGMIIGBICr_CLR BCM84834_SHDW_AUTODETECTSGMIIGBICr_CLR
#define SHDW_AUTODETECTSGMIIGBICr_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SET
#define SHDW_AUTODETECTSGMIIGBICr_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_GET
#define SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_GET
#define SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_WRITE_ENABLEf_SET
#define SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_GET
#define SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SERDES_RES_FAULTf_SET
#define SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_GET
#define SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_XMIT_DATAf_SET
#define SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_GET
#define SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIBER_SDf_SET
#define SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_GET
#define SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUSf_SET
#define SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_GET
#define SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SD_AMP_STATUS_CHANGEDf_SET
#define SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_GET
#define SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_EN_CRC_FRAGMENT_ERRSf_SET
#define SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_GET
#define SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_MEDIA_CONVERTER_MODEf_SET
#define SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_GET
#define SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_FIFO_ELASTICITY_0f_SET
#define SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_GET
#define SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_SGMII_FREQ_LOCK_MODEf_SET
#define SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_GET BCM84834_SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_GET
#define SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_SET BCM84834_SHDW_AUTODETECTSGMIIGBICr_AUTO_DETECT_SGMII_GBICf_SET
#define READ_SHDW_AUTODETECTSGMIIGBICr BCM84834_READ_SHDW_AUTODETECTSGMIIGBICr
#define WRITE_SHDW_AUTODETECTSGMIIGBICr BCM84834_WRITE_SHDW_AUTODETECTSGMIIGBICr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUTODETECTSGMIIGBICr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_TEST1000X
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Test 1000-X Register (Shadow Register Selector = "19h")
 * SIZE:     32
 * FIELDS:
 *     ZERO_COMMA_DET_PHASE 
 *     BYPASS_PCS_TRANSMIT 
 *     BYPASS_PCS_RECEIVE 
 *     FORCE_TXFIFO_ON  
 *     BLOCK_TXEN_MODE  
 *     RXFIFO_SGMII_EARLY_PRE 
 *     TXFIFO_SGMII_EARLY_PRE 
 *     DLL_BYPASS_CLOCK_EN 
 *     USE_COPPER_SPEED 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_TEST1000Xr (0x0000191c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_TEST1000Xr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_TEST1000X.
 *
 */
typedef union BCM84834_SHDW_TEST1000Xr_s {
	uint32_t v[1];
	uint32_t shdw_test1000x[1];
	uint32_t _shdw_test1000x;
} BCM84834_SHDW_TEST1000Xr_t;

#define BCM84834_SHDW_TEST1000Xr_CLR(r) (r).shdw_test1000x[0] = 0
#define BCM84834_SHDW_TEST1000Xr_SET(r,d) (r).shdw_test1000x[0] = d
#define BCM84834_SHDW_TEST1000Xr_GET(r) (r).shdw_test1000x[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_TEST1000Xr_WRITE_ENABLEf_GET(r) ((((r).shdw_test1000x[0]) >> 15) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_WRITE_ENABLEf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_test1000x[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_TEST1000Xr_USE_COPPER_SPEEDf_GET(r) ((((r).shdw_test1000x[0]) >> 9) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_USE_COPPER_SPEEDf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_GET(r) ((((r).shdw_test1000x[0]) >> 8) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_GET(r) ((((r).shdw_test1000x[0]) >> 7) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_GET(r) ((((r).shdw_test1000x[0]) >> 6) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_GET(r) ((((r).shdw_test1000x[0]) >> 5) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_GET(r) ((((r).shdw_test1000x[0]) >> 3) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_GET(r) ((((r).shdw_test1000x[0]) >> 2) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_GET(r) ((((r).shdw_test1000x[0]) >> 1) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_GET(r) (((r).shdw_test1000x[0]) & 0x1)
#define BCM84834_SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_SET(r,f) (r).shdw_test1000x[0]=(((r).shdw_test1000x[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_TEST1000X.
 *
 */
#define BCM84834_READ_SHDW_TEST1000Xr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_TEST1000Xr,(_r._shdw_test1000x))
#define BCM84834_WRITE_SHDW_TEST1000Xr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_TEST1000Xr,(_r._shdw_test1000x))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_TEST1000Xr BCM84834_SHDW_TEST1000Xr
#define SHDW_TEST1000Xr_SIZE BCM84834_SHDW_TEST1000Xr_SIZE
typedef BCM84834_SHDW_TEST1000Xr_t SHDW_TEST1000Xr_t;
#define SHDW_TEST1000Xr_CLR BCM84834_SHDW_TEST1000Xr_CLR
#define SHDW_TEST1000Xr_SET BCM84834_SHDW_TEST1000Xr_SET
#define SHDW_TEST1000Xr_GET BCM84834_SHDW_TEST1000Xr_GET
#define SHDW_TEST1000Xr_WRITE_ENABLEf_GET BCM84834_SHDW_TEST1000Xr_WRITE_ENABLEf_GET
#define SHDW_TEST1000Xr_WRITE_ENABLEf_SET BCM84834_SHDW_TEST1000Xr_WRITE_ENABLEf_SET
#define SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_TEST1000Xr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_TEST1000Xr_USE_COPPER_SPEEDf_GET BCM84834_SHDW_TEST1000Xr_USE_COPPER_SPEEDf_GET
#define SHDW_TEST1000Xr_USE_COPPER_SPEEDf_SET BCM84834_SHDW_TEST1000Xr_USE_COPPER_SPEEDf_SET
#define SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_GET BCM84834_SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_GET
#define SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_SET BCM84834_SHDW_TEST1000Xr_DLL_BYPASS_CLOCK_ENf_SET
#define SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_GET BCM84834_SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_GET
#define SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_SET BCM84834_SHDW_TEST1000Xr_TXFIFO_SGMII_EARLY_PREf_SET
#define SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_GET BCM84834_SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_GET
#define SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_SET BCM84834_SHDW_TEST1000Xr_RXFIFO_SGMII_EARLY_PREf_SET
#define SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_GET BCM84834_SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_GET
#define SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_SET BCM84834_SHDW_TEST1000Xr_BLOCK_TXEN_MODEf_SET
#define SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_GET BCM84834_SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_GET
#define SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_SET BCM84834_SHDW_TEST1000Xr_FORCE_TXFIFO_ONf_SET
#define SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_GET BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_GET
#define SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_SET BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_RECEIVEf_SET
#define SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_GET BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_GET
#define SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_SET BCM84834_SHDW_TEST1000Xr_BYPASS_PCS_TRANSMITf_SET
#define SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_GET BCM84834_SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_GET
#define SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_SET BCM84834_SHDW_TEST1000Xr_ZERO_COMMA_DET_PHASEf_SET
#define READ_SHDW_TEST1000Xr BCM84834_READ_SHDW_TEST1000Xr
#define WRITE_SHDW_TEST1000Xr BCM84834_WRITE_SHDW_TEST1000Xr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_TEST1000Xr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUTONEG1000XDEBUG
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     AutoNeg 1000-X Debug Register (ShadowRegister Selector = "1Ah")
 * SIZE:     32
 * FIELDS:
 *     SYNC_STATUS_FAILED 
 *     ERROR_STATE      
 *     ABIL_DETECT_STATE 
 *     ACK_DETECT_STATE 
 *     COMPLETE_ACK_STATE 
 *     IDLE_DETECT_STATE 
 *     LINK_WENT_DOWN_LOS 
 *     SYNC_STATUS_DETECTED 
 *     RUDI_INVALID     
 *     CONSISTENCY_MATCH 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUTONEG1000XDEBUGr (0x00001a1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUTONEG1000XDEBUG.
 *
 */
typedef union BCM84834_SHDW_AUTONEG1000XDEBUGr_s {
	uint32_t v[1];
	uint32_t shdw_autoneg1000xdebug[1];
	uint32_t _shdw_autoneg1000xdebug;
} BCM84834_SHDW_AUTONEG1000XDEBUGr_t;

#define BCM84834_SHDW_AUTONEG1000XDEBUGr_CLR(r) (r).shdw_autoneg1000xdebug[0] = 0
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SET(r,d) (r).shdw_autoneg1000xdebug[0] = d
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_GET(r) (r).shdw_autoneg1000xdebug[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 9) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 8) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 5) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 2) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_GET(r) ((((r).shdw_autoneg1000xdebug[0]) >> 1) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_GET(r) (((r).shdw_autoneg1000xdebug[0]) & 0x1)
#define BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_SET(r,f) (r).shdw_autoneg1000xdebug[0]=(((r).shdw_autoneg1000xdebug[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_AUTONEG1000XDEBUG.
 *
 */
#define BCM84834_READ_SHDW_AUTONEG1000XDEBUGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUTONEG1000XDEBUGr,(_r._shdw_autoneg1000xdebug))
#define BCM84834_WRITE_SHDW_AUTONEG1000XDEBUGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUTONEG1000XDEBUGr,(_r._shdw_autoneg1000xdebug))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUTONEG1000XDEBUGr BCM84834_SHDW_AUTONEG1000XDEBUGr
#define SHDW_AUTONEG1000XDEBUGr_SIZE BCM84834_SHDW_AUTONEG1000XDEBUGr_SIZE
typedef BCM84834_SHDW_AUTONEG1000XDEBUGr_t SHDW_AUTONEG1000XDEBUGr_t;
#define SHDW_AUTONEG1000XDEBUGr_CLR BCM84834_SHDW_AUTONEG1000XDEBUGr_CLR
#define SHDW_AUTONEG1000XDEBUGr_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_SET
#define SHDW_AUTONEG1000XDEBUGr_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_GET
#define SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_GET
#define SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_WRITE_ENABLEf_SET
#define SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_GET
#define SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_CONSISTENCY_MATCHf_SET
#define SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_GET
#define SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_RUDI_INVALIDf_SET
#define SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_GET
#define SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_DETECTEDf_SET
#define SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_GET
#define SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_LINK_WENT_DOWN_LOSf_SET
#define SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_GET
#define SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_IDLE_DETECT_STATEf_SET
#define SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_GET
#define SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_COMPLETE_ACK_STATEf_SET
#define SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_GET
#define SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_ACK_DETECT_STATEf_SET
#define SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_GET
#define SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_ABIL_DETECT_STATEf_SET
#define SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_GET
#define SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_ERROR_STATEf_SET
#define SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_GET BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_GET
#define SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_SET BCM84834_SHDW_AUTONEG1000XDEBUGr_SYNC_STATUS_FAILEDf_SET
#define READ_SHDW_AUTONEG1000XDEBUGr BCM84834_READ_SHDW_AUTONEG1000XDEBUGr
#define WRITE_SHDW_AUTONEG1000XDEBUGr BCM84834_WRITE_SHDW_AUTONEG1000XDEBUGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUTONEG1000XDEBUGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUX1000XCONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Auxiliary 1000-X Control Register (Shadow RegisterSelector = "1Bh")
 * SIZE:     32
 * FIELDS:
 *     DISABLE_CRC_CHECKER 
 *     FIFO_ELASTICITY_0 
 *     COMMA_DETECT_ENABLE 
 *     AUTONEG_ERR_TIMER_EN 
 *     DIS_REMOTE_FAULT_SENSE 
 *     DISABLE_TRRR     
 *     DISABLE_CARRIER_EXTEND 
 *     JAM_FAST_CARRIER_MODE 
 *     AUTONEG_FAST_TIMERS 
 *     USE_SERDES_COUNTERS 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUX1000XCONTROLr (0x00001b1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUX1000XCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUX1000XCONTROL.
 *
 */
typedef union BCM84834_SHDW_AUX1000XCONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_aux1000xcontrol[1];
	uint32_t _shdw_aux1000xcontrol;
} BCM84834_SHDW_AUX1000XCONTROLr_t;

#define BCM84834_SHDW_AUX1000XCONTROLr_CLR(r) (r).shdw_aux1000xcontrol[0] = 0
#define BCM84834_SHDW_AUX1000XCONTROLr_SET(r,d) (r).shdw_aux1000xcontrol[0] = d
#define BCM84834_SHDW_AUX1000XCONTROLr_GET(r) (r).shdw_aux1000xcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 2) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_GET(r) ((((r).shdw_aux1000xcontrol[0]) >> 1) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_GET(r) (((r).shdw_aux1000xcontrol[0]) & 0x1)
#define BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_SET(r,f) (r).shdw_aux1000xcontrol[0]=(((r).shdw_aux1000xcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_AUX1000XCONTROL.
 *
 */
#define BCM84834_READ_SHDW_AUX1000XCONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUX1000XCONTROLr,(_r._shdw_aux1000xcontrol))
#define BCM84834_WRITE_SHDW_AUX1000XCONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUX1000XCONTROLr,(_r._shdw_aux1000xcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUX1000XCONTROLr BCM84834_SHDW_AUX1000XCONTROLr
#define SHDW_AUX1000XCONTROLr_SIZE BCM84834_SHDW_AUX1000XCONTROLr_SIZE
typedef BCM84834_SHDW_AUX1000XCONTROLr_t SHDW_AUX1000XCONTROLr_t;
#define SHDW_AUX1000XCONTROLr_CLR BCM84834_SHDW_AUX1000XCONTROLr_CLR
#define SHDW_AUX1000XCONTROLr_SET BCM84834_SHDW_AUX1000XCONTROLr_SET
#define SHDW_AUX1000XCONTROLr_GET BCM84834_SHDW_AUX1000XCONTROLr_GET
#define SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_GET
#define SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_AUX1000XCONTROLr_WRITE_ENABLEf_SET
#define SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUX1000XCONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_GET BCM84834_SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_GET
#define SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_SET BCM84834_SHDW_AUX1000XCONTROLr_USE_SERDES_COUNTERSf_SET
#define SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_GET BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_GET
#define SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_SET BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_FAST_TIMERSf_SET
#define SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_GET BCM84834_SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_GET
#define SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_SET BCM84834_SHDW_AUX1000XCONTROLr_JAM_FAST_CARRIER_MODEf_SET
#define SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_GET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_GET
#define SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_SET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CARRIER_EXTENDf_SET
#define SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_GET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_GET
#define SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_SET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_TRRRf_SET
#define SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_GET BCM84834_SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_GET
#define SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_SET BCM84834_SHDW_AUX1000XCONTROLr_DIS_REMOTE_FAULT_SENSEf_SET
#define SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_GET BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_GET
#define SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_SET BCM84834_SHDW_AUX1000XCONTROLr_AUTONEG_ERR_TIMER_ENf_SET
#define SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_GET BCM84834_SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_GET
#define SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_SET BCM84834_SHDW_AUX1000XCONTROLr_COMMA_DETECT_ENABLEf_SET
#define SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_GET BCM84834_SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_GET
#define SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_SET BCM84834_SHDW_AUX1000XCONTROLr_FIFO_ELASTICITY_0f_SET
#define SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_GET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_GET
#define SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_SET BCM84834_SHDW_AUX1000XCONTROLr_DISABLE_CRC_CHECKERf_SET
#define READ_SHDW_AUX1000XCONTROLr BCM84834_READ_SHDW_AUX1000XCONTROLr
#define WRITE_SHDW_AUX1000XCONTROLr BCM84834_WRITE_SHDW_AUX1000XCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUX1000XCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUX1000XSTATUS
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Auxiliary 1000-X Status Register (Shadow RegisterSelector = "1Ch")
 * SIZE:     32
 * FIELDS:
 *     PAUSE_RES_XMIT_SIDE 
 *     PAUSE_RES_RCV_SIDE 
 *     SERDES_LINK      
 *     CUR_OPER_DUPLEX_MODE 
 *     AUTONEG_PAGE_RCVD 
 *     LINK_PART_REMOTE_FAULT 
 *     AUTONEG_RES_ERROR 
 *     SGMII_SEL_MISMATCH 
 *     LINK_STATUS_CHANGE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUX1000XSTATUSr (0x00001c1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUX1000XSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUX1000XSTATUS.
 *
 */
typedef union BCM84834_SHDW_AUX1000XSTATUSr_s {
	uint32_t v[1];
	uint32_t shdw_aux1000xstatus[1];
	uint32_t _shdw_aux1000xstatus;
} BCM84834_SHDW_AUX1000XSTATUSr_t;

#define BCM84834_SHDW_AUX1000XSTATUSr_CLR(r) (r).shdw_aux1000xstatus[0] = 0
#define BCM84834_SHDW_AUX1000XSTATUSr_SET(r,d) (r).shdw_aux1000xstatus[0] = d
#define BCM84834_SHDW_AUX1000XSTATUSr_GET(r) (r).shdw_aux1000xstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 9) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 8) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 5) & 0x3)
#define BCM84834_SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x3 << 5)) | ((((uint32_t)f) & 0x3) << 5))
#define BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUX1000XSTATUSr_SERDES_LINKf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 2) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_SERDES_LINKf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_GET(r) ((((r).shdw_aux1000xstatus[0]) >> 1) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_GET(r) (((r).shdw_aux1000xstatus[0]) & 0x1)
#define BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_SET(r,f) (r).shdw_aux1000xstatus[0]=(((r).shdw_aux1000xstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_AUX1000XSTATUS.
 *
 */
#define BCM84834_READ_SHDW_AUX1000XSTATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUX1000XSTATUSr,(_r._shdw_aux1000xstatus))
#define BCM84834_WRITE_SHDW_AUX1000XSTATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUX1000XSTATUSr,(_r._shdw_aux1000xstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUX1000XSTATUSr BCM84834_SHDW_AUX1000XSTATUSr
#define SHDW_AUX1000XSTATUSr_SIZE BCM84834_SHDW_AUX1000XSTATUSr_SIZE
typedef BCM84834_SHDW_AUX1000XSTATUSr_t SHDW_AUX1000XSTATUSr_t;
#define SHDW_AUX1000XSTATUSr_CLR BCM84834_SHDW_AUX1000XSTATUSr_CLR
#define SHDW_AUX1000XSTATUSr_SET BCM84834_SHDW_AUX1000XSTATUSr_SET
#define SHDW_AUX1000XSTATUSr_GET BCM84834_SHDW_AUX1000XSTATUSr_GET
#define SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_GET BCM84834_SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_GET
#define SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_SET BCM84834_SHDW_AUX1000XSTATUSr_WRITE_ENABLEf_SET
#define SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUX1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_GET BCM84834_SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_GET
#define SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_SET BCM84834_SHDW_AUX1000XSTATUSr_LINK_STATUS_CHANGEf_SET
#define SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_GET BCM84834_SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_GET
#define SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_SET BCM84834_SHDW_AUX1000XSTATUSr_SGMII_SEL_MISMATCHf_SET
#define SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_GET BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_GET
#define SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_SET BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_RES_ERRORf_SET
#define SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_GET BCM84834_SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_GET
#define SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_SET BCM84834_SHDW_AUX1000XSTATUSr_LINK_PART_REMOTE_FAULTf_SET
#define SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_GET BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_GET
#define SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_SET BCM84834_SHDW_AUX1000XSTATUSr_AUTONEG_PAGE_RCVDf_SET
#define SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_GET BCM84834_SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_GET
#define SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_SET BCM84834_SHDW_AUX1000XSTATUSr_CUR_OPER_DUPLEX_MODEf_SET
#define SHDW_AUX1000XSTATUSr_SERDES_LINKf_GET BCM84834_SHDW_AUX1000XSTATUSr_SERDES_LINKf_GET
#define SHDW_AUX1000XSTATUSr_SERDES_LINKf_SET BCM84834_SHDW_AUX1000XSTATUSr_SERDES_LINKf_SET
#define SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_GET BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_GET
#define SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_SET BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_RCV_SIDEf_SET
#define SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_GET BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_GET
#define SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_SET BCM84834_SHDW_AUX1000XSTATUSr_PAUSE_RES_XMIT_SIDEf_SET
#define READ_SHDW_AUX1000XSTATUSr BCM84834_READ_SHDW_AUX1000XSTATUSr
#define WRITE_SHDW_AUX1000XSTATUSr BCM84834_WRITE_SHDW_AUX1000XSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUX1000XSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MISC1000XSTATUS
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Misc 1000-X Status Register (Shadow RegisterSelector = "1Dh")
 * SIZE:     32
 * FIELDS:
 *     EARLY_END_EXTS_DETCTD 
 *     CARRIER_EXT_ERR_DETCTD 
 *     RCV_ERROR_DETECTED 
 *     XMIT_ERROR_DETECTED 
 *     CRC_ERROR_DETECTED 
 *     FALSE_CARRIER_JAM_RX 
 *     FALSE_CARRIER_JAM_TX 
 *     BAD_FIFO_POINTER 
 *     RXFIFO_ERROR     
 *     TXFIFO_ERROR     
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_MISC1000XSTATUSr (0x00001d1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MISC1000XSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MISC1000XSTATUS.
 *
 */
typedef union BCM84834_SHDW_MISC1000XSTATUSr_s {
	uint32_t v[1];
	uint32_t shdw_misc1000xstatus[1];
	uint32_t _shdw_misc1000xstatus;
} BCM84834_SHDW_MISC1000XSTATUSr_t;

#define BCM84834_SHDW_MISC1000XSTATUSr_CLR(r) (r).shdw_misc1000xstatus[0] = 0
#define BCM84834_SHDW_MISC1000XSTATUSr_SET(r,d) (r).shdw_misc1000xstatus[0] = d
#define BCM84834_SHDW_MISC1000XSTATUSr_GET(r) (r).shdw_misc1000xstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 2) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_GET(r) ((((r).shdw_misc1000xstatus[0]) >> 1) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_GET(r) (((r).shdw_misc1000xstatus[0]) & 0x1)
#define BCM84834_SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_SET(r,f) (r).shdw_misc1000xstatus[0]=(((r).shdw_misc1000xstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_MISC1000XSTATUS.
 *
 */
#define BCM84834_READ_SHDW_MISC1000XSTATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MISC1000XSTATUSr,(_r._shdw_misc1000xstatus))
#define BCM84834_WRITE_SHDW_MISC1000XSTATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MISC1000XSTATUSr,(_r._shdw_misc1000xstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MISC1000XSTATUSr BCM84834_SHDW_MISC1000XSTATUSr
#define SHDW_MISC1000XSTATUSr_SIZE BCM84834_SHDW_MISC1000XSTATUSr_SIZE
typedef BCM84834_SHDW_MISC1000XSTATUSr_t SHDW_MISC1000XSTATUSr_t;
#define SHDW_MISC1000XSTATUSr_CLR BCM84834_SHDW_MISC1000XSTATUSr_CLR
#define SHDW_MISC1000XSTATUSr_SET BCM84834_SHDW_MISC1000XSTATUSr_SET
#define SHDW_MISC1000XSTATUSr_GET BCM84834_SHDW_MISC1000XSTATUSr_GET
#define SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_GET BCM84834_SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_GET
#define SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_SET BCM84834_SHDW_MISC1000XSTATUSr_WRITE_ENABLEf_SET
#define SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_MISC1000XSTATUSr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_GET BCM84834_SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_GET
#define SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_SET BCM84834_SHDW_MISC1000XSTATUSr_TXFIFO_ERRORf_SET
#define SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_GET BCM84834_SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_GET
#define SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_SET BCM84834_SHDW_MISC1000XSTATUSr_RXFIFO_ERRORf_SET
#define SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_GET BCM84834_SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_GET
#define SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_SET BCM84834_SHDW_MISC1000XSTATUSr_BAD_FIFO_POINTERf_SET
#define SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_GET BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_GET
#define SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_SET BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_TXf_SET
#define SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_GET BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_GET
#define SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_SET BCM84834_SHDW_MISC1000XSTATUSr_FALSE_CARRIER_JAM_RXf_SET
#define SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_GET BCM84834_SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_GET
#define SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_SET BCM84834_SHDW_MISC1000XSTATUSr_CRC_ERROR_DETECTEDf_SET
#define SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_GET BCM84834_SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_GET
#define SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_SET BCM84834_SHDW_MISC1000XSTATUSr_XMIT_ERROR_DETECTEDf_SET
#define SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_GET BCM84834_SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_GET
#define SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_SET BCM84834_SHDW_MISC1000XSTATUSr_RCV_ERROR_DETECTEDf_SET
#define SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_GET BCM84834_SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_GET
#define SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_SET BCM84834_SHDW_MISC1000XSTATUSr_CARRIER_EXT_ERR_DETCTDf_SET
#define SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_GET BCM84834_SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_GET
#define SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_SET BCM84834_SHDW_MISC1000XSTATUSr_EARLY_END_EXTS_DETCTDf_SET
#define READ_SHDW_MISC1000XSTATUSr BCM84834_READ_SHDW_MISC1000XSTATUSr
#define WRITE_SHDW_MISC1000XSTATUSr BCM84834_WRITE_SHDW_MISC1000XSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MISC1000XSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_AUTODETECTMEDIUM
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Auto-Detect Medium Register (Shadow RegisterSelector = "1Eh")
 * SIZE:     32
 * FIELDS:
 *     DETECT_MED_ENABLE 
 *     DETECT_MED_PRIORITY 
 *     DETECT_MED_OVERRIDE 
 *     SIG_DETECT_EN_OVERRIDE 
 *     FIBER_AUTO_PWRDN_MODE 
 *     QUALIFY_FIBER_SD 
 *     FIBER_LED_MODE   
 *     FIBER_IN_USE_LED_MODE 
 *     INVERT_FIBER_SD_PIN 
 *     SECOND_SERDES_ADETECT 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_AUTODETECTMEDIUMr (0x00001e1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_AUTODETECTMEDIUMr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_AUTODETECTMEDIUM.
 *
 */
typedef union BCM84834_SHDW_AUTODETECTMEDIUMr_s {
	uint32_t v[1];
	uint32_t shdw_autodetectmedium[1];
	uint32_t _shdw_autodetectmedium;
} BCM84834_SHDW_AUTODETECTMEDIUMr_t;

#define BCM84834_SHDW_AUTODETECTMEDIUMr_CLR(r) (r).shdw_autodetectmedium[0] = 0
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SET(r,d) (r).shdw_autodetectmedium[0] = d
#define BCM84834_SHDW_AUTODETECTMEDIUMr_GET(r) (r).shdw_autodetectmedium[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 15) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 9) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 8) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 7) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 6) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 5) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 4) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 3) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 2) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_GET(r) ((((r).shdw_autodetectmedium[0]) >> 1) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_GET(r) (((r).shdw_autodetectmedium[0]) & 0x1)
#define BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_SET(r,f) (r).shdw_autodetectmedium[0]=(((r).shdw_autodetectmedium[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_AUTODETECTMEDIUM.
 *
 */
#define BCM84834_READ_SHDW_AUTODETECTMEDIUMr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_AUTODETECTMEDIUMr,(_r._shdw_autodetectmedium))
#define BCM84834_WRITE_SHDW_AUTODETECTMEDIUMr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_AUTODETECTMEDIUMr,(_r._shdw_autodetectmedium))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_AUTODETECTMEDIUMr BCM84834_SHDW_AUTODETECTMEDIUMr
#define SHDW_AUTODETECTMEDIUMr_SIZE BCM84834_SHDW_AUTODETECTMEDIUMr_SIZE
typedef BCM84834_SHDW_AUTODETECTMEDIUMr_t SHDW_AUTODETECTMEDIUMr_t;
#define SHDW_AUTODETECTMEDIUMr_CLR BCM84834_SHDW_AUTODETECTMEDIUMr_CLR
#define SHDW_AUTODETECTMEDIUMr_SET BCM84834_SHDW_AUTODETECTMEDIUMr_SET
#define SHDW_AUTODETECTMEDIUMr_GET BCM84834_SHDW_AUTODETECTMEDIUMr_GET
#define SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_GET
#define SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_WRITE_ENABLEf_SET
#define SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_GET
#define SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_SECOND_SERDES_ADETECTf_SET
#define SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_GET
#define SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_INVERT_FIBER_SD_PINf_SET
#define SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_GET
#define SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_IN_USE_LED_MODEf_SET
#define SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_GET
#define SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_LED_MODEf_SET
#define SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_GET
#define SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_QUALIFY_FIBER_SDf_SET
#define SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_GET
#define SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_FIBER_AUTO_PWRDN_MODEf_SET
#define SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_GET
#define SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_SIG_DETECT_EN_OVERRIDEf_SET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_GET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_OVERRIDEf_SET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_GET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_PRIORITYf_SET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_GET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_GET
#define SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_SET BCM84834_SHDW_AUTODETECTMEDIUMr_DETECT_MED_ENABLEf_SET
#define READ_SHDW_AUTODETECTMEDIUMr BCM84834_READ_SHDW_AUTODETECTMEDIUMr
#define WRITE_SHDW_AUTODETECTMEDIUMr BCM84834_WRITE_SHDW_AUTODETECTMEDIUMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_AUTODETECTMEDIUMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  SHDW_MODECONTROL
 * BLOCKS:   SHDW_1CH
 * REGADDR:  0x001c
 * DEVAD:    7
 * DESC:     Mode Control Register (Shadow Register Selector = "1Fh")
 * SIZE:     32
 * FIELDS:
 *     ENABLE_1000X_REGS 
 *     MODE_SELECT      
 *     SERDES_CAPABLE   
 *     FIBER_SIGNAL_DETECT 
 *     COPPER_ENERGY_DETECT 
 *     SERDES_LINK      
 *     COPPER_LINK      
 *     MODE_SELECT_CHANGE 
 *     DUAL_SERDES_CAPABLE 
 *     SHADOW_REGISTER_SELECT 
 *     WRITE_ENABLE     
 *
 ******************************************************************************/
#define BCM84834_SHDW_MODECONTROLr (0x00001f1c | PHY_REG_ACC_BRCM_XE | PHY_REG_ACC_BRCM_XE_SHADOW)

#define BCM84834_SHDW_MODECONTROLr_SIZE 4

/*
 * This structure should be used to declare and program SHDW_MODECONTROL.
 *
 */
typedef union BCM84834_SHDW_MODECONTROLr_s {
	uint32_t v[1];
	uint32_t shdw_modecontrol[1];
	uint32_t _shdw_modecontrol;
} BCM84834_SHDW_MODECONTROLr_t;

#define BCM84834_SHDW_MODECONTROLr_CLR(r) (r).shdw_modecontrol[0] = 0
#define BCM84834_SHDW_MODECONTROLr_SET(r,d) (r).shdw_modecontrol[0] = d
#define BCM84834_SHDW_MODECONTROLr_GET(r) (r).shdw_modecontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_SHDW_MODECONTROLr_WRITE_ENABLEf_GET(r) ((((r).shdw_modecontrol[0]) >> 15) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_WRITE_ENABLEf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_GET(r) ((((r).shdw_modecontrol[0]) >> 10) & 0x1f)
#define BCM84834_SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCM84834_SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_GET(r) ((((r).shdw_modecontrol[0]) >> 9) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_GET(r) ((((r).shdw_modecontrol[0]) >> 8) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_SHDW_MODECONTROLr_COPPER_LINKf_GET(r) ((((r).shdw_modecontrol[0]) >> 7) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_COPPER_LINKf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_SHDW_MODECONTROLr_SERDES_LINKf_GET(r) ((((r).shdw_modecontrol[0]) >> 6) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_SERDES_LINKf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_GET(r) ((((r).shdw_modecontrol[0]) >> 5) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_GET(r) ((((r).shdw_modecontrol[0]) >> 4) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_SHDW_MODECONTROLr_SERDES_CAPABLEf_GET(r) ((((r).shdw_modecontrol[0]) >> 3) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_SERDES_CAPABLEf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_SHDW_MODECONTROLr_MODE_SELECTf_GET(r) ((((r).shdw_modecontrol[0]) >> 1) & 0x3)
#define BCM84834_SHDW_MODECONTROLr_MODE_SELECTf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCM84834_SHDW_MODECONTROLr_ENABLE_1000X_REGSf_GET(r) (((r).shdw_modecontrol[0]) & 0x1)
#define BCM84834_SHDW_MODECONTROLr_ENABLE_1000X_REGSf_SET(r,f) (r).shdw_modecontrol[0]=(((r).shdw_modecontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access SHDW_MODECONTROL.
 *
 */
#define BCM84834_READ_SHDW_MODECONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_SHDW_MODECONTROLr,(_r._shdw_modecontrol))
#define BCM84834_WRITE_SHDW_MODECONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_SHDW_MODECONTROLr,(_r._shdw_modecontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SHDW_MODECONTROLr BCM84834_SHDW_MODECONTROLr
#define SHDW_MODECONTROLr_SIZE BCM84834_SHDW_MODECONTROLr_SIZE
typedef BCM84834_SHDW_MODECONTROLr_t SHDW_MODECONTROLr_t;
#define SHDW_MODECONTROLr_CLR BCM84834_SHDW_MODECONTROLr_CLR
#define SHDW_MODECONTROLr_SET BCM84834_SHDW_MODECONTROLr_SET
#define SHDW_MODECONTROLr_GET BCM84834_SHDW_MODECONTROLr_GET
#define SHDW_MODECONTROLr_WRITE_ENABLEf_GET BCM84834_SHDW_MODECONTROLr_WRITE_ENABLEf_GET
#define SHDW_MODECONTROLr_WRITE_ENABLEf_SET BCM84834_SHDW_MODECONTROLr_WRITE_ENABLEf_SET
#define SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_GET BCM84834_SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_GET
#define SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_SET BCM84834_SHDW_MODECONTROLr_SHADOW_REGISTER_SELECTf_SET
#define SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_GET BCM84834_SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_GET
#define SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_SET BCM84834_SHDW_MODECONTROLr_DUAL_SERDES_CAPABLEf_SET
#define SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_GET BCM84834_SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_GET
#define SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_SET BCM84834_SHDW_MODECONTROLr_MODE_SELECT_CHANGEf_SET
#define SHDW_MODECONTROLr_COPPER_LINKf_GET BCM84834_SHDW_MODECONTROLr_COPPER_LINKf_GET
#define SHDW_MODECONTROLr_COPPER_LINKf_SET BCM84834_SHDW_MODECONTROLr_COPPER_LINKf_SET
#define SHDW_MODECONTROLr_SERDES_LINKf_GET BCM84834_SHDW_MODECONTROLr_SERDES_LINKf_GET
#define SHDW_MODECONTROLr_SERDES_LINKf_SET BCM84834_SHDW_MODECONTROLr_SERDES_LINKf_SET
#define SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_GET BCM84834_SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_GET
#define SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_SET BCM84834_SHDW_MODECONTROLr_COPPER_ENERGY_DETECTf_SET
#define SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_GET BCM84834_SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_GET
#define SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_SET BCM84834_SHDW_MODECONTROLr_FIBER_SIGNAL_DETECTf_SET
#define SHDW_MODECONTROLr_SERDES_CAPABLEf_GET BCM84834_SHDW_MODECONTROLr_SERDES_CAPABLEf_GET
#define SHDW_MODECONTROLr_SERDES_CAPABLEf_SET BCM84834_SHDW_MODECONTROLr_SERDES_CAPABLEf_SET
#define SHDW_MODECONTROLr_MODE_SELECTf_GET BCM84834_SHDW_MODECONTROLr_MODE_SELECTf_GET
#define SHDW_MODECONTROLr_MODE_SELECTf_SET BCM84834_SHDW_MODECONTROLr_MODE_SELECTf_SET
#define SHDW_MODECONTROLr_ENABLE_1000X_REGSf_GET BCM84834_SHDW_MODECONTROLr_ENABLE_1000X_REGSf_GET
#define SHDW_MODECONTROLr_ENABLE_1000X_REGSf_SET BCM84834_SHDW_MODECONTROLr_ENABLE_1000X_REGSf_SET
#define READ_SHDW_MODECONTROLr BCM84834_READ_SHDW_MODECONTROLr
#define WRITE_SHDW_MODECONTROLr BCM84834_WRITE_SHDW_MODECONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_SHDW_MODECONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_X10GBASET_AUTONEGCTRL
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0020
 * DEVAD:    7
 * DESC:     10GBaseT_AutoNegCtrl Register
 * SIZE:     32
 * FIELDS:
 *     LD_LOOP_TIMING_ABIL 
 *     LDPMA_TRAINING_RESET_REQUEST 
 *     X10GBASE_T_ABIL  
 *
 ******************************************************************************/
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr (0x00070020 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_SIZE 4

/*
 * This structure should be used to declare and program AN_X10GBASET_AUTONEGCTRL.
 *
 */
typedef union BCM84834_AN_X10GBASET_AUTONEGCTRLr_s {
	uint32_t v[1];
	uint32_t an_x10gbaset_autonegctrl[1];
	uint32_t _an_x10gbaset_autonegctrl;
} BCM84834_AN_X10GBASET_AUTONEGCTRLr_t;

#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_CLR(r) (r).an_x10gbaset_autonegctrl[0] = 0
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_SET(r,d) (r).an_x10gbaset_autonegctrl[0] = d
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_GET(r) (r).an_x10gbaset_autonegctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_GET(r) ((((r).an_x10gbaset_autonegctrl[0]) >> 12) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_SET(r,f) (r).an_x10gbaset_autonegctrl[0]=(((r).an_x10gbaset_autonegctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_GET(r) ((((r).an_x10gbaset_autonegctrl[0]) >> 2) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_SET(r,f) (r).an_x10gbaset_autonegctrl[0]=(((r).an_x10gbaset_autonegctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_GET(r) (((r).an_x10gbaset_autonegctrl[0]) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_SET(r,f) (r).an_x10gbaset_autonegctrl[0]=(((r).an_x10gbaset_autonegctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AN_X10GBASET_AUTONEGCTRL.
 *
 */
#define BCM84834_READ_AN_X10GBASET_AUTONEGCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_X10GBASET_AUTONEGCTRLr,(_r._an_x10gbaset_autonegctrl))
#define BCM84834_WRITE_AN_X10GBASET_AUTONEGCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_X10GBASET_AUTONEGCTRLr,(_r._an_x10gbaset_autonegctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X10GBASET_AUTONEGCTRLr BCM84834_AN_X10GBASET_AUTONEGCTRLr
#define AN_X10GBASET_AUTONEGCTRLr_SIZE BCM84834_AN_X10GBASET_AUTONEGCTRLr_SIZE
typedef BCM84834_AN_X10GBASET_AUTONEGCTRLr_t AN_X10GBASET_AUTONEGCTRLr_t;
#define AN_X10GBASET_AUTONEGCTRLr_CLR BCM84834_AN_X10GBASET_AUTONEGCTRLr_CLR
#define AN_X10GBASET_AUTONEGCTRLr_SET BCM84834_AN_X10GBASET_AUTONEGCTRLr_SET
#define AN_X10GBASET_AUTONEGCTRLr_GET BCM84834_AN_X10GBASET_AUTONEGCTRLr_GET
#define AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_GET BCM84834_AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_GET
#define AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_SET BCM84834_AN_X10GBASET_AUTONEGCTRLr_X10GBASE_T_ABILf_SET
#define AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_GET BCM84834_AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_GET
#define AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_SET BCM84834_AN_X10GBASET_AUTONEGCTRLr_LDPMA_TRAINING_RESET_REQUESTf_SET
#define AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_GET BCM84834_AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_GET
#define AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_SET BCM84834_AN_X10GBASET_AUTONEGCTRLr_LD_LOOP_TIMING_ABILf_SET
#define READ_AN_X10GBASET_AUTONEGCTRLr BCM84834_READ_AN_X10GBASET_AUTONEGCTRLr
#define WRITE_AN_X10GBASET_AUTONEGCTRLr BCM84834_WRITE_AN_X10GBASET_AUTONEGCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_X10GBASET_AUTONEGCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  AN_X10GBASET_AUTONEGSTAT
 * BLOCKS:   IEEE_CL28
 * REGADDR:  0x0021
 * DEVAD:    7
 * DESC:     10GBaseT_AutoNegStat Register
 * SIZE:     32
 * FIELDS:
 *     LP_PMA_TRAINING_RESET_REQ 
 *     LP_LOOP_TIMING_ABIL 
 *     LP_10GBASE_T_CAP 
 *     REMOTE_RX_STAT   
 *     LOCAL_RX_STAT    
 *     MASTER_SLAVE_CONFIG_RES 
 *     MASTER_SLAVE_CONFIG_FAULT 
 *
 ******************************************************************************/
#define BCM84834_AN_X10GBASET_AUTONEGSTATr (0x00070021 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_AN_X10GBASET_AUTONEGSTATr_SIZE 4

/*
 * This structure should be used to declare and program AN_X10GBASET_AUTONEGSTAT.
 *
 */
typedef union BCM84834_AN_X10GBASET_AUTONEGSTATr_s {
	uint32_t v[1];
	uint32_t an_x10gbaset_autonegstat[1];
	uint32_t _an_x10gbaset_autonegstat;
} BCM84834_AN_X10GBASET_AUTONEGSTATr_t;

#define BCM84834_AN_X10GBASET_AUTONEGSTATr_CLR(r) (r).an_x10gbaset_autonegstat[0] = 0
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_SET(r,d) (r).an_x10gbaset_autonegstat[0] = d
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_GET(r) (r).an_x10gbaset_autonegstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 15) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 14) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 13) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 12) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 11) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 10) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_GET(r) ((((r).an_x10gbaset_autonegstat[0]) >> 9) & 0x1)
#define BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_SET(r,f) (r).an_x10gbaset_autonegstat[0]=(((r).an_x10gbaset_autonegstat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*
 * These macros can be used to access AN_X10GBASET_AUTONEGSTAT.
 *
 */
#define BCM84834_READ_AN_X10GBASET_AUTONEGSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_AN_X10GBASET_AUTONEGSTATr,(_r._an_x10gbaset_autonegstat))
#define BCM84834_WRITE_AN_X10GBASET_AUTONEGSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_AN_X10GBASET_AUTONEGSTATr,(_r._an_x10gbaset_autonegstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_X10GBASET_AUTONEGSTATr BCM84834_AN_X10GBASET_AUTONEGSTATr
#define AN_X10GBASET_AUTONEGSTATr_SIZE BCM84834_AN_X10GBASET_AUTONEGSTATr_SIZE
typedef BCM84834_AN_X10GBASET_AUTONEGSTATr_t AN_X10GBASET_AUTONEGSTATr_t;
#define AN_X10GBASET_AUTONEGSTATr_CLR BCM84834_AN_X10GBASET_AUTONEGSTATr_CLR
#define AN_X10GBASET_AUTONEGSTATr_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_SET
#define AN_X10GBASET_AUTONEGSTATr_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_GET
#define AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_GET
#define AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_FAULTf_SET
#define AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_GET
#define AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_MASTER_SLAVE_CONFIG_RESf_SET
#define AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_GET
#define AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_LOCAL_RX_STATf_SET
#define AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_GET
#define AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_REMOTE_RX_STATf_SET
#define AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_GET
#define AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_10GBASE_T_CAPf_SET
#define AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_GET
#define AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_LOOP_TIMING_ABILf_SET
#define AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_GET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_GET
#define AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_SET BCM84834_AN_X10GBASET_AUTONEGSTATr_LP_PMA_TRAINING_RESET_REQf_SET
#define READ_AN_X10GBASET_AUTONEGSTATr BCM84834_READ_AN_X10GBASET_AUTONEGSTATr
#define WRITE_AN_X10GBASET_AUTONEGSTATr BCM84834_WRITE_AN_X10GBASET_AUTONEGSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_AN_X10GBASET_AUTONEGSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_MII_CTRL
 * BLOCKS:   IEEE
 * REGADDR:  0xffe0
 * DEVAD:    7
 * DESC:     MII Control Register
 * SIZE:     32
 * FIELDS:
 *     SPEED_SELECT_MSB 
 *     COLLISION_TEST   
 *     DUPLEX_MODE      
 *     RESTART_AUTONEG  
 *     ISOLATE          
 *     POWER_DOWN       
 *     AUTONEG_ENABLE   
 *     SPEED_SELECT_LSB 
 *     LOOPBACK         
 *     RESET            
 *
 ******************************************************************************/
#define BCM84834_COMBO_MII_CTRLr (0x0007ffe0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_MII_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_MII_CTRL.
 *
 */
typedef union BCM84834_COMBO_MII_CTRLr_s {
	uint32_t v[1];
	uint32_t combo_mii_ctrl[1];
	uint32_t _combo_mii_ctrl;
} BCM84834_COMBO_MII_CTRLr_t;

#define BCM84834_COMBO_MII_CTRLr_CLR(r) (r).combo_mii_ctrl[0] = 0
#define BCM84834_COMBO_MII_CTRLr_SET(r,d) (r).combo_mii_ctrl[0] = d
#define BCM84834_COMBO_MII_CTRLr_GET(r) (r).combo_mii_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_MII_CTRLr_RESETf_GET(r) ((((r).combo_mii_ctrl[0]) >> 15) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_RESETf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_MII_CTRLr_LOOPBACKf_GET(r) ((((r).combo_mii_ctrl[0]) >> 14) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_LOOPBACKf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_LSBf_GET(r) ((((r).combo_mii_ctrl[0]) >> 13) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_LSBf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_MII_CTRLr_AUTONEG_ENABLEf_GET(r) ((((r).combo_mii_ctrl[0]) >> 12) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_AUTONEG_ENABLEf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_MII_CTRLr_POWER_DOWNf_GET(r) ((((r).combo_mii_ctrl[0]) >> 11) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_POWER_DOWNf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_MII_CTRLr_ISOLATEf_GET(r) ((((r).combo_mii_ctrl[0]) >> 10) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_ISOLATEf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_MII_CTRLr_RESTART_AUTONEGf_GET(r) ((((r).combo_mii_ctrl[0]) >> 9) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_RESTART_AUTONEGf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_MII_CTRLr_DUPLEX_MODEf_GET(r) ((((r).combo_mii_ctrl[0]) >> 8) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_DUPLEX_MODEf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_MII_CTRLr_COLLISION_TESTf_GET(r) ((((r).combo_mii_ctrl[0]) >> 7) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_COLLISION_TESTf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_MSBf_GET(r) ((((r).combo_mii_ctrl[0]) >> 6) & 0x1)
#define BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_MSBf_SET(r,f) (r).combo_mii_ctrl[0]=(((r).combo_mii_ctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))

/*
 * These macros can be used to access COMBO_MII_CTRL.
 *
 */
#define BCM84834_READ_COMBO_MII_CTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_MII_CTRLr,(_r._combo_mii_ctrl))
#define BCM84834_WRITE_COMBO_MII_CTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_MII_CTRLr,(_r._combo_mii_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_MII_CTRLr BCM84834_COMBO_MII_CTRLr
#define COMBO_MII_CTRLr_SIZE BCM84834_COMBO_MII_CTRLr_SIZE
typedef BCM84834_COMBO_MII_CTRLr_t COMBO_MII_CTRLr_t;
#define COMBO_MII_CTRLr_CLR BCM84834_COMBO_MII_CTRLr_CLR
#define COMBO_MII_CTRLr_SET BCM84834_COMBO_MII_CTRLr_SET
#define COMBO_MII_CTRLr_GET BCM84834_COMBO_MII_CTRLr_GET
#define COMBO_MII_CTRLr_RESETf_GET BCM84834_COMBO_MII_CTRLr_RESETf_GET
#define COMBO_MII_CTRLr_RESETf_SET BCM84834_COMBO_MII_CTRLr_RESETf_SET
#define COMBO_MII_CTRLr_LOOPBACKf_GET BCM84834_COMBO_MII_CTRLr_LOOPBACKf_GET
#define COMBO_MII_CTRLr_LOOPBACKf_SET BCM84834_COMBO_MII_CTRLr_LOOPBACKf_SET
#define COMBO_MII_CTRLr_SPEED_SELECT_LSBf_GET BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_LSBf_GET
#define COMBO_MII_CTRLr_SPEED_SELECT_LSBf_SET BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_LSBf_SET
#define COMBO_MII_CTRLr_AUTONEG_ENABLEf_GET BCM84834_COMBO_MII_CTRLr_AUTONEG_ENABLEf_GET
#define COMBO_MII_CTRLr_AUTONEG_ENABLEf_SET BCM84834_COMBO_MII_CTRLr_AUTONEG_ENABLEf_SET
#define COMBO_MII_CTRLr_POWER_DOWNf_GET BCM84834_COMBO_MII_CTRLr_POWER_DOWNf_GET
#define COMBO_MII_CTRLr_POWER_DOWNf_SET BCM84834_COMBO_MII_CTRLr_POWER_DOWNf_SET
#define COMBO_MII_CTRLr_ISOLATEf_GET BCM84834_COMBO_MII_CTRLr_ISOLATEf_GET
#define COMBO_MII_CTRLr_ISOLATEf_SET BCM84834_COMBO_MII_CTRLr_ISOLATEf_SET
#define COMBO_MII_CTRLr_RESTART_AUTONEGf_GET BCM84834_COMBO_MII_CTRLr_RESTART_AUTONEGf_GET
#define COMBO_MII_CTRLr_RESTART_AUTONEGf_SET BCM84834_COMBO_MII_CTRLr_RESTART_AUTONEGf_SET
#define COMBO_MII_CTRLr_DUPLEX_MODEf_GET BCM84834_COMBO_MII_CTRLr_DUPLEX_MODEf_GET
#define COMBO_MII_CTRLr_DUPLEX_MODEf_SET BCM84834_COMBO_MII_CTRLr_DUPLEX_MODEf_SET
#define COMBO_MII_CTRLr_COLLISION_TESTf_GET BCM84834_COMBO_MII_CTRLr_COLLISION_TESTf_GET
#define COMBO_MII_CTRLr_COLLISION_TESTf_SET BCM84834_COMBO_MII_CTRLr_COLLISION_TESTf_SET
#define COMBO_MII_CTRLr_SPEED_SELECT_MSBf_GET BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_MSBf_GET
#define COMBO_MII_CTRLr_SPEED_SELECT_MSBf_SET BCM84834_COMBO_MII_CTRLr_SPEED_SELECT_MSBf_SET
#define READ_COMBO_MII_CTRLr BCM84834_READ_COMBO_MII_CTRLr
#define WRITE_COMBO_MII_CTRLr BCM84834_WRITE_COMBO_MII_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_MII_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_MII_STAT
 * BLOCKS:   IEEE
 * REGADDR:  0xffe1
 * DEVAD:    7
 * DESC:     MII Status Register
 * SIZE:     32
 * FIELDS:
 *     EXTENDED_CAP     
 *     JABBER_DETECT    
 *     LINK_STATUS      
 *     AUTONEG_ABIL     
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     MF_PREAMBLE_SUPPRESSION 
 *     EXTENDED_STATUS  
 *     X100BASE_T2_HALF_DUPLEX_CAP 
 *     X100BASE_T2_FULL_DUPLEX_CAP 
 *     X10BASE_T_HALF_DUPLEX_CAP 
 *     X10BASE_T_FULL_DUPLEX_CAP 
 *     X100BASE_X_HALF_DUPLEX_CAP 
 *     X100BASE_X_FULL_DUPLEX_CAP 
 *     X100BASE_T4_CAP  
 *
 ******************************************************************************/
#define BCM84834_COMBO_MII_STATr (0x0007ffe1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_MII_STATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_MII_STAT.
 *
 */
typedef union BCM84834_COMBO_MII_STATr_s {
	uint32_t v[1];
	uint32_t combo_mii_stat[1];
	uint32_t _combo_mii_stat;
} BCM84834_COMBO_MII_STATr_t;

#define BCM84834_COMBO_MII_STATr_CLR(r) (r).combo_mii_stat[0] = 0
#define BCM84834_COMBO_MII_STATr_SET(r,d) (r).combo_mii_stat[0] = d
#define BCM84834_COMBO_MII_STATr_GET(r) (r).combo_mii_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_MII_STATr_X100BASE_T4_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_MII_STATr_X100BASE_T4_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 11) & 0x1)
#define BCM84834_COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 10) & 0x1)
#define BCM84834_COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_GET(r) ((((r).combo_mii_stat[0]) >> 9) & 0x1)
#define BCM84834_COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_MII_STATr_EXTENDED_STATUSf_GET(r) ((((r).combo_mii_stat[0]) >> 8) & 0x1)
#define BCM84834_COMBO_MII_STATr_EXTENDED_STATUSf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_GET(r) ((((r).combo_mii_stat[0]) >> 6) & 0x1)
#define BCM84834_COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_MII_STATr_AUTONEG_COMPLETEf_GET(r) ((((r).combo_mii_stat[0]) >> 5) & 0x1)
#define BCM84834_COMBO_MII_STATr_AUTONEG_COMPLETEf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_MII_STATr_REMOTE_FAULTf_GET(r) ((((r).combo_mii_stat[0]) >> 4) & 0x1)
#define BCM84834_COMBO_MII_STATr_REMOTE_FAULTf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_MII_STATr_AUTONEG_ABILf_GET(r) ((((r).combo_mii_stat[0]) >> 3) & 0x1)
#define BCM84834_COMBO_MII_STATr_AUTONEG_ABILf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_MII_STATr_LINK_STATUSf_GET(r) ((((r).combo_mii_stat[0]) >> 2) & 0x1)
#define BCM84834_COMBO_MII_STATr_LINK_STATUSf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_MII_STATr_JABBER_DETECTf_GET(r) ((((r).combo_mii_stat[0]) >> 1) & 0x1)
#define BCM84834_COMBO_MII_STATr_JABBER_DETECTf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_MII_STATr_EXTENDED_CAPf_GET(r) (((r).combo_mii_stat[0]) & 0x1)
#define BCM84834_COMBO_MII_STATr_EXTENDED_CAPf_SET(r,f) (r).combo_mii_stat[0]=(((r).combo_mii_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_MII_STAT.
 *
 */
#define BCM84834_READ_COMBO_MII_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_MII_STATr,(_r._combo_mii_stat))
#define BCM84834_WRITE_COMBO_MII_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_MII_STATr,(_r._combo_mii_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_MII_STATr BCM84834_COMBO_MII_STATr
#define COMBO_MII_STATr_SIZE BCM84834_COMBO_MII_STATr_SIZE
typedef BCM84834_COMBO_MII_STATr_t COMBO_MII_STATr_t;
#define COMBO_MII_STATr_CLR BCM84834_COMBO_MII_STATr_CLR
#define COMBO_MII_STATr_SET BCM84834_COMBO_MII_STATr_SET
#define COMBO_MII_STATr_GET BCM84834_COMBO_MII_STATr_GET
#define COMBO_MII_STATr_X100BASE_T4_CAPf_GET BCM84834_COMBO_MII_STATr_X100BASE_T4_CAPf_GET
#define COMBO_MII_STATr_X100BASE_T4_CAPf_SET BCM84834_COMBO_MII_STATr_X100BASE_T4_CAPf_SET
#define COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X100BASE_X_FULL_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X100BASE_X_HALF_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X10BASE_T_FULL_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X10BASE_T_HALF_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X100BASE_T2_FULL_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_GET BCM84834_COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_GET
#define COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_SET BCM84834_COMBO_MII_STATr_X100BASE_T2_HALF_DUPLEX_CAPf_SET
#define COMBO_MII_STATr_EXTENDED_STATUSf_GET BCM84834_COMBO_MII_STATr_EXTENDED_STATUSf_GET
#define COMBO_MII_STATr_EXTENDED_STATUSf_SET BCM84834_COMBO_MII_STATr_EXTENDED_STATUSf_SET
#define COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_GET BCM84834_COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_GET
#define COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_SET BCM84834_COMBO_MII_STATr_MF_PREAMBLE_SUPPRESSIONf_SET
#define COMBO_MII_STATr_AUTONEG_COMPLETEf_GET BCM84834_COMBO_MII_STATr_AUTONEG_COMPLETEf_GET
#define COMBO_MII_STATr_AUTONEG_COMPLETEf_SET BCM84834_COMBO_MII_STATr_AUTONEG_COMPLETEf_SET
#define COMBO_MII_STATr_REMOTE_FAULTf_GET BCM84834_COMBO_MII_STATr_REMOTE_FAULTf_GET
#define COMBO_MII_STATr_REMOTE_FAULTf_SET BCM84834_COMBO_MII_STATr_REMOTE_FAULTf_SET
#define COMBO_MII_STATr_AUTONEG_ABILf_GET BCM84834_COMBO_MII_STATr_AUTONEG_ABILf_GET
#define COMBO_MII_STATr_AUTONEG_ABILf_SET BCM84834_COMBO_MII_STATr_AUTONEG_ABILf_SET
#define COMBO_MII_STATr_LINK_STATUSf_GET BCM84834_COMBO_MII_STATr_LINK_STATUSf_GET
#define COMBO_MII_STATr_LINK_STATUSf_SET BCM84834_COMBO_MII_STATr_LINK_STATUSf_SET
#define COMBO_MII_STATr_JABBER_DETECTf_GET BCM84834_COMBO_MII_STATr_JABBER_DETECTf_GET
#define COMBO_MII_STATr_JABBER_DETECTf_SET BCM84834_COMBO_MII_STATr_JABBER_DETECTf_SET
#define COMBO_MII_STATr_EXTENDED_CAPf_GET BCM84834_COMBO_MII_STATr_EXTENDED_CAPf_GET
#define COMBO_MII_STATr_EXTENDED_CAPf_SET BCM84834_COMBO_MII_STATr_EXTENDED_CAPf_SET
#define READ_COMBO_MII_STATr BCM84834_READ_COMBO_MII_STATr
#define WRITE_COMBO_MII_STATr BCM84834_WRITE_COMBO_MII_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_MII_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_PHY_ID0
 * BLOCKS:   IEEE
 * REGADDR:  0xffe2
 * DEVAD:    7
 * DESC:     PHY ID MSB Register
 * SIZE:     32
 * FIELDS:
 *     OUI              
 *
 ******************************************************************************/
#define BCM84834_COMBO_PHY_ID0r (0x0007ffe2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_PHY_ID0r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_PHY_ID0.
 *
 */
typedef union BCM84834_COMBO_PHY_ID0r_s {
	uint32_t v[1];
	uint32_t combo_phy_id0[1];
	uint32_t _combo_phy_id0;
} BCM84834_COMBO_PHY_ID0r_t;

#define BCM84834_COMBO_PHY_ID0r_CLR(r) (r).combo_phy_id0[0] = 0
#define BCM84834_COMBO_PHY_ID0r_SET(r,d) (r).combo_phy_id0[0] = d
#define BCM84834_COMBO_PHY_ID0r_GET(r) (r).combo_phy_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_PHY_ID0r_OUIf_GET(r) (((r).combo_phy_id0[0]) & 0xffff)
#define BCM84834_COMBO_PHY_ID0r_OUIf_SET(r,f) (r).combo_phy_id0[0]=(((r).combo_phy_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access COMBO_PHY_ID0.
 *
 */
#define BCM84834_READ_COMBO_PHY_ID0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_PHY_ID0r,(_r._combo_phy_id0))
#define BCM84834_WRITE_COMBO_PHY_ID0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_PHY_ID0r,(_r._combo_phy_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_PHY_ID0r BCM84834_COMBO_PHY_ID0r
#define COMBO_PHY_ID0r_SIZE BCM84834_COMBO_PHY_ID0r_SIZE
typedef BCM84834_COMBO_PHY_ID0r_t COMBO_PHY_ID0r_t;
#define COMBO_PHY_ID0r_CLR BCM84834_COMBO_PHY_ID0r_CLR
#define COMBO_PHY_ID0r_SET BCM84834_COMBO_PHY_ID0r_SET
#define COMBO_PHY_ID0r_GET BCM84834_COMBO_PHY_ID0r_GET
#define COMBO_PHY_ID0r_OUIf_GET BCM84834_COMBO_PHY_ID0r_OUIf_GET
#define COMBO_PHY_ID0r_OUIf_SET BCM84834_COMBO_PHY_ID0r_OUIf_SET
#define READ_COMBO_PHY_ID0r BCM84834_READ_COMBO_PHY_ID0r
#define WRITE_COMBO_PHY_ID0r BCM84834_WRITE_COMBO_PHY_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_PHY_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_PHY_ID1
 * BLOCKS:   IEEE
 * REGADDR:  0xffe3
 * DEVAD:    7
 * DESC:     PHY ID LSB Register
 * SIZE:     32
 * FIELDS:
 *     REVISION         
 *     MODEL            
 *     OUI              
 *
 ******************************************************************************/
#define BCM84834_COMBO_PHY_ID1r (0x0007ffe3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_PHY_ID1r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_PHY_ID1.
 *
 */
typedef union BCM84834_COMBO_PHY_ID1r_s {
	uint32_t v[1];
	uint32_t combo_phy_id1[1];
	uint32_t _combo_phy_id1;
} BCM84834_COMBO_PHY_ID1r_t;

#define BCM84834_COMBO_PHY_ID1r_CLR(r) (r).combo_phy_id1[0] = 0
#define BCM84834_COMBO_PHY_ID1r_SET(r,d) (r).combo_phy_id1[0] = d
#define BCM84834_COMBO_PHY_ID1r_GET(r) (r).combo_phy_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_PHY_ID1r_OUIf_GET(r) ((((r).combo_phy_id1[0]) >> 10) & 0x3f)
#define BCM84834_COMBO_PHY_ID1r_OUIf_SET(r,f) (r).combo_phy_id1[0]=(((r).combo_phy_id1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCM84834_COMBO_PHY_ID1r_MODELf_GET(r) ((((r).combo_phy_id1[0]) >> 4) & 0x3f)
#define BCM84834_COMBO_PHY_ID1r_MODELf_SET(r,f) (r).combo_phy_id1[0]=(((r).combo_phy_id1[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))
#define BCM84834_COMBO_PHY_ID1r_REVISIONf_GET(r) (((r).combo_phy_id1[0]) & 0xf)
#define BCM84834_COMBO_PHY_ID1r_REVISIONf_SET(r,f) (r).combo_phy_id1[0]=(((r).combo_phy_id1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access COMBO_PHY_ID1.
 *
 */
#define BCM84834_READ_COMBO_PHY_ID1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_PHY_ID1r,(_r._combo_phy_id1))
#define BCM84834_WRITE_COMBO_PHY_ID1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_PHY_ID1r,(_r._combo_phy_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_PHY_ID1r BCM84834_COMBO_PHY_ID1r
#define COMBO_PHY_ID1r_SIZE BCM84834_COMBO_PHY_ID1r_SIZE
typedef BCM84834_COMBO_PHY_ID1r_t COMBO_PHY_ID1r_t;
#define COMBO_PHY_ID1r_CLR BCM84834_COMBO_PHY_ID1r_CLR
#define COMBO_PHY_ID1r_SET BCM84834_COMBO_PHY_ID1r_SET
#define COMBO_PHY_ID1r_GET BCM84834_COMBO_PHY_ID1r_GET
#define COMBO_PHY_ID1r_OUIf_GET BCM84834_COMBO_PHY_ID1r_OUIf_GET
#define COMBO_PHY_ID1r_OUIf_SET BCM84834_COMBO_PHY_ID1r_OUIf_SET
#define COMBO_PHY_ID1r_MODELf_GET BCM84834_COMBO_PHY_ID1r_MODELf_GET
#define COMBO_PHY_ID1r_MODELf_SET BCM84834_COMBO_PHY_ID1r_MODELf_SET
#define COMBO_PHY_ID1r_REVISIONf_GET BCM84834_COMBO_PHY_ID1r_REVISIONf_GET
#define COMBO_PHY_ID1r_REVISIONf_SET BCM84834_COMBO_PHY_ID1r_REVISIONf_SET
#define READ_COMBO_PHY_ID1r BCM84834_READ_COMBO_PHY_ID1r
#define WRITE_COMBO_PHY_ID1r BCM84834_WRITE_COMBO_PHY_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_PHY_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUTONEGADV
 * BLOCKS:   IEEE
 * REGADDR:  0xffe4
 * DEVAD:    7
 * DESC:     Auto-negotiation Advertisement Register
 * SIZE:     32
 * FIELDS:
 *     PROTOCOL_SELECTOR 
 *     X10BASE_T_HALF_DUP_CAP 
 *     X10BASE_T_FULL_DUP_CAP 
 *     X100BASE_TX_HALF_DUP_CAP 
 *     X100BASE_TX_FULL_DUP_CAP 
 *     X100BASE_T4_CAPABLE 
 *     PAUSE_CAPABLE    
 *     ASYMMETRIC_PAUSE 
 *     EXTENDED_NXT_PAGE_ABIL 
 *     REMOTE_FAULT     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUTONEGADVr (0x0007ffe4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUTONEGADV.
 *
 */
typedef union BCM84834_COMBO_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t combo_autonegadv[1];
	uint32_t _combo_autonegadv;
} BCM84834_COMBO_AUTONEGADVr_t;

#define BCM84834_COMBO_AUTONEGADVr_CLR(r) (r).combo_autonegadv[0] = 0
#define BCM84834_COMBO_AUTONEGADVr_SET(r,d) (r).combo_autonegadv[0] = d
#define BCM84834_COMBO_AUTONEGADVr_GET(r) (r).combo_autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).combo_autonegadv[0]) >> 15) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).combo_autonegadv[0]) >> 13) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_GET(r) ((((r).combo_autonegadv[0]) >> 12) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_GET(r) ((((r).combo_autonegadv[0]) >> 11) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_AUTONEGADVr_PAUSE_CAPABLEf_GET(r) ((((r).combo_autonegadv[0]) >> 10) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_PAUSE_CAPABLEf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_GET(r) ((((r).combo_autonegadv[0]) >> 9) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_GET(r) ((((r).combo_autonegadv[0]) >> 8) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_GET(r) ((((r).combo_autonegadv[0]) >> 7) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_GET(r) ((((r).combo_autonegadv[0]) >> 6) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_GET(r) ((((r).combo_autonegadv[0]) >> 5) & 0x1)
#define BCM84834_COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_GET(r) (((r).combo_autonegadv[0]) & 0x1f)
#define BCM84834_COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_SET(r,f) (r).combo_autonegadv[0]=(((r).combo_autonegadv[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access COMBO_AUTONEGADV.
 *
 */
#define BCM84834_READ_COMBO_AUTONEGADVr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUTONEGADVr,(_r._combo_autonegadv))
#define BCM84834_WRITE_COMBO_AUTONEGADVr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUTONEGADVr,(_r._combo_autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUTONEGADVr BCM84834_COMBO_AUTONEGADVr
#define COMBO_AUTONEGADVr_SIZE BCM84834_COMBO_AUTONEGADVr_SIZE
typedef BCM84834_COMBO_AUTONEGADVr_t COMBO_AUTONEGADVr_t;
#define COMBO_AUTONEGADVr_CLR BCM84834_COMBO_AUTONEGADVr_CLR
#define COMBO_AUTONEGADVr_SET BCM84834_COMBO_AUTONEGADVr_SET
#define COMBO_AUTONEGADVr_GET BCM84834_COMBO_AUTONEGADVr_GET
#define COMBO_AUTONEGADVr_NEXT_PAGEf_GET BCM84834_COMBO_AUTONEGADVr_NEXT_PAGEf_GET
#define COMBO_AUTONEGADVr_NEXT_PAGEf_SET BCM84834_COMBO_AUTONEGADVr_NEXT_PAGEf_SET
#define COMBO_AUTONEGADVr_REMOTE_FAULTf_GET BCM84834_COMBO_AUTONEGADVr_REMOTE_FAULTf_GET
#define COMBO_AUTONEGADVr_REMOTE_FAULTf_SET BCM84834_COMBO_AUTONEGADVr_REMOTE_FAULTf_SET
#define COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_GET BCM84834_COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_GET
#define COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_SET BCM84834_COMBO_AUTONEGADVr_EXTENDED_NXT_PAGE_ABILf_SET
#define COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_GET BCM84834_COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_GET
#define COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_SET BCM84834_COMBO_AUTONEGADVr_ASYMMETRIC_PAUSEf_SET
#define COMBO_AUTONEGADVr_PAUSE_CAPABLEf_GET BCM84834_COMBO_AUTONEGADVr_PAUSE_CAPABLEf_GET
#define COMBO_AUTONEGADVr_PAUSE_CAPABLEf_SET BCM84834_COMBO_AUTONEGADVr_PAUSE_CAPABLEf_SET
#define COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_GET BCM84834_COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_GET
#define COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_SET BCM84834_COMBO_AUTONEGADVr_X100BASE_T4_CAPABLEf_SET
#define COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_GET BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_GET
#define COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_SET BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_FULL_DUP_CAPf_SET
#define COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_GET BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_GET
#define COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_SET BCM84834_COMBO_AUTONEGADVr_X100BASE_TX_HALF_DUP_CAPf_SET
#define COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_GET BCM84834_COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_GET
#define COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_SET BCM84834_COMBO_AUTONEGADVr_X10BASE_T_FULL_DUP_CAPf_SET
#define COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_GET BCM84834_COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_GET
#define COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_SET BCM84834_COMBO_AUTONEGADVr_X10BASE_T_HALF_DUP_CAPf_SET
#define COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_GET BCM84834_COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_GET
#define COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_SET BCM84834_COMBO_AUTONEGADVr_PROTOCOL_SELECTORf_SET
#define READ_COMBO_AUTONEGADVr BCM84834_READ_COMBO_AUTONEGADVr
#define WRITE_COMBO_AUTONEGADVr BCM84834_WRITE_COMBO_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUTONEGLPABIL
 * BLOCKS:   IEEE
 * REGADDR:  0xffe5
 * DEVAD:    7
 * DESC:     Auto-negotiation Link Partner Ability 1Register
 * SIZE:     32
 * FIELDS:
 *     PROTOCOL_SELECTOR 
 *     X10BASE_T_HALF_DUP_CAP 
 *     X10BASE_T_FULL_DUP_CAP 
 *     X100BASE_TX_HALF_DUP_CAP 
 *     X100BASE_TX_FULL_DUP_CAP 
 *     X100BASE_T4_CAP  
 *     PAUSE_CAPABLE    
 *     LINK_PRTNR_ASYM_PAUSE 
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUTONEGLPABILr (0x0007ffe5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUTONEGLPABILr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUTONEGLPABIL.
 *
 */
typedef union BCM84834_COMBO_AUTONEGLPABILr_s {
	uint32_t v[1];
	uint32_t combo_autoneglpabil[1];
	uint32_t _combo_autoneglpabil;
} BCM84834_COMBO_AUTONEGLPABILr_t;

#define BCM84834_COMBO_AUTONEGLPABILr_CLR(r) (r).combo_autoneglpabil[0] = 0
#define BCM84834_COMBO_AUTONEGLPABILr_SET(r,d) (r).combo_autoneglpabil[0] = d
#define BCM84834_COMBO_AUTONEGLPABILr_GET(r) (r).combo_autoneglpabil[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUTONEGLPABILr_NEXT_PAGEf_GET(r) ((((r).combo_autoneglpabil[0]) >> 15) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_NEXT_PAGEf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_GET(r) ((((r).combo_autoneglpabil[0]) >> 14) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_AUTONEGLPABILr_REMOTE_FAULTf_GET(r) ((((r).combo_autoneglpabil[0]) >> 13) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_REMOTE_FAULTf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_GET(r) ((((r).combo_autoneglpabil[0]) >> 11) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_GET(r) ((((r).combo_autoneglpabil[0]) >> 10) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_GET(r) ((((r).combo_autoneglpabil[0]) >> 9) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_GET(r) ((((r).combo_autoneglpabil[0]) >> 8) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_GET(r) ((((r).combo_autoneglpabil[0]) >> 7) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_GET(r) ((((r).combo_autoneglpabil[0]) >> 6) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_GET(r) ((((r).combo_autoneglpabil[0]) >> 5) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_GET(r) (((r).combo_autoneglpabil[0]) & 0x1f)
#define BCM84834_COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_SET(r,f) (r).combo_autoneglpabil[0]=(((r).combo_autoneglpabil[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access COMBO_AUTONEGLPABIL.
 *
 */
#define BCM84834_READ_COMBO_AUTONEGLPABILr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUTONEGLPABILr,(_r._combo_autoneglpabil))
#define BCM84834_WRITE_COMBO_AUTONEGLPABILr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUTONEGLPABILr,(_r._combo_autoneglpabil))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUTONEGLPABILr BCM84834_COMBO_AUTONEGLPABILr
#define COMBO_AUTONEGLPABILr_SIZE BCM84834_COMBO_AUTONEGLPABILr_SIZE
typedef BCM84834_COMBO_AUTONEGLPABILr_t COMBO_AUTONEGLPABILr_t;
#define COMBO_AUTONEGLPABILr_CLR BCM84834_COMBO_AUTONEGLPABILr_CLR
#define COMBO_AUTONEGLPABILr_SET BCM84834_COMBO_AUTONEGLPABILr_SET
#define COMBO_AUTONEGLPABILr_GET BCM84834_COMBO_AUTONEGLPABILr_GET
#define COMBO_AUTONEGLPABILr_NEXT_PAGEf_GET BCM84834_COMBO_AUTONEGLPABILr_NEXT_PAGEf_GET
#define COMBO_AUTONEGLPABILr_NEXT_PAGEf_SET BCM84834_COMBO_AUTONEGLPABILr_NEXT_PAGEf_SET
#define COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_GET BCM84834_COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_GET
#define COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_SET BCM84834_COMBO_AUTONEGLPABILr_ACKNOWLEDGEf_SET
#define COMBO_AUTONEGLPABILr_REMOTE_FAULTf_GET BCM84834_COMBO_AUTONEGLPABILr_REMOTE_FAULTf_GET
#define COMBO_AUTONEGLPABILr_REMOTE_FAULTf_SET BCM84834_COMBO_AUTONEGLPABILr_REMOTE_FAULTf_SET
#define COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_GET BCM84834_COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_GET
#define COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_SET BCM84834_COMBO_AUTONEGLPABILr_LINK_PRTNR_ASYM_PAUSEf_SET
#define COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_GET BCM84834_COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_GET
#define COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_SET BCM84834_COMBO_AUTONEGLPABILr_PAUSE_CAPABLEf_SET
#define COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_GET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_GET
#define COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_SET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_T4_CAPf_SET
#define COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_GET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_GET
#define COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_SET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_FULL_DUP_CAPf_SET
#define COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_GET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_GET
#define COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_SET BCM84834_COMBO_AUTONEGLPABILr_X100BASE_TX_HALF_DUP_CAPf_SET
#define COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_GET BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_GET
#define COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_SET BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_FULL_DUP_CAPf_SET
#define COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_GET BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_GET
#define COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_SET BCM84834_COMBO_AUTONEGLPABILr_X10BASE_T_HALF_DUP_CAPf_SET
#define COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_GET BCM84834_COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_GET
#define COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_SET BCM84834_COMBO_AUTONEGLPABILr_PROTOCOL_SELECTORf_SET
#define READ_COMBO_AUTONEGLPABILr BCM84834_READ_COMBO_AUTONEGLPABILr
#define WRITE_COMBO_AUTONEGLPABILr BCM84834_WRITE_COMBO_AUTONEGLPABILr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUTONEGLPABILr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUTONEGEXP
 * BLOCKS:   IEEE
 * REGADDR:  0xffe6
 * DEVAD:    7
 * DESC:     Auto-negotiation Expansion Register
 * SIZE:     32
 * FIELDS:
 *     LNK_PART_AN_ABLE 
 *     PG_RECEIVED      
 *     NXT_PG_ABLE      
 *     LNK_PART_NXT_PG_ABLE 
 *     PARALLEL_DETECTION_FLT 
 *     NXT_PG_RCV_LOCATION 
 *     NXT_PG_RCV_LOC_ABLE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUTONEGEXPr (0x0007ffe6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUTONEGEXPr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUTONEGEXP.
 *
 */
typedef union BCM84834_COMBO_AUTONEGEXPr_s {
	uint32_t v[1];
	uint32_t combo_autonegexp[1];
	uint32_t _combo_autonegexp;
} BCM84834_COMBO_AUTONEGEXPr_t;

#define BCM84834_COMBO_AUTONEGEXPr_CLR(r) (r).combo_autonegexp[0] = 0
#define BCM84834_COMBO_AUTONEGEXPr_SET(r,d) (r).combo_autonegexp[0] = d
#define BCM84834_COMBO_AUTONEGEXPr_GET(r) (r).combo_autonegexp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_GET(r) ((((r).combo_autonegexp[0]) >> 6) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_GET(r) ((((r).combo_autonegexp[0]) >> 5) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_GET(r) ((((r).combo_autonegexp[0]) >> 4) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_GET(r) ((((r).combo_autonegexp[0]) >> 3) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_ABLEf_GET(r) ((((r).combo_autonegexp[0]) >> 2) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_NXT_PG_ABLEf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_AUTONEGEXPr_PG_RECEIVEDf_GET(r) ((((r).combo_autonegexp[0]) >> 1) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_PG_RECEIVEDf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_GET(r) (((r).combo_autonegexp[0]) & 0x1)
#define BCM84834_COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_SET(r,f) (r).combo_autonegexp[0]=(((r).combo_autonegexp[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_AUTONEGEXP.
 *
 */
#define BCM84834_READ_COMBO_AUTONEGEXPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUTONEGEXPr,(_r._combo_autonegexp))
#define BCM84834_WRITE_COMBO_AUTONEGEXPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUTONEGEXPr,(_r._combo_autonegexp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUTONEGEXPr BCM84834_COMBO_AUTONEGEXPr
#define COMBO_AUTONEGEXPr_SIZE BCM84834_COMBO_AUTONEGEXPr_SIZE
typedef BCM84834_COMBO_AUTONEGEXPr_t COMBO_AUTONEGEXPr_t;
#define COMBO_AUTONEGEXPr_CLR BCM84834_COMBO_AUTONEGEXPr_CLR
#define COMBO_AUTONEGEXPr_SET BCM84834_COMBO_AUTONEGEXPr_SET
#define COMBO_AUTONEGEXPr_GET BCM84834_COMBO_AUTONEGEXPr_GET
#define COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_GET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_GET
#define COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_SET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOC_ABLEf_SET
#define COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_GET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_GET
#define COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_SET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_RCV_LOCATIONf_SET
#define COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_GET BCM84834_COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_GET
#define COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_SET BCM84834_COMBO_AUTONEGEXPr_PARALLEL_DETECTION_FLTf_SET
#define COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_GET BCM84834_COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_GET
#define COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_SET BCM84834_COMBO_AUTONEGEXPr_LNK_PART_NXT_PG_ABLEf_SET
#define COMBO_AUTONEGEXPr_NXT_PG_ABLEf_GET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_ABLEf_GET
#define COMBO_AUTONEGEXPr_NXT_PG_ABLEf_SET BCM84834_COMBO_AUTONEGEXPr_NXT_PG_ABLEf_SET
#define COMBO_AUTONEGEXPr_PG_RECEIVEDf_GET BCM84834_COMBO_AUTONEGEXPr_PG_RECEIVEDf_GET
#define COMBO_AUTONEGEXPr_PG_RECEIVEDf_SET BCM84834_COMBO_AUTONEGEXPr_PG_RECEIVEDf_SET
#define COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_GET BCM84834_COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_GET
#define COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_SET BCM84834_COMBO_AUTONEGEXPr_LNK_PART_AN_ABLEf_SET
#define READ_COMBO_AUTONEGEXPr BCM84834_READ_COMBO_AUTONEGEXPr
#define WRITE_COMBO_AUTONEGEXPr BCM84834_WRITE_COMBO_AUTONEGEXPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUTONEGEXPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUTONEGNP
 * BLOCKS:   IEEE
 * REGADDR:  0xffe7
 * DEVAD:    7
 * DESC:     Auto-negotiation Next Page Register
 * SIZE:     32
 * FIELDS:
 *     CODE_FIELD       
 *     TOGGLE           
 *     ACKNOWLEDGE_2    
 *     MESSAGE_PAGE     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUTONEGNPr (0x0007ffe7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUTONEGNPr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUTONEGNP.
 *
 */
typedef union BCM84834_COMBO_AUTONEGNPr_s {
	uint32_t v[1];
	uint32_t combo_autonegnp[1];
	uint32_t _combo_autonegnp;
} BCM84834_COMBO_AUTONEGNPr_t;

#define BCM84834_COMBO_AUTONEGNPr_CLR(r) (r).combo_autonegnp[0] = 0
#define BCM84834_COMBO_AUTONEGNPr_SET(r,d) (r).combo_autonegnp[0] = d
#define BCM84834_COMBO_AUTONEGNPr_GET(r) (r).combo_autonegnp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUTONEGNPr_NEXT_PAGEf_GET(r) ((((r).combo_autonegnp[0]) >> 15) & 0x1)
#define BCM84834_COMBO_AUTONEGNPr_NEXT_PAGEf_SET(r,f) (r).combo_autonegnp[0]=(((r).combo_autonegnp[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_AUTONEGNPr_MESSAGE_PAGEf_GET(r) ((((r).combo_autonegnp[0]) >> 13) & 0x1)
#define BCM84834_COMBO_AUTONEGNPr_MESSAGE_PAGEf_SET(r,f) (r).combo_autonegnp[0]=(((r).combo_autonegnp[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_GET(r) ((((r).combo_autonegnp[0]) >> 12) & 0x1)
#define BCM84834_COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_SET(r,f) (r).combo_autonegnp[0]=(((r).combo_autonegnp[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_AUTONEGNPr_TOGGLEf_GET(r) ((((r).combo_autonegnp[0]) >> 11) & 0x1)
#define BCM84834_COMBO_AUTONEGNPr_TOGGLEf_SET(r,f) (r).combo_autonegnp[0]=(((r).combo_autonegnp[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_AUTONEGNPr_CODE_FIELDf_GET(r) (((r).combo_autonegnp[0]) & 0x7ff)
#define BCM84834_COMBO_AUTONEGNPr_CODE_FIELDf_SET(r,f) (r).combo_autonegnp[0]=(((r).combo_autonegnp[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access COMBO_AUTONEGNP.
 *
 */
#define BCM84834_READ_COMBO_AUTONEGNPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUTONEGNPr,(_r._combo_autonegnp))
#define BCM84834_WRITE_COMBO_AUTONEGNPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUTONEGNPr,(_r._combo_autonegnp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUTONEGNPr BCM84834_COMBO_AUTONEGNPr
#define COMBO_AUTONEGNPr_SIZE BCM84834_COMBO_AUTONEGNPr_SIZE
typedef BCM84834_COMBO_AUTONEGNPr_t COMBO_AUTONEGNPr_t;
#define COMBO_AUTONEGNPr_CLR BCM84834_COMBO_AUTONEGNPr_CLR
#define COMBO_AUTONEGNPr_SET BCM84834_COMBO_AUTONEGNPr_SET
#define COMBO_AUTONEGNPr_GET BCM84834_COMBO_AUTONEGNPr_GET
#define COMBO_AUTONEGNPr_NEXT_PAGEf_GET BCM84834_COMBO_AUTONEGNPr_NEXT_PAGEf_GET
#define COMBO_AUTONEGNPr_NEXT_PAGEf_SET BCM84834_COMBO_AUTONEGNPr_NEXT_PAGEf_SET
#define COMBO_AUTONEGNPr_MESSAGE_PAGEf_GET BCM84834_COMBO_AUTONEGNPr_MESSAGE_PAGEf_GET
#define COMBO_AUTONEGNPr_MESSAGE_PAGEf_SET BCM84834_COMBO_AUTONEGNPr_MESSAGE_PAGEf_SET
#define COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_GET BCM84834_COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_GET
#define COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_SET BCM84834_COMBO_AUTONEGNPr_ACKNOWLEDGE_2f_SET
#define COMBO_AUTONEGNPr_TOGGLEf_GET BCM84834_COMBO_AUTONEGNPr_TOGGLEf_GET
#define COMBO_AUTONEGNPr_TOGGLEf_SET BCM84834_COMBO_AUTONEGNPr_TOGGLEf_SET
#define COMBO_AUTONEGNPr_CODE_FIELDf_GET BCM84834_COMBO_AUTONEGNPr_CODE_FIELDf_GET
#define COMBO_AUTONEGNPr_CODE_FIELDf_SET BCM84834_COMBO_AUTONEGNPr_CODE_FIELDf_SET
#define READ_COMBO_AUTONEGNPr BCM84834_READ_COMBO_AUTONEGNPr
#define WRITE_COMBO_AUTONEGNPr BCM84834_WRITE_COMBO_AUTONEGNPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUTONEGNPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUTONEGLPABIL2
 * BLOCKS:   IEEE
 * REGADDR:  0xffe8
 * DEVAD:    7
 * DESC:     Auto-negotiation Link Partner Ability 2Register
 * SIZE:     32
 * FIELDS:
 *     CODE_FIELD       
 *     TOGGLE           
 *     ACKNOWLEDGE_2    
 *     MESSAGE_PAGE     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUTONEGLPABIL2r (0x0007ffe8 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUTONEGLPABIL2r_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUTONEGLPABIL2.
 *
 */
typedef union BCM84834_COMBO_AUTONEGLPABIL2r_s {
	uint32_t v[1];
	uint32_t combo_autoneglpabil2[1];
	uint32_t _combo_autoneglpabil2;
} BCM84834_COMBO_AUTONEGLPABIL2r_t;

#define BCM84834_COMBO_AUTONEGLPABIL2r_CLR(r) (r).combo_autoneglpabil2[0] = 0
#define BCM84834_COMBO_AUTONEGLPABIL2r_SET(r,d) (r).combo_autoneglpabil2[0] = d
#define BCM84834_COMBO_AUTONEGLPABIL2r_GET(r) (r).combo_autoneglpabil2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_GET(r) ((((r).combo_autoneglpabil2[0]) >> 15) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_GET(r) ((((r).combo_autoneglpabil2[0]) >> 14) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET(r) ((((r).combo_autoneglpabil2[0]) >> 13) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_GET(r) ((((r).combo_autoneglpabil2[0]) >> 12) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_AUTONEGLPABIL2r_TOGGLEf_GET(r) ((((r).combo_autoneglpabil2[0]) >> 11) & 0x1)
#define BCM84834_COMBO_AUTONEGLPABIL2r_TOGGLEf_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_AUTONEGLPABIL2r_CODE_FIELDf_GET(r) (((r).combo_autoneglpabil2[0]) & 0x7ff)
#define BCM84834_COMBO_AUTONEGLPABIL2r_CODE_FIELDf_SET(r,f) (r).combo_autoneglpabil2[0]=(((r).combo_autoneglpabil2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access COMBO_AUTONEGLPABIL2.
 *
 */
#define BCM84834_READ_COMBO_AUTONEGLPABIL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUTONEGLPABIL2r,(_r._combo_autoneglpabil2))
#define BCM84834_WRITE_COMBO_AUTONEGLPABIL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUTONEGLPABIL2r,(_r._combo_autoneglpabil2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUTONEGLPABIL2r BCM84834_COMBO_AUTONEGLPABIL2r
#define COMBO_AUTONEGLPABIL2r_SIZE BCM84834_COMBO_AUTONEGLPABIL2r_SIZE
typedef BCM84834_COMBO_AUTONEGLPABIL2r_t COMBO_AUTONEGLPABIL2r_t;
#define COMBO_AUTONEGLPABIL2r_CLR BCM84834_COMBO_AUTONEGLPABIL2r_CLR
#define COMBO_AUTONEGLPABIL2r_SET BCM84834_COMBO_AUTONEGLPABIL2r_SET
#define COMBO_AUTONEGLPABIL2r_GET BCM84834_COMBO_AUTONEGLPABIL2r_GET
#define COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_GET BCM84834_COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_GET
#define COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_SET BCM84834_COMBO_AUTONEGLPABIL2r_NEXT_PAGEf_SET
#define COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_GET BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_GET
#define COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_SET BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGEf_SET
#define COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET BCM84834_COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_GET
#define COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET BCM84834_COMBO_AUTONEGLPABIL2r_MESSAGE_PAGEf_SET
#define COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_GET BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_GET
#define COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_SET BCM84834_COMBO_AUTONEGLPABIL2r_ACKNOWLEDGE_2f_SET
#define COMBO_AUTONEGLPABIL2r_TOGGLEf_GET BCM84834_COMBO_AUTONEGLPABIL2r_TOGGLEf_GET
#define COMBO_AUTONEGLPABIL2r_TOGGLEf_SET BCM84834_COMBO_AUTONEGLPABIL2r_TOGGLEf_SET
#define COMBO_AUTONEGLPABIL2r_CODE_FIELDf_GET BCM84834_COMBO_AUTONEGLPABIL2r_CODE_FIELDf_GET
#define COMBO_AUTONEGLPABIL2r_CODE_FIELDf_SET BCM84834_COMBO_AUTONEGLPABIL2r_CODE_FIELDf_SET
#define READ_COMBO_AUTONEGLPABIL2r BCM84834_READ_COMBO_AUTONEGLPABIL2r
#define WRITE_COMBO_AUTONEGLPABIL2r BCM84834_WRITE_COMBO_AUTONEGLPABIL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUTONEGLPABIL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_X1000BTCTRL
 * BLOCKS:   IEEE
 * REGADDR:  0xffe9
 * DEVAD:    7
 * DESC:     1000Base-T Control Register
 * SIZE:     32
 * FIELDS:
 *     ADV_1000BASE_T_HALF_DUPLEX 
 *     ADV_1000BASE_T_FULL_DUPLEX 
 *     REPEATER_DTE     
 *     MASTER_SLAVE_CONFIG_VALUE 
 *     MASTER_SLAVE_CONFIG_ENABLE 
 *     TEST_MODE        
 *
 ******************************************************************************/
#define BCM84834_COMBO_X1000BTCTRLr (0x0007ffe9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_X1000BTCTRLr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_X1000BTCTRL.
 *
 */
typedef union BCM84834_COMBO_X1000BTCTRLr_s {
	uint32_t v[1];
	uint32_t combo_x1000btctrl[1];
	uint32_t _combo_x1000btctrl;
} BCM84834_COMBO_X1000BTCTRLr_t;

#define BCM84834_COMBO_X1000BTCTRLr_CLR(r) (r).combo_x1000btctrl[0] = 0
#define BCM84834_COMBO_X1000BTCTRLr_SET(r,d) (r).combo_x1000btctrl[0] = d
#define BCM84834_COMBO_X1000BTCTRLr_GET(r) (r).combo_x1000btctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_X1000BTCTRLr_TEST_MODEf_GET(r) ((((r).combo_x1000btctrl[0]) >> 13) & 0x7)
#define BCM84834_COMBO_X1000BTCTRLr_TEST_MODEf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_GET(r) ((((r).combo_x1000btctrl[0]) >> 12) & 0x1)
#define BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_GET(r) ((((r).combo_x1000btctrl[0]) >> 11) & 0x1)
#define BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_X1000BTCTRLr_REPEATER_DTEf_GET(r) ((((r).combo_x1000btctrl[0]) >> 10) & 0x1)
#define BCM84834_COMBO_X1000BTCTRLr_REPEATER_DTEf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_GET(r) ((((r).combo_x1000btctrl[0]) >> 9) & 0x1)
#define BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_GET(r) ((((r).combo_x1000btctrl[0]) >> 8) & 0x1)
#define BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_SET(r,f) (r).combo_x1000btctrl[0]=(((r).combo_x1000btctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*
 * These macros can be used to access COMBO_X1000BTCTRL.
 *
 */
#define BCM84834_READ_COMBO_X1000BTCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_X1000BTCTRLr,(_r._combo_x1000btctrl))
#define BCM84834_WRITE_COMBO_X1000BTCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_X1000BTCTRLr,(_r._combo_x1000btctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_X1000BTCTRLr BCM84834_COMBO_X1000BTCTRLr
#define COMBO_X1000BTCTRLr_SIZE BCM84834_COMBO_X1000BTCTRLr_SIZE
typedef BCM84834_COMBO_X1000BTCTRLr_t COMBO_X1000BTCTRLr_t;
#define COMBO_X1000BTCTRLr_CLR BCM84834_COMBO_X1000BTCTRLr_CLR
#define COMBO_X1000BTCTRLr_SET BCM84834_COMBO_X1000BTCTRLr_SET
#define COMBO_X1000BTCTRLr_GET BCM84834_COMBO_X1000BTCTRLr_GET
#define COMBO_X1000BTCTRLr_TEST_MODEf_GET BCM84834_COMBO_X1000BTCTRLr_TEST_MODEf_GET
#define COMBO_X1000BTCTRLr_TEST_MODEf_SET BCM84834_COMBO_X1000BTCTRLr_TEST_MODEf_SET
#define COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_GET BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_GET
#define COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_SET BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_ENABLEf_SET
#define COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_GET BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_GET
#define COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_SET BCM84834_COMBO_X1000BTCTRLr_MASTER_SLAVE_CONFIG_VALUEf_SET
#define COMBO_X1000BTCTRLr_REPEATER_DTEf_GET BCM84834_COMBO_X1000BTCTRLr_REPEATER_DTEf_GET
#define COMBO_X1000BTCTRLr_REPEATER_DTEf_SET BCM84834_COMBO_X1000BTCTRLr_REPEATER_DTEf_SET
#define COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_GET BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_GET
#define COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_SET BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_FULL_DUPLEXf_SET
#define COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_GET BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_GET
#define COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_SET BCM84834_COMBO_X1000BTCTRLr_ADV_1000BASE_T_HALF_DUPLEXf_SET
#define READ_COMBO_X1000BTCTRLr BCM84834_READ_COMBO_X1000BTCTRLr
#define WRITE_COMBO_X1000BTCTRLr BCM84834_WRITE_COMBO_X1000BTCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_X1000BTCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_X1000BTSTAT
 * BLOCKS:   IEEE
 * REGADDR:  0xffea
 * DEVAD:    7
 * DESC:     1000Base-T Status Register
 * SIZE:     32
 * FIELDS:
 *     IDLE_ERROR_COUNT 
 *     LNK_PART_HALF_DUP_ABLE 
 *     LNK_PART_FULL_DUP_ABLE 
 *     REMOTE_RECEIVER_STATUS 
 *     LOCAL_RECEIVER_STATUS 
 *     MASTER_SLAVE_CONF_RES 
 *     MASTER_SLAVE_CONF_FLT 
 *
 ******************************************************************************/
#define BCM84834_COMBO_X1000BTSTATr (0x0007ffea | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_X1000BTSTATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_X1000BTSTAT.
 *
 */
typedef union BCM84834_COMBO_X1000BTSTATr_s {
	uint32_t v[1];
	uint32_t combo_x1000btstat[1];
	uint32_t _combo_x1000btstat;
} BCM84834_COMBO_X1000BTSTATr_t;

#define BCM84834_COMBO_X1000BTSTATr_CLR(r) (r).combo_x1000btstat[0] = 0
#define BCM84834_COMBO_X1000BTSTATr_SET(r,d) (r).combo_x1000btstat[0] = d
#define BCM84834_COMBO_X1000BTSTATr_GET(r) (r).combo_x1000btstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_GET(r) ((((r).combo_x1000btstat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_GET(r) ((((r).combo_x1000btstat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_GET(r) ((((r).combo_x1000btstat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_GET(r) ((((r).combo_x1000btstat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_GET(r) ((((r).combo_x1000btstat[0]) >> 11) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_GET(r) ((((r).combo_x1000btstat[0]) >> 10) & 0x1)
#define BCM84834_COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_GET(r) (((r).combo_x1000btstat[0]) & 0xff)
#define BCM84834_COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_SET(r,f) (r).combo_x1000btstat[0]=(((r).combo_x1000btstat[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access COMBO_X1000BTSTAT.
 *
 */
#define BCM84834_READ_COMBO_X1000BTSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_X1000BTSTATr,(_r._combo_x1000btstat))
#define BCM84834_WRITE_COMBO_X1000BTSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_X1000BTSTATr,(_r._combo_x1000btstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_X1000BTSTATr BCM84834_COMBO_X1000BTSTATr
#define COMBO_X1000BTSTATr_SIZE BCM84834_COMBO_X1000BTSTATr_SIZE
typedef BCM84834_COMBO_X1000BTSTATr_t COMBO_X1000BTSTATr_t;
#define COMBO_X1000BTSTATr_CLR BCM84834_COMBO_X1000BTSTATr_CLR
#define COMBO_X1000BTSTATr_SET BCM84834_COMBO_X1000BTSTATr_SET
#define COMBO_X1000BTSTATr_GET BCM84834_COMBO_X1000BTSTATr_GET
#define COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_GET BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_GET
#define COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_SET BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_FLTf_SET
#define COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_GET BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_GET
#define COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_SET BCM84834_COMBO_X1000BTSTATr_MASTER_SLAVE_CONF_RESf_SET
#define COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_GET BCM84834_COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_GET
#define COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_SET BCM84834_COMBO_X1000BTSTATr_LOCAL_RECEIVER_STATUSf_SET
#define COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_GET BCM84834_COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_GET
#define COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_SET BCM84834_COMBO_X1000BTSTATr_REMOTE_RECEIVER_STATUSf_SET
#define COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_GET BCM84834_COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_GET
#define COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_SET BCM84834_COMBO_X1000BTSTATr_LNK_PART_FULL_DUP_ABLEf_SET
#define COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_GET BCM84834_COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_GET
#define COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_SET BCM84834_COMBO_X1000BTSTATr_LNK_PART_HALF_DUP_ABLEf_SET
#define COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_GET BCM84834_COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_GET
#define COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_SET BCM84834_COMBO_X1000BTSTATr_IDLE_ERROR_COUNTf_SET
#define READ_COMBO_X1000BTSTATr BCM84834_READ_COMBO_X1000BTSTATr
#define WRITE_COMBO_X1000BTSTATr BCM84834_WRITE_COMBO_X1000BTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_X1000BTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_MIIEXTSTAT
 * BLOCKS:   IEEE
 * REGADDR:  0xffef
 * DEVAD:    7
 * DESC:     Extended Status Register
 * SIZE:     32
 * FIELDS:
 *     X1000BASE_T_HALF_DUPLEX_CAPABLE 
 *     X1000BASE_T_FULL_DUPLEX_CAPABLE 
 *     X1000BASE_X_HALF_DUPLEX_CAPABLE 
 *     X1000BASE_X_FULL_DUPLEX_CAPABLE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_MIIEXTSTATr (0x0007ffef | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_MIIEXTSTATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_MIIEXTSTAT.
 *
 */
typedef union BCM84834_COMBO_MIIEXTSTATr_s {
	uint32_t v[1];
	uint32_t combo_miiextstat[1];
	uint32_t _combo_miiextstat;
} BCM84834_COMBO_MIIEXTSTATr_t;

#define BCM84834_COMBO_MIIEXTSTATr_CLR(r) (r).combo_miiextstat[0] = 0
#define BCM84834_COMBO_MIIEXTSTATr_SET(r,d) (r).combo_miiextstat[0] = d
#define BCM84834_COMBO_MIIEXTSTATr_GET(r) (r).combo_miiextstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_miiextstat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_miiextstat[0]=(((r).combo_miiextstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_miiextstat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_miiextstat[0]=(((r).combo_miiextstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_GET(r) ((((r).combo_miiextstat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_SET(r,f) (r).combo_miiextstat[0]=(((r).combo_miiextstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_GET(r) ((((r).combo_miiextstat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_SET(r,f) (r).combo_miiextstat[0]=(((r).combo_miiextstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access COMBO_MIIEXTSTAT.
 *
 */
#define BCM84834_READ_COMBO_MIIEXTSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_MIIEXTSTATr,(_r._combo_miiextstat))
#define BCM84834_WRITE_COMBO_MIIEXTSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_MIIEXTSTATr,(_r._combo_miiextstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_MIIEXTSTATr BCM84834_COMBO_MIIEXTSTATr
#define COMBO_MIIEXTSTATr_SIZE BCM84834_COMBO_MIIEXTSTATr_SIZE
typedef BCM84834_COMBO_MIIEXTSTATr_t COMBO_MIIEXTSTATr_t;
#define COMBO_MIIEXTSTATr_CLR BCM84834_COMBO_MIIEXTSTATr_CLR
#define COMBO_MIIEXTSTATr_SET BCM84834_COMBO_MIIEXTSTATr_SET
#define COMBO_MIIEXTSTATr_GET BCM84834_COMBO_MIIEXTSTATr_GET
#define COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_X_HALF_DUPLEX_CAPABLEf_SET
#define COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_GET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_GET
#define COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_SET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_FULL_DUPLEX_CAPABLEf_SET
#define COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_GET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_GET
#define COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_SET BCM84834_COMBO_MIIEXTSTATr_X1000BASE_T_HALF_DUPLEX_CAPABLEf_SET
#define READ_COMBO_MIIEXTSTATr BCM84834_READ_COMBO_MIIEXTSTATr
#define WRITE_COMBO_MIIEXTSTATr BCM84834_WRITE_COMBO_MIIEXTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_MIIEXTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_PHYEXTENDEDCTRL
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff0
 * DEVAD:    7
 * DESC:     PHY Extended Control Register
 * SIZE:     32
 * FIELDS:
 *     GMII_RGMII_FIFO_ELASTICITY 
 *     BLOCK_TXEN_MODE  
 *     FORCE_LEDS_OFF   
 *     FORCE_LEDS_ON    
 *     ENABLE_LED_TRAFFIC_MODE 
 *     RESET_SCRAMBLER  
 *     BYPASS_ALIGNMENT 
 *     BYPASS_NRZI_MLT3 
 *     BYPASS_SCRAMBLER 
 *     BYPASS_ENCODER   
 *     FORCE_INTERRUPT  
 *     INTERRUPT_DISABLE 
 *     TRANSMIT_DISABLE 
 *     DISABLE_AUTO_MDI_CROSSOVR 
 *     MAC_PHY_INTERFACE_MODE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_PHYEXTENDEDCTRLr (0x0007fff0 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_PHYEXTENDEDCTRLr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_PHYEXTENDEDCTRL.
 *
 */
typedef union BCM84834_COMBO_PHYEXTENDEDCTRLr_s {
	uint32_t v[1];
	uint32_t combo_phyextendedctrl[1];
	uint32_t _combo_phyextendedctrl;
} BCM84834_COMBO_PHYEXTENDEDCTRLr_t;

#define BCM84834_COMBO_PHYEXTENDEDCTRLr_CLR(r) (r).combo_phyextendedctrl[0] = 0
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_SET(r,d) (r).combo_phyextendedctrl[0] = d
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_GET(r) (r).combo_phyextendedctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 15) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 14) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 13) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 12) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 11) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 10) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 9) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_GET(r) ((((r).combo_phyextendedctrl[0]) >> 8) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 7) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 6) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 5) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 4) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 3) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_GET(r) ((((r).combo_phyextendedctrl[0]) >> 2) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_GET(r) (((r).combo_phyextendedctrl[0]) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_SET(r,f) (r).combo_phyextendedctrl[0]=(((r).combo_phyextendedctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_PHYEXTENDEDCTRL.
 *
 */
#define BCM84834_READ_COMBO_PHYEXTENDEDCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_PHYEXTENDEDCTRLr,(_r._combo_phyextendedctrl))
#define BCM84834_WRITE_COMBO_PHYEXTENDEDCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_PHYEXTENDEDCTRLr,(_r._combo_phyextendedctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_PHYEXTENDEDCTRLr BCM84834_COMBO_PHYEXTENDEDCTRLr
#define COMBO_PHYEXTENDEDCTRLr_SIZE BCM84834_COMBO_PHYEXTENDEDCTRLr_SIZE
typedef BCM84834_COMBO_PHYEXTENDEDCTRLr_t COMBO_PHYEXTENDEDCTRLr_t;
#define COMBO_PHYEXTENDEDCTRLr_CLR BCM84834_COMBO_PHYEXTENDEDCTRLr_CLR
#define COMBO_PHYEXTENDEDCTRLr_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_SET
#define COMBO_PHYEXTENDEDCTRLr_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_GET
#define COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_GET
#define COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_MAC_PHY_INTERFACE_MODEf_SET
#define COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_GET
#define COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_DISABLE_AUTO_MDI_CROSSOVRf_SET
#define COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_GET
#define COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_TRANSMIT_DISABLEf_SET
#define COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_GET
#define COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_INTERRUPT_DISABLEf_SET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_GET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_INTERRUPTf_SET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_GET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ENCODERf_SET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_GET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_SCRAMBLERf_SET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_GET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_NRZI_MLT3f_SET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_GET
#define COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_BYPASS_ALIGNMENTf_SET
#define COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_GET
#define COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_RESET_SCRAMBLERf_SET
#define COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_GET
#define COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_ENABLE_LED_TRAFFIC_MODEf_SET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_GET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_ONf_SET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_GET
#define COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_FORCE_LEDS_OFFf_SET
#define COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_GET
#define COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_BLOCK_TXEN_MODEf_SET
#define COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_GET BCM84834_COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_GET
#define COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_SET BCM84834_COMBO_PHYEXTENDEDCTRLr_GMII_RGMII_FIFO_ELASTICITYf_SET
#define READ_COMBO_PHYEXTENDEDCTRLr BCM84834_READ_COMBO_PHYEXTENDEDCTRLr
#define WRITE_COMBO_PHYEXTENDEDCTRLr BCM84834_WRITE_COMBO_PHYEXTENDEDCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_PHYEXTENDEDCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_PHYEXTENDEDSTAT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff1
 * DEVAD:    7
 * DESC:     PHY Extended Status Register
 * SIZE:     32
 * FIELDS:
 *     MLT3_CODE_ERROR_DETECTED 
 *     LOCK_ERROR_DETECTED 
 *     TRANSMIT_ERROR_DETECTED 
 *     RECEIVE_ERROR_DETECTED 
 *     BAD_ESD_DETECTED 
 *     BAD_SSD_DETECTED 
 *     CARRIER_EXT_ERR_DETECTED 
 *     CRC_ERROR_DETECTED 
 *     LINK_STATUS      
 *     LOCKED           
 *     LOCAL_RECEIVER_STATUS 
 *     REMOTE_RECEIVER_STATUS 
 *     INTERRUPT_STATUS 
 *     MDI_CROSSOVER_STATE 
 *     WIRESPEED_DOWNGRADE 
 *     AN_BSPG_SEL_FIELD_MISMATCH 
 *
 ******************************************************************************/
#define BCM84834_COMBO_PHYEXTENDEDSTATr (0x0007fff1 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_PHYEXTENDEDSTATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_PHYEXTENDEDSTAT.
 *
 */
typedef union BCM84834_COMBO_PHYEXTENDEDSTATr_s {
	uint32_t v[1];
	uint32_t combo_phyextendedstat[1];
	uint32_t _combo_phyextendedstat;
} BCM84834_COMBO_PHYEXTENDEDSTATr_t;

#define BCM84834_COMBO_PHYEXTENDEDSTATr_CLR(r) (r).combo_phyextendedstat[0] = 0
#define BCM84834_COMBO_PHYEXTENDEDSTATr_SET(r,d) (r).combo_phyextendedstat[0] = d
#define BCM84834_COMBO_PHYEXTENDEDSTATr_GET(r) (r).combo_phyextendedstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_GET(r) ((((r).combo_phyextendedstat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_GET(r) ((((r).combo_phyextendedstat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_GET(r) ((((r).combo_phyextendedstat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_GET(r) ((((r).combo_phyextendedstat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_GET(r) ((((r).combo_phyextendedstat[0]) >> 11) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_GET(r) ((((r).combo_phyextendedstat[0]) >> 10) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCKEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 9) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCKEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_GET(r) ((((r).combo_phyextendedstat[0]) >> 8) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 7) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 6) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 5) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 4) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 3) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 2) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_GET(r) ((((r).combo_phyextendedstat[0]) >> 1) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_GET(r) (((r).combo_phyextendedstat[0]) & 0x1)
#define BCM84834_COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_SET(r,f) (r).combo_phyextendedstat[0]=(((r).combo_phyextendedstat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_PHYEXTENDEDSTAT.
 *
 */
#define BCM84834_READ_COMBO_PHYEXTENDEDSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_PHYEXTENDEDSTATr,(_r._combo_phyextendedstat))
#define BCM84834_WRITE_COMBO_PHYEXTENDEDSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_PHYEXTENDEDSTATr,(_r._combo_phyextendedstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_PHYEXTENDEDSTATr BCM84834_COMBO_PHYEXTENDEDSTATr
#define COMBO_PHYEXTENDEDSTATr_SIZE BCM84834_COMBO_PHYEXTENDEDSTATr_SIZE
typedef BCM84834_COMBO_PHYEXTENDEDSTATr_t COMBO_PHYEXTENDEDSTATr_t;
#define COMBO_PHYEXTENDEDSTATr_CLR BCM84834_COMBO_PHYEXTENDEDSTATr_CLR
#define COMBO_PHYEXTENDEDSTATr_SET BCM84834_COMBO_PHYEXTENDEDSTATr_SET
#define COMBO_PHYEXTENDEDSTATr_GET BCM84834_COMBO_PHYEXTENDEDSTATr_GET
#define COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_GET
#define COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_AN_BSPG_SEL_FIELD_MISMATCHf_SET
#define COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_GET
#define COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_WIRESPEED_DOWNGRADEf_SET
#define COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_GET
#define COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_MDI_CROSSOVER_STATEf_SET
#define COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_GET
#define COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_INTERRUPT_STATUSf_SET
#define COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_GET
#define COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_REMOTE_RECEIVER_STATUSf_SET
#define COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_GET
#define COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCAL_RECEIVER_STATUSf_SET
#define COMBO_PHYEXTENDEDSTATr_LOCKEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCKEDf_GET
#define COMBO_PHYEXTENDEDSTATr_LOCKEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCKEDf_SET
#define COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_GET
#define COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_LINK_STATUSf_SET
#define COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_CRC_ERROR_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_CARRIER_EXT_ERR_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_SSD_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_BAD_ESD_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_RECEIVE_ERROR_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_TRANSMIT_ERROR_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_LOCK_ERROR_DETECTEDf_SET
#define COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_GET BCM84834_COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_GET
#define COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_SET BCM84834_COMBO_PHYEXTENDEDSTATr_MLT3_CODE_ERROR_DETECTEDf_SET
#define READ_COMBO_PHYEXTENDEDSTATr BCM84834_READ_COMBO_PHYEXTENDEDSTATr
#define WRITE_COMBO_PHYEXTENDEDSTATr BCM84834_WRITE_COMBO_PHYEXTENDEDSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_PHYEXTENDEDSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_RCVERRCOUNT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff2
 * DEVAD:    7
 * DESC:     Receive Error Counter
 * SIZE:     32
 * FIELDS:
 *     RECEIVE_ERROR_COUNTER 
 *
 ******************************************************************************/
#define BCM84834_COMBO_RCVERRCOUNTr (0x0007fff2 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_RCVERRCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_RCVERRCOUNT.
 *
 */
typedef union BCM84834_COMBO_RCVERRCOUNTr_s {
	uint32_t v[1];
	uint32_t combo_rcverrcount[1];
	uint32_t _combo_rcverrcount;
} BCM84834_COMBO_RCVERRCOUNTr_t;

#define BCM84834_COMBO_RCVERRCOUNTr_CLR(r) (r).combo_rcverrcount[0] = 0
#define BCM84834_COMBO_RCVERRCOUNTr_SET(r,d) (r).combo_rcverrcount[0] = d
#define BCM84834_COMBO_RCVERRCOUNTr_GET(r) (r).combo_rcverrcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_GET(r) (((r).combo_rcverrcount[0]) & 0xffff)
#define BCM84834_COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_SET(r,f) (r).combo_rcverrcount[0]=(((r).combo_rcverrcount[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access COMBO_RCVERRCOUNT.
 *
 */
#define BCM84834_READ_COMBO_RCVERRCOUNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_RCVERRCOUNTr,(_r._combo_rcverrcount))
#define BCM84834_WRITE_COMBO_RCVERRCOUNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_RCVERRCOUNTr,(_r._combo_rcverrcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_RCVERRCOUNTr BCM84834_COMBO_RCVERRCOUNTr
#define COMBO_RCVERRCOUNTr_SIZE BCM84834_COMBO_RCVERRCOUNTr_SIZE
typedef BCM84834_COMBO_RCVERRCOUNTr_t COMBO_RCVERRCOUNTr_t;
#define COMBO_RCVERRCOUNTr_CLR BCM84834_COMBO_RCVERRCOUNTr_CLR
#define COMBO_RCVERRCOUNTr_SET BCM84834_COMBO_RCVERRCOUNTr_SET
#define COMBO_RCVERRCOUNTr_GET BCM84834_COMBO_RCVERRCOUNTr_GET
#define COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_GET BCM84834_COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_GET
#define COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_SET BCM84834_COMBO_RCVERRCOUNTr_RECEIVE_ERROR_COUNTERf_SET
#define READ_COMBO_RCVERRCOUNTr BCM84834_READ_COMBO_RCVERRCOUNTr
#define WRITE_COMBO_RCVERRCOUNTr BCM84834_WRITE_COMBO_RCVERRCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_RCVERRCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_FALSECARRIERSENCECOUNT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff3
 * DEVAD:    7
 * DESC:     False Carrier Sense Counter
 * SIZE:     32
 * FIELDS:
 *     FALSE_CAR_SENSE_COUNT 
 *     SERDES_BER_COUNT 
 *
 ******************************************************************************/
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr (0x0007fff3 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_FALSECARRIERSENCECOUNT.
 *
 */
typedef union BCM84834_COMBO_FALSECARRIERSENCECOUNTr_s {
	uint32_t v[1];
	uint32_t combo_falsecarriersencecount[1];
	uint32_t _combo_falsecarriersencecount;
} BCM84834_COMBO_FALSECARRIERSENCECOUNTr_t;

#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_CLR(r) (r).combo_falsecarriersencecount[0] = 0
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SET(r,d) (r).combo_falsecarriersencecount[0] = d
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_GET(r) (r).combo_falsecarriersencecount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_GET(r) ((((r).combo_falsecarriersencecount[0]) >> 8) & 0xff)
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_SET(r,f) (r).combo_falsecarriersencecount[0]=(((r).combo_falsecarriersencecount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_GET(r) (((r).combo_falsecarriersencecount[0]) & 0xff)
#define BCM84834_COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_SET(r,f) (r).combo_falsecarriersencecount[0]=(((r).combo_falsecarriersencecount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access COMBO_FALSECARRIERSENCECOUNT.
 *
 */
#define BCM84834_READ_COMBO_FALSECARRIERSENCECOUNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_FALSECARRIERSENCECOUNTr,(_r._combo_falsecarriersencecount))
#define BCM84834_WRITE_COMBO_FALSECARRIERSENCECOUNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_FALSECARRIERSENCECOUNTr,(_r._combo_falsecarriersencecount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_FALSECARRIERSENCECOUNTr BCM84834_COMBO_FALSECARRIERSENCECOUNTr
#define COMBO_FALSECARRIERSENCECOUNTr_SIZE BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SIZE
typedef BCM84834_COMBO_FALSECARRIERSENCECOUNTr_t COMBO_FALSECARRIERSENCECOUNTr_t;
#define COMBO_FALSECARRIERSENCECOUNTr_CLR BCM84834_COMBO_FALSECARRIERSENCECOUNTr_CLR
#define COMBO_FALSECARRIERSENCECOUNTr_SET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SET
#define COMBO_FALSECARRIERSENCECOUNTr_GET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_GET
#define COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_GET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_GET
#define COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_SET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_SERDES_BER_COUNTf_SET
#define COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_GET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_GET
#define COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_SET BCM84834_COMBO_FALSECARRIERSENCECOUNTr_FALSE_CAR_SENSE_COUNTf_SET
#define READ_COMBO_FALSECARRIERSENCECOUNTr BCM84834_READ_COMBO_FALSECARRIERSENCECOUNTr
#define WRITE_COMBO_FALSECARRIERSENCECOUNTr BCM84834_WRITE_COMBO_FALSECARRIERSENCECOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_FALSECARRIERSENCECOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_LCLRMTRCVNOTOKCOUNT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff4
 * DEVAD:    7
 * DESC:     Local/Remote Receiver NOT_OK Counters
 * SIZE:     32
 * FIELDS:
 *     RMT_RCV_NOT_OK_COUNT 
 *     LCL_RCV_NOT_OK_COUNT 
 *
 ******************************************************************************/
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr (0x0007fff4 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_LCLRMTRCVNOTOKCOUNT.
 *
 */
typedef union BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_s {
	uint32_t v[1];
	uint32_t combo_lclrmtrcvnotokcount[1];
	uint32_t _combo_lclrmtrcvnotokcount;
} BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_t;

#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_CLR(r) (r).combo_lclrmtrcvnotokcount[0] = 0
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_SET(r,d) (r).combo_lclrmtrcvnotokcount[0] = d
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_GET(r) (r).combo_lclrmtrcvnotokcount[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_GET(r) ((((r).combo_lclrmtrcvnotokcount[0]) >> 8) & 0xff)
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_SET(r,f) (r).combo_lclrmtrcvnotokcount[0]=(((r).combo_lclrmtrcvnotokcount[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_GET(r) (((r).combo_lclrmtrcvnotokcount[0]) & 0xff)
#define BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_SET(r,f) (r).combo_lclrmtrcvnotokcount[0]=(((r).combo_lclrmtrcvnotokcount[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access COMBO_LCLRMTRCVNOTOKCOUNT.
 *
 */
#define BCM84834_READ_COMBO_LCLRMTRCVNOTOKCOUNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr,(_r._combo_lclrmtrcvnotokcount))
#define BCM84834_WRITE_COMBO_LCLRMTRCVNOTOKCOUNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr,(_r._combo_lclrmtrcvnotokcount))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_LCLRMTRCVNOTOKCOUNTr BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr
#define COMBO_LCLRMTRCVNOTOKCOUNTr_SIZE BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_SIZE
typedef BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_t COMBO_LCLRMTRCVNOTOKCOUNTr_t;
#define COMBO_LCLRMTRCVNOTOKCOUNTr_CLR BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_CLR
#define COMBO_LCLRMTRCVNOTOKCOUNTr_SET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_SET
#define COMBO_LCLRMTRCVNOTOKCOUNTr_GET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_GET
#define COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_GET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_GET
#define COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_SET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_LCL_RCV_NOT_OK_COUNTf_SET
#define COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_GET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_GET
#define COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_SET BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr_RMT_RCV_NOT_OK_COUNTf_SET
#define READ_COMBO_LCLRMTRCVNOTOKCOUNTr BCM84834_READ_COMBO_LCLRMTRCVNOTOKCOUNTr
#define WRITE_COMBO_LCLRMTRCVNOTOKCOUNTr BCM84834_WRITE_COMBO_LCLRMTRCVNOTOKCOUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_LCLRMTRCVNOTOKCOUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_DSPCOEFFRWPORT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff5
 * DEVAD:    7
 * DESC:     DSP Coefficient Read/Write Port
 * SIZE:     32
 * FIELDS:
 *     DSP_COEFFICIENT_LSB 
 *     COEFFICIENT_INVALID 
 *
 ******************************************************************************/
#define BCM84834_COMBO_DSPCOEFFRWPORTr (0x0007fff5 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_DSPCOEFFRWPORTr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_DSPCOEFFRWPORT.
 *
 */
typedef union BCM84834_COMBO_DSPCOEFFRWPORTr_s {
	uint32_t v[1];
	uint32_t combo_dspcoeffrwport[1];
	uint32_t _combo_dspcoeffrwport;
} BCM84834_COMBO_DSPCOEFFRWPORTr_t;

#define BCM84834_COMBO_DSPCOEFFRWPORTr_CLR(r) (r).combo_dspcoeffrwport[0] = 0
#define BCM84834_COMBO_DSPCOEFFRWPORTr_SET(r,d) (r).combo_dspcoeffrwport[0] = d
#define BCM84834_COMBO_DSPCOEFFRWPORTr_GET(r) (r).combo_dspcoeffrwport[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_GET(r) ((((r).combo_dspcoeffrwport[0]) >> 15) & 0x1)
#define BCM84834_COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_SET(r,f) (r).combo_dspcoeffrwport[0]=(((r).combo_dspcoeffrwport[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_GET(r) (((r).combo_dspcoeffrwport[0]) & 0x7fff)
#define BCM84834_COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_SET(r,f) (r).combo_dspcoeffrwport[0]=(((r).combo_dspcoeffrwport[0] & ~((uint32_t)0x7fff)) | (((uint32_t)f) & 0x7fff))

/*
 * These macros can be used to access COMBO_DSPCOEFFRWPORT.
 *
 */
#define BCM84834_READ_COMBO_DSPCOEFFRWPORTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_DSPCOEFFRWPORTr,(_r._combo_dspcoeffrwport))
#define BCM84834_WRITE_COMBO_DSPCOEFFRWPORTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_DSPCOEFFRWPORTr,(_r._combo_dspcoeffrwport))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_DSPCOEFFRWPORTr BCM84834_COMBO_DSPCOEFFRWPORTr
#define COMBO_DSPCOEFFRWPORTr_SIZE BCM84834_COMBO_DSPCOEFFRWPORTr_SIZE
typedef BCM84834_COMBO_DSPCOEFFRWPORTr_t COMBO_DSPCOEFFRWPORTr_t;
#define COMBO_DSPCOEFFRWPORTr_CLR BCM84834_COMBO_DSPCOEFFRWPORTr_CLR
#define COMBO_DSPCOEFFRWPORTr_SET BCM84834_COMBO_DSPCOEFFRWPORTr_SET
#define COMBO_DSPCOEFFRWPORTr_GET BCM84834_COMBO_DSPCOEFFRWPORTr_GET
#define COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_GET BCM84834_COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_GET
#define COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_SET BCM84834_COMBO_DSPCOEFFRWPORTr_COEFFICIENT_INVALIDf_SET
#define COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_GET BCM84834_COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_GET
#define COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_SET BCM84834_COMBO_DSPCOEFFRWPORTr_DSP_COEFFICIENT_LSBf_SET
#define READ_COMBO_DSPCOEFFRWPORTr BCM84834_READ_COMBO_DSPCOEFFRWPORTr
#define WRITE_COMBO_DSPCOEFFRWPORTr BCM84834_WRITE_COMBO_DSPCOEFFRWPORTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_DSPCOEFFRWPORTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_DSPCTRL
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff6
 * DEVAD:    7
 * DESC:     DSP Control Register (x4x9 for bits 1 and 2)
 * SIZE:     32
 * FIELDS:
 *     FREEZE_FILTER    
 *     DISABLE_FILTER   
 *     INITIALIZE_DFE   
 *     INITIALIZE_ECHO_NEXT 
 *     INITIALIZE_RAM   
 *     WRITE_RAM_FROM_FILTER 
 *     WR_NXT_FILT_COEF_FROM_RAM 
 *     WR_FILT_COEF_FROM_RAM 
 *     UPPER_WORD_SELECT 
 *     TAPREAD_PREF_ARB_ERR 
 *     BUSY             
 *
 ******************************************************************************/
#define BCM84834_COMBO_DSPCTRLr (0x0007fff6 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_DSPCTRLr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_DSPCTRL.
 *
 */
typedef union BCM84834_COMBO_DSPCTRLr_s {
	uint32_t v[1];
	uint32_t combo_dspctrl[1];
	uint32_t _combo_dspctrl;
} BCM84834_COMBO_DSPCTRLr_t;

#define BCM84834_COMBO_DSPCTRLr_CLR(r) (r).combo_dspctrl[0] = 0
#define BCM84834_COMBO_DSPCTRLr_SET(r,d) (r).combo_dspctrl[0] = d
#define BCM84834_COMBO_DSPCTRLr_GET(r) (r).combo_dspctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_DSPCTRLr_BUSYf_GET(r) ((((r).combo_dspctrl[0]) >> 12) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_BUSYf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_GET(r) ((((r).combo_dspctrl[0]) >> 11) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_DSPCTRLr_UPPER_WORD_SELECTf_GET(r) ((((r).combo_dspctrl[0]) >> 10) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_UPPER_WORD_SELECTf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_GET(r) ((((r).combo_dspctrl[0]) >> 9) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_GET(r) ((((r).combo_dspctrl[0]) >> 8) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_GET(r) ((((r).combo_dspctrl[0]) >> 7) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_RAMf_GET(r) ((((r).combo_dspctrl[0]) >> 6) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_RAMf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_GET(r) ((((r).combo_dspctrl[0]) >> 5) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_DFEf_GET(r) ((((r).combo_dspctrl[0]) >> 4) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_INITIALIZE_DFEf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_DSPCTRLr_DISABLE_FILTERf_GET(r) ((((r).combo_dspctrl[0]) >> 2) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_DISABLE_FILTERf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_DSPCTRLr_FREEZE_FILTERf_GET(r) ((((r).combo_dspctrl[0]) >> 1) & 0x1)
#define BCM84834_COMBO_DSPCTRLr_FREEZE_FILTERf_SET(r,f) (r).combo_dspctrl[0]=(((r).combo_dspctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access COMBO_DSPCTRL.
 *
 */
#define BCM84834_READ_COMBO_DSPCTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_DSPCTRLr,(_r._combo_dspctrl))
#define BCM84834_WRITE_COMBO_DSPCTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_DSPCTRLr,(_r._combo_dspctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_DSPCTRLr BCM84834_COMBO_DSPCTRLr
#define COMBO_DSPCTRLr_SIZE BCM84834_COMBO_DSPCTRLr_SIZE
typedef BCM84834_COMBO_DSPCTRLr_t COMBO_DSPCTRLr_t;
#define COMBO_DSPCTRLr_CLR BCM84834_COMBO_DSPCTRLr_CLR
#define COMBO_DSPCTRLr_SET BCM84834_COMBO_DSPCTRLr_SET
#define COMBO_DSPCTRLr_GET BCM84834_COMBO_DSPCTRLr_GET
#define COMBO_DSPCTRLr_BUSYf_GET BCM84834_COMBO_DSPCTRLr_BUSYf_GET
#define COMBO_DSPCTRLr_BUSYf_SET BCM84834_COMBO_DSPCTRLr_BUSYf_SET
#define COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_GET BCM84834_COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_GET
#define COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_SET BCM84834_COMBO_DSPCTRLr_TAPREAD_PREF_ARB_ERRf_SET
#define COMBO_DSPCTRLr_UPPER_WORD_SELECTf_GET BCM84834_COMBO_DSPCTRLr_UPPER_WORD_SELECTf_GET
#define COMBO_DSPCTRLr_UPPER_WORD_SELECTf_SET BCM84834_COMBO_DSPCTRLr_UPPER_WORD_SELECTf_SET
#define COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_GET BCM84834_COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_GET
#define COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_SET BCM84834_COMBO_DSPCTRLr_WR_FILT_COEF_FROM_RAMf_SET
#define COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_GET BCM84834_COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_GET
#define COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_SET BCM84834_COMBO_DSPCTRLr_WR_NXT_FILT_COEF_FROM_RAMf_SET
#define COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_GET BCM84834_COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_GET
#define COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_SET BCM84834_COMBO_DSPCTRLr_WRITE_RAM_FROM_FILTERf_SET
#define COMBO_DSPCTRLr_INITIALIZE_RAMf_GET BCM84834_COMBO_DSPCTRLr_INITIALIZE_RAMf_GET
#define COMBO_DSPCTRLr_INITIALIZE_RAMf_SET BCM84834_COMBO_DSPCTRLr_INITIALIZE_RAMf_SET
#define COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_GET BCM84834_COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_GET
#define COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_SET BCM84834_COMBO_DSPCTRLr_INITIALIZE_ECHO_NEXTf_SET
#define COMBO_DSPCTRLr_INITIALIZE_DFEf_GET BCM84834_COMBO_DSPCTRLr_INITIALIZE_DFEf_GET
#define COMBO_DSPCTRLr_INITIALIZE_DFEf_SET BCM84834_COMBO_DSPCTRLr_INITIALIZE_DFEf_SET
#define COMBO_DSPCTRLr_DISABLE_FILTERf_GET BCM84834_COMBO_DSPCTRLr_DISABLE_FILTERf_GET
#define COMBO_DSPCTRLr_DISABLE_FILTERf_SET BCM84834_COMBO_DSPCTRLr_DISABLE_FILTERf_SET
#define COMBO_DSPCTRLr_FREEZE_FILTERf_GET BCM84834_COMBO_DSPCTRLr_FREEZE_FILTERf_GET
#define COMBO_DSPCTRLr_FREEZE_FILTERf_SET BCM84834_COMBO_DSPCTRLr_FREEZE_FILTERf_SET
#define READ_COMBO_DSPCTRLr BCM84834_READ_COMBO_DSPCTRLr
#define WRITE_COMBO_DSPCTRLr BCM84834_WRITE_COMBO_DSPCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_DSPCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_DSPCOEFFADDR
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff7
 * DEVAD:    7
 * DESC:     DSP Coefficient Address Register
 * SIZE:     32
 * FIELDS:
 *     TAP_NUMBER       
 *     FILTER_SELECT    
 *     CONTROL_ALL_FILTERS 
 *     CHANNEL_SELECT   
 *     CONTROL_ALL_CHANNELS 
 *
 ******************************************************************************/
#define BCM84834_COMBO_DSPCOEFFADDRr (0x0007fff7 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_DSPCOEFFADDRr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_DSPCOEFFADDR.
 *
 */
typedef union BCM84834_COMBO_DSPCOEFFADDRr_s {
	uint32_t v[1];
	uint32_t combo_dspcoeffaddr[1];
	uint32_t _combo_dspcoeffaddr;
} BCM84834_COMBO_DSPCOEFFADDRr_t;

#define BCM84834_COMBO_DSPCOEFFADDRr_CLR(r) (r).combo_dspcoeffaddr[0] = 0
#define BCM84834_COMBO_DSPCOEFFADDRr_SET(r,d) (r).combo_dspcoeffaddr[0] = d
#define BCM84834_COMBO_DSPCOEFFADDRr_GET(r) (r).combo_dspcoeffaddr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_GET(r) ((((r).combo_dspcoeffaddr[0]) >> 15) & 0x1)
#define BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_SET(r,f) (r).combo_dspcoeffaddr[0]=(((r).combo_dspcoeffaddr[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_GET(r) ((((r).combo_dspcoeffaddr[0]) >> 13) & 0x3)
#define BCM84834_COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_SET(r,f) (r).combo_dspcoeffaddr[0]=(((r).combo_dspcoeffaddr[0] & ~((uint32_t)0x3 << 13)) | ((((uint32_t)f) & 0x3) << 13))
#define BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_GET(r) ((((r).combo_dspcoeffaddr[0]) >> 12) & 0x1)
#define BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_SET(r,f) (r).combo_dspcoeffaddr[0]=(((r).combo_dspcoeffaddr[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_DSPCOEFFADDRr_FILTER_SELECTf_GET(r) ((((r).combo_dspcoeffaddr[0]) >> 8) & 0xf)
#define BCM84834_COMBO_DSPCOEFFADDRr_FILTER_SELECTf_SET(r,f) (r).combo_dspcoeffaddr[0]=(((r).combo_dspcoeffaddr[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCM84834_COMBO_DSPCOEFFADDRr_TAP_NUMBERf_GET(r) (((r).combo_dspcoeffaddr[0]) & 0xff)
#define BCM84834_COMBO_DSPCOEFFADDRr_TAP_NUMBERf_SET(r,f) (r).combo_dspcoeffaddr[0]=(((r).combo_dspcoeffaddr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access COMBO_DSPCOEFFADDR.
 *
 */
#define BCM84834_READ_COMBO_DSPCOEFFADDRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_DSPCOEFFADDRr,(_r._combo_dspcoeffaddr))
#define BCM84834_WRITE_COMBO_DSPCOEFFADDRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_DSPCOEFFADDRr,(_r._combo_dspcoeffaddr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_DSPCOEFFADDRr BCM84834_COMBO_DSPCOEFFADDRr
#define COMBO_DSPCOEFFADDRr_SIZE BCM84834_COMBO_DSPCOEFFADDRr_SIZE
typedef BCM84834_COMBO_DSPCOEFFADDRr_t COMBO_DSPCOEFFADDRr_t;
#define COMBO_DSPCOEFFADDRr_CLR BCM84834_COMBO_DSPCOEFFADDRr_CLR
#define COMBO_DSPCOEFFADDRr_SET BCM84834_COMBO_DSPCOEFFADDRr_SET
#define COMBO_DSPCOEFFADDRr_GET BCM84834_COMBO_DSPCOEFFADDRr_GET
#define COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_GET BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_GET
#define COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_SET BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_CHANNELSf_SET
#define COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_GET BCM84834_COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_GET
#define COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_SET BCM84834_COMBO_DSPCOEFFADDRr_CHANNEL_SELECTf_SET
#define COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_GET BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_GET
#define COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_SET BCM84834_COMBO_DSPCOEFFADDRr_CONTROL_ALL_FILTERSf_SET
#define COMBO_DSPCOEFFADDRr_FILTER_SELECTf_GET BCM84834_COMBO_DSPCOEFFADDRr_FILTER_SELECTf_GET
#define COMBO_DSPCOEFFADDRr_FILTER_SELECTf_SET BCM84834_COMBO_DSPCOEFFADDRr_FILTER_SELECTf_SET
#define COMBO_DSPCOEFFADDRr_TAP_NUMBERf_GET BCM84834_COMBO_DSPCOEFFADDRr_TAP_NUMBERf_GET
#define COMBO_DSPCOEFFADDRr_TAP_NUMBERf_SET BCM84834_COMBO_DSPCOEFFADDRr_TAP_NUMBERf_SET
#define READ_COMBO_DSPCOEFFADDRr BCM84834_READ_COMBO_DSPCOEFFADDRr
#define WRITE_COMBO_DSPCOEFFADDRr BCM84834_WRITE_COMBO_DSPCOEFFADDRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_DSPCOEFFADDRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_AUXSTATSUMMARY
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfff9
 * DEVAD:    7
 * DESC:     Auxiliary Status Summary (copper side only)
 * SIZE:     32
 * FIELDS:
 *     PAUSE_RESOL_TRANSMIT_DIR 
 *     PAUSE_RESOL_RECEIVE_DIR 
 *     LNK_STATUS       
 *     LNK_PART_NEXT_PAGE_ABIL 
 *     LNK_PART_AUTONEG_ABIL 
 *     PAGE_RECEIVED    
 *     REMOTE_FAULT     
 *     PARALLEL_DETECTION_FAULT 
 *     AUTONEG_HCD      
 *     AUTONEG_NEXT_PAGE_WAIT 
 *     AUTONEG_ABIL_DETECT 
 *     AUTONEG_ACK_DETECT 
 *     AUTONEG_COMPLETE_ACK 
 *     AUTONEG_COMPLETE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_AUXSTATSUMMARYr (0x0007fff9 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_AUXSTATSUMMARYr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_AUXSTATSUMMARY.
 *
 */
typedef union BCM84834_COMBO_AUXSTATSUMMARYr_s {
	uint32_t v[1];
	uint32_t combo_auxstatsummary[1];
	uint32_t _combo_auxstatsummary;
} BCM84834_COMBO_AUXSTATSUMMARYr_t;

#define BCM84834_COMBO_AUXSTATSUMMARYr_CLR(r) (r).combo_auxstatsummary[0] = 0
#define BCM84834_COMBO_AUXSTATSUMMARYr_SET(r,d) (r).combo_auxstatsummary[0] = d
#define BCM84834_COMBO_AUXSTATSUMMARYr_GET(r) (r).combo_auxstatsummary[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_GET(r) ((((r).combo_auxstatsummary[0]) >> 15) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_GET(r) ((((r).combo_auxstatsummary[0]) >> 14) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_GET(r) ((((r).combo_auxstatsummary[0]) >> 13) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_GET(r) ((((r).combo_auxstatsummary[0]) >> 12) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_GET(r) ((((r).combo_auxstatsummary[0]) >> 11) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_GET(r) ((((r).combo_auxstatsummary[0]) >> 8) & 0x7)
#define BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_GET(r) ((((r).combo_auxstatsummary[0]) >> 7) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_GET(r) ((((r).combo_auxstatsummary[0]) >> 6) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_GET(r) ((((r).combo_auxstatsummary[0]) >> 5) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_GET(r) ((((r).combo_auxstatsummary[0]) >> 4) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_GET(r) ((((r).combo_auxstatsummary[0]) >> 3) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_STATUSf_GET(r) ((((r).combo_auxstatsummary[0]) >> 2) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_LNK_STATUSf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_GET(r) ((((r).combo_auxstatsummary[0]) >> 1) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_GET(r) (((r).combo_auxstatsummary[0]) & 0x1)
#define BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_SET(r,f) (r).combo_auxstatsummary[0]=(((r).combo_auxstatsummary[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_AUXSTATSUMMARY.
 *
 */
#define BCM84834_READ_COMBO_AUXSTATSUMMARYr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_AUXSTATSUMMARYr,(_r._combo_auxstatsummary))
#define BCM84834_WRITE_COMBO_AUXSTATSUMMARYr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_AUXSTATSUMMARYr,(_r._combo_auxstatsummary))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_AUXSTATSUMMARYr BCM84834_COMBO_AUXSTATSUMMARYr
#define COMBO_AUXSTATSUMMARYr_SIZE BCM84834_COMBO_AUXSTATSUMMARYr_SIZE
typedef BCM84834_COMBO_AUXSTATSUMMARYr_t COMBO_AUXSTATSUMMARYr_t;
#define COMBO_AUXSTATSUMMARYr_CLR BCM84834_COMBO_AUXSTATSUMMARYr_CLR
#define COMBO_AUXSTATSUMMARYr_SET BCM84834_COMBO_AUXSTATSUMMARYr_SET
#define COMBO_AUXSTATSUMMARYr_GET BCM84834_COMBO_AUXSTATSUMMARYr_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETEf_SET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_COMPLETE_ACKf_SET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ACK_DETECTf_SET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_ABIL_DETECTf_SET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_NEXT_PAGE_WAITf_SET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_GET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_GET
#define COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_SET BCM84834_COMBO_AUXSTATSUMMARYr_AUTONEG_HCDf_SET
#define COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_GET BCM84834_COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_GET
#define COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_SET BCM84834_COMBO_AUXSTATSUMMARYr_PARALLEL_DETECTION_FAULTf_SET
#define COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_GET BCM84834_COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_GET
#define COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_SET BCM84834_COMBO_AUXSTATSUMMARYr_REMOTE_FAULTf_SET
#define COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_GET BCM84834_COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_GET
#define COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_SET BCM84834_COMBO_AUXSTATSUMMARYr_PAGE_RECEIVEDf_SET
#define COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_GET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_GET
#define COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_SET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_AUTONEG_ABILf_SET
#define COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_GET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_GET
#define COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_SET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_PART_NEXT_PAGE_ABILf_SET
#define COMBO_AUXSTATSUMMARYr_LNK_STATUSf_GET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_STATUSf_GET
#define COMBO_AUXSTATSUMMARYr_LNK_STATUSf_SET BCM84834_COMBO_AUXSTATSUMMARYr_LNK_STATUSf_SET
#define COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_GET BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_GET
#define COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_SET BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_RECEIVE_DIRf_SET
#define COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_GET BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_GET
#define COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_SET BCM84834_COMBO_AUXSTATSUMMARYr_PAUSE_RESOL_TRANSMIT_DIRf_SET
#define READ_COMBO_AUXSTATSUMMARYr BCM84834_READ_COMBO_AUXSTATSUMMARYr
#define WRITE_COMBO_AUXSTATSUMMARYr BCM84834_WRITE_COMBO_AUXSTATSUMMARYr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_AUXSTATSUMMARYr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_INTSTAT
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfffa
 * DEVAD:    7
 * DESC:     Interrupt Status Register (copper side only)
 * SIZE:     32
 * FIELDS:
 *     CRC_ERROR        
 *     LINK_STATUS_CHANGE 
 *     LINK_SPEED_CHANGE 
 *     DUPLEX_MODE_CHANGE 
 *     LOCAL_RCV_STATUS_CHANGE 
 *     REMOTE_RCV_STATUS_CHANGE 
 *     SCRAMBLER_SYNC_ERROR 
 *     NEGOTIATED_UNSUPPORT_HCD 
 *     NO_HCD           
 *     HCD_NO_LINK      
 *     AUTONEG_PAGE_RX  
 *     EXCEEDED_LOW_COUNTER 
 *     EXCEEDED_HIGH_COUNTER 
 *     MDIX_STATUS_CHANGE 
 *     ILLEGAL_PAIR_SWAP 
 *     IP_STATUS_CHANGE 
 *
 ******************************************************************************/
#define BCM84834_COMBO_INTSTATr (0x0007fffa | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_INTSTATr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_INTSTAT.
 *
 */
typedef union BCM84834_COMBO_INTSTATr_s {
	uint32_t v[1];
	uint32_t combo_intstat[1];
	uint32_t _combo_intstat;
} BCM84834_COMBO_INTSTATr_t;

#define BCM84834_COMBO_INTSTATr_CLR(r) (r).combo_intstat[0] = 0
#define BCM84834_COMBO_INTSTATr_SET(r,d) (r).combo_intstat[0] = d
#define BCM84834_COMBO_INTSTATr_GET(r) (r).combo_intstat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_INTSTATr_IP_STATUS_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 15) & 0x1)
#define BCM84834_COMBO_INTSTATr_IP_STATUS_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_GET(r) ((((r).combo_intstat[0]) >> 14) & 0x1)
#define BCM84834_COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_COMBO_INTSTATr_MDIX_STATUS_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 13) & 0x1)
#define BCM84834_COMBO_INTSTATr_MDIX_STATUS_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_GET(r) ((((r).combo_intstat[0]) >> 12) & 0x1)
#define BCM84834_COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_GET(r) ((((r).combo_intstat[0]) >> 11) & 0x1)
#define BCM84834_COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_COMBO_INTSTATr_AUTONEG_PAGE_RXf_GET(r) ((((r).combo_intstat[0]) >> 10) & 0x1)
#define BCM84834_COMBO_INTSTATr_AUTONEG_PAGE_RXf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_COMBO_INTSTATr_HCD_NO_LINKf_GET(r) ((((r).combo_intstat[0]) >> 9) & 0x1)
#define BCM84834_COMBO_INTSTATr_HCD_NO_LINKf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_COMBO_INTSTATr_NO_HCDf_GET(r) ((((r).combo_intstat[0]) >> 8) & 0x1)
#define BCM84834_COMBO_INTSTATr_NO_HCDf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_GET(r) ((((r).combo_intstat[0]) >> 7) & 0x1)
#define BCM84834_COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_GET(r) ((((r).combo_intstat[0]) >> 6) & 0x1)
#define BCM84834_COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 5) & 0x1)
#define BCM84834_COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 4) & 0x1)
#define BCM84834_COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 3) & 0x1)
#define BCM84834_COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_COMBO_INTSTATr_LINK_SPEED_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 2) & 0x1)
#define BCM84834_COMBO_INTSTATr_LINK_SPEED_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_COMBO_INTSTATr_LINK_STATUS_CHANGEf_GET(r) ((((r).combo_intstat[0]) >> 1) & 0x1)
#define BCM84834_COMBO_INTSTATr_LINK_STATUS_CHANGEf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_COMBO_INTSTATr_CRC_ERRORf_GET(r) (((r).combo_intstat[0]) & 0x1)
#define BCM84834_COMBO_INTSTATr_CRC_ERRORf_SET(r,f) (r).combo_intstat[0]=(((r).combo_intstat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access COMBO_INTSTAT.
 *
 */
#define BCM84834_READ_COMBO_INTSTATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_INTSTATr,(_r._combo_intstat))
#define BCM84834_WRITE_COMBO_INTSTATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_INTSTATr,(_r._combo_intstat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_INTSTATr BCM84834_COMBO_INTSTATr
#define COMBO_INTSTATr_SIZE BCM84834_COMBO_INTSTATr_SIZE
typedef BCM84834_COMBO_INTSTATr_t COMBO_INTSTATr_t;
#define COMBO_INTSTATr_CLR BCM84834_COMBO_INTSTATr_CLR
#define COMBO_INTSTATr_SET BCM84834_COMBO_INTSTATr_SET
#define COMBO_INTSTATr_GET BCM84834_COMBO_INTSTATr_GET
#define COMBO_INTSTATr_IP_STATUS_CHANGEf_GET BCM84834_COMBO_INTSTATr_IP_STATUS_CHANGEf_GET
#define COMBO_INTSTATr_IP_STATUS_CHANGEf_SET BCM84834_COMBO_INTSTATr_IP_STATUS_CHANGEf_SET
#define COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_GET BCM84834_COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_GET
#define COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_SET BCM84834_COMBO_INTSTATr_ILLEGAL_PAIR_SWAPf_SET
#define COMBO_INTSTATr_MDIX_STATUS_CHANGEf_GET BCM84834_COMBO_INTSTATr_MDIX_STATUS_CHANGEf_GET
#define COMBO_INTSTATr_MDIX_STATUS_CHANGEf_SET BCM84834_COMBO_INTSTATr_MDIX_STATUS_CHANGEf_SET
#define COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_GET BCM84834_COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_GET
#define COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_SET BCM84834_COMBO_INTSTATr_EXCEEDED_HIGH_COUNTERf_SET
#define COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_GET BCM84834_COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_GET
#define COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_SET BCM84834_COMBO_INTSTATr_EXCEEDED_LOW_COUNTERf_SET
#define COMBO_INTSTATr_AUTONEG_PAGE_RXf_GET BCM84834_COMBO_INTSTATr_AUTONEG_PAGE_RXf_GET
#define COMBO_INTSTATr_AUTONEG_PAGE_RXf_SET BCM84834_COMBO_INTSTATr_AUTONEG_PAGE_RXf_SET
#define COMBO_INTSTATr_HCD_NO_LINKf_GET BCM84834_COMBO_INTSTATr_HCD_NO_LINKf_GET
#define COMBO_INTSTATr_HCD_NO_LINKf_SET BCM84834_COMBO_INTSTATr_HCD_NO_LINKf_SET
#define COMBO_INTSTATr_NO_HCDf_GET BCM84834_COMBO_INTSTATr_NO_HCDf_GET
#define COMBO_INTSTATr_NO_HCDf_SET BCM84834_COMBO_INTSTATr_NO_HCDf_SET
#define COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_GET BCM84834_COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_GET
#define COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_SET BCM84834_COMBO_INTSTATr_NEGOTIATED_UNSUPPORT_HCDf_SET
#define COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_GET BCM84834_COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_GET
#define COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_SET BCM84834_COMBO_INTSTATr_SCRAMBLER_SYNC_ERRORf_SET
#define COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_GET BCM84834_COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_GET
#define COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_SET BCM84834_COMBO_INTSTATr_REMOTE_RCV_STATUS_CHANGEf_SET
#define COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_GET BCM84834_COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_GET
#define COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_SET BCM84834_COMBO_INTSTATr_LOCAL_RCV_STATUS_CHANGEf_SET
#define COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_GET BCM84834_COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_GET
#define COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_SET BCM84834_COMBO_INTSTATr_DUPLEX_MODE_CHANGEf_SET
#define COMBO_INTSTATr_LINK_SPEED_CHANGEf_GET BCM84834_COMBO_INTSTATr_LINK_SPEED_CHANGEf_GET
#define COMBO_INTSTATr_LINK_SPEED_CHANGEf_SET BCM84834_COMBO_INTSTATr_LINK_SPEED_CHANGEf_SET
#define COMBO_INTSTATr_LINK_STATUS_CHANGEf_GET BCM84834_COMBO_INTSTATr_LINK_STATUS_CHANGEf_GET
#define COMBO_INTSTATr_LINK_STATUS_CHANGEf_SET BCM84834_COMBO_INTSTATr_LINK_STATUS_CHANGEf_SET
#define COMBO_INTSTATr_CRC_ERRORf_GET BCM84834_COMBO_INTSTATr_CRC_ERRORf_GET
#define COMBO_INTSTATr_CRC_ERRORf_SET BCM84834_COMBO_INTSTATr_CRC_ERRORf_SET
#define READ_COMBO_INTSTATr BCM84834_READ_COMBO_INTSTATr
#define WRITE_COMBO_INTSTATr BCM84834_WRITE_COMBO_INTSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_INTSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  COMBO_INTMASK
 * BLOCKS:   CTRL_10_1FH
 * REGADDR:  0xfffb
 * DEVAD:    7
 * DESC:     Interrupt Mask Register
 * SIZE:     32
 * FIELDS:
 *     INTERRUPT_MASK_VECTOR 
 *
 ******************************************************************************/
#define BCM84834_COMBO_INTMASKr (0x0007fffb | PHY_REG_ACC_BRCM_XE)

#define BCM84834_COMBO_INTMASKr_SIZE 4

/*
 * This structure should be used to declare and program COMBO_INTMASK.
 *
 */
typedef union BCM84834_COMBO_INTMASKr_s {
	uint32_t v[1];
	uint32_t combo_intmask[1];
	uint32_t _combo_intmask;
} BCM84834_COMBO_INTMASKr_t;

#define BCM84834_COMBO_INTMASKr_CLR(r) (r).combo_intmask[0] = 0
#define BCM84834_COMBO_INTMASKr_SET(r,d) (r).combo_intmask[0] = d
#define BCM84834_COMBO_INTMASKr_GET(r) (r).combo_intmask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_GET(r) (((r).combo_intmask[0]) & 0xffff)
#define BCM84834_COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_SET(r,f) (r).combo_intmask[0]=(((r).combo_intmask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access COMBO_INTMASK.
 *
 */
#define BCM84834_READ_COMBO_INTMASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_COMBO_INTMASKr,(_r._combo_intmask))
#define BCM84834_WRITE_COMBO_INTMASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_COMBO_INTMASKr,(_r._combo_intmask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define COMBO_INTMASKr BCM84834_COMBO_INTMASKr
#define COMBO_INTMASKr_SIZE BCM84834_COMBO_INTMASKr_SIZE
typedef BCM84834_COMBO_INTMASKr_t COMBO_INTMASKr_t;
#define COMBO_INTMASKr_CLR BCM84834_COMBO_INTMASKr_CLR
#define COMBO_INTMASKr_SET BCM84834_COMBO_INTMASKr_SET
#define COMBO_INTMASKr_GET BCM84834_COMBO_INTMASKr_GET
#define COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_GET BCM84834_COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_GET
#define COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_SET BCM84834_COMBO_INTMASKr_INTERRUPT_MASK_VECTORf_SET
#define READ_COMBO_INTMASKr BCM84834_READ_COMBO_INTMASKr
#define WRITE_COMBO_INTMASKr BCM84834_WRITE_COMBO_INTMASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_COMBO_INTMASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_DACIF_FIFO_CTRL
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4000
 * DEVAD:    30
 * DESC:     DACIF FIFO Control
 * SIZE:     32
 * FIELDS:
 *     RECENTER_DACIF_FIFO_A 
 *     DISABLE_DACIF_FIFO_A 
 *     RECENTER_DACIF_FIFO_B 
 *     DISABLE_DACIF_FIFO_B 
 *     RECENTER_DACIF_FIFO_C 
 *     DISABLE_DACIF_FIFO_C 
 *     RECENTER_DACIF_FIFO_D 
 *     DISABLE_DACIF_FIFO_D 
 *
 ******************************************************************************/
#define BCM84834_TOP_DACIF_FIFO_CTRLr (0x001e4000 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_DACIF_FIFO_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program TOP_DACIF_FIFO_CTRL.
 *
 */
typedef union BCM84834_TOP_DACIF_FIFO_CTRLr_s {
	uint32_t v[1];
	uint32_t top_dacif_fifo_ctrl[1];
	uint32_t _top_dacif_fifo_ctrl;
} BCM84834_TOP_DACIF_FIFO_CTRLr_t;

#define BCM84834_TOP_DACIF_FIFO_CTRLr_CLR(r) (r).top_dacif_fifo_ctrl[0] = 0
#define BCM84834_TOP_DACIF_FIFO_CTRLr_SET(r,d) (r).top_dacif_fifo_ctrl[0] = d
#define BCM84834_TOP_DACIF_FIFO_CTRLr_GET(r) (r).top_dacif_fifo_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 13) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 12) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 9) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 8) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 5) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 4) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_GET(r) ((((r).top_dacif_fifo_ctrl[0]) >> 1) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_GET(r) (((r).top_dacif_fifo_ctrl[0]) & 0x1)
#define BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_SET(r,f) (r).top_dacif_fifo_ctrl[0]=(((r).top_dacif_fifo_ctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_DACIF_FIFO_CTRL.
 *
 */
#define BCM84834_READ_TOP_DACIF_FIFO_CTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_DACIF_FIFO_CTRLr,(_r._top_dacif_fifo_ctrl))
#define BCM84834_WRITE_TOP_DACIF_FIFO_CTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_DACIF_FIFO_CTRLr,(_r._top_dacif_fifo_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_DACIF_FIFO_CTRLr BCM84834_TOP_DACIF_FIFO_CTRLr
#define TOP_DACIF_FIFO_CTRLr_SIZE BCM84834_TOP_DACIF_FIFO_CTRLr_SIZE
typedef BCM84834_TOP_DACIF_FIFO_CTRLr_t TOP_DACIF_FIFO_CTRLr_t;
#define TOP_DACIF_FIFO_CTRLr_CLR BCM84834_TOP_DACIF_FIFO_CTRLr_CLR
#define TOP_DACIF_FIFO_CTRLr_SET BCM84834_TOP_DACIF_FIFO_CTRLr_SET
#define TOP_DACIF_FIFO_CTRLr_GET BCM84834_TOP_DACIF_FIFO_CTRLr_GET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_GET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_GET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_SET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Df_SET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_GET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_GET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_SET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Df_SET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_GET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_GET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_SET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Cf_SET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_GET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_GET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_SET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Cf_SET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_GET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_GET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_SET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Bf_SET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_GET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_GET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_SET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Bf_SET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_GET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_GET
#define TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_SET BCM84834_TOP_DACIF_FIFO_CTRLr_DISABLE_DACIF_FIFO_Af_SET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_GET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_GET
#define TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_SET BCM84834_TOP_DACIF_FIFO_CTRLr_RECENTER_DACIF_FIFO_Af_SET
#define READ_TOP_DACIF_FIFO_CTRLr BCM84834_READ_TOP_DACIF_FIFO_CTRLr
#define WRITE_TOP_DACIF_FIFO_CTRLr BCM84834_WRITE_TOP_DACIF_FIFO_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_DACIF_FIFO_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_TST_IEN
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4001
 * DEVAD:    30
 * DESC:     Test Input Enable Reg
 * SIZE:     32
 * FIELDS:
 *     TOP_TST_IEN      
 *     LDPC_TST_IEN     
 *
 ******************************************************************************/
#define BCM84834_TOP_TST_IENr (0x001e4001 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_TST_IENr_SIZE 4

/*
 * This structure should be used to declare and program TOP_TST_IEN.
 *
 */
typedef union BCM84834_TOP_TST_IENr_s {
	uint32_t v[1];
	uint32_t top_tst_ien[1];
	uint32_t _top_tst_ien;
} BCM84834_TOP_TST_IENr_t;

#define BCM84834_TOP_TST_IENr_CLR(r) (r).top_tst_ien[0] = 0
#define BCM84834_TOP_TST_IENr_SET(r,d) (r).top_tst_ien[0] = d
#define BCM84834_TOP_TST_IENr_GET(r) (r).top_tst_ien[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_TST_IENr_LDPC_TST_IENf_GET(r) ((((r).top_tst_ien[0]) >> 1) & 0x1)
#define BCM84834_TOP_TST_IENr_LDPC_TST_IENf_SET(r,f) (r).top_tst_ien[0]=(((r).top_tst_ien[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_TST_IENr_TOP_TST_IENf_GET(r) (((r).top_tst_ien[0]) & 0x1)
#define BCM84834_TOP_TST_IENr_TOP_TST_IENf_SET(r,f) (r).top_tst_ien[0]=(((r).top_tst_ien[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_TST_IEN.
 *
 */
#define BCM84834_READ_TOP_TST_IENr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_TST_IENr,(_r._top_tst_ien))
#define BCM84834_WRITE_TOP_TST_IENr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_TST_IENr,(_r._top_tst_ien))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_TST_IENr BCM84834_TOP_TST_IENr
#define TOP_TST_IENr_SIZE BCM84834_TOP_TST_IENr_SIZE
typedef BCM84834_TOP_TST_IENr_t TOP_TST_IENr_t;
#define TOP_TST_IENr_CLR BCM84834_TOP_TST_IENr_CLR
#define TOP_TST_IENr_SET BCM84834_TOP_TST_IENr_SET
#define TOP_TST_IENr_GET BCM84834_TOP_TST_IENr_GET
#define TOP_TST_IENr_LDPC_TST_IENf_GET BCM84834_TOP_TST_IENr_LDPC_TST_IENf_GET
#define TOP_TST_IENr_LDPC_TST_IENf_SET BCM84834_TOP_TST_IENr_LDPC_TST_IENf_SET
#define TOP_TST_IENr_TOP_TST_IENf_GET BCM84834_TOP_TST_IENr_TOP_TST_IENf_GET
#define TOP_TST_IENr_TOP_TST_IENf_SET BCM84834_TOP_TST_IENr_TOP_TST_IENf_SET
#define READ_TOP_TST_IENr BCM84834_READ_TOP_TST_IENr
#define WRITE_TOP_TST_IENr BCM84834_WRITE_TOP_TST_IENr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_TST_IENr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_TST_OEN1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4002
 * DEVAD:    30
 * DESC:     Test Output Enable Reg 1
 * SIZE:     32
 * FIELDS:
 *     LMS_TST_OEN      
 *     ADCCAL_TST_OEN   
 *     MACSEC_TST_OEN   
 *     PTP_TST_OEN      
 *     GPHY_TST_OEN     
 *
 ******************************************************************************/
#define BCM84834_TOP_TST_OEN1r (0x001e4002 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_TST_OEN1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_TST_OEN1.
 *
 */
typedef union BCM84834_TOP_TST_OEN1r_s {
	uint32_t v[1];
	uint32_t top_tst_oen1[1];
	uint32_t _top_tst_oen1;
} BCM84834_TOP_TST_OEN1r_t;

#define BCM84834_TOP_TST_OEN1r_CLR(r) (r).top_tst_oen1[0] = 0
#define BCM84834_TOP_TST_OEN1r_SET(r,d) (r).top_tst_oen1[0] = d
#define BCM84834_TOP_TST_OEN1r_GET(r) (r).top_tst_oen1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_TST_OEN1r_GPHY_TST_OENf_GET(r) ((((r).top_tst_oen1[0]) >> 4) & 0x1)
#define BCM84834_TOP_TST_OEN1r_GPHY_TST_OENf_SET(r,f) (r).top_tst_oen1[0]=(((r).top_tst_oen1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_TST_OEN1r_PTP_TST_OENf_GET(r) ((((r).top_tst_oen1[0]) >> 3) & 0x1)
#define BCM84834_TOP_TST_OEN1r_PTP_TST_OENf_SET(r,f) (r).top_tst_oen1[0]=(((r).top_tst_oen1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_TST_OEN1r_MACSEC_TST_OENf_GET(r) ((((r).top_tst_oen1[0]) >> 2) & 0x1)
#define BCM84834_TOP_TST_OEN1r_MACSEC_TST_OENf_SET(r,f) (r).top_tst_oen1[0]=(((r).top_tst_oen1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_TST_OEN1r_ADCCAL_TST_OENf_GET(r) ((((r).top_tst_oen1[0]) >> 1) & 0x1)
#define BCM84834_TOP_TST_OEN1r_ADCCAL_TST_OENf_SET(r,f) (r).top_tst_oen1[0]=(((r).top_tst_oen1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_TST_OEN1r_LMS_TST_OENf_GET(r) (((r).top_tst_oen1[0]) & 0x1)
#define BCM84834_TOP_TST_OEN1r_LMS_TST_OENf_SET(r,f) (r).top_tst_oen1[0]=(((r).top_tst_oen1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_TST_OEN1.
 *
 */
#define BCM84834_READ_TOP_TST_OEN1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_TST_OEN1r,(_r._top_tst_oen1))
#define BCM84834_WRITE_TOP_TST_OEN1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_TST_OEN1r,(_r._top_tst_oen1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_TST_OEN1r BCM84834_TOP_TST_OEN1r
#define TOP_TST_OEN1r_SIZE BCM84834_TOP_TST_OEN1r_SIZE
typedef BCM84834_TOP_TST_OEN1r_t TOP_TST_OEN1r_t;
#define TOP_TST_OEN1r_CLR BCM84834_TOP_TST_OEN1r_CLR
#define TOP_TST_OEN1r_SET BCM84834_TOP_TST_OEN1r_SET
#define TOP_TST_OEN1r_GET BCM84834_TOP_TST_OEN1r_GET
#define TOP_TST_OEN1r_GPHY_TST_OENf_GET BCM84834_TOP_TST_OEN1r_GPHY_TST_OENf_GET
#define TOP_TST_OEN1r_GPHY_TST_OENf_SET BCM84834_TOP_TST_OEN1r_GPHY_TST_OENf_SET
#define TOP_TST_OEN1r_PTP_TST_OENf_GET BCM84834_TOP_TST_OEN1r_PTP_TST_OENf_GET
#define TOP_TST_OEN1r_PTP_TST_OENf_SET BCM84834_TOP_TST_OEN1r_PTP_TST_OENf_SET
#define TOP_TST_OEN1r_MACSEC_TST_OENf_GET BCM84834_TOP_TST_OEN1r_MACSEC_TST_OENf_GET
#define TOP_TST_OEN1r_MACSEC_TST_OENf_SET BCM84834_TOP_TST_OEN1r_MACSEC_TST_OENf_SET
#define TOP_TST_OEN1r_ADCCAL_TST_OENf_GET BCM84834_TOP_TST_OEN1r_ADCCAL_TST_OENf_GET
#define TOP_TST_OEN1r_ADCCAL_TST_OENf_SET BCM84834_TOP_TST_OEN1r_ADCCAL_TST_OENf_SET
#define TOP_TST_OEN1r_LMS_TST_OENf_GET BCM84834_TOP_TST_OEN1r_LMS_TST_OENf_GET
#define TOP_TST_OEN1r_LMS_TST_OENf_SET BCM84834_TOP_TST_OEN1r_LMS_TST_OENf_SET
#define READ_TOP_TST_OEN1r BCM84834_READ_TOP_TST_OEN1r
#define WRITE_TOP_TST_OEN1r BCM84834_WRITE_TOP_TST_OEN1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_TST_OEN1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_TST_OEN0
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4003
 * DEVAD:    30
 * DESC:     Test Output Enable Reg 0
 * SIZE:     32
 * FIELDS:
 *     TX_D_TST_OEN     
 *     TX_C_TST_OEN     
 *     TX_B_TST_OEN     
 *     TX_A_TST_OEN     
 *     XFIM_TST_OEN     
 *     XFIL_TST_OEN     
 *     DDFS2_TST_OEN    
 *     DDFS1_TST_OEN    
 *     AFE_PLL_TST_OEN  
 *     LDPC_TST_OEN     
 *     PHYC_TST_OEN     
 *     PHASECTL_TST_OEN 
 *     ARMPLL_TST_OEN   
 *     XAUIL_XG_TST_OEN 
 *     XAUIM_XG_TST_OEN 
 *     TOP_TST_OEN      
 *
 ******************************************************************************/
#define BCM84834_TOP_TST_OEN0r (0x001e4003 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_TST_OEN0r_SIZE 4

/*
 * This structure should be used to declare and program TOP_TST_OEN0.
 *
 */
typedef union BCM84834_TOP_TST_OEN0r_s {
	uint32_t v[1];
	uint32_t top_tst_oen0[1];
	uint32_t _top_tst_oen0;
} BCM84834_TOP_TST_OEN0r_t;

#define BCM84834_TOP_TST_OEN0r_CLR(r) (r).top_tst_oen0[0] = 0
#define BCM84834_TOP_TST_OEN0r_SET(r,d) (r).top_tst_oen0[0] = d
#define BCM84834_TOP_TST_OEN0r_GET(r) (r).top_tst_oen0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_TST_OEN0r_TOP_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 15) & 0x1)
#define BCM84834_TOP_TST_OEN0r_TOP_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_TOP_TST_OEN0r_XAUIM_XG_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 14) & 0x1)
#define BCM84834_TOP_TST_OEN0r_XAUIM_XG_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_TST_OEN0r_XAUIL_XG_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 13) & 0x1)
#define BCM84834_TOP_TST_OEN0r_XAUIL_XG_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_TST_OEN0r_ARMPLL_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 12) & 0x1)
#define BCM84834_TOP_TST_OEN0r_ARMPLL_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_TST_OEN0r_PHASECTL_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 11) & 0x1)
#define BCM84834_TOP_TST_OEN0r_PHASECTL_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_TST_OEN0r_PHYC_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 10) & 0x1)
#define BCM84834_TOP_TST_OEN0r_PHYC_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_TST_OEN0r_LDPC_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 9) & 0x1)
#define BCM84834_TOP_TST_OEN0r_LDPC_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_TST_OEN0r_AFE_PLL_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 8) & 0x1)
#define BCM84834_TOP_TST_OEN0r_AFE_PLL_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_TST_OEN0r_DDFS1_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 7) & 0x1)
#define BCM84834_TOP_TST_OEN0r_DDFS1_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_TST_OEN0r_DDFS2_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 6) & 0x1)
#define BCM84834_TOP_TST_OEN0r_DDFS2_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_TOP_TST_OEN0r_XFIL_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 5) & 0x1)
#define BCM84834_TOP_TST_OEN0r_XFIL_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_TST_OEN0r_XFIM_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 4) & 0x1)
#define BCM84834_TOP_TST_OEN0r_XFIM_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_TST_OEN0r_TX_A_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 3) & 0x1)
#define BCM84834_TOP_TST_OEN0r_TX_A_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_TST_OEN0r_TX_B_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 2) & 0x1)
#define BCM84834_TOP_TST_OEN0r_TX_B_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_TST_OEN0r_TX_C_TST_OENf_GET(r) ((((r).top_tst_oen0[0]) >> 1) & 0x1)
#define BCM84834_TOP_TST_OEN0r_TX_C_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_TST_OEN0r_TX_D_TST_OENf_GET(r) (((r).top_tst_oen0[0]) & 0x1)
#define BCM84834_TOP_TST_OEN0r_TX_D_TST_OENf_SET(r,f) (r).top_tst_oen0[0]=(((r).top_tst_oen0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_TST_OEN0.
 *
 */
#define BCM84834_READ_TOP_TST_OEN0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_TST_OEN0r,(_r._top_tst_oen0))
#define BCM84834_WRITE_TOP_TST_OEN0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_TST_OEN0r,(_r._top_tst_oen0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_TST_OEN0r BCM84834_TOP_TST_OEN0r
#define TOP_TST_OEN0r_SIZE BCM84834_TOP_TST_OEN0r_SIZE
typedef BCM84834_TOP_TST_OEN0r_t TOP_TST_OEN0r_t;
#define TOP_TST_OEN0r_CLR BCM84834_TOP_TST_OEN0r_CLR
#define TOP_TST_OEN0r_SET BCM84834_TOP_TST_OEN0r_SET
#define TOP_TST_OEN0r_GET BCM84834_TOP_TST_OEN0r_GET
#define TOP_TST_OEN0r_TOP_TST_OENf_GET BCM84834_TOP_TST_OEN0r_TOP_TST_OENf_GET
#define TOP_TST_OEN0r_TOP_TST_OENf_SET BCM84834_TOP_TST_OEN0r_TOP_TST_OENf_SET
#define TOP_TST_OEN0r_XAUIM_XG_TST_OENf_GET BCM84834_TOP_TST_OEN0r_XAUIM_XG_TST_OENf_GET
#define TOP_TST_OEN0r_XAUIM_XG_TST_OENf_SET BCM84834_TOP_TST_OEN0r_XAUIM_XG_TST_OENf_SET
#define TOP_TST_OEN0r_XAUIL_XG_TST_OENf_GET BCM84834_TOP_TST_OEN0r_XAUIL_XG_TST_OENf_GET
#define TOP_TST_OEN0r_XAUIL_XG_TST_OENf_SET BCM84834_TOP_TST_OEN0r_XAUIL_XG_TST_OENf_SET
#define TOP_TST_OEN0r_ARMPLL_TST_OENf_GET BCM84834_TOP_TST_OEN0r_ARMPLL_TST_OENf_GET
#define TOP_TST_OEN0r_ARMPLL_TST_OENf_SET BCM84834_TOP_TST_OEN0r_ARMPLL_TST_OENf_SET
#define TOP_TST_OEN0r_PHASECTL_TST_OENf_GET BCM84834_TOP_TST_OEN0r_PHASECTL_TST_OENf_GET
#define TOP_TST_OEN0r_PHASECTL_TST_OENf_SET BCM84834_TOP_TST_OEN0r_PHASECTL_TST_OENf_SET
#define TOP_TST_OEN0r_PHYC_TST_OENf_GET BCM84834_TOP_TST_OEN0r_PHYC_TST_OENf_GET
#define TOP_TST_OEN0r_PHYC_TST_OENf_SET BCM84834_TOP_TST_OEN0r_PHYC_TST_OENf_SET
#define TOP_TST_OEN0r_LDPC_TST_OENf_GET BCM84834_TOP_TST_OEN0r_LDPC_TST_OENf_GET
#define TOP_TST_OEN0r_LDPC_TST_OENf_SET BCM84834_TOP_TST_OEN0r_LDPC_TST_OENf_SET
#define TOP_TST_OEN0r_AFE_PLL_TST_OENf_GET BCM84834_TOP_TST_OEN0r_AFE_PLL_TST_OENf_GET
#define TOP_TST_OEN0r_AFE_PLL_TST_OENf_SET BCM84834_TOP_TST_OEN0r_AFE_PLL_TST_OENf_SET
#define TOP_TST_OEN0r_DDFS1_TST_OENf_GET BCM84834_TOP_TST_OEN0r_DDFS1_TST_OENf_GET
#define TOP_TST_OEN0r_DDFS1_TST_OENf_SET BCM84834_TOP_TST_OEN0r_DDFS1_TST_OENf_SET
#define TOP_TST_OEN0r_DDFS2_TST_OENf_GET BCM84834_TOP_TST_OEN0r_DDFS2_TST_OENf_GET
#define TOP_TST_OEN0r_DDFS2_TST_OENf_SET BCM84834_TOP_TST_OEN0r_DDFS2_TST_OENf_SET
#define TOP_TST_OEN0r_XFIL_TST_OENf_GET BCM84834_TOP_TST_OEN0r_XFIL_TST_OENf_GET
#define TOP_TST_OEN0r_XFIL_TST_OENf_SET BCM84834_TOP_TST_OEN0r_XFIL_TST_OENf_SET
#define TOP_TST_OEN0r_XFIM_TST_OENf_GET BCM84834_TOP_TST_OEN0r_XFIM_TST_OENf_GET
#define TOP_TST_OEN0r_XFIM_TST_OENf_SET BCM84834_TOP_TST_OEN0r_XFIM_TST_OENf_SET
#define TOP_TST_OEN0r_TX_A_TST_OENf_GET BCM84834_TOP_TST_OEN0r_TX_A_TST_OENf_GET
#define TOP_TST_OEN0r_TX_A_TST_OENf_SET BCM84834_TOP_TST_OEN0r_TX_A_TST_OENf_SET
#define TOP_TST_OEN0r_TX_B_TST_OENf_GET BCM84834_TOP_TST_OEN0r_TX_B_TST_OENf_GET
#define TOP_TST_OEN0r_TX_B_TST_OENf_SET BCM84834_TOP_TST_OEN0r_TX_B_TST_OENf_SET
#define TOP_TST_OEN0r_TX_C_TST_OENf_GET BCM84834_TOP_TST_OEN0r_TX_C_TST_OENf_GET
#define TOP_TST_OEN0r_TX_C_TST_OENf_SET BCM84834_TOP_TST_OEN0r_TX_C_TST_OENf_SET
#define TOP_TST_OEN0r_TX_D_TST_OENf_GET BCM84834_TOP_TST_OEN0r_TX_D_TST_OENf_GET
#define TOP_TST_OEN0r_TX_D_TST_OENf_SET BCM84834_TOP_TST_OEN0r_TX_D_TST_OENf_SET
#define READ_TOP_TST_OEN0r BCM84834_READ_TOP_TST_OEN0r
#define WRITE_TOP_TST_OEN0r BCM84834_WRITE_TOP_TST_OEN0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_TST_OEN0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_TST_SEL
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4004
 * DEVAD:    30
 * DESC:     Test MUX select Reg
 * SIZE:     32
 * FIELDS:
 *     PHYC_TSTMUX_SEL  
 *     LDPC_TSEL        
 *     ARM_TRACE_SEL    
 *     SPARE_TST        
 *     ARM_JTAG_EN      
 *     GPHY_TSTCLK_EN   
 *
 ******************************************************************************/
#define BCM84834_TOP_TST_SELr (0x001e4004 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_TST_SELr_SIZE 4

/*
 * This structure should be used to declare and program TOP_TST_SEL.
 *
 */
typedef union BCM84834_TOP_TST_SELr_s {
	uint32_t v[1];
	uint32_t top_tst_sel[1];
	uint32_t _top_tst_sel;
} BCM84834_TOP_TST_SELr_t;

#define BCM84834_TOP_TST_SELr_CLR(r) (r).top_tst_sel[0] = 0
#define BCM84834_TOP_TST_SELr_SET(r,d) (r).top_tst_sel[0] = d
#define BCM84834_TOP_TST_SELr_GET(r) (r).top_tst_sel[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_TST_SELr_GPHY_TSTCLK_ENf_GET(r) ((((r).top_tst_sel[0]) >> 12) & 0x1)
#define BCM84834_TOP_TST_SELr_GPHY_TSTCLK_ENf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_TST_SELr_ARM_JTAG_ENf_GET(r) ((((r).top_tst_sel[0]) >> 11) & 0x1)
#define BCM84834_TOP_TST_SELr_ARM_JTAG_ENf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_TST_SELr_SPARE_TSTf_GET(r) ((((r).top_tst_sel[0]) >> 9) & 0x3)
#define BCM84834_TOP_TST_SELr_SPARE_TSTf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCM84834_TOP_TST_SELr_ARM_TRACE_SELf_GET(r) ((((r).top_tst_sel[0]) >> 8) & 0x1)
#define BCM84834_TOP_TST_SELr_ARM_TRACE_SELf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_TST_SELr_LDPC_TSELf_GET(r) ((((r).top_tst_sel[0]) >> 4) & 0xf)
#define BCM84834_TOP_TST_SELr_LDPC_TSELf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCM84834_TOP_TST_SELr_PHYC_TSTMUX_SELf_GET(r) (((r).top_tst_sel[0]) & 0xf)
#define BCM84834_TOP_TST_SELr_PHYC_TSTMUX_SELf_SET(r,f) (r).top_tst_sel[0]=(((r).top_tst_sel[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TOP_TST_SEL.
 *
 */
#define BCM84834_READ_TOP_TST_SELr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_TST_SELr,(_r._top_tst_sel))
#define BCM84834_WRITE_TOP_TST_SELr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_TST_SELr,(_r._top_tst_sel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_TST_SELr BCM84834_TOP_TST_SELr
#define TOP_TST_SELr_SIZE BCM84834_TOP_TST_SELr_SIZE
typedef BCM84834_TOP_TST_SELr_t TOP_TST_SELr_t;
#define TOP_TST_SELr_CLR BCM84834_TOP_TST_SELr_CLR
#define TOP_TST_SELr_SET BCM84834_TOP_TST_SELr_SET
#define TOP_TST_SELr_GET BCM84834_TOP_TST_SELr_GET
#define TOP_TST_SELr_GPHY_TSTCLK_ENf_GET BCM84834_TOP_TST_SELr_GPHY_TSTCLK_ENf_GET
#define TOP_TST_SELr_GPHY_TSTCLK_ENf_SET BCM84834_TOP_TST_SELr_GPHY_TSTCLK_ENf_SET
#define TOP_TST_SELr_ARM_JTAG_ENf_GET BCM84834_TOP_TST_SELr_ARM_JTAG_ENf_GET
#define TOP_TST_SELr_ARM_JTAG_ENf_SET BCM84834_TOP_TST_SELr_ARM_JTAG_ENf_SET
#define TOP_TST_SELr_SPARE_TSTf_GET BCM84834_TOP_TST_SELr_SPARE_TSTf_GET
#define TOP_TST_SELr_SPARE_TSTf_SET BCM84834_TOP_TST_SELr_SPARE_TSTf_SET
#define TOP_TST_SELr_ARM_TRACE_SELf_GET BCM84834_TOP_TST_SELr_ARM_TRACE_SELf_GET
#define TOP_TST_SELr_ARM_TRACE_SELf_SET BCM84834_TOP_TST_SELr_ARM_TRACE_SELf_SET
#define TOP_TST_SELr_LDPC_TSELf_GET BCM84834_TOP_TST_SELr_LDPC_TSELf_GET
#define TOP_TST_SELr_LDPC_TSELf_SET BCM84834_TOP_TST_SELr_LDPC_TSELf_SET
#define TOP_TST_SELr_PHYC_TSTMUX_SELf_GET BCM84834_TOP_TST_SELr_PHYC_TSTMUX_SELf_GET
#define TOP_TST_SELr_PHYC_TSTMUX_SELf_SET BCM84834_TOP_TST_SELr_PHYC_TSTMUX_SELf_SET
#define READ_TOP_TST_SELr BCM84834_READ_TOP_TST_SELr
#define WRITE_TOP_TST_SELr BCM84834_WRITE_TOP_TST_SELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_TST_SELr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_CMD
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4005
 * DEVAD:    30
 * DESC:     Scratch reg 0
 * SIZE:     32
 * FIELDS:
 *     CMD              
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_CMDr (0x001e4005 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_CMDr_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_CMD.
 *
 */
typedef union BCM84834_TOP_MCH_CMDr_s {
	uint32_t v[1];
	uint32_t top_mch_cmd[1];
	uint32_t _top_mch_cmd;
} BCM84834_TOP_MCH_CMDr_t;

#define BCM84834_TOP_MCH_CMDr_CLR(r) (r).top_mch_cmd[0] = 0
#define BCM84834_TOP_MCH_CMDr_SET(r,d) (r).top_mch_cmd[0] = d
#define BCM84834_TOP_MCH_CMDr_GET(r) (r).top_mch_cmd[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_CMDr_CMDf_GET(r) (((r).top_mch_cmd[0]) & 0xffff)
#define BCM84834_TOP_MCH_CMDr_CMDf_SET(r,f) (r).top_mch_cmd[0]=(((r).top_mch_cmd[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_CMD.
 *
 */
#define BCM84834_READ_TOP_MCH_CMDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_CMDr,(_r._top_mch_cmd))
#define BCM84834_WRITE_TOP_MCH_CMDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_CMDr,(_r._top_mch_cmd))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_CMDr BCM84834_TOP_MCH_CMDr
#define TOP_MCH_CMDr_SIZE BCM84834_TOP_MCH_CMDr_SIZE
typedef BCM84834_TOP_MCH_CMDr_t TOP_MCH_CMDr_t;
#define TOP_MCH_CMDr_CLR BCM84834_TOP_MCH_CMDr_CLR
#define TOP_MCH_CMDr_SET BCM84834_TOP_MCH_CMDr_SET
#define TOP_MCH_CMDr_GET BCM84834_TOP_MCH_CMDr_GET
#define TOP_MCH_CMDr_CMDf_GET BCM84834_TOP_MCH_CMDr_CMDf_GET
#define TOP_MCH_CMDr_CMDf_SET BCM84834_TOP_MCH_CMDr_CMDf_SET
#define READ_TOP_MCH_CMDr BCM84834_READ_TOP_MCH_CMDr
#define WRITE_TOP_MCH_CMDr BCM84834_WRITE_TOP_MCH_CMDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_CMDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4006
 * DEVAD:    30
 * DESC:     Scratch reg 1
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH1r (0x001e4006 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH1.
 *
 */
typedef union BCM84834_TOP_SCRATCH1r_s {
	uint32_t v[1];
	uint32_t top_scratch1[1];
	uint32_t _top_scratch1;
} BCM84834_TOP_SCRATCH1r_t;

#define BCM84834_TOP_SCRATCH1r_CLR(r) (r).top_scratch1[0] = 0
#define BCM84834_TOP_SCRATCH1r_SET(r,d) (r).top_scratch1[0] = d
#define BCM84834_TOP_SCRATCH1r_GET(r) (r).top_scratch1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH1r_SCRATCHf_GET(r) (((r).top_scratch1[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH1r_SCRATCHf_SET(r,f) (r).top_scratch1[0]=(((r).top_scratch1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH1.
 *
 */
#define BCM84834_READ_TOP_SCRATCH1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH1r,(_r._top_scratch1))
#define BCM84834_WRITE_TOP_SCRATCH1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH1r,(_r._top_scratch1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH1r BCM84834_TOP_SCRATCH1r
#define TOP_SCRATCH1r_SIZE BCM84834_TOP_SCRATCH1r_SIZE
typedef BCM84834_TOP_SCRATCH1r_t TOP_SCRATCH1r_t;
#define TOP_SCRATCH1r_CLR BCM84834_TOP_SCRATCH1r_CLR
#define TOP_SCRATCH1r_SET BCM84834_TOP_SCRATCH1r_SET
#define TOP_SCRATCH1r_GET BCM84834_TOP_SCRATCH1r_GET
#define TOP_SCRATCH1r_SCRATCHf_GET BCM84834_TOP_SCRATCH1r_SCRATCHf_GET
#define TOP_SCRATCH1r_SCRATCHf_SET BCM84834_TOP_SCRATCH1r_SCRATCHf_SET
#define READ_TOP_SCRATCH1r BCM84834_READ_TOP_SCRATCH1r
#define WRITE_TOP_SCRATCH1r BCM84834_WRITE_TOP_SCRATCH1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH2
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4007
 * DEVAD:    30
 * DESC:     Scratch reg 2
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH2r (0x001e4007 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH2.
 *
 */
typedef union BCM84834_TOP_SCRATCH2r_s {
	uint32_t v[1];
	uint32_t top_scratch2[1];
	uint32_t _top_scratch2;
} BCM84834_TOP_SCRATCH2r_t;

#define BCM84834_TOP_SCRATCH2r_CLR(r) (r).top_scratch2[0] = 0
#define BCM84834_TOP_SCRATCH2r_SET(r,d) (r).top_scratch2[0] = d
#define BCM84834_TOP_SCRATCH2r_GET(r) (r).top_scratch2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH2r_SCRATCHf_GET(r) (((r).top_scratch2[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH2r_SCRATCHf_SET(r,f) (r).top_scratch2[0]=(((r).top_scratch2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH2.
 *
 */
#define BCM84834_READ_TOP_SCRATCH2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH2r,(_r._top_scratch2))
#define BCM84834_WRITE_TOP_SCRATCH2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH2r,(_r._top_scratch2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH2r BCM84834_TOP_SCRATCH2r
#define TOP_SCRATCH2r_SIZE BCM84834_TOP_SCRATCH2r_SIZE
typedef BCM84834_TOP_SCRATCH2r_t TOP_SCRATCH2r_t;
#define TOP_SCRATCH2r_CLR BCM84834_TOP_SCRATCH2r_CLR
#define TOP_SCRATCH2r_SET BCM84834_TOP_SCRATCH2r_SET
#define TOP_SCRATCH2r_GET BCM84834_TOP_SCRATCH2r_GET
#define TOP_SCRATCH2r_SCRATCHf_GET BCM84834_TOP_SCRATCH2r_SCRATCHf_GET
#define TOP_SCRATCH2r_SCRATCHf_SET BCM84834_TOP_SCRATCH2r_SCRATCHf_SET
#define READ_TOP_SCRATCH2r BCM84834_READ_TOP_SCRATCH2r
#define WRITE_TOP_SCRATCH2r BCM84834_WRITE_TOP_SCRATCH2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH3
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4008
 * DEVAD:    30
 * DESC:     Scratch reg 3
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH3r (0x001e4008 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH3r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH3.
 *
 */
typedef union BCM84834_TOP_SCRATCH3r_s {
	uint32_t v[1];
	uint32_t top_scratch3[1];
	uint32_t _top_scratch3;
} BCM84834_TOP_SCRATCH3r_t;

#define BCM84834_TOP_SCRATCH3r_CLR(r) (r).top_scratch3[0] = 0
#define BCM84834_TOP_SCRATCH3r_SET(r,d) (r).top_scratch3[0] = d
#define BCM84834_TOP_SCRATCH3r_GET(r) (r).top_scratch3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH3r_SCRATCHf_GET(r) (((r).top_scratch3[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH3r_SCRATCHf_SET(r,f) (r).top_scratch3[0]=(((r).top_scratch3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH3.
 *
 */
#define BCM84834_READ_TOP_SCRATCH3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH3r,(_r._top_scratch3))
#define BCM84834_WRITE_TOP_SCRATCH3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH3r,(_r._top_scratch3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH3r BCM84834_TOP_SCRATCH3r
#define TOP_SCRATCH3r_SIZE BCM84834_TOP_SCRATCH3r_SIZE
typedef BCM84834_TOP_SCRATCH3r_t TOP_SCRATCH3r_t;
#define TOP_SCRATCH3r_CLR BCM84834_TOP_SCRATCH3r_CLR
#define TOP_SCRATCH3r_SET BCM84834_TOP_SCRATCH3r_SET
#define TOP_SCRATCH3r_GET BCM84834_TOP_SCRATCH3r_GET
#define TOP_SCRATCH3r_SCRATCHf_GET BCM84834_TOP_SCRATCH3r_SCRATCHf_GET
#define TOP_SCRATCH3r_SCRATCHf_SET BCM84834_TOP_SCRATCH3r_SCRATCHf_SET
#define READ_TOP_SCRATCH3r BCM84834_READ_TOP_SCRATCH3r
#define WRITE_TOP_SCRATCH3r BCM84834_WRITE_TOP_SCRATCH3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MDI_PAIR_SWAP_CTRL
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4009
 * DEVAD:    30
 * DESC:     Scratch reg 4
 * SIZE:     32
 * FIELDS:
 *     PAIR_A_SEL       
 *     PAIR_B_SEL       
 *     PAIR_C_SEL       
 *     PAIR_D_SEL       
 *
 ******************************************************************************/
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr (0x001e4009 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program TOP_MDI_PAIR_SWAP_CTRL.
 *
 */
typedef union BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_s {
	uint32_t v[1];
	uint32_t top_mdi_pair_swap_ctrl[1];
	uint32_t _top_mdi_pair_swap_ctrl;
} BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_t;

#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_CLR(r) (r).top_mdi_pair_swap_ctrl[0] = 0
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_SET(r,d) (r).top_mdi_pair_swap_ctrl[0] = d
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_GET(r) (r).top_mdi_pair_swap_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_GET(r) ((((r).top_mdi_pair_swap_ctrl[0]) >> 6) & 0x3)
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_SET(r,f) (r).top_mdi_pair_swap_ctrl[0]=(((r).top_mdi_pair_swap_ctrl[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_GET(r) ((((r).top_mdi_pair_swap_ctrl[0]) >> 4) & 0x3)
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_SET(r,f) (r).top_mdi_pair_swap_ctrl[0]=(((r).top_mdi_pair_swap_ctrl[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_GET(r) ((((r).top_mdi_pair_swap_ctrl[0]) >> 2) & 0x3)
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_SET(r,f) (r).top_mdi_pair_swap_ctrl[0]=(((r).top_mdi_pair_swap_ctrl[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_GET(r) (((r).top_mdi_pair_swap_ctrl[0]) & 0x3)
#define BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_SET(r,f) (r).top_mdi_pair_swap_ctrl[0]=(((r).top_mdi_pair_swap_ctrl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TOP_MDI_PAIR_SWAP_CTRL.
 *
 */
#define BCM84834_READ_TOP_MDI_PAIR_SWAP_CTRLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MDI_PAIR_SWAP_CTRLr,(_r._top_mdi_pair_swap_ctrl))
#define BCM84834_WRITE_TOP_MDI_PAIR_SWAP_CTRLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MDI_PAIR_SWAP_CTRLr,(_r._top_mdi_pair_swap_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MDI_PAIR_SWAP_CTRLr BCM84834_TOP_MDI_PAIR_SWAP_CTRLr
#define TOP_MDI_PAIR_SWAP_CTRLr_SIZE BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_SIZE
typedef BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_t TOP_MDI_PAIR_SWAP_CTRLr_t;
#define TOP_MDI_PAIR_SWAP_CTRLr_CLR BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_CLR
#define TOP_MDI_PAIR_SWAP_CTRLr_SET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_SET
#define TOP_MDI_PAIR_SWAP_CTRLr_GET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_GET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_GET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_GET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_SET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_D_SELf_SET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_GET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_GET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_SET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_C_SELf_SET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_GET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_GET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_SET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_B_SELf_SET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_GET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_GET
#define TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_SET BCM84834_TOP_MDI_PAIR_SWAP_CTRLr_PAIR_A_SELf_SET
#define READ_TOP_MDI_PAIR_SWAP_CTRLr BCM84834_READ_TOP_MDI_PAIR_SWAP_CTRLr
#define WRITE_TOP_MDI_PAIR_SWAP_CTRLr BCM84834_WRITE_TOP_MDI_PAIR_SWAP_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MDI_PAIR_SWAP_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH5
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400a
 * DEVAD:    30
 * DESC:     Scratch reg 5
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH5r (0x001e400a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH5r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH5.
 *
 */
typedef union BCM84834_TOP_SCRATCH5r_s {
	uint32_t v[1];
	uint32_t top_scratch5[1];
	uint32_t _top_scratch5;
} BCM84834_TOP_SCRATCH5r_t;

#define BCM84834_TOP_SCRATCH5r_CLR(r) (r).top_scratch5[0] = 0
#define BCM84834_TOP_SCRATCH5r_SET(r,d) (r).top_scratch5[0] = d
#define BCM84834_TOP_SCRATCH5r_GET(r) (r).top_scratch5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH5r_SCRATCHf_GET(r) (((r).top_scratch5[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH5r_SCRATCHf_SET(r,f) (r).top_scratch5[0]=(((r).top_scratch5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH5.
 *
 */
#define BCM84834_READ_TOP_SCRATCH5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH5r,(_r._top_scratch5))
#define BCM84834_WRITE_TOP_SCRATCH5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH5r,(_r._top_scratch5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH5r BCM84834_TOP_SCRATCH5r
#define TOP_SCRATCH5r_SIZE BCM84834_TOP_SCRATCH5r_SIZE
typedef BCM84834_TOP_SCRATCH5r_t TOP_SCRATCH5r_t;
#define TOP_SCRATCH5r_CLR BCM84834_TOP_SCRATCH5r_CLR
#define TOP_SCRATCH5r_SET BCM84834_TOP_SCRATCH5r_SET
#define TOP_SCRATCH5r_GET BCM84834_TOP_SCRATCH5r_GET
#define TOP_SCRATCH5r_SCRATCHf_GET BCM84834_TOP_SCRATCH5r_SCRATCHf_GET
#define TOP_SCRATCH5r_SCRATCHf_SET BCM84834_TOP_SCRATCH5r_SCRATCHf_SET
#define READ_TOP_SCRATCH5r BCM84834_READ_TOP_SCRATCH5r
#define WRITE_TOP_SCRATCH5r BCM84834_WRITE_TOP_SCRATCH5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH6
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400b
 * DEVAD:    30
 * DESC:     Scratch reg 6
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH6r (0x001e400b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH6r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH6.
 *
 */
typedef union BCM84834_TOP_SCRATCH6r_s {
	uint32_t v[1];
	uint32_t top_scratch6[1];
	uint32_t _top_scratch6;
} BCM84834_TOP_SCRATCH6r_t;

#define BCM84834_TOP_SCRATCH6r_CLR(r) (r).top_scratch6[0] = 0
#define BCM84834_TOP_SCRATCH6r_SET(r,d) (r).top_scratch6[0] = d
#define BCM84834_TOP_SCRATCH6r_GET(r) (r).top_scratch6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH6r_SCRATCHf_GET(r) (((r).top_scratch6[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH6r_SCRATCHf_SET(r,f) (r).top_scratch6[0]=(((r).top_scratch6[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH6.
 *
 */
#define BCM84834_READ_TOP_SCRATCH6r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH6r,(_r._top_scratch6))
#define BCM84834_WRITE_TOP_SCRATCH6r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH6r,(_r._top_scratch6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH6r BCM84834_TOP_SCRATCH6r
#define TOP_SCRATCH6r_SIZE BCM84834_TOP_SCRATCH6r_SIZE
typedef BCM84834_TOP_SCRATCH6r_t TOP_SCRATCH6r_t;
#define TOP_SCRATCH6r_CLR BCM84834_TOP_SCRATCH6r_CLR
#define TOP_SCRATCH6r_SET BCM84834_TOP_SCRATCH6r_SET
#define TOP_SCRATCH6r_GET BCM84834_TOP_SCRATCH6r_GET
#define TOP_SCRATCH6r_SCRATCHf_GET BCM84834_TOP_SCRATCH6r_SCRATCHf_GET
#define TOP_SCRATCH6r_SCRATCHf_SET BCM84834_TOP_SCRATCH6r_SCRATCHf_SET
#define READ_TOP_SCRATCH6r BCM84834_READ_TOP_SCRATCH6r
#define WRITE_TOP_SCRATCH6r BCM84834_WRITE_TOP_SCRATCH6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH7
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400c
 * DEVAD:    30
 * DESC:     Scratch reg 7
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH7r (0x001e400c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH7r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH7.
 *
 */
typedef union BCM84834_TOP_SCRATCH7r_s {
	uint32_t v[1];
	uint32_t top_scratch7[1];
	uint32_t _top_scratch7;
} BCM84834_TOP_SCRATCH7r_t;

#define BCM84834_TOP_SCRATCH7r_CLR(r) (r).top_scratch7[0] = 0
#define BCM84834_TOP_SCRATCH7r_SET(r,d) (r).top_scratch7[0] = d
#define BCM84834_TOP_SCRATCH7r_GET(r) (r).top_scratch7[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH7r_SCRATCHf_GET(r) (((r).top_scratch7[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH7r_SCRATCHf_SET(r,f) (r).top_scratch7[0]=(((r).top_scratch7[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH7.
 *
 */
#define BCM84834_READ_TOP_SCRATCH7r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH7r,(_r._top_scratch7))
#define BCM84834_WRITE_TOP_SCRATCH7r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH7r,(_r._top_scratch7))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH7r BCM84834_TOP_SCRATCH7r
#define TOP_SCRATCH7r_SIZE BCM84834_TOP_SCRATCH7r_SIZE
typedef BCM84834_TOP_SCRATCH7r_t TOP_SCRATCH7r_t;
#define TOP_SCRATCH7r_CLR BCM84834_TOP_SCRATCH7r_CLR
#define TOP_SCRATCH7r_SET BCM84834_TOP_SCRATCH7r_SET
#define TOP_SCRATCH7r_GET BCM84834_TOP_SCRATCH7r_GET
#define TOP_SCRATCH7r_SCRATCHf_GET BCM84834_TOP_SCRATCH7r_SCRATCHf_GET
#define TOP_SCRATCH7r_SCRATCHf_SET BCM84834_TOP_SCRATCH7r_SCRATCHf_SET
#define READ_TOP_SCRATCH7r BCM84834_READ_TOP_SCRATCH7r
#define WRITE_TOP_SCRATCH7r BCM84834_WRITE_TOP_SCRATCH7r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH7r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LINK_STATUS
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400d
 * DEVAD:    30
 * DESC:     Scratch reg 8
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *     COPPER_DETECT    
 *     COPPER_SPEED     
 *     COPPER_LINK      
 *     MAC_LINK         
 *     SPIROM_CRC_STAT  
 *
 ******************************************************************************/
#define BCM84834_TOP_LINK_STATUSr (0x001e400d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LINK_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LINK_STATUS.
 *
 */
typedef union BCM84834_TOP_LINK_STATUSr_s {
	uint32_t v[1];
	uint32_t top_link_status[1];
	uint32_t _top_link_status;
} BCM84834_TOP_LINK_STATUSr_t;

#define BCM84834_TOP_LINK_STATUSr_CLR(r) (r).top_link_status[0] = 0
#define BCM84834_TOP_LINK_STATUSr_SET(r,d) (r).top_link_status[0] = d
#define BCM84834_TOP_LINK_STATUSr_GET(r) (r).top_link_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LINK_STATUSr_SCRATCHf_GET(r) (((r).top_link_status[0]) & 0xffff)
#define BCM84834_TOP_LINK_STATUSr_SCRATCHf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))
#define BCM84834_TOP_LINK_STATUSr_SPIROM_CRC_STATf_GET(r) ((((r).top_link_status[0]) >> 14) & 0x3)
#define BCM84834_TOP_LINK_STATUSr_SPIROM_CRC_STATf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCM84834_TOP_LINK_STATUSr_MAC_LINKf_GET(r) ((((r).top_link_status[0]) >> 13) & 0x1)
#define BCM84834_TOP_LINK_STATUSr_MAC_LINKf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_LINK_STATUSr_COPPER_LINKf_GET(r) ((((r).top_link_status[0]) >> 5) & 0x1)
#define BCM84834_TOP_LINK_STATUSr_COPPER_LINKf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_LINK_STATUSr_COPPER_SPEEDf_GET(r) ((((r).top_link_status[0]) >> 3) & 0x3)
#define BCM84834_TOP_LINK_STATUSr_COPPER_SPEEDf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCM84834_TOP_LINK_STATUSr_COPPER_DETECTf_GET(r) ((((r).top_link_status[0]) >> 1) & 0x1)
#define BCM84834_TOP_LINK_STATUSr_COPPER_DETECTf_SET(r,f) (r).top_link_status[0]=(((r).top_link_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access TOP_LINK_STATUS.
 *
 */
#define BCM84834_READ_TOP_LINK_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LINK_STATUSr,(_r._top_link_status))
#define BCM84834_WRITE_TOP_LINK_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LINK_STATUSr,(_r._top_link_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LINK_STATUSr BCM84834_TOP_LINK_STATUSr
#define TOP_LINK_STATUSr_SIZE BCM84834_TOP_LINK_STATUSr_SIZE
typedef BCM84834_TOP_LINK_STATUSr_t TOP_LINK_STATUSr_t;
#define TOP_LINK_STATUSr_CLR BCM84834_TOP_LINK_STATUSr_CLR
#define TOP_LINK_STATUSr_SET BCM84834_TOP_LINK_STATUSr_SET
#define TOP_LINK_STATUSr_GET BCM84834_TOP_LINK_STATUSr_GET
#define TOP_LINK_STATUSr_SCRATCHf_GET BCM84834_TOP_LINK_STATUSr_SCRATCHf_GET
#define TOP_LINK_STATUSr_SCRATCHf_SET BCM84834_TOP_LINK_STATUSr_SCRATCHf_SET
#define TOP_LINK_STATUSr_SPIROM_CRC_STATf_GET BCM84834_TOP_LINK_STATUSr_SPIROM_CRC_STATf_GET
#define TOP_LINK_STATUSr_SPIROM_CRC_STATf_SET BCM84834_TOP_LINK_STATUSr_SPIROM_CRC_STATf_SET
#define TOP_LINK_STATUSr_MAC_LINKf_GET BCM84834_TOP_LINK_STATUSr_MAC_LINKf_GET
#define TOP_LINK_STATUSr_MAC_LINKf_SET BCM84834_TOP_LINK_STATUSr_MAC_LINKf_SET
#define TOP_LINK_STATUSr_COPPER_LINKf_GET BCM84834_TOP_LINK_STATUSr_COPPER_LINKf_GET
#define TOP_LINK_STATUSr_COPPER_LINKf_SET BCM84834_TOP_LINK_STATUSr_COPPER_LINKf_SET
#define TOP_LINK_STATUSr_COPPER_SPEEDf_GET BCM84834_TOP_LINK_STATUSr_COPPER_SPEEDf_GET
#define TOP_LINK_STATUSr_COPPER_SPEEDf_SET BCM84834_TOP_LINK_STATUSr_COPPER_SPEEDf_SET
#define TOP_LINK_STATUSr_COPPER_DETECTf_GET BCM84834_TOP_LINK_STATUSr_COPPER_DETECTf_GET
#define TOP_LINK_STATUSr_COPPER_DETECTf_SET BCM84834_TOP_LINK_STATUSr_COPPER_DETECTf_SET
#define READ_TOP_LINK_STATUSr BCM84834_READ_TOP_LINK_STATUSr
#define WRITE_TOP_LINK_STATUSr BCM84834_WRITE_TOP_LINK_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LINK_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_USER_RQ1_STAT
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400e
 * DEVAD:    30
 * DESC:     Scratch reg 9
 * SIZE:     32
 * FIELDS:
 *     STRAP_CHG_OK     
 *
 ******************************************************************************/
#define BCM84834_TOP_USER_RQ1_STATr (0x001e400e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_USER_RQ1_STATr_SIZE 4

/*
 * This structure should be used to declare and program TOP_USER_RQ1_STAT.
 *
 */
typedef union BCM84834_TOP_USER_RQ1_STATr_s {
	uint32_t v[1];
	uint32_t top_user_rq1_stat[1];
	uint32_t _top_user_rq1_stat;
} BCM84834_TOP_USER_RQ1_STATr_t;

#define BCM84834_TOP_USER_RQ1_STATr_CLR(r) (r).top_user_rq1_stat[0] = 0
#define BCM84834_TOP_USER_RQ1_STATr_SET(r,d) (r).top_user_rq1_stat[0] = d
#define BCM84834_TOP_USER_RQ1_STATr_GET(r) (r).top_user_rq1_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_USER_RQ1_STATr_STRAP_CHG_OKf_GET(r) ((((r).top_user_rq1_stat[0]) >> 1) & 0x1)
#define BCM84834_TOP_USER_RQ1_STATr_STRAP_CHG_OKf_SET(r,f) (r).top_user_rq1_stat[0]=(((r).top_user_rq1_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access TOP_USER_RQ1_STAT.
 *
 */
#define BCM84834_READ_TOP_USER_RQ1_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_USER_RQ1_STATr,(_r._top_user_rq1_stat))
#define BCM84834_WRITE_TOP_USER_RQ1_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_USER_RQ1_STATr,(_r._top_user_rq1_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_USER_RQ1_STATr BCM84834_TOP_USER_RQ1_STATr
#define TOP_USER_RQ1_STATr_SIZE BCM84834_TOP_USER_RQ1_STATr_SIZE
typedef BCM84834_TOP_USER_RQ1_STATr_t TOP_USER_RQ1_STATr_t;
#define TOP_USER_RQ1_STATr_CLR BCM84834_TOP_USER_RQ1_STATr_CLR
#define TOP_USER_RQ1_STATr_SET BCM84834_TOP_USER_RQ1_STATr_SET
#define TOP_USER_RQ1_STATr_GET BCM84834_TOP_USER_RQ1_STATr_GET
#define TOP_USER_RQ1_STATr_STRAP_CHG_OKf_GET BCM84834_TOP_USER_RQ1_STATr_STRAP_CHG_OKf_GET
#define TOP_USER_RQ1_STATr_STRAP_CHG_OKf_SET BCM84834_TOP_USER_RQ1_STATr_STRAP_CHG_OKf_SET
#define READ_TOP_USER_RQ1_STATr BCM84834_READ_TOP_USER_RQ1_STATr
#define WRITE_TOP_USER_RQ1_STATr BCM84834_WRITE_TOP_USER_RQ1_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_USER_RQ1_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_FW_VER
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x400f
 * DEVAD:    30
 * DESC:     Scratch reg 10
 * SIZE:     32
 * FIELDS:
 *     BRANCH           
 *     MAIN             
 *     CHIP_REV         
 *
 ******************************************************************************/
#define BCM84834_TOP_FW_VERr (0x001e400f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_FW_VERr_SIZE 4

/*
 * This structure should be used to declare and program TOP_FW_VER.
 *
 */
typedef union BCM84834_TOP_FW_VERr_s {
	uint32_t v[1];
	uint32_t top_fw_ver[1];
	uint32_t _top_fw_ver;
} BCM84834_TOP_FW_VERr_t;

#define BCM84834_TOP_FW_VERr_CLR(r) (r).top_fw_ver[0] = 0
#define BCM84834_TOP_FW_VERr_SET(r,d) (r).top_fw_ver[0] = d
#define BCM84834_TOP_FW_VERr_GET(r) (r).top_fw_ver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_FW_VERr_CHIP_REVf_GET(r) ((((r).top_fw_ver[0]) >> 12) & 0xf)
#define BCM84834_TOP_FW_VERr_CHIP_REVf_SET(r,f) (r).top_fw_ver[0]=(((r).top_fw_ver[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_TOP_FW_VERr_MAINf_GET(r) ((((r).top_fw_ver[0]) >> 7) & 0x1f)
#define BCM84834_TOP_FW_VERr_MAINf_SET(r,f) (r).top_fw_ver[0]=(((r).top_fw_ver[0] & ~((uint32_t)0x1f << 7)) | ((((uint32_t)f) & 0x1f) << 7))
#define BCM84834_TOP_FW_VERr_BRANCHf_GET(r) (((r).top_fw_ver[0]) & 0x7f)
#define BCM84834_TOP_FW_VERr_BRANCHf_SET(r,f) (r).top_fw_ver[0]=(((r).top_fw_ver[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access TOP_FW_VER.
 *
 */
#define BCM84834_READ_TOP_FW_VERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_FW_VERr,(_r._top_fw_ver))
#define BCM84834_WRITE_TOP_FW_VERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_FW_VERr,(_r._top_fw_ver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_FW_VERr BCM84834_TOP_FW_VERr
#define TOP_FW_VERr_SIZE BCM84834_TOP_FW_VERr_SIZE
typedef BCM84834_TOP_FW_VERr_t TOP_FW_VERr_t;
#define TOP_FW_VERr_CLR BCM84834_TOP_FW_VERr_CLR
#define TOP_FW_VERr_SET BCM84834_TOP_FW_VERr_SET
#define TOP_FW_VERr_GET BCM84834_TOP_FW_VERr_GET
#define TOP_FW_VERr_CHIP_REVf_GET BCM84834_TOP_FW_VERr_CHIP_REVf_GET
#define TOP_FW_VERr_CHIP_REVf_SET BCM84834_TOP_FW_VERr_CHIP_REVf_SET
#define TOP_FW_VERr_MAINf_GET BCM84834_TOP_FW_VERr_MAINf_GET
#define TOP_FW_VERr_MAINf_SET BCM84834_TOP_FW_VERr_MAINf_SET
#define TOP_FW_VERr_BRANCHf_GET BCM84834_TOP_FW_VERr_BRANCHf_GET
#define TOP_FW_VERr_BRANCHf_SET BCM84834_TOP_FW_VERr_BRANCHf_SET
#define READ_TOP_FW_VERr BCM84834_READ_TOP_FW_VERr
#define WRITE_TOP_FW_VERr BCM84834_WRITE_TOP_FW_VERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_FW_VERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_FW_DATE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4010
 * DEVAD:    30
 * DESC:     Scratch reg 11
 * SIZE:     32
 * FIELDS:
 *     YEAR             
 *     DAY              
 *     MONTH            
 *
 ******************************************************************************/
#define BCM84834_TOP_FW_DATEr (0x001e4010 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_FW_DATEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_FW_DATE.
 *
 */
typedef union BCM84834_TOP_FW_DATEr_s {
	uint32_t v[1];
	uint32_t top_fw_date[1];
	uint32_t _top_fw_date;
} BCM84834_TOP_FW_DATEr_t;

#define BCM84834_TOP_FW_DATEr_CLR(r) (r).top_fw_date[0] = 0
#define BCM84834_TOP_FW_DATEr_SET(r,d) (r).top_fw_date[0] = d
#define BCM84834_TOP_FW_DATEr_GET(r) (r).top_fw_date[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_FW_DATEr_MONTHf_GET(r) ((((r).top_fw_date[0]) >> 9) & 0xf)
#define BCM84834_TOP_FW_DATEr_MONTHf_SET(r,f) (r).top_fw_date[0]=(((r).top_fw_date[0] & ~((uint32_t)0xf << 9)) | ((((uint32_t)f) & 0xf) << 9))
#define BCM84834_TOP_FW_DATEr_DAYf_GET(r) ((((r).top_fw_date[0]) >> 4) & 0x1f)
#define BCM84834_TOP_FW_DATEr_DAYf_SET(r,f) (r).top_fw_date[0]=(((r).top_fw_date[0] & ~((uint32_t)0x1f << 4)) | ((((uint32_t)f) & 0x1f) << 4))
#define BCM84834_TOP_FW_DATEr_YEARf_GET(r) (((r).top_fw_date[0]) & 0xf)
#define BCM84834_TOP_FW_DATEr_YEARf_SET(r,f) (r).top_fw_date[0]=(((r).top_fw_date[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TOP_FW_DATE.
 *
 */
#define BCM84834_READ_TOP_FW_DATEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_FW_DATEr,(_r._top_fw_date))
#define BCM84834_WRITE_TOP_FW_DATEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_FW_DATEr,(_r._top_fw_date))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_FW_DATEr BCM84834_TOP_FW_DATEr
#define TOP_FW_DATEr_SIZE BCM84834_TOP_FW_DATEr_SIZE
typedef BCM84834_TOP_FW_DATEr_t TOP_FW_DATEr_t;
#define TOP_FW_DATEr_CLR BCM84834_TOP_FW_DATEr_CLR
#define TOP_FW_DATEr_SET BCM84834_TOP_FW_DATEr_SET
#define TOP_FW_DATEr_GET BCM84834_TOP_FW_DATEr_GET
#define TOP_FW_DATEr_MONTHf_GET BCM84834_TOP_FW_DATEr_MONTHf_GET
#define TOP_FW_DATEr_MONTHf_SET BCM84834_TOP_FW_DATEr_MONTHf_SET
#define TOP_FW_DATEr_DAYf_GET BCM84834_TOP_FW_DATEr_DAYf_GET
#define TOP_FW_DATEr_DAYf_SET BCM84834_TOP_FW_DATEr_DAYf_SET
#define TOP_FW_DATEr_YEARf_GET BCM84834_TOP_FW_DATEr_YEARf_GET
#define TOP_FW_DATEr_YEARf_SET BCM84834_TOP_FW_DATEr_YEARf_SET
#define READ_TOP_FW_DATEr BCM84834_READ_TOP_FW_DATEr
#define WRITE_TOP_FW_DATEr BCM84834_WRITE_TOP_FW_DATEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_FW_DATEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH12
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4011
 * DEVAD:    30
 * DESC:     Scratch reg 12
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH12r (0x001e4011 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH12r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH12.
 *
 */
typedef union BCM84834_TOP_SCRATCH12r_s {
	uint32_t v[1];
	uint32_t top_scratch12[1];
	uint32_t _top_scratch12;
} BCM84834_TOP_SCRATCH12r_t;

#define BCM84834_TOP_SCRATCH12r_CLR(r) (r).top_scratch12[0] = 0
#define BCM84834_TOP_SCRATCH12r_SET(r,d) (r).top_scratch12[0] = d
#define BCM84834_TOP_SCRATCH12r_GET(r) (r).top_scratch12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH12r_SCRATCHf_GET(r) (((r).top_scratch12[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH12r_SCRATCHf_SET(r,f) (r).top_scratch12[0]=(((r).top_scratch12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH12.
 *
 */
#define BCM84834_READ_TOP_SCRATCH12r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH12r,(_r._top_scratch12))
#define BCM84834_WRITE_TOP_SCRATCH12r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH12r,(_r._top_scratch12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH12r BCM84834_TOP_SCRATCH12r
#define TOP_SCRATCH12r_SIZE BCM84834_TOP_SCRATCH12r_SIZE
typedef BCM84834_TOP_SCRATCH12r_t TOP_SCRATCH12r_t;
#define TOP_SCRATCH12r_CLR BCM84834_TOP_SCRATCH12r_CLR
#define TOP_SCRATCH12r_SET BCM84834_TOP_SCRATCH12r_SET
#define TOP_SCRATCH12r_GET BCM84834_TOP_SCRATCH12r_GET
#define TOP_SCRATCH12r_SCRATCHf_GET BCM84834_TOP_SCRATCH12r_SCRATCHf_GET
#define TOP_SCRATCH12r_SCRATCHf_SET BCM84834_TOP_SCRATCH12r_SCRATCHf_SET
#define READ_TOP_SCRATCH12r BCM84834_READ_TOP_SCRATCH12r
#define WRITE_TOP_SCRATCH12r BCM84834_WRITE_TOP_SCRATCH12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH13
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4012
 * DEVAD:    30
 * DESC:     Scratch reg 13
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH13r (0x001e4012 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH13r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH13.
 *
 */
typedef union BCM84834_TOP_SCRATCH13r_s {
	uint32_t v[1];
	uint32_t top_scratch13[1];
	uint32_t _top_scratch13;
} BCM84834_TOP_SCRATCH13r_t;

#define BCM84834_TOP_SCRATCH13r_CLR(r) (r).top_scratch13[0] = 0
#define BCM84834_TOP_SCRATCH13r_SET(r,d) (r).top_scratch13[0] = d
#define BCM84834_TOP_SCRATCH13r_GET(r) (r).top_scratch13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH13r_SCRATCHf_GET(r) (((r).top_scratch13[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH13r_SCRATCHf_SET(r,f) (r).top_scratch13[0]=(((r).top_scratch13[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH13.
 *
 */
#define BCM84834_READ_TOP_SCRATCH13r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH13r,(_r._top_scratch13))
#define BCM84834_WRITE_TOP_SCRATCH13r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH13r,(_r._top_scratch13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH13r BCM84834_TOP_SCRATCH13r
#define TOP_SCRATCH13r_SIZE BCM84834_TOP_SCRATCH13r_SIZE
typedef BCM84834_TOP_SCRATCH13r_t TOP_SCRATCH13r_t;
#define TOP_SCRATCH13r_CLR BCM84834_TOP_SCRATCH13r_CLR
#define TOP_SCRATCH13r_SET BCM84834_TOP_SCRATCH13r_SET
#define TOP_SCRATCH13r_GET BCM84834_TOP_SCRATCH13r_GET
#define TOP_SCRATCH13r_SCRATCHf_GET BCM84834_TOP_SCRATCH13r_SCRATCHf_GET
#define TOP_SCRATCH13r_SCRATCHf_SET BCM84834_TOP_SCRATCH13r_SCRATCHf_SET
#define READ_TOP_SCRATCH13r BCM84834_READ_TOP_SCRATCH13r
#define WRITE_TOP_SCRATCH13r BCM84834_WRITE_TOP_SCRATCH13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH14
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4013
 * DEVAD:    30
 * DESC:     Scratch reg 14
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH14r (0x001e4013 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH14r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH14.
 *
 */
typedef union BCM84834_TOP_SCRATCH14r_s {
	uint32_t v[1];
	uint32_t top_scratch14[1];
	uint32_t _top_scratch14;
} BCM84834_TOP_SCRATCH14r_t;

#define BCM84834_TOP_SCRATCH14r_CLR(r) (r).top_scratch14[0] = 0
#define BCM84834_TOP_SCRATCH14r_SET(r,d) (r).top_scratch14[0] = d
#define BCM84834_TOP_SCRATCH14r_GET(r) (r).top_scratch14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH14r_SCRATCHf_GET(r) (((r).top_scratch14[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH14r_SCRATCHf_SET(r,f) (r).top_scratch14[0]=(((r).top_scratch14[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH14.
 *
 */
#define BCM84834_READ_TOP_SCRATCH14r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH14r,(_r._top_scratch14))
#define BCM84834_WRITE_TOP_SCRATCH14r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH14r,(_r._top_scratch14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH14r BCM84834_TOP_SCRATCH14r
#define TOP_SCRATCH14r_SIZE BCM84834_TOP_SCRATCH14r_SIZE
typedef BCM84834_TOP_SCRATCH14r_t TOP_SCRATCH14r_t;
#define TOP_SCRATCH14r_CLR BCM84834_TOP_SCRATCH14r_CLR
#define TOP_SCRATCH14r_SET BCM84834_TOP_SCRATCH14r_SET
#define TOP_SCRATCH14r_GET BCM84834_TOP_SCRATCH14r_GET
#define TOP_SCRATCH14r_SCRATCHf_GET BCM84834_TOP_SCRATCH14r_SCRATCHf_GET
#define TOP_SCRATCH14r_SCRATCHf_SET BCM84834_TOP_SCRATCH14r_SCRATCHf_SET
#define READ_TOP_SCRATCH14r BCM84834_READ_TOP_SCRATCH14r
#define WRITE_TOP_SCRATCH14r BCM84834_WRITE_TOP_SCRATCH14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH15
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4014
 * DEVAD:    30
 * DESC:     Scratch reg 15
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH15r (0x001e4014 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH15r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH15.
 *
 */
typedef union BCM84834_TOP_SCRATCH15r_s {
	uint32_t v[1];
	uint32_t top_scratch15[1];
	uint32_t _top_scratch15;
} BCM84834_TOP_SCRATCH15r_t;

#define BCM84834_TOP_SCRATCH15r_CLR(r) (r).top_scratch15[0] = 0
#define BCM84834_TOP_SCRATCH15r_SET(r,d) (r).top_scratch15[0] = d
#define BCM84834_TOP_SCRATCH15r_GET(r) (r).top_scratch15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH15r_SCRATCHf_GET(r) (((r).top_scratch15[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH15r_SCRATCHf_SET(r,f) (r).top_scratch15[0]=(((r).top_scratch15[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH15.
 *
 */
#define BCM84834_READ_TOP_SCRATCH15r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH15r,(_r._top_scratch15))
#define BCM84834_WRITE_TOP_SCRATCH15r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH15r,(_r._top_scratch15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH15r BCM84834_TOP_SCRATCH15r
#define TOP_SCRATCH15r_SIZE BCM84834_TOP_SCRATCH15r_SIZE
typedef BCM84834_TOP_SCRATCH15r_t TOP_SCRATCH15r_t;
#define TOP_SCRATCH15r_CLR BCM84834_TOP_SCRATCH15r_CLR
#define TOP_SCRATCH15r_SET BCM84834_TOP_SCRATCH15r_SET
#define TOP_SCRATCH15r_GET BCM84834_TOP_SCRATCH15r_GET
#define TOP_SCRATCH15r_SCRATCHf_GET BCM84834_TOP_SCRATCH15r_SCRATCHf_GET
#define TOP_SCRATCH15r_SCRATCHf_SET BCM84834_TOP_SCRATCH15r_SCRATCHf_SET
#define READ_TOP_SCRATCH15r BCM84834_READ_TOP_SCRATCH15r
#define WRITE_TOP_SCRATCH15r BCM84834_WRITE_TOP_SCRATCH15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLLCTRL1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4015
 * DEVAD:    30
 * DESC:     ARM PLL Control register
 * SIZE:     32
 * FIELDS:
 *     ARM_PLLCTRL1     
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLLCTRL1r (0x001e4015 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLLCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLLCTRL1.
 *
 */
typedef union BCM84834_TOP_ARM_PLLCTRL1r_s {
	uint32_t v[1];
	uint32_t top_arm_pllctrl1[1];
	uint32_t _top_arm_pllctrl1;
} BCM84834_TOP_ARM_PLLCTRL1r_t;

#define BCM84834_TOP_ARM_PLLCTRL1r_CLR(r) (r).top_arm_pllctrl1[0] = 0
#define BCM84834_TOP_ARM_PLLCTRL1r_SET(r,d) (r).top_arm_pllctrl1[0] = d
#define BCM84834_TOP_ARM_PLLCTRL1r_GET(r) (r).top_arm_pllctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_GET(r) (((r).top_arm_pllctrl1[0]) & 0xffff)
#define BCM84834_TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_SET(r,f) (r).top_arm_pllctrl1[0]=(((r).top_arm_pllctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_ARM_PLLCTRL1.
 *
 */
#define BCM84834_READ_TOP_ARM_PLLCTRL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLLCTRL1r,(_r._top_arm_pllctrl1))
#define BCM84834_WRITE_TOP_ARM_PLLCTRL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLLCTRL1r,(_r._top_arm_pllctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLLCTRL1r BCM84834_TOP_ARM_PLLCTRL1r
#define TOP_ARM_PLLCTRL1r_SIZE BCM84834_TOP_ARM_PLLCTRL1r_SIZE
typedef BCM84834_TOP_ARM_PLLCTRL1r_t TOP_ARM_PLLCTRL1r_t;
#define TOP_ARM_PLLCTRL1r_CLR BCM84834_TOP_ARM_PLLCTRL1r_CLR
#define TOP_ARM_PLLCTRL1r_SET BCM84834_TOP_ARM_PLLCTRL1r_SET
#define TOP_ARM_PLLCTRL1r_GET BCM84834_TOP_ARM_PLLCTRL1r_GET
#define TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_GET BCM84834_TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_GET
#define TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_SET BCM84834_TOP_ARM_PLLCTRL1r_ARM_PLLCTRL1f_SET
#define READ_TOP_ARM_PLLCTRL1r BCM84834_READ_TOP_ARM_PLLCTRL1r
#define WRITE_TOP_ARM_PLLCTRL1r BCM84834_WRITE_TOP_ARM_PLLCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLLCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLLCTRL2
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4016
 * DEVAD:    30
 * DESC:     ARM PLL Control register
 * SIZE:     32
 * FIELDS:
 *     ARM_PLLCTRL2     
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLLCTRL2r (0x001e4016 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLLCTRL2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLLCTRL2.
 *
 */
typedef union BCM84834_TOP_ARM_PLLCTRL2r_s {
	uint32_t v[1];
	uint32_t top_arm_pllctrl2[1];
	uint32_t _top_arm_pllctrl2;
} BCM84834_TOP_ARM_PLLCTRL2r_t;

#define BCM84834_TOP_ARM_PLLCTRL2r_CLR(r) (r).top_arm_pllctrl2[0] = 0
#define BCM84834_TOP_ARM_PLLCTRL2r_SET(r,d) (r).top_arm_pllctrl2[0] = d
#define BCM84834_TOP_ARM_PLLCTRL2r_GET(r) (r).top_arm_pllctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_GET(r) (((r).top_arm_pllctrl2[0]) & 0x1f)
#define BCM84834_TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_SET(r,f) (r).top_arm_pllctrl2[0]=(((r).top_arm_pllctrl2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access TOP_ARM_PLLCTRL2.
 *
 */
#define BCM84834_READ_TOP_ARM_PLLCTRL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLLCTRL2r,(_r._top_arm_pllctrl2))
#define BCM84834_WRITE_TOP_ARM_PLLCTRL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLLCTRL2r,(_r._top_arm_pllctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLLCTRL2r BCM84834_TOP_ARM_PLLCTRL2r
#define TOP_ARM_PLLCTRL2r_SIZE BCM84834_TOP_ARM_PLLCTRL2r_SIZE
typedef BCM84834_TOP_ARM_PLLCTRL2r_t TOP_ARM_PLLCTRL2r_t;
#define TOP_ARM_PLLCTRL2r_CLR BCM84834_TOP_ARM_PLLCTRL2r_CLR
#define TOP_ARM_PLLCTRL2r_SET BCM84834_TOP_ARM_PLLCTRL2r_SET
#define TOP_ARM_PLLCTRL2r_GET BCM84834_TOP_ARM_PLLCTRL2r_GET
#define TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_GET BCM84834_TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_GET
#define TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_SET BCM84834_TOP_ARM_PLLCTRL2r_ARM_PLLCTRL2f_SET
#define READ_TOP_ARM_PLLCTRL2r BCM84834_READ_TOP_ARM_PLLCTRL2r
#define WRITE_TOP_ARM_PLLCTRL2r BCM84834_WRITE_TOP_ARM_PLLCTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLLCTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLLCONFIG1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4017
 * DEVAD:    30
 * DESC:     ARM PLL Config register 1
 * SIZE:     32
 * FIELDS:
 *     CLK_250_BYP      
 *     CLK_156_BYP      
 *     CLK_125_BYP      
 *     CLK_100_BYP      
 *     CLK_50_BYP       
 *     CLK_25_BYP       
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLLCONFIG1r (0x001e4017 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLLCONFIG1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLLCONFIG1.
 *
 */
typedef union BCM84834_TOP_ARM_PLLCONFIG1r_s {
	uint32_t v[1];
	uint32_t top_arm_pllconfig1[1];
	uint32_t _top_arm_pllconfig1;
} BCM84834_TOP_ARM_PLLCONFIG1r_t;

#define BCM84834_TOP_ARM_PLLCONFIG1r_CLR(r) (r).top_arm_pllconfig1[0] = 0
#define BCM84834_TOP_ARM_PLLCONFIG1r_SET(r,d) (r).top_arm_pllconfig1[0] = d
#define BCM84834_TOP_ARM_PLLCONFIG1r_GET(r) (r).top_arm_pllconfig1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_GET(r) ((((r).top_arm_pllconfig1[0]) >> 5) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_GET(r) ((((r).top_arm_pllconfig1[0]) >> 4) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_GET(r) ((((r).top_arm_pllconfig1[0]) >> 3) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_GET(r) ((((r).top_arm_pllconfig1[0]) >> 2) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_GET(r) ((((r).top_arm_pllconfig1[0]) >> 1) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_GET(r) (((r).top_arm_pllconfig1[0]) & 0x1)
#define BCM84834_TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_SET(r,f) (r).top_arm_pllconfig1[0]=(((r).top_arm_pllconfig1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_ARM_PLLCONFIG1.
 *
 */
#define BCM84834_READ_TOP_ARM_PLLCONFIG1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLLCONFIG1r,(_r._top_arm_pllconfig1))
#define BCM84834_WRITE_TOP_ARM_PLLCONFIG1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLLCONFIG1r,(_r._top_arm_pllconfig1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLLCONFIG1r BCM84834_TOP_ARM_PLLCONFIG1r
#define TOP_ARM_PLLCONFIG1r_SIZE BCM84834_TOP_ARM_PLLCONFIG1r_SIZE
typedef BCM84834_TOP_ARM_PLLCONFIG1r_t TOP_ARM_PLLCONFIG1r_t;
#define TOP_ARM_PLLCONFIG1r_CLR BCM84834_TOP_ARM_PLLCONFIG1r_CLR
#define TOP_ARM_PLLCONFIG1r_SET BCM84834_TOP_ARM_PLLCONFIG1r_SET
#define TOP_ARM_PLLCONFIG1r_GET BCM84834_TOP_ARM_PLLCONFIG1r_GET
#define TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_25_BYPf_SET
#define TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_50_BYPf_SET
#define TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_100_BYPf_SET
#define TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_125_BYPf_SET
#define TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_156_BYPf_SET
#define TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_GET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_GET
#define TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_SET BCM84834_TOP_ARM_PLLCONFIG1r_CLK_250_BYPf_SET
#define READ_TOP_ARM_PLLCONFIG1r BCM84834_READ_TOP_ARM_PLLCONFIG1r
#define WRITE_TOP_ARM_PLLCONFIG1r BCM84834_WRITE_TOP_ARM_PLLCONFIG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLLCONFIG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLLCONFIG2
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4019
 * DEVAD:    30
 * DESC:     ARM PLL Config register 2
 * SIZE:     32
 * FIELDS:
 *     KP               
 *     KI               
 *     KA               
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLLCONFIG2r (0x001e4019 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLLCONFIG2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLLCONFIG2.
 *
 */
typedef union BCM84834_TOP_ARM_PLLCONFIG2r_s {
	uint32_t v[1];
	uint32_t top_arm_pllconfig2[1];
	uint32_t _top_arm_pllconfig2;
} BCM84834_TOP_ARM_PLLCONFIG2r_t;

#define BCM84834_TOP_ARM_PLLCONFIG2r_CLR(r) (r).top_arm_pllconfig2[0] = 0
#define BCM84834_TOP_ARM_PLLCONFIG2r_SET(r,d) (r).top_arm_pllconfig2[0] = d
#define BCM84834_TOP_ARM_PLLCONFIG2r_GET(r) (r).top_arm_pllconfig2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLLCONFIG2r_KAf_GET(r) ((((r).top_arm_pllconfig2[0]) >> 7) & 0x7)
#define BCM84834_TOP_ARM_PLLCONFIG2r_KAf_SET(r,f) (r).top_arm_pllconfig2[0]=(((r).top_arm_pllconfig2[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7))
#define BCM84834_TOP_ARM_PLLCONFIG2r_KIf_GET(r) ((((r).top_arm_pllconfig2[0]) >> 4) & 0x7)
#define BCM84834_TOP_ARM_PLLCONFIG2r_KIf_SET(r,f) (r).top_arm_pllconfig2[0]=(((r).top_arm_pllconfig2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_TOP_ARM_PLLCONFIG2r_KPf_GET(r) (((r).top_arm_pllconfig2[0]) & 0xf)
#define BCM84834_TOP_ARM_PLLCONFIG2r_KPf_SET(r,f) (r).top_arm_pllconfig2[0]=(((r).top_arm_pllconfig2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TOP_ARM_PLLCONFIG2.
 *
 */
#define BCM84834_READ_TOP_ARM_PLLCONFIG2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLLCONFIG2r,(_r._top_arm_pllconfig2))
#define BCM84834_WRITE_TOP_ARM_PLLCONFIG2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLLCONFIG2r,(_r._top_arm_pllconfig2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLLCONFIG2r BCM84834_TOP_ARM_PLLCONFIG2r
#define TOP_ARM_PLLCONFIG2r_SIZE BCM84834_TOP_ARM_PLLCONFIG2r_SIZE
typedef BCM84834_TOP_ARM_PLLCONFIG2r_t TOP_ARM_PLLCONFIG2r_t;
#define TOP_ARM_PLLCONFIG2r_CLR BCM84834_TOP_ARM_PLLCONFIG2r_CLR
#define TOP_ARM_PLLCONFIG2r_SET BCM84834_TOP_ARM_PLLCONFIG2r_SET
#define TOP_ARM_PLLCONFIG2r_GET BCM84834_TOP_ARM_PLLCONFIG2r_GET
#define TOP_ARM_PLLCONFIG2r_KAf_GET BCM84834_TOP_ARM_PLLCONFIG2r_KAf_GET
#define TOP_ARM_PLLCONFIG2r_KAf_SET BCM84834_TOP_ARM_PLLCONFIG2r_KAf_SET
#define TOP_ARM_PLLCONFIG2r_KIf_GET BCM84834_TOP_ARM_PLLCONFIG2r_KIf_GET
#define TOP_ARM_PLLCONFIG2r_KIf_SET BCM84834_TOP_ARM_PLLCONFIG2r_KIf_SET
#define TOP_ARM_PLLCONFIG2r_KPf_GET BCM84834_TOP_ARM_PLLCONFIG2r_KPf_GET
#define TOP_ARM_PLLCONFIG2r_KPf_SET BCM84834_TOP_ARM_PLLCONFIG2r_KPf_SET
#define READ_TOP_ARM_PLLCONFIG2r BCM84834_READ_TOP_ARM_PLLCONFIG2r
#define WRITE_TOP_ARM_PLLCONFIG2r BCM84834_WRITE_TOP_ARM_PLLCONFIG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLLCONFIG2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_STRAP1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x401a
 * DEVAD:    30
 * DESC:     XGPHY pin strap read
 * SIZE:     32
 * FIELDS:
 *     SPARE_FW_STRAPS_12_0 
 *     ARM_BOOT_HIGH    
 *     SPARE_FW_STRAPS_14 
 *     SUPER_ISO_CHANGE 
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_STRAP1r (0x001e401a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_STRAP1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_STRAP1.
 *
 */
typedef union BCM84834_TOP_XGPHY_STRAP1r_s {
	uint32_t v[1];
	uint32_t top_xgphy_strap1[1];
	uint32_t _top_xgphy_strap1;
} BCM84834_TOP_XGPHY_STRAP1r_t;

#define BCM84834_TOP_XGPHY_STRAP1r_CLR(r) (r).top_xgphy_strap1[0] = 0
#define BCM84834_TOP_XGPHY_STRAP1r_SET(r,d) (r).top_xgphy_strap1[0] = d
#define BCM84834_TOP_XGPHY_STRAP1r_GET(r) (r).top_xgphy_strap1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_GET(r) ((((r).top_xgphy_strap1[0]) >> 15) & 0x1)
#define BCM84834_TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_SET(r,f) (r).top_xgphy_strap1[0]=(((r).top_xgphy_strap1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_GET(r) ((((r).top_xgphy_strap1[0]) >> 14) & 0x1)
#define BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_SET(r,f) (r).top_xgphy_strap1[0]=(((r).top_xgphy_strap1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_GET(r) ((((r).top_xgphy_strap1[0]) >> 13) & 0x1)
#define BCM84834_TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_SET(r,f) (r).top_xgphy_strap1[0]=(((r).top_xgphy_strap1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_GET(r) (((r).top_xgphy_strap1[0]) & 0x1fff)
#define BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_SET(r,f) (r).top_xgphy_strap1[0]=(((r).top_xgphy_strap1[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access TOP_XGPHY_STRAP1.
 *
 */
#define BCM84834_READ_TOP_XGPHY_STRAP1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_STRAP1r,(_r._top_xgphy_strap1))
#define BCM84834_WRITE_TOP_XGPHY_STRAP1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_STRAP1r,(_r._top_xgphy_strap1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_STRAP1r BCM84834_TOP_XGPHY_STRAP1r
#define TOP_XGPHY_STRAP1r_SIZE BCM84834_TOP_XGPHY_STRAP1r_SIZE
typedef BCM84834_TOP_XGPHY_STRAP1r_t TOP_XGPHY_STRAP1r_t;
#define TOP_XGPHY_STRAP1r_CLR BCM84834_TOP_XGPHY_STRAP1r_CLR
#define TOP_XGPHY_STRAP1r_SET BCM84834_TOP_XGPHY_STRAP1r_SET
#define TOP_XGPHY_STRAP1r_GET BCM84834_TOP_XGPHY_STRAP1r_GET
#define TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_GET BCM84834_TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_GET
#define TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_SET BCM84834_TOP_XGPHY_STRAP1r_SUPER_ISO_CHANGEf_SET
#define TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_GET BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_GET
#define TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_SET BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_14f_SET
#define TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_GET BCM84834_TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_GET
#define TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_SET BCM84834_TOP_XGPHY_STRAP1r_ARM_BOOT_HIGHf_SET
#define TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_GET BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_GET
#define TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_SET BCM84834_TOP_XGPHY_STRAP1r_SPARE_FW_STRAPS_12_0f_SET
#define READ_TOP_XGPHY_STRAP1r BCM84834_READ_TOP_XGPHY_STRAP1r
#define WRITE_TOP_XGPHY_STRAP1r BCM84834_WRITE_TOP_XGPHY_STRAP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_STRAP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_STRAP2
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x401b
 * DEVAD:    30
 * DESC:     XGPHY pin strap read
 * SIZE:     32
 * FIELDS:
 *     SPARE_FW_STRAPS_15 
 *     FW_STRAP_CHANGED_INT_MASK_15 
 *     XGPHY_STRAP2_15_2 
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_STRAP2r (0x001e401b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_STRAP2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_STRAP2.
 *
 */
typedef union BCM84834_TOP_XGPHY_STRAP2r_s {
	uint32_t v[1];
	uint32_t top_xgphy_strap2[1];
	uint32_t _top_xgphy_strap2;
} BCM84834_TOP_XGPHY_STRAP2r_t;

#define BCM84834_TOP_XGPHY_STRAP2r_CLR(r) (r).top_xgphy_strap2[0] = 0
#define BCM84834_TOP_XGPHY_STRAP2r_SET(r,d) (r).top_xgphy_strap2[0] = d
#define BCM84834_TOP_XGPHY_STRAP2r_GET(r) (r).top_xgphy_strap2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_GET(r) ((((r).top_xgphy_strap2[0]) >> 2) & 0x3fff)
#define BCM84834_TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_SET(r,f) (r).top_xgphy_strap2[0]=(((r).top_xgphy_strap2[0] & ~((uint32_t)0x3fff << 2)) | ((((uint32_t)f) & 0x3fff) << 2))
#define BCM84834_TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_GET(r) ((((r).top_xgphy_strap2[0]) >> 1) & 0x1)
#define BCM84834_TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_SET(r,f) (r).top_xgphy_strap2[0]=(((r).top_xgphy_strap2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_GET(r) (((r).top_xgphy_strap2[0]) & 0x1)
#define BCM84834_TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_SET(r,f) (r).top_xgphy_strap2[0]=(((r).top_xgphy_strap2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_XGPHY_STRAP2.
 *
 */
#define BCM84834_READ_TOP_XGPHY_STRAP2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_STRAP2r,(_r._top_xgphy_strap2))
#define BCM84834_WRITE_TOP_XGPHY_STRAP2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_STRAP2r,(_r._top_xgphy_strap2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_STRAP2r BCM84834_TOP_XGPHY_STRAP2r
#define TOP_XGPHY_STRAP2r_SIZE BCM84834_TOP_XGPHY_STRAP2r_SIZE
typedef BCM84834_TOP_XGPHY_STRAP2r_t TOP_XGPHY_STRAP2r_t;
#define TOP_XGPHY_STRAP2r_CLR BCM84834_TOP_XGPHY_STRAP2r_CLR
#define TOP_XGPHY_STRAP2r_SET BCM84834_TOP_XGPHY_STRAP2r_SET
#define TOP_XGPHY_STRAP2r_GET BCM84834_TOP_XGPHY_STRAP2r_GET
#define TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_GET BCM84834_TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_GET
#define TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_SET BCM84834_TOP_XGPHY_STRAP2r_XGPHY_STRAP2_15_2f_SET
#define TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_GET BCM84834_TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_GET
#define TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_SET BCM84834_TOP_XGPHY_STRAP2r_FW_STRAP_CHANGED_INT_MASK_15f_SET
#define TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_GET BCM84834_TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_GET
#define TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_SET BCM84834_TOP_XGPHY_STRAP2r_SPARE_FW_STRAPS_15f_SET
#define READ_TOP_XGPHY_STRAP2r BCM84834_READ_TOP_XGPHY_STRAP2r
#define WRITE_TOP_XGPHY_STRAP2r BCM84834_WRITE_TOP_XGPHY_STRAP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_STRAP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_OTHER_STRAP
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x401c
 * DEVAD:    30
 * DESC:     XGPHY pin strap read
 * SIZE:     32
 * FIELDS:
 *     XG_PLL_BYP       
 *     EN_CLK_100_TEST  
 *     ARM_PLLBYP       
 *     PRTAD_ORDER      
 *     POR_EN_IN        
 *     OUI_SEL          
 *     CORE_ID          
 *     QUAD_PKG         
 *     JTAG_SEL         
 *     XTAL_BYPASS      
 *     REFCLK_SEL       
 *     MACSEC_EN        
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_OTHER_STRAPr (0x001e401c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_OTHER_STRAPr_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_OTHER_STRAP.
 *
 */
typedef union BCM84834_TOP_XGPHY_OTHER_STRAPr_s {
	uint32_t v[1];
	uint32_t top_xgphy_other_strap[1];
	uint32_t _top_xgphy_other_strap;
} BCM84834_TOP_XGPHY_OTHER_STRAPr_t;

#define BCM84834_TOP_XGPHY_OTHER_STRAPr_CLR(r) (r).top_xgphy_other_strap[0] = 0
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_SET(r,d) (r).top_xgphy_other_strap[0] = d
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_GET(r) (r).top_xgphy_other_strap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 14) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 13) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 12) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 11) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 10) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_CORE_IDf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 8) & 0x3)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_CORE_IDf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_OUI_SELf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 5) & 0x7)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_OUI_SELf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x7 << 5)) | ((((uint32_t)f) & 0x7) << 5))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 4) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 3) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 2) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_GET(r) ((((r).top_xgphy_other_strap[0]) >> 1) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_GET(r) (((r).top_xgphy_other_strap[0]) & 0x1)
#define BCM84834_TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_SET(r,f) (r).top_xgphy_other_strap[0]=(((r).top_xgphy_other_strap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_XGPHY_OTHER_STRAP.
 *
 */
#define BCM84834_READ_TOP_XGPHY_OTHER_STRAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_OTHER_STRAPr,(_r._top_xgphy_other_strap))
#define BCM84834_WRITE_TOP_XGPHY_OTHER_STRAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_OTHER_STRAPr,(_r._top_xgphy_other_strap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_OTHER_STRAPr BCM84834_TOP_XGPHY_OTHER_STRAPr
#define TOP_XGPHY_OTHER_STRAPr_SIZE BCM84834_TOP_XGPHY_OTHER_STRAPr_SIZE
typedef BCM84834_TOP_XGPHY_OTHER_STRAPr_t TOP_XGPHY_OTHER_STRAPr_t;
#define TOP_XGPHY_OTHER_STRAPr_CLR BCM84834_TOP_XGPHY_OTHER_STRAPr_CLR
#define TOP_XGPHY_OTHER_STRAPr_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_SET
#define TOP_XGPHY_OTHER_STRAPr_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_GET
#define TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_GET
#define TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_MACSEC_ENf_SET
#define TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_GET
#define TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_REFCLK_SELf_SET
#define TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_GET
#define TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_XTAL_BYPASSf_SET
#define TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_GET
#define TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_JTAG_SELf_SET
#define TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_GET
#define TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_QUAD_PKGf_SET
#define TOP_XGPHY_OTHER_STRAPr_CORE_IDf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_CORE_IDf_GET
#define TOP_XGPHY_OTHER_STRAPr_CORE_IDf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_CORE_IDf_SET
#define TOP_XGPHY_OTHER_STRAPr_OUI_SELf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_OUI_SELf_GET
#define TOP_XGPHY_OTHER_STRAPr_OUI_SELf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_OUI_SELf_SET
#define TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_GET
#define TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_POR_EN_INf_SET
#define TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_GET
#define TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_PRTAD_ORDERf_SET
#define TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_GET
#define TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_ARM_PLLBYPf_SET
#define TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_GET
#define TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_EN_CLK_100_TESTf_SET
#define TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_GET BCM84834_TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_GET
#define TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_SET BCM84834_TOP_XGPHY_OTHER_STRAPr_XG_PLL_BYPf_SET
#define READ_TOP_XGPHY_OTHER_STRAPr BCM84834_READ_TOP_XGPHY_OTHER_STRAPr
#define WRITE_TOP_XGPHY_OTHER_STRAPr BCM84834_WRITE_TOP_XGPHY_OTHER_STRAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_OTHER_STRAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLL_STAT
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x401d
 * DEVAD:    30
 * DESC:     ARM PLL status register
 * SIZE:     32
 * FIELDS:
 *     PLL_STAT         
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLL_STATr (0x001e401d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLL_STATr_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLL_STAT.
 *
 */
typedef union BCM84834_TOP_ARM_PLL_STATr_s {
	uint32_t v[1];
	uint32_t top_arm_pll_stat[1];
	uint32_t _top_arm_pll_stat;
} BCM84834_TOP_ARM_PLL_STATr_t;

#define BCM84834_TOP_ARM_PLL_STATr_CLR(r) (r).top_arm_pll_stat[0] = 0
#define BCM84834_TOP_ARM_PLL_STATr_SET(r,d) (r).top_arm_pll_stat[0] = d
#define BCM84834_TOP_ARM_PLL_STATr_GET(r) (r).top_arm_pll_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLL_STATr_PLL_STATf_GET(r) (((r).top_arm_pll_stat[0]) & 0xfff)
#define BCM84834_TOP_ARM_PLL_STATr_PLL_STATf_SET(r,f) (r).top_arm_pll_stat[0]=(((r).top_arm_pll_stat[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access TOP_ARM_PLL_STAT.
 *
 */
#define BCM84834_READ_TOP_ARM_PLL_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLL_STATr,(_r._top_arm_pll_stat))
#define BCM84834_WRITE_TOP_ARM_PLL_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLL_STATr,(_r._top_arm_pll_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLL_STATr BCM84834_TOP_ARM_PLL_STATr
#define TOP_ARM_PLL_STATr_SIZE BCM84834_TOP_ARM_PLL_STATr_SIZE
typedef BCM84834_TOP_ARM_PLL_STATr_t TOP_ARM_PLL_STATr_t;
#define TOP_ARM_PLL_STATr_CLR BCM84834_TOP_ARM_PLL_STATr_CLR
#define TOP_ARM_PLL_STATr_SET BCM84834_TOP_ARM_PLL_STATr_SET
#define TOP_ARM_PLL_STATr_GET BCM84834_TOP_ARM_PLL_STATr_GET
#define TOP_ARM_PLL_STATr_PLL_STATf_GET BCM84834_TOP_ARM_PLL_STATr_PLL_STATf_GET
#define TOP_ARM_PLL_STATr_PLL_STATf_SET BCM84834_TOP_ARM_PLL_STATr_PLL_STATf_SET
#define READ_TOP_ARM_PLL_STATr BCM84834_READ_TOP_ARM_PLL_STATr
#define WRITE_TOP_ARM_PLL_STATr BCM84834_WRITE_TOP_ARM_PLL_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLL_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_ARM_PLL_LOCK
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x401e
 * DEVAD:    30
 * DESC:     ARM PLL Lock
 * SIZE:     32
 * FIELDS:
 *     LOCK             
 *
 ******************************************************************************/
#define BCM84834_TOP_ARM_PLL_LOCKr (0x001e401e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_ARM_PLL_LOCKr_SIZE 4

/*
 * This structure should be used to declare and program TOP_ARM_PLL_LOCK.
 *
 */
typedef union BCM84834_TOP_ARM_PLL_LOCKr_s {
	uint32_t v[1];
	uint32_t top_arm_pll_lock[1];
	uint32_t _top_arm_pll_lock;
} BCM84834_TOP_ARM_PLL_LOCKr_t;

#define BCM84834_TOP_ARM_PLL_LOCKr_CLR(r) (r).top_arm_pll_lock[0] = 0
#define BCM84834_TOP_ARM_PLL_LOCKr_SET(r,d) (r).top_arm_pll_lock[0] = d
#define BCM84834_TOP_ARM_PLL_LOCKr_GET(r) (r).top_arm_pll_lock[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_ARM_PLL_LOCKr_LOCKf_GET(r) (((r).top_arm_pll_lock[0]) & 0x1)
#define BCM84834_TOP_ARM_PLL_LOCKr_LOCKf_SET(r,f) (r).top_arm_pll_lock[0]=(((r).top_arm_pll_lock[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_ARM_PLL_LOCK.
 *
 */
#define BCM84834_READ_TOP_ARM_PLL_LOCKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_ARM_PLL_LOCKr,(_r._top_arm_pll_lock))
#define BCM84834_WRITE_TOP_ARM_PLL_LOCKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_ARM_PLL_LOCKr,(_r._top_arm_pll_lock))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_ARM_PLL_LOCKr BCM84834_TOP_ARM_PLL_LOCKr
#define TOP_ARM_PLL_LOCKr_SIZE BCM84834_TOP_ARM_PLL_LOCKr_SIZE
typedef BCM84834_TOP_ARM_PLL_LOCKr_t TOP_ARM_PLL_LOCKr_t;
#define TOP_ARM_PLL_LOCKr_CLR BCM84834_TOP_ARM_PLL_LOCKr_CLR
#define TOP_ARM_PLL_LOCKr_SET BCM84834_TOP_ARM_PLL_LOCKr_SET
#define TOP_ARM_PLL_LOCKr_GET BCM84834_TOP_ARM_PLL_LOCKr_GET
#define TOP_ARM_PLL_LOCKr_LOCKf_GET BCM84834_TOP_ARM_PLL_LOCKr_LOCKf_GET
#define TOP_ARM_PLL_LOCKr_LOCKf_SET BCM84834_TOP_ARM_PLL_LOCKr_LOCKf_SET
#define READ_TOP_ARM_PLL_LOCKr BCM84834_READ_TOP_ARM_PLL_LOCKr
#define WRITE_TOP_ARM_PLL_LOCKr BCM84834_WRITE_TOP_ARM_PLL_LOCKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_ARM_PLL_LOCKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GPHY_STRAP
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4020
 * DEVAD:    30
 * DESC:     GPHY pin strap read
 * SIZE:     32
 * FIELDS:
 *     SUPER_ISOLATE_STRAP 
 *
 ******************************************************************************/
#define BCM84834_TOP_GPHY_STRAPr (0x001e4020 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GPHY_STRAPr_SIZE 4

/*
 * This structure should be used to declare and program TOP_GPHY_STRAP.
 *
 */
typedef union BCM84834_TOP_GPHY_STRAPr_s {
	uint32_t v[1];
	uint32_t top_gphy_strap[1];
	uint32_t _top_gphy_strap;
} BCM84834_TOP_GPHY_STRAPr_t;

#define BCM84834_TOP_GPHY_STRAPr_CLR(r) (r).top_gphy_strap[0] = 0
#define BCM84834_TOP_GPHY_STRAPr_SET(r,d) (r).top_gphy_strap[0] = d
#define BCM84834_TOP_GPHY_STRAPr_GET(r) (r).top_gphy_strap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_GET(r) (((r).top_gphy_strap[0]) & 0x1)
#define BCM84834_TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_SET(r,f) (r).top_gphy_strap[0]=(((r).top_gphy_strap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GPHY_STRAP.
 *
 */
#define BCM84834_READ_TOP_GPHY_STRAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GPHY_STRAPr,(_r._top_gphy_strap))
#define BCM84834_WRITE_TOP_GPHY_STRAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GPHY_STRAPr,(_r._top_gphy_strap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GPHY_STRAPr BCM84834_TOP_GPHY_STRAPr
#define TOP_GPHY_STRAPr_SIZE BCM84834_TOP_GPHY_STRAPr_SIZE
typedef BCM84834_TOP_GPHY_STRAPr_t TOP_GPHY_STRAPr_t;
#define TOP_GPHY_STRAPr_CLR BCM84834_TOP_GPHY_STRAPr_CLR
#define TOP_GPHY_STRAPr_SET BCM84834_TOP_GPHY_STRAPr_SET
#define TOP_GPHY_STRAPr_GET BCM84834_TOP_GPHY_STRAPr_GET
#define TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_GET BCM84834_TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_GET
#define TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_SET BCM84834_TOP_GPHY_STRAPr_SUPER_ISOLATE_STRAPf_SET
#define READ_TOP_GPHY_STRAPr BCM84834_READ_TOP_GPHY_STRAPr
#define WRITE_TOP_GPHY_STRAPr BCM84834_WRITE_TOP_GPHY_STRAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GPHY_STRAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_PRTAD_STRAP
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4021
 * DEVAD:    30
 * DESC:     XGPHY PRTADD strap read
 * SIZE:     32
 * FIELDS:
 *     XGPHY_PRTAD_STRAP 
 *     XGPHY_PRTAD_STRAP_RAW 
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr (0x001e4021 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_PRTAD_STRAP.
 *
 */
typedef union BCM84834_TOP_XGPHY_PRTAD_STRAPr_s {
	uint32_t v[1];
	uint32_t top_xgphy_prtad_strap[1];
	uint32_t _top_xgphy_prtad_strap;
} BCM84834_TOP_XGPHY_PRTAD_STRAPr_t;

#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_CLR(r) (r).top_xgphy_prtad_strap[0] = 0
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_SET(r,d) (r).top_xgphy_prtad_strap[0] = d
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_GET(r) (r).top_xgphy_prtad_strap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_GET(r) ((((r).top_xgphy_prtad_strap[0]) >> 5) & 0x1f)
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_SET(r,f) (r).top_xgphy_prtad_strap[0]=(((r).top_xgphy_prtad_strap[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_GET(r) (((r).top_xgphy_prtad_strap[0]) & 0x1f)
#define BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_SET(r,f) (r).top_xgphy_prtad_strap[0]=(((r).top_xgphy_prtad_strap[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access TOP_XGPHY_PRTAD_STRAP.
 *
 */
#define BCM84834_READ_TOP_XGPHY_PRTAD_STRAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_PRTAD_STRAPr,(_r._top_xgphy_prtad_strap))
#define BCM84834_WRITE_TOP_XGPHY_PRTAD_STRAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_PRTAD_STRAPr,(_r._top_xgphy_prtad_strap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_PRTAD_STRAPr BCM84834_TOP_XGPHY_PRTAD_STRAPr
#define TOP_XGPHY_PRTAD_STRAPr_SIZE BCM84834_TOP_XGPHY_PRTAD_STRAPr_SIZE
typedef BCM84834_TOP_XGPHY_PRTAD_STRAPr_t TOP_XGPHY_PRTAD_STRAPr_t;
#define TOP_XGPHY_PRTAD_STRAPr_CLR BCM84834_TOP_XGPHY_PRTAD_STRAPr_CLR
#define TOP_XGPHY_PRTAD_STRAPr_SET BCM84834_TOP_XGPHY_PRTAD_STRAPr_SET
#define TOP_XGPHY_PRTAD_STRAPr_GET BCM84834_TOP_XGPHY_PRTAD_STRAPr_GET
#define TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_GET BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_GET
#define TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_SET BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAP_RAWf_SET
#define TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_GET BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_GET
#define TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_SET BCM84834_TOP_XGPHY_PRTAD_STRAPr_XGPHY_PRTAD_STRAPf_SET
#define READ_TOP_XGPHY_PRTAD_STRAPr BCM84834_READ_TOP_XGPHY_PRTAD_STRAPr
#define WRITE_TOP_XGPHY_PRTAD_STRAPr BCM84834_WRITE_TOP_XGPHY_PRTAD_STRAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_PRTAD_STRAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_XENPAK_CONFIG
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4022
 * DEVAD:    30
 * DESC:     XGPHY XENPAK config read
 * SIZE:     32
 * FIELDS:
 *     TX_ON_FF         
 *     XENPAK_MODE      
 *     I2C_MASTER_NVMPROT 
 *     I2C_MASTER_SPEED 
 *     I2C_MASTER_FLUSH_SEL 
 *     I2C_MASTER_ADR_SEL 
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr (0x001e4022 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_XENPAK_CONFIG.
 *
 */
typedef union BCM84834_TOP_XGPHY_XENPAK_CONFIGr_s {
	uint32_t v[1];
	uint32_t top_xgphy_xenpak_config[1];
	uint32_t _top_xgphy_xenpak_config;
} BCM84834_TOP_XGPHY_XENPAK_CONFIGr_t;

#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_CLR(r) (r).top_xgphy_xenpak_config[0] = 0
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_SET(r,d) (r).top_xgphy_xenpak_config[0] = d
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_GET(r) (r).top_xgphy_xenpak_config[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_GET(r) ((((r).top_xgphy_xenpak_config[0]) >> 5) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_GET(r) ((((r).top_xgphy_xenpak_config[0]) >> 4) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_GET(r) ((((r).top_xgphy_xenpak_config[0]) >> 3) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_GET(r) ((((r).top_xgphy_xenpak_config[0]) >> 2) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_GET(r) ((((r).top_xgphy_xenpak_config[0]) >> 1) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_GET(r) (((r).top_xgphy_xenpak_config[0]) & 0x1)
#define BCM84834_TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_SET(r,f) (r).top_xgphy_xenpak_config[0]=(((r).top_xgphy_xenpak_config[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_XGPHY_XENPAK_CONFIG.
 *
 */
#define BCM84834_READ_TOP_XGPHY_XENPAK_CONFIGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_XENPAK_CONFIGr,(_r._top_xgphy_xenpak_config))
#define BCM84834_WRITE_TOP_XGPHY_XENPAK_CONFIGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_XENPAK_CONFIGr,(_r._top_xgphy_xenpak_config))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_XENPAK_CONFIGr BCM84834_TOP_XGPHY_XENPAK_CONFIGr
#define TOP_XGPHY_XENPAK_CONFIGr_SIZE BCM84834_TOP_XGPHY_XENPAK_CONFIGr_SIZE
typedef BCM84834_TOP_XGPHY_XENPAK_CONFIGr_t TOP_XGPHY_XENPAK_CONFIGr_t;
#define TOP_XGPHY_XENPAK_CONFIGr_CLR BCM84834_TOP_XGPHY_XENPAK_CONFIGr_CLR
#define TOP_XGPHY_XENPAK_CONFIGr_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_SET
#define TOP_XGPHY_XENPAK_CONFIGr_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_GET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_ADR_SELf_SET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_FLUSH_SELf_SET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_SPEEDf_SET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_I2C_MASTER_NVMPROTf_SET
#define TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_XENPAK_MODEf_SET
#define TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_GET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_GET
#define TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_SET BCM84834_TOP_XGPHY_XENPAK_CONFIGr_TX_ON_FFf_SET
#define READ_TOP_XGPHY_XENPAK_CONFIGr BCM84834_READ_TOP_XGPHY_XENPAK_CONFIGr
#define WRITE_TOP_XGPHY_XENPAK_CONFIGr BCM84834_WRITE_TOP_XGPHY_XENPAK_CONFIGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_XENPAK_CONFIGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_TMUX_MODE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4023
 * DEVAD:    30
 * DESC:     XGPHY TMUX_MODE read
 * SIZE:     32
 * FIELDS:
 *     XGPHY_TMUX_MODE  
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_TMUX_MODEr (0x001e4023 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_TMUX_MODEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_TMUX_MODE.
 *
 */
typedef union BCM84834_TOP_XGPHY_TMUX_MODEr_s {
	uint32_t v[1];
	uint32_t top_xgphy_tmux_mode[1];
	uint32_t _top_xgphy_tmux_mode;
} BCM84834_TOP_XGPHY_TMUX_MODEr_t;

#define BCM84834_TOP_XGPHY_TMUX_MODEr_CLR(r) (r).top_xgphy_tmux_mode[0] = 0
#define BCM84834_TOP_XGPHY_TMUX_MODEr_SET(r,d) (r).top_xgphy_tmux_mode[0] = d
#define BCM84834_TOP_XGPHY_TMUX_MODEr_GET(r) (r).top_xgphy_tmux_mode[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_GET(r) (((r).top_xgphy_tmux_mode[0]) & 0x3)
#define BCM84834_TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_SET(r,f) (r).top_xgphy_tmux_mode[0]=(((r).top_xgphy_tmux_mode[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TOP_XGPHY_TMUX_MODE.
 *
 */
#define BCM84834_READ_TOP_XGPHY_TMUX_MODEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_TMUX_MODEr,(_r._top_xgphy_tmux_mode))
#define BCM84834_WRITE_TOP_XGPHY_TMUX_MODEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_TMUX_MODEr,(_r._top_xgphy_tmux_mode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_TMUX_MODEr BCM84834_TOP_XGPHY_TMUX_MODEr
#define TOP_XGPHY_TMUX_MODEr_SIZE BCM84834_TOP_XGPHY_TMUX_MODEr_SIZE
typedef BCM84834_TOP_XGPHY_TMUX_MODEr_t TOP_XGPHY_TMUX_MODEr_t;
#define TOP_XGPHY_TMUX_MODEr_CLR BCM84834_TOP_XGPHY_TMUX_MODEr_CLR
#define TOP_XGPHY_TMUX_MODEr_SET BCM84834_TOP_XGPHY_TMUX_MODEr_SET
#define TOP_XGPHY_TMUX_MODEr_GET BCM84834_TOP_XGPHY_TMUX_MODEr_GET
#define TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_GET BCM84834_TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_GET
#define TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_SET BCM84834_TOP_XGPHY_TMUX_MODEr_XGPHY_TMUX_MODEf_SET
#define READ_TOP_XGPHY_TMUX_MODEr BCM84834_READ_TOP_XGPHY_TMUX_MODEr
#define WRITE_TOP_XGPHY_TMUX_MODEr BCM84834_WRITE_TOP_XGPHY_TMUX_MODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_TMUX_MODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GPHY_ENABLE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4025
 * DEVAD:    30
 * DESC:     Top-Level gphy mode select
 * SIZE:     32
 * FIELDS:
 *     GPHY_WRAP_GPHY_EN 
 *     DAC_REG_GPHY_EN  
 *     RESET_MUX_GPHY_EN 
 *     AFE_REG_WRAP_GPHY_EN 
 *     ADCCAL_GPHY_EN   
 *
 ******************************************************************************/
#define BCM84834_TOP_GPHY_ENABLEr (0x001e4025 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GPHY_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_GPHY_ENABLE.
 *
 */
typedef union BCM84834_TOP_GPHY_ENABLEr_s {
	uint32_t v[1];
	uint32_t top_gphy_enable[1];
	uint32_t _top_gphy_enable;
} BCM84834_TOP_GPHY_ENABLEr_t;

#define BCM84834_TOP_GPHY_ENABLEr_CLR(r) (r).top_gphy_enable[0] = 0
#define BCM84834_TOP_GPHY_ENABLEr_SET(r,d) (r).top_gphy_enable[0] = d
#define BCM84834_TOP_GPHY_ENABLEr_GET(r) (r).top_gphy_enable[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_GET(r) ((((r).top_gphy_enable[0]) >> 5) & 0x1)
#define BCM84834_TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_SET(r,f) (r).top_gphy_enable[0]=(((r).top_gphy_enable[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_GET(r) ((((r).top_gphy_enable[0]) >> 4) & 0x1)
#define BCM84834_TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_SET(r,f) (r).top_gphy_enable[0]=(((r).top_gphy_enable[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_GET(r) ((((r).top_gphy_enable[0]) >> 3) & 0x1)
#define BCM84834_TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_SET(r,f) (r).top_gphy_enable[0]=(((r).top_gphy_enable[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_GET(r) ((((r).top_gphy_enable[0]) >> 2) & 0x1)
#define BCM84834_TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_SET(r,f) (r).top_gphy_enable[0]=(((r).top_gphy_enable[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_GET(r) (((r).top_gphy_enable[0]) & 0x1)
#define BCM84834_TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_SET(r,f) (r).top_gphy_enable[0]=(((r).top_gphy_enable[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GPHY_ENABLE.
 *
 */
#define BCM84834_READ_TOP_GPHY_ENABLEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GPHY_ENABLEr,(_r._top_gphy_enable))
#define BCM84834_WRITE_TOP_GPHY_ENABLEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GPHY_ENABLEr,(_r._top_gphy_enable))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GPHY_ENABLEr BCM84834_TOP_GPHY_ENABLEr
#define TOP_GPHY_ENABLEr_SIZE BCM84834_TOP_GPHY_ENABLEr_SIZE
typedef BCM84834_TOP_GPHY_ENABLEr_t TOP_GPHY_ENABLEr_t;
#define TOP_GPHY_ENABLEr_CLR BCM84834_TOP_GPHY_ENABLEr_CLR
#define TOP_GPHY_ENABLEr_SET BCM84834_TOP_GPHY_ENABLEr_SET
#define TOP_GPHY_ENABLEr_GET BCM84834_TOP_GPHY_ENABLEr_GET
#define TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_GET BCM84834_TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_GET
#define TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_SET BCM84834_TOP_GPHY_ENABLEr_ADCCAL_GPHY_ENf_SET
#define TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_GET BCM84834_TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_GET
#define TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_SET BCM84834_TOP_GPHY_ENABLEr_AFE_REG_WRAP_GPHY_ENf_SET
#define TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_GET BCM84834_TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_GET
#define TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_SET BCM84834_TOP_GPHY_ENABLEr_RESET_MUX_GPHY_ENf_SET
#define TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_GET BCM84834_TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_GET
#define TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_SET BCM84834_TOP_GPHY_ENABLEr_DAC_REG_GPHY_ENf_SET
#define TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_GET BCM84834_TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_GET
#define TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_SET BCM84834_TOP_GPHY_ENABLEr_GPHY_WRAP_GPHY_ENf_SET
#define READ_TOP_GPHY_ENABLEr BCM84834_READ_TOP_GPHY_ENABLEr
#define WRITE_TOP_GPHY_ENABLEr BCM84834_WRITE_TOP_GPHY_ENABLEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GPHY_ENABLEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GPHY_MDIO_TYPE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4026
 * DEVAD:    30
 * DESC:     Gphy MDIO access type reg
 * SIZE:     32
 * FIELDS:
 *     GPHY_MDIO_TYPE   
 *
 ******************************************************************************/
#define BCM84834_TOP_GPHY_MDIO_TYPEr (0x001e4026 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GPHY_MDIO_TYPEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_GPHY_MDIO_TYPE.
 *
 */
typedef union BCM84834_TOP_GPHY_MDIO_TYPEr_s {
	uint32_t v[1];
	uint32_t top_gphy_mdio_type[1];
	uint32_t _top_gphy_mdio_type;
} BCM84834_TOP_GPHY_MDIO_TYPEr_t;

#define BCM84834_TOP_GPHY_MDIO_TYPEr_CLR(r) (r).top_gphy_mdio_type[0] = 0
#define BCM84834_TOP_GPHY_MDIO_TYPEr_SET(r,d) (r).top_gphy_mdio_type[0] = d
#define BCM84834_TOP_GPHY_MDIO_TYPEr_GET(r) (r).top_gphy_mdio_type[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_GET(r) (((r).top_gphy_mdio_type[0]) & 0x1)
#define BCM84834_TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_SET(r,f) (r).top_gphy_mdio_type[0]=(((r).top_gphy_mdio_type[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GPHY_MDIO_TYPE.
 *
 */
#define BCM84834_READ_TOP_GPHY_MDIO_TYPEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GPHY_MDIO_TYPEr,(_r._top_gphy_mdio_type))
#define BCM84834_WRITE_TOP_GPHY_MDIO_TYPEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GPHY_MDIO_TYPEr,(_r._top_gphy_mdio_type))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GPHY_MDIO_TYPEr BCM84834_TOP_GPHY_MDIO_TYPEr
#define TOP_GPHY_MDIO_TYPEr_SIZE BCM84834_TOP_GPHY_MDIO_TYPEr_SIZE
typedef BCM84834_TOP_GPHY_MDIO_TYPEr_t TOP_GPHY_MDIO_TYPEr_t;
#define TOP_GPHY_MDIO_TYPEr_CLR BCM84834_TOP_GPHY_MDIO_TYPEr_CLR
#define TOP_GPHY_MDIO_TYPEr_SET BCM84834_TOP_GPHY_MDIO_TYPEr_SET
#define TOP_GPHY_MDIO_TYPEr_GET BCM84834_TOP_GPHY_MDIO_TYPEr_GET
#define TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_GET BCM84834_TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_GET
#define TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_SET BCM84834_TOP_GPHY_MDIO_TYPEr_GPHY_MDIO_TYPEf_SET
#define READ_TOP_GPHY_MDIO_TYPEr BCM84834_READ_TOP_GPHY_MDIO_TYPEr
#define WRITE_TOP_GPHY_MDIO_TYPEr BCM84834_WRITE_TOP_GPHY_MDIO_TYPEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GPHY_MDIO_TYPEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SERDES_INT_MASK
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4027
 * DEVAD:    30
 * DESC:     SerDes Interrupt Mask reg
 * SIZE:     32
 * FIELDS:
 *     SERDES_INT_MASK  
 *
 ******************************************************************************/
#define BCM84834_TOP_SERDES_INT_MASKr (0x001e4027 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SERDES_INT_MASKr_SIZE 4

/*
 * This structure should be used to declare and program TOP_SERDES_INT_MASK.
 *
 */
typedef union BCM84834_TOP_SERDES_INT_MASKr_s {
	uint32_t v[1];
	uint32_t top_serdes_int_mask[1];
	uint32_t _top_serdes_int_mask;
} BCM84834_TOP_SERDES_INT_MASKr_t;

#define BCM84834_TOP_SERDES_INT_MASKr_CLR(r) (r).top_serdes_int_mask[0] = 0
#define BCM84834_TOP_SERDES_INT_MASKr_SET(r,d) (r).top_serdes_int_mask[0] = d
#define BCM84834_TOP_SERDES_INT_MASKr_GET(r) (r).top_serdes_int_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_GET(r) (((r).top_serdes_int_mask[0]) & 0x3fff)
#define BCM84834_TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_SET(r,f) (r).top_serdes_int_mask[0]=(((r).top_serdes_int_mask[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TOP_SERDES_INT_MASK.
 *
 */
#define BCM84834_READ_TOP_SERDES_INT_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SERDES_INT_MASKr,(_r._top_serdes_int_mask))
#define BCM84834_WRITE_TOP_SERDES_INT_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SERDES_INT_MASKr,(_r._top_serdes_int_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SERDES_INT_MASKr BCM84834_TOP_SERDES_INT_MASKr
#define TOP_SERDES_INT_MASKr_SIZE BCM84834_TOP_SERDES_INT_MASKr_SIZE
typedef BCM84834_TOP_SERDES_INT_MASKr_t TOP_SERDES_INT_MASKr_t;
#define TOP_SERDES_INT_MASKr_CLR BCM84834_TOP_SERDES_INT_MASKr_CLR
#define TOP_SERDES_INT_MASKr_SET BCM84834_TOP_SERDES_INT_MASKr_SET
#define TOP_SERDES_INT_MASKr_GET BCM84834_TOP_SERDES_INT_MASKr_GET
#define TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_GET BCM84834_TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_GET
#define TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_SET BCM84834_TOP_SERDES_INT_MASKr_SERDES_INT_MASKf_SET
#define READ_TOP_SERDES_INT_MASKr BCM84834_READ_TOP_SERDES_INT_MASKr
#define WRITE_TOP_SERDES_INT_MASKr BCM84834_WRITE_TOP_SERDES_INT_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SERDES_INT_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH64
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4028
 * DEVAD:    30
 * DESC:     Scratch reg 64
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH64r (0x001e4028 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH64r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH64.
 *
 */
typedef union BCM84834_TOP_SCRATCH64r_s {
	uint32_t v[1];
	uint32_t top_scratch64[1];
	uint32_t _top_scratch64;
} BCM84834_TOP_SCRATCH64r_t;

#define BCM84834_TOP_SCRATCH64r_CLR(r) (r).top_scratch64[0] = 0
#define BCM84834_TOP_SCRATCH64r_SET(r,d) (r).top_scratch64[0] = d
#define BCM84834_TOP_SCRATCH64r_GET(r) (r).top_scratch64[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH64r_SCRATCHf_GET(r) (((r).top_scratch64[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH64r_SCRATCHf_SET(r,f) (r).top_scratch64[0]=(((r).top_scratch64[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH64.
 *
 */
#define BCM84834_READ_TOP_SCRATCH64r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH64r,(_r._top_scratch64))
#define BCM84834_WRITE_TOP_SCRATCH64r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH64r,(_r._top_scratch64))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH64r BCM84834_TOP_SCRATCH64r
#define TOP_SCRATCH64r_SIZE BCM84834_TOP_SCRATCH64r_SIZE
typedef BCM84834_TOP_SCRATCH64r_t TOP_SCRATCH64r_t;
#define TOP_SCRATCH64r_CLR BCM84834_TOP_SCRATCH64r_CLR
#define TOP_SCRATCH64r_SET BCM84834_TOP_SCRATCH64r_SET
#define TOP_SCRATCH64r_GET BCM84834_TOP_SCRATCH64r_GET
#define TOP_SCRATCH64r_SCRATCHf_GET BCM84834_TOP_SCRATCH64r_SCRATCHf_GET
#define TOP_SCRATCH64r_SCRATCHf_SET BCM84834_TOP_SCRATCH64r_SCRATCHf_SET
#define READ_TOP_SCRATCH64r BCM84834_READ_TOP_SCRATCH64r
#define WRITE_TOP_SCRATCH64r BCM84834_WRITE_TOP_SCRATCH64r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH64r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH65
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4029
 * DEVAD:    30
 * DESC:     Scratch reg 65
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH65r (0x001e4029 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH65r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH65.
 *
 */
typedef union BCM84834_TOP_SCRATCH65r_s {
	uint32_t v[1];
	uint32_t top_scratch65[1];
	uint32_t _top_scratch65;
} BCM84834_TOP_SCRATCH65r_t;

#define BCM84834_TOP_SCRATCH65r_CLR(r) (r).top_scratch65[0] = 0
#define BCM84834_TOP_SCRATCH65r_SET(r,d) (r).top_scratch65[0] = d
#define BCM84834_TOP_SCRATCH65r_GET(r) (r).top_scratch65[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH65r_SCRATCHf_GET(r) (((r).top_scratch65[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH65r_SCRATCHf_SET(r,f) (r).top_scratch65[0]=(((r).top_scratch65[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH65.
 *
 */
#define BCM84834_READ_TOP_SCRATCH65r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH65r,(_r._top_scratch65))
#define BCM84834_WRITE_TOP_SCRATCH65r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH65r,(_r._top_scratch65))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH65r BCM84834_TOP_SCRATCH65r
#define TOP_SCRATCH65r_SIZE BCM84834_TOP_SCRATCH65r_SIZE
typedef BCM84834_TOP_SCRATCH65r_t TOP_SCRATCH65r_t;
#define TOP_SCRATCH65r_CLR BCM84834_TOP_SCRATCH65r_CLR
#define TOP_SCRATCH65r_SET BCM84834_TOP_SCRATCH65r_SET
#define TOP_SCRATCH65r_GET BCM84834_TOP_SCRATCH65r_GET
#define TOP_SCRATCH65r_SCRATCHf_GET BCM84834_TOP_SCRATCH65r_SCRATCHf_GET
#define TOP_SCRATCH65r_SCRATCHf_SET BCM84834_TOP_SCRATCH65r_SCRATCHf_SET
#define READ_TOP_SCRATCH65r BCM84834_READ_TOP_SCRATCH65r
#define WRITE_TOP_SCRATCH65r BCM84834_WRITE_TOP_SCRATCH65r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH65r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH16
 * BLOCKS:   TOP
 * REGADDR:  0x402d
 * DEVAD:    30
 * DESC:     Scratch reg 16
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH16r (0x001e402d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH16r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH16.
 *
 */
typedef union BCM84834_TOP_SCRATCH16r_s {
	uint32_t v[1];
	uint32_t top_scratch16[1];
	uint32_t _top_scratch16;
} BCM84834_TOP_SCRATCH16r_t;

#define BCM84834_TOP_SCRATCH16r_CLR(r) (r).top_scratch16[0] = 0
#define BCM84834_TOP_SCRATCH16r_SET(r,d) (r).top_scratch16[0] = d
#define BCM84834_TOP_SCRATCH16r_GET(r) (r).top_scratch16[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH16r_SCRATCHf_GET(r) (((r).top_scratch16[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH16r_SCRATCHf_SET(r,f) (r).top_scratch16[0]=(((r).top_scratch16[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH16.
 *
 */
#define BCM84834_READ_TOP_SCRATCH16r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH16r,(_r._top_scratch16))
#define BCM84834_WRITE_TOP_SCRATCH16r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH16r,(_r._top_scratch16))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH16r BCM84834_TOP_SCRATCH16r
#define TOP_SCRATCH16r_SIZE BCM84834_TOP_SCRATCH16r_SIZE
typedef BCM84834_TOP_SCRATCH16r_t TOP_SCRATCH16r_t;
#define TOP_SCRATCH16r_CLR BCM84834_TOP_SCRATCH16r_CLR
#define TOP_SCRATCH16r_SET BCM84834_TOP_SCRATCH16r_SET
#define TOP_SCRATCH16r_GET BCM84834_TOP_SCRATCH16r_GET
#define TOP_SCRATCH16r_SCRATCHf_GET BCM84834_TOP_SCRATCH16r_SCRATCHf_GET
#define TOP_SCRATCH16r_SCRATCHf_SET BCM84834_TOP_SCRATCH16r_SCRATCHf_SET
#define READ_TOP_SCRATCH16r BCM84834_READ_TOP_SCRATCH16r
#define WRITE_TOP_SCRATCH16r BCM84834_WRITE_TOP_SCRATCH16r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH16r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH17
 * BLOCKS:   TOP
 * REGADDR:  0x402e
 * DEVAD:    30
 * DESC:     Scratch reg 17
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH17r (0x001e402e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH17r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH17.
 *
 */
typedef union BCM84834_TOP_SCRATCH17r_s {
	uint32_t v[1];
	uint32_t top_scratch17[1];
	uint32_t _top_scratch17;
} BCM84834_TOP_SCRATCH17r_t;

#define BCM84834_TOP_SCRATCH17r_CLR(r) (r).top_scratch17[0] = 0
#define BCM84834_TOP_SCRATCH17r_SET(r,d) (r).top_scratch17[0] = d
#define BCM84834_TOP_SCRATCH17r_GET(r) (r).top_scratch17[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH17r_SCRATCHf_GET(r) (((r).top_scratch17[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH17r_SCRATCHf_SET(r,f) (r).top_scratch17[0]=(((r).top_scratch17[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH17.
 *
 */
#define BCM84834_READ_TOP_SCRATCH17r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH17r,(_r._top_scratch17))
#define BCM84834_WRITE_TOP_SCRATCH17r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH17r,(_r._top_scratch17))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH17r BCM84834_TOP_SCRATCH17r
#define TOP_SCRATCH17r_SIZE BCM84834_TOP_SCRATCH17r_SIZE
typedef BCM84834_TOP_SCRATCH17r_t TOP_SCRATCH17r_t;
#define TOP_SCRATCH17r_CLR BCM84834_TOP_SCRATCH17r_CLR
#define TOP_SCRATCH17r_SET BCM84834_TOP_SCRATCH17r_SET
#define TOP_SCRATCH17r_GET BCM84834_TOP_SCRATCH17r_GET
#define TOP_SCRATCH17r_SCRATCHf_GET BCM84834_TOP_SCRATCH17r_SCRATCHf_GET
#define TOP_SCRATCH17r_SCRATCHf_SET BCM84834_TOP_SCRATCH17r_SCRATCHf_SET
#define READ_TOP_SCRATCH17r BCM84834_READ_TOP_SCRATCH17r
#define WRITE_TOP_SCRATCH17r BCM84834_WRITE_TOP_SCRATCH17r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH17r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH18
 * BLOCKS:   TOP
 * REGADDR:  0x402f
 * DEVAD:    30
 * DESC:     Scratch reg 18
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH18r (0x001e402f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH18r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH18.
 *
 */
typedef union BCM84834_TOP_SCRATCH18r_s {
	uint32_t v[1];
	uint32_t top_scratch18[1];
	uint32_t _top_scratch18;
} BCM84834_TOP_SCRATCH18r_t;

#define BCM84834_TOP_SCRATCH18r_CLR(r) (r).top_scratch18[0] = 0
#define BCM84834_TOP_SCRATCH18r_SET(r,d) (r).top_scratch18[0] = d
#define BCM84834_TOP_SCRATCH18r_GET(r) (r).top_scratch18[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH18r_SCRATCHf_GET(r) (((r).top_scratch18[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH18r_SCRATCHf_SET(r,f) (r).top_scratch18[0]=(((r).top_scratch18[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH18.
 *
 */
#define BCM84834_READ_TOP_SCRATCH18r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH18r,(_r._top_scratch18))
#define BCM84834_WRITE_TOP_SCRATCH18r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH18r,(_r._top_scratch18))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH18r BCM84834_TOP_SCRATCH18r
#define TOP_SCRATCH18r_SIZE BCM84834_TOP_SCRATCH18r_SIZE
typedef BCM84834_TOP_SCRATCH18r_t TOP_SCRATCH18r_t;
#define TOP_SCRATCH18r_CLR BCM84834_TOP_SCRATCH18r_CLR
#define TOP_SCRATCH18r_SET BCM84834_TOP_SCRATCH18r_SET
#define TOP_SCRATCH18r_GET BCM84834_TOP_SCRATCH18r_GET
#define TOP_SCRATCH18r_SCRATCHf_GET BCM84834_TOP_SCRATCH18r_SCRATCHf_GET
#define TOP_SCRATCH18r_SCRATCHf_SET BCM84834_TOP_SCRATCH18r_SCRATCHf_SET
#define READ_TOP_SCRATCH18r BCM84834_READ_TOP_SCRATCH18r
#define WRITE_TOP_SCRATCH18r BCM84834_WRITE_TOP_SCRATCH18r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH18r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH19
 * BLOCKS:   TOP
 * REGADDR:  0x4030
 * DEVAD:    30
 * DESC:     Scratch reg 19
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH19r (0x001e4030 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH19r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH19.
 *
 */
typedef union BCM84834_TOP_SCRATCH19r_s {
	uint32_t v[1];
	uint32_t top_scratch19[1];
	uint32_t _top_scratch19;
} BCM84834_TOP_SCRATCH19r_t;

#define BCM84834_TOP_SCRATCH19r_CLR(r) (r).top_scratch19[0] = 0
#define BCM84834_TOP_SCRATCH19r_SET(r,d) (r).top_scratch19[0] = d
#define BCM84834_TOP_SCRATCH19r_GET(r) (r).top_scratch19[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH19r_SCRATCHf_GET(r) (((r).top_scratch19[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH19r_SCRATCHf_SET(r,f) (r).top_scratch19[0]=(((r).top_scratch19[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH19.
 *
 */
#define BCM84834_READ_TOP_SCRATCH19r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH19r,(_r._top_scratch19))
#define BCM84834_WRITE_TOP_SCRATCH19r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH19r,(_r._top_scratch19))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH19r BCM84834_TOP_SCRATCH19r
#define TOP_SCRATCH19r_SIZE BCM84834_TOP_SCRATCH19r_SIZE
typedef BCM84834_TOP_SCRATCH19r_t TOP_SCRATCH19r_t;
#define TOP_SCRATCH19r_CLR BCM84834_TOP_SCRATCH19r_CLR
#define TOP_SCRATCH19r_SET BCM84834_TOP_SCRATCH19r_SET
#define TOP_SCRATCH19r_GET BCM84834_TOP_SCRATCH19r_GET
#define TOP_SCRATCH19r_SCRATCHf_GET BCM84834_TOP_SCRATCH19r_SCRATCHf_GET
#define TOP_SCRATCH19r_SCRATCHf_SET BCM84834_TOP_SCRATCH19r_SCRATCHf_SET
#define READ_TOP_SCRATCH19r BCM84834_READ_TOP_SCRATCH19r
#define WRITE_TOP_SCRATCH19r BCM84834_WRITE_TOP_SCRATCH19r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH19r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH20
 * BLOCKS:   TOP
 * REGADDR:  0x4031
 * DEVAD:    30
 * DESC:     Scratch reg 20
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH20r (0x001e4031 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH20r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH20.
 *
 */
typedef union BCM84834_TOP_SCRATCH20r_s {
	uint32_t v[1];
	uint32_t top_scratch20[1];
	uint32_t _top_scratch20;
} BCM84834_TOP_SCRATCH20r_t;

#define BCM84834_TOP_SCRATCH20r_CLR(r) (r).top_scratch20[0] = 0
#define BCM84834_TOP_SCRATCH20r_SET(r,d) (r).top_scratch20[0] = d
#define BCM84834_TOP_SCRATCH20r_GET(r) (r).top_scratch20[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH20r_SCRATCHf_GET(r) (((r).top_scratch20[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH20r_SCRATCHf_SET(r,f) (r).top_scratch20[0]=(((r).top_scratch20[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH20.
 *
 */
#define BCM84834_READ_TOP_SCRATCH20r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH20r,(_r._top_scratch20))
#define BCM84834_WRITE_TOP_SCRATCH20r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH20r,(_r._top_scratch20))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH20r BCM84834_TOP_SCRATCH20r
#define TOP_SCRATCH20r_SIZE BCM84834_TOP_SCRATCH20r_SIZE
typedef BCM84834_TOP_SCRATCH20r_t TOP_SCRATCH20r_t;
#define TOP_SCRATCH20r_CLR BCM84834_TOP_SCRATCH20r_CLR
#define TOP_SCRATCH20r_SET BCM84834_TOP_SCRATCH20r_SET
#define TOP_SCRATCH20r_GET BCM84834_TOP_SCRATCH20r_GET
#define TOP_SCRATCH20r_SCRATCHf_GET BCM84834_TOP_SCRATCH20r_SCRATCHf_GET
#define TOP_SCRATCH20r_SCRATCHf_SET BCM84834_TOP_SCRATCH20r_SCRATCHf_SET
#define READ_TOP_SCRATCH20r BCM84834_READ_TOP_SCRATCH20r
#define WRITE_TOP_SCRATCH20r BCM84834_WRITE_TOP_SCRATCH20r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH20r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH21
 * BLOCKS:   TOP
 * REGADDR:  0x4032
 * DEVAD:    30
 * DESC:     Scratch reg 21
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH21r (0x001e4032 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH21r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH21.
 *
 */
typedef union BCM84834_TOP_SCRATCH21r_s {
	uint32_t v[1];
	uint32_t top_scratch21[1];
	uint32_t _top_scratch21;
} BCM84834_TOP_SCRATCH21r_t;

#define BCM84834_TOP_SCRATCH21r_CLR(r) (r).top_scratch21[0] = 0
#define BCM84834_TOP_SCRATCH21r_SET(r,d) (r).top_scratch21[0] = d
#define BCM84834_TOP_SCRATCH21r_GET(r) (r).top_scratch21[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH21r_SCRATCHf_GET(r) (((r).top_scratch21[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH21r_SCRATCHf_SET(r,f) (r).top_scratch21[0]=(((r).top_scratch21[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH21.
 *
 */
#define BCM84834_READ_TOP_SCRATCH21r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH21r,(_r._top_scratch21))
#define BCM84834_WRITE_TOP_SCRATCH21r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH21r,(_r._top_scratch21))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH21r BCM84834_TOP_SCRATCH21r
#define TOP_SCRATCH21r_SIZE BCM84834_TOP_SCRATCH21r_SIZE
typedef BCM84834_TOP_SCRATCH21r_t TOP_SCRATCH21r_t;
#define TOP_SCRATCH21r_CLR BCM84834_TOP_SCRATCH21r_CLR
#define TOP_SCRATCH21r_SET BCM84834_TOP_SCRATCH21r_SET
#define TOP_SCRATCH21r_GET BCM84834_TOP_SCRATCH21r_GET
#define TOP_SCRATCH21r_SCRATCHf_GET BCM84834_TOP_SCRATCH21r_SCRATCHf_GET
#define TOP_SCRATCH21r_SCRATCHf_SET BCM84834_TOP_SCRATCH21r_SCRATCHf_SET
#define READ_TOP_SCRATCH21r BCM84834_READ_TOP_SCRATCH21r
#define WRITE_TOP_SCRATCH21r BCM84834_WRITE_TOP_SCRATCH21r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH21r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH22
 * BLOCKS:   TOP
 * REGADDR:  0x4033
 * DEVAD:    30
 * DESC:     Scratch reg 22
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH22r (0x001e4033 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH22r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH22.
 *
 */
typedef union BCM84834_TOP_SCRATCH22r_s {
	uint32_t v[1];
	uint32_t top_scratch22[1];
	uint32_t _top_scratch22;
} BCM84834_TOP_SCRATCH22r_t;

#define BCM84834_TOP_SCRATCH22r_CLR(r) (r).top_scratch22[0] = 0
#define BCM84834_TOP_SCRATCH22r_SET(r,d) (r).top_scratch22[0] = d
#define BCM84834_TOP_SCRATCH22r_GET(r) (r).top_scratch22[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH22r_SCRATCHf_GET(r) (((r).top_scratch22[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH22r_SCRATCHf_SET(r,f) (r).top_scratch22[0]=(((r).top_scratch22[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH22.
 *
 */
#define BCM84834_READ_TOP_SCRATCH22r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH22r,(_r._top_scratch22))
#define BCM84834_WRITE_TOP_SCRATCH22r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH22r,(_r._top_scratch22))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH22r BCM84834_TOP_SCRATCH22r
#define TOP_SCRATCH22r_SIZE BCM84834_TOP_SCRATCH22r_SIZE
typedef BCM84834_TOP_SCRATCH22r_t TOP_SCRATCH22r_t;
#define TOP_SCRATCH22r_CLR BCM84834_TOP_SCRATCH22r_CLR
#define TOP_SCRATCH22r_SET BCM84834_TOP_SCRATCH22r_SET
#define TOP_SCRATCH22r_GET BCM84834_TOP_SCRATCH22r_GET
#define TOP_SCRATCH22r_SCRATCHf_GET BCM84834_TOP_SCRATCH22r_SCRATCHf_GET
#define TOP_SCRATCH22r_SCRATCHf_SET BCM84834_TOP_SCRATCH22r_SCRATCHf_SET
#define READ_TOP_SCRATCH22r BCM84834_READ_TOP_SCRATCH22r
#define WRITE_TOP_SCRATCH22r BCM84834_WRITE_TOP_SCRATCH22r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH22r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH23
 * BLOCKS:   TOP
 * REGADDR:  0x4034
 * DEVAD:    30
 * DESC:     Scratch reg 23
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH23r (0x001e4034 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH23r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH23.
 *
 */
typedef union BCM84834_TOP_SCRATCH23r_s {
	uint32_t v[1];
	uint32_t top_scratch23[1];
	uint32_t _top_scratch23;
} BCM84834_TOP_SCRATCH23r_t;

#define BCM84834_TOP_SCRATCH23r_CLR(r) (r).top_scratch23[0] = 0
#define BCM84834_TOP_SCRATCH23r_SET(r,d) (r).top_scratch23[0] = d
#define BCM84834_TOP_SCRATCH23r_GET(r) (r).top_scratch23[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH23r_SCRATCHf_GET(r) (((r).top_scratch23[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH23r_SCRATCHf_SET(r,f) (r).top_scratch23[0]=(((r).top_scratch23[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH23.
 *
 */
#define BCM84834_READ_TOP_SCRATCH23r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH23r,(_r._top_scratch23))
#define BCM84834_WRITE_TOP_SCRATCH23r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH23r,(_r._top_scratch23))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH23r BCM84834_TOP_SCRATCH23r
#define TOP_SCRATCH23r_SIZE BCM84834_TOP_SCRATCH23r_SIZE
typedef BCM84834_TOP_SCRATCH23r_t TOP_SCRATCH23r_t;
#define TOP_SCRATCH23r_CLR BCM84834_TOP_SCRATCH23r_CLR
#define TOP_SCRATCH23r_SET BCM84834_TOP_SCRATCH23r_SET
#define TOP_SCRATCH23r_GET BCM84834_TOP_SCRATCH23r_GET
#define TOP_SCRATCH23r_SCRATCHf_GET BCM84834_TOP_SCRATCH23r_SCRATCHf_GET
#define TOP_SCRATCH23r_SCRATCHf_SET BCM84834_TOP_SCRATCH23r_SCRATCHf_SET
#define READ_TOP_SCRATCH23r BCM84834_READ_TOP_SCRATCH23r
#define WRITE_TOP_SCRATCH23r BCM84834_WRITE_TOP_SCRATCH23r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH23r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH24
 * BLOCKS:   TOP
 * REGADDR:  0x4035
 * DEVAD:    30
 * DESC:     Scratch reg 24
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH24r (0x001e4035 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH24r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH24.
 *
 */
typedef union BCM84834_TOP_SCRATCH24r_s {
	uint32_t v[1];
	uint32_t top_scratch24[1];
	uint32_t _top_scratch24;
} BCM84834_TOP_SCRATCH24r_t;

#define BCM84834_TOP_SCRATCH24r_CLR(r) (r).top_scratch24[0] = 0
#define BCM84834_TOP_SCRATCH24r_SET(r,d) (r).top_scratch24[0] = d
#define BCM84834_TOP_SCRATCH24r_GET(r) (r).top_scratch24[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH24r_SCRATCHf_GET(r) (((r).top_scratch24[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH24r_SCRATCHf_SET(r,f) (r).top_scratch24[0]=(((r).top_scratch24[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH24.
 *
 */
#define BCM84834_READ_TOP_SCRATCH24r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH24r,(_r._top_scratch24))
#define BCM84834_WRITE_TOP_SCRATCH24r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH24r,(_r._top_scratch24))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH24r BCM84834_TOP_SCRATCH24r
#define TOP_SCRATCH24r_SIZE BCM84834_TOP_SCRATCH24r_SIZE
typedef BCM84834_TOP_SCRATCH24r_t TOP_SCRATCH24r_t;
#define TOP_SCRATCH24r_CLR BCM84834_TOP_SCRATCH24r_CLR
#define TOP_SCRATCH24r_SET BCM84834_TOP_SCRATCH24r_SET
#define TOP_SCRATCH24r_GET BCM84834_TOP_SCRATCH24r_GET
#define TOP_SCRATCH24r_SCRATCHf_GET BCM84834_TOP_SCRATCH24r_SCRATCHf_GET
#define TOP_SCRATCH24r_SCRATCHf_SET BCM84834_TOP_SCRATCH24r_SCRATCHf_SET
#define READ_TOP_SCRATCH24r BCM84834_READ_TOP_SCRATCH24r
#define WRITE_TOP_SCRATCH24r BCM84834_WRITE_TOP_SCRATCH24r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH24r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SCRATCH25
 * BLOCKS:   TOP
 * REGADDR:  0x4036
 * DEVAD:    30
 * DESC:     Scratch reg 25
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_TOP_SCRATCH25r (0x001e4036 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SCRATCH25r_SIZE 4

/*
 * This structure should be used to declare and program TOP_SCRATCH25.
 *
 */
typedef union BCM84834_TOP_SCRATCH25r_s {
	uint32_t v[1];
	uint32_t top_scratch25[1];
	uint32_t _top_scratch25;
} BCM84834_TOP_SCRATCH25r_t;

#define BCM84834_TOP_SCRATCH25r_CLR(r) (r).top_scratch25[0] = 0
#define BCM84834_TOP_SCRATCH25r_SET(r,d) (r).top_scratch25[0] = d
#define BCM84834_TOP_SCRATCH25r_GET(r) (r).top_scratch25[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SCRATCH25r_SCRATCHf_GET(r) (((r).top_scratch25[0]) & 0xffff)
#define BCM84834_TOP_SCRATCH25r_SCRATCHf_SET(r,f) (r).top_scratch25[0]=(((r).top_scratch25[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_SCRATCH25.
 *
 */
#define BCM84834_READ_TOP_SCRATCH25r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SCRATCH25r,(_r._top_scratch25))
#define BCM84834_WRITE_TOP_SCRATCH25r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SCRATCH25r,(_r._top_scratch25))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SCRATCH25r BCM84834_TOP_SCRATCH25r
#define TOP_SCRATCH25r_SIZE BCM84834_TOP_SCRATCH25r_SIZE
typedef BCM84834_TOP_SCRATCH25r_t TOP_SCRATCH25r_t;
#define TOP_SCRATCH25r_CLR BCM84834_TOP_SCRATCH25r_CLR
#define TOP_SCRATCH25r_SET BCM84834_TOP_SCRATCH25r_SET
#define TOP_SCRATCH25r_GET BCM84834_TOP_SCRATCH25r_GET
#define TOP_SCRATCH25r_SCRATCHf_GET BCM84834_TOP_SCRATCH25r_SCRATCHf_GET
#define TOP_SCRATCH25r_SCRATCHf_SET BCM84834_TOP_SCRATCH25r_SCRATCHf_SET
#define READ_TOP_SCRATCH25r BCM84834_READ_TOP_SCRATCH25r
#define WRITE_TOP_SCRATCH25r BCM84834_WRITE_TOP_SCRATCH25r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SCRATCH25r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_STAT
 * BLOCKS:   TOP
 * REGADDR:  0x4037
 * DEVAD:    30
 * DESC:     Scratch reg 26
 * SIZE:     32
 * FIELDS:
 *     STAT             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_STATr (0x001e4037 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_STATr_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_STAT.
 *
 */
typedef union BCM84834_TOP_MCH_STATr_s {
	uint32_t v[1];
	uint32_t top_mch_stat[1];
	uint32_t _top_mch_stat;
} BCM84834_TOP_MCH_STATr_t;

#define BCM84834_TOP_MCH_STATr_CLR(r) (r).top_mch_stat[0] = 0
#define BCM84834_TOP_MCH_STATr_SET(r,d) (r).top_mch_stat[0] = d
#define BCM84834_TOP_MCH_STATr_GET(r) (r).top_mch_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_STATr_STATf_GET(r) (((r).top_mch_stat[0]) & 0xffff)
#define BCM84834_TOP_MCH_STATr_STATf_SET(r,f) (r).top_mch_stat[0]=(((r).top_mch_stat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_STAT.
 *
 */
#define BCM84834_READ_TOP_MCH_STATr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_STATr,(_r._top_mch_stat))
#define BCM84834_WRITE_TOP_MCH_STATr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_STATr,(_r._top_mch_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_STATr BCM84834_TOP_MCH_STATr
#define TOP_MCH_STATr_SIZE BCM84834_TOP_MCH_STATr_SIZE
typedef BCM84834_TOP_MCH_STATr_t TOP_MCH_STATr_t;
#define TOP_MCH_STATr_CLR BCM84834_TOP_MCH_STATr_CLR
#define TOP_MCH_STATr_SET BCM84834_TOP_MCH_STATr_SET
#define TOP_MCH_STATr_GET BCM84834_TOP_MCH_STATr_GET
#define TOP_MCH_STATr_STATf_GET BCM84834_TOP_MCH_STATr_STATf_GET
#define TOP_MCH_STATr_STATf_SET BCM84834_TOP_MCH_STATr_STATf_SET
#define READ_TOP_MCH_STATr BCM84834_READ_TOP_MCH_STATr
#define WRITE_TOP_MCH_STATr BCM84834_WRITE_TOP_MCH_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA
 * BLOCKS:   TOP
 * REGADDR:  0x4038
 * DEVAD:    30
 * DESC:     Scratch reg 27
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATAr (0x001e4038 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATAr_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA.
 *
 */
typedef union BCM84834_TOP_MCH_DATAr_s {
	uint32_t v[1];
	uint32_t top_mch_data[1];
	uint32_t _top_mch_data;
} BCM84834_TOP_MCH_DATAr_t;

#define BCM84834_TOP_MCH_DATAr_CLR(r) (r).top_mch_data[0] = 0
#define BCM84834_TOP_MCH_DATAr_SET(r,d) (r).top_mch_data[0] = d
#define BCM84834_TOP_MCH_DATAr_GET(r) (r).top_mch_data[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATAr_DATAf_GET(r) (((r).top_mch_data[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATAr_DATAf_SET(r,f) (r).top_mch_data[0]=(((r).top_mch_data[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA.
 *
 */
#define BCM84834_READ_TOP_MCH_DATAr(_pc,_i,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATAr+(_i),(_r._top_mch_data))
#define BCM84834_WRITE_TOP_MCH_DATAr(_pc,_i,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATAr+(_i),(_r._top_mch_data))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATAr BCM84834_TOP_MCH_DATAr
#define TOP_MCH_DATAr_SIZE BCM84834_TOP_MCH_DATAr_SIZE
typedef BCM84834_TOP_MCH_DATAr_t TOP_MCH_DATAr_t;
#define TOP_MCH_DATAr_CLR BCM84834_TOP_MCH_DATAr_CLR
#define TOP_MCH_DATAr_SET BCM84834_TOP_MCH_DATAr_SET
#define TOP_MCH_DATAr_GET BCM84834_TOP_MCH_DATAr_GET
#define TOP_MCH_DATAr_DATAf_GET BCM84834_TOP_MCH_DATAr_DATAf_GET
#define TOP_MCH_DATAr_DATAf_SET BCM84834_TOP_MCH_DATAr_DATAf_SET
#define READ_TOP_MCH_DATAr BCM84834_READ_TOP_MCH_DATAr
#define WRITE_TOP_MCH_DATAr BCM84834_WRITE_TOP_MCH_DATAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA1
 * BLOCKS:   TOP
 * REGADDR:  0x4038
 * DEVAD:    30
 * DESC:     Scratch reg 27
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATA1r (0x001e4038 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATA1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA1.
 *
 */
typedef union BCM84834_TOP_MCH_DATA1r_s {
	uint32_t v[1];
	uint32_t top_mch_data1[1];
	uint32_t _top_mch_data1;
} BCM84834_TOP_MCH_DATA1r_t;

#define BCM84834_TOP_MCH_DATA1r_CLR(r) (r).top_mch_data1[0] = 0
#define BCM84834_TOP_MCH_DATA1r_SET(r,d) (r).top_mch_data1[0] = d
#define BCM84834_TOP_MCH_DATA1r_GET(r) (r).top_mch_data1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATA1r_DATAf_GET(r) (((r).top_mch_data1[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATA1r_DATAf_SET(r,f) (r).top_mch_data1[0]=(((r).top_mch_data1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA1.
 *
 */
#define BCM84834_READ_TOP_MCH_DATA1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATA1r,(_r._top_mch_data1))
#define BCM84834_WRITE_TOP_MCH_DATA1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATA1r,(_r._top_mch_data1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATA1r BCM84834_TOP_MCH_DATA1r
#define TOP_MCH_DATA1r_SIZE BCM84834_TOP_MCH_DATA1r_SIZE
typedef BCM84834_TOP_MCH_DATA1r_t TOP_MCH_DATA1r_t;
#define TOP_MCH_DATA1r_CLR BCM84834_TOP_MCH_DATA1r_CLR
#define TOP_MCH_DATA1r_SET BCM84834_TOP_MCH_DATA1r_SET
#define TOP_MCH_DATA1r_GET BCM84834_TOP_MCH_DATA1r_GET
#define TOP_MCH_DATA1r_DATAf_GET BCM84834_TOP_MCH_DATA1r_DATAf_GET
#define TOP_MCH_DATA1r_DATAf_SET BCM84834_TOP_MCH_DATA1r_DATAf_SET
#define READ_TOP_MCH_DATA1r BCM84834_READ_TOP_MCH_DATA1r
#define WRITE_TOP_MCH_DATA1r BCM84834_WRITE_TOP_MCH_DATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA2
 * BLOCKS:   TOP
 * REGADDR:  0x4039
 * DEVAD:    30
 * DESC:     Scratch reg 28
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATA2r (0x001e4039 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATA2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA2.
 *
 */
typedef union BCM84834_TOP_MCH_DATA2r_s {
	uint32_t v[1];
	uint32_t top_mch_data2[1];
	uint32_t _top_mch_data2;
} BCM84834_TOP_MCH_DATA2r_t;

#define BCM84834_TOP_MCH_DATA2r_CLR(r) (r).top_mch_data2[0] = 0
#define BCM84834_TOP_MCH_DATA2r_SET(r,d) (r).top_mch_data2[0] = d
#define BCM84834_TOP_MCH_DATA2r_GET(r) (r).top_mch_data2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATA2r_DATAf_GET(r) (((r).top_mch_data2[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATA2r_DATAf_SET(r,f) (r).top_mch_data2[0]=(((r).top_mch_data2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA2.
 *
 */
#define BCM84834_READ_TOP_MCH_DATA2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATA2r,(_r._top_mch_data2))
#define BCM84834_WRITE_TOP_MCH_DATA2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATA2r,(_r._top_mch_data2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATA2r BCM84834_TOP_MCH_DATA2r
#define TOP_MCH_DATA2r_SIZE BCM84834_TOP_MCH_DATA2r_SIZE
typedef BCM84834_TOP_MCH_DATA2r_t TOP_MCH_DATA2r_t;
#define TOP_MCH_DATA2r_CLR BCM84834_TOP_MCH_DATA2r_CLR
#define TOP_MCH_DATA2r_SET BCM84834_TOP_MCH_DATA2r_SET
#define TOP_MCH_DATA2r_GET BCM84834_TOP_MCH_DATA2r_GET
#define TOP_MCH_DATA2r_DATAf_GET BCM84834_TOP_MCH_DATA2r_DATAf_GET
#define TOP_MCH_DATA2r_DATAf_SET BCM84834_TOP_MCH_DATA2r_DATAf_SET
#define READ_TOP_MCH_DATA2r BCM84834_READ_TOP_MCH_DATA2r
#define WRITE_TOP_MCH_DATA2r BCM84834_WRITE_TOP_MCH_DATA2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATA2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA3
 * BLOCKS:   TOP
 * REGADDR:  0x403a
 * DEVAD:    30
 * DESC:     Scratch reg 29
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATA3r (0x001e403a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATA3r_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA3.
 *
 */
typedef union BCM84834_TOP_MCH_DATA3r_s {
	uint32_t v[1];
	uint32_t top_mch_data3[1];
	uint32_t _top_mch_data3;
} BCM84834_TOP_MCH_DATA3r_t;

#define BCM84834_TOP_MCH_DATA3r_CLR(r) (r).top_mch_data3[0] = 0
#define BCM84834_TOP_MCH_DATA3r_SET(r,d) (r).top_mch_data3[0] = d
#define BCM84834_TOP_MCH_DATA3r_GET(r) (r).top_mch_data3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATA3r_DATAf_GET(r) (((r).top_mch_data3[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATA3r_DATAf_SET(r,f) (r).top_mch_data3[0]=(((r).top_mch_data3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA3.
 *
 */
#define BCM84834_READ_TOP_MCH_DATA3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATA3r,(_r._top_mch_data3))
#define BCM84834_WRITE_TOP_MCH_DATA3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATA3r,(_r._top_mch_data3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATA3r BCM84834_TOP_MCH_DATA3r
#define TOP_MCH_DATA3r_SIZE BCM84834_TOP_MCH_DATA3r_SIZE
typedef BCM84834_TOP_MCH_DATA3r_t TOP_MCH_DATA3r_t;
#define TOP_MCH_DATA3r_CLR BCM84834_TOP_MCH_DATA3r_CLR
#define TOP_MCH_DATA3r_SET BCM84834_TOP_MCH_DATA3r_SET
#define TOP_MCH_DATA3r_GET BCM84834_TOP_MCH_DATA3r_GET
#define TOP_MCH_DATA3r_DATAf_GET BCM84834_TOP_MCH_DATA3r_DATAf_GET
#define TOP_MCH_DATA3r_DATAf_SET BCM84834_TOP_MCH_DATA3r_DATAf_SET
#define READ_TOP_MCH_DATA3r BCM84834_READ_TOP_MCH_DATA3r
#define WRITE_TOP_MCH_DATA3r BCM84834_WRITE_TOP_MCH_DATA3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATA3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA4
 * BLOCKS:   TOP
 * REGADDR:  0x403b
 * DEVAD:    30
 * DESC:     Scratch reg 30
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATA4r (0x001e403b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATA4r_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA4.
 *
 */
typedef union BCM84834_TOP_MCH_DATA4r_s {
	uint32_t v[1];
	uint32_t top_mch_data4[1];
	uint32_t _top_mch_data4;
} BCM84834_TOP_MCH_DATA4r_t;

#define BCM84834_TOP_MCH_DATA4r_CLR(r) (r).top_mch_data4[0] = 0
#define BCM84834_TOP_MCH_DATA4r_SET(r,d) (r).top_mch_data4[0] = d
#define BCM84834_TOP_MCH_DATA4r_GET(r) (r).top_mch_data4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATA4r_DATAf_GET(r) (((r).top_mch_data4[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATA4r_DATAf_SET(r,f) (r).top_mch_data4[0]=(((r).top_mch_data4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA4.
 *
 */
#define BCM84834_READ_TOP_MCH_DATA4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATA4r,(_r._top_mch_data4))
#define BCM84834_WRITE_TOP_MCH_DATA4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATA4r,(_r._top_mch_data4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATA4r BCM84834_TOP_MCH_DATA4r
#define TOP_MCH_DATA4r_SIZE BCM84834_TOP_MCH_DATA4r_SIZE
typedef BCM84834_TOP_MCH_DATA4r_t TOP_MCH_DATA4r_t;
#define TOP_MCH_DATA4r_CLR BCM84834_TOP_MCH_DATA4r_CLR
#define TOP_MCH_DATA4r_SET BCM84834_TOP_MCH_DATA4r_SET
#define TOP_MCH_DATA4r_GET BCM84834_TOP_MCH_DATA4r_GET
#define TOP_MCH_DATA4r_DATAf_GET BCM84834_TOP_MCH_DATA4r_DATAf_GET
#define TOP_MCH_DATA4r_DATAf_SET BCM84834_TOP_MCH_DATA4r_DATAf_SET
#define READ_TOP_MCH_DATA4r BCM84834_READ_TOP_MCH_DATA4r
#define WRITE_TOP_MCH_DATA4r BCM84834_WRITE_TOP_MCH_DATA4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATA4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MCH_DATA5
 * BLOCKS:   TOP
 * REGADDR:  0x403c
 * DEVAD:    30
 * DESC:     Scratch reg 31
 * SIZE:     32
 * FIELDS:
 *     DATA             
 *
 ******************************************************************************/
#define BCM84834_TOP_MCH_DATA5r (0x001e403c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MCH_DATA5r_SIZE 4

/*
 * This structure should be used to declare and program TOP_MCH_DATA5.
 *
 */
typedef union BCM84834_TOP_MCH_DATA5r_s {
	uint32_t v[1];
	uint32_t top_mch_data5[1];
	uint32_t _top_mch_data5;
} BCM84834_TOP_MCH_DATA5r_t;

#define BCM84834_TOP_MCH_DATA5r_CLR(r) (r).top_mch_data5[0] = 0
#define BCM84834_TOP_MCH_DATA5r_SET(r,d) (r).top_mch_data5[0] = d
#define BCM84834_TOP_MCH_DATA5r_GET(r) (r).top_mch_data5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MCH_DATA5r_DATAf_GET(r) (((r).top_mch_data5[0]) & 0xffff)
#define BCM84834_TOP_MCH_DATA5r_DATAf_SET(r,f) (r).top_mch_data5[0]=(((r).top_mch_data5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_MCH_DATA5.
 *
 */
#define BCM84834_READ_TOP_MCH_DATA5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MCH_DATA5r,(_r._top_mch_data5))
#define BCM84834_WRITE_TOP_MCH_DATA5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MCH_DATA5r,(_r._top_mch_data5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MCH_DATA5r BCM84834_TOP_MCH_DATA5r
#define TOP_MCH_DATA5r_SIZE BCM84834_TOP_MCH_DATA5r_SIZE
typedef BCM84834_TOP_MCH_DATA5r_t TOP_MCH_DATA5r_t;
#define TOP_MCH_DATA5r_CLR BCM84834_TOP_MCH_DATA5r_CLR
#define TOP_MCH_DATA5r_SET BCM84834_TOP_MCH_DATA5r_SET
#define TOP_MCH_DATA5r_GET BCM84834_TOP_MCH_DATA5r_GET
#define TOP_MCH_DATA5r_DATAf_GET BCM84834_TOP_MCH_DATA5r_DATAf_GET
#define TOP_MCH_DATA5r_DATAf_SET BCM84834_TOP_MCH_DATA5r_DATAf_SET
#define READ_TOP_MCH_DATA5r BCM84834_READ_TOP_MCH_DATA5r
#define WRITE_TOP_MCH_DATA5r BCM84834_WRITE_TOP_MCH_DATA5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MCH_DATA5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_MASK0
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x403d
 * DEVAD:    30
 * DESC:     General purpose interrupt mask register 0
 * SIZE:     32
 * FIELDS:
 *     GP_INT_MASK      
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_MASK0r (0x001e403d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_MASK0r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_MASK0.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_MASK0r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_mask0[1];
	uint32_t _top_gp_interrupt_mask0;
} BCM84834_TOP_GP_INTERRUPT_MASK0r_t;

#define BCM84834_TOP_GP_INTERRUPT_MASK0r_CLR(r) (r).top_gp_interrupt_mask0[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_MASK0r_SET(r,d) (r).top_gp_interrupt_mask0[0] = d
#define BCM84834_TOP_GP_INTERRUPT_MASK0r_GET(r) (r).top_gp_interrupt_mask0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_GET(r) (((r).top_gp_interrupt_mask0[0]) & 0xffff)
#define BCM84834_TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_SET(r,f) (r).top_gp_interrupt_mask0[0]=(((r).top_gp_interrupt_mask0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_MASK0.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_MASK0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_MASK0r,(_r._top_gp_interrupt_mask0))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_MASK0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_MASK0r,(_r._top_gp_interrupt_mask0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_MASK0r BCM84834_TOP_GP_INTERRUPT_MASK0r
#define TOP_GP_INTERRUPT_MASK0r_SIZE BCM84834_TOP_GP_INTERRUPT_MASK0r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_MASK0r_t TOP_GP_INTERRUPT_MASK0r_t;
#define TOP_GP_INTERRUPT_MASK0r_CLR BCM84834_TOP_GP_INTERRUPT_MASK0r_CLR
#define TOP_GP_INTERRUPT_MASK0r_SET BCM84834_TOP_GP_INTERRUPT_MASK0r_SET
#define TOP_GP_INTERRUPT_MASK0r_GET BCM84834_TOP_GP_INTERRUPT_MASK0r_GET
#define TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_GET BCM84834_TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_GET
#define TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_SET BCM84834_TOP_GP_INTERRUPT_MASK0r_GP_INT_MASKf_SET
#define READ_TOP_GP_INTERRUPT_MASK0r BCM84834_READ_TOP_GP_INTERRUPT_MASK0r
#define WRITE_TOP_GP_INTERRUPT_MASK0r BCM84834_WRITE_TOP_GP_INTERRUPT_MASK0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_MASK0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_MASK1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x403e
 * DEVAD:    30
 * DESC:     General purpose interrupt mask register 1
 * SIZE:     32
 * FIELDS:
 *     GP_INT_MASK      
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_MASK1r (0x001e403e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_MASK1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_MASK1.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_MASK1r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_mask1[1];
	uint32_t _top_gp_interrupt_mask1;
} BCM84834_TOP_GP_INTERRUPT_MASK1r_t;

#define BCM84834_TOP_GP_INTERRUPT_MASK1r_CLR(r) (r).top_gp_interrupt_mask1[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_MASK1r_SET(r,d) (r).top_gp_interrupt_mask1[0] = d
#define BCM84834_TOP_GP_INTERRUPT_MASK1r_GET(r) (r).top_gp_interrupt_mask1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_GET(r) (((r).top_gp_interrupt_mask1[0]) & 0xffff)
#define BCM84834_TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_SET(r,f) (r).top_gp_interrupt_mask1[0]=(((r).top_gp_interrupt_mask1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_MASK1.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_MASK1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_MASK1r,(_r._top_gp_interrupt_mask1))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_MASK1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_MASK1r,(_r._top_gp_interrupt_mask1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_MASK1r BCM84834_TOP_GP_INTERRUPT_MASK1r
#define TOP_GP_INTERRUPT_MASK1r_SIZE BCM84834_TOP_GP_INTERRUPT_MASK1r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_MASK1r_t TOP_GP_INTERRUPT_MASK1r_t;
#define TOP_GP_INTERRUPT_MASK1r_CLR BCM84834_TOP_GP_INTERRUPT_MASK1r_CLR
#define TOP_GP_INTERRUPT_MASK1r_SET BCM84834_TOP_GP_INTERRUPT_MASK1r_SET
#define TOP_GP_INTERRUPT_MASK1r_GET BCM84834_TOP_GP_INTERRUPT_MASK1r_GET
#define TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_GET BCM84834_TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_GET
#define TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_SET BCM84834_TOP_GP_INTERRUPT_MASK1r_GP_INT_MASKf_SET
#define READ_TOP_GP_INTERRUPT_MASK1r BCM84834_READ_TOP_GP_INTERRUPT_MASK1r
#define WRITE_TOP_GP_INTERRUPT_MASK1r BCM84834_WRITE_TOP_GP_INTERRUPT_MASK1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_MASK1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_CLEAR0
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x403f
 * DEVAD:    30
 * DESC:     General purpose interrupt clear register 0
 * SIZE:     32
 * FIELDS:
 *     GP_INT_CLEAR0    
 *     GP_INT_CLEAR1    
 *     GP_INT_CLEAR2    
 *     GP_INT_CLEAR3    
 *     GP_INT_CLEAR4    
 *     GP_INT_CLEAR5    
 *     GP_INT_CLEAR6    
 *     GP_INT_CLEAR7    
 *     GP_INT_CLEAR8    
 *     GP_INT_CLEAR9    
 *     GP_INT_CLEAR10   
 *     GP_INT_CLEAR11   
 *     GP_INT_CLEAR12   
 *     GP_INT_CLEAR13   
 *     GP_INT_CLEAR14   
 *     GP_INT_CLEAR15   
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r (0x001e403f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_CLEAR0.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_CLEAR0r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_clear0[1];
	uint32_t _top_gp_interrupt_clear0;
} BCM84834_TOP_GP_INTERRUPT_CLEAR0r_t;

#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_CLR(r) (r).top_gp_interrupt_clear0[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_SET(r,d) (r).top_gp_interrupt_clear0[0] = d
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GET(r) (r).top_gp_interrupt_clear0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 15) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 14) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 13) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 12) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 11) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 10) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 9) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 8) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 7) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 6) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 5) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 4) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 3) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 2) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_GET(r) ((((r).top_gp_interrupt_clear0[0]) >> 1) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_GET(r) (((r).top_gp_interrupt_clear0[0]) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_SET(r,f) (r).top_gp_interrupt_clear0[0]=(((r).top_gp_interrupt_clear0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_CLEAR0.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_CLEAR0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_CLEAR0r,(_r._top_gp_interrupt_clear0))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_CLEAR0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_CLEAR0r,(_r._top_gp_interrupt_clear0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_CLEAR0r BCM84834_TOP_GP_INTERRUPT_CLEAR0r
#define TOP_GP_INTERRUPT_CLEAR0r_SIZE BCM84834_TOP_GP_INTERRUPT_CLEAR0r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_CLEAR0r_t TOP_GP_INTERRUPT_CLEAR0r_t;
#define TOP_GP_INTERRUPT_CLEAR0r_CLR BCM84834_TOP_GP_INTERRUPT_CLEAR0r_CLR
#define TOP_GP_INTERRUPT_CLEAR0r_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR15f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR14f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR13f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR12f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR11f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR10f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR9f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR8f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR7f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR6f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR5f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR4f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR3f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR2f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR1f_SET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_GET
#define TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR0r_GP_INT_CLEAR0f_SET
#define READ_TOP_GP_INTERRUPT_CLEAR0r BCM84834_READ_TOP_GP_INTERRUPT_CLEAR0r
#define WRITE_TOP_GP_INTERRUPT_CLEAR0r BCM84834_WRITE_TOP_GP_INTERRUPT_CLEAR0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_CLEAR0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_CLEAR1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4040
 * DEVAD:    30
 * DESC:     General purpose interrupt clear register 1
 * SIZE:     32
 * FIELDS:
 *     GP_INT_CLEAR0    
 *     GP_INT_CLEAR1    
 *     GP_INT_CLEAR2    
 *     GP_INT_CLEAR3    
 *     GP_INT_CLEAR4    
 *     GP_INT_CLEAR5    
 *     GP_INT_CLEAR6    
 *     GP_INT_CLEAR7    
 *     GP_INT_CLEAR8    
 *     GP_INT_CLEAR9    
 *     GP_INT_CLEAR10   
 *     GP_INT_CLEAR11   
 *     GP_INT_CLEAR12   
 *     GP_INT_CLEAR13   
 *     GP_INT_CLEAR14   
 *     GP_INT_CLEAR15   
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r (0x001e4040 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_CLEAR1.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_CLEAR1r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_clear1[1];
	uint32_t _top_gp_interrupt_clear1;
} BCM84834_TOP_GP_INTERRUPT_CLEAR1r_t;

#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_CLR(r) (r).top_gp_interrupt_clear1[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_SET(r,d) (r).top_gp_interrupt_clear1[0] = d
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GET(r) (r).top_gp_interrupt_clear1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 15) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 14) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 13) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 12) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 11) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 10) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 9) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 8) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 7) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 6) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 5) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 4) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 3) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 2) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_GET(r) ((((r).top_gp_interrupt_clear1[0]) >> 1) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_GET(r) (((r).top_gp_interrupt_clear1[0]) & 0x1)
#define BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_SET(r,f) (r).top_gp_interrupt_clear1[0]=(((r).top_gp_interrupt_clear1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_CLEAR1.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_CLEAR1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_CLEAR1r,(_r._top_gp_interrupt_clear1))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_CLEAR1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_CLEAR1r,(_r._top_gp_interrupt_clear1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_CLEAR1r BCM84834_TOP_GP_INTERRUPT_CLEAR1r
#define TOP_GP_INTERRUPT_CLEAR1r_SIZE BCM84834_TOP_GP_INTERRUPT_CLEAR1r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_CLEAR1r_t TOP_GP_INTERRUPT_CLEAR1r_t;
#define TOP_GP_INTERRUPT_CLEAR1r_CLR BCM84834_TOP_GP_INTERRUPT_CLEAR1r_CLR
#define TOP_GP_INTERRUPT_CLEAR1r_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR15f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR14f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR13f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR12f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR11f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR10f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR9f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR8f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR7f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR6f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR5f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR4f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR3f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR2f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR1f_SET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_GET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_GET
#define TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_SET BCM84834_TOP_GP_INTERRUPT_CLEAR1r_GP_INT_CLEAR0f_SET
#define READ_TOP_GP_INTERRUPT_CLEAR1r BCM84834_READ_TOP_GP_INTERRUPT_CLEAR1r
#define WRITE_TOP_GP_INTERRUPT_CLEAR1r BCM84834_WRITE_TOP_GP_INTERRUPT_CLEAR1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_CLEAR1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_HOLD0
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4041
 * DEVAD:    30
 * DESC:     General purpose interrupt hold register 0
 * SIZE:     32
 * FIELDS:
 *     GP_INT_HOLD      
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_HOLD0r (0x001e4041 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_HOLD0.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_HOLD0r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_hold0[1];
	uint32_t _top_gp_interrupt_hold0;
} BCM84834_TOP_GP_INTERRUPT_HOLD0r_t;

#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_CLR(r) (r).top_gp_interrupt_hold0[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_SET(r,d) (r).top_gp_interrupt_hold0[0] = d
#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_GET(r) (r).top_gp_interrupt_hold0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_GET(r) (((r).top_gp_interrupt_hold0[0]) & 0xffff)
#define BCM84834_TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_SET(r,f) (r).top_gp_interrupt_hold0[0]=(((r).top_gp_interrupt_hold0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_HOLD0.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_HOLD0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_HOLD0r,(_r._top_gp_interrupt_hold0))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_HOLD0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_HOLD0r,(_r._top_gp_interrupt_hold0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_HOLD0r BCM84834_TOP_GP_INTERRUPT_HOLD0r
#define TOP_GP_INTERRUPT_HOLD0r_SIZE BCM84834_TOP_GP_INTERRUPT_HOLD0r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_HOLD0r_t TOP_GP_INTERRUPT_HOLD0r_t;
#define TOP_GP_INTERRUPT_HOLD0r_CLR BCM84834_TOP_GP_INTERRUPT_HOLD0r_CLR
#define TOP_GP_INTERRUPT_HOLD0r_SET BCM84834_TOP_GP_INTERRUPT_HOLD0r_SET
#define TOP_GP_INTERRUPT_HOLD0r_GET BCM84834_TOP_GP_INTERRUPT_HOLD0r_GET
#define TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_GET BCM84834_TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_GET
#define TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_SET BCM84834_TOP_GP_INTERRUPT_HOLD0r_GP_INT_HOLDf_SET
#define READ_TOP_GP_INTERRUPT_HOLD0r BCM84834_READ_TOP_GP_INTERRUPT_HOLD0r
#define WRITE_TOP_GP_INTERRUPT_HOLD0r BCM84834_WRITE_TOP_GP_INTERRUPT_HOLD0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_HOLD0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GP_INTERRUPT_HOLD1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4042
 * DEVAD:    30
 * DESC:     General purpose interrupt hold register 1
 * SIZE:     32
 * FIELDS:
 *     GP_INT_HOLD      
 *
 ******************************************************************************/
#define BCM84834_TOP_GP_INTERRUPT_HOLD1r (0x001e4042 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_GP_INTERRUPT_HOLD1.
 *
 */
typedef union BCM84834_TOP_GP_INTERRUPT_HOLD1r_s {
	uint32_t v[1];
	uint32_t top_gp_interrupt_hold1[1];
	uint32_t _top_gp_interrupt_hold1;
} BCM84834_TOP_GP_INTERRUPT_HOLD1r_t;

#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_CLR(r) (r).top_gp_interrupt_hold1[0] = 0
#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_SET(r,d) (r).top_gp_interrupt_hold1[0] = d
#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_GET(r) (r).top_gp_interrupt_hold1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_GET(r) (((r).top_gp_interrupt_hold1[0]) & 0xffff)
#define BCM84834_TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_SET(r,f) (r).top_gp_interrupt_hold1[0]=(((r).top_gp_interrupt_hold1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_GP_INTERRUPT_HOLD1.
 *
 */
#define BCM84834_READ_TOP_GP_INTERRUPT_HOLD1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GP_INTERRUPT_HOLD1r,(_r._top_gp_interrupt_hold1))
#define BCM84834_WRITE_TOP_GP_INTERRUPT_HOLD1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GP_INTERRUPT_HOLD1r,(_r._top_gp_interrupt_hold1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GP_INTERRUPT_HOLD1r BCM84834_TOP_GP_INTERRUPT_HOLD1r
#define TOP_GP_INTERRUPT_HOLD1r_SIZE BCM84834_TOP_GP_INTERRUPT_HOLD1r_SIZE
typedef BCM84834_TOP_GP_INTERRUPT_HOLD1r_t TOP_GP_INTERRUPT_HOLD1r_t;
#define TOP_GP_INTERRUPT_HOLD1r_CLR BCM84834_TOP_GP_INTERRUPT_HOLD1r_CLR
#define TOP_GP_INTERRUPT_HOLD1r_SET BCM84834_TOP_GP_INTERRUPT_HOLD1r_SET
#define TOP_GP_INTERRUPT_HOLD1r_GET BCM84834_TOP_GP_INTERRUPT_HOLD1r_GET
#define TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_GET BCM84834_TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_GET
#define TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_SET BCM84834_TOP_GP_INTERRUPT_HOLD1r_GP_INT_HOLDf_SET
#define READ_TOP_GP_INTERRUPT_HOLD1r BCM84834_READ_TOP_GP_INTERRUPT_HOLD1r
#define WRITE_TOP_GP_INTERRUPT_HOLD1r BCM84834_WRITE_TOP_GP_INTERRUPT_HOLD1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GP_INTERRUPT_HOLD1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_SERDES_INT_STATUS
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4048
 * DEVAD:    30
 * DESC:     SerDes Interrupt Status reg
 * SIZE:     32
 * FIELDS:
 *     SERDES_INT_STATUS 
 *
 ******************************************************************************/
#define BCM84834_TOP_SERDES_INT_STATUSr (0x001e4048 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_SERDES_INT_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TOP_SERDES_INT_STATUS.
 *
 */
typedef union BCM84834_TOP_SERDES_INT_STATUSr_s {
	uint32_t v[1];
	uint32_t top_serdes_int_status[1];
	uint32_t _top_serdes_int_status;
} BCM84834_TOP_SERDES_INT_STATUSr_t;

#define BCM84834_TOP_SERDES_INT_STATUSr_CLR(r) (r).top_serdes_int_status[0] = 0
#define BCM84834_TOP_SERDES_INT_STATUSr_SET(r,d) (r).top_serdes_int_status[0] = d
#define BCM84834_TOP_SERDES_INT_STATUSr_GET(r) (r).top_serdes_int_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_GET(r) (((r).top_serdes_int_status[0]) & 0x3fff)
#define BCM84834_TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_SET(r,f) (r).top_serdes_int_status[0]=(((r).top_serdes_int_status[0] & ~((uint32_t)0x3fff)) | (((uint32_t)f) & 0x3fff))

/*
 * These macros can be used to access TOP_SERDES_INT_STATUS.
 *
 */
#define BCM84834_READ_TOP_SERDES_INT_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_SERDES_INT_STATUSr,(_r._top_serdes_int_status))
#define BCM84834_WRITE_TOP_SERDES_INT_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_SERDES_INT_STATUSr,(_r._top_serdes_int_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_SERDES_INT_STATUSr BCM84834_TOP_SERDES_INT_STATUSr
#define TOP_SERDES_INT_STATUSr_SIZE BCM84834_TOP_SERDES_INT_STATUSr_SIZE
typedef BCM84834_TOP_SERDES_INT_STATUSr_t TOP_SERDES_INT_STATUSr_t;
#define TOP_SERDES_INT_STATUSr_CLR BCM84834_TOP_SERDES_INT_STATUSr_CLR
#define TOP_SERDES_INT_STATUSr_SET BCM84834_TOP_SERDES_INT_STATUSr_SET
#define TOP_SERDES_INT_STATUSr_GET BCM84834_TOP_SERDES_INT_STATUSr_GET
#define TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_GET BCM84834_TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_GET
#define TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_SET BCM84834_TOP_SERDES_INT_STATUSr_SERDES_INT_STATUSf_SET
#define READ_TOP_SERDES_INT_STATUSr BCM84834_READ_TOP_SERDES_INT_STATUSr
#define WRITE_TOP_SERDES_INT_STATUSr BCM84834_WRITE_TOP_SERDES_INT_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_SERDES_INT_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_FW_STRAP_CHANGE_INT_MASK
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4049
 * DEVAD:    30
 * DESC:     Firmware Strap changed InterruptMask reg
 * SIZE:     32
 * FIELDS:
 *     FW_STRAP_CHANGED_INT_MASK 
 *
 ******************************************************************************/
#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr (0x001e4049 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_SIZE 4

/*
 * This structure should be used to declare and program TOP_FW_STRAP_CHANGE_INT_MASK.
 *
 */
typedef union BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_s {
	uint32_t v[1];
	uint32_t top_fw_strap_change_int_mask[1];
	uint32_t _top_fw_strap_change_int_mask;
} BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_t;

#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_CLR(r) (r).top_fw_strap_change_int_mask[0] = 0
#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_SET(r,d) (r).top_fw_strap_change_int_mask[0] = d
#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_GET(r) (r).top_fw_strap_change_int_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_GET(r) (((r).top_fw_strap_change_int_mask[0]) & 0xffff)
#define BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_SET(r,f) (r).top_fw_strap_change_int_mask[0]=(((r).top_fw_strap_change_int_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_FW_STRAP_CHANGE_INT_MASK.
 *
 */
#define BCM84834_READ_TOP_FW_STRAP_CHANGE_INT_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr,(_r._top_fw_strap_change_int_mask))
#define BCM84834_WRITE_TOP_FW_STRAP_CHANGE_INT_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr,(_r._top_fw_strap_change_int_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_FW_STRAP_CHANGE_INT_MASKr BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr
#define TOP_FW_STRAP_CHANGE_INT_MASKr_SIZE BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_SIZE
typedef BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_t TOP_FW_STRAP_CHANGE_INT_MASKr_t;
#define TOP_FW_STRAP_CHANGE_INT_MASKr_CLR BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_CLR
#define TOP_FW_STRAP_CHANGE_INT_MASKr_SET BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_SET
#define TOP_FW_STRAP_CHANGE_INT_MASKr_GET BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_GET
#define TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_GET BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_GET
#define TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_SET BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr_FW_STRAP_CHANGED_INT_MASKf_SET
#define READ_TOP_FW_STRAP_CHANGE_INT_MASKr BCM84834_READ_TOP_FW_STRAP_CHANGE_INT_MASKr
#define WRITE_TOP_FW_STRAP_CHANGE_INT_MASKr BCM84834_WRITE_TOP_FW_STRAP_CHANGE_INT_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_FW_STRAP_CHANGE_INT_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_RESCAL_CTL_STATUS
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404a
 * DEVAD:    30
 * DESC:     RESCAL Control and STATUS Register
 * SIZE:     32
 * FIELDS:
 *     RESET_RESCAL_N   
 *     RESCAL_ENABLE    
 *     RESCAL_PWRDN     
 *     RESCAL_ORIDE_EN  
 *     RESCAL_ORIDE_VALUE 
 *     RESCAL_DONE      
 *     RESCAL_PON       
 *
 ******************************************************************************/
#define BCM84834_TOP_RESCAL_CTL_STATUSr (0x001e404a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_RESCAL_CTL_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program TOP_RESCAL_CTL_STATUS.
 *
 */
typedef union BCM84834_TOP_RESCAL_CTL_STATUSr_s {
	uint32_t v[1];
	uint32_t top_rescal_ctl_status[1];
	uint32_t _top_rescal_ctl_status;
} BCM84834_TOP_RESCAL_CTL_STATUSr_t;

#define BCM84834_TOP_RESCAL_CTL_STATUSr_CLR(r) (r).top_rescal_ctl_status[0] = 0
#define BCM84834_TOP_RESCAL_CTL_STATUSr_SET(r,d) (r).top_rescal_ctl_status[0] = d
#define BCM84834_TOP_RESCAL_CTL_STATUSr_GET(r) (r).top_rescal_ctl_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 8) & 0x7)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 7) & 0x1)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 4) & 0x7)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 3) & 0x1)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 2) & 0x1)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_GET(r) ((((r).top_rescal_ctl_status[0]) >> 1) & 0x1)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_GET(r) (((r).top_rescal_ctl_status[0]) & 0x1)
#define BCM84834_TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_SET(r,f) (r).top_rescal_ctl_status[0]=(((r).top_rescal_ctl_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_RESCAL_CTL_STATUS.
 *
 */
#define BCM84834_READ_TOP_RESCAL_CTL_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_RESCAL_CTL_STATUSr,(_r._top_rescal_ctl_status))
#define BCM84834_WRITE_TOP_RESCAL_CTL_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_RESCAL_CTL_STATUSr,(_r._top_rescal_ctl_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_RESCAL_CTL_STATUSr BCM84834_TOP_RESCAL_CTL_STATUSr
#define TOP_RESCAL_CTL_STATUSr_SIZE BCM84834_TOP_RESCAL_CTL_STATUSr_SIZE
typedef BCM84834_TOP_RESCAL_CTL_STATUSr_t TOP_RESCAL_CTL_STATUSr_t;
#define TOP_RESCAL_CTL_STATUSr_CLR BCM84834_TOP_RESCAL_CTL_STATUSr_CLR
#define TOP_RESCAL_CTL_STATUSr_SET BCM84834_TOP_RESCAL_CTL_STATUSr_SET
#define TOP_RESCAL_CTL_STATUSr_GET BCM84834_TOP_RESCAL_CTL_STATUSr_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PONf_SET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_DONEf_SET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_VALUEf_SET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ORIDE_ENf_SET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_PWRDNf_SET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_GET
#define TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESCAL_ENABLEf_SET
#define TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_GET BCM84834_TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_GET
#define TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_SET BCM84834_TOP_RESCAL_CTL_STATUSr_RESET_RESCAL_Nf_SET
#define READ_TOP_RESCAL_CTL_STATUSr BCM84834_READ_TOP_RESCAL_CTL_STATUSr
#define WRITE_TOP_RESCAL_CTL_STATUSr BCM84834_WRITE_TOP_RESCAL_CTL_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_RESCAL_CTL_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_PVTMON1
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404b
 * DEVAD:    30
 * DESC:     PVT Monitor Control Reg
 * SIZE:     32
 * FIELDS:
 *     BG_ADJ           
 *     ATE_OUT_CODE     
 *     MEAS_CAL_MODE    
 *     PROGRAM_RES      
 *     PVTMON_RSVD      
 *
 ******************************************************************************/
#define BCM84834_TOP_PVTMON1r (0x001e404b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_PVTMON1r_SIZE 4

/*
 * This structure should be used to declare and program TOP_PVTMON1.
 *
 */
typedef union BCM84834_TOP_PVTMON1r_s {
	uint32_t v[1];
	uint32_t top_pvtmon1[1];
	uint32_t _top_pvtmon1;
} BCM84834_TOP_PVTMON1r_t;

#define BCM84834_TOP_PVTMON1r_CLR(r) (r).top_pvtmon1[0] = 0
#define BCM84834_TOP_PVTMON1r_SET(r,d) (r).top_pvtmon1[0] = d
#define BCM84834_TOP_PVTMON1r_GET(r) (r).top_pvtmon1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_PVTMON1r_PVTMON_RSVDf_GET(r) ((((r).top_pvtmon1[0]) >> 14) & 0x3)
#define BCM84834_TOP_PVTMON1r_PVTMON_RSVDf_SET(r,f) (r).top_pvtmon1[0]=(((r).top_pvtmon1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCM84834_TOP_PVTMON1r_PROGRAM_RESf_GET(r) ((((r).top_pvtmon1[0]) >> 10) & 0xf)
#define BCM84834_TOP_PVTMON1r_PROGRAM_RESf_SET(r,f) (r).top_pvtmon1[0]=(((r).top_pvtmon1[0] & ~((uint32_t)0xf << 10)) | ((((uint32_t)f) & 0xf) << 10))
#define BCM84834_TOP_PVTMON1r_MEAS_CAL_MODEf_GET(r) ((((r).top_pvtmon1[0]) >> 7) & 0x7)
#define BCM84834_TOP_PVTMON1r_MEAS_CAL_MODEf_SET(r,f) (r).top_pvtmon1[0]=(((r).top_pvtmon1[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7))
#define BCM84834_TOP_PVTMON1r_ATE_OUT_CODEf_GET(r) ((((r).top_pvtmon1[0]) >> 3) & 0xf)
#define BCM84834_TOP_PVTMON1r_ATE_OUT_CODEf_SET(r,f) (r).top_pvtmon1[0]=(((r).top_pvtmon1[0] & ~((uint32_t)0xf << 3)) | ((((uint32_t)f) & 0xf) << 3))
#define BCM84834_TOP_PVTMON1r_BG_ADJf_GET(r) (((r).top_pvtmon1[0]) & 0x7)
#define BCM84834_TOP_PVTMON1r_BG_ADJf_SET(r,f) (r).top_pvtmon1[0]=(((r).top_pvtmon1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TOP_PVTMON1.
 *
 */
#define BCM84834_READ_TOP_PVTMON1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_PVTMON1r,(_r._top_pvtmon1))
#define BCM84834_WRITE_TOP_PVTMON1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_PVTMON1r,(_r._top_pvtmon1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_PVTMON1r BCM84834_TOP_PVTMON1r
#define TOP_PVTMON1r_SIZE BCM84834_TOP_PVTMON1r_SIZE
typedef BCM84834_TOP_PVTMON1r_t TOP_PVTMON1r_t;
#define TOP_PVTMON1r_CLR BCM84834_TOP_PVTMON1r_CLR
#define TOP_PVTMON1r_SET BCM84834_TOP_PVTMON1r_SET
#define TOP_PVTMON1r_GET BCM84834_TOP_PVTMON1r_GET
#define TOP_PVTMON1r_PVTMON_RSVDf_GET BCM84834_TOP_PVTMON1r_PVTMON_RSVDf_GET
#define TOP_PVTMON1r_PVTMON_RSVDf_SET BCM84834_TOP_PVTMON1r_PVTMON_RSVDf_SET
#define TOP_PVTMON1r_PROGRAM_RESf_GET BCM84834_TOP_PVTMON1r_PROGRAM_RESf_GET
#define TOP_PVTMON1r_PROGRAM_RESf_SET BCM84834_TOP_PVTMON1r_PROGRAM_RESf_SET
#define TOP_PVTMON1r_MEAS_CAL_MODEf_GET BCM84834_TOP_PVTMON1r_MEAS_CAL_MODEf_GET
#define TOP_PVTMON1r_MEAS_CAL_MODEf_SET BCM84834_TOP_PVTMON1r_MEAS_CAL_MODEf_SET
#define TOP_PVTMON1r_ATE_OUT_CODEf_GET BCM84834_TOP_PVTMON1r_ATE_OUT_CODEf_GET
#define TOP_PVTMON1r_ATE_OUT_CODEf_SET BCM84834_TOP_PVTMON1r_ATE_OUT_CODEf_SET
#define TOP_PVTMON1r_BG_ADJf_GET BCM84834_TOP_PVTMON1r_BG_ADJf_GET
#define TOP_PVTMON1r_BG_ADJf_SET BCM84834_TOP_PVTMON1r_BG_ADJf_SET
#define READ_TOP_PVTMON1r BCM84834_READ_TOP_PVTMON1r
#define WRITE_TOP_PVTMON1r BCM84834_WRITE_TOP_PVTMON1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_PVTMON1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_PVTMON2
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404c
 * DEVAD:    30
 * DESC:     PVT Monitor Data Reg
 * SIZE:     32
 * FIELDS:
 *     PVT_DATA         
 *     PVTMON_PWRDN     
 *     PVTMON_REG_EN    
 *     PVTMON_SEL       
 *
 ******************************************************************************/
#define BCM84834_TOP_PVTMON2r (0x001e404c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_PVTMON2r_SIZE 4

/*
 * This structure should be used to declare and program TOP_PVTMON2.
 *
 */
typedef union BCM84834_TOP_PVTMON2r_s {
	uint32_t v[1];
	uint32_t top_pvtmon2[1];
	uint32_t _top_pvtmon2;
} BCM84834_TOP_PVTMON2r_t;

#define BCM84834_TOP_PVTMON2r_CLR(r) (r).top_pvtmon2[0] = 0
#define BCM84834_TOP_PVTMON2r_SET(r,d) (r).top_pvtmon2[0] = d
#define BCM84834_TOP_PVTMON2r_GET(r) (r).top_pvtmon2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_PVTMON2r_PVTMON_SELf_GET(r) ((((r).top_pvtmon2[0]) >> 12) & 0x7)
#define BCM84834_TOP_PVTMON2r_PVTMON_SELf_SET(r,f) (r).top_pvtmon2[0]=(((r).top_pvtmon2[0] & ~((uint32_t)0x7 << 12)) | ((((uint32_t)f) & 0x7) << 12))
#define BCM84834_TOP_PVTMON2r_PVTMON_REG_ENf_GET(r) ((((r).top_pvtmon2[0]) >> 11) & 0x1)
#define BCM84834_TOP_PVTMON2r_PVTMON_REG_ENf_SET(r,f) (r).top_pvtmon2[0]=(((r).top_pvtmon2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_PVTMON2r_PVTMON_PWRDNf_GET(r) ((((r).top_pvtmon2[0]) >> 10) & 0x1)
#define BCM84834_TOP_PVTMON2r_PVTMON_PWRDNf_SET(r,f) (r).top_pvtmon2[0]=(((r).top_pvtmon2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_PVTMON2r_PVT_DATAf_GET(r) (((r).top_pvtmon2[0]) & 0x3ff)
#define BCM84834_TOP_PVTMON2r_PVT_DATAf_SET(r,f) (r).top_pvtmon2[0]=(((r).top_pvtmon2[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TOP_PVTMON2.
 *
 */
#define BCM84834_READ_TOP_PVTMON2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_PVTMON2r,(_r._top_pvtmon2))
#define BCM84834_WRITE_TOP_PVTMON2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_PVTMON2r,(_r._top_pvtmon2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_PVTMON2r BCM84834_TOP_PVTMON2r
#define TOP_PVTMON2r_SIZE BCM84834_TOP_PVTMON2r_SIZE
typedef BCM84834_TOP_PVTMON2r_t TOP_PVTMON2r_t;
#define TOP_PVTMON2r_CLR BCM84834_TOP_PVTMON2r_CLR
#define TOP_PVTMON2r_SET BCM84834_TOP_PVTMON2r_SET
#define TOP_PVTMON2r_GET BCM84834_TOP_PVTMON2r_GET
#define TOP_PVTMON2r_PVTMON_SELf_GET BCM84834_TOP_PVTMON2r_PVTMON_SELf_GET
#define TOP_PVTMON2r_PVTMON_SELf_SET BCM84834_TOP_PVTMON2r_PVTMON_SELf_SET
#define TOP_PVTMON2r_PVTMON_REG_ENf_GET BCM84834_TOP_PVTMON2r_PVTMON_REG_ENf_GET
#define TOP_PVTMON2r_PVTMON_REG_ENf_SET BCM84834_TOP_PVTMON2r_PVTMON_REG_ENf_SET
#define TOP_PVTMON2r_PVTMON_PWRDNf_GET BCM84834_TOP_PVTMON2r_PVTMON_PWRDNf_GET
#define TOP_PVTMON2r_PVTMON_PWRDNf_SET BCM84834_TOP_PVTMON2r_PVTMON_PWRDNf_SET
#define TOP_PVTMON2r_PVT_DATAf_GET BCM84834_TOP_PVTMON2r_PVT_DATAf_GET
#define TOP_PVTMON2r_PVT_DATAf_SET BCM84834_TOP_PVTMON2r_PVT_DATAf_SET
#define READ_TOP_PVTMON2r BCM84834_READ_TOP_PVTMON2r
#define WRITE_TOP_PVTMON2r BCM84834_WRITE_TOP_PVTMON2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_PVTMON2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_XGPHY_TX_CHAN_SEL
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404d
 * DEVAD:    30
 * DESC:     XGPHY TX Channel Select
 * SIZE:     32
 * FIELDS:
 *     XGPHY_TX_CHAN_SEL_A 
 *     XGPHY_TX_CHAN_SEL_B 
 *     XGPHY_TX_CHAN_SEL_C 
 *     XGPHY_TX_CHAN_SEL_D 
 *
 ******************************************************************************/
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr (0x001e404d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_SIZE 4

/*
 * This structure should be used to declare and program TOP_XGPHY_TX_CHAN_SEL.
 *
 */
typedef union BCM84834_TOP_XGPHY_TX_CHAN_SELr_s {
	uint32_t v[1];
	uint32_t top_xgphy_tx_chan_sel[1];
	uint32_t _top_xgphy_tx_chan_sel;
} BCM84834_TOP_XGPHY_TX_CHAN_SELr_t;

#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_CLR(r) (r).top_xgphy_tx_chan_sel[0] = 0
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_SET(r,d) (r).top_xgphy_tx_chan_sel[0] = d
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_GET(r) (r).top_xgphy_tx_chan_sel[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_GET(r) ((((r).top_xgphy_tx_chan_sel[0]) >> 12) & 0x3)
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_SET(r,f) (r).top_xgphy_tx_chan_sel[0]=(((r).top_xgphy_tx_chan_sel[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_GET(r) ((((r).top_xgphy_tx_chan_sel[0]) >> 8) & 0x3)
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_SET(r,f) (r).top_xgphy_tx_chan_sel[0]=(((r).top_xgphy_tx_chan_sel[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_GET(r) ((((r).top_xgphy_tx_chan_sel[0]) >> 4) & 0x3)
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_SET(r,f) (r).top_xgphy_tx_chan_sel[0]=(((r).top_xgphy_tx_chan_sel[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_GET(r) (((r).top_xgphy_tx_chan_sel[0]) & 0x3)
#define BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_SET(r,f) (r).top_xgphy_tx_chan_sel[0]=(((r).top_xgphy_tx_chan_sel[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TOP_XGPHY_TX_CHAN_SEL.
 *
 */
#define BCM84834_READ_TOP_XGPHY_TX_CHAN_SELr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_XGPHY_TX_CHAN_SELr,(_r._top_xgphy_tx_chan_sel))
#define BCM84834_WRITE_TOP_XGPHY_TX_CHAN_SELr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_XGPHY_TX_CHAN_SELr,(_r._top_xgphy_tx_chan_sel))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_XGPHY_TX_CHAN_SELr BCM84834_TOP_XGPHY_TX_CHAN_SELr
#define TOP_XGPHY_TX_CHAN_SELr_SIZE BCM84834_TOP_XGPHY_TX_CHAN_SELr_SIZE
typedef BCM84834_TOP_XGPHY_TX_CHAN_SELr_t TOP_XGPHY_TX_CHAN_SELr_t;
#define TOP_XGPHY_TX_CHAN_SELr_CLR BCM84834_TOP_XGPHY_TX_CHAN_SELr_CLR
#define TOP_XGPHY_TX_CHAN_SELr_SET BCM84834_TOP_XGPHY_TX_CHAN_SELr_SET
#define TOP_XGPHY_TX_CHAN_SELr_GET BCM84834_TOP_XGPHY_TX_CHAN_SELr_GET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_GET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_GET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_SET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Df_SET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_GET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_GET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_SET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Cf_SET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_GET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_GET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_SET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Bf_SET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_GET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_GET
#define TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_SET BCM84834_TOP_XGPHY_TX_CHAN_SELr_XGPHY_TX_CHAN_SEL_Af_SET
#define READ_TOP_XGPHY_TX_CHAN_SELr BCM84834_READ_TOP_XGPHY_TX_CHAN_SELr
#define WRITE_TOP_XGPHY_TX_CHAN_SELr BCM84834_WRITE_TOP_XGPHY_TX_CHAN_SELr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_XGPHY_TX_CHAN_SELr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_MISC_STRAP
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404e
 * DEVAD:    30
 * DESC:     Miscellaneous Strap Register
 * SIZE:     32
 * FIELDS:
 *     MDIO_NO_PREAMBLE 
 *
 ******************************************************************************/
#define BCM84834_TOP_MISC_STRAPr (0x001e404e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_MISC_STRAPr_SIZE 4

/*
 * This structure should be used to declare and program TOP_MISC_STRAP.
 *
 */
typedef union BCM84834_TOP_MISC_STRAPr_s {
	uint32_t v[1];
	uint32_t top_misc_strap[1];
	uint32_t _top_misc_strap;
} BCM84834_TOP_MISC_STRAPr_t;

#define BCM84834_TOP_MISC_STRAPr_CLR(r) (r).top_misc_strap[0] = 0
#define BCM84834_TOP_MISC_STRAPr_SET(r,d) (r).top_misc_strap[0] = d
#define BCM84834_TOP_MISC_STRAPr_GET(r) (r).top_misc_strap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_GET(r) (((r).top_misc_strap[0]) & 0x1)
#define BCM84834_TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_SET(r,f) (r).top_misc_strap[0]=(((r).top_misc_strap[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_MISC_STRAP.
 *
 */
#define BCM84834_READ_TOP_MISC_STRAPr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_MISC_STRAPr,(_r._top_misc_strap))
#define BCM84834_WRITE_TOP_MISC_STRAPr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_MISC_STRAPr,(_r._top_misc_strap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_MISC_STRAPr BCM84834_TOP_MISC_STRAPr
#define TOP_MISC_STRAPr_SIZE BCM84834_TOP_MISC_STRAPr_SIZE
typedef BCM84834_TOP_MISC_STRAPr_t TOP_MISC_STRAPr_t;
#define TOP_MISC_STRAPr_CLR BCM84834_TOP_MISC_STRAPr_CLR
#define TOP_MISC_STRAPr_SET BCM84834_TOP_MISC_STRAPr_SET
#define TOP_MISC_STRAPr_GET BCM84834_TOP_MISC_STRAPr_GET
#define TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_GET BCM84834_TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_GET
#define TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_SET BCM84834_TOP_MISC_STRAPr_MDIO_NO_PREAMBLEf_SET
#define READ_TOP_MISC_STRAPr BCM84834_READ_TOP_MISC_STRAPr
#define WRITE_TOP_MISC_STRAPr BCM84834_WRITE_TOP_MISC_STRAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_MISC_STRAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GLOBAL_CNFG
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x404f
 * DEVAD:    30
 * DESC:     Global Configuration Register
 * SIZE:     32
 * FIELDS:
 *     XGPHY_FFT_BLOCK_SIZE 
 *     PTP_SYNC_SOP_SEL 
 *     SPARE1           
 *     XGPHY_SYNC_ETH_EN 
 *
 ******************************************************************************/
#define BCM84834_TOP_GLOBAL_CNFGr (0x001e404f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GLOBAL_CNFGr_SIZE 4

/*
 * This structure should be used to declare and program TOP_GLOBAL_CNFG.
 *
 */
typedef union BCM84834_TOP_GLOBAL_CNFGr_s {
	uint32_t v[1];
	uint32_t top_global_cnfg[1];
	uint32_t _top_global_cnfg;
} BCM84834_TOP_GLOBAL_CNFGr_t;

#define BCM84834_TOP_GLOBAL_CNFGr_CLR(r) (r).top_global_cnfg[0] = 0
#define BCM84834_TOP_GLOBAL_CNFGr_SET(r,d) (r).top_global_cnfg[0] = d
#define BCM84834_TOP_GLOBAL_CNFGr_GET(r) (r).top_global_cnfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_GET(r) ((((r).top_global_cnfg[0]) >> 4) & 0x1)
#define BCM84834_TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_SET(r,f) (r).top_global_cnfg[0]=(((r).top_global_cnfg[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_GLOBAL_CNFGr_SPARE1f_GET(r) ((((r).top_global_cnfg[0]) >> 3) & 0x1)
#define BCM84834_TOP_GLOBAL_CNFGr_SPARE1f_SET(r,f) (r).top_global_cnfg[0]=(((r).top_global_cnfg[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_GET(r) ((((r).top_global_cnfg[0]) >> 2) & 0x1)
#define BCM84834_TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_SET(r,f) (r).top_global_cnfg[0]=(((r).top_global_cnfg[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_GET(r) (((r).top_global_cnfg[0]) & 0x3)
#define BCM84834_TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_SET(r,f) (r).top_global_cnfg[0]=(((r).top_global_cnfg[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TOP_GLOBAL_CNFG.
 *
 */
#define BCM84834_READ_TOP_GLOBAL_CNFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GLOBAL_CNFGr,(_r._top_global_cnfg))
#define BCM84834_WRITE_TOP_GLOBAL_CNFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GLOBAL_CNFGr,(_r._top_global_cnfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GLOBAL_CNFGr BCM84834_TOP_GLOBAL_CNFGr
#define TOP_GLOBAL_CNFGr_SIZE BCM84834_TOP_GLOBAL_CNFGr_SIZE
typedef BCM84834_TOP_GLOBAL_CNFGr_t TOP_GLOBAL_CNFGr_t;
#define TOP_GLOBAL_CNFGr_CLR BCM84834_TOP_GLOBAL_CNFGr_CLR
#define TOP_GLOBAL_CNFGr_SET BCM84834_TOP_GLOBAL_CNFGr_SET
#define TOP_GLOBAL_CNFGr_GET BCM84834_TOP_GLOBAL_CNFGr_GET
#define TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_GET BCM84834_TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_GET
#define TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_SET BCM84834_TOP_GLOBAL_CNFGr_XGPHY_SYNC_ETH_ENf_SET
#define TOP_GLOBAL_CNFGr_SPARE1f_GET BCM84834_TOP_GLOBAL_CNFGr_SPARE1f_GET
#define TOP_GLOBAL_CNFGr_SPARE1f_SET BCM84834_TOP_GLOBAL_CNFGr_SPARE1f_SET
#define TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_GET BCM84834_TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_GET
#define TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_SET BCM84834_TOP_GLOBAL_CNFGr_PTP_SYNC_SOP_SELf_SET
#define TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_GET BCM84834_TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_GET
#define TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_SET BCM84834_TOP_GLOBAL_CNFGr_XGPHY_FFT_BLOCK_SIZEf_SET
#define READ_TOP_GLOBAL_CNFGr BCM84834_READ_TOP_GLOBAL_CNFGr
#define WRITE_TOP_GLOBAL_CNFGr BCM84834_WRITE_TOP_GLOBAL_CNFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GLOBAL_CNFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_GLOBAL_TPO_CNFG
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4050
 * DEVAD:    30
 * DESC:     Global TPO Configuration Register
 * SIZE:     32
 * FIELDS:
 *     XGPHY_TPO_ENABLE 
 *
 ******************************************************************************/
#define BCM84834_TOP_GLOBAL_TPO_CNFGr (0x001e4050 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_GLOBAL_TPO_CNFGr_SIZE 4

/*
 * This structure should be used to declare and program TOP_GLOBAL_TPO_CNFG.
 *
 */
typedef union BCM84834_TOP_GLOBAL_TPO_CNFGr_s {
	uint32_t v[1];
	uint32_t top_global_tpo_cnfg[1];
	uint32_t _top_global_tpo_cnfg;
} BCM84834_TOP_GLOBAL_TPO_CNFGr_t;

#define BCM84834_TOP_GLOBAL_TPO_CNFGr_CLR(r) (r).top_global_tpo_cnfg[0] = 0
#define BCM84834_TOP_GLOBAL_TPO_CNFGr_SET(r,d) (r).top_global_tpo_cnfg[0] = d
#define BCM84834_TOP_GLOBAL_TPO_CNFGr_GET(r) (r).top_global_tpo_cnfg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_GET(r) (((r).top_global_tpo_cnfg[0]) & 0x1)
#define BCM84834_TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_SET(r,f) (r).top_global_tpo_cnfg[0]=(((r).top_global_tpo_cnfg[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_GLOBAL_TPO_CNFG.
 *
 */
#define BCM84834_READ_TOP_GLOBAL_TPO_CNFGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_GLOBAL_TPO_CNFGr,(_r._top_global_tpo_cnfg))
#define BCM84834_WRITE_TOP_GLOBAL_TPO_CNFGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_GLOBAL_TPO_CNFGr,(_r._top_global_tpo_cnfg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_GLOBAL_TPO_CNFGr BCM84834_TOP_GLOBAL_TPO_CNFGr
#define TOP_GLOBAL_TPO_CNFGr_SIZE BCM84834_TOP_GLOBAL_TPO_CNFGr_SIZE
typedef BCM84834_TOP_GLOBAL_TPO_CNFGr_t TOP_GLOBAL_TPO_CNFGr_t;
#define TOP_GLOBAL_TPO_CNFGr_CLR BCM84834_TOP_GLOBAL_TPO_CNFGr_CLR
#define TOP_GLOBAL_TPO_CNFGr_SET BCM84834_TOP_GLOBAL_TPO_CNFGr_SET
#define TOP_GLOBAL_TPO_CNFGr_GET BCM84834_TOP_GLOBAL_TPO_CNFGr_GET
#define TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_GET BCM84834_TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_GET
#define TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_SET BCM84834_TOP_GLOBAL_TPO_CNFGr_XGPHY_TPO_ENABLEf_SET
#define READ_TOP_GLOBAL_TPO_CNFGr BCM84834_READ_TOP_GLOBAL_TPO_CNFGr
#define WRITE_TOP_GLOBAL_TPO_CNFGr BCM84834_WRITE_TOP_GLOBAL_TPO_CNFGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_GLOBAL_TPO_CNFGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_EDISON_MODE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4068
 * DEVAD:    30
 * DESC:     Edison LED Mode register
 * SIZE:     32
 * FIELDS:
 *     LED_MODE         
 *
 ******************************************************************************/
#define BCM84834_TOP_EDISON_MODEr (0x001e4068 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_EDISON_MODEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_EDISON_MODE.
 *
 */
typedef union BCM84834_TOP_EDISON_MODEr_s {
	uint32_t v[1];
	uint32_t top_edison_mode[1];
	uint32_t _top_edison_mode;
} BCM84834_TOP_EDISON_MODEr_t;

#define BCM84834_TOP_EDISON_MODEr_CLR(r) (r).top_edison_mode[0] = 0
#define BCM84834_TOP_EDISON_MODEr_SET(r,d) (r).top_edison_mode[0] = d
#define BCM84834_TOP_EDISON_MODEr_GET(r) (r).top_edison_mode[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_EDISON_MODEr_LED_MODEf_GET(r) (((r).top_edison_mode[0]) & 0xffff)
#define BCM84834_TOP_EDISON_MODEr_LED_MODEf_SET(r,f) (r).top_edison_mode[0]=(((r).top_edison_mode[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_EDISON_MODE.
 *
 */
#define BCM84834_READ_TOP_EDISON_MODEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_EDISON_MODEr,(_r._top_edison_mode))
#define BCM84834_WRITE_TOP_EDISON_MODEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_EDISON_MODEr,(_r._top_edison_mode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_EDISON_MODEr BCM84834_TOP_EDISON_MODEr
#define TOP_EDISON_MODEr_SIZE BCM84834_TOP_EDISON_MODEr_SIZE
typedef BCM84834_TOP_EDISON_MODEr_t TOP_EDISON_MODEr_t;
#define TOP_EDISON_MODEr_CLR BCM84834_TOP_EDISON_MODEr_CLR
#define TOP_EDISON_MODEr_SET BCM84834_TOP_EDISON_MODEr_SET
#define TOP_EDISON_MODEr_GET BCM84834_TOP_EDISON_MODEr_GET
#define TOP_EDISON_MODEr_LED_MODEf_GET BCM84834_TOP_EDISON_MODEr_LED_MODEf_GET
#define TOP_EDISON_MODEr_LED_MODEf_SET BCM84834_TOP_EDISON_MODEr_LED_MODEf_SET
#define READ_TOP_EDISON_MODEr BCM84834_READ_TOP_EDISON_MODEr
#define WRITE_TOP_EDISON_MODEr BCM84834_WRITE_TOP_EDISON_MODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_EDISON_MODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_EDISON_INTERRUPT_MASK
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4069
 * DEVAD:    30
 * DESC:     Edison Interrupt Mask register
 * SIZE:     32
 * FIELDS:
 *     INT_MASK         
 *
 ******************************************************************************/
#define BCM84834_TOP_EDISON_INTERRUPT_MASKr (0x001e4069 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_SIZE 4

/*
 * This structure should be used to declare and program TOP_EDISON_INTERRUPT_MASK.
 *
 */
typedef union BCM84834_TOP_EDISON_INTERRUPT_MASKr_s {
	uint32_t v[1];
	uint32_t top_edison_interrupt_mask[1];
	uint32_t _top_edison_interrupt_mask;
} BCM84834_TOP_EDISON_INTERRUPT_MASKr_t;

#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_CLR(r) (r).top_edison_interrupt_mask[0] = 0
#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_SET(r,d) (r).top_edison_interrupt_mask[0] = d
#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_GET(r) (r).top_edison_interrupt_mask[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_GET(r) (((r).top_edison_interrupt_mask[0]) & 0xffff)
#define BCM84834_TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_SET(r,f) (r).top_edison_interrupt_mask[0]=(((r).top_edison_interrupt_mask[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_EDISON_INTERRUPT_MASK.
 *
 */
#define BCM84834_READ_TOP_EDISON_INTERRUPT_MASKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_EDISON_INTERRUPT_MASKr,(_r._top_edison_interrupt_mask))
#define BCM84834_WRITE_TOP_EDISON_INTERRUPT_MASKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_EDISON_INTERRUPT_MASKr,(_r._top_edison_interrupt_mask))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_EDISON_INTERRUPT_MASKr BCM84834_TOP_EDISON_INTERRUPT_MASKr
#define TOP_EDISON_INTERRUPT_MASKr_SIZE BCM84834_TOP_EDISON_INTERRUPT_MASKr_SIZE
typedef BCM84834_TOP_EDISON_INTERRUPT_MASKr_t TOP_EDISON_INTERRUPT_MASKr_t;
#define TOP_EDISON_INTERRUPT_MASKr_CLR BCM84834_TOP_EDISON_INTERRUPT_MASKr_CLR
#define TOP_EDISON_INTERRUPT_MASKr_SET BCM84834_TOP_EDISON_INTERRUPT_MASKr_SET
#define TOP_EDISON_INTERRUPT_MASKr_GET BCM84834_TOP_EDISON_INTERRUPT_MASKr_GET
#define TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_GET BCM84834_TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_GET
#define TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_SET BCM84834_TOP_EDISON_INTERRUPT_MASKr_INT_MASKf_SET
#define READ_TOP_EDISON_INTERRUPT_MASKr BCM84834_READ_TOP_EDISON_INTERRUPT_MASKr
#define WRITE_TOP_EDISON_INTERRUPT_MASKr BCM84834_WRITE_TOP_EDISON_INTERRUPT_MASKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_EDISON_INTERRUPT_MASKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_EDISON_INTERRUPT_CLEAR
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406a
 * DEVAD:    30
 * DESC:     Edison Interrupt Clear register
 * SIZE:     32
 * FIELDS:
 *     INT_CLEAR0       
 *     INT_CLEAR1       
 *     INT_CLEAR2       
 *     INT_CLEAR3       
 *     INT_CLEAR4       
 *     INT_CLEAR5       
 *     INT_CLEAR6       
 *     INT_CLEAR7       
 *     INT_CLEAR8       
 *     INT_CLEAR9       
 *     INT_CLEAR10      
 *     INT_CLEAR11      
 *     INT_CLEAR12      
 *     INT_CLEAR13      
 *     INT_CLEAR14      
 *     INT_CLEAR15      
 *
 ******************************************************************************/
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr (0x001e406a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_SIZE 4

/*
 * This structure should be used to declare and program TOP_EDISON_INTERRUPT_CLEAR.
 *
 */
typedef union BCM84834_TOP_EDISON_INTERRUPT_CLEARr_s {
	uint32_t v[1];
	uint32_t top_edison_interrupt_clear[1];
	uint32_t _top_edison_interrupt_clear;
} BCM84834_TOP_EDISON_INTERRUPT_CLEARr_t;

#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_CLR(r) (r).top_edison_interrupt_clear[0] = 0
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_SET(r,d) (r).top_edison_interrupt_clear[0] = d
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_GET(r) (r).top_edison_interrupt_clear[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 15) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 14) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 13) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 12) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 11) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 10) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 9) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 8) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 7) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 6) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 5) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 4) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 3) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 2) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_GET(r) ((((r).top_edison_interrupt_clear[0]) >> 1) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_GET(r) (((r).top_edison_interrupt_clear[0]) & 0x1)
#define BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_SET(r,f) (r).top_edison_interrupt_clear[0]=(((r).top_edison_interrupt_clear[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_EDISON_INTERRUPT_CLEAR.
 *
 */
#define BCM84834_READ_TOP_EDISON_INTERRUPT_CLEARr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_EDISON_INTERRUPT_CLEARr,(_r._top_edison_interrupt_clear))
#define BCM84834_WRITE_TOP_EDISON_INTERRUPT_CLEARr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_EDISON_INTERRUPT_CLEARr,(_r._top_edison_interrupt_clear))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_EDISON_INTERRUPT_CLEARr BCM84834_TOP_EDISON_INTERRUPT_CLEARr
#define TOP_EDISON_INTERRUPT_CLEARr_SIZE BCM84834_TOP_EDISON_INTERRUPT_CLEARr_SIZE
typedef BCM84834_TOP_EDISON_INTERRUPT_CLEARr_t TOP_EDISON_INTERRUPT_CLEARr_t;
#define TOP_EDISON_INTERRUPT_CLEARr_CLR BCM84834_TOP_EDISON_INTERRUPT_CLEARr_CLR
#define TOP_EDISON_INTERRUPT_CLEARr_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_SET
#define TOP_EDISON_INTERRUPT_CLEARr_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR15f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR14f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR13f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR12f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR11f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR10f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR9f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR8f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR7f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR6f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR5f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR4f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR3f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR2f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR1f_SET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_GET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_GET
#define TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_SET BCM84834_TOP_EDISON_INTERRUPT_CLEARr_INT_CLEAR0f_SET
#define READ_TOP_EDISON_INTERRUPT_CLEARr BCM84834_READ_TOP_EDISON_INTERRUPT_CLEARr
#define WRITE_TOP_EDISON_INTERRUPT_CLEARr BCM84834_WRITE_TOP_EDISON_INTERRUPT_CLEARr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_EDISON_INTERRUPT_CLEARr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_EDISON_INTERRUPT_HOLD
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406b
 * DEVAD:    30
 * DESC:     Edison Interrupt Hold register
 * SIZE:     32
 * FIELDS:
 *     INT_HOLD         
 *
 ******************************************************************************/
#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr (0x001e406b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_SIZE 4

/*
 * This structure should be used to declare and program TOP_EDISON_INTERRUPT_HOLD.
 *
 */
typedef union BCM84834_TOP_EDISON_INTERRUPT_HOLDr_s {
	uint32_t v[1];
	uint32_t top_edison_interrupt_hold[1];
	uint32_t _top_edison_interrupt_hold;
} BCM84834_TOP_EDISON_INTERRUPT_HOLDr_t;

#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_CLR(r) (r).top_edison_interrupt_hold[0] = 0
#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_SET(r,d) (r).top_edison_interrupt_hold[0] = d
#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_GET(r) (r).top_edison_interrupt_hold[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_GET(r) (((r).top_edison_interrupt_hold[0]) & 0xffff)
#define BCM84834_TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_SET(r,f) (r).top_edison_interrupt_hold[0]=(((r).top_edison_interrupt_hold[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_EDISON_INTERRUPT_HOLD.
 *
 */
#define BCM84834_READ_TOP_EDISON_INTERRUPT_HOLDr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_EDISON_INTERRUPT_HOLDr,(_r._top_edison_interrupt_hold))
#define BCM84834_WRITE_TOP_EDISON_INTERRUPT_HOLDr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_EDISON_INTERRUPT_HOLDr,(_r._top_edison_interrupt_hold))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_EDISON_INTERRUPT_HOLDr BCM84834_TOP_EDISON_INTERRUPT_HOLDr
#define TOP_EDISON_INTERRUPT_HOLDr_SIZE BCM84834_TOP_EDISON_INTERRUPT_HOLDr_SIZE
typedef BCM84834_TOP_EDISON_INTERRUPT_HOLDr_t TOP_EDISON_INTERRUPT_HOLDr_t;
#define TOP_EDISON_INTERRUPT_HOLDr_CLR BCM84834_TOP_EDISON_INTERRUPT_HOLDr_CLR
#define TOP_EDISON_INTERRUPT_HOLDr_SET BCM84834_TOP_EDISON_INTERRUPT_HOLDr_SET
#define TOP_EDISON_INTERRUPT_HOLDr_GET BCM84834_TOP_EDISON_INTERRUPT_HOLDr_GET
#define TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_GET BCM84834_TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_GET
#define TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_SET BCM84834_TOP_EDISON_INTERRUPT_HOLDr_INT_HOLDf_SET
#define READ_TOP_EDISON_INTERRUPT_HOLDr BCM84834_READ_TOP_EDISON_INTERRUPT_HOLDr
#define WRITE_TOP_EDISON_INTERRUPT_HOLDr BCM84834_WRITE_TOP_EDISON_INTERRUPT_HOLDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_EDISON_INTERRUPT_HOLDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED_CONTROL
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406c
 * DEVAD:    30
 * DESC:     LED Control register
 * SIZE:     32
 * FIELDS:
 *     EDISON_LED_MODE  
 *     ALT_COLORS       
 *     DFM              
 *     FW_OVERRIDE      
 *     LED0_VAL         
 *     LED1_VAL         
 *     LED0_OE_N        
 *     LED1_OE_N        
 *     LED0_POL_FLIP    
 *     LED1_POL_FLIP    
 *     FW_STROBE_LED0   
 *     FW_STROBE_LED1   
 *
 ******************************************************************************/
#define BCM84834_TOP_LED_CONTROLr (0x001e406c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED_CONTROL.
 *
 */
typedef union BCM84834_TOP_LED_CONTROLr_s {
	uint32_t v[1];
	uint32_t top_led_control[1];
	uint32_t _top_led_control;
} BCM84834_TOP_LED_CONTROLr_t;

#define BCM84834_TOP_LED_CONTROLr_CLR(r) (r).top_led_control[0] = 0
#define BCM84834_TOP_LED_CONTROLr_SET(r,d) (r).top_led_control[0] = d
#define BCM84834_TOP_LED_CONTROLr_GET(r) (r).top_led_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED1f_GET(r) ((((r).top_led_control[0]) >> 11) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED1f_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED0f_GET(r) ((((r).top_led_control[0]) >> 10) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED0f_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_TOP_LED_CONTROLr_LED1_POL_FLIPf_GET(r) ((((r).top_led_control[0]) >> 9) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED1_POL_FLIPf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_TOP_LED_CONTROLr_LED0_POL_FLIPf_GET(r) ((((r).top_led_control[0]) >> 8) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED0_POL_FLIPf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_TOP_LED_CONTROLr_LED1_OE_Nf_GET(r) ((((r).top_led_control[0]) >> 7) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED1_OE_Nf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_TOP_LED_CONTROLr_LED0_OE_Nf_GET(r) ((((r).top_led_control[0]) >> 6) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED0_OE_Nf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_TOP_LED_CONTROLr_LED1_VALf_GET(r) ((((r).top_led_control[0]) >> 5) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED1_VALf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_TOP_LED_CONTROLr_LED0_VALf_GET(r) ((((r).top_led_control[0]) >> 4) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_LED0_VALf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_TOP_LED_CONTROLr_FW_OVERRIDEf_GET(r) ((((r).top_led_control[0]) >> 3) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_FW_OVERRIDEf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_TOP_LED_CONTROLr_DFMf_GET(r) ((((r).top_led_control[0]) >> 2) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_DFMf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_LED_CONTROLr_ALT_COLORSf_GET(r) ((((r).top_led_control[0]) >> 1) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_ALT_COLORSf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_LED_CONTROLr_EDISON_LED_MODEf_GET(r) (((r).top_led_control[0]) & 0x1)
#define BCM84834_TOP_LED_CONTROLr_EDISON_LED_MODEf_SET(r,f) (r).top_led_control[0]=(((r).top_led_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_LED_CONTROL.
 *
 */
#define BCM84834_READ_TOP_LED_CONTROLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED_CONTROLr,(_r._top_led_control))
#define BCM84834_WRITE_TOP_LED_CONTROLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED_CONTROLr,(_r._top_led_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED_CONTROLr BCM84834_TOP_LED_CONTROLr
#define TOP_LED_CONTROLr_SIZE BCM84834_TOP_LED_CONTROLr_SIZE
typedef BCM84834_TOP_LED_CONTROLr_t TOP_LED_CONTROLr_t;
#define TOP_LED_CONTROLr_CLR BCM84834_TOP_LED_CONTROLr_CLR
#define TOP_LED_CONTROLr_SET BCM84834_TOP_LED_CONTROLr_SET
#define TOP_LED_CONTROLr_GET BCM84834_TOP_LED_CONTROLr_GET
#define TOP_LED_CONTROLr_FW_STROBE_LED1f_GET BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED1f_GET
#define TOP_LED_CONTROLr_FW_STROBE_LED1f_SET BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED1f_SET
#define TOP_LED_CONTROLr_FW_STROBE_LED0f_GET BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED0f_GET
#define TOP_LED_CONTROLr_FW_STROBE_LED0f_SET BCM84834_TOP_LED_CONTROLr_FW_STROBE_LED0f_SET
#define TOP_LED_CONTROLr_LED1_POL_FLIPf_GET BCM84834_TOP_LED_CONTROLr_LED1_POL_FLIPf_GET
#define TOP_LED_CONTROLr_LED1_POL_FLIPf_SET BCM84834_TOP_LED_CONTROLr_LED1_POL_FLIPf_SET
#define TOP_LED_CONTROLr_LED0_POL_FLIPf_GET BCM84834_TOP_LED_CONTROLr_LED0_POL_FLIPf_GET
#define TOP_LED_CONTROLr_LED0_POL_FLIPf_SET BCM84834_TOP_LED_CONTROLr_LED0_POL_FLIPf_SET
#define TOP_LED_CONTROLr_LED1_OE_Nf_GET BCM84834_TOP_LED_CONTROLr_LED1_OE_Nf_GET
#define TOP_LED_CONTROLr_LED1_OE_Nf_SET BCM84834_TOP_LED_CONTROLr_LED1_OE_Nf_SET
#define TOP_LED_CONTROLr_LED0_OE_Nf_GET BCM84834_TOP_LED_CONTROLr_LED0_OE_Nf_GET
#define TOP_LED_CONTROLr_LED0_OE_Nf_SET BCM84834_TOP_LED_CONTROLr_LED0_OE_Nf_SET
#define TOP_LED_CONTROLr_LED1_VALf_GET BCM84834_TOP_LED_CONTROLr_LED1_VALf_GET
#define TOP_LED_CONTROLr_LED1_VALf_SET BCM84834_TOP_LED_CONTROLr_LED1_VALf_SET
#define TOP_LED_CONTROLr_LED0_VALf_GET BCM84834_TOP_LED_CONTROLr_LED0_VALf_GET
#define TOP_LED_CONTROLr_LED0_VALf_SET BCM84834_TOP_LED_CONTROLr_LED0_VALf_SET
#define TOP_LED_CONTROLr_FW_OVERRIDEf_GET BCM84834_TOP_LED_CONTROLr_FW_OVERRIDEf_GET
#define TOP_LED_CONTROLr_FW_OVERRIDEf_SET BCM84834_TOP_LED_CONTROLr_FW_OVERRIDEf_SET
#define TOP_LED_CONTROLr_DFMf_GET BCM84834_TOP_LED_CONTROLr_DFMf_GET
#define TOP_LED_CONTROLr_DFMf_SET BCM84834_TOP_LED_CONTROLr_DFMf_SET
#define TOP_LED_CONTROLr_ALT_COLORSf_GET BCM84834_TOP_LED_CONTROLr_ALT_COLORSf_GET
#define TOP_LED_CONTROLr_ALT_COLORSf_SET BCM84834_TOP_LED_CONTROLr_ALT_COLORSf_SET
#define TOP_LED_CONTROLr_EDISON_LED_MODEf_GET BCM84834_TOP_LED_CONTROLr_EDISON_LED_MODEf_GET
#define TOP_LED_CONTROLr_EDISON_LED_MODEf_SET BCM84834_TOP_LED_CONTROLr_EDISON_LED_MODEf_SET
#define READ_TOP_LED_CONTROLr BCM84834_READ_TOP_LED_CONTROLr
#define WRITE_TOP_LED_CONTROLr BCM84834_WRITE_TOP_LED_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED0_FIRST_HIGH_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406d
 * DEVAD:    30
 * DESC:     LED 0 First High Time
 * SIZE:     32
 * FIELDS:
 *     HIGH_TIME        
 *
 ******************************************************************************/
#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr (0x001e406d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED0_FIRST_HIGH_TIME.
 *
 */
typedef union BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led0_first_high_time[1];
	uint32_t _top_led0_first_high_time;
} BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_t;

#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_CLR(r) (r).top_led0_first_high_time[0] = 0
#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_SET(r,d) (r).top_led0_first_high_time[0] = d
#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_GET(r) (r).top_led0_first_high_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET(r) (((r).top_led0_first_high_time[0]) & 0xffff)
#define BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET(r,f) (r).top_led0_first_high_time[0]=(((r).top_led0_first_high_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED0_FIRST_HIGH_TIME.
 *
 */
#define BCM84834_READ_TOP_LED0_FIRST_HIGH_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED0_FIRST_HIGH_TIMEr,(_r._top_led0_first_high_time))
#define BCM84834_WRITE_TOP_LED0_FIRST_HIGH_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED0_FIRST_HIGH_TIMEr,(_r._top_led0_first_high_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED0_FIRST_HIGH_TIMEr BCM84834_TOP_LED0_FIRST_HIGH_TIMEr
#define TOP_LED0_FIRST_HIGH_TIMEr_SIZE BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_SIZE
typedef BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_t TOP_LED0_FIRST_HIGH_TIMEr_t;
#define TOP_LED0_FIRST_HIGH_TIMEr_CLR BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_CLR
#define TOP_LED0_FIRST_HIGH_TIMEr_SET BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_SET
#define TOP_LED0_FIRST_HIGH_TIMEr_GET BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_GET
#define TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET
#define TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET BCM84834_TOP_LED0_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET
#define READ_TOP_LED0_FIRST_HIGH_TIMEr BCM84834_READ_TOP_LED0_FIRST_HIGH_TIMEr
#define WRITE_TOP_LED0_FIRST_HIGH_TIMEr BCM84834_WRITE_TOP_LED0_FIRST_HIGH_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED0_FIRST_HIGH_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED0_FIRST_LOW_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406e
 * DEVAD:    30
 * DESC:     LED 0 First Low Time
 * SIZE:     32
 * FIELDS:
 *     LOW_TIME         
 *
 ******************************************************************************/
#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr (0x001e406e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED0_FIRST_LOW_TIME.
 *
 */
typedef union BCM84834_TOP_LED0_FIRST_LOW_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led0_first_low_time[1];
	uint32_t _top_led0_first_low_time;
} BCM84834_TOP_LED0_FIRST_LOW_TIMEr_t;

#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_CLR(r) (r).top_led0_first_low_time[0] = 0
#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_SET(r,d) (r).top_led0_first_low_time[0] = d
#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_GET(r) (r).top_led0_first_low_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_GET(r) (((r).top_led0_first_low_time[0]) & 0xffff)
#define BCM84834_TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_SET(r,f) (r).top_led0_first_low_time[0]=(((r).top_led0_first_low_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED0_FIRST_LOW_TIME.
 *
 */
#define BCM84834_READ_TOP_LED0_FIRST_LOW_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED0_FIRST_LOW_TIMEr,(_r._top_led0_first_low_time))
#define BCM84834_WRITE_TOP_LED0_FIRST_LOW_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED0_FIRST_LOW_TIMEr,(_r._top_led0_first_low_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED0_FIRST_LOW_TIMEr BCM84834_TOP_LED0_FIRST_LOW_TIMEr
#define TOP_LED0_FIRST_LOW_TIMEr_SIZE BCM84834_TOP_LED0_FIRST_LOW_TIMEr_SIZE
typedef BCM84834_TOP_LED0_FIRST_LOW_TIMEr_t TOP_LED0_FIRST_LOW_TIMEr_t;
#define TOP_LED0_FIRST_LOW_TIMEr_CLR BCM84834_TOP_LED0_FIRST_LOW_TIMEr_CLR
#define TOP_LED0_FIRST_LOW_TIMEr_SET BCM84834_TOP_LED0_FIRST_LOW_TIMEr_SET
#define TOP_LED0_FIRST_LOW_TIMEr_GET BCM84834_TOP_LED0_FIRST_LOW_TIMEr_GET
#define TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_GET BCM84834_TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_GET
#define TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_SET BCM84834_TOP_LED0_FIRST_LOW_TIMEr_LOW_TIMEf_SET
#define READ_TOP_LED0_FIRST_LOW_TIMEr BCM84834_READ_TOP_LED0_FIRST_LOW_TIMEr
#define WRITE_TOP_LED0_FIRST_LOW_TIMEr BCM84834_WRITE_TOP_LED0_FIRST_LOW_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED0_FIRST_LOW_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED0_SECOND_HIGH_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x406f
 * DEVAD:    30
 * DESC:     LED 0 Second High Time
 * SIZE:     32
 * FIELDS:
 *     HIGH_TIME        
 *
 ******************************************************************************/
#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr (0x001e406f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED0_SECOND_HIGH_TIME.
 *
 */
typedef union BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led0_second_high_time[1];
	uint32_t _top_led0_second_high_time;
} BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_t;

#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_CLR(r) (r).top_led0_second_high_time[0] = 0
#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_SET(r,d) (r).top_led0_second_high_time[0] = d
#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_GET(r) (r).top_led0_second_high_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET(r) (((r).top_led0_second_high_time[0]) & 0xffff)
#define BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET(r,f) (r).top_led0_second_high_time[0]=(((r).top_led0_second_high_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED0_SECOND_HIGH_TIME.
 *
 */
#define BCM84834_READ_TOP_LED0_SECOND_HIGH_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED0_SECOND_HIGH_TIMEr,(_r._top_led0_second_high_time))
#define BCM84834_WRITE_TOP_LED0_SECOND_HIGH_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED0_SECOND_HIGH_TIMEr,(_r._top_led0_second_high_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED0_SECOND_HIGH_TIMEr BCM84834_TOP_LED0_SECOND_HIGH_TIMEr
#define TOP_LED0_SECOND_HIGH_TIMEr_SIZE BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_SIZE
typedef BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_t TOP_LED0_SECOND_HIGH_TIMEr_t;
#define TOP_LED0_SECOND_HIGH_TIMEr_CLR BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_CLR
#define TOP_LED0_SECOND_HIGH_TIMEr_SET BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_SET
#define TOP_LED0_SECOND_HIGH_TIMEr_GET BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_GET
#define TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET
#define TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET BCM84834_TOP_LED0_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET
#define READ_TOP_LED0_SECOND_HIGH_TIMEr BCM84834_READ_TOP_LED0_SECOND_HIGH_TIMEr
#define WRITE_TOP_LED0_SECOND_HIGH_TIMEr BCM84834_WRITE_TOP_LED0_SECOND_HIGH_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED0_SECOND_HIGH_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED1_FIRST_HIGH_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4070
 * DEVAD:    30
 * DESC:     LED 1 First High Time
 * SIZE:     32
 * FIELDS:
 *     HIGH_TIME        
 *
 ******************************************************************************/
#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr (0x001e4070 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED1_FIRST_HIGH_TIME.
 *
 */
typedef union BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led1_first_high_time[1];
	uint32_t _top_led1_first_high_time;
} BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_t;

#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_CLR(r) (r).top_led1_first_high_time[0] = 0
#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_SET(r,d) (r).top_led1_first_high_time[0] = d
#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_GET(r) (r).top_led1_first_high_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET(r) (((r).top_led1_first_high_time[0]) & 0xffff)
#define BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET(r,f) (r).top_led1_first_high_time[0]=(((r).top_led1_first_high_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED1_FIRST_HIGH_TIME.
 *
 */
#define BCM84834_READ_TOP_LED1_FIRST_HIGH_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED1_FIRST_HIGH_TIMEr,(_r._top_led1_first_high_time))
#define BCM84834_WRITE_TOP_LED1_FIRST_HIGH_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED1_FIRST_HIGH_TIMEr,(_r._top_led1_first_high_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED1_FIRST_HIGH_TIMEr BCM84834_TOP_LED1_FIRST_HIGH_TIMEr
#define TOP_LED1_FIRST_HIGH_TIMEr_SIZE BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_SIZE
typedef BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_t TOP_LED1_FIRST_HIGH_TIMEr_t;
#define TOP_LED1_FIRST_HIGH_TIMEr_CLR BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_CLR
#define TOP_LED1_FIRST_HIGH_TIMEr_SET BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_SET
#define TOP_LED1_FIRST_HIGH_TIMEr_GET BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_GET
#define TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_GET
#define TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET BCM84834_TOP_LED1_FIRST_HIGH_TIMEr_HIGH_TIMEf_SET
#define READ_TOP_LED1_FIRST_HIGH_TIMEr BCM84834_READ_TOP_LED1_FIRST_HIGH_TIMEr
#define WRITE_TOP_LED1_FIRST_HIGH_TIMEr BCM84834_WRITE_TOP_LED1_FIRST_HIGH_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED1_FIRST_HIGH_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED1_FIRST_LOW_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4071
 * DEVAD:    30
 * DESC:     LED 1 First Low Time
 * SIZE:     32
 * FIELDS:
 *     LOW_TIME         
 *
 ******************************************************************************/
#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr (0x001e4071 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED1_FIRST_LOW_TIME.
 *
 */
typedef union BCM84834_TOP_LED1_FIRST_LOW_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led1_first_low_time[1];
	uint32_t _top_led1_first_low_time;
} BCM84834_TOP_LED1_FIRST_LOW_TIMEr_t;

#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_CLR(r) (r).top_led1_first_low_time[0] = 0
#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_SET(r,d) (r).top_led1_first_low_time[0] = d
#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_GET(r) (r).top_led1_first_low_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_GET(r) (((r).top_led1_first_low_time[0]) & 0xffff)
#define BCM84834_TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_SET(r,f) (r).top_led1_first_low_time[0]=(((r).top_led1_first_low_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED1_FIRST_LOW_TIME.
 *
 */
#define BCM84834_READ_TOP_LED1_FIRST_LOW_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED1_FIRST_LOW_TIMEr,(_r._top_led1_first_low_time))
#define BCM84834_WRITE_TOP_LED1_FIRST_LOW_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED1_FIRST_LOW_TIMEr,(_r._top_led1_first_low_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED1_FIRST_LOW_TIMEr BCM84834_TOP_LED1_FIRST_LOW_TIMEr
#define TOP_LED1_FIRST_LOW_TIMEr_SIZE BCM84834_TOP_LED1_FIRST_LOW_TIMEr_SIZE
typedef BCM84834_TOP_LED1_FIRST_LOW_TIMEr_t TOP_LED1_FIRST_LOW_TIMEr_t;
#define TOP_LED1_FIRST_LOW_TIMEr_CLR BCM84834_TOP_LED1_FIRST_LOW_TIMEr_CLR
#define TOP_LED1_FIRST_LOW_TIMEr_SET BCM84834_TOP_LED1_FIRST_LOW_TIMEr_SET
#define TOP_LED1_FIRST_LOW_TIMEr_GET BCM84834_TOP_LED1_FIRST_LOW_TIMEr_GET
#define TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_GET BCM84834_TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_GET
#define TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_SET BCM84834_TOP_LED1_FIRST_LOW_TIMEr_LOW_TIMEf_SET
#define READ_TOP_LED1_FIRST_LOW_TIMEr BCM84834_READ_TOP_LED1_FIRST_LOW_TIMEr
#define WRITE_TOP_LED1_FIRST_LOW_TIMEr BCM84834_WRITE_TOP_LED1_FIRST_LOW_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED1_FIRST_LOW_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_LED1_SECOND_HIGH_TIME
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4072
 * DEVAD:    30
 * DESC:     LED 1 Second High Time
 * SIZE:     32
 * FIELDS:
 *     HIGH_TIME        
 *
 ******************************************************************************/
#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr (0x001e4072 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_LED1_SECOND_HIGH_TIME.
 *
 */
typedef union BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_s {
	uint32_t v[1];
	uint32_t top_led1_second_high_time[1];
	uint32_t _top_led1_second_high_time;
} BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_t;

#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_CLR(r) (r).top_led1_second_high_time[0] = 0
#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_SET(r,d) (r).top_led1_second_high_time[0] = d
#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_GET(r) (r).top_led1_second_high_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET(r) (((r).top_led1_second_high_time[0]) & 0xffff)
#define BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET(r,f) (r).top_led1_second_high_time[0]=(((r).top_led1_second_high_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_LED1_SECOND_HIGH_TIME.
 *
 */
#define BCM84834_READ_TOP_LED1_SECOND_HIGH_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_LED1_SECOND_HIGH_TIMEr,(_r._top_led1_second_high_time))
#define BCM84834_WRITE_TOP_LED1_SECOND_HIGH_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_LED1_SECOND_HIGH_TIMEr,(_r._top_led1_second_high_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_LED1_SECOND_HIGH_TIMEr BCM84834_TOP_LED1_SECOND_HIGH_TIMEr
#define TOP_LED1_SECOND_HIGH_TIMEr_SIZE BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_SIZE
typedef BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_t TOP_LED1_SECOND_HIGH_TIMEr_t;
#define TOP_LED1_SECOND_HIGH_TIMEr_CLR BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_CLR
#define TOP_LED1_SECOND_HIGH_TIMEr_SET BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_SET
#define TOP_LED1_SECOND_HIGH_TIMEr_GET BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_GET
#define TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_GET
#define TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET BCM84834_TOP_LED1_SECOND_HIGH_TIMEr_HIGH_TIMEf_SET
#define READ_TOP_LED1_SECOND_HIGH_TIMEr BCM84834_READ_TOP_LED1_SECOND_HIGH_TIMEr
#define WRITE_TOP_LED1_SECOND_HIGH_TIMEr BCM84834_WRITE_TOP_LED1_SECOND_HIGH_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_LED1_SECOND_HIGH_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_IG_PACKET_FCS_ERR_CNT
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4073
 * DEVAD:    30
 * DESC:     Ingress Packet FCS Error Count
 * SIZE:     32
 * FIELDS:
 *     COUNT            
 *
 ******************************************************************************/
#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr (0x001e4073 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_SIZE 4

/*
 * This structure should be used to declare and program TOP_IG_PACKET_FCS_ERR_CNT.
 *
 */
typedef union BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_s {
	uint32_t v[1];
	uint32_t top_ig_packet_fcs_err_cnt[1];
	uint32_t _top_ig_packet_fcs_err_cnt;
} BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_t;

#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_CLR(r) (r).top_ig_packet_fcs_err_cnt[0] = 0
#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_SET(r,d) (r).top_ig_packet_fcs_err_cnt[0] = d
#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_GET(r) (r).top_ig_packet_fcs_err_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_GET(r) (((r).top_ig_packet_fcs_err_cnt[0]) & 0xffff)
#define BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_SET(r,f) (r).top_ig_packet_fcs_err_cnt[0]=(((r).top_ig_packet_fcs_err_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_IG_PACKET_FCS_ERR_CNT.
 *
 */
#define BCM84834_READ_TOP_IG_PACKET_FCS_ERR_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr,(_r._top_ig_packet_fcs_err_cnt))
#define BCM84834_WRITE_TOP_IG_PACKET_FCS_ERR_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr,(_r._top_ig_packet_fcs_err_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_IG_PACKET_FCS_ERR_CNTr BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr
#define TOP_IG_PACKET_FCS_ERR_CNTr_SIZE BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_SIZE
typedef BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_t TOP_IG_PACKET_FCS_ERR_CNTr_t;
#define TOP_IG_PACKET_FCS_ERR_CNTr_CLR BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_CLR
#define TOP_IG_PACKET_FCS_ERR_CNTr_SET BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_SET
#define TOP_IG_PACKET_FCS_ERR_CNTr_GET BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_GET
#define TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_GET BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_GET
#define TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_SET BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr_COUNTf_SET
#define READ_TOP_IG_PACKET_FCS_ERR_CNTr BCM84834_READ_TOP_IG_PACKET_FCS_ERR_CNTr
#define WRITE_TOP_IG_PACKET_FCS_ERR_CNTr BCM84834_WRITE_TOP_IG_PACKET_FCS_ERR_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_IG_PACKET_FCS_ERR_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_EG_PACKET_FCS_ERR_CNT
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4074
 * DEVAD:    30
 * DESC:     Egress Packet FCS Error Count
 * SIZE:     32
 * FIELDS:
 *     COUNT            
 *
 ******************************************************************************/
#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr (0x001e4074 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_SIZE 4

/*
 * This structure should be used to declare and program TOP_EG_PACKET_FCS_ERR_CNT.
 *
 */
typedef union BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_s {
	uint32_t v[1];
	uint32_t top_eg_packet_fcs_err_cnt[1];
	uint32_t _top_eg_packet_fcs_err_cnt;
} BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_t;

#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_CLR(r) (r).top_eg_packet_fcs_err_cnt[0] = 0
#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_SET(r,d) (r).top_eg_packet_fcs_err_cnt[0] = d
#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_GET(r) (r).top_eg_packet_fcs_err_cnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_GET(r) (((r).top_eg_packet_fcs_err_cnt[0]) & 0xffff)
#define BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_SET(r,f) (r).top_eg_packet_fcs_err_cnt[0]=(((r).top_eg_packet_fcs_err_cnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_EG_PACKET_FCS_ERR_CNT.
 *
 */
#define BCM84834_READ_TOP_EG_PACKET_FCS_ERR_CNTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr,(_r._top_eg_packet_fcs_err_cnt))
#define BCM84834_WRITE_TOP_EG_PACKET_FCS_ERR_CNTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr,(_r._top_eg_packet_fcs_err_cnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_EG_PACKET_FCS_ERR_CNTr BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr
#define TOP_EG_PACKET_FCS_ERR_CNTr_SIZE BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_SIZE
typedef BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_t TOP_EG_PACKET_FCS_ERR_CNTr_t;
#define TOP_EG_PACKET_FCS_ERR_CNTr_CLR BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_CLR
#define TOP_EG_PACKET_FCS_ERR_CNTr_SET BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_SET
#define TOP_EG_PACKET_FCS_ERR_CNTr_GET BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_GET
#define TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_GET BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_GET
#define TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_SET BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr_COUNTf_SET
#define READ_TOP_EG_PACKET_FCS_ERR_CNTr BCM84834_READ_TOP_EG_PACKET_FCS_ERR_CNTr
#define WRITE_TOP_EG_PACKET_FCS_ERR_CNTr BCM84834_WRITE_TOP_EG_PACKET_FCS_ERR_CNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_EG_PACKET_FCS_ERR_CNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_M2LV_ENABLE
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4078
 * DEVAD:    30
 * DESC:     MDIO to Logic Vision BIST Enable Register
 * SIZE:     32
 * FIELDS:
 *     ENABLE           
 *
 ******************************************************************************/
#define BCM84834_TOP_M2LV_ENABLEr (0x001e4078 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_M2LV_ENABLEr_SIZE 4

/*
 * This structure should be used to declare and program TOP_M2LV_ENABLE.
 *
 */
typedef union BCM84834_TOP_M2LV_ENABLEr_s {
	uint32_t v[1];
	uint32_t top_m2lv_enable[1];
	uint32_t _top_m2lv_enable;
} BCM84834_TOP_M2LV_ENABLEr_t;

#define BCM84834_TOP_M2LV_ENABLEr_CLR(r) (r).top_m2lv_enable[0] = 0
#define BCM84834_TOP_M2LV_ENABLEr_SET(r,d) (r).top_m2lv_enable[0] = d
#define BCM84834_TOP_M2LV_ENABLEr_GET(r) (r).top_m2lv_enable[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_M2LV_ENABLEr_ENABLEf_GET(r) (((r).top_m2lv_enable[0]) & 0xffff)
#define BCM84834_TOP_M2LV_ENABLEr_ENABLEf_SET(r,f) (r).top_m2lv_enable[0]=(((r).top_m2lv_enable[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_M2LV_ENABLE.
 *
 */
#define BCM84834_READ_TOP_M2LV_ENABLEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_M2LV_ENABLEr,(_r._top_m2lv_enable))
#define BCM84834_WRITE_TOP_M2LV_ENABLEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_M2LV_ENABLEr,(_r._top_m2lv_enable))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_M2LV_ENABLEr BCM84834_TOP_M2LV_ENABLEr
#define TOP_M2LV_ENABLEr_SIZE BCM84834_TOP_M2LV_ENABLEr_SIZE
typedef BCM84834_TOP_M2LV_ENABLEr_t TOP_M2LV_ENABLEr_t;
#define TOP_M2LV_ENABLEr_CLR BCM84834_TOP_M2LV_ENABLEr_CLR
#define TOP_M2LV_ENABLEr_SET BCM84834_TOP_M2LV_ENABLEr_SET
#define TOP_M2LV_ENABLEr_GET BCM84834_TOP_M2LV_ENABLEr_GET
#define TOP_M2LV_ENABLEr_ENABLEf_GET BCM84834_TOP_M2LV_ENABLEr_ENABLEf_GET
#define TOP_M2LV_ENABLEr_ENABLEf_SET BCM84834_TOP_M2LV_ENABLEr_ENABLEf_SET
#define READ_TOP_M2LV_ENABLEr BCM84834_READ_TOP_M2LV_ENABLEr
#define WRITE_TOP_M2LV_ENABLEr BCM84834_WRITE_TOP_M2LV_ENABLEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_M2LV_ENABLEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_M2LV_RESET_ADR
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x4079
 * DEVAD:    30
 * DESC:     MDIO to Logic Vision Reset Control Register
 * SIZE:     32
 * FIELDS:
 *     RESET_XGPHY_CORE 
 *     RESET_1_N        
 *     RESET_2_N        
 *
 ******************************************************************************/
#define BCM84834_TOP_M2LV_RESET_ADRr (0x001e4079 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_M2LV_RESET_ADRr_SIZE 4

/*
 * This structure should be used to declare and program TOP_M2LV_RESET_ADR.
 *
 */
typedef union BCM84834_TOP_M2LV_RESET_ADRr_s {
	uint32_t v[1];
	uint32_t top_m2lv_reset_adr[1];
	uint32_t _top_m2lv_reset_adr;
} BCM84834_TOP_M2LV_RESET_ADRr_t;

#define BCM84834_TOP_M2LV_RESET_ADRr_CLR(r) (r).top_m2lv_reset_adr[0] = 0
#define BCM84834_TOP_M2LV_RESET_ADRr_SET(r,d) (r).top_m2lv_reset_adr[0] = d
#define BCM84834_TOP_M2LV_RESET_ADRr_GET(r) (r).top_m2lv_reset_adr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_2_Nf_GET(r) ((((r).top_m2lv_reset_adr[0]) >> 2) & 0x1)
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_2_Nf_SET(r,f) (r).top_m2lv_reset_adr[0]=(((r).top_m2lv_reset_adr[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_1_Nf_GET(r) ((((r).top_m2lv_reset_adr[0]) >> 1) & 0x1)
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_1_Nf_SET(r,f) (r).top_m2lv_reset_adr[0]=(((r).top_m2lv_reset_adr[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_GET(r) (((r).top_m2lv_reset_adr[0]) & 0x1)
#define BCM84834_TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_SET(r,f) (r).top_m2lv_reset_adr[0]=(((r).top_m2lv_reset_adr[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TOP_M2LV_RESET_ADR.
 *
 */
#define BCM84834_READ_TOP_M2LV_RESET_ADRr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_M2LV_RESET_ADRr,(_r._top_m2lv_reset_adr))
#define BCM84834_WRITE_TOP_M2LV_RESET_ADRr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_M2LV_RESET_ADRr,(_r._top_m2lv_reset_adr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_M2LV_RESET_ADRr BCM84834_TOP_M2LV_RESET_ADRr
#define TOP_M2LV_RESET_ADRr_SIZE BCM84834_TOP_M2LV_RESET_ADRr_SIZE
typedef BCM84834_TOP_M2LV_RESET_ADRr_t TOP_M2LV_RESET_ADRr_t;
#define TOP_M2LV_RESET_ADRr_CLR BCM84834_TOP_M2LV_RESET_ADRr_CLR
#define TOP_M2LV_RESET_ADRr_SET BCM84834_TOP_M2LV_RESET_ADRr_SET
#define TOP_M2LV_RESET_ADRr_GET BCM84834_TOP_M2LV_RESET_ADRr_GET
#define TOP_M2LV_RESET_ADRr_RESET_2_Nf_GET BCM84834_TOP_M2LV_RESET_ADRr_RESET_2_Nf_GET
#define TOP_M2LV_RESET_ADRr_RESET_2_Nf_SET BCM84834_TOP_M2LV_RESET_ADRr_RESET_2_Nf_SET
#define TOP_M2LV_RESET_ADRr_RESET_1_Nf_GET BCM84834_TOP_M2LV_RESET_ADRr_RESET_1_Nf_GET
#define TOP_M2LV_RESET_ADRr_RESET_1_Nf_SET BCM84834_TOP_M2LV_RESET_ADRr_RESET_1_Nf_SET
#define TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_GET BCM84834_TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_GET
#define TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_SET BCM84834_TOP_M2LV_RESET_ADRr_RESET_XGPHY_COREf_SET
#define READ_TOP_M2LV_RESET_ADRr BCM84834_READ_TOP_M2LV_RESET_ADRr
#define WRITE_TOP_M2LV_RESET_ADRr BCM84834_WRITE_TOP_M2LV_RESET_ADRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_M2LV_RESET_ADRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  TOP_M2LV_PORT
 * BLOCKS:   TOP_CONFIG
 * REGADDR:  0x407a
 * DEVAD:    30
 * DESC:     MDIO to Logic Vision BIST Active Data Port Register
 * SIZE:     32
 * FIELDS:
 *     PORT             
 *
 ******************************************************************************/
#define BCM84834_TOP_M2LV_PORTr (0x001e407a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_TOP_M2LV_PORTr_SIZE 4

/*
 * This structure should be used to declare and program TOP_M2LV_PORT.
 *
 */
typedef union BCM84834_TOP_M2LV_PORTr_s {
	uint32_t v[1];
	uint32_t top_m2lv_port[1];
	uint32_t _top_m2lv_port;
} BCM84834_TOP_M2LV_PORTr_t;

#define BCM84834_TOP_M2LV_PORTr_CLR(r) (r).top_m2lv_port[0] = 0
#define BCM84834_TOP_M2LV_PORTr_SET(r,d) (r).top_m2lv_port[0] = d
#define BCM84834_TOP_M2LV_PORTr_GET(r) (r).top_m2lv_port[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_TOP_M2LV_PORTr_PORTf_GET(r) (((r).top_m2lv_port[0]) & 0xffff)
#define BCM84834_TOP_M2LV_PORTr_PORTf_SET(r,f) (r).top_m2lv_port[0]=(((r).top_m2lv_port[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TOP_M2LV_PORT.
 *
 */
#define BCM84834_READ_TOP_M2LV_PORTr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_TOP_M2LV_PORTr,(_r._top_m2lv_port))
#define BCM84834_WRITE_TOP_M2LV_PORTr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_TOP_M2LV_PORTr,(_r._top_m2lv_port))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TOP_M2LV_PORTr BCM84834_TOP_M2LV_PORTr
#define TOP_M2LV_PORTr_SIZE BCM84834_TOP_M2LV_PORTr_SIZE
typedef BCM84834_TOP_M2LV_PORTr_t TOP_M2LV_PORTr_t;
#define TOP_M2LV_PORTr_CLR BCM84834_TOP_M2LV_PORTr_CLR
#define TOP_M2LV_PORTr_SET BCM84834_TOP_M2LV_PORTr_SET
#define TOP_M2LV_PORTr_GET BCM84834_TOP_M2LV_PORTr_GET
#define TOP_M2LV_PORTr_PORTf_GET BCM84834_TOP_M2LV_PORTr_PORTf_GET
#define TOP_M2LV_PORTr_PORTf_SET BCM84834_TOP_M2LV_PORTr_PORTf_SET
#define READ_TOP_M2LV_PORTr BCM84834_READ_TOP_M2LV_PORTr
#define WRITE_TOP_M2LV_PORTr BCM84834_WRITE_TOP_M2LV_PORTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_TOP_M2LV_PORTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_00
 * BLOCKS:   XGP
 * REGADDR:  0x4100
 * DEVAD:    30
 * DESC:     prtad/devad definition register 00
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_00r (0x001e4100 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_00r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_00.
 *
 */
typedef union BCM84834_XGP_PD_DEF_00r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_00[1];
	uint32_t _xgp_pd_def_00;
} BCM84834_XGP_PD_DEF_00r_t;

#define BCM84834_XGP_PD_DEF_00r_CLR(r) (r).xgp_pd_def_00[0] = 0
#define BCM84834_XGP_PD_DEF_00r_SET(r,d) (r).xgp_pd_def_00[0] = d
#define BCM84834_XGP_PD_DEF_00r_GET(r) (r).xgp_pd_def_00[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_00r_CLAUSEf_GET(r) ((((r).xgp_pd_def_00[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_00r_CLAUSEf_SET(r,f) (r).xgp_pd_def_00[0]=(((r).xgp_pd_def_00[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_00r_PRTADf_GET(r) ((((r).xgp_pd_def_00[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_00r_PRTADf_SET(r,f) (r).xgp_pd_def_00[0]=(((r).xgp_pd_def_00[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_00r_DEVADf_GET(r) (((r).xgp_pd_def_00[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_00r_DEVADf_SET(r,f) (r).xgp_pd_def_00[0]=(((r).xgp_pd_def_00[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_00.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_00r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_00r,(_r._xgp_pd_def_00))
#define BCM84834_WRITE_XGP_PD_DEF_00r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_00r,(_r._xgp_pd_def_00))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_00r BCM84834_XGP_PD_DEF_00r
#define XGP_PD_DEF_00r_SIZE BCM84834_XGP_PD_DEF_00r_SIZE
typedef BCM84834_XGP_PD_DEF_00r_t XGP_PD_DEF_00r_t;
#define XGP_PD_DEF_00r_CLR BCM84834_XGP_PD_DEF_00r_CLR
#define XGP_PD_DEF_00r_SET BCM84834_XGP_PD_DEF_00r_SET
#define XGP_PD_DEF_00r_GET BCM84834_XGP_PD_DEF_00r_GET
#define XGP_PD_DEF_00r_CLAUSEf_GET BCM84834_XGP_PD_DEF_00r_CLAUSEf_GET
#define XGP_PD_DEF_00r_CLAUSEf_SET BCM84834_XGP_PD_DEF_00r_CLAUSEf_SET
#define XGP_PD_DEF_00r_PRTADf_GET BCM84834_XGP_PD_DEF_00r_PRTADf_GET
#define XGP_PD_DEF_00r_PRTADf_SET BCM84834_XGP_PD_DEF_00r_PRTADf_SET
#define XGP_PD_DEF_00r_DEVADf_GET BCM84834_XGP_PD_DEF_00r_DEVADf_GET
#define XGP_PD_DEF_00r_DEVADf_SET BCM84834_XGP_PD_DEF_00r_DEVADf_SET
#define READ_XGP_PD_DEF_00r BCM84834_READ_XGP_PD_DEF_00r
#define WRITE_XGP_PD_DEF_00r BCM84834_WRITE_XGP_PD_DEF_00r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_00r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_01
 * BLOCKS:   XGP
 * REGADDR:  0x4101
 * DEVAD:    30
 * DESC:     prtad/devad definition register 01
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_01r (0x001e4101 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_01r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_01.
 *
 */
typedef union BCM84834_XGP_PD_DEF_01r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_01[1];
	uint32_t _xgp_pd_def_01;
} BCM84834_XGP_PD_DEF_01r_t;

#define BCM84834_XGP_PD_DEF_01r_CLR(r) (r).xgp_pd_def_01[0] = 0
#define BCM84834_XGP_PD_DEF_01r_SET(r,d) (r).xgp_pd_def_01[0] = d
#define BCM84834_XGP_PD_DEF_01r_GET(r) (r).xgp_pd_def_01[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_01r_CLAUSEf_GET(r) ((((r).xgp_pd_def_01[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_01r_CLAUSEf_SET(r,f) (r).xgp_pd_def_01[0]=(((r).xgp_pd_def_01[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_01r_PRTADf_GET(r) ((((r).xgp_pd_def_01[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_01r_PRTADf_SET(r,f) (r).xgp_pd_def_01[0]=(((r).xgp_pd_def_01[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_01r_DEVADf_GET(r) (((r).xgp_pd_def_01[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_01r_DEVADf_SET(r,f) (r).xgp_pd_def_01[0]=(((r).xgp_pd_def_01[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_01.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_01r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_01r,(_r._xgp_pd_def_01))
#define BCM84834_WRITE_XGP_PD_DEF_01r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_01r,(_r._xgp_pd_def_01))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_01r BCM84834_XGP_PD_DEF_01r
#define XGP_PD_DEF_01r_SIZE BCM84834_XGP_PD_DEF_01r_SIZE
typedef BCM84834_XGP_PD_DEF_01r_t XGP_PD_DEF_01r_t;
#define XGP_PD_DEF_01r_CLR BCM84834_XGP_PD_DEF_01r_CLR
#define XGP_PD_DEF_01r_SET BCM84834_XGP_PD_DEF_01r_SET
#define XGP_PD_DEF_01r_GET BCM84834_XGP_PD_DEF_01r_GET
#define XGP_PD_DEF_01r_CLAUSEf_GET BCM84834_XGP_PD_DEF_01r_CLAUSEf_GET
#define XGP_PD_DEF_01r_CLAUSEf_SET BCM84834_XGP_PD_DEF_01r_CLAUSEf_SET
#define XGP_PD_DEF_01r_PRTADf_GET BCM84834_XGP_PD_DEF_01r_PRTADf_GET
#define XGP_PD_DEF_01r_PRTADf_SET BCM84834_XGP_PD_DEF_01r_PRTADf_SET
#define XGP_PD_DEF_01r_DEVADf_GET BCM84834_XGP_PD_DEF_01r_DEVADf_GET
#define XGP_PD_DEF_01r_DEVADf_SET BCM84834_XGP_PD_DEF_01r_DEVADf_SET
#define READ_XGP_PD_DEF_01r BCM84834_READ_XGP_PD_DEF_01r
#define WRITE_XGP_PD_DEF_01r BCM84834_WRITE_XGP_PD_DEF_01r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_01r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_02
 * BLOCKS:   XGP
 * REGADDR:  0x4102
 * DEVAD:    30
 * DESC:     prtad/devad definition register 02
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_02r (0x001e4102 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_02r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_02.
 *
 */
typedef union BCM84834_XGP_PD_DEF_02r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_02[1];
	uint32_t _xgp_pd_def_02;
} BCM84834_XGP_PD_DEF_02r_t;

#define BCM84834_XGP_PD_DEF_02r_CLR(r) (r).xgp_pd_def_02[0] = 0
#define BCM84834_XGP_PD_DEF_02r_SET(r,d) (r).xgp_pd_def_02[0] = d
#define BCM84834_XGP_PD_DEF_02r_GET(r) (r).xgp_pd_def_02[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_02r_CLAUSEf_GET(r) ((((r).xgp_pd_def_02[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_02r_CLAUSEf_SET(r,f) (r).xgp_pd_def_02[0]=(((r).xgp_pd_def_02[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_02r_PRTADf_GET(r) ((((r).xgp_pd_def_02[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_02r_PRTADf_SET(r,f) (r).xgp_pd_def_02[0]=(((r).xgp_pd_def_02[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_02r_DEVADf_GET(r) (((r).xgp_pd_def_02[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_02r_DEVADf_SET(r,f) (r).xgp_pd_def_02[0]=(((r).xgp_pd_def_02[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_02.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_02r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_02r,(_r._xgp_pd_def_02))
#define BCM84834_WRITE_XGP_PD_DEF_02r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_02r,(_r._xgp_pd_def_02))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_02r BCM84834_XGP_PD_DEF_02r
#define XGP_PD_DEF_02r_SIZE BCM84834_XGP_PD_DEF_02r_SIZE
typedef BCM84834_XGP_PD_DEF_02r_t XGP_PD_DEF_02r_t;
#define XGP_PD_DEF_02r_CLR BCM84834_XGP_PD_DEF_02r_CLR
#define XGP_PD_DEF_02r_SET BCM84834_XGP_PD_DEF_02r_SET
#define XGP_PD_DEF_02r_GET BCM84834_XGP_PD_DEF_02r_GET
#define XGP_PD_DEF_02r_CLAUSEf_GET BCM84834_XGP_PD_DEF_02r_CLAUSEf_GET
#define XGP_PD_DEF_02r_CLAUSEf_SET BCM84834_XGP_PD_DEF_02r_CLAUSEf_SET
#define XGP_PD_DEF_02r_PRTADf_GET BCM84834_XGP_PD_DEF_02r_PRTADf_GET
#define XGP_PD_DEF_02r_PRTADf_SET BCM84834_XGP_PD_DEF_02r_PRTADf_SET
#define XGP_PD_DEF_02r_DEVADf_GET BCM84834_XGP_PD_DEF_02r_DEVADf_GET
#define XGP_PD_DEF_02r_DEVADf_SET BCM84834_XGP_PD_DEF_02r_DEVADf_SET
#define READ_XGP_PD_DEF_02r BCM84834_READ_XGP_PD_DEF_02r
#define WRITE_XGP_PD_DEF_02r BCM84834_WRITE_XGP_PD_DEF_02r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_02r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_03
 * BLOCKS:   XGP
 * REGADDR:  0x4103
 * DEVAD:    30
 * DESC:     prtad/devad definition register 03
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_03r (0x001e4103 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_03r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_03.
 *
 */
typedef union BCM84834_XGP_PD_DEF_03r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_03[1];
	uint32_t _xgp_pd_def_03;
} BCM84834_XGP_PD_DEF_03r_t;

#define BCM84834_XGP_PD_DEF_03r_CLR(r) (r).xgp_pd_def_03[0] = 0
#define BCM84834_XGP_PD_DEF_03r_SET(r,d) (r).xgp_pd_def_03[0] = d
#define BCM84834_XGP_PD_DEF_03r_GET(r) (r).xgp_pd_def_03[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_03r_CLAUSEf_GET(r) ((((r).xgp_pd_def_03[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_03r_CLAUSEf_SET(r,f) (r).xgp_pd_def_03[0]=(((r).xgp_pd_def_03[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_03r_PRTADf_GET(r) ((((r).xgp_pd_def_03[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_03r_PRTADf_SET(r,f) (r).xgp_pd_def_03[0]=(((r).xgp_pd_def_03[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_03r_DEVADf_GET(r) (((r).xgp_pd_def_03[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_03r_DEVADf_SET(r,f) (r).xgp_pd_def_03[0]=(((r).xgp_pd_def_03[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_03.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_03r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_03r,(_r._xgp_pd_def_03))
#define BCM84834_WRITE_XGP_PD_DEF_03r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_03r,(_r._xgp_pd_def_03))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_03r BCM84834_XGP_PD_DEF_03r
#define XGP_PD_DEF_03r_SIZE BCM84834_XGP_PD_DEF_03r_SIZE
typedef BCM84834_XGP_PD_DEF_03r_t XGP_PD_DEF_03r_t;
#define XGP_PD_DEF_03r_CLR BCM84834_XGP_PD_DEF_03r_CLR
#define XGP_PD_DEF_03r_SET BCM84834_XGP_PD_DEF_03r_SET
#define XGP_PD_DEF_03r_GET BCM84834_XGP_PD_DEF_03r_GET
#define XGP_PD_DEF_03r_CLAUSEf_GET BCM84834_XGP_PD_DEF_03r_CLAUSEf_GET
#define XGP_PD_DEF_03r_CLAUSEf_SET BCM84834_XGP_PD_DEF_03r_CLAUSEf_SET
#define XGP_PD_DEF_03r_PRTADf_GET BCM84834_XGP_PD_DEF_03r_PRTADf_GET
#define XGP_PD_DEF_03r_PRTADf_SET BCM84834_XGP_PD_DEF_03r_PRTADf_SET
#define XGP_PD_DEF_03r_DEVADf_GET BCM84834_XGP_PD_DEF_03r_DEVADf_GET
#define XGP_PD_DEF_03r_DEVADf_SET BCM84834_XGP_PD_DEF_03r_DEVADf_SET
#define READ_XGP_PD_DEF_03r BCM84834_READ_XGP_PD_DEF_03r
#define WRITE_XGP_PD_DEF_03r BCM84834_WRITE_XGP_PD_DEF_03r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_03r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_04
 * BLOCKS:   XGP
 * REGADDR:  0x4104
 * DEVAD:    30
 * DESC:     prtad/devad definition register 04
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_04r (0x001e4104 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_04r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_04.
 *
 */
typedef union BCM84834_XGP_PD_DEF_04r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_04[1];
	uint32_t _xgp_pd_def_04;
} BCM84834_XGP_PD_DEF_04r_t;

#define BCM84834_XGP_PD_DEF_04r_CLR(r) (r).xgp_pd_def_04[0] = 0
#define BCM84834_XGP_PD_DEF_04r_SET(r,d) (r).xgp_pd_def_04[0] = d
#define BCM84834_XGP_PD_DEF_04r_GET(r) (r).xgp_pd_def_04[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_04r_CLAUSEf_GET(r) ((((r).xgp_pd_def_04[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_04r_CLAUSEf_SET(r,f) (r).xgp_pd_def_04[0]=(((r).xgp_pd_def_04[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_04r_PRTADf_GET(r) ((((r).xgp_pd_def_04[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_04r_PRTADf_SET(r,f) (r).xgp_pd_def_04[0]=(((r).xgp_pd_def_04[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_04r_DEVADf_GET(r) (((r).xgp_pd_def_04[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_04r_DEVADf_SET(r,f) (r).xgp_pd_def_04[0]=(((r).xgp_pd_def_04[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_04.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_04r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_04r,(_r._xgp_pd_def_04))
#define BCM84834_WRITE_XGP_PD_DEF_04r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_04r,(_r._xgp_pd_def_04))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_04r BCM84834_XGP_PD_DEF_04r
#define XGP_PD_DEF_04r_SIZE BCM84834_XGP_PD_DEF_04r_SIZE
typedef BCM84834_XGP_PD_DEF_04r_t XGP_PD_DEF_04r_t;
#define XGP_PD_DEF_04r_CLR BCM84834_XGP_PD_DEF_04r_CLR
#define XGP_PD_DEF_04r_SET BCM84834_XGP_PD_DEF_04r_SET
#define XGP_PD_DEF_04r_GET BCM84834_XGP_PD_DEF_04r_GET
#define XGP_PD_DEF_04r_CLAUSEf_GET BCM84834_XGP_PD_DEF_04r_CLAUSEf_GET
#define XGP_PD_DEF_04r_CLAUSEf_SET BCM84834_XGP_PD_DEF_04r_CLAUSEf_SET
#define XGP_PD_DEF_04r_PRTADf_GET BCM84834_XGP_PD_DEF_04r_PRTADf_GET
#define XGP_PD_DEF_04r_PRTADf_SET BCM84834_XGP_PD_DEF_04r_PRTADf_SET
#define XGP_PD_DEF_04r_DEVADf_GET BCM84834_XGP_PD_DEF_04r_DEVADf_GET
#define XGP_PD_DEF_04r_DEVADf_SET BCM84834_XGP_PD_DEF_04r_DEVADf_SET
#define READ_XGP_PD_DEF_04r BCM84834_READ_XGP_PD_DEF_04r
#define WRITE_XGP_PD_DEF_04r BCM84834_WRITE_XGP_PD_DEF_04r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_04r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_05
 * BLOCKS:   XGP
 * REGADDR:  0x4105
 * DEVAD:    30
 * DESC:     prtad/devad definition register 05
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_05r (0x001e4105 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_05r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_05.
 *
 */
typedef union BCM84834_XGP_PD_DEF_05r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_05[1];
	uint32_t _xgp_pd_def_05;
} BCM84834_XGP_PD_DEF_05r_t;

#define BCM84834_XGP_PD_DEF_05r_CLR(r) (r).xgp_pd_def_05[0] = 0
#define BCM84834_XGP_PD_DEF_05r_SET(r,d) (r).xgp_pd_def_05[0] = d
#define BCM84834_XGP_PD_DEF_05r_GET(r) (r).xgp_pd_def_05[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_05r_CLAUSEf_GET(r) ((((r).xgp_pd_def_05[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_05r_CLAUSEf_SET(r,f) (r).xgp_pd_def_05[0]=(((r).xgp_pd_def_05[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_05r_PRTADf_GET(r) ((((r).xgp_pd_def_05[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_05r_PRTADf_SET(r,f) (r).xgp_pd_def_05[0]=(((r).xgp_pd_def_05[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_05r_DEVADf_GET(r) (((r).xgp_pd_def_05[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_05r_DEVADf_SET(r,f) (r).xgp_pd_def_05[0]=(((r).xgp_pd_def_05[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_05.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_05r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_05r,(_r._xgp_pd_def_05))
#define BCM84834_WRITE_XGP_PD_DEF_05r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_05r,(_r._xgp_pd_def_05))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_05r BCM84834_XGP_PD_DEF_05r
#define XGP_PD_DEF_05r_SIZE BCM84834_XGP_PD_DEF_05r_SIZE
typedef BCM84834_XGP_PD_DEF_05r_t XGP_PD_DEF_05r_t;
#define XGP_PD_DEF_05r_CLR BCM84834_XGP_PD_DEF_05r_CLR
#define XGP_PD_DEF_05r_SET BCM84834_XGP_PD_DEF_05r_SET
#define XGP_PD_DEF_05r_GET BCM84834_XGP_PD_DEF_05r_GET
#define XGP_PD_DEF_05r_CLAUSEf_GET BCM84834_XGP_PD_DEF_05r_CLAUSEf_GET
#define XGP_PD_DEF_05r_CLAUSEf_SET BCM84834_XGP_PD_DEF_05r_CLAUSEf_SET
#define XGP_PD_DEF_05r_PRTADf_GET BCM84834_XGP_PD_DEF_05r_PRTADf_GET
#define XGP_PD_DEF_05r_PRTADf_SET BCM84834_XGP_PD_DEF_05r_PRTADf_SET
#define XGP_PD_DEF_05r_DEVADf_GET BCM84834_XGP_PD_DEF_05r_DEVADf_GET
#define XGP_PD_DEF_05r_DEVADf_SET BCM84834_XGP_PD_DEF_05r_DEVADf_SET
#define READ_XGP_PD_DEF_05r BCM84834_READ_XGP_PD_DEF_05r
#define WRITE_XGP_PD_DEF_05r BCM84834_WRITE_XGP_PD_DEF_05r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_05r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_06
 * BLOCKS:   XGP
 * REGADDR:  0x4106
 * DEVAD:    30
 * DESC:     prtad/devad definition register 06
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_06r (0x001e4106 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_06r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_06.
 *
 */
typedef union BCM84834_XGP_PD_DEF_06r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_06[1];
	uint32_t _xgp_pd_def_06;
} BCM84834_XGP_PD_DEF_06r_t;

#define BCM84834_XGP_PD_DEF_06r_CLR(r) (r).xgp_pd_def_06[0] = 0
#define BCM84834_XGP_PD_DEF_06r_SET(r,d) (r).xgp_pd_def_06[0] = d
#define BCM84834_XGP_PD_DEF_06r_GET(r) (r).xgp_pd_def_06[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_06r_CLAUSEf_GET(r) ((((r).xgp_pd_def_06[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_06r_CLAUSEf_SET(r,f) (r).xgp_pd_def_06[0]=(((r).xgp_pd_def_06[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_06r_PRTADf_GET(r) ((((r).xgp_pd_def_06[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_06r_PRTADf_SET(r,f) (r).xgp_pd_def_06[0]=(((r).xgp_pd_def_06[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_06r_DEVADf_GET(r) (((r).xgp_pd_def_06[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_06r_DEVADf_SET(r,f) (r).xgp_pd_def_06[0]=(((r).xgp_pd_def_06[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_06.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_06r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_06r,(_r._xgp_pd_def_06))
#define BCM84834_WRITE_XGP_PD_DEF_06r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_06r,(_r._xgp_pd_def_06))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_06r BCM84834_XGP_PD_DEF_06r
#define XGP_PD_DEF_06r_SIZE BCM84834_XGP_PD_DEF_06r_SIZE
typedef BCM84834_XGP_PD_DEF_06r_t XGP_PD_DEF_06r_t;
#define XGP_PD_DEF_06r_CLR BCM84834_XGP_PD_DEF_06r_CLR
#define XGP_PD_DEF_06r_SET BCM84834_XGP_PD_DEF_06r_SET
#define XGP_PD_DEF_06r_GET BCM84834_XGP_PD_DEF_06r_GET
#define XGP_PD_DEF_06r_CLAUSEf_GET BCM84834_XGP_PD_DEF_06r_CLAUSEf_GET
#define XGP_PD_DEF_06r_CLAUSEf_SET BCM84834_XGP_PD_DEF_06r_CLAUSEf_SET
#define XGP_PD_DEF_06r_PRTADf_GET BCM84834_XGP_PD_DEF_06r_PRTADf_GET
#define XGP_PD_DEF_06r_PRTADf_SET BCM84834_XGP_PD_DEF_06r_PRTADf_SET
#define XGP_PD_DEF_06r_DEVADf_GET BCM84834_XGP_PD_DEF_06r_DEVADf_GET
#define XGP_PD_DEF_06r_DEVADf_SET BCM84834_XGP_PD_DEF_06r_DEVADf_SET
#define READ_XGP_PD_DEF_06r BCM84834_READ_XGP_PD_DEF_06r
#define WRITE_XGP_PD_DEF_06r BCM84834_WRITE_XGP_PD_DEF_06r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_06r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_07
 * BLOCKS:   XGP
 * REGADDR:  0x4107
 * DEVAD:    30
 * DESC:     prtad/devad definition register 07
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_07r (0x001e4107 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_07r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_07.
 *
 */
typedef union BCM84834_XGP_PD_DEF_07r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_07[1];
	uint32_t _xgp_pd_def_07;
} BCM84834_XGP_PD_DEF_07r_t;

#define BCM84834_XGP_PD_DEF_07r_CLR(r) (r).xgp_pd_def_07[0] = 0
#define BCM84834_XGP_PD_DEF_07r_SET(r,d) (r).xgp_pd_def_07[0] = d
#define BCM84834_XGP_PD_DEF_07r_GET(r) (r).xgp_pd_def_07[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_07r_CLAUSEf_GET(r) ((((r).xgp_pd_def_07[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_07r_CLAUSEf_SET(r,f) (r).xgp_pd_def_07[0]=(((r).xgp_pd_def_07[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_07r_PRTADf_GET(r) ((((r).xgp_pd_def_07[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_07r_PRTADf_SET(r,f) (r).xgp_pd_def_07[0]=(((r).xgp_pd_def_07[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_07r_DEVADf_GET(r) (((r).xgp_pd_def_07[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_07r_DEVADf_SET(r,f) (r).xgp_pd_def_07[0]=(((r).xgp_pd_def_07[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_07.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_07r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_07r,(_r._xgp_pd_def_07))
#define BCM84834_WRITE_XGP_PD_DEF_07r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_07r,(_r._xgp_pd_def_07))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_07r BCM84834_XGP_PD_DEF_07r
#define XGP_PD_DEF_07r_SIZE BCM84834_XGP_PD_DEF_07r_SIZE
typedef BCM84834_XGP_PD_DEF_07r_t XGP_PD_DEF_07r_t;
#define XGP_PD_DEF_07r_CLR BCM84834_XGP_PD_DEF_07r_CLR
#define XGP_PD_DEF_07r_SET BCM84834_XGP_PD_DEF_07r_SET
#define XGP_PD_DEF_07r_GET BCM84834_XGP_PD_DEF_07r_GET
#define XGP_PD_DEF_07r_CLAUSEf_GET BCM84834_XGP_PD_DEF_07r_CLAUSEf_GET
#define XGP_PD_DEF_07r_CLAUSEf_SET BCM84834_XGP_PD_DEF_07r_CLAUSEf_SET
#define XGP_PD_DEF_07r_PRTADf_GET BCM84834_XGP_PD_DEF_07r_PRTADf_GET
#define XGP_PD_DEF_07r_PRTADf_SET BCM84834_XGP_PD_DEF_07r_PRTADf_SET
#define XGP_PD_DEF_07r_DEVADf_GET BCM84834_XGP_PD_DEF_07r_DEVADf_GET
#define XGP_PD_DEF_07r_DEVADf_SET BCM84834_XGP_PD_DEF_07r_DEVADf_SET
#define READ_XGP_PD_DEF_07r BCM84834_READ_XGP_PD_DEF_07r
#define WRITE_XGP_PD_DEF_07r BCM84834_WRITE_XGP_PD_DEF_07r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_07r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_08
 * BLOCKS:   XGP
 * REGADDR:  0x4108
 * DEVAD:    30
 * DESC:     prtad/devad definition register 08
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_08r (0x001e4108 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_08r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_08.
 *
 */
typedef union BCM84834_XGP_PD_DEF_08r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_08[1];
	uint32_t _xgp_pd_def_08;
} BCM84834_XGP_PD_DEF_08r_t;

#define BCM84834_XGP_PD_DEF_08r_CLR(r) (r).xgp_pd_def_08[0] = 0
#define BCM84834_XGP_PD_DEF_08r_SET(r,d) (r).xgp_pd_def_08[0] = d
#define BCM84834_XGP_PD_DEF_08r_GET(r) (r).xgp_pd_def_08[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_08r_CLAUSEf_GET(r) ((((r).xgp_pd_def_08[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_08r_CLAUSEf_SET(r,f) (r).xgp_pd_def_08[0]=(((r).xgp_pd_def_08[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_08r_PRTADf_GET(r) ((((r).xgp_pd_def_08[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_08r_PRTADf_SET(r,f) (r).xgp_pd_def_08[0]=(((r).xgp_pd_def_08[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_08r_DEVADf_GET(r) (((r).xgp_pd_def_08[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_08r_DEVADf_SET(r,f) (r).xgp_pd_def_08[0]=(((r).xgp_pd_def_08[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_08.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_08r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_08r,(_r._xgp_pd_def_08))
#define BCM84834_WRITE_XGP_PD_DEF_08r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_08r,(_r._xgp_pd_def_08))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_08r BCM84834_XGP_PD_DEF_08r
#define XGP_PD_DEF_08r_SIZE BCM84834_XGP_PD_DEF_08r_SIZE
typedef BCM84834_XGP_PD_DEF_08r_t XGP_PD_DEF_08r_t;
#define XGP_PD_DEF_08r_CLR BCM84834_XGP_PD_DEF_08r_CLR
#define XGP_PD_DEF_08r_SET BCM84834_XGP_PD_DEF_08r_SET
#define XGP_PD_DEF_08r_GET BCM84834_XGP_PD_DEF_08r_GET
#define XGP_PD_DEF_08r_CLAUSEf_GET BCM84834_XGP_PD_DEF_08r_CLAUSEf_GET
#define XGP_PD_DEF_08r_CLAUSEf_SET BCM84834_XGP_PD_DEF_08r_CLAUSEf_SET
#define XGP_PD_DEF_08r_PRTADf_GET BCM84834_XGP_PD_DEF_08r_PRTADf_GET
#define XGP_PD_DEF_08r_PRTADf_SET BCM84834_XGP_PD_DEF_08r_PRTADf_SET
#define XGP_PD_DEF_08r_DEVADf_GET BCM84834_XGP_PD_DEF_08r_DEVADf_GET
#define XGP_PD_DEF_08r_DEVADf_SET BCM84834_XGP_PD_DEF_08r_DEVADf_SET
#define READ_XGP_PD_DEF_08r BCM84834_READ_XGP_PD_DEF_08r
#define WRITE_XGP_PD_DEF_08r BCM84834_WRITE_XGP_PD_DEF_08r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_08r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_09
 * BLOCKS:   XGP
 * REGADDR:  0x4109
 * DEVAD:    30
 * DESC:     prtad/devad definition register 09
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_09r (0x001e4109 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_09r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_09.
 *
 */
typedef union BCM84834_XGP_PD_DEF_09r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_09[1];
	uint32_t _xgp_pd_def_09;
} BCM84834_XGP_PD_DEF_09r_t;

#define BCM84834_XGP_PD_DEF_09r_CLR(r) (r).xgp_pd_def_09[0] = 0
#define BCM84834_XGP_PD_DEF_09r_SET(r,d) (r).xgp_pd_def_09[0] = d
#define BCM84834_XGP_PD_DEF_09r_GET(r) (r).xgp_pd_def_09[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_09r_CLAUSEf_GET(r) ((((r).xgp_pd_def_09[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_09r_CLAUSEf_SET(r,f) (r).xgp_pd_def_09[0]=(((r).xgp_pd_def_09[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_09r_PRTADf_GET(r) ((((r).xgp_pd_def_09[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_09r_PRTADf_SET(r,f) (r).xgp_pd_def_09[0]=(((r).xgp_pd_def_09[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_09r_DEVADf_GET(r) (((r).xgp_pd_def_09[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_09r_DEVADf_SET(r,f) (r).xgp_pd_def_09[0]=(((r).xgp_pd_def_09[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_09.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_09r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_09r,(_r._xgp_pd_def_09))
#define BCM84834_WRITE_XGP_PD_DEF_09r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_09r,(_r._xgp_pd_def_09))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_09r BCM84834_XGP_PD_DEF_09r
#define XGP_PD_DEF_09r_SIZE BCM84834_XGP_PD_DEF_09r_SIZE
typedef BCM84834_XGP_PD_DEF_09r_t XGP_PD_DEF_09r_t;
#define XGP_PD_DEF_09r_CLR BCM84834_XGP_PD_DEF_09r_CLR
#define XGP_PD_DEF_09r_SET BCM84834_XGP_PD_DEF_09r_SET
#define XGP_PD_DEF_09r_GET BCM84834_XGP_PD_DEF_09r_GET
#define XGP_PD_DEF_09r_CLAUSEf_GET BCM84834_XGP_PD_DEF_09r_CLAUSEf_GET
#define XGP_PD_DEF_09r_CLAUSEf_SET BCM84834_XGP_PD_DEF_09r_CLAUSEf_SET
#define XGP_PD_DEF_09r_PRTADf_GET BCM84834_XGP_PD_DEF_09r_PRTADf_GET
#define XGP_PD_DEF_09r_PRTADf_SET BCM84834_XGP_PD_DEF_09r_PRTADf_SET
#define XGP_PD_DEF_09r_DEVADf_GET BCM84834_XGP_PD_DEF_09r_DEVADf_GET
#define XGP_PD_DEF_09r_DEVADf_SET BCM84834_XGP_PD_DEF_09r_DEVADf_SET
#define READ_XGP_PD_DEF_09r BCM84834_READ_XGP_PD_DEF_09r
#define WRITE_XGP_PD_DEF_09r BCM84834_WRITE_XGP_PD_DEF_09r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_09r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_10
 * BLOCKS:   XGP
 * REGADDR:  0x410a
 * DEVAD:    30
 * DESC:     prtad/devad definition register 10
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_10r (0x001e410a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_10r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_10.
 *
 */
typedef union BCM84834_XGP_PD_DEF_10r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_10[1];
	uint32_t _xgp_pd_def_10;
} BCM84834_XGP_PD_DEF_10r_t;

#define BCM84834_XGP_PD_DEF_10r_CLR(r) (r).xgp_pd_def_10[0] = 0
#define BCM84834_XGP_PD_DEF_10r_SET(r,d) (r).xgp_pd_def_10[0] = d
#define BCM84834_XGP_PD_DEF_10r_GET(r) (r).xgp_pd_def_10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_10r_CLAUSEf_GET(r) ((((r).xgp_pd_def_10[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_10r_CLAUSEf_SET(r,f) (r).xgp_pd_def_10[0]=(((r).xgp_pd_def_10[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_10r_PRTADf_GET(r) ((((r).xgp_pd_def_10[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_10r_PRTADf_SET(r,f) (r).xgp_pd_def_10[0]=(((r).xgp_pd_def_10[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_10r_DEVADf_GET(r) (((r).xgp_pd_def_10[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_10r_DEVADf_SET(r,f) (r).xgp_pd_def_10[0]=(((r).xgp_pd_def_10[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_10.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_10r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_10r,(_r._xgp_pd_def_10))
#define BCM84834_WRITE_XGP_PD_DEF_10r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_10r,(_r._xgp_pd_def_10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_10r BCM84834_XGP_PD_DEF_10r
#define XGP_PD_DEF_10r_SIZE BCM84834_XGP_PD_DEF_10r_SIZE
typedef BCM84834_XGP_PD_DEF_10r_t XGP_PD_DEF_10r_t;
#define XGP_PD_DEF_10r_CLR BCM84834_XGP_PD_DEF_10r_CLR
#define XGP_PD_DEF_10r_SET BCM84834_XGP_PD_DEF_10r_SET
#define XGP_PD_DEF_10r_GET BCM84834_XGP_PD_DEF_10r_GET
#define XGP_PD_DEF_10r_CLAUSEf_GET BCM84834_XGP_PD_DEF_10r_CLAUSEf_GET
#define XGP_PD_DEF_10r_CLAUSEf_SET BCM84834_XGP_PD_DEF_10r_CLAUSEf_SET
#define XGP_PD_DEF_10r_PRTADf_GET BCM84834_XGP_PD_DEF_10r_PRTADf_GET
#define XGP_PD_DEF_10r_PRTADf_SET BCM84834_XGP_PD_DEF_10r_PRTADf_SET
#define XGP_PD_DEF_10r_DEVADf_GET BCM84834_XGP_PD_DEF_10r_DEVADf_GET
#define XGP_PD_DEF_10r_DEVADf_SET BCM84834_XGP_PD_DEF_10r_DEVADf_SET
#define READ_XGP_PD_DEF_10r BCM84834_READ_XGP_PD_DEF_10r
#define WRITE_XGP_PD_DEF_10r BCM84834_WRITE_XGP_PD_DEF_10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_11
 * BLOCKS:   XGP
 * REGADDR:  0x410b
 * DEVAD:    30
 * DESC:     prtad/devad definition register 11
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_11r (0x001e410b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_11r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_11.
 *
 */
typedef union BCM84834_XGP_PD_DEF_11r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_11[1];
	uint32_t _xgp_pd_def_11;
} BCM84834_XGP_PD_DEF_11r_t;

#define BCM84834_XGP_PD_DEF_11r_CLR(r) (r).xgp_pd_def_11[0] = 0
#define BCM84834_XGP_PD_DEF_11r_SET(r,d) (r).xgp_pd_def_11[0] = d
#define BCM84834_XGP_PD_DEF_11r_GET(r) (r).xgp_pd_def_11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_11r_CLAUSEf_GET(r) ((((r).xgp_pd_def_11[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_11r_CLAUSEf_SET(r,f) (r).xgp_pd_def_11[0]=(((r).xgp_pd_def_11[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_11r_PRTADf_GET(r) ((((r).xgp_pd_def_11[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_11r_PRTADf_SET(r,f) (r).xgp_pd_def_11[0]=(((r).xgp_pd_def_11[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_11r_DEVADf_GET(r) (((r).xgp_pd_def_11[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_11r_DEVADf_SET(r,f) (r).xgp_pd_def_11[0]=(((r).xgp_pd_def_11[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_11.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_11r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_11r,(_r._xgp_pd_def_11))
#define BCM84834_WRITE_XGP_PD_DEF_11r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_11r,(_r._xgp_pd_def_11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_11r BCM84834_XGP_PD_DEF_11r
#define XGP_PD_DEF_11r_SIZE BCM84834_XGP_PD_DEF_11r_SIZE
typedef BCM84834_XGP_PD_DEF_11r_t XGP_PD_DEF_11r_t;
#define XGP_PD_DEF_11r_CLR BCM84834_XGP_PD_DEF_11r_CLR
#define XGP_PD_DEF_11r_SET BCM84834_XGP_PD_DEF_11r_SET
#define XGP_PD_DEF_11r_GET BCM84834_XGP_PD_DEF_11r_GET
#define XGP_PD_DEF_11r_CLAUSEf_GET BCM84834_XGP_PD_DEF_11r_CLAUSEf_GET
#define XGP_PD_DEF_11r_CLAUSEf_SET BCM84834_XGP_PD_DEF_11r_CLAUSEf_SET
#define XGP_PD_DEF_11r_PRTADf_GET BCM84834_XGP_PD_DEF_11r_PRTADf_GET
#define XGP_PD_DEF_11r_PRTADf_SET BCM84834_XGP_PD_DEF_11r_PRTADf_SET
#define XGP_PD_DEF_11r_DEVADf_GET BCM84834_XGP_PD_DEF_11r_DEVADf_GET
#define XGP_PD_DEF_11r_DEVADf_SET BCM84834_XGP_PD_DEF_11r_DEVADf_SET
#define READ_XGP_PD_DEF_11r BCM84834_READ_XGP_PD_DEF_11r
#define WRITE_XGP_PD_DEF_11r BCM84834_WRITE_XGP_PD_DEF_11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_12
 * BLOCKS:   XGP
 * REGADDR:  0x410c
 * DEVAD:    30
 * DESC:     prtad/devad definition register 12
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_12r (0x001e410c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_12r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_12.
 *
 */
typedef union BCM84834_XGP_PD_DEF_12r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_12[1];
	uint32_t _xgp_pd_def_12;
} BCM84834_XGP_PD_DEF_12r_t;

#define BCM84834_XGP_PD_DEF_12r_CLR(r) (r).xgp_pd_def_12[0] = 0
#define BCM84834_XGP_PD_DEF_12r_SET(r,d) (r).xgp_pd_def_12[0] = d
#define BCM84834_XGP_PD_DEF_12r_GET(r) (r).xgp_pd_def_12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_12r_CLAUSEf_GET(r) ((((r).xgp_pd_def_12[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_12r_CLAUSEf_SET(r,f) (r).xgp_pd_def_12[0]=(((r).xgp_pd_def_12[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_12r_PRTADf_GET(r) ((((r).xgp_pd_def_12[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_12r_PRTADf_SET(r,f) (r).xgp_pd_def_12[0]=(((r).xgp_pd_def_12[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_12r_DEVADf_GET(r) (((r).xgp_pd_def_12[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_12r_DEVADf_SET(r,f) (r).xgp_pd_def_12[0]=(((r).xgp_pd_def_12[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_12.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_12r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_12r,(_r._xgp_pd_def_12))
#define BCM84834_WRITE_XGP_PD_DEF_12r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_12r,(_r._xgp_pd_def_12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_12r BCM84834_XGP_PD_DEF_12r
#define XGP_PD_DEF_12r_SIZE BCM84834_XGP_PD_DEF_12r_SIZE
typedef BCM84834_XGP_PD_DEF_12r_t XGP_PD_DEF_12r_t;
#define XGP_PD_DEF_12r_CLR BCM84834_XGP_PD_DEF_12r_CLR
#define XGP_PD_DEF_12r_SET BCM84834_XGP_PD_DEF_12r_SET
#define XGP_PD_DEF_12r_GET BCM84834_XGP_PD_DEF_12r_GET
#define XGP_PD_DEF_12r_CLAUSEf_GET BCM84834_XGP_PD_DEF_12r_CLAUSEf_GET
#define XGP_PD_DEF_12r_CLAUSEf_SET BCM84834_XGP_PD_DEF_12r_CLAUSEf_SET
#define XGP_PD_DEF_12r_PRTADf_GET BCM84834_XGP_PD_DEF_12r_PRTADf_GET
#define XGP_PD_DEF_12r_PRTADf_SET BCM84834_XGP_PD_DEF_12r_PRTADf_SET
#define XGP_PD_DEF_12r_DEVADf_GET BCM84834_XGP_PD_DEF_12r_DEVADf_GET
#define XGP_PD_DEF_12r_DEVADf_SET BCM84834_XGP_PD_DEF_12r_DEVADf_SET
#define READ_XGP_PD_DEF_12r BCM84834_READ_XGP_PD_DEF_12r
#define WRITE_XGP_PD_DEF_12r BCM84834_WRITE_XGP_PD_DEF_12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_13
 * BLOCKS:   XGP
 * REGADDR:  0x410d
 * DEVAD:    30
 * DESC:     prtad/devad definition register 13
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_13r (0x001e410d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_13r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_13.
 *
 */
typedef union BCM84834_XGP_PD_DEF_13r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_13[1];
	uint32_t _xgp_pd_def_13;
} BCM84834_XGP_PD_DEF_13r_t;

#define BCM84834_XGP_PD_DEF_13r_CLR(r) (r).xgp_pd_def_13[0] = 0
#define BCM84834_XGP_PD_DEF_13r_SET(r,d) (r).xgp_pd_def_13[0] = d
#define BCM84834_XGP_PD_DEF_13r_GET(r) (r).xgp_pd_def_13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_13r_CLAUSEf_GET(r) ((((r).xgp_pd_def_13[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_13r_CLAUSEf_SET(r,f) (r).xgp_pd_def_13[0]=(((r).xgp_pd_def_13[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_13r_PRTADf_GET(r) ((((r).xgp_pd_def_13[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_13r_PRTADf_SET(r,f) (r).xgp_pd_def_13[0]=(((r).xgp_pd_def_13[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_13r_DEVADf_GET(r) (((r).xgp_pd_def_13[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_13r_DEVADf_SET(r,f) (r).xgp_pd_def_13[0]=(((r).xgp_pd_def_13[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_13.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_13r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_13r,(_r._xgp_pd_def_13))
#define BCM84834_WRITE_XGP_PD_DEF_13r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_13r,(_r._xgp_pd_def_13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_13r BCM84834_XGP_PD_DEF_13r
#define XGP_PD_DEF_13r_SIZE BCM84834_XGP_PD_DEF_13r_SIZE
typedef BCM84834_XGP_PD_DEF_13r_t XGP_PD_DEF_13r_t;
#define XGP_PD_DEF_13r_CLR BCM84834_XGP_PD_DEF_13r_CLR
#define XGP_PD_DEF_13r_SET BCM84834_XGP_PD_DEF_13r_SET
#define XGP_PD_DEF_13r_GET BCM84834_XGP_PD_DEF_13r_GET
#define XGP_PD_DEF_13r_CLAUSEf_GET BCM84834_XGP_PD_DEF_13r_CLAUSEf_GET
#define XGP_PD_DEF_13r_CLAUSEf_SET BCM84834_XGP_PD_DEF_13r_CLAUSEf_SET
#define XGP_PD_DEF_13r_PRTADf_GET BCM84834_XGP_PD_DEF_13r_PRTADf_GET
#define XGP_PD_DEF_13r_PRTADf_SET BCM84834_XGP_PD_DEF_13r_PRTADf_SET
#define XGP_PD_DEF_13r_DEVADf_GET BCM84834_XGP_PD_DEF_13r_DEVADf_GET
#define XGP_PD_DEF_13r_DEVADf_SET BCM84834_XGP_PD_DEF_13r_DEVADf_SET
#define READ_XGP_PD_DEF_13r BCM84834_READ_XGP_PD_DEF_13r
#define WRITE_XGP_PD_DEF_13r BCM84834_WRITE_XGP_PD_DEF_13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_14
 * BLOCKS:   XGP
 * REGADDR:  0x410e
 * DEVAD:    30
 * DESC:     prtad/devad definition register 14
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_14r (0x001e410e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_14r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_14.
 *
 */
typedef union BCM84834_XGP_PD_DEF_14r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_14[1];
	uint32_t _xgp_pd_def_14;
} BCM84834_XGP_PD_DEF_14r_t;

#define BCM84834_XGP_PD_DEF_14r_CLR(r) (r).xgp_pd_def_14[0] = 0
#define BCM84834_XGP_PD_DEF_14r_SET(r,d) (r).xgp_pd_def_14[0] = d
#define BCM84834_XGP_PD_DEF_14r_GET(r) (r).xgp_pd_def_14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_14r_CLAUSEf_GET(r) ((((r).xgp_pd_def_14[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_14r_CLAUSEf_SET(r,f) (r).xgp_pd_def_14[0]=(((r).xgp_pd_def_14[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_14r_PRTADf_GET(r) ((((r).xgp_pd_def_14[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_14r_PRTADf_SET(r,f) (r).xgp_pd_def_14[0]=(((r).xgp_pd_def_14[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_14r_DEVADf_GET(r) (((r).xgp_pd_def_14[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_14r_DEVADf_SET(r,f) (r).xgp_pd_def_14[0]=(((r).xgp_pd_def_14[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_14.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_14r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_14r,(_r._xgp_pd_def_14))
#define BCM84834_WRITE_XGP_PD_DEF_14r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_14r,(_r._xgp_pd_def_14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_14r BCM84834_XGP_PD_DEF_14r
#define XGP_PD_DEF_14r_SIZE BCM84834_XGP_PD_DEF_14r_SIZE
typedef BCM84834_XGP_PD_DEF_14r_t XGP_PD_DEF_14r_t;
#define XGP_PD_DEF_14r_CLR BCM84834_XGP_PD_DEF_14r_CLR
#define XGP_PD_DEF_14r_SET BCM84834_XGP_PD_DEF_14r_SET
#define XGP_PD_DEF_14r_GET BCM84834_XGP_PD_DEF_14r_GET
#define XGP_PD_DEF_14r_CLAUSEf_GET BCM84834_XGP_PD_DEF_14r_CLAUSEf_GET
#define XGP_PD_DEF_14r_CLAUSEf_SET BCM84834_XGP_PD_DEF_14r_CLAUSEf_SET
#define XGP_PD_DEF_14r_PRTADf_GET BCM84834_XGP_PD_DEF_14r_PRTADf_GET
#define XGP_PD_DEF_14r_PRTADf_SET BCM84834_XGP_PD_DEF_14r_PRTADf_SET
#define XGP_PD_DEF_14r_DEVADf_GET BCM84834_XGP_PD_DEF_14r_DEVADf_GET
#define XGP_PD_DEF_14r_DEVADf_SET BCM84834_XGP_PD_DEF_14r_DEVADf_SET
#define READ_XGP_PD_DEF_14r BCM84834_READ_XGP_PD_DEF_14r
#define WRITE_XGP_PD_DEF_14r BCM84834_WRITE_XGP_PD_DEF_14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_DEF_15
 * BLOCKS:   XGP
 * REGADDR:  0x410f
 * DEVAD:    30
 * DESC:     prtad/devad definition register 15
 * SIZE:     32
 * FIELDS:
 *     DEVAD            
 *     PRTAD            
 *     CLAUSE           
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_DEF_15r (0x001e410f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_DEF_15r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_DEF_15.
 *
 */
typedef union BCM84834_XGP_PD_DEF_15r_s {
	uint32_t v[1];
	uint32_t xgp_pd_def_15[1];
	uint32_t _xgp_pd_def_15;
} BCM84834_XGP_PD_DEF_15r_t;

#define BCM84834_XGP_PD_DEF_15r_CLR(r) (r).xgp_pd_def_15[0] = 0
#define BCM84834_XGP_PD_DEF_15r_SET(r,d) (r).xgp_pd_def_15[0] = d
#define BCM84834_XGP_PD_DEF_15r_GET(r) (r).xgp_pd_def_15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_DEF_15r_CLAUSEf_GET(r) ((((r).xgp_pd_def_15[0]) >> 10) & 0x3)
#define BCM84834_XGP_PD_DEF_15r_CLAUSEf_SET(r,f) (r).xgp_pd_def_15[0]=(((r).xgp_pd_def_15[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCM84834_XGP_PD_DEF_15r_PRTADf_GET(r) ((((r).xgp_pd_def_15[0]) >> 5) & 0x1f)
#define BCM84834_XGP_PD_DEF_15r_PRTADf_SET(r,f) (r).xgp_pd_def_15[0]=(((r).xgp_pd_def_15[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCM84834_XGP_PD_DEF_15r_DEVADf_GET(r) (((r).xgp_pd_def_15[0]) & 0x1f)
#define BCM84834_XGP_PD_DEF_15r_DEVADf_SET(r,f) (r).xgp_pd_def_15[0]=(((r).xgp_pd_def_15[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PD_DEF_15.
 *
 */
#define BCM84834_READ_XGP_PD_DEF_15r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_DEF_15r,(_r._xgp_pd_def_15))
#define BCM84834_WRITE_XGP_PD_DEF_15r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_DEF_15r,(_r._xgp_pd_def_15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_DEF_15r BCM84834_XGP_PD_DEF_15r
#define XGP_PD_DEF_15r_SIZE BCM84834_XGP_PD_DEF_15r_SIZE
typedef BCM84834_XGP_PD_DEF_15r_t XGP_PD_DEF_15r_t;
#define XGP_PD_DEF_15r_CLR BCM84834_XGP_PD_DEF_15r_CLR
#define XGP_PD_DEF_15r_SET BCM84834_XGP_PD_DEF_15r_SET
#define XGP_PD_DEF_15r_GET BCM84834_XGP_PD_DEF_15r_GET
#define XGP_PD_DEF_15r_CLAUSEf_GET BCM84834_XGP_PD_DEF_15r_CLAUSEf_GET
#define XGP_PD_DEF_15r_CLAUSEf_SET BCM84834_XGP_PD_DEF_15r_CLAUSEf_SET
#define XGP_PD_DEF_15r_PRTADf_GET BCM84834_XGP_PD_DEF_15r_PRTADf_GET
#define XGP_PD_DEF_15r_PRTADf_SET BCM84834_XGP_PD_DEF_15r_PRTADf_SET
#define XGP_PD_DEF_15r_DEVADf_GET BCM84834_XGP_PD_DEF_15r_DEVADf_GET
#define XGP_PD_DEF_15r_DEVADf_SET BCM84834_XGP_PD_DEF_15r_DEVADf_SET
#define READ_XGP_PD_DEF_15r BCM84834_READ_XGP_PD_DEF_15r
#define WRITE_XGP_PD_DEF_15r BCM84834_WRITE_XGP_PD_DEF_15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_DEF_15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_0
 * BLOCKS:   XGP
 * REGADDR:  0x4110
 * DEVAD:    30
 * DESC:     device read/write access definition register 00
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_0r (0x001e4110 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_0r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_0.
 *
 */
typedef union BCM84834_MDIO_CTRL_0r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_0[1];
	uint32_t _mdio_ctrl_0;
} BCM84834_MDIO_CTRL_0r_t;

#define BCM84834_MDIO_CTRL_0r_CLR(r) (r).mdio_ctrl_0[0] = 0
#define BCM84834_MDIO_CTRL_0r_SET(r,d) (r).mdio_ctrl_0[0] = d
#define BCM84834_MDIO_CTRL_0r_GET(r) (r).mdio_ctrl_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_0r_READ_DEVf_GET(r) ((((r).mdio_ctrl_0[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_0r_READ_DEVf_SET(r,f) (r).mdio_ctrl_0[0]=(((r).mdio_ctrl_0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_0r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_0[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_0r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_0[0]=(((r).mdio_ctrl_0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_0.
 *
 */
#define BCM84834_READ_MDIO_CTRL_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_0r,(_r._mdio_ctrl_0))
#define BCM84834_WRITE_MDIO_CTRL_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_0r,(_r._mdio_ctrl_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_0r BCM84834_MDIO_CTRL_0r
#define MDIO_CTRL_0r_SIZE BCM84834_MDIO_CTRL_0r_SIZE
typedef BCM84834_MDIO_CTRL_0r_t MDIO_CTRL_0r_t;
#define MDIO_CTRL_0r_CLR BCM84834_MDIO_CTRL_0r_CLR
#define MDIO_CTRL_0r_SET BCM84834_MDIO_CTRL_0r_SET
#define MDIO_CTRL_0r_GET BCM84834_MDIO_CTRL_0r_GET
#define MDIO_CTRL_0r_READ_DEVf_GET BCM84834_MDIO_CTRL_0r_READ_DEVf_GET
#define MDIO_CTRL_0r_READ_DEVf_SET BCM84834_MDIO_CTRL_0r_READ_DEVf_SET
#define MDIO_CTRL_0r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_0r_WRITE_DEVf_GET
#define MDIO_CTRL_0r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_0r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_0r BCM84834_READ_MDIO_CTRL_0r
#define WRITE_MDIO_CTRL_0r BCM84834_WRITE_MDIO_CTRL_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_1
 * BLOCKS:   XGP
 * REGADDR:  0x4111
 * DEVAD:    30
 * DESC:     device read/write access definition register 01
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_1r (0x001e4111 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_1r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_1.
 *
 */
typedef union BCM84834_MDIO_CTRL_1r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_1[1];
	uint32_t _mdio_ctrl_1;
} BCM84834_MDIO_CTRL_1r_t;

#define BCM84834_MDIO_CTRL_1r_CLR(r) (r).mdio_ctrl_1[0] = 0
#define BCM84834_MDIO_CTRL_1r_SET(r,d) (r).mdio_ctrl_1[0] = d
#define BCM84834_MDIO_CTRL_1r_GET(r) (r).mdio_ctrl_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_1r_READ_DEVf_GET(r) ((((r).mdio_ctrl_1[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_1r_READ_DEVf_SET(r,f) (r).mdio_ctrl_1[0]=(((r).mdio_ctrl_1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_1r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_1[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_1r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_1[0]=(((r).mdio_ctrl_1[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_1.
 *
 */
#define BCM84834_READ_MDIO_CTRL_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_1r,(_r._mdio_ctrl_1))
#define BCM84834_WRITE_MDIO_CTRL_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_1r,(_r._mdio_ctrl_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_1r BCM84834_MDIO_CTRL_1r
#define MDIO_CTRL_1r_SIZE BCM84834_MDIO_CTRL_1r_SIZE
typedef BCM84834_MDIO_CTRL_1r_t MDIO_CTRL_1r_t;
#define MDIO_CTRL_1r_CLR BCM84834_MDIO_CTRL_1r_CLR
#define MDIO_CTRL_1r_SET BCM84834_MDIO_CTRL_1r_SET
#define MDIO_CTRL_1r_GET BCM84834_MDIO_CTRL_1r_GET
#define MDIO_CTRL_1r_READ_DEVf_GET BCM84834_MDIO_CTRL_1r_READ_DEVf_GET
#define MDIO_CTRL_1r_READ_DEVf_SET BCM84834_MDIO_CTRL_1r_READ_DEVf_SET
#define MDIO_CTRL_1r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_1r_WRITE_DEVf_GET
#define MDIO_CTRL_1r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_1r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_1r BCM84834_READ_MDIO_CTRL_1r
#define WRITE_MDIO_CTRL_1r BCM84834_WRITE_MDIO_CTRL_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_2
 * BLOCKS:   XGP
 * REGADDR:  0x4112
 * DEVAD:    30
 * DESC:     device read/write access definition register 02
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_2r (0x001e4112 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_2r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_2.
 *
 */
typedef union BCM84834_MDIO_CTRL_2r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_2[1];
	uint32_t _mdio_ctrl_2;
} BCM84834_MDIO_CTRL_2r_t;

#define BCM84834_MDIO_CTRL_2r_CLR(r) (r).mdio_ctrl_2[0] = 0
#define BCM84834_MDIO_CTRL_2r_SET(r,d) (r).mdio_ctrl_2[0] = d
#define BCM84834_MDIO_CTRL_2r_GET(r) (r).mdio_ctrl_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_2r_READ_DEVf_GET(r) ((((r).mdio_ctrl_2[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_2r_READ_DEVf_SET(r,f) (r).mdio_ctrl_2[0]=(((r).mdio_ctrl_2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_2r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_2[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_2r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_2[0]=(((r).mdio_ctrl_2[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_2.
 *
 */
#define BCM84834_READ_MDIO_CTRL_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_2r,(_r._mdio_ctrl_2))
#define BCM84834_WRITE_MDIO_CTRL_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_2r,(_r._mdio_ctrl_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_2r BCM84834_MDIO_CTRL_2r
#define MDIO_CTRL_2r_SIZE BCM84834_MDIO_CTRL_2r_SIZE
typedef BCM84834_MDIO_CTRL_2r_t MDIO_CTRL_2r_t;
#define MDIO_CTRL_2r_CLR BCM84834_MDIO_CTRL_2r_CLR
#define MDIO_CTRL_2r_SET BCM84834_MDIO_CTRL_2r_SET
#define MDIO_CTRL_2r_GET BCM84834_MDIO_CTRL_2r_GET
#define MDIO_CTRL_2r_READ_DEVf_GET BCM84834_MDIO_CTRL_2r_READ_DEVf_GET
#define MDIO_CTRL_2r_READ_DEVf_SET BCM84834_MDIO_CTRL_2r_READ_DEVf_SET
#define MDIO_CTRL_2r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_2r_WRITE_DEVf_GET
#define MDIO_CTRL_2r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_2r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_2r BCM84834_READ_MDIO_CTRL_2r
#define WRITE_MDIO_CTRL_2r BCM84834_WRITE_MDIO_CTRL_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_3
 * BLOCKS:   XGP
 * REGADDR:  0x4113
 * DEVAD:    30
 * DESC:     device read/write access definition register 03
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_3r (0x001e4113 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_3r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_3.
 *
 */
typedef union BCM84834_MDIO_CTRL_3r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_3[1];
	uint32_t _mdio_ctrl_3;
} BCM84834_MDIO_CTRL_3r_t;

#define BCM84834_MDIO_CTRL_3r_CLR(r) (r).mdio_ctrl_3[0] = 0
#define BCM84834_MDIO_CTRL_3r_SET(r,d) (r).mdio_ctrl_3[0] = d
#define BCM84834_MDIO_CTRL_3r_GET(r) (r).mdio_ctrl_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_3r_READ_DEVf_GET(r) ((((r).mdio_ctrl_3[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_3r_READ_DEVf_SET(r,f) (r).mdio_ctrl_3[0]=(((r).mdio_ctrl_3[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_3r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_3[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_3r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_3[0]=(((r).mdio_ctrl_3[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_3.
 *
 */
#define BCM84834_READ_MDIO_CTRL_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_3r,(_r._mdio_ctrl_3))
#define BCM84834_WRITE_MDIO_CTRL_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_3r,(_r._mdio_ctrl_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_3r BCM84834_MDIO_CTRL_3r
#define MDIO_CTRL_3r_SIZE BCM84834_MDIO_CTRL_3r_SIZE
typedef BCM84834_MDIO_CTRL_3r_t MDIO_CTRL_3r_t;
#define MDIO_CTRL_3r_CLR BCM84834_MDIO_CTRL_3r_CLR
#define MDIO_CTRL_3r_SET BCM84834_MDIO_CTRL_3r_SET
#define MDIO_CTRL_3r_GET BCM84834_MDIO_CTRL_3r_GET
#define MDIO_CTRL_3r_READ_DEVf_GET BCM84834_MDIO_CTRL_3r_READ_DEVf_GET
#define MDIO_CTRL_3r_READ_DEVf_SET BCM84834_MDIO_CTRL_3r_READ_DEVf_SET
#define MDIO_CTRL_3r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_3r_WRITE_DEVf_GET
#define MDIO_CTRL_3r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_3r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_3r BCM84834_READ_MDIO_CTRL_3r
#define WRITE_MDIO_CTRL_3r BCM84834_WRITE_MDIO_CTRL_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_4
 * BLOCKS:   XGP
 * REGADDR:  0x4114
 * DEVAD:    30
 * DESC:     device read/write access definition register 04
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_4r (0x001e4114 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_4r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_4.
 *
 */
typedef union BCM84834_MDIO_CTRL_4r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_4[1];
	uint32_t _mdio_ctrl_4;
} BCM84834_MDIO_CTRL_4r_t;

#define BCM84834_MDIO_CTRL_4r_CLR(r) (r).mdio_ctrl_4[0] = 0
#define BCM84834_MDIO_CTRL_4r_SET(r,d) (r).mdio_ctrl_4[0] = d
#define BCM84834_MDIO_CTRL_4r_GET(r) (r).mdio_ctrl_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_4r_READ_DEVf_GET(r) ((((r).mdio_ctrl_4[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_4r_READ_DEVf_SET(r,f) (r).mdio_ctrl_4[0]=(((r).mdio_ctrl_4[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_4r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_4[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_4r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_4[0]=(((r).mdio_ctrl_4[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_4.
 *
 */
#define BCM84834_READ_MDIO_CTRL_4r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_4r,(_r._mdio_ctrl_4))
#define BCM84834_WRITE_MDIO_CTRL_4r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_4r,(_r._mdio_ctrl_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_4r BCM84834_MDIO_CTRL_4r
#define MDIO_CTRL_4r_SIZE BCM84834_MDIO_CTRL_4r_SIZE
typedef BCM84834_MDIO_CTRL_4r_t MDIO_CTRL_4r_t;
#define MDIO_CTRL_4r_CLR BCM84834_MDIO_CTRL_4r_CLR
#define MDIO_CTRL_4r_SET BCM84834_MDIO_CTRL_4r_SET
#define MDIO_CTRL_4r_GET BCM84834_MDIO_CTRL_4r_GET
#define MDIO_CTRL_4r_READ_DEVf_GET BCM84834_MDIO_CTRL_4r_READ_DEVf_GET
#define MDIO_CTRL_4r_READ_DEVf_SET BCM84834_MDIO_CTRL_4r_READ_DEVf_SET
#define MDIO_CTRL_4r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_4r_WRITE_DEVf_GET
#define MDIO_CTRL_4r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_4r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_4r BCM84834_READ_MDIO_CTRL_4r
#define WRITE_MDIO_CTRL_4r BCM84834_WRITE_MDIO_CTRL_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  MDIO_CTRL_5
 * BLOCKS:   XGP
 * REGADDR:  0x4115
 * DEVAD:    30
 * DESC:     device read/write access definition register 05
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_MDIO_CTRL_5r (0x001e4115 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_MDIO_CTRL_5r_SIZE 4

/*
 * This structure should be used to declare and program MDIO_CTRL_5.
 *
 */
typedef union BCM84834_MDIO_CTRL_5r_s {
	uint32_t v[1];
	uint32_t mdio_ctrl_5[1];
	uint32_t _mdio_ctrl_5;
} BCM84834_MDIO_CTRL_5r_t;

#define BCM84834_MDIO_CTRL_5r_CLR(r) (r).mdio_ctrl_5[0] = 0
#define BCM84834_MDIO_CTRL_5r_SET(r,d) (r).mdio_ctrl_5[0] = d
#define BCM84834_MDIO_CTRL_5r_GET(r) (r).mdio_ctrl_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_MDIO_CTRL_5r_READ_DEVf_GET(r) ((((r).mdio_ctrl_5[0]) >> 12) & 0xf)
#define BCM84834_MDIO_CTRL_5r_READ_DEVf_SET(r,f) (r).mdio_ctrl_5[0]=(((r).mdio_ctrl_5[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_MDIO_CTRL_5r_WRITE_DEVf_GET(r) (((r).mdio_ctrl_5[0]) & 0x3f)
#define BCM84834_MDIO_CTRL_5r_WRITE_DEVf_SET(r,f) (r).mdio_ctrl_5[0]=(((r).mdio_ctrl_5[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access MDIO_CTRL_5.
 *
 */
#define BCM84834_READ_MDIO_CTRL_5r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_MDIO_CTRL_5r,(_r._mdio_ctrl_5))
#define BCM84834_WRITE_MDIO_CTRL_5r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_MDIO_CTRL_5r,(_r._mdio_ctrl_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MDIO_CTRL_5r BCM84834_MDIO_CTRL_5r
#define MDIO_CTRL_5r_SIZE BCM84834_MDIO_CTRL_5r_SIZE
typedef BCM84834_MDIO_CTRL_5r_t MDIO_CTRL_5r_t;
#define MDIO_CTRL_5r_CLR BCM84834_MDIO_CTRL_5r_CLR
#define MDIO_CTRL_5r_SET BCM84834_MDIO_CTRL_5r_SET
#define MDIO_CTRL_5r_GET BCM84834_MDIO_CTRL_5r_GET
#define MDIO_CTRL_5r_READ_DEVf_GET BCM84834_MDIO_CTRL_5r_READ_DEVf_GET
#define MDIO_CTRL_5r_READ_DEVf_SET BCM84834_MDIO_CTRL_5r_READ_DEVf_SET
#define MDIO_CTRL_5r_WRITE_DEVf_GET BCM84834_MDIO_CTRL_5r_WRITE_DEVf_GET
#define MDIO_CTRL_5r_WRITE_DEVf_SET BCM84834_MDIO_CTRL_5r_WRITE_DEVf_SET
#define READ_MDIO_CTRL_5r BCM84834_READ_MDIO_CTRL_5r
#define WRITE_MDIO_CTRL_5r BCM84834_WRITE_MDIO_CTRL_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_MDIO_CTRL_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_06
 * BLOCKS:   XGP
 * REGADDR:  0x4116
 * DEVAD:    30
 * DESC:     device read/write access definition register 06
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_06r (0x001e4116 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_06r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_06.
 *
 */
typedef union BCM84834_XGP_PD_RW_06r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_06[1];
	uint32_t _xgp_pd_rw_06;
} BCM84834_XGP_PD_RW_06r_t;

#define BCM84834_XGP_PD_RW_06r_CLR(r) (r).xgp_pd_rw_06[0] = 0
#define BCM84834_XGP_PD_RW_06r_SET(r,d) (r).xgp_pd_rw_06[0] = d
#define BCM84834_XGP_PD_RW_06r_GET(r) (r).xgp_pd_rw_06[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_06r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_06[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_06r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_06[0]=(((r).xgp_pd_rw_06[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_06r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_06[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_06r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_06[0]=(((r).xgp_pd_rw_06[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_06.
 *
 */
#define BCM84834_READ_XGP_PD_RW_06r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_06r,(_r._xgp_pd_rw_06))
#define BCM84834_WRITE_XGP_PD_RW_06r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_06r,(_r._xgp_pd_rw_06))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_06r BCM84834_XGP_PD_RW_06r
#define XGP_PD_RW_06r_SIZE BCM84834_XGP_PD_RW_06r_SIZE
typedef BCM84834_XGP_PD_RW_06r_t XGP_PD_RW_06r_t;
#define XGP_PD_RW_06r_CLR BCM84834_XGP_PD_RW_06r_CLR
#define XGP_PD_RW_06r_SET BCM84834_XGP_PD_RW_06r_SET
#define XGP_PD_RW_06r_GET BCM84834_XGP_PD_RW_06r_GET
#define XGP_PD_RW_06r_READ_DEVf_GET BCM84834_XGP_PD_RW_06r_READ_DEVf_GET
#define XGP_PD_RW_06r_READ_DEVf_SET BCM84834_XGP_PD_RW_06r_READ_DEVf_SET
#define XGP_PD_RW_06r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_06r_WRITE_DEVf_GET
#define XGP_PD_RW_06r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_06r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_06r BCM84834_READ_XGP_PD_RW_06r
#define WRITE_XGP_PD_RW_06r BCM84834_WRITE_XGP_PD_RW_06r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_06r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_07
 * BLOCKS:   XGP
 * REGADDR:  0x4117
 * DEVAD:    30
 * DESC:     device read/write access definition register 07
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_07r (0x001e4117 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_07r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_07.
 *
 */
typedef union BCM84834_XGP_PD_RW_07r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_07[1];
	uint32_t _xgp_pd_rw_07;
} BCM84834_XGP_PD_RW_07r_t;

#define BCM84834_XGP_PD_RW_07r_CLR(r) (r).xgp_pd_rw_07[0] = 0
#define BCM84834_XGP_PD_RW_07r_SET(r,d) (r).xgp_pd_rw_07[0] = d
#define BCM84834_XGP_PD_RW_07r_GET(r) (r).xgp_pd_rw_07[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_07r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_07[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_07r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_07[0]=(((r).xgp_pd_rw_07[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_07r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_07[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_07r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_07[0]=(((r).xgp_pd_rw_07[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_07.
 *
 */
#define BCM84834_READ_XGP_PD_RW_07r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_07r,(_r._xgp_pd_rw_07))
#define BCM84834_WRITE_XGP_PD_RW_07r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_07r,(_r._xgp_pd_rw_07))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_07r BCM84834_XGP_PD_RW_07r
#define XGP_PD_RW_07r_SIZE BCM84834_XGP_PD_RW_07r_SIZE
typedef BCM84834_XGP_PD_RW_07r_t XGP_PD_RW_07r_t;
#define XGP_PD_RW_07r_CLR BCM84834_XGP_PD_RW_07r_CLR
#define XGP_PD_RW_07r_SET BCM84834_XGP_PD_RW_07r_SET
#define XGP_PD_RW_07r_GET BCM84834_XGP_PD_RW_07r_GET
#define XGP_PD_RW_07r_READ_DEVf_GET BCM84834_XGP_PD_RW_07r_READ_DEVf_GET
#define XGP_PD_RW_07r_READ_DEVf_SET BCM84834_XGP_PD_RW_07r_READ_DEVf_SET
#define XGP_PD_RW_07r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_07r_WRITE_DEVf_GET
#define XGP_PD_RW_07r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_07r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_07r BCM84834_READ_XGP_PD_RW_07r
#define WRITE_XGP_PD_RW_07r BCM84834_WRITE_XGP_PD_RW_07r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_07r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_08
 * BLOCKS:   XGP
 * REGADDR:  0x4118
 * DEVAD:    30
 * DESC:     device read/write access definition register 08
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_08r (0x001e4118 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_08r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_08.
 *
 */
typedef union BCM84834_XGP_PD_RW_08r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_08[1];
	uint32_t _xgp_pd_rw_08;
} BCM84834_XGP_PD_RW_08r_t;

#define BCM84834_XGP_PD_RW_08r_CLR(r) (r).xgp_pd_rw_08[0] = 0
#define BCM84834_XGP_PD_RW_08r_SET(r,d) (r).xgp_pd_rw_08[0] = d
#define BCM84834_XGP_PD_RW_08r_GET(r) (r).xgp_pd_rw_08[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_08r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_08[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_08r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_08[0]=(((r).xgp_pd_rw_08[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_08r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_08[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_08r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_08[0]=(((r).xgp_pd_rw_08[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_08.
 *
 */
#define BCM84834_READ_XGP_PD_RW_08r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_08r,(_r._xgp_pd_rw_08))
#define BCM84834_WRITE_XGP_PD_RW_08r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_08r,(_r._xgp_pd_rw_08))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_08r BCM84834_XGP_PD_RW_08r
#define XGP_PD_RW_08r_SIZE BCM84834_XGP_PD_RW_08r_SIZE
typedef BCM84834_XGP_PD_RW_08r_t XGP_PD_RW_08r_t;
#define XGP_PD_RW_08r_CLR BCM84834_XGP_PD_RW_08r_CLR
#define XGP_PD_RW_08r_SET BCM84834_XGP_PD_RW_08r_SET
#define XGP_PD_RW_08r_GET BCM84834_XGP_PD_RW_08r_GET
#define XGP_PD_RW_08r_READ_DEVf_GET BCM84834_XGP_PD_RW_08r_READ_DEVf_GET
#define XGP_PD_RW_08r_READ_DEVf_SET BCM84834_XGP_PD_RW_08r_READ_DEVf_SET
#define XGP_PD_RW_08r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_08r_WRITE_DEVf_GET
#define XGP_PD_RW_08r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_08r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_08r BCM84834_READ_XGP_PD_RW_08r
#define WRITE_XGP_PD_RW_08r BCM84834_WRITE_XGP_PD_RW_08r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_08r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_09
 * BLOCKS:   XGP
 * REGADDR:  0x4119
 * DEVAD:    30
 * DESC:     device read/write access definition register 09
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_09r (0x001e4119 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_09r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_09.
 *
 */
typedef union BCM84834_XGP_PD_RW_09r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_09[1];
	uint32_t _xgp_pd_rw_09;
} BCM84834_XGP_PD_RW_09r_t;

#define BCM84834_XGP_PD_RW_09r_CLR(r) (r).xgp_pd_rw_09[0] = 0
#define BCM84834_XGP_PD_RW_09r_SET(r,d) (r).xgp_pd_rw_09[0] = d
#define BCM84834_XGP_PD_RW_09r_GET(r) (r).xgp_pd_rw_09[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_09r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_09[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_09r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_09[0]=(((r).xgp_pd_rw_09[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_09r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_09[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_09r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_09[0]=(((r).xgp_pd_rw_09[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_09.
 *
 */
#define BCM84834_READ_XGP_PD_RW_09r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_09r,(_r._xgp_pd_rw_09))
#define BCM84834_WRITE_XGP_PD_RW_09r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_09r,(_r._xgp_pd_rw_09))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_09r BCM84834_XGP_PD_RW_09r
#define XGP_PD_RW_09r_SIZE BCM84834_XGP_PD_RW_09r_SIZE
typedef BCM84834_XGP_PD_RW_09r_t XGP_PD_RW_09r_t;
#define XGP_PD_RW_09r_CLR BCM84834_XGP_PD_RW_09r_CLR
#define XGP_PD_RW_09r_SET BCM84834_XGP_PD_RW_09r_SET
#define XGP_PD_RW_09r_GET BCM84834_XGP_PD_RW_09r_GET
#define XGP_PD_RW_09r_READ_DEVf_GET BCM84834_XGP_PD_RW_09r_READ_DEVf_GET
#define XGP_PD_RW_09r_READ_DEVf_SET BCM84834_XGP_PD_RW_09r_READ_DEVf_SET
#define XGP_PD_RW_09r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_09r_WRITE_DEVf_GET
#define XGP_PD_RW_09r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_09r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_09r BCM84834_READ_XGP_PD_RW_09r
#define WRITE_XGP_PD_RW_09r BCM84834_WRITE_XGP_PD_RW_09r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_09r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_10
 * BLOCKS:   XGP
 * REGADDR:  0x411a
 * DEVAD:    30
 * DESC:     device read/write access definition register 10
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_10r (0x001e411a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_10r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_10.
 *
 */
typedef union BCM84834_XGP_PD_RW_10r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_10[1];
	uint32_t _xgp_pd_rw_10;
} BCM84834_XGP_PD_RW_10r_t;

#define BCM84834_XGP_PD_RW_10r_CLR(r) (r).xgp_pd_rw_10[0] = 0
#define BCM84834_XGP_PD_RW_10r_SET(r,d) (r).xgp_pd_rw_10[0] = d
#define BCM84834_XGP_PD_RW_10r_GET(r) (r).xgp_pd_rw_10[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_10r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_10[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_10r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_10[0]=(((r).xgp_pd_rw_10[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_10r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_10[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_10r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_10[0]=(((r).xgp_pd_rw_10[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_10.
 *
 */
#define BCM84834_READ_XGP_PD_RW_10r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_10r,(_r._xgp_pd_rw_10))
#define BCM84834_WRITE_XGP_PD_RW_10r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_10r,(_r._xgp_pd_rw_10))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_10r BCM84834_XGP_PD_RW_10r
#define XGP_PD_RW_10r_SIZE BCM84834_XGP_PD_RW_10r_SIZE
typedef BCM84834_XGP_PD_RW_10r_t XGP_PD_RW_10r_t;
#define XGP_PD_RW_10r_CLR BCM84834_XGP_PD_RW_10r_CLR
#define XGP_PD_RW_10r_SET BCM84834_XGP_PD_RW_10r_SET
#define XGP_PD_RW_10r_GET BCM84834_XGP_PD_RW_10r_GET
#define XGP_PD_RW_10r_READ_DEVf_GET BCM84834_XGP_PD_RW_10r_READ_DEVf_GET
#define XGP_PD_RW_10r_READ_DEVf_SET BCM84834_XGP_PD_RW_10r_READ_DEVf_SET
#define XGP_PD_RW_10r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_10r_WRITE_DEVf_GET
#define XGP_PD_RW_10r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_10r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_10r BCM84834_READ_XGP_PD_RW_10r
#define WRITE_XGP_PD_RW_10r BCM84834_WRITE_XGP_PD_RW_10r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_10r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_11
 * BLOCKS:   XGP
 * REGADDR:  0x411b
 * DEVAD:    30
 * DESC:     device read/write access definition register 11
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_11r (0x001e411b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_11r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_11.
 *
 */
typedef union BCM84834_XGP_PD_RW_11r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_11[1];
	uint32_t _xgp_pd_rw_11;
} BCM84834_XGP_PD_RW_11r_t;

#define BCM84834_XGP_PD_RW_11r_CLR(r) (r).xgp_pd_rw_11[0] = 0
#define BCM84834_XGP_PD_RW_11r_SET(r,d) (r).xgp_pd_rw_11[0] = d
#define BCM84834_XGP_PD_RW_11r_GET(r) (r).xgp_pd_rw_11[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_11r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_11[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_11r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_11[0]=(((r).xgp_pd_rw_11[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_11r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_11[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_11r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_11[0]=(((r).xgp_pd_rw_11[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_11.
 *
 */
#define BCM84834_READ_XGP_PD_RW_11r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_11r,(_r._xgp_pd_rw_11))
#define BCM84834_WRITE_XGP_PD_RW_11r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_11r,(_r._xgp_pd_rw_11))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_11r BCM84834_XGP_PD_RW_11r
#define XGP_PD_RW_11r_SIZE BCM84834_XGP_PD_RW_11r_SIZE
typedef BCM84834_XGP_PD_RW_11r_t XGP_PD_RW_11r_t;
#define XGP_PD_RW_11r_CLR BCM84834_XGP_PD_RW_11r_CLR
#define XGP_PD_RW_11r_SET BCM84834_XGP_PD_RW_11r_SET
#define XGP_PD_RW_11r_GET BCM84834_XGP_PD_RW_11r_GET
#define XGP_PD_RW_11r_READ_DEVf_GET BCM84834_XGP_PD_RW_11r_READ_DEVf_GET
#define XGP_PD_RW_11r_READ_DEVf_SET BCM84834_XGP_PD_RW_11r_READ_DEVf_SET
#define XGP_PD_RW_11r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_11r_WRITE_DEVf_GET
#define XGP_PD_RW_11r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_11r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_11r BCM84834_READ_XGP_PD_RW_11r
#define WRITE_XGP_PD_RW_11r BCM84834_WRITE_XGP_PD_RW_11r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_11r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_12
 * BLOCKS:   XGP
 * REGADDR:  0x411c
 * DEVAD:    30
 * DESC:     device read/write access definition register 12
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_12r (0x001e411c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_12r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_12.
 *
 */
typedef union BCM84834_XGP_PD_RW_12r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_12[1];
	uint32_t _xgp_pd_rw_12;
} BCM84834_XGP_PD_RW_12r_t;

#define BCM84834_XGP_PD_RW_12r_CLR(r) (r).xgp_pd_rw_12[0] = 0
#define BCM84834_XGP_PD_RW_12r_SET(r,d) (r).xgp_pd_rw_12[0] = d
#define BCM84834_XGP_PD_RW_12r_GET(r) (r).xgp_pd_rw_12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_12r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_12[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_12r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_12[0]=(((r).xgp_pd_rw_12[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_12r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_12[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_12r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_12[0]=(((r).xgp_pd_rw_12[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_12.
 *
 */
#define BCM84834_READ_XGP_PD_RW_12r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_12r,(_r._xgp_pd_rw_12))
#define BCM84834_WRITE_XGP_PD_RW_12r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_12r,(_r._xgp_pd_rw_12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_12r BCM84834_XGP_PD_RW_12r
#define XGP_PD_RW_12r_SIZE BCM84834_XGP_PD_RW_12r_SIZE
typedef BCM84834_XGP_PD_RW_12r_t XGP_PD_RW_12r_t;
#define XGP_PD_RW_12r_CLR BCM84834_XGP_PD_RW_12r_CLR
#define XGP_PD_RW_12r_SET BCM84834_XGP_PD_RW_12r_SET
#define XGP_PD_RW_12r_GET BCM84834_XGP_PD_RW_12r_GET
#define XGP_PD_RW_12r_READ_DEVf_GET BCM84834_XGP_PD_RW_12r_READ_DEVf_GET
#define XGP_PD_RW_12r_READ_DEVf_SET BCM84834_XGP_PD_RW_12r_READ_DEVf_SET
#define XGP_PD_RW_12r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_12r_WRITE_DEVf_GET
#define XGP_PD_RW_12r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_12r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_12r BCM84834_READ_XGP_PD_RW_12r
#define WRITE_XGP_PD_RW_12r BCM84834_WRITE_XGP_PD_RW_12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_13
 * BLOCKS:   XGP
 * REGADDR:  0x411d
 * DEVAD:    30
 * DESC:     device read/write access definition register 13
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_13r (0x001e411d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_13r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_13.
 *
 */
typedef union BCM84834_XGP_PD_RW_13r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_13[1];
	uint32_t _xgp_pd_rw_13;
} BCM84834_XGP_PD_RW_13r_t;

#define BCM84834_XGP_PD_RW_13r_CLR(r) (r).xgp_pd_rw_13[0] = 0
#define BCM84834_XGP_PD_RW_13r_SET(r,d) (r).xgp_pd_rw_13[0] = d
#define BCM84834_XGP_PD_RW_13r_GET(r) (r).xgp_pd_rw_13[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_13r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_13[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_13r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_13[0]=(((r).xgp_pd_rw_13[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_13r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_13[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_13r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_13[0]=(((r).xgp_pd_rw_13[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_13.
 *
 */
#define BCM84834_READ_XGP_PD_RW_13r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_13r,(_r._xgp_pd_rw_13))
#define BCM84834_WRITE_XGP_PD_RW_13r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_13r,(_r._xgp_pd_rw_13))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_13r BCM84834_XGP_PD_RW_13r
#define XGP_PD_RW_13r_SIZE BCM84834_XGP_PD_RW_13r_SIZE
typedef BCM84834_XGP_PD_RW_13r_t XGP_PD_RW_13r_t;
#define XGP_PD_RW_13r_CLR BCM84834_XGP_PD_RW_13r_CLR
#define XGP_PD_RW_13r_SET BCM84834_XGP_PD_RW_13r_SET
#define XGP_PD_RW_13r_GET BCM84834_XGP_PD_RW_13r_GET
#define XGP_PD_RW_13r_READ_DEVf_GET BCM84834_XGP_PD_RW_13r_READ_DEVf_GET
#define XGP_PD_RW_13r_READ_DEVf_SET BCM84834_XGP_PD_RW_13r_READ_DEVf_SET
#define XGP_PD_RW_13r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_13r_WRITE_DEVf_GET
#define XGP_PD_RW_13r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_13r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_13r BCM84834_READ_XGP_PD_RW_13r
#define WRITE_XGP_PD_RW_13r BCM84834_WRITE_XGP_PD_RW_13r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_13r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_14
 * BLOCKS:   XGP
 * REGADDR:  0x411e
 * DEVAD:    30
 * DESC:     device read/write access definition register 14
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_14r (0x001e411e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_14r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_14.
 *
 */
typedef union BCM84834_XGP_PD_RW_14r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_14[1];
	uint32_t _xgp_pd_rw_14;
} BCM84834_XGP_PD_RW_14r_t;

#define BCM84834_XGP_PD_RW_14r_CLR(r) (r).xgp_pd_rw_14[0] = 0
#define BCM84834_XGP_PD_RW_14r_SET(r,d) (r).xgp_pd_rw_14[0] = d
#define BCM84834_XGP_PD_RW_14r_GET(r) (r).xgp_pd_rw_14[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_14r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_14[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_14r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_14[0]=(((r).xgp_pd_rw_14[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_14r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_14[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_14r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_14[0]=(((r).xgp_pd_rw_14[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_14.
 *
 */
#define BCM84834_READ_XGP_PD_RW_14r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_14r,(_r._xgp_pd_rw_14))
#define BCM84834_WRITE_XGP_PD_RW_14r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_14r,(_r._xgp_pd_rw_14))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_14r BCM84834_XGP_PD_RW_14r
#define XGP_PD_RW_14r_SIZE BCM84834_XGP_PD_RW_14r_SIZE
typedef BCM84834_XGP_PD_RW_14r_t XGP_PD_RW_14r_t;
#define XGP_PD_RW_14r_CLR BCM84834_XGP_PD_RW_14r_CLR
#define XGP_PD_RW_14r_SET BCM84834_XGP_PD_RW_14r_SET
#define XGP_PD_RW_14r_GET BCM84834_XGP_PD_RW_14r_GET
#define XGP_PD_RW_14r_READ_DEVf_GET BCM84834_XGP_PD_RW_14r_READ_DEVf_GET
#define XGP_PD_RW_14r_READ_DEVf_SET BCM84834_XGP_PD_RW_14r_READ_DEVf_SET
#define XGP_PD_RW_14r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_14r_WRITE_DEVf_GET
#define XGP_PD_RW_14r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_14r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_14r BCM84834_READ_XGP_PD_RW_14r
#define WRITE_XGP_PD_RW_14r BCM84834_WRITE_XGP_PD_RW_14r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_14r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PD_RW_15
 * BLOCKS:   XGP
 * REGADDR:  0x411f
 * DEVAD:    30
 * DESC:     device read/write access definition register 15
 * SIZE:     32
 * FIELDS:
 *     WRITE_DEV        
 *     READ_DEV         
 *
 ******************************************************************************/
#define BCM84834_XGP_PD_RW_15r (0x001e411f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PD_RW_15r_SIZE 4

/*
 * This structure should be used to declare and program XGP_PD_RW_15.
 *
 */
typedef union BCM84834_XGP_PD_RW_15r_s {
	uint32_t v[1];
	uint32_t xgp_pd_rw_15[1];
	uint32_t _xgp_pd_rw_15;
} BCM84834_XGP_PD_RW_15r_t;

#define BCM84834_XGP_PD_RW_15r_CLR(r) (r).xgp_pd_rw_15[0] = 0
#define BCM84834_XGP_PD_RW_15r_SET(r,d) (r).xgp_pd_rw_15[0] = d
#define BCM84834_XGP_PD_RW_15r_GET(r) (r).xgp_pd_rw_15[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PD_RW_15r_READ_DEVf_GET(r) ((((r).xgp_pd_rw_15[0]) >> 12) & 0xf)
#define BCM84834_XGP_PD_RW_15r_READ_DEVf_SET(r,f) (r).xgp_pd_rw_15[0]=(((r).xgp_pd_rw_15[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCM84834_XGP_PD_RW_15r_WRITE_DEVf_GET(r) (((r).xgp_pd_rw_15[0]) & 0x3f)
#define BCM84834_XGP_PD_RW_15r_WRITE_DEVf_SET(r,f) (r).xgp_pd_rw_15[0]=(((r).xgp_pd_rw_15[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access XGP_PD_RW_15.
 *
 */
#define BCM84834_READ_XGP_PD_RW_15r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PD_RW_15r,(_r._xgp_pd_rw_15))
#define BCM84834_WRITE_XGP_PD_RW_15r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PD_RW_15r,(_r._xgp_pd_rw_15))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PD_RW_15r BCM84834_XGP_PD_RW_15r
#define XGP_PD_RW_15r_SIZE BCM84834_XGP_PD_RW_15r_SIZE
typedef BCM84834_XGP_PD_RW_15r_t XGP_PD_RW_15r_t;
#define XGP_PD_RW_15r_CLR BCM84834_XGP_PD_RW_15r_CLR
#define XGP_PD_RW_15r_SET BCM84834_XGP_PD_RW_15r_SET
#define XGP_PD_RW_15r_GET BCM84834_XGP_PD_RW_15r_GET
#define XGP_PD_RW_15r_READ_DEVf_GET BCM84834_XGP_PD_RW_15r_READ_DEVf_GET
#define XGP_PD_RW_15r_READ_DEVf_SET BCM84834_XGP_PD_RW_15r_READ_DEVf_SET
#define XGP_PD_RW_15r_WRITE_DEVf_GET BCM84834_XGP_PD_RW_15r_WRITE_DEVf_GET
#define XGP_PD_RW_15r_WRITE_DEVf_SET BCM84834_XGP_PD_RW_15r_WRITE_DEVf_SET
#define READ_XGP_PD_RW_15r BCM84834_READ_XGP_PD_RW_15r
#define WRITE_XGP_PD_RW_15r BCM84834_WRITE_XGP_PD_RW_15r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PD_RW_15r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_GPHY_PARA_RD_BLK
 * BLOCKS:   XGP
 * REGADDR:  0x4120
 * DEVAD:    30
 * DESC:     GPHY Parallel Read Block Control
 * SIZE:     32
 * FIELDS:
 *     END_GPHY_RD_BLK  
 *     ST_GPHY_RD_BLK   
 *
 ******************************************************************************/
#define BCM84834_XGP_GPHY_PARA_RD_BLKr (0x001e4120 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_GPHY_PARA_RD_BLKr_SIZE 4

/*
 * This structure should be used to declare and program XGP_GPHY_PARA_RD_BLK.
 *
 */
typedef union BCM84834_XGP_GPHY_PARA_RD_BLKr_s {
	uint32_t v[1];
	uint32_t xgp_gphy_para_rd_blk[1];
	uint32_t _xgp_gphy_para_rd_blk;
} BCM84834_XGP_GPHY_PARA_RD_BLKr_t;

#define BCM84834_XGP_GPHY_PARA_RD_BLKr_CLR(r) (r).xgp_gphy_para_rd_blk[0] = 0
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_SET(r,d) (r).xgp_gphy_para_rd_blk[0] = d
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_GET(r) (r).xgp_gphy_para_rd_blk[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_GET(r) ((((r).xgp_gphy_para_rd_blk[0]) >> 8) & 0x7)
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_SET(r,f) (r).xgp_gphy_para_rd_blk[0]=(((r).xgp_gphy_para_rd_blk[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_GET(r) (((r).xgp_gphy_para_rd_blk[0]) & 0x7)
#define BCM84834_XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_SET(r,f) (r).xgp_gphy_para_rd_blk[0]=(((r).xgp_gphy_para_rd_blk[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XGP_GPHY_PARA_RD_BLK.
 *
 */
#define BCM84834_READ_XGP_GPHY_PARA_RD_BLKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_GPHY_PARA_RD_BLKr,(_r._xgp_gphy_para_rd_blk))
#define BCM84834_WRITE_XGP_GPHY_PARA_RD_BLKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_GPHY_PARA_RD_BLKr,(_r._xgp_gphy_para_rd_blk))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_GPHY_PARA_RD_BLKr BCM84834_XGP_GPHY_PARA_RD_BLKr
#define XGP_GPHY_PARA_RD_BLKr_SIZE BCM84834_XGP_GPHY_PARA_RD_BLKr_SIZE
typedef BCM84834_XGP_GPHY_PARA_RD_BLKr_t XGP_GPHY_PARA_RD_BLKr_t;
#define XGP_GPHY_PARA_RD_BLKr_CLR BCM84834_XGP_GPHY_PARA_RD_BLKr_CLR
#define XGP_GPHY_PARA_RD_BLKr_SET BCM84834_XGP_GPHY_PARA_RD_BLKr_SET
#define XGP_GPHY_PARA_RD_BLKr_GET BCM84834_XGP_GPHY_PARA_RD_BLKr_GET
#define XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_GET BCM84834_XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_GET
#define XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_SET BCM84834_XGP_GPHY_PARA_RD_BLKr_ST_GPHY_RD_BLKf_SET
#define XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_GET BCM84834_XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_GET
#define XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_SET BCM84834_XGP_GPHY_PARA_RD_BLKr_END_GPHY_RD_BLKf_SET
#define READ_XGP_GPHY_PARA_RD_BLKr BCM84834_READ_XGP_GPHY_PARA_RD_BLKr
#define WRITE_XGP_GPHY_PARA_RD_BLKr BCM84834_WRITE_XGP_GPHY_PARA_RD_BLKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_GPHY_PARA_RD_BLKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_GPHY_PARA_WR_BLK
 * BLOCKS:   XGP
 * REGADDR:  0x4121
 * DEVAD:    30
 * DESC:     GPHY Parallel Write Block Control
 * SIZE:     32
 * FIELDS:
 *     END_GPHY_WR_BLK  
 *     ST_GPHY_WR_BLK   
 *
 ******************************************************************************/
#define BCM84834_XGP_GPHY_PARA_WR_BLKr (0x001e4121 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_GPHY_PARA_WR_BLKr_SIZE 4

/*
 * This structure should be used to declare and program XGP_GPHY_PARA_WR_BLK.
 *
 */
typedef union BCM84834_XGP_GPHY_PARA_WR_BLKr_s {
	uint32_t v[1];
	uint32_t xgp_gphy_para_wr_blk[1];
	uint32_t _xgp_gphy_para_wr_blk;
} BCM84834_XGP_GPHY_PARA_WR_BLKr_t;

#define BCM84834_XGP_GPHY_PARA_WR_BLKr_CLR(r) (r).xgp_gphy_para_wr_blk[0] = 0
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_SET(r,d) (r).xgp_gphy_para_wr_blk[0] = d
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_GET(r) (r).xgp_gphy_para_wr_blk[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_GET(r) ((((r).xgp_gphy_para_wr_blk[0]) >> 8) & 0x7)
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_SET(r,f) (r).xgp_gphy_para_wr_blk[0]=(((r).xgp_gphy_para_wr_blk[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_GET(r) (((r).xgp_gphy_para_wr_blk[0]) & 0xff)
#define BCM84834_XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_SET(r,f) (r).xgp_gphy_para_wr_blk[0]=(((r).xgp_gphy_para_wr_blk[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGP_GPHY_PARA_WR_BLK.
 *
 */
#define BCM84834_READ_XGP_GPHY_PARA_WR_BLKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_GPHY_PARA_WR_BLKr,(_r._xgp_gphy_para_wr_blk))
#define BCM84834_WRITE_XGP_GPHY_PARA_WR_BLKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_GPHY_PARA_WR_BLKr,(_r._xgp_gphy_para_wr_blk))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_GPHY_PARA_WR_BLKr BCM84834_XGP_GPHY_PARA_WR_BLKr
#define XGP_GPHY_PARA_WR_BLKr_SIZE BCM84834_XGP_GPHY_PARA_WR_BLKr_SIZE
typedef BCM84834_XGP_GPHY_PARA_WR_BLKr_t XGP_GPHY_PARA_WR_BLKr_t;
#define XGP_GPHY_PARA_WR_BLKr_CLR BCM84834_XGP_GPHY_PARA_WR_BLKr_CLR
#define XGP_GPHY_PARA_WR_BLKr_SET BCM84834_XGP_GPHY_PARA_WR_BLKr_SET
#define XGP_GPHY_PARA_WR_BLKr_GET BCM84834_XGP_GPHY_PARA_WR_BLKr_GET
#define XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_GET BCM84834_XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_GET
#define XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_SET BCM84834_XGP_GPHY_PARA_WR_BLKr_ST_GPHY_WR_BLKf_SET
#define XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_GET BCM84834_XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_GET
#define XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_SET BCM84834_XGP_GPHY_PARA_WR_BLKr_END_GPHY_WR_BLKf_SET
#define READ_XGP_GPHY_PARA_WR_BLKr BCM84834_READ_XGP_GPHY_PARA_WR_BLKr
#define WRITE_XGP_GPHY_PARA_WR_BLKr BCM84834_WRITE_XGP_GPHY_PARA_WR_BLKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_GPHY_PARA_WR_BLKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI_PARA_RD_BLK
 * BLOCKS:   XGP
 * REGADDR:  0x4122
 * DEVAD:    30
 * DESC:     XAUI Parallel Read Block Control
 * SIZE:     32
 * FIELDS:
 *     END_XAUI_RD_BLK  
 *     ST_XAUI_RD_BLK   
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI_PARA_RD_BLKr (0x001e4122 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI_PARA_RD_BLKr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI_PARA_RD_BLK.
 *
 */
typedef union BCM84834_XGP_XAUI_PARA_RD_BLKr_s {
	uint32_t v[1];
	uint32_t xgp_xaui_para_rd_blk[1];
	uint32_t _xgp_xaui_para_rd_blk;
} BCM84834_XGP_XAUI_PARA_RD_BLKr_t;

#define BCM84834_XGP_XAUI_PARA_RD_BLKr_CLR(r) (r).xgp_xaui_para_rd_blk[0] = 0
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_SET(r,d) (r).xgp_xaui_para_rd_blk[0] = d
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_GET(r) (r).xgp_xaui_para_rd_blk[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_GET(r) ((((r).xgp_xaui_para_rd_blk[0]) >> 8) & 0x7)
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_SET(r,f) (r).xgp_xaui_para_rd_blk[0]=(((r).xgp_xaui_para_rd_blk[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_GET(r) (((r).xgp_xaui_para_rd_blk[0]) & 0x7)
#define BCM84834_XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_SET(r,f) (r).xgp_xaui_para_rd_blk[0]=(((r).xgp_xaui_para_rd_blk[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access XGP_XAUI_PARA_RD_BLK.
 *
 */
#define BCM84834_READ_XGP_XAUI_PARA_RD_BLKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI_PARA_RD_BLKr,(_r._xgp_xaui_para_rd_blk))
#define BCM84834_WRITE_XGP_XAUI_PARA_RD_BLKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI_PARA_RD_BLKr,(_r._xgp_xaui_para_rd_blk))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI_PARA_RD_BLKr BCM84834_XGP_XAUI_PARA_RD_BLKr
#define XGP_XAUI_PARA_RD_BLKr_SIZE BCM84834_XGP_XAUI_PARA_RD_BLKr_SIZE
typedef BCM84834_XGP_XAUI_PARA_RD_BLKr_t XGP_XAUI_PARA_RD_BLKr_t;
#define XGP_XAUI_PARA_RD_BLKr_CLR BCM84834_XGP_XAUI_PARA_RD_BLKr_CLR
#define XGP_XAUI_PARA_RD_BLKr_SET BCM84834_XGP_XAUI_PARA_RD_BLKr_SET
#define XGP_XAUI_PARA_RD_BLKr_GET BCM84834_XGP_XAUI_PARA_RD_BLKr_GET
#define XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_GET BCM84834_XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_GET
#define XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_SET BCM84834_XGP_XAUI_PARA_RD_BLKr_ST_XAUI_RD_BLKf_SET
#define XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_GET BCM84834_XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_GET
#define XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_SET BCM84834_XGP_XAUI_PARA_RD_BLKr_END_XAUI_RD_BLKf_SET
#define READ_XGP_XAUI_PARA_RD_BLKr BCM84834_READ_XGP_XAUI_PARA_RD_BLKr
#define WRITE_XGP_XAUI_PARA_RD_BLKr BCM84834_WRITE_XGP_XAUI_PARA_RD_BLKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI_PARA_RD_BLKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI_PARA_WR_BLK
 * BLOCKS:   XGP
 * REGADDR:  0x4123
 * DEVAD:    30
 * DESC:     XAUI Parallel Write Block Control
 * SIZE:     32
 * FIELDS:
 *     END_XAUI_WR_BLK  
 *     ST_XAUI_WR_BLK   
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI_PARA_WR_BLKr (0x001e4123 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI_PARA_WR_BLKr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI_PARA_WR_BLK.
 *
 */
typedef union BCM84834_XGP_XAUI_PARA_WR_BLKr_s {
	uint32_t v[1];
	uint32_t xgp_xaui_para_wr_blk[1];
	uint32_t _xgp_xaui_para_wr_blk;
} BCM84834_XGP_XAUI_PARA_WR_BLKr_t;

#define BCM84834_XGP_XAUI_PARA_WR_BLKr_CLR(r) (r).xgp_xaui_para_wr_blk[0] = 0
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_SET(r,d) (r).xgp_xaui_para_wr_blk[0] = d
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_GET(r) (r).xgp_xaui_para_wr_blk[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_GET(r) ((((r).xgp_xaui_para_wr_blk[0]) >> 8) & 0x7)
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_SET(r,f) (r).xgp_xaui_para_wr_blk[0]=(((r).xgp_xaui_para_wr_blk[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_GET(r) (((r).xgp_xaui_para_wr_blk[0]) & 0xff)
#define BCM84834_XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_SET(r,f) (r).xgp_xaui_para_wr_blk[0]=(((r).xgp_xaui_para_wr_blk[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGP_XAUI_PARA_WR_BLK.
 *
 */
#define BCM84834_READ_XGP_XAUI_PARA_WR_BLKr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI_PARA_WR_BLKr,(_r._xgp_xaui_para_wr_blk))
#define BCM84834_WRITE_XGP_XAUI_PARA_WR_BLKr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI_PARA_WR_BLKr,(_r._xgp_xaui_para_wr_blk))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI_PARA_WR_BLKr BCM84834_XGP_XAUI_PARA_WR_BLKr
#define XGP_XAUI_PARA_WR_BLKr_SIZE BCM84834_XGP_XAUI_PARA_WR_BLKr_SIZE
typedef BCM84834_XGP_XAUI_PARA_WR_BLKr_t XGP_XAUI_PARA_WR_BLKr_t;
#define XGP_XAUI_PARA_WR_BLKr_CLR BCM84834_XGP_XAUI_PARA_WR_BLKr_CLR
#define XGP_XAUI_PARA_WR_BLKr_SET BCM84834_XGP_XAUI_PARA_WR_BLKr_SET
#define XGP_XAUI_PARA_WR_BLKr_GET BCM84834_XGP_XAUI_PARA_WR_BLKr_GET
#define XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_GET BCM84834_XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_GET
#define XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_SET BCM84834_XGP_XAUI_PARA_WR_BLKr_ST_XAUI_WR_BLKf_SET
#define XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_GET BCM84834_XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_GET
#define XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_SET BCM84834_XGP_XAUI_PARA_WR_BLKr_END_XAUI_WR_BLKf_SET
#define READ_XGP_XAUI_PARA_WR_BLKr BCM84834_READ_XGP_XAUI_PARA_WR_BLKr
#define WRITE_XGP_XAUI_PARA_WR_BLKr BCM84834_WRITE_XGP_XAUI_PARA_WR_BLKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI_PARA_WR_BLKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_ARM_TIMEOUT_TIME
 * BLOCKS:   XGP
 * REGADDR:  0x4124
 * DEVAD:    30
 * DESC:     XAUI/GPHY ARM interface timeout time
 * SIZE:     32
 * FIELDS:
 *     TIMEOUT_TIME     
 *
 ******************************************************************************/
#define BCM84834_XGP_ARM_TIMEOUT_TIMEr (0x001e4124 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_SIZE 4

/*
 * This structure should be used to declare and program XGP_ARM_TIMEOUT_TIME.
 *
 */
typedef union BCM84834_XGP_ARM_TIMEOUT_TIMEr_s {
	uint32_t v[1];
	uint32_t xgp_arm_timeout_time[1];
	uint32_t _xgp_arm_timeout_time;
} BCM84834_XGP_ARM_TIMEOUT_TIMEr_t;

#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_CLR(r) (r).xgp_arm_timeout_time[0] = 0
#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_SET(r,d) (r).xgp_arm_timeout_time[0] = d
#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_GET(r) (r).xgp_arm_timeout_time[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_GET(r) (((r).xgp_arm_timeout_time[0]) & 0xffff)
#define BCM84834_XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_SET(r,f) (r).xgp_arm_timeout_time[0]=(((r).xgp_arm_timeout_time[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XGP_ARM_TIMEOUT_TIME.
 *
 */
#define BCM84834_READ_XGP_ARM_TIMEOUT_TIMEr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_ARM_TIMEOUT_TIMEr,(_r._xgp_arm_timeout_time))
#define BCM84834_WRITE_XGP_ARM_TIMEOUT_TIMEr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_ARM_TIMEOUT_TIMEr,(_r._xgp_arm_timeout_time))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_ARM_TIMEOUT_TIMEr BCM84834_XGP_ARM_TIMEOUT_TIMEr
#define XGP_ARM_TIMEOUT_TIMEr_SIZE BCM84834_XGP_ARM_TIMEOUT_TIMEr_SIZE
typedef BCM84834_XGP_ARM_TIMEOUT_TIMEr_t XGP_ARM_TIMEOUT_TIMEr_t;
#define XGP_ARM_TIMEOUT_TIMEr_CLR BCM84834_XGP_ARM_TIMEOUT_TIMEr_CLR
#define XGP_ARM_TIMEOUT_TIMEr_SET BCM84834_XGP_ARM_TIMEOUT_TIMEr_SET
#define XGP_ARM_TIMEOUT_TIMEr_GET BCM84834_XGP_ARM_TIMEOUT_TIMEr_GET
#define XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_GET BCM84834_XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_GET
#define XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_SET BCM84834_XGP_ARM_TIMEOUT_TIMEr_TIMEOUT_TIMEf_SET
#define READ_XGP_ARM_TIMEOUT_TIMEr BCM84834_READ_XGP_ARM_TIMEOUT_TIMEr
#define WRITE_XGP_ARM_TIMEOUT_TIMEr BCM84834_WRITE_XGP_ARM_TIMEOUT_TIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_ARM_TIMEOUT_TIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_TIMEOUT_STATUS
 * BLOCKS:   XGP
 * REGADDR:  0x4125
 * DEVAD:    30
 * DESC:     XAUI/GPHY ARM status register
 * SIZE:     32
 * FIELDS:
 *     TIMEOUT          
 *
 ******************************************************************************/
#define BCM84834_XGP_TIMEOUT_STATUSr (0x001e4125 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_TIMEOUT_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program XGP_TIMEOUT_STATUS.
 *
 */
typedef union BCM84834_XGP_TIMEOUT_STATUSr_s {
	uint32_t v[1];
	uint32_t xgp_timeout_status[1];
	uint32_t _xgp_timeout_status;
} BCM84834_XGP_TIMEOUT_STATUSr_t;

#define BCM84834_XGP_TIMEOUT_STATUSr_CLR(r) (r).xgp_timeout_status[0] = 0
#define BCM84834_XGP_TIMEOUT_STATUSr_SET(r,d) (r).xgp_timeout_status[0] = d
#define BCM84834_XGP_TIMEOUT_STATUSr_GET(r) (r).xgp_timeout_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_TIMEOUT_STATUSr_TIMEOUTf_GET(r) (((r).xgp_timeout_status[0]) & 0x1)
#define BCM84834_XGP_TIMEOUT_STATUSr_TIMEOUTf_SET(r,f) (r).xgp_timeout_status[0]=(((r).xgp_timeout_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGP_TIMEOUT_STATUS.
 *
 */
#define BCM84834_READ_XGP_TIMEOUT_STATUSr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_TIMEOUT_STATUSr,(_r._xgp_timeout_status))
#define BCM84834_WRITE_XGP_TIMEOUT_STATUSr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_TIMEOUT_STATUSr,(_r._xgp_timeout_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_TIMEOUT_STATUSr BCM84834_XGP_TIMEOUT_STATUSr
#define XGP_TIMEOUT_STATUSr_SIZE BCM84834_XGP_TIMEOUT_STATUSr_SIZE
typedef BCM84834_XGP_TIMEOUT_STATUSr_t XGP_TIMEOUT_STATUSr_t;
#define XGP_TIMEOUT_STATUSr_CLR BCM84834_XGP_TIMEOUT_STATUSr_CLR
#define XGP_TIMEOUT_STATUSr_SET BCM84834_XGP_TIMEOUT_STATUSr_SET
#define XGP_TIMEOUT_STATUSr_GET BCM84834_XGP_TIMEOUT_STATUSr_GET
#define XGP_TIMEOUT_STATUSr_TIMEOUTf_GET BCM84834_XGP_TIMEOUT_STATUSr_TIMEOUTf_GET
#define XGP_TIMEOUT_STATUSr_TIMEOUTf_SET BCM84834_XGP_TIMEOUT_STATUSr_TIMEOUTf_SET
#define READ_XGP_TIMEOUT_STATUSr BCM84834_READ_XGP_TIMEOUT_STATUSr
#define WRITE_XGP_TIMEOUT_STATUSr BCM84834_WRITE_XGP_TIMEOUT_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_TIMEOUT_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PMD_DEVAD
 * BLOCKS:   XGP
 * REGADDR:  0x4126
 * DEVAD:    30
 * DESC:     PMD device address register
 * SIZE:     32
 * FIELDS:
 *     PMD_DEVAD_USER   
 *     PMD_DEVAD_IEEE   
 *
 ******************************************************************************/
#define BCM84834_XGP_PMD_DEVADr (0x001e4126 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PMD_DEVADr_SIZE 4

/*
 * This structure should be used to declare and program XGP_PMD_DEVAD.
 *
 */
typedef union BCM84834_XGP_PMD_DEVADr_s {
	uint32_t v[1];
	uint32_t xgp_pmd_devad[1];
	uint32_t _xgp_pmd_devad;
} BCM84834_XGP_PMD_DEVADr_t;

#define BCM84834_XGP_PMD_DEVADr_CLR(r) (r).xgp_pmd_devad[0] = 0
#define BCM84834_XGP_PMD_DEVADr_SET(r,d) (r).xgp_pmd_devad[0] = d
#define BCM84834_XGP_PMD_DEVADr_GET(r) (r).xgp_pmd_devad[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_GET(r) ((((r).xgp_pmd_devad[0]) >> 8) & 0x1f)
#define BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_SET(r,f) (r).xgp_pmd_devad[0]=(((r).xgp_pmd_devad[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_USERf_GET(r) (((r).xgp_pmd_devad[0]) & 0x1f)
#define BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_USERf_SET(r,f) (r).xgp_pmd_devad[0]=(((r).xgp_pmd_devad[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PMD_DEVAD.
 *
 */
#define BCM84834_READ_XGP_PMD_DEVADr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PMD_DEVADr,(_r._xgp_pmd_devad))
#define BCM84834_WRITE_XGP_PMD_DEVADr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PMD_DEVADr,(_r._xgp_pmd_devad))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PMD_DEVADr BCM84834_XGP_PMD_DEVADr
#define XGP_PMD_DEVADr_SIZE BCM84834_XGP_PMD_DEVADr_SIZE
typedef BCM84834_XGP_PMD_DEVADr_t XGP_PMD_DEVADr_t;
#define XGP_PMD_DEVADr_CLR BCM84834_XGP_PMD_DEVADr_CLR
#define XGP_PMD_DEVADr_SET BCM84834_XGP_PMD_DEVADr_SET
#define XGP_PMD_DEVADr_GET BCM84834_XGP_PMD_DEVADr_GET
#define XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_GET BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_GET
#define XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_SET BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_IEEEf_SET
#define XGP_PMD_DEVADr_PMD_DEVAD_USERf_GET BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_USERf_GET
#define XGP_PMD_DEVADr_PMD_DEVAD_USERf_SET BCM84834_XGP_PMD_DEVADr_PMD_DEVAD_USERf_SET
#define READ_XGP_PMD_DEVADr BCM84834_READ_XGP_PMD_DEVADr
#define WRITE_XGP_PMD_DEVADr BCM84834_WRITE_XGP_PMD_DEVADr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PMD_DEVADr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_PCS_DEVAD
 * BLOCKS:   XGP
 * REGADDR:  0x4127
 * DEVAD:    30
 * DESC:     PCS device address register
 * SIZE:     32
 * FIELDS:
 *     PCS_DEVAD_USER   
 *     PCS_DEVAD_IEEE   
 *
 ******************************************************************************/
#define BCM84834_XGP_PCS_DEVADr (0x001e4127 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_PCS_DEVADr_SIZE 4

/*
 * This structure should be used to declare and program XGP_PCS_DEVAD.
 *
 */
typedef union BCM84834_XGP_PCS_DEVADr_s {
	uint32_t v[1];
	uint32_t xgp_pcs_devad[1];
	uint32_t _xgp_pcs_devad;
} BCM84834_XGP_PCS_DEVADr_t;

#define BCM84834_XGP_PCS_DEVADr_CLR(r) (r).xgp_pcs_devad[0] = 0
#define BCM84834_XGP_PCS_DEVADr_SET(r,d) (r).xgp_pcs_devad[0] = d
#define BCM84834_XGP_PCS_DEVADr_GET(r) (r).xgp_pcs_devad[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_GET(r) ((((r).xgp_pcs_devad[0]) >> 8) & 0x1f)
#define BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_SET(r,f) (r).xgp_pcs_devad[0]=(((r).xgp_pcs_devad[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_USERf_GET(r) (((r).xgp_pcs_devad[0]) & 0x1f)
#define BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_USERf_SET(r,f) (r).xgp_pcs_devad[0]=(((r).xgp_pcs_devad[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_PCS_DEVAD.
 *
 */
#define BCM84834_READ_XGP_PCS_DEVADr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_PCS_DEVADr,(_r._xgp_pcs_devad))
#define BCM84834_WRITE_XGP_PCS_DEVADr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_PCS_DEVADr,(_r._xgp_pcs_devad))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_PCS_DEVADr BCM84834_XGP_PCS_DEVADr
#define XGP_PCS_DEVADr_SIZE BCM84834_XGP_PCS_DEVADr_SIZE
typedef BCM84834_XGP_PCS_DEVADr_t XGP_PCS_DEVADr_t;
#define XGP_PCS_DEVADr_CLR BCM84834_XGP_PCS_DEVADr_CLR
#define XGP_PCS_DEVADr_SET BCM84834_XGP_PCS_DEVADr_SET
#define XGP_PCS_DEVADr_GET BCM84834_XGP_PCS_DEVADr_GET
#define XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_GET BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_GET
#define XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_SET BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_IEEEf_SET
#define XGP_PCS_DEVADr_PCS_DEVAD_USERf_GET BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_USERf_GET
#define XGP_PCS_DEVADr_PCS_DEVAD_USERf_SET BCM84834_XGP_PCS_DEVADr_PCS_DEVAD_USERf_SET
#define READ_XGP_PCS_DEVADr BCM84834_READ_XGP_PCS_DEVADr
#define WRITE_XGP_PCS_DEVADr BCM84834_WRITE_XGP_PCS_DEVADr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_PCS_DEVADr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_GPHY_DEVAD
 * BLOCKS:   XGP
 * REGADDR:  0x4128
 * DEVAD:    30
 * DESC:     GPHY device address register
 * SIZE:     32
 * FIELDS:
 *     GPHY_DEVAD_USER  
 *     GPHY_DEVAD_IEEE  
 *
 ******************************************************************************/
#define BCM84834_XGP_GPHY_DEVADr (0x001e4128 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_GPHY_DEVADr_SIZE 4

/*
 * This structure should be used to declare and program XGP_GPHY_DEVAD.
 *
 */
typedef union BCM84834_XGP_GPHY_DEVADr_s {
	uint32_t v[1];
	uint32_t xgp_gphy_devad[1];
	uint32_t _xgp_gphy_devad;
} BCM84834_XGP_GPHY_DEVADr_t;

#define BCM84834_XGP_GPHY_DEVADr_CLR(r) (r).xgp_gphy_devad[0] = 0
#define BCM84834_XGP_GPHY_DEVADr_SET(r,d) (r).xgp_gphy_devad[0] = d
#define BCM84834_XGP_GPHY_DEVADr_GET(r) (r).xgp_gphy_devad[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_GET(r) ((((r).xgp_gphy_devad[0]) >> 8) & 0x1f)
#define BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_SET(r,f) (r).xgp_gphy_devad[0]=(((r).xgp_gphy_devad[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_GET(r) (((r).xgp_gphy_devad[0]) & 0x1f)
#define BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_SET(r,f) (r).xgp_gphy_devad[0]=(((r).xgp_gphy_devad[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_GPHY_DEVAD.
 *
 */
#define BCM84834_READ_XGP_GPHY_DEVADr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_GPHY_DEVADr,(_r._xgp_gphy_devad))
#define BCM84834_WRITE_XGP_GPHY_DEVADr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_GPHY_DEVADr,(_r._xgp_gphy_devad))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_GPHY_DEVADr BCM84834_XGP_GPHY_DEVADr
#define XGP_GPHY_DEVADr_SIZE BCM84834_XGP_GPHY_DEVADr_SIZE
typedef BCM84834_XGP_GPHY_DEVADr_t XGP_GPHY_DEVADr_t;
#define XGP_GPHY_DEVADr_CLR BCM84834_XGP_GPHY_DEVADr_CLR
#define XGP_GPHY_DEVADr_SET BCM84834_XGP_GPHY_DEVADr_SET
#define XGP_GPHY_DEVADr_GET BCM84834_XGP_GPHY_DEVADr_GET
#define XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_GET BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_GET
#define XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_SET BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_IEEEf_SET
#define XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_GET BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_GET
#define XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_SET BCM84834_XGP_GPHY_DEVADr_GPHY_DEVAD_USERf_SET
#define READ_XGP_GPHY_DEVADr BCM84834_READ_XGP_GPHY_DEVADr
#define WRITE_XGP_GPHY_DEVADr BCM84834_WRITE_XGP_GPHY_DEVADr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_GPHY_DEVADr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XENPAK_DEVAD
 * BLOCKS:   XGP
 * REGADDR:  0x4129
 * DEVAD:    30
 * DESC:     XENPAK device address register
 * SIZE:     32
 * FIELDS:
 *     XENPAK_DEVAD_USER 
 *     XENPAK_DEVAD_IEEE 
 *
 ******************************************************************************/
#define BCM84834_XGP_XENPAK_DEVADr (0x001e4129 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XENPAK_DEVADr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XENPAK_DEVAD.
 *
 */
typedef union BCM84834_XGP_XENPAK_DEVADr_s {
	uint32_t v[1];
	uint32_t xgp_xenpak_devad[1];
	uint32_t _xgp_xenpak_devad;
} BCM84834_XGP_XENPAK_DEVADr_t;

#define BCM84834_XGP_XENPAK_DEVADr_CLR(r) (r).xgp_xenpak_devad[0] = 0
#define BCM84834_XGP_XENPAK_DEVADr_SET(r,d) (r).xgp_xenpak_devad[0] = d
#define BCM84834_XGP_XENPAK_DEVADr_GET(r) (r).xgp_xenpak_devad[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_GET(r) ((((r).xgp_xenpak_devad[0]) >> 8) & 0x1f)
#define BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_SET(r,f) (r).xgp_xenpak_devad[0]=(((r).xgp_xenpak_devad[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_GET(r) (((r).xgp_xenpak_devad[0]) & 0x1f)
#define BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_SET(r,f) (r).xgp_xenpak_devad[0]=(((r).xgp_xenpak_devad[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_XENPAK_DEVAD.
 *
 */
#define BCM84834_READ_XGP_XENPAK_DEVADr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XENPAK_DEVADr,(_r._xgp_xenpak_devad))
#define BCM84834_WRITE_XGP_XENPAK_DEVADr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XENPAK_DEVADr,(_r._xgp_xenpak_devad))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XENPAK_DEVADr BCM84834_XGP_XENPAK_DEVADr
#define XGP_XENPAK_DEVADr_SIZE BCM84834_XGP_XENPAK_DEVADr_SIZE
typedef BCM84834_XGP_XENPAK_DEVADr_t XGP_XENPAK_DEVADr_t;
#define XGP_XENPAK_DEVADr_CLR BCM84834_XGP_XENPAK_DEVADr_CLR
#define XGP_XENPAK_DEVADr_SET BCM84834_XGP_XENPAK_DEVADr_SET
#define XGP_XENPAK_DEVADr_GET BCM84834_XGP_XENPAK_DEVADr_GET
#define XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_GET BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_GET
#define XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_SET BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_IEEEf_SET
#define XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_GET BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_GET
#define XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_SET BCM84834_XGP_XENPAK_DEVADr_XENPAK_DEVAD_USERf_SET
#define READ_XGP_XENPAK_DEVADr BCM84834_READ_XGP_XENPAK_DEVADr
#define WRITE_XGP_XENPAK_DEVADr BCM84834_WRITE_XGP_XENPAK_DEVADr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XENPAK_DEVADr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_ARM_XAUI1_AER
 * BLOCKS:   XGP
 * REGADDR:  0x412a
 * DEVAD:    30
 * DESC:     ARM XAUI1 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     XAUI_AER         
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_ARM_XAUI1_AERr (0x001e412a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_ARM_XAUI1_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_ARM_XAUI1_AER.
 *
 */
typedef union BCM84834_XGP_ARM_XAUI1_AERr_s {
	uint32_t v[1];
	uint32_t xgp_arm_xaui1_aer[1];
	uint32_t _xgp_arm_xaui1_aer;
} BCM84834_XGP_ARM_XAUI1_AERr_t;

#define BCM84834_XGP_ARM_XAUI1_AERr_CLR(r) (r).xgp_arm_xaui1_aer[0] = 0
#define BCM84834_XGP_ARM_XAUI1_AERr_SET(r,d) (r).xgp_arm_xaui1_aer[0] = d
#define BCM84834_XGP_ARM_XAUI1_AERr_GET(r) (r).xgp_arm_xaui1_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_ARM_XAUI1_AERr_DEVADf_GET(r) ((((r).xgp_arm_xaui1_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_ARM_XAUI1_AERr_DEVADf_SET(r,f) (r).xgp_arm_xaui1_aer[0]=(((r).xgp_arm_xaui1_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_ARM_XAUI1_AERr_XAUI_AERf_GET(r) (((r).xgp_arm_xaui1_aer[0]) & 0x7ff)
#define BCM84834_XGP_ARM_XAUI1_AERr_XAUI_AERf_SET(r,f) (r).xgp_arm_xaui1_aer[0]=(((r).xgp_arm_xaui1_aer[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access XGP_ARM_XAUI1_AER.
 *
 */
#define BCM84834_READ_XGP_ARM_XAUI1_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_ARM_XAUI1_AERr,(_r._xgp_arm_xaui1_aer))
#define BCM84834_WRITE_XGP_ARM_XAUI1_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_ARM_XAUI1_AERr,(_r._xgp_arm_xaui1_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_ARM_XAUI1_AERr BCM84834_XGP_ARM_XAUI1_AERr
#define XGP_ARM_XAUI1_AERr_SIZE BCM84834_XGP_ARM_XAUI1_AERr_SIZE
typedef BCM84834_XGP_ARM_XAUI1_AERr_t XGP_ARM_XAUI1_AERr_t;
#define XGP_ARM_XAUI1_AERr_CLR BCM84834_XGP_ARM_XAUI1_AERr_CLR
#define XGP_ARM_XAUI1_AERr_SET BCM84834_XGP_ARM_XAUI1_AERr_SET
#define XGP_ARM_XAUI1_AERr_GET BCM84834_XGP_ARM_XAUI1_AERr_GET
#define XGP_ARM_XAUI1_AERr_DEVADf_GET BCM84834_XGP_ARM_XAUI1_AERr_DEVADf_GET
#define XGP_ARM_XAUI1_AERr_DEVADf_SET BCM84834_XGP_ARM_XAUI1_AERr_DEVADf_SET
#define XGP_ARM_XAUI1_AERr_XAUI_AERf_GET BCM84834_XGP_ARM_XAUI1_AERr_XAUI_AERf_GET
#define XGP_ARM_XAUI1_AERr_XAUI_AERf_SET BCM84834_XGP_ARM_XAUI1_AERr_XAUI_AERf_SET
#define READ_XGP_ARM_XAUI1_AERr BCM84834_READ_XGP_ARM_XAUI1_AERr
#define WRITE_XGP_ARM_XAUI1_AERr BCM84834_WRITE_XGP_ARM_XAUI1_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_ARM_XAUI1_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_ARM_XAUI2_AER
 * BLOCKS:   XGP
 * REGADDR:  0x412b
 * DEVAD:    30
 * DESC:     ARM XAUI2 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     XAUI_AER         
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_ARM_XAUI2_AERr (0x001e412b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_ARM_XAUI2_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_ARM_XAUI2_AER.
 *
 */
typedef union BCM84834_XGP_ARM_XAUI2_AERr_s {
	uint32_t v[1];
	uint32_t xgp_arm_xaui2_aer[1];
	uint32_t _xgp_arm_xaui2_aer;
} BCM84834_XGP_ARM_XAUI2_AERr_t;

#define BCM84834_XGP_ARM_XAUI2_AERr_CLR(r) (r).xgp_arm_xaui2_aer[0] = 0
#define BCM84834_XGP_ARM_XAUI2_AERr_SET(r,d) (r).xgp_arm_xaui2_aer[0] = d
#define BCM84834_XGP_ARM_XAUI2_AERr_GET(r) (r).xgp_arm_xaui2_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_ARM_XAUI2_AERr_DEVADf_GET(r) ((((r).xgp_arm_xaui2_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_ARM_XAUI2_AERr_DEVADf_SET(r,f) (r).xgp_arm_xaui2_aer[0]=(((r).xgp_arm_xaui2_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_ARM_XAUI2_AERr_XAUI_AERf_GET(r) (((r).xgp_arm_xaui2_aer[0]) & 0x7ff)
#define BCM84834_XGP_ARM_XAUI2_AERr_XAUI_AERf_SET(r,f) (r).xgp_arm_xaui2_aer[0]=(((r).xgp_arm_xaui2_aer[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access XGP_ARM_XAUI2_AER.
 *
 */
#define BCM84834_READ_XGP_ARM_XAUI2_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_ARM_XAUI2_AERr,(_r._xgp_arm_xaui2_aer))
#define BCM84834_WRITE_XGP_ARM_XAUI2_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_ARM_XAUI2_AERr,(_r._xgp_arm_xaui2_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_ARM_XAUI2_AERr BCM84834_XGP_ARM_XAUI2_AERr
#define XGP_ARM_XAUI2_AERr_SIZE BCM84834_XGP_ARM_XAUI2_AERr_SIZE
typedef BCM84834_XGP_ARM_XAUI2_AERr_t XGP_ARM_XAUI2_AERr_t;
#define XGP_ARM_XAUI2_AERr_CLR BCM84834_XGP_ARM_XAUI2_AERr_CLR
#define XGP_ARM_XAUI2_AERr_SET BCM84834_XGP_ARM_XAUI2_AERr_SET
#define XGP_ARM_XAUI2_AERr_GET BCM84834_XGP_ARM_XAUI2_AERr_GET
#define XGP_ARM_XAUI2_AERr_DEVADf_GET BCM84834_XGP_ARM_XAUI2_AERr_DEVADf_GET
#define XGP_ARM_XAUI2_AERr_DEVADf_SET BCM84834_XGP_ARM_XAUI2_AERr_DEVADf_SET
#define XGP_ARM_XAUI2_AERr_XAUI_AERf_GET BCM84834_XGP_ARM_XAUI2_AERr_XAUI_AERf_GET
#define XGP_ARM_XAUI2_AERr_XAUI_AERf_SET BCM84834_XGP_ARM_XAUI2_AERr_XAUI_AERf_SET
#define READ_XGP_ARM_XAUI2_AERr BCM84834_READ_XGP_ARM_XAUI2_AERr
#define WRITE_XGP_ARM_XAUI2_AERr BCM84834_WRITE_XGP_ARM_XAUI2_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_ARM_XAUI2_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI1_AER
 * BLOCKS:   XGP
 * REGADDR:  0x412c
 * DEVAD:    30
 * DESC:     XAUI1 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     XAUI_AER         
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI1_AERr (0x001e412c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI1_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI1_AER.
 *
 */
typedef union BCM84834_XGP_XAUI1_AERr_s {
	uint32_t v[1];
	uint32_t xgp_xaui1_aer[1];
	uint32_t _xgp_xaui1_aer;
} BCM84834_XGP_XAUI1_AERr_t;

#define BCM84834_XGP_XAUI1_AERr_CLR(r) (r).xgp_xaui1_aer[0] = 0
#define BCM84834_XGP_XAUI1_AERr_SET(r,d) (r).xgp_xaui1_aer[0] = d
#define BCM84834_XGP_XAUI1_AERr_GET(r) (r).xgp_xaui1_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI1_AERr_DEVADf_GET(r) ((((r).xgp_xaui1_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_XAUI1_AERr_DEVADf_SET(r,f) (r).xgp_xaui1_aer[0]=(((r).xgp_xaui1_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_XAUI1_AERr_XAUI_AERf_GET(r) (((r).xgp_xaui1_aer[0]) & 0x7ff)
#define BCM84834_XGP_XAUI1_AERr_XAUI_AERf_SET(r,f) (r).xgp_xaui1_aer[0]=(((r).xgp_xaui1_aer[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access XGP_XAUI1_AER.
 *
 */
#define BCM84834_READ_XGP_XAUI1_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI1_AERr,(_r._xgp_xaui1_aer))
#define BCM84834_WRITE_XGP_XAUI1_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI1_AERr,(_r._xgp_xaui1_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI1_AERr BCM84834_XGP_XAUI1_AERr
#define XGP_XAUI1_AERr_SIZE BCM84834_XGP_XAUI1_AERr_SIZE
typedef BCM84834_XGP_XAUI1_AERr_t XGP_XAUI1_AERr_t;
#define XGP_XAUI1_AERr_CLR BCM84834_XGP_XAUI1_AERr_CLR
#define XGP_XAUI1_AERr_SET BCM84834_XGP_XAUI1_AERr_SET
#define XGP_XAUI1_AERr_GET BCM84834_XGP_XAUI1_AERr_GET
#define XGP_XAUI1_AERr_DEVADf_GET BCM84834_XGP_XAUI1_AERr_DEVADf_GET
#define XGP_XAUI1_AERr_DEVADf_SET BCM84834_XGP_XAUI1_AERr_DEVADf_SET
#define XGP_XAUI1_AERr_XAUI_AERf_GET BCM84834_XGP_XAUI1_AERr_XAUI_AERf_GET
#define XGP_XAUI1_AERr_XAUI_AERf_SET BCM84834_XGP_XAUI1_AERr_XAUI_AERf_SET
#define READ_XGP_XAUI1_AERr BCM84834_READ_XGP_XAUI1_AERr
#define WRITE_XGP_XAUI1_AERr BCM84834_WRITE_XGP_XAUI1_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI1_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI2_AER
 * BLOCKS:   XGP
 * REGADDR:  0x412d
 * DEVAD:    30
 * DESC:     XAUI2 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     XAUI_AER         
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI2_AERr (0x001e412d | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI2_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI2_AER.
 *
 */
typedef union BCM84834_XGP_XAUI2_AERr_s {
	uint32_t v[1];
	uint32_t xgp_xaui2_aer[1];
	uint32_t _xgp_xaui2_aer;
} BCM84834_XGP_XAUI2_AERr_t;

#define BCM84834_XGP_XAUI2_AERr_CLR(r) (r).xgp_xaui2_aer[0] = 0
#define BCM84834_XGP_XAUI2_AERr_SET(r,d) (r).xgp_xaui2_aer[0] = d
#define BCM84834_XGP_XAUI2_AERr_GET(r) (r).xgp_xaui2_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI2_AERr_DEVADf_GET(r) ((((r).xgp_xaui2_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_XAUI2_AERr_DEVADf_SET(r,f) (r).xgp_xaui2_aer[0]=(((r).xgp_xaui2_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_XAUI2_AERr_XAUI_AERf_GET(r) (((r).xgp_xaui2_aer[0]) & 0x7ff)
#define BCM84834_XGP_XAUI2_AERr_XAUI_AERf_SET(r,f) (r).xgp_xaui2_aer[0]=(((r).xgp_xaui2_aer[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access XGP_XAUI2_AER.
 *
 */
#define BCM84834_READ_XGP_XAUI2_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI2_AERr,(_r._xgp_xaui2_aer))
#define BCM84834_WRITE_XGP_XAUI2_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI2_AERr,(_r._xgp_xaui2_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI2_AERr BCM84834_XGP_XAUI2_AERr
#define XGP_XAUI2_AERr_SIZE BCM84834_XGP_XAUI2_AERr_SIZE
typedef BCM84834_XGP_XAUI2_AERr_t XGP_XAUI2_AERr_t;
#define XGP_XAUI2_AERr_CLR BCM84834_XGP_XAUI2_AERr_CLR
#define XGP_XAUI2_AERr_SET BCM84834_XGP_XAUI2_AERr_SET
#define XGP_XAUI2_AERr_GET BCM84834_XGP_XAUI2_AERr_GET
#define XGP_XAUI2_AERr_DEVADf_GET BCM84834_XGP_XAUI2_AERr_DEVADf_GET
#define XGP_XAUI2_AERr_DEVADf_SET BCM84834_XGP_XAUI2_AERr_DEVADf_SET
#define XGP_XAUI2_AERr_XAUI_AERf_GET BCM84834_XGP_XAUI2_AERr_XAUI_AERf_GET
#define XGP_XAUI2_AERr_XAUI_AERf_SET BCM84834_XGP_XAUI2_AERr_XAUI_AERf_SET
#define READ_XGP_XAUI2_AERr BCM84834_READ_XGP_XAUI2_AERr
#define WRITE_XGP_XAUI2_AERr BCM84834_WRITE_XGP_XAUI2_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI2_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_AER_CTL
 * BLOCKS:   XGP
 * REGADDR:  0x412e
 * DEVAD:    30
 * DESC:     Address Extension Control Register
 * SIZE:     32
 * FIELDS:
 *     XFI2_AER_DEVAD22_SEL 
 *     XFI2_AER_DEVAD45_SEL 
 *     XFI2_HI_LO_SEL   
 *     XFI1_AER_DEVAD22_SEL 
 *     XFI1_AER_DEVAD45_SEL 
 *     XFI1_HI_LO_SEL   
 *     XAUI2_AER_DEVAD22_SEL 
 *     XAUI2_AER_DEVAD45_SEL 
 *     XAUI2_HI_LO_SEL  
 *     XAUI1_AER_DEVAD22_SEL 
 *     XAUI1_AER_DEVAD45_SEL 
 *     XAUI1_HI_LO_SEL  
 *
 ******************************************************************************/
#define BCM84834_XGP_AER_CTLr (0x001e412e | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_AER_CTLr_SIZE 4

/*
 * This structure should be used to declare and program XGP_AER_CTL.
 *
 */
typedef union BCM84834_XGP_AER_CTLr_s {
	uint32_t v[1];
	uint32_t xgp_aer_ctl[1];
	uint32_t _xgp_aer_ctl;
} BCM84834_XGP_AER_CTLr_t;

#define BCM84834_XGP_AER_CTLr_CLR(r) (r).xgp_aer_ctl[0] = 0
#define BCM84834_XGP_AER_CTLr_SET(r,d) (r).xgp_aer_ctl[0] = d
#define BCM84834_XGP_AER_CTLr_GET(r) (r).xgp_aer_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_AER_CTLr_XAUI1_HI_LO_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 11) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI1_HI_LO_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 10) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 9) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_XGP_AER_CTLr_XAUI2_HI_LO_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 8) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI2_HI_LO_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 7) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 6) & 0x1)
#define BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_XGP_AER_CTLr_XFI1_HI_LO_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 5) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI1_HI_LO_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 4) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 3) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_XGP_AER_CTLr_XFI2_HI_LO_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 2) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI2_HI_LO_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_GET(r) ((((r).xgp_aer_ctl[0]) >> 1) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_GET(r) (((r).xgp_aer_ctl[0]) & 0x1)
#define BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_SET(r,f) (r).xgp_aer_ctl[0]=(((r).xgp_aer_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGP_AER_CTL.
 *
 */
#define BCM84834_READ_XGP_AER_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_AER_CTLr,(_r._xgp_aer_ctl))
#define BCM84834_WRITE_XGP_AER_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_AER_CTLr,(_r._xgp_aer_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_AER_CTLr BCM84834_XGP_AER_CTLr
#define XGP_AER_CTLr_SIZE BCM84834_XGP_AER_CTLr_SIZE
typedef BCM84834_XGP_AER_CTLr_t XGP_AER_CTLr_t;
#define XGP_AER_CTLr_CLR BCM84834_XGP_AER_CTLr_CLR
#define XGP_AER_CTLr_SET BCM84834_XGP_AER_CTLr_SET
#define XGP_AER_CTLr_GET BCM84834_XGP_AER_CTLr_GET
#define XGP_AER_CTLr_XAUI1_HI_LO_SELf_GET BCM84834_XGP_AER_CTLr_XAUI1_HI_LO_SELf_GET
#define XGP_AER_CTLr_XAUI1_HI_LO_SELf_SET BCM84834_XGP_AER_CTLr_XAUI1_HI_LO_SELf_SET
#define XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_GET BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_GET
#define XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_SET BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD45_SELf_SET
#define XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_GET BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_GET
#define XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_SET BCM84834_XGP_AER_CTLr_XAUI1_AER_DEVAD22_SELf_SET
#define XGP_AER_CTLr_XAUI2_HI_LO_SELf_GET BCM84834_XGP_AER_CTLr_XAUI2_HI_LO_SELf_GET
#define XGP_AER_CTLr_XAUI2_HI_LO_SELf_SET BCM84834_XGP_AER_CTLr_XAUI2_HI_LO_SELf_SET
#define XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_GET BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_GET
#define XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_SET BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD45_SELf_SET
#define XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_GET BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_GET
#define XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_SET BCM84834_XGP_AER_CTLr_XAUI2_AER_DEVAD22_SELf_SET
#define XGP_AER_CTLr_XFI1_HI_LO_SELf_GET BCM84834_XGP_AER_CTLr_XFI1_HI_LO_SELf_GET
#define XGP_AER_CTLr_XFI1_HI_LO_SELf_SET BCM84834_XGP_AER_CTLr_XFI1_HI_LO_SELf_SET
#define XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_GET BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_GET
#define XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_SET BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD45_SELf_SET
#define XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_GET BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_GET
#define XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_SET BCM84834_XGP_AER_CTLr_XFI1_AER_DEVAD22_SELf_SET
#define XGP_AER_CTLr_XFI2_HI_LO_SELf_GET BCM84834_XGP_AER_CTLr_XFI2_HI_LO_SELf_GET
#define XGP_AER_CTLr_XFI2_HI_LO_SELf_SET BCM84834_XGP_AER_CTLr_XFI2_HI_LO_SELf_SET
#define XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_GET BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_GET
#define XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_SET BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD45_SELf_SET
#define XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_GET BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_GET
#define XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_SET BCM84834_XGP_AER_CTLr_XFI2_AER_DEVAD22_SELf_SET
#define READ_XGP_AER_CTLr BCM84834_READ_XGP_AER_CTLr
#define WRITE_XGP_AER_CTLr BCM84834_WRITE_XGP_AER_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_AER_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_ARM_XFI1_AER
 * BLOCKS:   XGP
 * REGADDR:  0x412f
 * DEVAD:    30
 * DESC:     ARM XFI1 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     PRTAD            
 *     XFI_AER          
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_ARM_XFI1_AERr (0x001e412f | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_ARM_XFI1_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_ARM_XFI1_AER.
 *
 */
typedef union BCM84834_XGP_ARM_XFI1_AERr_s {
	uint32_t v[1];
	uint32_t xgp_arm_xfi1_aer[1];
	uint32_t _xgp_arm_xfi1_aer;
} BCM84834_XGP_ARM_XFI1_AERr_t;

#define BCM84834_XGP_ARM_XFI1_AERr_CLR(r) (r).xgp_arm_xfi1_aer[0] = 0
#define BCM84834_XGP_ARM_XFI1_AERr_SET(r,d) (r).xgp_arm_xfi1_aer[0] = d
#define BCM84834_XGP_ARM_XFI1_AERr_GET(r) (r).xgp_arm_xfi1_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_ARM_XFI1_AERr_DEVADf_GET(r) ((((r).xgp_arm_xfi1_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_ARM_XFI1_AERr_DEVADf_SET(r,f) (r).xgp_arm_xfi1_aer[0]=(((r).xgp_arm_xfi1_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_ARM_XFI1_AERr_XFI_AERf_GET(r) ((((r).xgp_arm_xfi1_aer[0]) >> 5) & 0x3f)
#define BCM84834_XGP_ARM_XFI1_AERr_XFI_AERf_SET(r,f) (r).xgp_arm_xfi1_aer[0]=(((r).xgp_arm_xfi1_aer[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCM84834_XGP_ARM_XFI1_AERr_PRTADf_GET(r) (((r).xgp_arm_xfi1_aer[0]) & 0x1f)
#define BCM84834_XGP_ARM_XFI1_AERr_PRTADf_SET(r,f) (r).xgp_arm_xfi1_aer[0]=(((r).xgp_arm_xfi1_aer[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_ARM_XFI1_AER.
 *
 */
#define BCM84834_READ_XGP_ARM_XFI1_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_ARM_XFI1_AERr,(_r._xgp_arm_xfi1_aer))
#define BCM84834_WRITE_XGP_ARM_XFI1_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_ARM_XFI1_AERr,(_r._xgp_arm_xfi1_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_ARM_XFI1_AERr BCM84834_XGP_ARM_XFI1_AERr
#define XGP_ARM_XFI1_AERr_SIZE BCM84834_XGP_ARM_XFI1_AERr_SIZE
typedef BCM84834_XGP_ARM_XFI1_AERr_t XGP_ARM_XFI1_AERr_t;
#define XGP_ARM_XFI1_AERr_CLR BCM84834_XGP_ARM_XFI1_AERr_CLR
#define XGP_ARM_XFI1_AERr_SET BCM84834_XGP_ARM_XFI1_AERr_SET
#define XGP_ARM_XFI1_AERr_GET BCM84834_XGP_ARM_XFI1_AERr_GET
#define XGP_ARM_XFI1_AERr_DEVADf_GET BCM84834_XGP_ARM_XFI1_AERr_DEVADf_GET
#define XGP_ARM_XFI1_AERr_DEVADf_SET BCM84834_XGP_ARM_XFI1_AERr_DEVADf_SET
#define XGP_ARM_XFI1_AERr_XFI_AERf_GET BCM84834_XGP_ARM_XFI1_AERr_XFI_AERf_GET
#define XGP_ARM_XFI1_AERr_XFI_AERf_SET BCM84834_XGP_ARM_XFI1_AERr_XFI_AERf_SET
#define XGP_ARM_XFI1_AERr_PRTADf_GET BCM84834_XGP_ARM_XFI1_AERr_PRTADf_GET
#define XGP_ARM_XFI1_AERr_PRTADf_SET BCM84834_XGP_ARM_XFI1_AERr_PRTADf_SET
#define READ_XGP_ARM_XFI1_AERr BCM84834_READ_XGP_ARM_XFI1_AERr
#define WRITE_XGP_ARM_XFI1_AERr BCM84834_WRITE_XGP_ARM_XFI1_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_ARM_XFI1_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_ARM_XFI2_AER
 * BLOCKS:   XGP
 * REGADDR:  0x4130
 * DEVAD:    30
 * DESC:     ARM XFI2 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     PRTAD            
 *     XFI_AER          
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_ARM_XFI2_AERr (0x001e4130 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_ARM_XFI2_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_ARM_XFI2_AER.
 *
 */
typedef union BCM84834_XGP_ARM_XFI2_AERr_s {
	uint32_t v[1];
	uint32_t xgp_arm_xfi2_aer[1];
	uint32_t _xgp_arm_xfi2_aer;
} BCM84834_XGP_ARM_XFI2_AERr_t;

#define BCM84834_XGP_ARM_XFI2_AERr_CLR(r) (r).xgp_arm_xfi2_aer[0] = 0
#define BCM84834_XGP_ARM_XFI2_AERr_SET(r,d) (r).xgp_arm_xfi2_aer[0] = d
#define BCM84834_XGP_ARM_XFI2_AERr_GET(r) (r).xgp_arm_xfi2_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_ARM_XFI2_AERr_DEVADf_GET(r) ((((r).xgp_arm_xfi2_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_ARM_XFI2_AERr_DEVADf_SET(r,f) (r).xgp_arm_xfi2_aer[0]=(((r).xgp_arm_xfi2_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_ARM_XFI2_AERr_XFI_AERf_GET(r) ((((r).xgp_arm_xfi2_aer[0]) >> 5) & 0x3f)
#define BCM84834_XGP_ARM_XFI2_AERr_XFI_AERf_SET(r,f) (r).xgp_arm_xfi2_aer[0]=(((r).xgp_arm_xfi2_aer[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCM84834_XGP_ARM_XFI2_AERr_PRTADf_GET(r) (((r).xgp_arm_xfi2_aer[0]) & 0x1f)
#define BCM84834_XGP_ARM_XFI2_AERr_PRTADf_SET(r,f) (r).xgp_arm_xfi2_aer[0]=(((r).xgp_arm_xfi2_aer[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_ARM_XFI2_AER.
 *
 */
#define BCM84834_READ_XGP_ARM_XFI2_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_ARM_XFI2_AERr,(_r._xgp_arm_xfi2_aer))
#define BCM84834_WRITE_XGP_ARM_XFI2_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_ARM_XFI2_AERr,(_r._xgp_arm_xfi2_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_ARM_XFI2_AERr BCM84834_XGP_ARM_XFI2_AERr
#define XGP_ARM_XFI2_AERr_SIZE BCM84834_XGP_ARM_XFI2_AERr_SIZE
typedef BCM84834_XGP_ARM_XFI2_AERr_t XGP_ARM_XFI2_AERr_t;
#define XGP_ARM_XFI2_AERr_CLR BCM84834_XGP_ARM_XFI2_AERr_CLR
#define XGP_ARM_XFI2_AERr_SET BCM84834_XGP_ARM_XFI2_AERr_SET
#define XGP_ARM_XFI2_AERr_GET BCM84834_XGP_ARM_XFI2_AERr_GET
#define XGP_ARM_XFI2_AERr_DEVADf_GET BCM84834_XGP_ARM_XFI2_AERr_DEVADf_GET
#define XGP_ARM_XFI2_AERr_DEVADf_SET BCM84834_XGP_ARM_XFI2_AERr_DEVADf_SET
#define XGP_ARM_XFI2_AERr_XFI_AERf_GET BCM84834_XGP_ARM_XFI2_AERr_XFI_AERf_GET
#define XGP_ARM_XFI2_AERr_XFI_AERf_SET BCM84834_XGP_ARM_XFI2_AERr_XFI_AERf_SET
#define XGP_ARM_XFI2_AERr_PRTADf_GET BCM84834_XGP_ARM_XFI2_AERr_PRTADf_GET
#define XGP_ARM_XFI2_AERr_PRTADf_SET BCM84834_XGP_ARM_XFI2_AERr_PRTADf_SET
#define READ_XGP_ARM_XFI2_AERr BCM84834_READ_XGP_ARM_XFI2_AERr
#define WRITE_XGP_ARM_XFI2_AERr BCM84834_WRITE_XGP_ARM_XFI2_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_ARM_XFI2_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XFI1_AER
 * BLOCKS:   XGP
 * REGADDR:  0x4131
 * DEVAD:    30
 * DESC:     XFI1 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     PRTAD            
 *     XFI_AER          
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_XFI1_AERr (0x001e4131 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XFI1_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XFI1_AER.
 *
 */
typedef union BCM84834_XGP_XFI1_AERr_s {
	uint32_t v[1];
	uint32_t xgp_xfi1_aer[1];
	uint32_t _xgp_xfi1_aer;
} BCM84834_XGP_XFI1_AERr_t;

#define BCM84834_XGP_XFI1_AERr_CLR(r) (r).xgp_xfi1_aer[0] = 0
#define BCM84834_XGP_XFI1_AERr_SET(r,d) (r).xgp_xfi1_aer[0] = d
#define BCM84834_XGP_XFI1_AERr_GET(r) (r).xgp_xfi1_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XFI1_AERr_DEVADf_GET(r) ((((r).xgp_xfi1_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_XFI1_AERr_DEVADf_SET(r,f) (r).xgp_xfi1_aer[0]=(((r).xgp_xfi1_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_XFI1_AERr_XFI_AERf_GET(r) ((((r).xgp_xfi1_aer[0]) >> 5) & 0x3f)
#define BCM84834_XGP_XFI1_AERr_XFI_AERf_SET(r,f) (r).xgp_xfi1_aer[0]=(((r).xgp_xfi1_aer[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCM84834_XGP_XFI1_AERr_PRTADf_GET(r) (((r).xgp_xfi1_aer[0]) & 0x1f)
#define BCM84834_XGP_XFI1_AERr_PRTADf_SET(r,f) (r).xgp_xfi1_aer[0]=(((r).xgp_xfi1_aer[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_XFI1_AER.
 *
 */
#define BCM84834_READ_XGP_XFI1_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XFI1_AERr,(_r._xgp_xfi1_aer))
#define BCM84834_WRITE_XGP_XFI1_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XFI1_AERr,(_r._xgp_xfi1_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XFI1_AERr BCM84834_XGP_XFI1_AERr
#define XGP_XFI1_AERr_SIZE BCM84834_XGP_XFI1_AERr_SIZE
typedef BCM84834_XGP_XFI1_AERr_t XGP_XFI1_AERr_t;
#define XGP_XFI1_AERr_CLR BCM84834_XGP_XFI1_AERr_CLR
#define XGP_XFI1_AERr_SET BCM84834_XGP_XFI1_AERr_SET
#define XGP_XFI1_AERr_GET BCM84834_XGP_XFI1_AERr_GET
#define XGP_XFI1_AERr_DEVADf_GET BCM84834_XGP_XFI1_AERr_DEVADf_GET
#define XGP_XFI1_AERr_DEVADf_SET BCM84834_XGP_XFI1_AERr_DEVADf_SET
#define XGP_XFI1_AERr_XFI_AERf_GET BCM84834_XGP_XFI1_AERr_XFI_AERf_GET
#define XGP_XFI1_AERr_XFI_AERf_SET BCM84834_XGP_XFI1_AERr_XFI_AERf_SET
#define XGP_XFI1_AERr_PRTADf_GET BCM84834_XGP_XFI1_AERr_PRTADf_GET
#define XGP_XFI1_AERr_PRTADf_SET BCM84834_XGP_XFI1_AERr_PRTADf_SET
#define READ_XGP_XFI1_AERr BCM84834_READ_XGP_XFI1_AERr
#define WRITE_XGP_XFI1_AERr BCM84834_WRITE_XGP_XFI1_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XFI1_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XFI2_AER
 * BLOCKS:   XGP
 * REGADDR:  0x4132
 * DEVAD:    30
 * DESC:     XFI2 Address Extension Register
 * SIZE:     32
 * FIELDS:
 *     PRTAD            
 *     XFI_AER          
 *     DEVAD            
 *
 ******************************************************************************/
#define BCM84834_XGP_XFI2_AERr (0x001e4132 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XFI2_AERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XFI2_AER.
 *
 */
typedef union BCM84834_XGP_XFI2_AERr_s {
	uint32_t v[1];
	uint32_t xgp_xfi2_aer[1];
	uint32_t _xgp_xfi2_aer;
} BCM84834_XGP_XFI2_AERr_t;

#define BCM84834_XGP_XFI2_AERr_CLR(r) (r).xgp_xfi2_aer[0] = 0
#define BCM84834_XGP_XFI2_AERr_SET(r,d) (r).xgp_xfi2_aer[0] = d
#define BCM84834_XGP_XFI2_AERr_GET(r) (r).xgp_xfi2_aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XFI2_AERr_DEVADf_GET(r) ((((r).xgp_xfi2_aer[0]) >> 11) & 0x1f)
#define BCM84834_XGP_XFI2_AERr_DEVADf_SET(r,f) (r).xgp_xfi2_aer[0]=(((r).xgp_xfi2_aer[0] & ~((uint32_t)0x1f << 11)) | ((((uint32_t)f) & 0x1f) << 11))
#define BCM84834_XGP_XFI2_AERr_XFI_AERf_GET(r) ((((r).xgp_xfi2_aer[0]) >> 5) & 0x3f)
#define BCM84834_XGP_XFI2_AERr_XFI_AERf_SET(r,f) (r).xgp_xfi2_aer[0]=(((r).xgp_xfi2_aer[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCM84834_XGP_XFI2_AERr_PRTADf_GET(r) (((r).xgp_xfi2_aer[0]) & 0x1f)
#define BCM84834_XGP_XFI2_AERr_PRTADf_SET(r,f) (r).xgp_xfi2_aer[0]=(((r).xgp_xfi2_aer[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access XGP_XFI2_AER.
 *
 */
#define BCM84834_READ_XGP_XFI2_AERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XFI2_AERr,(_r._xgp_xfi2_aer))
#define BCM84834_WRITE_XGP_XFI2_AERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XFI2_AERr,(_r._xgp_xfi2_aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XFI2_AERr BCM84834_XGP_XFI2_AERr
#define XGP_XFI2_AERr_SIZE BCM84834_XGP_XFI2_AERr_SIZE
typedef BCM84834_XGP_XFI2_AERr_t XGP_XFI2_AERr_t;
#define XGP_XFI2_AERr_CLR BCM84834_XGP_XFI2_AERr_CLR
#define XGP_XFI2_AERr_SET BCM84834_XGP_XFI2_AERr_SET
#define XGP_XFI2_AERr_GET BCM84834_XGP_XFI2_AERr_GET
#define XGP_XFI2_AERr_DEVADf_GET BCM84834_XGP_XFI2_AERr_DEVADf_GET
#define XGP_XFI2_AERr_DEVADf_SET BCM84834_XGP_XFI2_AERr_DEVADf_SET
#define XGP_XFI2_AERr_XFI_AERf_GET BCM84834_XGP_XFI2_AERr_XFI_AERf_GET
#define XGP_XFI2_AERr_XFI_AERf_SET BCM84834_XGP_XFI2_AERr_XFI_AERf_SET
#define XGP_XFI2_AERr_PRTADf_GET BCM84834_XGP_XFI2_AERr_PRTADf_GET
#define XGP_XFI2_AERr_PRTADf_SET BCM84834_XGP_XFI2_AERr_PRTADf_SET
#define READ_XGP_XFI2_AERr BCM84834_READ_XGP_XFI2_AERr
#define WRITE_XGP_XFI2_AERr BCM84834_WRITE_XGP_XFI2_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XFI2_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_GPHY_XFP_UPPER
 * BLOCKS:   XGP
 * REGADDR:  0x4133
 * DEVAD:    30
 * DESC:     GPHY XFP Upper Address
 * SIZE:     32
 * FIELDS:
 *     UPPER_ADDR       
 *
 ******************************************************************************/
#define BCM84834_XGP_GPHY_XFP_UPPERr (0x001e4133 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_GPHY_XFP_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_GPHY_XFP_UPPER.
 *
 */
typedef union BCM84834_XGP_GPHY_XFP_UPPERr_s {
	uint32_t v[1];
	uint32_t xgp_gphy_xfp_upper[1];
	uint32_t _xgp_gphy_xfp_upper;
} BCM84834_XGP_GPHY_XFP_UPPERr_t;

#define BCM84834_XGP_GPHY_XFP_UPPERr_CLR(r) (r).xgp_gphy_xfp_upper[0] = 0
#define BCM84834_XGP_GPHY_XFP_UPPERr_SET(r,d) (r).xgp_gphy_xfp_upper[0] = d
#define BCM84834_XGP_GPHY_XFP_UPPERr_GET(r) (r).xgp_gphy_xfp_upper[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_GET(r) ((((r).xgp_gphy_xfp_upper[0]) >> 8) & 0xff)
#define BCM84834_XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_SET(r,f) (r).xgp_gphy_xfp_upper[0]=(((r).xgp_gphy_xfp_upper[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))

/*
 * These macros can be used to access XGP_GPHY_XFP_UPPER.
 *
 */
#define BCM84834_READ_XGP_GPHY_XFP_UPPERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_GPHY_XFP_UPPERr,(_r._xgp_gphy_xfp_upper))
#define BCM84834_WRITE_XGP_GPHY_XFP_UPPERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_GPHY_XFP_UPPERr,(_r._xgp_gphy_xfp_upper))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_GPHY_XFP_UPPERr BCM84834_XGP_GPHY_XFP_UPPERr
#define XGP_GPHY_XFP_UPPERr_SIZE BCM84834_XGP_GPHY_XFP_UPPERr_SIZE
typedef BCM84834_XGP_GPHY_XFP_UPPERr_t XGP_GPHY_XFP_UPPERr_t;
#define XGP_GPHY_XFP_UPPERr_CLR BCM84834_XGP_GPHY_XFP_UPPERr_CLR
#define XGP_GPHY_XFP_UPPERr_SET BCM84834_XGP_GPHY_XFP_UPPERr_SET
#define XGP_GPHY_XFP_UPPERr_GET BCM84834_XGP_GPHY_XFP_UPPERr_GET
#define XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_GET BCM84834_XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_GET
#define XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_SET BCM84834_XGP_GPHY_XFP_UPPERr_UPPER_ADDRf_SET
#define READ_XGP_GPHY_XFP_UPPERr BCM84834_READ_XGP_GPHY_XFP_UPPERr
#define WRITE_XGP_GPHY_XFP_UPPERr BCM84834_WRITE_XGP_GPHY_XFP_UPPERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_GPHY_XFP_UPPERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI1_XFP_UPPER
 * BLOCKS:   XGP
 * REGADDR:  0x4134
 * DEVAD:    30
 * DESC:     XAUI1 XFP Upper Address
 * SIZE:     32
 * FIELDS:
 *     UPPER_ADDR       
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI1_XFP_UPPERr (0x001e4134 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI1_XFP_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI1_XFP_UPPER.
 *
 */
typedef union BCM84834_XGP_XAUI1_XFP_UPPERr_s {
	uint32_t v[1];
	uint32_t xgp_xaui1_xfp_upper[1];
	uint32_t _xgp_xaui1_xfp_upper;
} BCM84834_XGP_XAUI1_XFP_UPPERr_t;

#define BCM84834_XGP_XAUI1_XFP_UPPERr_CLR(r) (r).xgp_xaui1_xfp_upper[0] = 0
#define BCM84834_XGP_XAUI1_XFP_UPPERr_SET(r,d) (r).xgp_xaui1_xfp_upper[0] = d
#define BCM84834_XGP_XAUI1_XFP_UPPERr_GET(r) (r).xgp_xaui1_xfp_upper[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_GET(r) ((((r).xgp_xaui1_xfp_upper[0]) >> 8) & 0xff)
#define BCM84834_XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_SET(r,f) (r).xgp_xaui1_xfp_upper[0]=(((r).xgp_xaui1_xfp_upper[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))

/*
 * These macros can be used to access XGP_XAUI1_XFP_UPPER.
 *
 */
#define BCM84834_READ_XGP_XAUI1_XFP_UPPERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI1_XFP_UPPERr,(_r._xgp_xaui1_xfp_upper))
#define BCM84834_WRITE_XGP_XAUI1_XFP_UPPERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI1_XFP_UPPERr,(_r._xgp_xaui1_xfp_upper))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI1_XFP_UPPERr BCM84834_XGP_XAUI1_XFP_UPPERr
#define XGP_XAUI1_XFP_UPPERr_SIZE BCM84834_XGP_XAUI1_XFP_UPPERr_SIZE
typedef BCM84834_XGP_XAUI1_XFP_UPPERr_t XGP_XAUI1_XFP_UPPERr_t;
#define XGP_XAUI1_XFP_UPPERr_CLR BCM84834_XGP_XAUI1_XFP_UPPERr_CLR
#define XGP_XAUI1_XFP_UPPERr_SET BCM84834_XGP_XAUI1_XFP_UPPERr_SET
#define XGP_XAUI1_XFP_UPPERr_GET BCM84834_XGP_XAUI1_XFP_UPPERr_GET
#define XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_GET BCM84834_XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_GET
#define XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_SET BCM84834_XGP_XAUI1_XFP_UPPERr_UPPER_ADDRf_SET
#define READ_XGP_XAUI1_XFP_UPPERr BCM84834_READ_XGP_XAUI1_XFP_UPPERr
#define WRITE_XGP_XAUI1_XFP_UPPERr BCM84834_WRITE_XGP_XAUI1_XFP_UPPERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI1_XFP_UPPERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XAUI2_XFP_UPPER
 * BLOCKS:   XGP
 * REGADDR:  0x4136
 * DEVAD:    30
 * DESC:     XAUI2 XFP Upper Address
 * SIZE:     32
 * FIELDS:
 *     UPPER_ADDR       
 *
 ******************************************************************************/
#define BCM84834_XGP_XAUI2_XFP_UPPERr (0x001e4136 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XAUI2_XFP_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XAUI2_XFP_UPPER.
 *
 */
typedef union BCM84834_XGP_XAUI2_XFP_UPPERr_s {
	uint32_t v[1];
	uint32_t xgp_xaui2_xfp_upper[1];
	uint32_t _xgp_xaui2_xfp_upper;
} BCM84834_XGP_XAUI2_XFP_UPPERr_t;

#define BCM84834_XGP_XAUI2_XFP_UPPERr_CLR(r) (r).xgp_xaui2_xfp_upper[0] = 0
#define BCM84834_XGP_XAUI2_XFP_UPPERr_SET(r,d) (r).xgp_xaui2_xfp_upper[0] = d
#define BCM84834_XGP_XAUI2_XFP_UPPERr_GET(r) (r).xgp_xaui2_xfp_upper[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_GET(r) ((((r).xgp_xaui2_xfp_upper[0]) >> 8) & 0xff)
#define BCM84834_XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_SET(r,f) (r).xgp_xaui2_xfp_upper[0]=(((r).xgp_xaui2_xfp_upper[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))

/*
 * These macros can be used to access XGP_XAUI2_XFP_UPPER.
 *
 */
#define BCM84834_READ_XGP_XAUI2_XFP_UPPERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XAUI2_XFP_UPPERr,(_r._xgp_xaui2_xfp_upper))
#define BCM84834_WRITE_XGP_XAUI2_XFP_UPPERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XAUI2_XFP_UPPERr,(_r._xgp_xaui2_xfp_upper))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XAUI2_XFP_UPPERr BCM84834_XGP_XAUI2_XFP_UPPERr
#define XGP_XAUI2_XFP_UPPERr_SIZE BCM84834_XGP_XAUI2_XFP_UPPERr_SIZE
typedef BCM84834_XGP_XAUI2_XFP_UPPERr_t XGP_XAUI2_XFP_UPPERr_t;
#define XGP_XAUI2_XFP_UPPERr_CLR BCM84834_XGP_XAUI2_XFP_UPPERr_CLR
#define XGP_XAUI2_XFP_UPPERr_SET BCM84834_XGP_XAUI2_XFP_UPPERr_SET
#define XGP_XAUI2_XFP_UPPERr_GET BCM84834_XGP_XAUI2_XFP_UPPERr_GET
#define XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_GET BCM84834_XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_GET
#define XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_SET BCM84834_XGP_XAUI2_XFP_UPPERr_UPPER_ADDRf_SET
#define READ_XGP_XAUI2_XFP_UPPERr BCM84834_READ_XGP_XAUI2_XFP_UPPERr
#define WRITE_XGP_XAUI2_XFP_UPPERr BCM84834_WRITE_XGP_XAUI2_XFP_UPPERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XAUI2_XFP_UPPERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XFI1_XFP_UPPER
 * BLOCKS:   XGP
 * REGADDR:  0x4138
 * DEVAD:    30
 * DESC:     XFI1 XFP Upper Address
 * SIZE:     32
 * FIELDS:
 *     UPPER_ADDR       
 *
 ******************************************************************************/
#define BCM84834_XGP_XFI1_XFP_UPPERr (0x001e4138 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XFI1_XFP_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XFI1_XFP_UPPER.
 *
 */
typedef union BCM84834_XGP_XFI1_XFP_UPPERr_s {
	uint32_t v[1];
	uint32_t xgp_xfi1_xfp_upper[1];
	uint32_t _xgp_xfi1_xfp_upper;
} BCM84834_XGP_XFI1_XFP_UPPERr_t;

#define BCM84834_XGP_XFI1_XFP_UPPERr_CLR(r) (r).xgp_xfi1_xfp_upper[0] = 0
#define BCM84834_XGP_XFI1_XFP_UPPERr_SET(r,d) (r).xgp_xfi1_xfp_upper[0] = d
#define BCM84834_XGP_XFI1_XFP_UPPERr_GET(r) (r).xgp_xfi1_xfp_upper[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_GET(r) ((((r).xgp_xfi1_xfp_upper[0]) >> 8) & 0xff)
#define BCM84834_XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_SET(r,f) (r).xgp_xfi1_xfp_upper[0]=(((r).xgp_xfi1_xfp_upper[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))

/*
 * These macros can be used to access XGP_XFI1_XFP_UPPER.
 *
 */
#define BCM84834_READ_XGP_XFI1_XFP_UPPERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XFI1_XFP_UPPERr,(_r._xgp_xfi1_xfp_upper))
#define BCM84834_WRITE_XGP_XFI1_XFP_UPPERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XFI1_XFP_UPPERr,(_r._xgp_xfi1_xfp_upper))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XFI1_XFP_UPPERr BCM84834_XGP_XFI1_XFP_UPPERr
#define XGP_XFI1_XFP_UPPERr_SIZE BCM84834_XGP_XFI1_XFP_UPPERr_SIZE
typedef BCM84834_XGP_XFI1_XFP_UPPERr_t XGP_XFI1_XFP_UPPERr_t;
#define XGP_XFI1_XFP_UPPERr_CLR BCM84834_XGP_XFI1_XFP_UPPERr_CLR
#define XGP_XFI1_XFP_UPPERr_SET BCM84834_XGP_XFI1_XFP_UPPERr_SET
#define XGP_XFI1_XFP_UPPERr_GET BCM84834_XGP_XFI1_XFP_UPPERr_GET
#define XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_GET BCM84834_XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_GET
#define XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_SET BCM84834_XGP_XFI1_XFP_UPPERr_UPPER_ADDRf_SET
#define READ_XGP_XFI1_XFP_UPPERr BCM84834_READ_XGP_XFI1_XFP_UPPERr
#define WRITE_XGP_XFI1_XFP_UPPERr BCM84834_WRITE_XGP_XFI1_XFP_UPPERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XFI1_XFP_UPPERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  XGP_XFI2_XFP_UPPER
 * BLOCKS:   XGP
 * REGADDR:  0x4139
 * DEVAD:    30
 * DESC:     XFI2 XFP Upper Address
 * SIZE:     32
 * FIELDS:
 *     UPPER_ADDR       
 *
 ******************************************************************************/
#define BCM84834_XGP_XFI2_XFP_UPPERr (0x001e4139 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_XGP_XFI2_XFP_UPPERr_SIZE 4

/*
 * This structure should be used to declare and program XGP_XFI2_XFP_UPPER.
 *
 */
typedef union BCM84834_XGP_XFI2_XFP_UPPERr_s {
	uint32_t v[1];
	uint32_t xgp_xfi2_xfp_upper[1];
	uint32_t _xgp_xfi2_xfp_upper;
} BCM84834_XGP_XFI2_XFP_UPPERr_t;

#define BCM84834_XGP_XFI2_XFP_UPPERr_CLR(r) (r).xgp_xfi2_xfp_upper[0] = 0
#define BCM84834_XGP_XFI2_XFP_UPPERr_SET(r,d) (r).xgp_xfi2_xfp_upper[0] = d
#define BCM84834_XGP_XFI2_XFP_UPPERr_GET(r) (r).xgp_xfi2_xfp_upper[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_GET(r) ((((r).xgp_xfi2_xfp_upper[0]) >> 8) & 0xff)
#define BCM84834_XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_SET(r,f) (r).xgp_xfi2_xfp_upper[0]=(((r).xgp_xfi2_xfp_upper[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))

/*
 * These macros can be used to access XGP_XFI2_XFP_UPPER.
 *
 */
#define BCM84834_READ_XGP_XFI2_XFP_UPPERr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_XGP_XFI2_XFP_UPPERr,(_r._xgp_xfi2_xfp_upper))
#define BCM84834_WRITE_XGP_XFI2_XFP_UPPERr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_XGP_XFI2_XFP_UPPERr,(_r._xgp_xfi2_xfp_upper))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGP_XFI2_XFP_UPPERr BCM84834_XGP_XFI2_XFP_UPPERr
#define XGP_XFI2_XFP_UPPERr_SIZE BCM84834_XGP_XFI2_XFP_UPPERr_SIZE
typedef BCM84834_XGP_XFI2_XFP_UPPERr_t XGP_XFI2_XFP_UPPERr_t;
#define XGP_XFI2_XFP_UPPERr_CLR BCM84834_XGP_XFI2_XFP_UPPERr_CLR
#define XGP_XFI2_XFP_UPPERr_SET BCM84834_XGP_XFI2_XFP_UPPERr_SET
#define XGP_XFI2_XFP_UPPERr_GET BCM84834_XGP_XFI2_XFP_UPPERr_GET
#define XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_GET BCM84834_XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_GET
#define XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_SET BCM84834_XGP_XFI2_XFP_UPPERr_UPPER_ADDRf_SET
#define READ_XGP_XFI2_XFP_UPPERr BCM84834_READ_XGP_XFI2_XFP_UPPERr
#define WRITE_XGP_XFI2_XFP_UPPERr BCM84834_WRITE_XGP_XFI2_XFP_UPPERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_XGP_XFI2_XFP_UPPERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_RST_0
 * BLOCKS:   CRG
 * REGADDR:  0x4180
 * DEVAD:    30
 * DESC:     Block Reset Control 0 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_TEMPMON     
 *     SRST_ADCCAL_RDB  
 *     SRST_ADCCAL      
 *     SRST_ADCCAL_FIFO 
 *     SRST_ARM_POTRST  
 *     SRST_DDFS        
 *     SRST_LDPC_RDB    
 *     SRST_LDPC        
 *     SRST_ARM_TRESET  
 *     SRST_IEEE_PMA    
 *     SRST_PHASECTL    
 *     SRST_IFC_RDB     
 *     SRST_IFC         
 *
 ******************************************************************************/
#define BCM84834_CRG_RST_0r (0x001e4180 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_RST_0r_SIZE 4

/*
 * This structure should be used to declare and program CRG_RST_0.
 *
 */
typedef union BCM84834_CRG_RST_0r_s {
	uint32_t v[1];
	uint32_t crg_rst_0[1];
	uint32_t _crg_rst_0;
} BCM84834_CRG_RST_0r_t;

#define BCM84834_CRG_RST_0r_CLR(r) (r).crg_rst_0[0] = 0
#define BCM84834_CRG_RST_0r_SET(r,d) (r).crg_rst_0[0] = d
#define BCM84834_CRG_RST_0r_GET(r) (r).crg_rst_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_RST_0r_SRST_IFCf_GET(r) ((((r).crg_rst_0[0]) >> 15) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_IFCf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_RST_0r_SRST_IFC_RDBf_GET(r) ((((r).crg_rst_0[0]) >> 14) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_IFC_RDBf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_CRG_RST_0r_SRST_PHASECTLf_GET(r) ((((r).crg_rst_0[0]) >> 13) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_PHASECTLf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_CRG_RST_0r_SRST_IEEE_PMAf_GET(r) ((((r).crg_rst_0[0]) >> 10) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_IEEE_PMAf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_CRG_RST_0r_SRST_ARM_TRESETf_GET(r) ((((r).crg_rst_0[0]) >> 9) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_ARM_TRESETf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_RST_0r_SRST_LDPCf_GET(r) ((((r).crg_rst_0[0]) >> 8) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_LDPCf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_RST_0r_SRST_LDPC_RDBf_GET(r) ((((r).crg_rst_0[0]) >> 7) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_LDPC_RDBf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_CRG_RST_0r_SRST_DDFSf_GET(r) ((((r).crg_rst_0[0]) >> 6) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_DDFSf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_RST_0r_SRST_ARM_POTRSTf_GET(r) ((((r).crg_rst_0[0]) >> 5) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_ARM_POTRSTf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_RST_0r_SRST_ADCCAL_FIFOf_GET(r) ((((r).crg_rst_0[0]) >> 3) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_ADCCAL_FIFOf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_RST_0r_SRST_ADCCALf_GET(r) ((((r).crg_rst_0[0]) >> 2) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_ADCCALf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_RST_0r_SRST_ADCCAL_RDBf_GET(r) ((((r).crg_rst_0[0]) >> 1) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_ADCCAL_RDBf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_RST_0r_SRST_TEMPMONf_GET(r) (((r).crg_rst_0[0]) & 0x1)
#define BCM84834_CRG_RST_0r_SRST_TEMPMONf_SET(r,f) (r).crg_rst_0[0]=(((r).crg_rst_0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_RST_0.
 *
 */
#define BCM84834_READ_CRG_RST_0r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_RST_0r,(_r._crg_rst_0))
#define BCM84834_WRITE_CRG_RST_0r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_RST_0r,(_r._crg_rst_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_RST_0r BCM84834_CRG_RST_0r
#define CRG_RST_0r_SIZE BCM84834_CRG_RST_0r_SIZE
typedef BCM84834_CRG_RST_0r_t CRG_RST_0r_t;
#define CRG_RST_0r_CLR BCM84834_CRG_RST_0r_CLR
#define CRG_RST_0r_SET BCM84834_CRG_RST_0r_SET
#define CRG_RST_0r_GET BCM84834_CRG_RST_0r_GET
#define CRG_RST_0r_SRST_IFCf_GET BCM84834_CRG_RST_0r_SRST_IFCf_GET
#define CRG_RST_0r_SRST_IFCf_SET BCM84834_CRG_RST_0r_SRST_IFCf_SET
#define CRG_RST_0r_SRST_IFC_RDBf_GET BCM84834_CRG_RST_0r_SRST_IFC_RDBf_GET
#define CRG_RST_0r_SRST_IFC_RDBf_SET BCM84834_CRG_RST_0r_SRST_IFC_RDBf_SET
#define CRG_RST_0r_SRST_PHASECTLf_GET BCM84834_CRG_RST_0r_SRST_PHASECTLf_GET
#define CRG_RST_0r_SRST_PHASECTLf_SET BCM84834_CRG_RST_0r_SRST_PHASECTLf_SET
#define CRG_RST_0r_SRST_IEEE_PMAf_GET BCM84834_CRG_RST_0r_SRST_IEEE_PMAf_GET
#define CRG_RST_0r_SRST_IEEE_PMAf_SET BCM84834_CRG_RST_0r_SRST_IEEE_PMAf_SET
#define CRG_RST_0r_SRST_ARM_TRESETf_GET BCM84834_CRG_RST_0r_SRST_ARM_TRESETf_GET
#define CRG_RST_0r_SRST_ARM_TRESETf_SET BCM84834_CRG_RST_0r_SRST_ARM_TRESETf_SET
#define CRG_RST_0r_SRST_LDPCf_GET BCM84834_CRG_RST_0r_SRST_LDPCf_GET
#define CRG_RST_0r_SRST_LDPCf_SET BCM84834_CRG_RST_0r_SRST_LDPCf_SET
#define CRG_RST_0r_SRST_LDPC_RDBf_GET BCM84834_CRG_RST_0r_SRST_LDPC_RDBf_GET
#define CRG_RST_0r_SRST_LDPC_RDBf_SET BCM84834_CRG_RST_0r_SRST_LDPC_RDBf_SET
#define CRG_RST_0r_SRST_DDFSf_GET BCM84834_CRG_RST_0r_SRST_DDFSf_GET
#define CRG_RST_0r_SRST_DDFSf_SET BCM84834_CRG_RST_0r_SRST_DDFSf_SET
#define CRG_RST_0r_SRST_ARM_POTRSTf_GET BCM84834_CRG_RST_0r_SRST_ARM_POTRSTf_GET
#define CRG_RST_0r_SRST_ARM_POTRSTf_SET BCM84834_CRG_RST_0r_SRST_ARM_POTRSTf_SET
#define CRG_RST_0r_SRST_ADCCAL_FIFOf_GET BCM84834_CRG_RST_0r_SRST_ADCCAL_FIFOf_GET
#define CRG_RST_0r_SRST_ADCCAL_FIFOf_SET BCM84834_CRG_RST_0r_SRST_ADCCAL_FIFOf_SET
#define CRG_RST_0r_SRST_ADCCALf_GET BCM84834_CRG_RST_0r_SRST_ADCCALf_GET
#define CRG_RST_0r_SRST_ADCCALf_SET BCM84834_CRG_RST_0r_SRST_ADCCALf_SET
#define CRG_RST_0r_SRST_ADCCAL_RDBf_GET BCM84834_CRG_RST_0r_SRST_ADCCAL_RDBf_GET
#define CRG_RST_0r_SRST_ADCCAL_RDBf_SET BCM84834_CRG_RST_0r_SRST_ADCCAL_RDBf_SET
#define CRG_RST_0r_SRST_TEMPMONf_GET BCM84834_CRG_RST_0r_SRST_TEMPMONf_GET
#define CRG_RST_0r_SRST_TEMPMONf_SET BCM84834_CRG_RST_0r_SRST_TEMPMONf_SET
#define READ_CRG_RST_0r BCM84834_READ_CRG_RST_0r
#define WRITE_CRG_RST_0r BCM84834_WRITE_CRG_RST_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_RST_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_RST_1
 * BLOCKS:   CRG
 * REGADDR:  0x4181
 * DEVAD:    30
 * DESC:     Block Reset Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_AFE_RDB     
 *     SRST_DFE         
 *     SRST_ARM_PDBG    
 *     SRST_ARM_DMA     
 *     SRST_ARM_VIC     
 *     SRST_ARM_AHB     
 *     SRST_ARM         
 *     SRST_ARM_SPI     
 *     SRST_TIMER       
 *     SRST_XGTX_RDB    
 *     SRST_XGTX        
 *     SRST_RDB32_IF_TIMER 
 *     SRST_RDB16       
 *     SRST_RDB32       
 *
 ******************************************************************************/
#define BCM84834_CRG_RST_1r (0x001e4181 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_RST_1r_SIZE 4

/*
 * This structure should be used to declare and program CRG_RST_1.
 *
 */
typedef union BCM84834_CRG_RST_1r_s {
	uint32_t v[1];
	uint32_t crg_rst_1[1];
	uint32_t _crg_rst_1;
} BCM84834_CRG_RST_1r_t;

#define BCM84834_CRG_RST_1r_CLR(r) (r).crg_rst_1[0] = 0
#define BCM84834_CRG_RST_1r_SET(r,d) (r).crg_rst_1[0] = d
#define BCM84834_CRG_RST_1r_GET(r) (r).crg_rst_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_RST_1r_SRST_RDB32f_GET(r) ((((r).crg_rst_1[0]) >> 15) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_RDB32f_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_RST_1r_SRST_RDB16f_GET(r) ((((r).crg_rst_1[0]) >> 14) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_RDB16f_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_CRG_RST_1r_SRST_RDB32_IF_TIMERf_GET(r) ((((r).crg_rst_1[0]) >> 13) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_RDB32_IF_TIMERf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_CRG_RST_1r_SRST_XGTXf_GET(r) ((((r).crg_rst_1[0]) >> 11) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_XGTXf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_CRG_RST_1r_SRST_XGTX_RDBf_GET(r) ((((r).crg_rst_1[0]) >> 10) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_XGTX_RDBf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_CRG_RST_1r_SRST_TIMERf_GET(r) ((((r).crg_rst_1[0]) >> 9) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_TIMERf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_RST_1r_SRST_ARM_SPIf_GET(r) ((((r).crg_rst_1[0]) >> 8) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARM_SPIf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_RST_1r_SRST_ARMf_GET(r) ((((r).crg_rst_1[0]) >> 6) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARMf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_RST_1r_SRST_ARM_AHBf_GET(r) ((((r).crg_rst_1[0]) >> 5) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARM_AHBf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_RST_1r_SRST_ARM_VICf_GET(r) ((((r).crg_rst_1[0]) >> 4) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARM_VICf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_CRG_RST_1r_SRST_ARM_DMAf_GET(r) ((((r).crg_rst_1[0]) >> 3) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARM_DMAf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_RST_1r_SRST_ARM_PDBGf_GET(r) ((((r).crg_rst_1[0]) >> 2) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_ARM_PDBGf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_RST_1r_SRST_DFEf_GET(r) ((((r).crg_rst_1[0]) >> 1) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_DFEf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_RST_1r_SRST_AFE_RDBf_GET(r) (((r).crg_rst_1[0]) & 0x1)
#define BCM84834_CRG_RST_1r_SRST_AFE_RDBf_SET(r,f) (r).crg_rst_1[0]=(((r).crg_rst_1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_RST_1.
 *
 */
#define BCM84834_READ_CRG_RST_1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_RST_1r,(_r._crg_rst_1))
#define BCM84834_WRITE_CRG_RST_1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_RST_1r,(_r._crg_rst_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_RST_1r BCM84834_CRG_RST_1r
#define CRG_RST_1r_SIZE BCM84834_CRG_RST_1r_SIZE
typedef BCM84834_CRG_RST_1r_t CRG_RST_1r_t;
#define CRG_RST_1r_CLR BCM84834_CRG_RST_1r_CLR
#define CRG_RST_1r_SET BCM84834_CRG_RST_1r_SET
#define CRG_RST_1r_GET BCM84834_CRG_RST_1r_GET
#define CRG_RST_1r_SRST_RDB32f_GET BCM84834_CRG_RST_1r_SRST_RDB32f_GET
#define CRG_RST_1r_SRST_RDB32f_SET BCM84834_CRG_RST_1r_SRST_RDB32f_SET
#define CRG_RST_1r_SRST_RDB16f_GET BCM84834_CRG_RST_1r_SRST_RDB16f_GET
#define CRG_RST_1r_SRST_RDB16f_SET BCM84834_CRG_RST_1r_SRST_RDB16f_SET
#define CRG_RST_1r_SRST_RDB32_IF_TIMERf_GET BCM84834_CRG_RST_1r_SRST_RDB32_IF_TIMERf_GET
#define CRG_RST_1r_SRST_RDB32_IF_TIMERf_SET BCM84834_CRG_RST_1r_SRST_RDB32_IF_TIMERf_SET
#define CRG_RST_1r_SRST_XGTXf_GET BCM84834_CRG_RST_1r_SRST_XGTXf_GET
#define CRG_RST_1r_SRST_XGTXf_SET BCM84834_CRG_RST_1r_SRST_XGTXf_SET
#define CRG_RST_1r_SRST_XGTX_RDBf_GET BCM84834_CRG_RST_1r_SRST_XGTX_RDBf_GET
#define CRG_RST_1r_SRST_XGTX_RDBf_SET BCM84834_CRG_RST_1r_SRST_XGTX_RDBf_SET
#define CRG_RST_1r_SRST_TIMERf_GET BCM84834_CRG_RST_1r_SRST_TIMERf_GET
#define CRG_RST_1r_SRST_TIMERf_SET BCM84834_CRG_RST_1r_SRST_TIMERf_SET
#define CRG_RST_1r_SRST_ARM_SPIf_GET BCM84834_CRG_RST_1r_SRST_ARM_SPIf_GET
#define CRG_RST_1r_SRST_ARM_SPIf_SET BCM84834_CRG_RST_1r_SRST_ARM_SPIf_SET
#define CRG_RST_1r_SRST_ARMf_GET BCM84834_CRG_RST_1r_SRST_ARMf_GET
#define CRG_RST_1r_SRST_ARMf_SET BCM84834_CRG_RST_1r_SRST_ARMf_SET
#define CRG_RST_1r_SRST_ARM_AHBf_GET BCM84834_CRG_RST_1r_SRST_ARM_AHBf_GET
#define CRG_RST_1r_SRST_ARM_AHBf_SET BCM84834_CRG_RST_1r_SRST_ARM_AHBf_SET
#define CRG_RST_1r_SRST_ARM_VICf_GET BCM84834_CRG_RST_1r_SRST_ARM_VICf_GET
#define CRG_RST_1r_SRST_ARM_VICf_SET BCM84834_CRG_RST_1r_SRST_ARM_VICf_SET
#define CRG_RST_1r_SRST_ARM_DMAf_GET BCM84834_CRG_RST_1r_SRST_ARM_DMAf_GET
#define CRG_RST_1r_SRST_ARM_DMAf_SET BCM84834_CRG_RST_1r_SRST_ARM_DMAf_SET
#define CRG_RST_1r_SRST_ARM_PDBGf_GET BCM84834_CRG_RST_1r_SRST_ARM_PDBGf_GET
#define CRG_RST_1r_SRST_ARM_PDBGf_SET BCM84834_CRG_RST_1r_SRST_ARM_PDBGf_SET
#define CRG_RST_1r_SRST_DFEf_GET BCM84834_CRG_RST_1r_SRST_DFEf_GET
#define CRG_RST_1r_SRST_DFEf_SET BCM84834_CRG_RST_1r_SRST_DFEf_SET
#define CRG_RST_1r_SRST_AFE_RDBf_GET BCM84834_CRG_RST_1r_SRST_AFE_RDBf_GET
#define CRG_RST_1r_SRST_AFE_RDBf_SET BCM84834_CRG_RST_1r_SRST_AFE_RDBf_SET
#define READ_CRG_RST_1r BCM84834_READ_CRG_RST_1r
#define WRITE_CRG_RST_1r BCM84834_WRITE_CRG_RST_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_RST_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_RST_2
 * BLOCKS:   CRG
 * REGADDR:  0x4182
 * DEVAD:    30
 * DESC:     Block Reset Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_EMI_RDB     
 *     SRST_EMI         
 *     SRST_MACSEC_RDB  
 *     SRST_MACSEC_PORT 
 *     SRST_MACSEC      
 *     SRST_PTP_RDB     
 *     SRST_PTP         
 *     SRST_FFT_RDB     
 *     SRST_ENC_RDB     
 *     SRST_FFE_RDB     
 *     SRST_TSTRAM      
 *     SRST_ENC         
 *     SRST_FFE         
 *     SRST_COMMON_RDB  
 *
 ******************************************************************************/
#define BCM84834_CRG_RST_2r (0x001e4182 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_RST_2r_SIZE 4

/*
 * This structure should be used to declare and program CRG_RST_2.
 *
 */
typedef union BCM84834_CRG_RST_2r_s {
	uint32_t v[1];
	uint32_t crg_rst_2[1];
	uint32_t _crg_rst_2;
} BCM84834_CRG_RST_2r_t;

#define BCM84834_CRG_RST_2r_CLR(r) (r).crg_rst_2[0] = 0
#define BCM84834_CRG_RST_2r_SET(r,d) (r).crg_rst_2[0] = d
#define BCM84834_CRG_RST_2r_GET(r) (r).crg_rst_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_RST_2r_SRST_COMMON_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 15) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_COMMON_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_RST_2r_SRST_FFEf_GET(r) ((((r).crg_rst_2[0]) >> 14) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_FFEf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_CRG_RST_2r_SRST_ENCf_GET(r) ((((r).crg_rst_2[0]) >> 13) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_ENCf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_CRG_RST_2r_SRST_TSTRAMf_GET(r) ((((r).crg_rst_2[0]) >> 12) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_TSTRAMf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_CRG_RST_2r_SRST_FFE_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 10) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_FFE_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_CRG_RST_2r_SRST_ENC_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 9) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_ENC_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_RST_2r_SRST_FFT_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 8) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_FFT_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_RST_2r_SRST_PTPf_GET(r) ((((r).crg_rst_2[0]) >> 7) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_PTPf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_CRG_RST_2r_SRST_PTP_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 6) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_PTP_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_RST_2r_SRST_MACSECf_GET(r) ((((r).crg_rst_2[0]) >> 4) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_MACSECf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_CRG_RST_2r_SRST_MACSEC_PORTf_GET(r) ((((r).crg_rst_2[0]) >> 3) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_MACSEC_PORTf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_RST_2r_SRST_MACSEC_RDBf_GET(r) ((((r).crg_rst_2[0]) >> 2) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_MACSEC_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_RST_2r_SRST_EMIf_GET(r) ((((r).crg_rst_2[0]) >> 1) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_EMIf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_RST_2r_SRST_EMI_RDBf_GET(r) (((r).crg_rst_2[0]) & 0x1)
#define BCM84834_CRG_RST_2r_SRST_EMI_RDBf_SET(r,f) (r).crg_rst_2[0]=(((r).crg_rst_2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_RST_2.
 *
 */
#define BCM84834_READ_CRG_RST_2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_RST_2r,(_r._crg_rst_2))
#define BCM84834_WRITE_CRG_RST_2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_RST_2r,(_r._crg_rst_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_RST_2r BCM84834_CRG_RST_2r
#define CRG_RST_2r_SIZE BCM84834_CRG_RST_2r_SIZE
typedef BCM84834_CRG_RST_2r_t CRG_RST_2r_t;
#define CRG_RST_2r_CLR BCM84834_CRG_RST_2r_CLR
#define CRG_RST_2r_SET BCM84834_CRG_RST_2r_SET
#define CRG_RST_2r_GET BCM84834_CRG_RST_2r_GET
#define CRG_RST_2r_SRST_COMMON_RDBf_GET BCM84834_CRG_RST_2r_SRST_COMMON_RDBf_GET
#define CRG_RST_2r_SRST_COMMON_RDBf_SET BCM84834_CRG_RST_2r_SRST_COMMON_RDBf_SET
#define CRG_RST_2r_SRST_FFEf_GET BCM84834_CRG_RST_2r_SRST_FFEf_GET
#define CRG_RST_2r_SRST_FFEf_SET BCM84834_CRG_RST_2r_SRST_FFEf_SET
#define CRG_RST_2r_SRST_ENCf_GET BCM84834_CRG_RST_2r_SRST_ENCf_GET
#define CRG_RST_2r_SRST_ENCf_SET BCM84834_CRG_RST_2r_SRST_ENCf_SET
#define CRG_RST_2r_SRST_TSTRAMf_GET BCM84834_CRG_RST_2r_SRST_TSTRAMf_GET
#define CRG_RST_2r_SRST_TSTRAMf_SET BCM84834_CRG_RST_2r_SRST_TSTRAMf_SET
#define CRG_RST_2r_SRST_FFE_RDBf_GET BCM84834_CRG_RST_2r_SRST_FFE_RDBf_GET
#define CRG_RST_2r_SRST_FFE_RDBf_SET BCM84834_CRG_RST_2r_SRST_FFE_RDBf_SET
#define CRG_RST_2r_SRST_ENC_RDBf_GET BCM84834_CRG_RST_2r_SRST_ENC_RDBf_GET
#define CRG_RST_2r_SRST_ENC_RDBf_SET BCM84834_CRG_RST_2r_SRST_ENC_RDBf_SET
#define CRG_RST_2r_SRST_FFT_RDBf_GET BCM84834_CRG_RST_2r_SRST_FFT_RDBf_GET
#define CRG_RST_2r_SRST_FFT_RDBf_SET BCM84834_CRG_RST_2r_SRST_FFT_RDBf_SET
#define CRG_RST_2r_SRST_PTPf_GET BCM84834_CRG_RST_2r_SRST_PTPf_GET
#define CRG_RST_2r_SRST_PTPf_SET BCM84834_CRG_RST_2r_SRST_PTPf_SET
#define CRG_RST_2r_SRST_PTP_RDBf_GET BCM84834_CRG_RST_2r_SRST_PTP_RDBf_GET
#define CRG_RST_2r_SRST_PTP_RDBf_SET BCM84834_CRG_RST_2r_SRST_PTP_RDBf_SET
#define CRG_RST_2r_SRST_MACSECf_GET BCM84834_CRG_RST_2r_SRST_MACSECf_GET
#define CRG_RST_2r_SRST_MACSECf_SET BCM84834_CRG_RST_2r_SRST_MACSECf_SET
#define CRG_RST_2r_SRST_MACSEC_PORTf_GET BCM84834_CRG_RST_2r_SRST_MACSEC_PORTf_GET
#define CRG_RST_2r_SRST_MACSEC_PORTf_SET BCM84834_CRG_RST_2r_SRST_MACSEC_PORTf_SET
#define CRG_RST_2r_SRST_MACSEC_RDBf_GET BCM84834_CRG_RST_2r_SRST_MACSEC_RDBf_GET
#define CRG_RST_2r_SRST_MACSEC_RDBf_SET BCM84834_CRG_RST_2r_SRST_MACSEC_RDBf_SET
#define CRG_RST_2r_SRST_EMIf_GET BCM84834_CRG_RST_2r_SRST_EMIf_GET
#define CRG_RST_2r_SRST_EMIf_SET BCM84834_CRG_RST_2r_SRST_EMIf_SET
#define CRG_RST_2r_SRST_EMI_RDBf_GET BCM84834_CRG_RST_2r_SRST_EMI_RDBf_GET
#define CRG_RST_2r_SRST_EMI_RDBf_SET BCM84834_CRG_RST_2r_SRST_EMI_RDBf_SET
#define READ_CRG_RST_2r BCM84834_READ_CRG_RST_2r
#define WRITE_CRG_RST_2r BCM84834_WRITE_CRG_RST_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_RST_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_RST_3
 * BLOCKS:   CRG
 * REGADDR:  0x4183
 * DEVAD:    30
 * DESC:     Block Reset Control 3 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_IF          
 *     SRST_BERT_RDB    
 *     SRST_BERT        
 *     SRST_LMS         
 *     SRST_TOP_RDB     
 *     SRST_GPHY_RDB    
 *     SRST_XGP_GPHY    
 *     SRST_I2C         
 *     SRST_XENPAK      
 *     SRST_PHYC_CTL_RDB 
 *     SRST_PCS_TX_FIFO 
 *     SRST_PCS_RX_FIFO 
 *     SRST_PCS_RX      
 *     SRST_PCS_TX      
 *     SRST_IEEE_PCS    
 *
 ******************************************************************************/
#define BCM84834_CRG_RST_3r (0x001e4183 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_RST_3r_SIZE 4

/*
 * This structure should be used to declare and program CRG_RST_3.
 *
 */
typedef union BCM84834_CRG_RST_3r_s {
	uint32_t v[1];
	uint32_t crg_rst_3[1];
	uint32_t _crg_rst_3;
} BCM84834_CRG_RST_3r_t;

#define BCM84834_CRG_RST_3r_CLR(r) (r).crg_rst_3[0] = 0
#define BCM84834_CRG_RST_3r_SET(r,d) (r).crg_rst_3[0] = d
#define BCM84834_CRG_RST_3r_GET(r) (r).crg_rst_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_RST_3r_SRST_IEEE_PCSf_GET(r) ((((r).crg_rst_3[0]) >> 15) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_IEEE_PCSf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_RST_3r_SRST_PCS_TXf_GET(r) ((((r).crg_rst_3[0]) >> 14) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_PCS_TXf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_CRG_RST_3r_SRST_PCS_RXf_GET(r) ((((r).crg_rst_3[0]) >> 13) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_PCS_RXf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_CRG_RST_3r_SRST_PCS_RX_FIFOf_GET(r) ((((r).crg_rst_3[0]) >> 12) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_PCS_RX_FIFOf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_CRG_RST_3r_SRST_PCS_TX_FIFOf_GET(r) ((((r).crg_rst_3[0]) >> 11) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_PCS_TX_FIFOf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_CRG_RST_3r_SRST_PHYC_CTL_RDBf_GET(r) ((((r).crg_rst_3[0]) >> 10) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_PHYC_CTL_RDBf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_CRG_RST_3r_SRST_XENPAKf_GET(r) ((((r).crg_rst_3[0]) >> 9) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_XENPAKf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_RST_3r_SRST_I2Cf_GET(r) ((((r).crg_rst_3[0]) >> 8) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_I2Cf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_RST_3r_SRST_XGP_GPHYf_GET(r) ((((r).crg_rst_3[0]) >> 7) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_XGP_GPHYf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_CRG_RST_3r_SRST_GPHY_RDBf_GET(r) ((((r).crg_rst_3[0]) >> 6) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_GPHY_RDBf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_RST_3r_SRST_TOP_RDBf_GET(r) ((((r).crg_rst_3[0]) >> 5) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_TOP_RDBf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_RST_3r_SRST_LMSf_GET(r) ((((r).crg_rst_3[0]) >> 4) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_LMSf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_CRG_RST_3r_SRST_BERTf_GET(r) ((((r).crg_rst_3[0]) >> 2) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_BERTf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_RST_3r_SRST_BERT_RDBf_GET(r) ((((r).crg_rst_3[0]) >> 1) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_BERT_RDBf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_RST_3r_SRST_IFf_GET(r) (((r).crg_rst_3[0]) & 0x1)
#define BCM84834_CRG_RST_3r_SRST_IFf_SET(r,f) (r).crg_rst_3[0]=(((r).crg_rst_3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_RST_3.
 *
 */
#define BCM84834_READ_CRG_RST_3r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_RST_3r,(_r._crg_rst_3))
#define BCM84834_WRITE_CRG_RST_3r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_RST_3r,(_r._crg_rst_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_RST_3r BCM84834_CRG_RST_3r
#define CRG_RST_3r_SIZE BCM84834_CRG_RST_3r_SIZE
typedef BCM84834_CRG_RST_3r_t CRG_RST_3r_t;
#define CRG_RST_3r_CLR BCM84834_CRG_RST_3r_CLR
#define CRG_RST_3r_SET BCM84834_CRG_RST_3r_SET
#define CRG_RST_3r_GET BCM84834_CRG_RST_3r_GET
#define CRG_RST_3r_SRST_IEEE_PCSf_GET BCM84834_CRG_RST_3r_SRST_IEEE_PCSf_GET
#define CRG_RST_3r_SRST_IEEE_PCSf_SET BCM84834_CRG_RST_3r_SRST_IEEE_PCSf_SET
#define CRG_RST_3r_SRST_PCS_TXf_GET BCM84834_CRG_RST_3r_SRST_PCS_TXf_GET
#define CRG_RST_3r_SRST_PCS_TXf_SET BCM84834_CRG_RST_3r_SRST_PCS_TXf_SET
#define CRG_RST_3r_SRST_PCS_RXf_GET BCM84834_CRG_RST_3r_SRST_PCS_RXf_GET
#define CRG_RST_3r_SRST_PCS_RXf_SET BCM84834_CRG_RST_3r_SRST_PCS_RXf_SET
#define CRG_RST_3r_SRST_PCS_RX_FIFOf_GET BCM84834_CRG_RST_3r_SRST_PCS_RX_FIFOf_GET
#define CRG_RST_3r_SRST_PCS_RX_FIFOf_SET BCM84834_CRG_RST_3r_SRST_PCS_RX_FIFOf_SET
#define CRG_RST_3r_SRST_PCS_TX_FIFOf_GET BCM84834_CRG_RST_3r_SRST_PCS_TX_FIFOf_GET
#define CRG_RST_3r_SRST_PCS_TX_FIFOf_SET BCM84834_CRG_RST_3r_SRST_PCS_TX_FIFOf_SET
#define CRG_RST_3r_SRST_PHYC_CTL_RDBf_GET BCM84834_CRG_RST_3r_SRST_PHYC_CTL_RDBf_GET
#define CRG_RST_3r_SRST_PHYC_CTL_RDBf_SET BCM84834_CRG_RST_3r_SRST_PHYC_CTL_RDBf_SET
#define CRG_RST_3r_SRST_XENPAKf_GET BCM84834_CRG_RST_3r_SRST_XENPAKf_GET
#define CRG_RST_3r_SRST_XENPAKf_SET BCM84834_CRG_RST_3r_SRST_XENPAKf_SET
#define CRG_RST_3r_SRST_I2Cf_GET BCM84834_CRG_RST_3r_SRST_I2Cf_GET
#define CRG_RST_3r_SRST_I2Cf_SET BCM84834_CRG_RST_3r_SRST_I2Cf_SET
#define CRG_RST_3r_SRST_XGP_GPHYf_GET BCM84834_CRG_RST_3r_SRST_XGP_GPHYf_GET
#define CRG_RST_3r_SRST_XGP_GPHYf_SET BCM84834_CRG_RST_3r_SRST_XGP_GPHYf_SET
#define CRG_RST_3r_SRST_GPHY_RDBf_GET BCM84834_CRG_RST_3r_SRST_GPHY_RDBf_GET
#define CRG_RST_3r_SRST_GPHY_RDBf_SET BCM84834_CRG_RST_3r_SRST_GPHY_RDBf_SET
#define CRG_RST_3r_SRST_TOP_RDBf_GET BCM84834_CRG_RST_3r_SRST_TOP_RDBf_GET
#define CRG_RST_3r_SRST_TOP_RDBf_SET BCM84834_CRG_RST_3r_SRST_TOP_RDBf_SET
#define CRG_RST_3r_SRST_LMSf_GET BCM84834_CRG_RST_3r_SRST_LMSf_GET
#define CRG_RST_3r_SRST_LMSf_SET BCM84834_CRG_RST_3r_SRST_LMSf_SET
#define CRG_RST_3r_SRST_BERTf_GET BCM84834_CRG_RST_3r_SRST_BERTf_GET
#define CRG_RST_3r_SRST_BERTf_SET BCM84834_CRG_RST_3r_SRST_BERTf_SET
#define CRG_RST_3r_SRST_BERT_RDBf_GET BCM84834_CRG_RST_3r_SRST_BERT_RDBf_GET
#define CRG_RST_3r_SRST_BERT_RDBf_SET BCM84834_CRG_RST_3r_SRST_BERT_RDBf_SET
#define CRG_RST_3r_SRST_IFf_GET BCM84834_CRG_RST_3r_SRST_IFf_GET
#define CRG_RST_3r_SRST_IFf_SET BCM84834_CRG_RST_3r_SRST_IFf_SET
#define READ_CRG_RST_3r BCM84834_READ_CRG_RST_3r
#define WRITE_CRG_RST_3r BCM84834_WRITE_CRG_RST_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_RST_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_AFE_RST_CTL1
 * BLOCKS:   CRG
 * REGADDR:  0x4184
 * DEVAD:    30
 * DESC:     AFE Reset Control 1 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_AFE_RX_D    
 *     SRST_AFE_RX_C    
 *     SRST_AFE_RX_B    
 *     SRST_AFE_RX_A    
 *     SRST_AFE_RX_CLKMUX_D 
 *     SRST_AFE_RX_CLKMUX_C 
 *     SRST_AFE_RX_CLKMUX_B 
 *     SRST_AFE_RX_CLKMUX_A 
 *     SRST_AFE_GPHY_PLL 
 *     SRST_AFE_XGPHY_PLL 
 *     SRST_AFE_PLL_CKMUX 
 *
 ******************************************************************************/
#define BCM84834_CRG_AFE_RST_CTL1r (0x001e4184 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_AFE_RST_CTL1r_SIZE 4

/*
 * This structure should be used to declare and program CRG_AFE_RST_CTL1.
 *
 */
typedef union BCM84834_CRG_AFE_RST_CTL1r_s {
	uint32_t v[1];
	uint32_t crg_afe_rst_ctl1[1];
	uint32_t _crg_afe_rst_ctl1;
} BCM84834_CRG_AFE_RST_CTL1r_t;

#define BCM84834_CRG_AFE_RST_CTL1r_CLR(r) (r).crg_afe_rst_ctl1[0] = 0
#define BCM84834_CRG_AFE_RST_CTL1r_SET(r,d) (r).crg_afe_rst_ctl1[0] = d
#define BCM84834_CRG_AFE_RST_CTL1r_GET(r) (r).crg_afe_rst_ctl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 10) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 9) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 8) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 7) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 6) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 5) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 4) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 3) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 2) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_GET(r) ((((r).crg_afe_rst_ctl1[0]) >> 1) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_GET(r) (((r).crg_afe_rst_ctl1[0]) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_SET(r,f) (r).crg_afe_rst_ctl1[0]=(((r).crg_afe_rst_ctl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_AFE_RST_CTL1.
 *
 */
#define BCM84834_READ_CRG_AFE_RST_CTL1r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_AFE_RST_CTL1r,(_r._crg_afe_rst_ctl1))
#define BCM84834_WRITE_CRG_AFE_RST_CTL1r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_AFE_RST_CTL1r,(_r._crg_afe_rst_ctl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_AFE_RST_CTL1r BCM84834_CRG_AFE_RST_CTL1r
#define CRG_AFE_RST_CTL1r_SIZE BCM84834_CRG_AFE_RST_CTL1r_SIZE
typedef BCM84834_CRG_AFE_RST_CTL1r_t CRG_AFE_RST_CTL1r_t;
#define CRG_AFE_RST_CTL1r_CLR BCM84834_CRG_AFE_RST_CTL1r_CLR
#define CRG_AFE_RST_CTL1r_SET BCM84834_CRG_AFE_RST_CTL1r_SET
#define CRG_AFE_RST_CTL1r_GET BCM84834_CRG_AFE_RST_CTL1r_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_PLL_CKMUXf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_XGPHY_PLLf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_GPHY_PLLf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Af_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Bf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Cf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_CLKMUX_Df_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Af_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Bf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Cf_SET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_GET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_GET
#define CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_SET BCM84834_CRG_AFE_RST_CTL1r_SRST_AFE_RX_Df_SET
#define READ_CRG_AFE_RST_CTL1r BCM84834_READ_CRG_AFE_RST_CTL1r
#define WRITE_CRG_AFE_RST_CTL1r BCM84834_WRITE_CRG_AFE_RST_CTL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_AFE_RST_CTL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_AFE_RST_CTL2
 * BLOCKS:   CRG
 * REGADDR:  0x4185
 * DEVAD:    30
 * DESC:     AFE Reset Control 2 Register
 * SIZE:     32
 * FIELDS:
 *     SRST_AFE_TX_MAIN_D 
 *     SRST_AFE_TX_MAIN_C 
 *     SRST_AFE_TX_MAIN_B 
 *     SRST_AFE_TX_MAIN_A 
 *
 ******************************************************************************/
#define BCM84834_CRG_AFE_RST_CTL2r (0x001e4185 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_AFE_RST_CTL2r_SIZE 4

/*
 * This structure should be used to declare and program CRG_AFE_RST_CTL2.
 *
 */
typedef union BCM84834_CRG_AFE_RST_CTL2r_s {
	uint32_t v[1];
	uint32_t crg_afe_rst_ctl2[1];
	uint32_t _crg_afe_rst_ctl2;
} BCM84834_CRG_AFE_RST_CTL2r_t;

#define BCM84834_CRG_AFE_RST_CTL2r_CLR(r) (r).crg_afe_rst_ctl2[0] = 0
#define BCM84834_CRG_AFE_RST_CTL2r_SET(r,d) (r).crg_afe_rst_ctl2[0] = d
#define BCM84834_CRG_AFE_RST_CTL2r_GET(r) (r).crg_afe_rst_ctl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_GET(r) ((((r).crg_afe_rst_ctl2[0]) >> 7) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_SET(r,f) (r).crg_afe_rst_ctl2[0]=(((r).crg_afe_rst_ctl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_GET(r) ((((r).crg_afe_rst_ctl2[0]) >> 6) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_SET(r,f) (r).crg_afe_rst_ctl2[0]=(((r).crg_afe_rst_ctl2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_GET(r) ((((r).crg_afe_rst_ctl2[0]) >> 5) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_SET(r,f) (r).crg_afe_rst_ctl2[0]=(((r).crg_afe_rst_ctl2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_GET(r) ((((r).crg_afe_rst_ctl2[0]) >> 4) & 0x1)
#define BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_SET(r,f) (r).crg_afe_rst_ctl2[0]=(((r).crg_afe_rst_ctl2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*
 * These macros can be used to access CRG_AFE_RST_CTL2.
 *
 */
#define BCM84834_READ_CRG_AFE_RST_CTL2r(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_AFE_RST_CTL2r,(_r._crg_afe_rst_ctl2))
#define BCM84834_WRITE_CRG_AFE_RST_CTL2r(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_AFE_RST_CTL2r,(_r._crg_afe_rst_ctl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_AFE_RST_CTL2r BCM84834_CRG_AFE_RST_CTL2r
#define CRG_AFE_RST_CTL2r_SIZE BCM84834_CRG_AFE_RST_CTL2r_SIZE
typedef BCM84834_CRG_AFE_RST_CTL2r_t CRG_AFE_RST_CTL2r_t;
#define CRG_AFE_RST_CTL2r_CLR BCM84834_CRG_AFE_RST_CTL2r_CLR
#define CRG_AFE_RST_CTL2r_SET BCM84834_CRG_AFE_RST_CTL2r_SET
#define CRG_AFE_RST_CTL2r_GET BCM84834_CRG_AFE_RST_CTL2r_GET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_GET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_GET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_SET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Af_SET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_GET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_GET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_SET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Bf_SET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_GET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_GET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_SET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Cf_SET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_GET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_GET
#define CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_SET BCM84834_CRG_AFE_RST_CTL2r_SRST_AFE_TX_MAIN_Df_SET
#define READ_CRG_AFE_RST_CTL2r BCM84834_READ_CRG_AFE_RST_CTL2r
#define WRITE_CRG_AFE_RST_CTL2r BCM84834_WRITE_CRG_AFE_RST_CTL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_AFE_RST_CTL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_GLB_RST_CTL
 * BLOCKS:   CRG
 * REGADDR:  0x4186
 * DEVAD:    30
 * DESC:     Global Reset Control Register
 * SIZE:     32
 * FIELDS:
 *     SRST_PHYC_RDB    
 *     SRST_PHYC        
 *     SRST_XGPHY       
 *     SRST_GPHY        
 *     BLK_RST_ENA      
 *
 ******************************************************************************/
#define BCM84834_CRG_GLB_RST_CTLr (0x001e4186 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_GLB_RST_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CRG_GLB_RST_CTL.
 *
 */
typedef union BCM84834_CRG_GLB_RST_CTLr_s {
	uint32_t v[1];
	uint32_t crg_glb_rst_ctl[1];
	uint32_t _crg_glb_rst_ctl;
} BCM84834_CRG_GLB_RST_CTLr_t;

#define BCM84834_CRG_GLB_RST_CTLr_CLR(r) (r).crg_glb_rst_ctl[0] = 0
#define BCM84834_CRG_GLB_RST_CTLr_SET(r,d) (r).crg_glb_rst_ctl[0] = d
#define BCM84834_CRG_GLB_RST_CTLr_GET(r) (r).crg_glb_rst_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_GLB_RST_CTLr_BLK_RST_ENAf_GET(r) ((((r).crg_glb_rst_ctl[0]) >> 15) & 0x1)
#define BCM84834_CRG_GLB_RST_CTLr_BLK_RST_ENAf_SET(r,f) (r).crg_glb_rst_ctl[0]=(((r).crg_glb_rst_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_GLB_RST_CTLr_SRST_GPHYf_GET(r) ((((r).crg_glb_rst_ctl[0]) >> 3) & 0x1)
#define BCM84834_CRG_GLB_RST_CTLr_SRST_GPHYf_SET(r,f) (r).crg_glb_rst_ctl[0]=(((r).crg_glb_rst_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_GLB_RST_CTLr_SRST_XGPHYf_GET(r) ((((r).crg_glb_rst_ctl[0]) >> 2) & 0x1)
#define BCM84834_CRG_GLB_RST_CTLr_SRST_XGPHYf_SET(r,f) (r).crg_glb_rst_ctl[0]=(((r).crg_glb_rst_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_GLB_RST_CTLr_SRST_PHYCf_GET(r) ((((r).crg_glb_rst_ctl[0]) >> 1) & 0x1)
#define BCM84834_CRG_GLB_RST_CTLr_SRST_PHYCf_SET(r,f) (r).crg_glb_rst_ctl[0]=(((r).crg_glb_rst_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_GET(r) (((r).crg_glb_rst_ctl[0]) & 0x1)
#define BCM84834_CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_SET(r,f) (r).crg_glb_rst_ctl[0]=(((r).crg_glb_rst_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_GLB_RST_CTL.
 *
 */
#define BCM84834_READ_CRG_GLB_RST_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_GLB_RST_CTLr,(_r._crg_glb_rst_ctl))
#define BCM84834_WRITE_CRG_GLB_RST_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_GLB_RST_CTLr,(_r._crg_glb_rst_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_GLB_RST_CTLr BCM84834_CRG_GLB_RST_CTLr
#define CRG_GLB_RST_CTLr_SIZE BCM84834_CRG_GLB_RST_CTLr_SIZE
typedef BCM84834_CRG_GLB_RST_CTLr_t CRG_GLB_RST_CTLr_t;
#define CRG_GLB_RST_CTLr_CLR BCM84834_CRG_GLB_RST_CTLr_CLR
#define CRG_GLB_RST_CTLr_SET BCM84834_CRG_GLB_RST_CTLr_SET
#define CRG_GLB_RST_CTLr_GET BCM84834_CRG_GLB_RST_CTLr_GET
#define CRG_GLB_RST_CTLr_BLK_RST_ENAf_GET BCM84834_CRG_GLB_RST_CTLr_BLK_RST_ENAf_GET
#define CRG_GLB_RST_CTLr_BLK_RST_ENAf_SET BCM84834_CRG_GLB_RST_CTLr_BLK_RST_ENAf_SET
#define CRG_GLB_RST_CTLr_SRST_GPHYf_GET BCM84834_CRG_GLB_RST_CTLr_SRST_GPHYf_GET
#define CRG_GLB_RST_CTLr_SRST_GPHYf_SET BCM84834_CRG_GLB_RST_CTLr_SRST_GPHYf_SET
#define CRG_GLB_RST_CTLr_SRST_XGPHYf_GET BCM84834_CRG_GLB_RST_CTLr_SRST_XGPHYf_GET
#define CRG_GLB_RST_CTLr_SRST_XGPHYf_SET BCM84834_CRG_GLB_RST_CTLr_SRST_XGPHYf_SET
#define CRG_GLB_RST_CTLr_SRST_PHYCf_GET BCM84834_CRG_GLB_RST_CTLr_SRST_PHYCf_GET
#define CRG_GLB_RST_CTLr_SRST_PHYCf_SET BCM84834_CRG_GLB_RST_CTLr_SRST_PHYCf_SET
#define CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_GET BCM84834_CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_GET
#define CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_SET BCM84834_CRG_GLB_RST_CTLr_SRST_PHYC_RDBf_SET
#define READ_CRG_GLB_RST_CTLr BCM84834_READ_CRG_GLB_RST_CTLr
#define WRITE_CRG_GLB_RST_CTLr BCM84834_WRITE_CRG_GLB_RST_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_GLB_RST_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_CONFIG
 * BLOCKS:   CRG
 * REGADDR:  0x4187
 * DEVAD:    30
 * DESC:     General Configuration Register
 * SIZE:     32
 * FIELDS:
 *     SEL_CLK_GPHY_TXC_INV 
 *
 ******************************************************************************/
#define BCM84834_CRG_CONFIGr (0x001e4187 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_CONFIGr_SIZE 4

/*
 * This structure should be used to declare and program CRG_CONFIG.
 *
 */
typedef union BCM84834_CRG_CONFIGr_s {
	uint32_t v[1];
	uint32_t crg_config[1];
	uint32_t _crg_config;
} BCM84834_CRG_CONFIGr_t;

#define BCM84834_CRG_CONFIGr_CLR(r) (r).crg_config[0] = 0
#define BCM84834_CRG_CONFIGr_SET(r,d) (r).crg_config[0] = d
#define BCM84834_CRG_CONFIGr_GET(r) (r).crg_config[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_GET(r) ((((r).crg_config[0]) >> 8) & 0x1)
#define BCM84834_CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_SET(r,f) (r).crg_config[0]=(((r).crg_config[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))

/*
 * These macros can be used to access CRG_CONFIG.
 *
 */
#define BCM84834_READ_CRG_CONFIGr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_CONFIGr,(_r._crg_config))
#define BCM84834_WRITE_CRG_CONFIGr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_CONFIGr,(_r._crg_config))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_CONFIGr BCM84834_CRG_CONFIGr
#define CRG_CONFIGr_SIZE BCM84834_CRG_CONFIGr_SIZE
typedef BCM84834_CRG_CONFIGr_t CRG_CONFIGr_t;
#define CRG_CONFIGr_CLR BCM84834_CRG_CONFIGr_CLR
#define CRG_CONFIGr_SET BCM84834_CRG_CONFIGr_SET
#define CRG_CONFIGr_GET BCM84834_CRG_CONFIGr_GET
#define CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_GET BCM84834_CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_GET
#define CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_SET BCM84834_CRG_CONFIGr_SEL_CLK_GPHY_TXC_INVf_SET
#define READ_CRG_CONFIGr BCM84834_READ_CRG_CONFIGr
#define WRITE_CRG_CONFIGr BCM84834_WRITE_CRG_CONFIGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_CONFIGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_CLKEN_CTL
 * BLOCKS:   CRG
 * REGADDR:  0x4188
 * DEVAD:    30
 * DESC:     Global Clock Enable Control Register
 * SIZE:     32
 * FIELDS:
 *     CLKEN_CLK_LDPC_DEC 
 *     CLKEN_CLK_XGTX   
 *     CLKEN_CLK_PM_ARM_TRACE 
 *     CLKEN_CLK_PHYC   
 *     CLKEN_CLK_XGRX   
 *     CLKEN_CLK_TEMPMON 
 *     CLKEN_CLK_MACSEC_XMAC 
 *     CLKEN_CLK_MACSEC 
 *     CLKEN_CLK_PTP    
 *     CLKEN_CLK_PCS_RX 
 *     SEL_CLK_XGPHY_CORE 
 *
 ******************************************************************************/
#define BCM84834_CRG_CLKEN_CTLr (0x001e4188 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_CLKEN_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CRG_CLKEN_CTL.
 *
 */
typedef union BCM84834_CRG_CLKEN_CTLr_s {
	uint32_t v[1];
	uint32_t crg_clken_ctl[1];
	uint32_t _crg_clken_ctl;
} BCM84834_CRG_CLKEN_CTLr_t;

#define BCM84834_CRG_CLKEN_CTLr_CLR(r) (r).crg_clken_ctl[0] = 0
#define BCM84834_CRG_CLKEN_CTLr_SET(r,d) (r).crg_clken_ctl[0] = d
#define BCM84834_CRG_CLKEN_CTLr_GET(r) (r).crg_clken_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_GET(r) ((((r).crg_clken_ctl[0]) >> 15) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_GET(r) ((((r).crg_clken_ctl[0]) >> 14) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_GET(r) ((((r).crg_clken_ctl[0]) >> 13) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_GET(r) ((((r).crg_clken_ctl[0]) >> 12) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_GET(r) ((((r).crg_clken_ctl[0]) >> 11) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_GET(r) ((((r).crg_clken_ctl[0]) >> 9) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_GET(r) ((((r).crg_clken_ctl[0]) >> 8) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_GET(r) ((((r).crg_clken_ctl[0]) >> 6) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_GET(r) ((((r).crg_clken_ctl[0]) >> 3) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_GET(r) ((((r).crg_clken_ctl[0]) >> 2) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_GET(r) ((((r).crg_clken_ctl[0]) >> 1) & 0x1)
#define BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_SET(r,f) (r).crg_clken_ctl[0]=(((r).crg_clken_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access CRG_CLKEN_CTL.
 *
 */
#define BCM84834_READ_CRG_CLKEN_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_CLKEN_CTLr,(_r._crg_clken_ctl))
#define BCM84834_WRITE_CRG_CLKEN_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_CLKEN_CTLr,(_r._crg_clken_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_CLKEN_CTLr BCM84834_CRG_CLKEN_CTLr
#define CRG_CLKEN_CTLr_SIZE BCM84834_CRG_CLKEN_CTLr_SIZE
typedef BCM84834_CRG_CLKEN_CTLr_t CRG_CLKEN_CTLr_t;
#define CRG_CLKEN_CTLr_CLR BCM84834_CRG_CLKEN_CTLr_CLR
#define CRG_CLKEN_CTLr_SET BCM84834_CRG_CLKEN_CTLr_SET
#define CRG_CLKEN_CTLr_GET BCM84834_CRG_CLKEN_CTLr_GET
#define CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_GET BCM84834_CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_GET
#define CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_SET BCM84834_CRG_CLKEN_CTLr_SEL_CLK_XGPHY_COREf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PCS_RXf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PTPf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSECf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_MACSEC_XMACf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_TEMPMONf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGRXf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PHYCf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_PM_ARM_TRACEf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_XGTXf_SET
#define CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_GET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_GET
#define CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_SET BCM84834_CRG_CLKEN_CTLr_CLKEN_CLK_LDPC_DECf_SET
#define READ_CRG_CLKEN_CTLr BCM84834_READ_CRG_CLKEN_CTLr
#define WRITE_CRG_CLKEN_CTLr BCM84834_WRITE_CRG_CLKEN_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_CLKEN_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_MDC_CTL
 * BLOCKS:   CRG
 * REGADDR:  0x4189
 * DEVAD:    30
 * DESC:     MDIO Clock Control Register
 * SIZE:     32
 * FIELDS:
 *     CLKEN_CLK_MDC_XAUIM 
 *     CLKEN_CLK_MDC_XAUIL 
 *     CLKEN_CLK_MDC_XFIM 
 *     CLKEN_CLK_MDC_XFIL 
 *     CLKEN_CLK_MDC_GPHY 
 *     CLKEN_CLK_MDC_MACSEC 
 *
 ******************************************************************************/
#define BCM84834_CRG_MDC_CTLr (0x001e4189 | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_MDC_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CRG_MDC_CTL.
 *
 */
typedef union BCM84834_CRG_MDC_CTLr_s {
	uint32_t v[1];
	uint32_t crg_mdc_ctl[1];
	uint32_t _crg_mdc_ctl;
} BCM84834_CRG_MDC_CTLr_t;

#define BCM84834_CRG_MDC_CTLr_CLR(r) (r).crg_mdc_ctl[0] = 0
#define BCM84834_CRG_MDC_CTLr_SET(r,d) (r).crg_mdc_ctl[0] = d
#define BCM84834_CRG_MDC_CTLr_GET(r) (r).crg_mdc_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_GET(r) ((((r).crg_mdc_ctl[0]) >> 5) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_GET(r) ((((r).crg_mdc_ctl[0]) >> 4) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_GET(r) ((((r).crg_mdc_ctl[0]) >> 3) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_GET(r) ((((r).crg_mdc_ctl[0]) >> 2) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_GET(r) ((((r).crg_mdc_ctl[0]) >> 1) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_GET(r) (((r).crg_mdc_ctl[0]) & 0x1)
#define BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_SET(r,f) (r).crg_mdc_ctl[0]=(((r).crg_mdc_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_MDC_CTL.
 *
 */
#define BCM84834_READ_CRG_MDC_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_MDC_CTLr,(_r._crg_mdc_ctl))
#define BCM84834_WRITE_CRG_MDC_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_MDC_CTLr,(_r._crg_mdc_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_MDC_CTLr BCM84834_CRG_MDC_CTLr
#define CRG_MDC_CTLr_SIZE BCM84834_CRG_MDC_CTLr_SIZE
typedef BCM84834_CRG_MDC_CTLr_t CRG_MDC_CTLr_t;
#define CRG_MDC_CTLr_CLR BCM84834_CRG_MDC_CTLr_CLR
#define CRG_MDC_CTLr_SET BCM84834_CRG_MDC_CTLr_SET
#define CRG_MDC_CTLr_GET BCM84834_CRG_MDC_CTLr_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_MACSECf_SET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_GPHYf_SET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFILf_SET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XFIMf_SET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUILf_SET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_GET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_GET
#define CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_SET BCM84834_CRG_MDC_CTLr_CLKEN_CLK_MDC_XAUIMf_SET
#define READ_CRG_MDC_CTLr BCM84834_READ_CRG_MDC_CTLr
#define WRITE_CRG_MDC_CTLr BCM84834_WRITE_CRG_MDC_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_MDC_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_PERFMON_CTL
 * BLOCKS:   CRG
 * REGADDR:  0x418a
 * DEVAD:    30
 * DESC:     Perfmon Control Register
 * SIZE:     32
 * FIELDS:
 *     CNT_LOAD         
 *     LATCH_CNT        
 *     LATCH_CNT_INT_MASK 
 *     LATCH_CNT_PIN_MASK 
 *
 ******************************************************************************/
#define BCM84834_CRG_PERFMON_CTLr (0x001e418a | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_PERFMON_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CRG_PERFMON_CTL.
 *
 */
typedef union BCM84834_CRG_PERFMON_CTLr_s {
	uint32_t v[1];
	uint32_t crg_perfmon_ctl[1];
	uint32_t _crg_perfmon_ctl;
} BCM84834_CRG_PERFMON_CTLr_t;

#define BCM84834_CRG_PERFMON_CTLr_CLR(r) (r).crg_perfmon_ctl[0] = 0
#define BCM84834_CRG_PERFMON_CTLr_SET(r,d) (r).crg_perfmon_ctl[0] = d
#define BCM84834_CRG_PERFMON_CTLr_GET(r) (r).crg_perfmon_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_GET(r) ((((r).crg_perfmon_ctl[0]) >> 3) & 0x1)
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_SET(r,f) (r).crg_perfmon_ctl[0]=(((r).crg_perfmon_ctl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_GET(r) ((((r).crg_perfmon_ctl[0]) >> 2) & 0x1)
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_SET(r,f) (r).crg_perfmon_ctl[0]=(((r).crg_perfmon_ctl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNTf_GET(r) ((((r).crg_perfmon_ctl[0]) >> 1) & 0x1)
#define BCM84834_CRG_PERFMON_CTLr_LATCH_CNTf_SET(r,f) (r).crg_perfmon_ctl[0]=(((r).crg_perfmon_ctl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCM84834_CRG_PERFMON_CTLr_CNT_LOADf_GET(r) (((r).crg_perfmon_ctl[0]) & 0x1)
#define BCM84834_CRG_PERFMON_CTLr_CNT_LOADf_SET(r,f) (r).crg_perfmon_ctl[0]=(((r).crg_perfmon_ctl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CRG_PERFMON_CTL.
 *
 */
#define BCM84834_READ_CRG_PERFMON_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_PERFMON_CTLr,(_r._crg_perfmon_ctl))
#define BCM84834_WRITE_CRG_PERFMON_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_PERFMON_CTLr,(_r._crg_perfmon_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_PERFMON_CTLr BCM84834_CRG_PERFMON_CTLr
#define CRG_PERFMON_CTLr_SIZE BCM84834_CRG_PERFMON_CTLr_SIZE
typedef BCM84834_CRG_PERFMON_CTLr_t CRG_PERFMON_CTLr_t;
#define CRG_PERFMON_CTLr_CLR BCM84834_CRG_PERFMON_CTLr_CLR
#define CRG_PERFMON_CTLr_SET BCM84834_CRG_PERFMON_CTLr_SET
#define CRG_PERFMON_CTLr_GET BCM84834_CRG_PERFMON_CTLr_GET
#define CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_GET BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_GET
#define CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_SET BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_PIN_MASKf_SET
#define CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_GET BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_GET
#define CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_SET BCM84834_CRG_PERFMON_CTLr_LATCH_CNT_INT_MASKf_SET
#define CRG_PERFMON_CTLr_LATCH_CNTf_GET BCM84834_CRG_PERFMON_CTLr_LATCH_CNTf_GET
#define CRG_PERFMON_CTLr_LATCH_CNTf_SET BCM84834_CRG_PERFMON_CTLr_LATCH_CNTf_SET
#define CRG_PERFMON_CTLr_CNT_LOADf_GET BCM84834_CRG_PERFMON_CTLr_CNT_LOADf_GET
#define CRG_PERFMON_CTLr_CNT_LOADf_SET BCM84834_CRG_PERFMON_CTLr_CNT_LOADf_SET
#define READ_CRG_PERFMON_CTLr BCM84834_READ_CRG_PERFMON_CTLr
#define WRITE_CRG_PERFMON_CTLr BCM84834_WRITE_CRG_PERFMON_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_PERFMON_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_SYNC_ETH_CTL
 * BLOCKS:   CRG
 * REGADDR:  0x418b
 * DEVAD:    30
 * DESC:     Synchronous Ethernet Control Register
 * SIZE:     32
 * FIELDS:
 *     SEL_CLK_SYNC_ETH 
 *
 ******************************************************************************/
#define BCM84834_CRG_SYNC_ETH_CTLr (0x001e418b | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_SYNC_ETH_CTLr_SIZE 4

/*
 * This structure should be used to declare and program CRG_SYNC_ETH_CTL.
 *
 */
typedef union BCM84834_CRG_SYNC_ETH_CTLr_s {
	uint32_t v[1];
	uint32_t crg_sync_eth_ctl[1];
	uint32_t _crg_sync_eth_ctl;
} BCM84834_CRG_SYNC_ETH_CTLr_t;

#define BCM84834_CRG_SYNC_ETH_CTLr_CLR(r) (r).crg_sync_eth_ctl[0] = 0
#define BCM84834_CRG_SYNC_ETH_CTLr_SET(r,d) (r).crg_sync_eth_ctl[0] = d
#define BCM84834_CRG_SYNC_ETH_CTLr_GET(r) (r).crg_sync_eth_ctl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_GET(r) (((r).crg_sync_eth_ctl[0]) & 0xf)
#define BCM84834_CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_SET(r,f) (r).crg_sync_eth_ctl[0]=(((r).crg_sync_eth_ctl[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access CRG_SYNC_ETH_CTL.
 *
 */
#define BCM84834_READ_CRG_SYNC_ETH_CTLr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_SYNC_ETH_CTLr,(_r._crg_sync_eth_ctl))
#define BCM84834_WRITE_CRG_SYNC_ETH_CTLr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_SYNC_ETH_CTLr,(_r._crg_sync_eth_ctl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_SYNC_ETH_CTLr BCM84834_CRG_SYNC_ETH_CTLr
#define CRG_SYNC_ETH_CTLr_SIZE BCM84834_CRG_SYNC_ETH_CTLr_SIZE
typedef BCM84834_CRG_SYNC_ETH_CTLr_t CRG_SYNC_ETH_CTLr_t;
#define CRG_SYNC_ETH_CTLr_CLR BCM84834_CRG_SYNC_ETH_CTLr_CLR
#define CRG_SYNC_ETH_CTLr_SET BCM84834_CRG_SYNC_ETH_CTLr_SET
#define CRG_SYNC_ETH_CTLr_GET BCM84834_CRG_SYNC_ETH_CTLr_GET
#define CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_GET BCM84834_CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_GET
#define CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_SET BCM84834_CRG_SYNC_ETH_CTLr_SEL_CLK_SYNC_ETHf_SET
#define READ_CRG_SYNC_ETH_CTLr BCM84834_READ_CRG_SYNC_ETH_CTLr
#define WRITE_CRG_SYNC_ETH_CTLr BCM84834_WRITE_CRG_SYNC_ETH_CTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_SYNC_ETH_CTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCM84834
 * REGISTER:  CRG_SCRATCH
 * BLOCKS:   CRG
 * REGADDR:  0x418c
 * DEVAD:    30
 * DESC:     Scratch Register
 * SIZE:     32
 * FIELDS:
 *     SCRATCH          
 *
 ******************************************************************************/
#define BCM84834_CRG_SCRATCHr (0x001e418c | PHY_REG_ACC_BRCM_XE)

#define BCM84834_CRG_SCRATCHr_SIZE 4

/*
 * This structure should be used to declare and program CRG_SCRATCH.
 *
 */
typedef union BCM84834_CRG_SCRATCHr_s {
	uint32_t v[1];
	uint32_t crg_scratch[1];
	uint32_t _crg_scratch;
} BCM84834_CRG_SCRATCHr_t;

#define BCM84834_CRG_SCRATCHr_CLR(r) (r).crg_scratch[0] = 0
#define BCM84834_CRG_SCRATCHr_SET(r,d) (r).crg_scratch[0] = d
#define BCM84834_CRG_SCRATCHr_GET(r) (r).crg_scratch[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCM84834_CRG_SCRATCHr_SCRATCHf_GET(r) (((r).crg_scratch[0]) & 0xffff)
#define BCM84834_CRG_SCRATCHr_SCRATCHf_SET(r,f) (r).crg_scratch[0]=(((r).crg_scratch[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CRG_SCRATCH.
 *
 */
#define BCM84834_READ_CRG_SCRATCHr(_pc,_r) phy_brcm_xe_read(_pc,BCM84834_CRG_SCRATCHr,(_r._crg_scratch))
#define BCM84834_WRITE_CRG_SCRATCHr(_pc,_r) phy_brcm_xe_write(_pc,BCM84834_CRG_SCRATCHr,(_r._crg_scratch))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRG_SCRATCHr BCM84834_CRG_SCRATCHr
#define CRG_SCRATCHr_SIZE BCM84834_CRG_SCRATCHr_SIZE
typedef BCM84834_CRG_SCRATCHr_t CRG_SCRATCHr_t;
#define CRG_SCRATCHr_CLR BCM84834_CRG_SCRATCHr_CLR
#define CRG_SCRATCHr_SET BCM84834_CRG_SCRATCHr_SET
#define CRG_SCRATCHr_GET BCM84834_CRG_SCRATCHr_GET
#define CRG_SCRATCHr_SCRATCHf_GET BCM84834_CRG_SCRATCHr_SCRATCHf_GET
#define CRG_SCRATCHr_SCRATCHf_SET BCM84834_CRG_SCRATCHr_SCRATCHf_SET
#define READ_CRG_SCRATCHr BCM84834_READ_CRG_SCRATCHr
#define WRITE_CRG_SCRATCHr BCM84834_WRITE_CRG_SCRATCHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCM84834_CRG_SCRATCHr'
 ******************************************************************************/




#endif /* __BCM84834_DEFS_H__ */
