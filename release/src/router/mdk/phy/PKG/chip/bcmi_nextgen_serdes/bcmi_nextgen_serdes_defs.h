#ifndef __BCMI_NEXTGEN_SERDES_DEFS_H__
#define __BCMI_NEXTGEN_SERDES_DEFS_H__
/*******************************************************************************
 *
 * $Copyright: Copyright 2013 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_NEXTGEN_SERDES.
 * This file provides all basic definitions required to program the BCMI_NEXTGEN_SERDES.
 *
 * This file is autogenerated. Please do not edit.
 *
 ******************************************************************************/

#include <phy/phy_xgs_iblk.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 *
 ******************************************************************************/



/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_CTRL
 * BLOCKS:   IEEE
 * REGADDR:  0x0000
 * DESC:     MII Control (Addr 00h)
 * SIZE:     32
 * FIELDS:
 *     MII_CTRL         MII_CTRL
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_CTRLr (0x00000000 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program MII_CTRL.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_CTRLr_s {
	uint32_t v[1];
	uint32_t mii_ctrl[1];
	uint32_t _mii_ctrl;
} BCMI_NEXTGEN_SERDES_MII_CTRLr_t;

#define BCMI_NEXTGEN_SERDES_MII_CTRLr_CLR(r) (r).mii_ctrl[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_CTRLr_SET(r,d) (r).mii_ctrl[0] = d
#define BCMI_NEXTGEN_SERDES_MII_CTRLr_GET(r) (r).mii_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_CTRLr_MII_CTRLf_GET(r) (((r).mii_ctrl[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_CTRLr_MII_CTRLf_SET(r,f) (r).mii_ctrl[0]=(((r).mii_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_CTRL.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_CTRLr,(_r._mii_ctrl))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_CTRLr,(_r._mii_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_CTRLr BCMI_NEXTGEN_SERDES_MII_CTRLr
#define MII_CTRLr_SIZE BCMI_NEXTGEN_SERDES_MII_CTRLr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_CTRLr_t MII_CTRLr_t;
#define MII_CTRLr_CLR BCMI_NEXTGEN_SERDES_MII_CTRLr_CLR
#define MII_CTRLr_SET BCMI_NEXTGEN_SERDES_MII_CTRLr_SET
#define MII_CTRLr_GET BCMI_NEXTGEN_SERDES_MII_CTRLr_GET
#define MII_CTRLr_MII_CTRLf_GET BCMI_NEXTGEN_SERDES_MII_CTRLr_MII_CTRLf_GET
#define MII_CTRLr_MII_CTRLf_SET BCMI_NEXTGEN_SERDES_MII_CTRLr_MII_CTRLf_SET
#define READ_MII_CTRLr BCMI_NEXTGEN_SERDES_READ_MII_CTRLr
#define WRITE_MII_CTRLr BCMI_NEXTGEN_SERDES_WRITE_MII_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_STAT
 * BLOCKS:   IEEE
 * REGADDR:  0x0001
 * DESC:     MII Status (Addr 01h)
 * SIZE:     32
 * FIELDS:
 *     MII_STAT         MII_STAT
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_STATr (0x00000001 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_STATr_SIZE 4

/*
 * This structure should be used to declare and program MII_STAT.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_STATr_s {
	uint32_t v[1];
	uint32_t mii_stat[1];
	uint32_t _mii_stat;
} BCMI_NEXTGEN_SERDES_MII_STATr_t;

#define BCMI_NEXTGEN_SERDES_MII_STATr_CLR(r) (r).mii_stat[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_STATr_SET(r,d) (r).mii_stat[0] = d
#define BCMI_NEXTGEN_SERDES_MII_STATr_GET(r) (r).mii_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_STATr_MII_STATf_GET(r) (((r).mii_stat[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_STATr_MII_STATf_SET(r,f) (r).mii_stat[0]=(((r).mii_stat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_STAT.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_STATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_STATr,(_r._mii_stat))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_STATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_STATr,(_r._mii_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_STATr BCMI_NEXTGEN_SERDES_MII_STATr
#define MII_STATr_SIZE BCMI_NEXTGEN_SERDES_MII_STATr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_STATr_t MII_STATr_t;
#define MII_STATr_CLR BCMI_NEXTGEN_SERDES_MII_STATr_CLR
#define MII_STATr_SET BCMI_NEXTGEN_SERDES_MII_STATr_SET
#define MII_STATr_GET BCMI_NEXTGEN_SERDES_MII_STATr_GET
#define MII_STATr_MII_STATf_GET BCMI_NEXTGEN_SERDES_MII_STATr_MII_STATf_GET
#define MII_STATr_MII_STATf_SET BCMI_NEXTGEN_SERDES_MII_STATr_MII_STATf_SET
#define READ_MII_STATr BCMI_NEXTGEN_SERDES_READ_MII_STATr
#define WRITE_MII_STATr BCMI_NEXTGEN_SERDES_WRITE_MII_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_PHY_ID0
 * BLOCKS:   IEEE
 * REGADDR:  0x0002
 * DESC:     PHY ID 0 (Addr 02h)
 * SIZE:     32
 * FIELDS:
 *     MII_PHY_ID0      MII_PHY_ID0
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r (0x00000002 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_SIZE 4

/*
 * This structure should be used to declare and program MII_PHY_ID0.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_s {
	uint32_t v[1];
	uint32_t mii_phy_id0[1];
	uint32_t _mii_phy_id0;
} BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_t;

#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_CLR(r) (r).mii_phy_id0[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_SET(r,d) (r).mii_phy_id0[0] = d
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_GET(r) (r).mii_phy_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_MII_PHY_ID0f_GET(r) (((r).mii_phy_id0[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_MII_PHY_ID0f_SET(r,f) (r).mii_phy_id0[0]=(((r).mii_phy_id0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_PHY_ID0.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_PHY_ID0r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_PHY_ID0r,(_r._mii_phy_id0))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_PHY_ID0r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_PHY_ID0r,(_r._mii_phy_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_PHY_ID0r BCMI_NEXTGEN_SERDES_MII_PHY_ID0r
#define MII_PHY_ID0r_SIZE BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_t MII_PHY_ID0r_t;
#define MII_PHY_ID0r_CLR BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_CLR
#define MII_PHY_ID0r_SET BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_SET
#define MII_PHY_ID0r_GET BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_GET
#define MII_PHY_ID0r_MII_PHY_ID0f_GET BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_MII_PHY_ID0f_GET
#define MII_PHY_ID0r_MII_PHY_ID0f_SET BCMI_NEXTGEN_SERDES_MII_PHY_ID0r_MII_PHY_ID0f_SET
#define READ_MII_PHY_ID0r BCMI_NEXTGEN_SERDES_READ_MII_PHY_ID0r
#define WRITE_MII_PHY_ID0r BCMI_NEXTGEN_SERDES_WRITE_MII_PHY_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_PHY_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_PHY_ID1
 * BLOCKS:   IEEE
 * REGADDR:  0x0003
 * DESC:     PHY ID 1 (Addr 03h)
 * SIZE:     32
 * FIELDS:
 *     MII_PHY_ID1      MII_PHY_ID1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r (0x00000003 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_SIZE 4

/*
 * This structure should be used to declare and program MII_PHY_ID1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_s {
	uint32_t v[1];
	uint32_t mii_phy_id1[1];
	uint32_t _mii_phy_id1;
} BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_t;

#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_CLR(r) (r).mii_phy_id1[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_SET(r,d) (r).mii_phy_id1[0] = d
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_GET(r) (r).mii_phy_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_MII_PHY_ID1f_GET(r) (((r).mii_phy_id1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_MII_PHY_ID1f_SET(r,f) (r).mii_phy_id1[0]=(((r).mii_phy_id1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_PHY_ID1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_PHY_ID1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_PHY_ID1r,(_r._mii_phy_id1))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_PHY_ID1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_PHY_ID1r,(_r._mii_phy_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_PHY_ID1r BCMI_NEXTGEN_SERDES_MII_PHY_ID1r
#define MII_PHY_ID1r_SIZE BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_t MII_PHY_ID1r_t;
#define MII_PHY_ID1r_CLR BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_CLR
#define MII_PHY_ID1r_SET BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_SET
#define MII_PHY_ID1r_GET BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_GET
#define MII_PHY_ID1r_MII_PHY_ID1f_GET BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_MII_PHY_ID1f_GET
#define MII_PHY_ID1r_MII_PHY_ID1f_SET BCMI_NEXTGEN_SERDES_MII_PHY_ID1r_MII_PHY_ID1f_SET
#define READ_MII_PHY_ID1r BCMI_NEXTGEN_SERDES_READ_MII_PHY_ID1r
#define WRITE_MII_PHY_ID1r BCMI_NEXTGEN_SERDES_WRITE_MII_PHY_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_PHY_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_ANA
 * BLOCKS:   IEEE
 * REGADDR:  0x0004
 * DESC:     Autoneg Adv (Addr 04h)
 * SIZE:     32
 * FIELDS:
 *     MII_ANA          MII_ANA
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_ANAr (0x00000004 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_ANAr_SIZE 4

/*
 * This structure should be used to declare and program MII_ANA.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_ANAr_s {
	uint32_t v[1];
	uint32_t mii_ana[1];
	uint32_t _mii_ana;
} BCMI_NEXTGEN_SERDES_MII_ANAr_t;

#define BCMI_NEXTGEN_SERDES_MII_ANAr_CLR(r) (r).mii_ana[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_ANAr_SET(r,d) (r).mii_ana[0] = d
#define BCMI_NEXTGEN_SERDES_MII_ANAr_GET(r) (r).mii_ana[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_ANAr_MII_ANAf_GET(r) (((r).mii_ana[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_ANAr_MII_ANAf_SET(r,f) (r).mii_ana[0]=(((r).mii_ana[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_ANA.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_ANAr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_ANAr,(_r._mii_ana))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_ANAr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_ANAr,(_r._mii_ana))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_ANAr BCMI_NEXTGEN_SERDES_MII_ANAr
#define MII_ANAr_SIZE BCMI_NEXTGEN_SERDES_MII_ANAr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_ANAr_t MII_ANAr_t;
#define MII_ANAr_CLR BCMI_NEXTGEN_SERDES_MII_ANAr_CLR
#define MII_ANAr_SET BCMI_NEXTGEN_SERDES_MII_ANAr_SET
#define MII_ANAr_GET BCMI_NEXTGEN_SERDES_MII_ANAr_GET
#define MII_ANAr_MII_ANAf_GET BCMI_NEXTGEN_SERDES_MII_ANAr_MII_ANAf_GET
#define MII_ANAr_MII_ANAf_SET BCMI_NEXTGEN_SERDES_MII_ANAr_MII_ANAf_SET
#define READ_MII_ANAr BCMI_NEXTGEN_SERDES_READ_MII_ANAr
#define WRITE_MII_ANAr BCMI_NEXTGEN_SERDES_WRITE_MII_ANAr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_ANAr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_ANP
 * BLOCKS:   IEEE
 * REGADDR:  0x0005
 * DESC:     Autoneg Link Partner Ability (Addr 05h)
 * SIZE:     32
 * FIELDS:
 *     MII_ANP          MII_ANP
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_ANPr (0x00000005 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_ANPr_SIZE 4

/*
 * This structure should be used to declare and program MII_ANP.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_ANPr_s {
	uint32_t v[1];
	uint32_t mii_anp[1];
	uint32_t _mii_anp;
} BCMI_NEXTGEN_SERDES_MII_ANPr_t;

#define BCMI_NEXTGEN_SERDES_MII_ANPr_CLR(r) (r).mii_anp[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_ANPr_SET(r,d) (r).mii_anp[0] = d
#define BCMI_NEXTGEN_SERDES_MII_ANPr_GET(r) (r).mii_anp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_ANPr_MII_ANPf_GET(r) (((r).mii_anp[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_ANPr_MII_ANPf_SET(r,f) (r).mii_anp[0]=(((r).mii_anp[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_ANP.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_ANPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_ANPr,(_r._mii_anp))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_ANPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_ANPr,(_r._mii_anp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_ANPr BCMI_NEXTGEN_SERDES_MII_ANPr
#define MII_ANPr_SIZE BCMI_NEXTGEN_SERDES_MII_ANPr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_ANPr_t MII_ANPr_t;
#define MII_ANPr_CLR BCMI_NEXTGEN_SERDES_MII_ANPr_CLR
#define MII_ANPr_SET BCMI_NEXTGEN_SERDES_MII_ANPr_SET
#define MII_ANPr_GET BCMI_NEXTGEN_SERDES_MII_ANPr_GET
#define MII_ANPr_MII_ANPf_GET BCMI_NEXTGEN_SERDES_MII_ANPr_MII_ANPf_GET
#define MII_ANPr_MII_ANPf_SET BCMI_NEXTGEN_SERDES_MII_ANPr_MII_ANPf_SET
#define READ_MII_ANPr BCMI_NEXTGEN_SERDES_READ_MII_ANPr
#define WRITE_MII_ANPr BCMI_NEXTGEN_SERDES_WRITE_MII_ANPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_ANPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_AN_EXP
 * BLOCKS:   IEEE
 * REGADDR:  0x0006
 * DESC:     Autoneg Expansion (Addr 06h)
 * SIZE:     32
 * FIELDS:
 *     MII_AN_EXP       MII_AN_EXP
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr (0x00000006 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_SIZE 4

/*
 * This structure should be used to declare and program MII_AN_EXP.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_AN_EXPr_s {
	uint32_t v[1];
	uint32_t mii_an_exp[1];
	uint32_t _mii_an_exp;
} BCMI_NEXTGEN_SERDES_MII_AN_EXPr_t;

#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_CLR(r) (r).mii_an_exp[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_SET(r,d) (r).mii_an_exp[0] = d
#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_GET(r) (r).mii_an_exp[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_MII_AN_EXPf_GET(r) (((r).mii_an_exp[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_AN_EXPr_MII_AN_EXPf_SET(r,f) (r).mii_an_exp[0]=(((r).mii_an_exp[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_AN_EXP.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_AN_EXPr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_AN_EXPr,(_r._mii_an_exp))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_AN_EXPr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_AN_EXPr,(_r._mii_an_exp))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_AN_EXPr BCMI_NEXTGEN_SERDES_MII_AN_EXPr
#define MII_AN_EXPr_SIZE BCMI_NEXTGEN_SERDES_MII_AN_EXPr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_AN_EXPr_t MII_AN_EXPr_t;
#define MII_AN_EXPr_CLR BCMI_NEXTGEN_SERDES_MII_AN_EXPr_CLR
#define MII_AN_EXPr_SET BCMI_NEXTGEN_SERDES_MII_AN_EXPr_SET
#define MII_AN_EXPr_GET BCMI_NEXTGEN_SERDES_MII_AN_EXPr_GET
#define MII_AN_EXPr_MII_AN_EXPf_GET BCMI_NEXTGEN_SERDES_MII_AN_EXPr_MII_AN_EXPf_GET
#define MII_AN_EXPr_MII_AN_EXPf_SET BCMI_NEXTGEN_SERDES_MII_AN_EXPr_MII_AN_EXPf_SET
#define READ_MII_AN_EXPr BCMI_NEXTGEN_SERDES_READ_MII_AN_EXPr
#define WRITE_MII_AN_EXPr BCMI_NEXTGEN_SERDES_WRITE_MII_AN_EXPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_AN_EXPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_CTRL1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0010
 * DESC:     1000X Control 1 (Addr 10h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_CTRL1  MII_1000X_CTRL1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r (0x00000010 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_CTRL1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_s {
	uint32_t v[1];
	uint32_t mii_1000x_ctrl1[1];
	uint32_t _mii_1000x_ctrl1;
} BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_CLR(r) (r).mii_1000x_ctrl1[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_SET(r,d) (r).mii_1000x_ctrl1[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_GET(r) (r).mii_1000x_ctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_MII_1000X_CTRL1f_GET(r) (((r).mii_1000x_ctrl1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_MII_1000X_CTRL1f_SET(r,f) (r).mii_1000x_ctrl1[0]=(((r).mii_1000x_ctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_CTRL1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r,(_r._mii_1000x_ctrl1))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r,(_r._mii_1000x_ctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_CTRL1r BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r
#define MII_1000X_CTRL1r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_t MII_1000X_CTRL1r_t;
#define MII_1000X_CTRL1r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_CLR
#define MII_1000X_CTRL1r_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_SET
#define MII_1000X_CTRL1r_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_GET
#define MII_1000X_CTRL1r_MII_1000X_CTRL1f_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_MII_1000X_CTRL1f_GET
#define MII_1000X_CTRL1r_MII_1000X_CTRL1f_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r_MII_1000X_CTRL1f_SET
#define READ_MII_1000X_CTRL1r BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL1r
#define WRITE_MII_1000X_CTRL1r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_CTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_CTRL2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0011
 * DESC:     1000X Control 2 (Addr 11h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_CTRL2  MII_1000X_CTRL2
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r (0x00000011 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_CTRL2.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_s {
	uint32_t v[1];
	uint32_t mii_1000x_ctrl2[1];
	uint32_t _mii_1000x_ctrl2;
} BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_CLR(r) (r).mii_1000x_ctrl2[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_SET(r,d) (r).mii_1000x_ctrl2[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_GET(r) (r).mii_1000x_ctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_MII_1000X_CTRL2f_GET(r) (((r).mii_1000x_ctrl2[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_MII_1000X_CTRL2f_SET(r,f) (r).mii_1000x_ctrl2[0]=(((r).mii_1000x_ctrl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_CTRL2.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r,(_r._mii_1000x_ctrl2))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r,(_r._mii_1000x_ctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_CTRL2r BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r
#define MII_1000X_CTRL2r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_t MII_1000X_CTRL2r_t;
#define MII_1000X_CTRL2r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_CLR
#define MII_1000X_CTRL2r_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_SET
#define MII_1000X_CTRL2r_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_GET
#define MII_1000X_CTRL2r_MII_1000X_CTRL2f_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_MII_1000X_CTRL2f_GET
#define MII_1000X_CTRL2r_MII_1000X_CTRL2f_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r_MII_1000X_CTRL2f_SET
#define READ_MII_1000X_CTRL2r BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL2r
#define WRITE_MII_1000X_CTRL2r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_CTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_CTRL3
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0012
 * DESC:     1000X Control 3 (Addr 12h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_CTRL3  MII_1000X_CTRL3
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r (0x00000012 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_CTRL3.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_s {
	uint32_t v[1];
	uint32_t mii_1000x_ctrl3[1];
	uint32_t _mii_1000x_ctrl3;
} BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_CLR(r) (r).mii_1000x_ctrl3[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_SET(r,d) (r).mii_1000x_ctrl3[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_GET(r) (r).mii_1000x_ctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_MII_1000X_CTRL3f_GET(r) (((r).mii_1000x_ctrl3[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_MII_1000X_CTRL3f_SET(r,f) (r).mii_1000x_ctrl3[0]=(((r).mii_1000x_ctrl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_CTRL3.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r,(_r._mii_1000x_ctrl3))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r,(_r._mii_1000x_ctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_CTRL3r BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r
#define MII_1000X_CTRL3r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_t MII_1000X_CTRL3r_t;
#define MII_1000X_CTRL3r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_CLR
#define MII_1000X_CTRL3r_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_SET
#define MII_1000X_CTRL3r_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_GET
#define MII_1000X_CTRL3r_MII_1000X_CTRL3f_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_MII_1000X_CTRL3f_GET
#define MII_1000X_CTRL3r_MII_1000X_CTRL3f_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r_MII_1000X_CTRL3f_SET
#define READ_MII_1000X_CTRL3r BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL3r
#define WRITE_MII_1000X_CTRL3r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_CTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_CTRL4
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0013
 * DESC:     1000X Control 4 (Addr 13h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_CTRL4  MII_1000X_CTRL4
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r (0x00000013 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_CTRL4.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_s {
	uint32_t v[1];
	uint32_t mii_1000x_ctrl4[1];
	uint32_t _mii_1000x_ctrl4;
} BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_CLR(r) (r).mii_1000x_ctrl4[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_SET(r,d) (r).mii_1000x_ctrl4[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_GET(r) (r).mii_1000x_ctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_MII_1000X_CTRL4f_GET(r) (((r).mii_1000x_ctrl4[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_MII_1000X_CTRL4f_SET(r,f) (r).mii_1000x_ctrl4[0]=(((r).mii_1000x_ctrl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_CTRL4.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL4r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r,(_r._mii_1000x_ctrl4))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL4r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r,(_r._mii_1000x_ctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_CTRL4r BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r
#define MII_1000X_CTRL4r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_t MII_1000X_CTRL4r_t;
#define MII_1000X_CTRL4r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_CLR
#define MII_1000X_CTRL4r_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_SET
#define MII_1000X_CTRL4r_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_GET
#define MII_1000X_CTRL4r_MII_1000X_CTRL4f_GET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_MII_1000X_CTRL4f_GET
#define MII_1000X_CTRL4r_MII_1000X_CTRL4f_SET BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r_MII_1000X_CTRL4f_SET
#define READ_MII_1000X_CTRL4r BCMI_NEXTGEN_SERDES_READ_MII_1000X_CTRL4r
#define WRITE_MII_1000X_CTRL4r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_CTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_CTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_STAT1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0014
 * DESC:     1000X Status 1 (Addr 14h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_STAT1  MII_1000X_STAT1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r (0x00000014 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_STAT1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_s {
	uint32_t v[1];
	uint32_t mii_1000x_stat1[1];
	uint32_t _mii_1000x_stat1;
} BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_CLR(r) (r).mii_1000x_stat1[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_SET(r,d) (r).mii_1000x_stat1[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_GET(r) (r).mii_1000x_stat1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_MII_1000X_STAT1f_GET(r) (((r).mii_1000x_stat1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_MII_1000X_STAT1f_SET(r,f) (r).mii_1000x_stat1[0]=(((r).mii_1000x_stat1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_STAT1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r,(_r._mii_1000x_stat1))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r,(_r._mii_1000x_stat1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_STAT1r BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r
#define MII_1000X_STAT1r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_t MII_1000X_STAT1r_t;
#define MII_1000X_STAT1r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_CLR
#define MII_1000X_STAT1r_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_SET
#define MII_1000X_STAT1r_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_GET
#define MII_1000X_STAT1r_MII_1000X_STAT1f_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_MII_1000X_STAT1f_GET
#define MII_1000X_STAT1r_MII_1000X_STAT1f_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r_MII_1000X_STAT1f_SET
#define READ_MII_1000X_STAT1r BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT1r
#define WRITE_MII_1000X_STAT1r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_STAT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_STAT2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0015
 * DESC:     1000X Status 2 (Addr 15h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_STAT2  MII_1000X_STAT2
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r (0x00000015 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_STAT2.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_s {
	uint32_t v[1];
	uint32_t mii_1000x_stat2[1];
	uint32_t _mii_1000x_stat2;
} BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_CLR(r) (r).mii_1000x_stat2[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_SET(r,d) (r).mii_1000x_stat2[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_GET(r) (r).mii_1000x_stat2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_MII_1000X_STAT2f_GET(r) (((r).mii_1000x_stat2[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_MII_1000X_STAT2f_SET(r,f) (r).mii_1000x_stat2[0]=(((r).mii_1000x_stat2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_STAT2.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r,(_r._mii_1000x_stat2))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r,(_r._mii_1000x_stat2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_STAT2r BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r
#define MII_1000X_STAT2r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_t MII_1000X_STAT2r_t;
#define MII_1000X_STAT2r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_CLR
#define MII_1000X_STAT2r_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_SET
#define MII_1000X_STAT2r_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_GET
#define MII_1000X_STAT2r_MII_1000X_STAT2f_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_MII_1000X_STAT2f_GET
#define MII_1000X_STAT2r_MII_1000X_STAT2f_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r_MII_1000X_STAT2f_SET
#define READ_MII_1000X_STAT2r BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT2r
#define WRITE_MII_1000X_STAT2r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_STAT2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_STAT3
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0016
 * DESC:     1000X Status 3 (Addr 16h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_STAT3  MII_1000X_STAT3
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r (0x00000016 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_STAT3.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_s {
	uint32_t v[1];
	uint32_t mii_1000x_stat3[1];
	uint32_t _mii_1000x_stat3;
} BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_CLR(r) (r).mii_1000x_stat3[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_SET(r,d) (r).mii_1000x_stat3[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_GET(r) (r).mii_1000x_stat3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_MII_1000X_STAT3f_GET(r) (((r).mii_1000x_stat3[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_MII_1000X_STAT3f_SET(r,f) (r).mii_1000x_stat3[0]=(((r).mii_1000x_stat3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_STAT3.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r,(_r._mii_1000x_stat3))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r,(_r._mii_1000x_stat3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_STAT3r BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r
#define MII_1000X_STAT3r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_t MII_1000X_STAT3r_t;
#define MII_1000X_STAT3r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_CLR
#define MII_1000X_STAT3r_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_SET
#define MII_1000X_STAT3r_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_GET
#define MII_1000X_STAT3r_MII_1000X_STAT3f_GET BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_MII_1000X_STAT3f_GET
#define MII_1000X_STAT3r_MII_1000X_STAT3f_SET BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r_MII_1000X_STAT3f_SET
#define READ_MII_1000X_STAT3r BCMI_NEXTGEN_SERDES_READ_MII_1000X_STAT3r
#define WRITE_MII_1000X_STAT3r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_STAT3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_STAT3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_PKT_COUNTER
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0017
 * DESC:     Ber Crc Err Rx Pkt cntr (Addr 17h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_PKT_COUNTER MII_1000X_PKT_COUNTER
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr (0x00000017 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_PKT_COUNTER.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_s {
	uint32_t v[1];
	uint32_t mii_1000x_pkt_counter[1];
	uint32_t _mii_1000x_pkt_counter;
} BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_CLR(r) (r).mii_1000x_pkt_counter[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_SET(r,d) (r).mii_1000x_pkt_counter[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_GET(r) (r).mii_1000x_pkt_counter[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_GET(r) (((r).mii_1000x_pkt_counter[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_SET(r,f) (r).mii_1000x_pkt_counter[0]=(((r).mii_1000x_pkt_counter[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_PKT_COUNTER.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_PKT_COUNTERr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr,(_r._mii_1000x_pkt_counter))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PKT_COUNTERr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr,(_r._mii_1000x_pkt_counter))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_PKT_COUNTERr BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr
#define MII_1000X_PKT_COUNTERr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_t MII_1000X_PKT_COUNTERr_t;
#define MII_1000X_PKT_COUNTERr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_CLR
#define MII_1000X_PKT_COUNTERr_SET BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_SET
#define MII_1000X_PKT_COUNTERr_GET BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_GET
#define MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_GET BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_GET
#define MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_SET BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr_MII_1000X_PKT_COUNTERf_SET
#define READ_MII_1000X_PKT_COUNTERr BCMI_NEXTGEN_SERDES_READ_MII_1000X_PKT_COUNTERr
#define WRITE_MII_1000X_PKT_COUNTERr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PKT_COUNTERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_PKT_COUNTERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_PRBS_CTRL
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0018
 * DESC:     Prbs Control (Addr 18h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_PRBS_CTRL MII_1000X_PRBS_CTRL
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr (0x00000018 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_PRBS_CTRL.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_s {
	uint32_t v[1];
	uint32_t mii_1000x_prbs_ctrl[1];
	uint32_t _mii_1000x_prbs_ctrl;
} BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_CLR(r) (r).mii_1000x_prbs_ctrl[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_SET(r,d) (r).mii_1000x_prbs_ctrl[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_GET(r) (r).mii_1000x_prbs_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_GET(r) (((r).mii_1000x_prbs_ctrl[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_SET(r,f) (r).mii_1000x_prbs_ctrl[0]=(((r).mii_1000x_prbs_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_PRBS_CTRL.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_PRBS_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr,(_r._mii_1000x_prbs_ctrl))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PRBS_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr,(_r._mii_1000x_prbs_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_PRBS_CTRLr BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr
#define MII_1000X_PRBS_CTRLr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_t MII_1000X_PRBS_CTRLr_t;
#define MII_1000X_PRBS_CTRLr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_CLR
#define MII_1000X_PRBS_CTRLr_SET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_SET
#define MII_1000X_PRBS_CTRLr_GET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_GET
#define MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_GET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_GET
#define MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_SET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr_MII_1000X_PRBS_CTRLf_SET
#define READ_MII_1000X_PRBS_CTRLr BCMI_NEXTGEN_SERDES_READ_MII_1000X_PRBS_CTRLr
#define WRITE_MII_1000X_PRBS_CTRLr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PRBS_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_PRBS_STAT
 * BLOCKS:   DIGITAL
 * REGADDR:  0x0019
 * DESC:     Prbs Status (Addr 19h)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_PRBS_STAT MII_1000X_PRBS_STAT
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr (0x00000019 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_PRBS_STAT.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_s {
	uint32_t v[1];
	uint32_t mii_1000x_prbs_stat[1];
	uint32_t _mii_1000x_prbs_stat;
} BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_CLR(r) (r).mii_1000x_prbs_stat[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_SET(r,d) (r).mii_1000x_prbs_stat[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_GET(r) (r).mii_1000x_prbs_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_GET(r) (((r).mii_1000x_prbs_stat[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_SET(r,f) (r).mii_1000x_prbs_stat[0]=(((r).mii_1000x_prbs_stat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_PRBS_STAT.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_PRBS_STATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr,(_r._mii_1000x_prbs_stat))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PRBS_STATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr,(_r._mii_1000x_prbs_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_PRBS_STATr BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr
#define MII_1000X_PRBS_STATr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_t MII_1000X_PRBS_STATr_t;
#define MII_1000X_PRBS_STATr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_CLR
#define MII_1000X_PRBS_STATr_SET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_SET
#define MII_1000X_PRBS_STATr_GET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_GET
#define MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_GET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_GET
#define MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_SET BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr_MII_1000X_PRBS_STATf_SET
#define READ_MII_1000X_PRBS_STATr BCMI_NEXTGEN_SERDES_READ_MII_1000X_PRBS_STATr
#define WRITE_MII_1000X_PRBS_STATr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PRBS_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_PRBS_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_PAT_GEN_CTRL
 * BLOCKS:   DIGITAL
 * REGADDR:  0x001a
 * DESC:     Pat Gen Control (Addr 1Ah)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_PAT_GEN_CTRL MII_1000X_PAT_GEN_CTRL
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr (0x0000001a | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_PAT_GEN_CTRL.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_s {
	uint32_t v[1];
	uint32_t mii_1000x_pat_gen_ctrl[1];
	uint32_t _mii_1000x_pat_gen_ctrl;
} BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_CLR(r) (r).mii_1000x_pat_gen_ctrl[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_SET(r,d) (r).mii_1000x_pat_gen_ctrl[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_GET(r) (r).mii_1000x_pat_gen_ctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_GET(r) (((r).mii_1000x_pat_gen_ctrl[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_SET(r,f) (r).mii_1000x_pat_gen_ctrl[0]=(((r).mii_1000x_pat_gen_ctrl[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_PAT_GEN_CTRL.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_PAT_GEN_CTRLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr,(_r._mii_1000x_pat_gen_ctrl))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PAT_GEN_CTRLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr,(_r._mii_1000x_pat_gen_ctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_PAT_GEN_CTRLr BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr
#define MII_1000X_PAT_GEN_CTRLr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_t MII_1000X_PAT_GEN_CTRLr_t;
#define MII_1000X_PAT_GEN_CTRLr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_CLR
#define MII_1000X_PAT_GEN_CTRLr_SET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_SET
#define MII_1000X_PAT_GEN_CTRLr_GET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_GET
#define MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_GET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_GET
#define MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_SET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr_MII_1000X_PAT_GEN_CTRLf_SET
#define READ_MII_1000X_PAT_GEN_CTRLr BCMI_NEXTGEN_SERDES_READ_MII_1000X_PAT_GEN_CTRLr
#define WRITE_MII_1000X_PAT_GEN_CTRLr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PAT_GEN_CTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_CTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_PAT_GEN_STAT
 * BLOCKS:   DIGITAL
 * REGADDR:  0x001b
 * DESC:     Pat Gen Status (Addr 1Bh)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_PAT_GEN_STAT MII_1000X_PAT_GEN_STAT
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr (0x0000001b | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_PAT_GEN_STAT.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_s {
	uint32_t v[1];
	uint32_t mii_1000x_pat_gen_stat[1];
	uint32_t _mii_1000x_pat_gen_stat;
} BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_CLR(r) (r).mii_1000x_pat_gen_stat[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_SET(r,d) (r).mii_1000x_pat_gen_stat[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_GET(r) (r).mii_1000x_pat_gen_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_GET(r) (((r).mii_1000x_pat_gen_stat[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_SET(r,f) (r).mii_1000x_pat_gen_stat[0]=(((r).mii_1000x_pat_gen_stat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_PAT_GEN_STAT.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_PAT_GEN_STATr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr,(_r._mii_1000x_pat_gen_stat))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PAT_GEN_STATr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr,(_r._mii_1000x_pat_gen_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_PAT_GEN_STATr BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr
#define MII_1000X_PAT_GEN_STATr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_t MII_1000X_PAT_GEN_STATr_t;
#define MII_1000X_PAT_GEN_STATr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_CLR
#define MII_1000X_PAT_GEN_STATr_SET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_SET
#define MII_1000X_PAT_GEN_STATr_GET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_GET
#define MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_GET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_GET
#define MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_SET BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr_MII_1000X_PAT_GEN_STATf_SET
#define READ_MII_1000X_PAT_GEN_STATr BCMI_NEXTGEN_SERDES_READ_MII_1000X_PAT_GEN_STATr
#define WRITE_MII_1000X_PAT_GEN_STATr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_PAT_GEN_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_PAT_GEN_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_TEST_MODE
 * BLOCKS:   DIGITAL
 * REGADDR:  0x001c
 * DESC:     Test Mode (Addr 1Ch)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_TEST_MODE MII_1000X_TEST_MODE
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr (0x0000001c | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_TEST_MODE.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_s {
	uint32_t v[1];
	uint32_t mii_1000x_test_mode[1];
	uint32_t _mii_1000x_test_mode;
} BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_CLR(r) (r).mii_1000x_test_mode[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_SET(r,d) (r).mii_1000x_test_mode[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_GET(r) (r).mii_1000x_test_mode[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_GET(r) (((r).mii_1000x_test_mode[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_SET(r,f) (r).mii_1000x_test_mode[0]=(((r).mii_1000x_test_mode[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_TEST_MODE.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_TEST_MODEr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr,(_r._mii_1000x_test_mode))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_TEST_MODEr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr,(_r._mii_1000x_test_mode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_TEST_MODEr BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr
#define MII_1000X_TEST_MODEr_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_t MII_1000X_TEST_MODEr_t;
#define MII_1000X_TEST_MODEr_CLR BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_CLR
#define MII_1000X_TEST_MODEr_SET BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_SET
#define MII_1000X_TEST_MODEr_GET BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_GET
#define MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_GET BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_GET
#define MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_SET BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr_MII_1000X_TEST_MODEf_SET
#define READ_MII_1000X_TEST_MODEr BCMI_NEXTGEN_SERDES_READ_MII_1000X_TEST_MODEr
#define WRITE_MII_1000X_TEST_MODEr BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_TEST_MODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_TEST_MODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_FORCE_TX_DATA1
 * BLOCKS:   DIGITAL
 * REGADDR:  0x001d
 * DESC:     Force Tx Data1 (Addr 1Dh)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_FORCE_TX_DATA1 MII_1000X_FORCE_TX_DATA1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r (0x0000001d | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_FORCE_TX_DATA1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_s {
	uint32_t v[1];
	uint32_t mii_1000x_force_tx_data1[1];
	uint32_t _mii_1000x_force_tx_data1;
} BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_CLR(r) (r).mii_1000x_force_tx_data1[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_SET(r,d) (r).mii_1000x_force_tx_data1[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_GET(r) (r).mii_1000x_force_tx_data1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_GET(r) (((r).mii_1000x_force_tx_data1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_SET(r,f) (r).mii_1000x_force_tx_data1[0]=(((r).mii_1000x_force_tx_data1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_FORCE_TX_DATA1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_FORCE_TX_DATA1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r,(_r._mii_1000x_force_tx_data1))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_FORCE_TX_DATA1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r,(_r._mii_1000x_force_tx_data1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_FORCE_TX_DATA1r BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r
#define MII_1000X_FORCE_TX_DATA1r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_t MII_1000X_FORCE_TX_DATA1r_t;
#define MII_1000X_FORCE_TX_DATA1r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_CLR
#define MII_1000X_FORCE_TX_DATA1r_SET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_SET
#define MII_1000X_FORCE_TX_DATA1r_GET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_GET
#define MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_GET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_GET
#define MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_SET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r_MII_1000X_FORCE_TX_DATA1f_SET
#define READ_MII_1000X_FORCE_TX_DATA1r BCMI_NEXTGEN_SERDES_READ_MII_1000X_FORCE_TX_DATA1r
#define WRITE_MII_1000X_FORCE_TX_DATA1r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_FORCE_TX_DATA1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  MII_1000X_FORCE_TX_DATA2
 * BLOCKS:   DIGITAL
 * REGADDR:  0x001e
 * DESC:     Force Tx Data2 (Addr 1Eh)
 * SIZE:     32
 * FIELDS:
 *     MII_1000X_FORCE_TX_DATA2 MII_1000X_FORCE_TX_DATA2
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r (0x0000001e | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_SIZE 4

/*
 * This structure should be used to declare and program MII_1000X_FORCE_TX_DATA2.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_s {
	uint32_t v[1];
	uint32_t mii_1000x_force_tx_data2[1];
	uint32_t _mii_1000x_force_tx_data2;
} BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_t;

#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_CLR(r) (r).mii_1000x_force_tx_data2[0] = 0
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_SET(r,d) (r).mii_1000x_force_tx_data2[0] = d
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_GET(r) (r).mii_1000x_force_tx_data2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_GET(r) (((r).mii_1000x_force_tx_data2[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_SET(r,f) (r).mii_1000x_force_tx_data2[0]=(((r).mii_1000x_force_tx_data2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access MII_1000X_FORCE_TX_DATA2.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_MII_1000X_FORCE_TX_DATA2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r,(_r._mii_1000x_force_tx_data2))
#define BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_FORCE_TX_DATA2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r,(_r._mii_1000x_force_tx_data2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MII_1000X_FORCE_TX_DATA2r BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r
#define MII_1000X_FORCE_TX_DATA2r_SIZE BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_SIZE
typedef BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_t MII_1000X_FORCE_TX_DATA2r_t;
#define MII_1000X_FORCE_TX_DATA2r_CLR BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_CLR
#define MII_1000X_FORCE_TX_DATA2r_SET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_SET
#define MII_1000X_FORCE_TX_DATA2r_GET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_GET
#define MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_GET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_GET
#define MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_SET BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r_MII_1000X_FORCE_TX_DATA2f_SET
#define READ_MII_1000X_FORCE_TX_DATA2r BCMI_NEXTGEN_SERDES_READ_MII_1000X_FORCE_TX_DATA2r
#define WRITE_MII_1000X_FORCE_TX_DATA2r BCMI_NEXTGEN_SERDES_WRITE_MII_1000X_FORCE_TX_DATA2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_MII_1000X_FORCE_TX_DATA2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_TX
 * BLOCKS:   ANALOG
 * REGADDR:  0x0110
 * DESC:     Analog Tx (Addr 10h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_TX        ANALOG_TX
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_TXr (0x00000110 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_TX.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_TXr_s {
	uint32_t v[1];
	uint32_t analog_tx[1];
	uint32_t _analog_tx;
} BCMI_NEXTGEN_SERDES_ANALOG_TXr_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_CLR(r) (r).analog_tx[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_SET(r,d) (r).analog_tx[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_GET(r) (r).analog_tx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_ANALOG_TXf_GET(r) (((r).analog_tx[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_TXr_ANALOG_TXf_SET(r,f) (r).analog_tx[0]=(((r).analog_tx[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_TX.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_TXr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TXr,(_r._analog_tx))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TXr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TXr,(_r._analog_tx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_TXr BCMI_NEXTGEN_SERDES_ANALOG_TXr
#define ANALOG_TXr_SIZE BCMI_NEXTGEN_SERDES_ANALOG_TXr_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_TXr_t ANALOG_TXr_t;
#define ANALOG_TXr_CLR BCMI_NEXTGEN_SERDES_ANALOG_TXr_CLR
#define ANALOG_TXr_SET BCMI_NEXTGEN_SERDES_ANALOG_TXr_SET
#define ANALOG_TXr_GET BCMI_NEXTGEN_SERDES_ANALOG_TXr_GET
#define ANALOG_TXr_ANALOG_TXf_GET BCMI_NEXTGEN_SERDES_ANALOG_TXr_ANALOG_TXf_GET
#define ANALOG_TXr_ANALOG_TXf_SET BCMI_NEXTGEN_SERDES_ANALOG_TXr_ANALOG_TXf_SET
#define READ_ANALOG_TXr BCMI_NEXTGEN_SERDES_READ_ANALOG_TXr
#define WRITE_ANALOG_TXr BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_TXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_RX1
 * BLOCKS:   ANALOG
 * REGADDR:  0x0111
 * DESC:     Analog RX1 (Addr 11h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_RX1       ANALOG_RX1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r (0x00000111 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_RX1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_RX1r_s {
	uint32_t v[1];
	uint32_t analog_rx1[1];
	uint32_t _analog_rx1;
} BCMI_NEXTGEN_SERDES_ANALOG_RX1r_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_CLR(r) (r).analog_rx1[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_SET(r,d) (r).analog_rx1[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_GET(r) (r).analog_rx1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_ANALOG_RX1f_GET(r) (((r).analog_rx1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_RX1r_ANALOG_RX1f_SET(r,f) (r).analog_rx1[0]=(((r).analog_rx1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_RX1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_RX1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX1r,(_r._analog_rx1))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX1r,(_r._analog_rx1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_RX1r BCMI_NEXTGEN_SERDES_ANALOG_RX1r
#define ANALOG_RX1r_SIZE BCMI_NEXTGEN_SERDES_ANALOG_RX1r_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_RX1r_t ANALOG_RX1r_t;
#define ANALOG_RX1r_CLR BCMI_NEXTGEN_SERDES_ANALOG_RX1r_CLR
#define ANALOG_RX1r_SET BCMI_NEXTGEN_SERDES_ANALOG_RX1r_SET
#define ANALOG_RX1r_GET BCMI_NEXTGEN_SERDES_ANALOG_RX1r_GET
#define ANALOG_RX1r_ANALOG_RX1f_GET BCMI_NEXTGEN_SERDES_ANALOG_RX1r_ANALOG_RX1f_GET
#define ANALOG_RX1r_ANALOG_RX1f_SET BCMI_NEXTGEN_SERDES_ANALOG_RX1r_ANALOG_RX1f_SET
#define READ_ANALOG_RX1r BCMI_NEXTGEN_SERDES_READ_ANALOG_RX1r
#define WRITE_ANALOG_RX1r BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_RX1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_RX2
 * BLOCKS:   ANALOG
 * REGADDR:  0x0112
 * DESC:     Analog RX2 (Addr 12h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_RX2       ANALOG_RX2
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r (0x00000112 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_RX2.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_RX2r_s {
	uint32_t v[1];
	uint32_t analog_rx2[1];
	uint32_t _analog_rx2;
} BCMI_NEXTGEN_SERDES_ANALOG_RX2r_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_CLR(r) (r).analog_rx2[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_SET(r,d) (r).analog_rx2[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_GET(r) (r).analog_rx2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_ANALOG_RX2f_GET(r) (((r).analog_rx2[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_RX2r_ANALOG_RX2f_SET(r,f) (r).analog_rx2[0]=(((r).analog_rx2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_RX2.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_RX2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX2r,(_r._analog_rx2))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX2r,(_r._analog_rx2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_RX2r BCMI_NEXTGEN_SERDES_ANALOG_RX2r
#define ANALOG_RX2r_SIZE BCMI_NEXTGEN_SERDES_ANALOG_RX2r_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_RX2r_t ANALOG_RX2r_t;
#define ANALOG_RX2r_CLR BCMI_NEXTGEN_SERDES_ANALOG_RX2r_CLR
#define ANALOG_RX2r_SET BCMI_NEXTGEN_SERDES_ANALOG_RX2r_SET
#define ANALOG_RX2r_GET BCMI_NEXTGEN_SERDES_ANALOG_RX2r_GET
#define ANALOG_RX2r_ANALOG_RX2f_GET BCMI_NEXTGEN_SERDES_ANALOG_RX2r_ANALOG_RX2f_GET
#define ANALOG_RX2r_ANALOG_RX2f_SET BCMI_NEXTGEN_SERDES_ANALOG_RX2r_ANALOG_RX2f_SET
#define READ_ANALOG_RX2r BCMI_NEXTGEN_SERDES_READ_ANALOG_RX2r
#define WRITE_ANALOG_RX2r BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_RX2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_PLL
 * BLOCKS:   ANALOG
 * REGADDR:  0x0113
 * DESC:     Analog PLL (Addr 13h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_PLL       ANALOG_PLL
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr (0x00000113 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_PLL.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_PLLr_s {
	uint32_t v[1];
	uint32_t analog_pll[1];
	uint32_t _analog_pll;
} BCMI_NEXTGEN_SERDES_ANALOG_PLLr_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_CLR(r) (r).analog_pll[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_SET(r,d) (r).analog_pll[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_GET(r) (r).analog_pll[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_ANALOG_PLLf_GET(r) (((r).analog_pll[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_PLLr_ANALOG_PLLf_SET(r,f) (r).analog_pll[0]=(((r).analog_pll[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_PLL.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_PLLr(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_PLLr,(_r._analog_pll))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_PLLr(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_PLLr,(_r._analog_pll))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_PLLr BCMI_NEXTGEN_SERDES_ANALOG_PLLr
#define ANALOG_PLLr_SIZE BCMI_NEXTGEN_SERDES_ANALOG_PLLr_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_PLLr_t ANALOG_PLLr_t;
#define ANALOG_PLLr_CLR BCMI_NEXTGEN_SERDES_ANALOG_PLLr_CLR
#define ANALOG_PLLr_SET BCMI_NEXTGEN_SERDES_ANALOG_PLLr_SET
#define ANALOG_PLLr_GET BCMI_NEXTGEN_SERDES_ANALOG_PLLr_GET
#define ANALOG_PLLr_ANALOG_PLLf_GET BCMI_NEXTGEN_SERDES_ANALOG_PLLr_ANALOG_PLLf_GET
#define ANALOG_PLLr_ANALOG_PLLf_SET BCMI_NEXTGEN_SERDES_ANALOG_PLLr_ANALOG_PLLf_SET
#define READ_ANALOG_PLLr BCMI_NEXTGEN_SERDES_READ_ANALOG_PLLr
#define WRITE_ANALOG_PLLr BCMI_NEXTGEN_SERDES_WRITE_ANALOG_PLLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_PLLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_RX3
 * BLOCKS:   ANALOG
 * REGADDR:  0x0114
 * DESC:     Analog RX3 (Addr 14h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_RX3       ANALOG_RX3
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r (0x00000114 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_RX3.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_RX3r_s {
	uint32_t v[1];
	uint32_t analog_rx3[1];
	uint32_t _analog_rx3;
} BCMI_NEXTGEN_SERDES_ANALOG_RX3r_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_CLR(r) (r).analog_rx3[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_SET(r,d) (r).analog_rx3[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_GET(r) (r).analog_rx3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_ANALOG_RX3f_GET(r) (((r).analog_rx3[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_RX3r_ANALOG_RX3f_SET(r,f) (r).analog_rx3[0]=(((r).analog_rx3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_RX3.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_RX3r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX3r,(_r._analog_rx3))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX3r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_RX3r,(_r._analog_rx3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_RX3r BCMI_NEXTGEN_SERDES_ANALOG_RX3r
#define ANALOG_RX3r_SIZE BCMI_NEXTGEN_SERDES_ANALOG_RX3r_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_RX3r_t ANALOG_RX3r_t;
#define ANALOG_RX3r_CLR BCMI_NEXTGEN_SERDES_ANALOG_RX3r_CLR
#define ANALOG_RX3r_SET BCMI_NEXTGEN_SERDES_ANALOG_RX3r_SET
#define ANALOG_RX3r_GET BCMI_NEXTGEN_SERDES_ANALOG_RX3r_GET
#define ANALOG_RX3r_ANALOG_RX3f_GET BCMI_NEXTGEN_SERDES_ANALOG_RX3r_ANALOG_RX3f_GET
#define ANALOG_RX3r_ANALOG_RX3f_SET BCMI_NEXTGEN_SERDES_ANALOG_RX3r_ANALOG_RX3f_SET
#define READ_ANALOG_RX3r BCMI_NEXTGEN_SERDES_READ_ANALOG_RX3r
#define WRITE_ANALOG_RX3r BCMI_NEXTGEN_SERDES_WRITE_ANALOG_RX3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_RX3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_TPOUT1
 * BLOCKS:   ANALOG
 * REGADDR:  0x0118
 * DESC:     TPOUT1 (Addr 18h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_TPOUT1    ANALOG_TPOUT1
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r (0x00000118 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_TPOUT1.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_s {
	uint32_t v[1];
	uint32_t analog_tpout1[1];
	uint32_t _analog_tpout1;
} BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_CLR(r) (r).analog_tpout1[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_SET(r,d) (r).analog_tpout1[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_GET(r) (r).analog_tpout1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_ANALOG_TPOUT1f_GET(r) (((r).analog_tpout1[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_ANALOG_TPOUT1f_SET(r,f) (r).analog_tpout1[0]=(((r).analog_tpout1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_TPOUT1.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_TPOUT1r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r,(_r._analog_tpout1))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TPOUT1r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r,(_r._analog_tpout1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_TPOUT1r BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r
#define ANALOG_TPOUT1r_SIZE BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_t ANALOG_TPOUT1r_t;
#define ANALOG_TPOUT1r_CLR BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_CLR
#define ANALOG_TPOUT1r_SET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_SET
#define ANALOG_TPOUT1r_GET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_GET
#define ANALOG_TPOUT1r_ANALOG_TPOUT1f_GET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_ANALOG_TPOUT1f_GET
#define ANALOG_TPOUT1r_ANALOG_TPOUT1f_SET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r_ANALOG_TPOUT1f_SET
#define READ_ANALOG_TPOUT1r BCMI_NEXTGEN_SERDES_READ_ANALOG_TPOUT1r
#define WRITE_ANALOG_TPOUT1r BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TPOUT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_TPOUT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_NEXTGEN_SERDES
 * REGISTER:  ANALOG_TPOUT2
 * BLOCKS:   ANALOG
 * REGADDR:  0x0119
 * DESC:     TPOUT2 (Addr 19h)
 * SIZE:     32
 * FIELDS:
 *     ANALOG_TPOUT2    ANALOG_TPOUT2
 *
 ******************************************************************************/
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r (0x00000119 | PHY_REG_ACC_XGS_IBLK)

#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_SIZE 4

/*
 * This structure should be used to declare and program ANALOG_TPOUT2.
 *
 */
typedef union BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_s {
	uint32_t v[1];
	uint32_t analog_tpout2[1];
	uint32_t _analog_tpout2;
} BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_t;

#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_CLR(r) (r).analog_tpout2[0] = 0
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_SET(r,d) (r).analog_tpout2[0] = d
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_GET(r) (r).analog_tpout2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_ANALOG_TPOUT2f_GET(r) (((r).analog_tpout2[0]) & 0xffff)
#define BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_ANALOG_TPOUT2f_SET(r,f) (r).analog_tpout2[0]=(((r).analog_tpout2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANALOG_TPOUT2.
 *
 */
#define BCMI_NEXTGEN_SERDES_READ_ANALOG_TPOUT2r(_pc,_r) phy_xgs_iblk_read(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r,(_r._analog_tpout2))
#define BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TPOUT2r(_pc,_r) phy_xgs_iblk_write(_pc,BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r,(_r._analog_tpout2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANALOG_TPOUT2r BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r
#define ANALOG_TPOUT2r_SIZE BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_SIZE
typedef BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_t ANALOG_TPOUT2r_t;
#define ANALOG_TPOUT2r_CLR BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_CLR
#define ANALOG_TPOUT2r_SET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_SET
#define ANALOG_TPOUT2r_GET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_GET
#define ANALOG_TPOUT2r_ANALOG_TPOUT2f_GET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_ANALOG_TPOUT2f_GET
#define ANALOG_TPOUT2r_ANALOG_TPOUT2f_SET BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r_ANALOG_TPOUT2f_SET
#define READ_ANALOG_TPOUT2r BCMI_NEXTGEN_SERDES_READ_ANALOG_TPOUT2r
#define WRITE_ANALOG_TPOUT2r BCMI_NEXTGEN_SERDES_WRITE_ANALOG_TPOUT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_NEXTGEN_SERDES_ANALOG_TPOUT2r'
 ******************************************************************************/




#endif /* __BCMI_NEXTGEN_SERDES_DEFS_H__ */
