#ifndef __BCMI_QSGMII_SERDES_DEFS_H__
#define __BCMI_QSGMII_SERDES_DEFS_H__
/*******************************************************************************
 *
 * $Copyright: Copyright 2013 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from the registers file.
 * Edits to this file will be lost when it is regenerated.
 *
 * Definition file for the BCMI_QSGMII_SERDES.
 * This file provides all basic definitions required to program the BCMI_QSGMII_SERDES.
 *
 * This file is autogenerated. Please do not edit.
 *
 ******************************************************************************/

#include <phy/phy_aer_iblk.h>

/*******************************************************************************
 *
 *                    CHIP DEFINITIONS BEGIN HERE
 *
 ******************************************************************************/



/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MIICNTL
 * BLOCKS:   IEEE0
 * REGADDR:  0x0000
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FORCE_2500       
 *     MANUAL_SPEED_1   
 *     COLLISION_TEST_EN 
 *     FULL_DUPLEX      
 *     RESTART_AUTONEG  
 *     PWRDWN_SW        
 *     AUTONEG_ENABLE   
 *     MANUAL_SPEED_0   
 *     LOOPBACK         
 *     RST_SW           
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MIICNTLr (0x00000000 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MIICNTLr_SIZE 4

/*
 * This structure should be used to declare and program MIICNTL.
 *
 */
typedef union BCMI_QSGMII_SERDES_MIICNTLr_s {
	uint32_t v[1];
	uint32_t miicntl[1];
	uint32_t _miicntl;
} BCMI_QSGMII_SERDES_MIICNTLr_t;

#define BCMI_QSGMII_SERDES_MIICNTLr_CLR(r) (r).miicntl[0] = 0
#define BCMI_QSGMII_SERDES_MIICNTLr_SET(r,d) (r).miicntl[0] = d
#define BCMI_QSGMII_SERDES_MIICNTLr_GET(r) (r).miicntl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MIICNTLr_RST_SWf_GET(r) ((((r).miicntl[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_RST_SWf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MIICNTLr_LOOPBACKf_GET(r) ((((r).miicntl[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_LOOPBACKf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_0f_GET(r) ((((r).miicntl[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_0f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_MIICNTLr_AUTONEG_ENABLEf_GET(r) ((((r).miicntl[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_AUTONEG_ENABLEf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_MIICNTLr_PWRDWN_SWf_GET(r) ((((r).miicntl[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_PWRDWN_SWf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_MIICNTLr_RESTART_AUTONEGf_GET(r) ((((r).miicntl[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_RESTART_AUTONEGf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_MIICNTLr_FULL_DUPLEXf_GET(r) ((((r).miicntl[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_FULL_DUPLEXf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MIICNTLr_COLLISION_TEST_ENf_GET(r) ((((r).miicntl[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_COLLISION_TEST_ENf_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_1f_GET(r) ((((r).miicntl[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_1f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MIICNTLr_FORCE_2500f_GET(r) ((((r).miicntl[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MIICNTLr_FORCE_2500f_SET(r,f) (r).miicntl[0]=(((r).miicntl[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access MIICNTL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MIICNTLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MIICNTLr,(_r._miicntl))
#define BCMI_QSGMII_SERDES_WRITE_MIICNTLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MIICNTLr,(_r._miicntl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MIICNTLr BCMI_QSGMII_SERDES_MIICNTLr
#define MIICNTLr_SIZE BCMI_QSGMII_SERDES_MIICNTLr_SIZE
typedef BCMI_QSGMII_SERDES_MIICNTLr_t MIICNTLr_t;
#define MIICNTLr_CLR BCMI_QSGMII_SERDES_MIICNTLr_CLR
#define MIICNTLr_SET BCMI_QSGMII_SERDES_MIICNTLr_SET
#define MIICNTLr_GET BCMI_QSGMII_SERDES_MIICNTLr_GET
#define MIICNTLr_RST_SWf_GET BCMI_QSGMII_SERDES_MIICNTLr_RST_SWf_GET
#define MIICNTLr_RST_SWf_SET BCMI_QSGMII_SERDES_MIICNTLr_RST_SWf_SET
#define MIICNTLr_LOOPBACKf_GET BCMI_QSGMII_SERDES_MIICNTLr_LOOPBACKf_GET
#define MIICNTLr_LOOPBACKf_SET BCMI_QSGMII_SERDES_MIICNTLr_LOOPBACKf_SET
#define MIICNTLr_MANUAL_SPEED_0f_GET BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_0f_GET
#define MIICNTLr_MANUAL_SPEED_0f_SET BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_0f_SET
#define MIICNTLr_AUTONEG_ENABLEf_GET BCMI_QSGMII_SERDES_MIICNTLr_AUTONEG_ENABLEf_GET
#define MIICNTLr_AUTONEG_ENABLEf_SET BCMI_QSGMII_SERDES_MIICNTLr_AUTONEG_ENABLEf_SET
#define MIICNTLr_PWRDWN_SWf_GET BCMI_QSGMII_SERDES_MIICNTLr_PWRDWN_SWf_GET
#define MIICNTLr_PWRDWN_SWf_SET BCMI_QSGMII_SERDES_MIICNTLr_PWRDWN_SWf_SET
#define MIICNTLr_RESTART_AUTONEGf_GET BCMI_QSGMII_SERDES_MIICNTLr_RESTART_AUTONEGf_GET
#define MIICNTLr_RESTART_AUTONEGf_SET BCMI_QSGMII_SERDES_MIICNTLr_RESTART_AUTONEGf_SET
#define MIICNTLr_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_MIICNTLr_FULL_DUPLEXf_GET
#define MIICNTLr_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_MIICNTLr_FULL_DUPLEXf_SET
#define MIICNTLr_COLLISION_TEST_ENf_GET BCMI_QSGMII_SERDES_MIICNTLr_COLLISION_TEST_ENf_GET
#define MIICNTLr_COLLISION_TEST_ENf_SET BCMI_QSGMII_SERDES_MIICNTLr_COLLISION_TEST_ENf_SET
#define MIICNTLr_MANUAL_SPEED_1f_GET BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_1f_GET
#define MIICNTLr_MANUAL_SPEED_1f_SET BCMI_QSGMII_SERDES_MIICNTLr_MANUAL_SPEED_1f_SET
#define MIICNTLr_FORCE_2500f_GET BCMI_QSGMII_SERDES_MIICNTLr_FORCE_2500f_GET
#define MIICNTLr_FORCE_2500f_SET BCMI_QSGMII_SERDES_MIICNTLr_FORCE_2500f_SET
#define READ_MIICNTLr BCMI_QSGMII_SERDES_READ_MIICNTLr
#define WRITE_MIICNTLr BCMI_QSGMII_SERDES_WRITE_MIICNTLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MIICNTLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MIISTAT
 * BLOCKS:   IEEE0
 * REGADDR:  0x0001
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     EXTENDED_CAPABILITY 
 *     JABBER_DETECT    
 *     LINK_STATUS      
 *     AUTONEG_ABILITY  
 *     REMOTE_FAULT     
 *     AUTONEG_COMPLETE 
 *     MF_PREAMBLE_SUPRESSION 
 *     EXTENDED_STATUS  
 *     CAP_100BASET2_HALF_DUPLEX 
 *     CAP_100BASET2_FULL_DUPLEX 
 *     CAP_10BASET_HALF_DUPLEX 
 *     CAP_10BASET_FULL_DUPLEX 
 *     CAP_100BASEX_HALF_DUPLEX 
 *     CAP_100BASEX_FULL_DUPLEX 
 *     CAP_100BASE_T4   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MIISTATr (0x00000001 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MIISTATr_SIZE 4

/*
 * This structure should be used to declare and program MIISTAT.
 *
 */
typedef union BCMI_QSGMII_SERDES_MIISTATr_s {
	uint32_t v[1];
	uint32_t miistat[1];
	uint32_t _miistat;
} BCMI_QSGMII_SERDES_MIISTATr_t;

#define BCMI_QSGMII_SERDES_MIISTATr_CLR(r) (r).miistat[0] = 0
#define BCMI_QSGMII_SERDES_MIISTATr_SET(r,d) (r).miistat[0] = d
#define BCMI_QSGMII_SERDES_MIISTATr_GET(r) (r).miistat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASE_T4f_GET(r) ((((r).miistat[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASE_T4f_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_FULL_DUPLEXf_GET(r) ((((r).miistat[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_FULL_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_HALF_DUPLEXf_GET(r) ((((r).miistat[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_HALF_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_FULL_DUPLEXf_GET(r) ((((r).miistat[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_FULL_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_HALF_DUPLEXf_GET(r) ((((r).miistat[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_HALF_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_FULL_DUPLEXf_GET(r) ((((r).miistat[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_FULL_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_HALF_DUPLEXf_GET(r) ((((r).miistat[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_HALF_DUPLEXf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_STATUSf_GET(r) ((((r).miistat[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_STATUSf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET(r) ((((r).miistat[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_COMPLETEf_GET(r) ((((r).miistat[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_COMPLETEf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MIISTATr_REMOTE_FAULTf_GET(r) ((((r).miistat[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_REMOTE_FAULTf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_ABILITYf_GET(r) ((((r).miistat[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_ABILITYf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MIISTATr_LINK_STATUSf_GET(r) ((((r).miistat[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_LINK_STATUSf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MIISTATr_JABBER_DETECTf_GET(r) ((((r).miistat[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_JABBER_DETECTf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_CAPABILITYf_GET(r) (((r).miistat[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_CAPABILITYf_SET(r,f) (r).miistat[0]=(((r).miistat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MIISTAT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MIISTATr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MIISTATr,(_r._miistat))
#define BCMI_QSGMII_SERDES_WRITE_MIISTATr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MIISTATr,(_r._miistat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MIISTATr BCMI_QSGMII_SERDES_MIISTATr
#define MIISTATr_SIZE BCMI_QSGMII_SERDES_MIISTATr_SIZE
typedef BCMI_QSGMII_SERDES_MIISTATr_t MIISTATr_t;
#define MIISTATr_CLR BCMI_QSGMII_SERDES_MIISTATr_CLR
#define MIISTATr_SET BCMI_QSGMII_SERDES_MIISTATr_SET
#define MIISTATr_GET BCMI_QSGMII_SERDES_MIISTATr_GET
#define MIISTATr_CAP_100BASE_T4f_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASE_T4f_GET
#define MIISTATr_CAP_100BASE_T4f_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASE_T4f_SET
#define MIISTATr_CAP_100BASEX_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_FULL_DUPLEXf_GET
#define MIISTATr_CAP_100BASEX_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_FULL_DUPLEXf_SET
#define MIISTATr_CAP_100BASEX_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_HALF_DUPLEXf_GET
#define MIISTATr_CAP_100BASEX_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASEX_HALF_DUPLEXf_SET
#define MIISTATr_CAP_10BASET_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_FULL_DUPLEXf_GET
#define MIISTATr_CAP_10BASET_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_FULL_DUPLEXf_SET
#define MIISTATr_CAP_10BASET_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_HALF_DUPLEXf_GET
#define MIISTATr_CAP_10BASET_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_10BASET_HALF_DUPLEXf_SET
#define MIISTATr_CAP_100BASET2_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_FULL_DUPLEXf_GET
#define MIISTATr_CAP_100BASET2_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_FULL_DUPLEXf_SET
#define MIISTATr_CAP_100BASET2_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_HALF_DUPLEXf_GET
#define MIISTATr_CAP_100BASET2_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_MIISTATr_CAP_100BASET2_HALF_DUPLEXf_SET
#define MIISTATr_EXTENDED_STATUSf_GET BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_STATUSf_GET
#define MIISTATr_EXTENDED_STATUSf_SET BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_STATUSf_SET
#define MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET BCMI_QSGMII_SERDES_MIISTATr_MF_PREAMBLE_SUPRESSIONf_GET
#define MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET BCMI_QSGMII_SERDES_MIISTATr_MF_PREAMBLE_SUPRESSIONf_SET
#define MIISTATr_AUTONEG_COMPLETEf_GET BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_COMPLETEf_GET
#define MIISTATr_AUTONEG_COMPLETEf_SET BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_COMPLETEf_SET
#define MIISTATr_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_MIISTATr_REMOTE_FAULTf_GET
#define MIISTATr_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_MIISTATr_REMOTE_FAULTf_SET
#define MIISTATr_AUTONEG_ABILITYf_GET BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_ABILITYf_GET
#define MIISTATr_AUTONEG_ABILITYf_SET BCMI_QSGMII_SERDES_MIISTATr_AUTONEG_ABILITYf_SET
#define MIISTATr_LINK_STATUSf_GET BCMI_QSGMII_SERDES_MIISTATr_LINK_STATUSf_GET
#define MIISTATr_LINK_STATUSf_SET BCMI_QSGMII_SERDES_MIISTATr_LINK_STATUSf_SET
#define MIISTATr_JABBER_DETECTf_GET BCMI_QSGMII_SERDES_MIISTATr_JABBER_DETECTf_GET
#define MIISTATr_JABBER_DETECTf_SET BCMI_QSGMII_SERDES_MIISTATr_JABBER_DETECTf_SET
#define MIISTATr_EXTENDED_CAPABILITYf_GET BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_CAPABILITYf_GET
#define MIISTATr_EXTENDED_CAPABILITYf_SET BCMI_QSGMII_SERDES_MIISTATr_EXTENDED_CAPABILITYf_SET
#define READ_MIISTATr BCMI_QSGMII_SERDES_READ_MIISTATr
#define WRITE_MIISTATr BCMI_QSGMII_SERDES_WRITE_MIISTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MIISTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PHYIDMSB
 * BLOCKS:   IEEE0
 * REGADDR:  0x0002
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     OUI              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PHYIDMSBr (0x00000002 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PHYIDMSBr_SIZE 4

/*
 * This structure should be used to declare and program PHYIDMSB.
 *
 */
typedef union BCMI_QSGMII_SERDES_PHYIDMSBr_s {
	uint32_t v[1];
	uint32_t phyidmsb[1];
	uint32_t _phyidmsb;
} BCMI_QSGMII_SERDES_PHYIDMSBr_t;

#define BCMI_QSGMII_SERDES_PHYIDMSBr_CLR(r) (r).phyidmsb[0] = 0
#define BCMI_QSGMII_SERDES_PHYIDMSBr_SET(r,d) (r).phyidmsb[0] = d
#define BCMI_QSGMII_SERDES_PHYIDMSBr_GET(r) (r).phyidmsb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PHYIDMSBr_OUIf_GET(r) (((r).phyidmsb[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_PHYIDMSBr_OUIf_SET(r,f) (r).phyidmsb[0]=(((r).phyidmsb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PHYIDMSB.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PHYIDMSBr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PHYIDMSBr,(_r._phyidmsb))
#define BCMI_QSGMII_SERDES_WRITE_PHYIDMSBr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PHYIDMSBr,(_r._phyidmsb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYIDMSBr BCMI_QSGMII_SERDES_PHYIDMSBr
#define PHYIDMSBr_SIZE BCMI_QSGMII_SERDES_PHYIDMSBr_SIZE
typedef BCMI_QSGMII_SERDES_PHYIDMSBr_t PHYIDMSBr_t;
#define PHYIDMSBr_CLR BCMI_QSGMII_SERDES_PHYIDMSBr_CLR
#define PHYIDMSBr_SET BCMI_QSGMII_SERDES_PHYIDMSBr_SET
#define PHYIDMSBr_GET BCMI_QSGMII_SERDES_PHYIDMSBr_GET
#define PHYIDMSBr_OUIf_GET BCMI_QSGMII_SERDES_PHYIDMSBr_OUIf_GET
#define PHYIDMSBr_OUIf_SET BCMI_QSGMII_SERDES_PHYIDMSBr_OUIf_SET
#define READ_PHYIDMSBr BCMI_QSGMII_SERDES_READ_PHYIDMSBr
#define WRITE_PHYIDMSBr BCMI_QSGMII_SERDES_WRITE_PHYIDMSBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PHYIDMSBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PHYIDLSB
 * BLOCKS:   IEEE0
 * REGADDR:  0x0003
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     REVISION         
 *     MODEL            
 *     OUI              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PHYIDLSBr (0x00000003 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PHYIDLSBr_SIZE 4

/*
 * This structure should be used to declare and program PHYIDLSB.
 *
 */
typedef union BCMI_QSGMII_SERDES_PHYIDLSBr_s {
	uint32_t v[1];
	uint32_t phyidlsb[1];
	uint32_t _phyidlsb;
} BCMI_QSGMII_SERDES_PHYIDLSBr_t;

#define BCMI_QSGMII_SERDES_PHYIDLSBr_CLR(r) (r).phyidlsb[0] = 0
#define BCMI_QSGMII_SERDES_PHYIDLSBr_SET(r,d) (r).phyidlsb[0] = d
#define BCMI_QSGMII_SERDES_PHYIDLSBr_GET(r) (r).phyidlsb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PHYIDLSBr_OUIf_GET(r) ((((r).phyidlsb[0]) >> 10) & 0x3f)
#define BCMI_QSGMII_SERDES_PHYIDLSBr_OUIf_SET(r,f) (r).phyidlsb[0]=(((r).phyidlsb[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_QSGMII_SERDES_PHYIDLSBr_MODELf_GET(r) ((((r).phyidlsb[0]) >> 4) & 0x3f)
#define BCMI_QSGMII_SERDES_PHYIDLSBr_MODELf_SET(r,f) (r).phyidlsb[0]=(((r).phyidlsb[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))
#define BCMI_QSGMII_SERDES_PHYIDLSBr_REVISIONf_GET(r) (((r).phyidlsb[0]) & 0xf)
#define BCMI_QSGMII_SERDES_PHYIDLSBr_REVISIONf_SET(r,f) (r).phyidlsb[0]=(((r).phyidlsb[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PHYIDLSB.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PHYIDLSBr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PHYIDLSBr,(_r._phyidlsb))
#define BCMI_QSGMII_SERDES_WRITE_PHYIDLSBr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PHYIDLSBr,(_r._phyidlsb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PHYIDLSBr BCMI_QSGMII_SERDES_PHYIDLSBr
#define PHYIDLSBr_SIZE BCMI_QSGMII_SERDES_PHYIDLSBr_SIZE
typedef BCMI_QSGMII_SERDES_PHYIDLSBr_t PHYIDLSBr_t;
#define PHYIDLSBr_CLR BCMI_QSGMII_SERDES_PHYIDLSBr_CLR
#define PHYIDLSBr_SET BCMI_QSGMII_SERDES_PHYIDLSBr_SET
#define PHYIDLSBr_GET BCMI_QSGMII_SERDES_PHYIDLSBr_GET
#define PHYIDLSBr_OUIf_GET BCMI_QSGMII_SERDES_PHYIDLSBr_OUIf_GET
#define PHYIDLSBr_OUIf_SET BCMI_QSGMII_SERDES_PHYIDLSBr_OUIf_SET
#define PHYIDLSBr_MODELf_GET BCMI_QSGMII_SERDES_PHYIDLSBr_MODELf_GET
#define PHYIDLSBr_MODELf_SET BCMI_QSGMII_SERDES_PHYIDLSBr_MODELf_SET
#define PHYIDLSBr_REVISIONf_GET BCMI_QSGMII_SERDES_PHYIDLSBr_REVISIONf_GET
#define PHYIDLSBr_REVISIONf_SET BCMI_QSGMII_SERDES_PHYIDLSBr_REVISIONf_SET
#define READ_PHYIDLSBr BCMI_QSGMII_SERDES_READ_PHYIDLSBr
#define WRITE_PHYIDLSBr BCMI_QSGMII_SERDES_WRITE_PHYIDLSBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PHYIDLSBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AUTONEGADV
 * BLOCKS:   IEEE0
 * REGADDR:  0x0004
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     REMOTE_FAULT     
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AUTONEGADVr (0x00000004 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AUTONEGADVr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGADV.
 *
 */
typedef union BCMI_QSGMII_SERDES_AUTONEGADVr_s {
	uint32_t v[1];
	uint32_t autonegadv[1];
	uint32_t _autonegadv;
} BCMI_QSGMII_SERDES_AUTONEGADVr_t;

#define BCMI_QSGMII_SERDES_AUTONEGADVr_CLR(r) (r).autonegadv[0] = 0
#define BCMI_QSGMII_SERDES_AUTONEGADVr_SET(r,d) (r).autonegadv[0] = d
#define BCMI_QSGMII_SERDES_AUTONEGADVr_GET(r) (r).autonegadv[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AUTONEGADVr_NEXT_PAGEf_GET(r) ((((r).autonegadv[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGADVr_NEXT_PAGEf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AUTONEGADVr_REMOTE_FAULTf_GET(r) ((((r).autonegadv[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_AUTONEGADVr_REMOTE_FAULTf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_AUTONEGADVr_PAUSEf_GET(r) ((((r).autonegadv[0]) >> 7) & 0x3)
#define BCMI_QSGMII_SERDES_AUTONEGADVr_PAUSEf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_QSGMII_SERDES_AUTONEGADVr_HALF_DUPLEXf_GET(r) ((((r).autonegadv[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGADVr_HALF_DUPLEXf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_AUTONEGADVr_FULL_DUPLEXf_GET(r) ((((r).autonegadv[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGADVr_FULL_DUPLEXf_SET(r,f) (r).autonegadv[0]=(((r).autonegadv[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))

/*
 * These macros can be used to access AUTONEGADV.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AUTONEGADVr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AUTONEGADVr,(_r._autonegadv))
#define BCMI_QSGMII_SERDES_WRITE_AUTONEGADVr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AUTONEGADVr,(_r._autonegadv))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGADVr BCMI_QSGMII_SERDES_AUTONEGADVr
#define AUTONEGADVr_SIZE BCMI_QSGMII_SERDES_AUTONEGADVr_SIZE
typedef BCMI_QSGMII_SERDES_AUTONEGADVr_t AUTONEGADVr_t;
#define AUTONEGADVr_CLR BCMI_QSGMII_SERDES_AUTONEGADVr_CLR
#define AUTONEGADVr_SET BCMI_QSGMII_SERDES_AUTONEGADVr_SET
#define AUTONEGADVr_GET BCMI_QSGMII_SERDES_AUTONEGADVr_GET
#define AUTONEGADVr_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AUTONEGADVr_NEXT_PAGEf_GET
#define AUTONEGADVr_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AUTONEGADVr_NEXT_PAGEf_SET
#define AUTONEGADVr_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_AUTONEGADVr_REMOTE_FAULTf_GET
#define AUTONEGADVr_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_AUTONEGADVr_REMOTE_FAULTf_SET
#define AUTONEGADVr_PAUSEf_GET BCMI_QSGMII_SERDES_AUTONEGADVr_PAUSEf_GET
#define AUTONEGADVr_PAUSEf_SET BCMI_QSGMII_SERDES_AUTONEGADVr_PAUSEf_SET
#define AUTONEGADVr_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_AUTONEGADVr_HALF_DUPLEXf_GET
#define AUTONEGADVr_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_AUTONEGADVr_HALF_DUPLEXf_SET
#define AUTONEGADVr_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_AUTONEGADVr_FULL_DUPLEXf_GET
#define AUTONEGADVr_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_AUTONEGADVr_FULL_DUPLEXf_SET
#define READ_AUTONEGADVr BCMI_QSGMII_SERDES_READ_AUTONEGADVr
#define WRITE_AUTONEGADVr BCMI_QSGMII_SERDES_WRITE_AUTONEGADVr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AUTONEGADVr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AUTONEGLINKPARTNERABILITY1
 * BLOCKS:   IEEE0
 * REGADDR:  0x0005
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     FULL_DUPLEX      
 *     HALF_DUPLEX      
 *     PAUSE            
 *     REMOTE_FAULT     
 *     ACKNOWLEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r (0x00000005 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGLINKPARTNERABILITY1.
 *
 */
typedef union BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_s {
	uint32_t v[1];
	uint32_t autoneglinkpartnerability1[1];
	uint32_t _autoneglinkpartnerability1;
} BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_t;

#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_CLR(r) (r).autoneglinkpartnerability1[0] = 0
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SET(r,d) (r).autoneglinkpartnerability1[0] = d
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_GET(r) (r).autoneglinkpartnerability1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_PAUSEf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 7) & 0x3)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_PAUSEf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_GET(r) ((((r).autoneglinkpartnerability1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_GET(r) (((r).autoneglinkpartnerability1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_SET(r,f) (r).autoneglinkpartnerability1[0]=(((r).autoneglinkpartnerability1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access AUTONEGLINKPARTNERABILITY1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AUTONEGLINKPARTNERABILITY1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r,(_r._autoneglinkpartnerability1))
#define BCMI_QSGMII_SERDES_WRITE_AUTONEGLINKPARTNERABILITY1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r,(_r._autoneglinkpartnerability1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGLINKPARTNERABILITY1r BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r
#define AUTONEGLINKPARTNERABILITY1r_SIZE BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SIZE
typedef BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_t AUTONEGLINKPARTNERABILITY1r_t;
#define AUTONEGLINKPARTNERABILITY1r_CLR BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_CLR
#define AUTONEGLINKPARTNERABILITY1r_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SET
#define AUTONEGLINKPARTNERABILITY1r_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_GET
#define AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_GET
#define AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_NEXT_PAGEf_SET
#define AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_GET
#define AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_ACKNOWLEDGEf_SET
#define AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_GET
#define AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_REMOTE_FAULTf_SET
#define AUTONEGLINKPARTNERABILITY1r_PAUSEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_PAUSEf_GET
#define AUTONEGLINKPARTNERABILITY1r_PAUSEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_PAUSEf_SET
#define AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_GET
#define AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_HALF_DUPLEXf_SET
#define AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_GET
#define AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_FULL_DUPLEXf_SET
#define AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_GET
#define AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r_SGMII_MODEf_SET
#define READ_AUTONEGLINKPARTNERABILITY1r BCMI_QSGMII_SERDES_READ_AUTONEGLINKPARTNERABILITY1r
#define WRITE_AUTONEGLINKPARTNERABILITY1r BCMI_QSGMII_SERDES_WRITE_AUTONEGLINKPARTNERABILITY1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AUTONEGEXPANSION
 * BLOCKS:   IEEE0
 * REGADDR:  0x0006
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PAGE_RECEIVED    
 *     NEXT_PAGE_ABILITY 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr (0x00000006 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGEXPANSION.
 *
 */
typedef union BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_s {
	uint32_t v[1];
	uint32_t autonegexpansion[1];
	uint32_t _autonegexpansion;
} BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_t;

#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_CLR(r) (r).autonegexpansion[0] = 0
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_SET(r,d) (r).autonegexpansion[0] = d
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_GET(r) (r).autonegexpansion[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_GET(r) ((((r).autonegexpansion[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_SET(r,f) (r).autonegexpansion[0]=(((r).autonegexpansion[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_PAGE_RECEIVEDf_GET(r) ((((r).autonegexpansion[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_PAGE_RECEIVEDf_SET(r,f) (r).autonegexpansion[0]=(((r).autonegexpansion[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))

/*
 * These macros can be used to access AUTONEGEXPANSION.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AUTONEGEXPANSIONr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr,(_r._autonegexpansion))
#define BCMI_QSGMII_SERDES_WRITE_AUTONEGEXPANSIONr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr,(_r._autonegexpansion))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGEXPANSIONr BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr
#define AUTONEGEXPANSIONr_SIZE BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_SIZE
typedef BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_t AUTONEGEXPANSIONr_t;
#define AUTONEGEXPANSIONr_CLR BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_CLR
#define AUTONEGEXPANSIONr_SET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_SET
#define AUTONEGEXPANSIONr_GET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_GET
#define AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_GET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_GET
#define AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_SET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_NEXT_PAGE_ABILITYf_SET
#define AUTONEGEXPANSIONr_PAGE_RECEIVEDf_GET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_PAGE_RECEIVEDf_GET
#define AUTONEGEXPANSIONr_PAGE_RECEIVEDf_SET BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr_PAGE_RECEIVEDf_SET
#define READ_AUTONEGEXPANSIONr BCMI_QSGMII_SERDES_READ_AUTONEGEXPANSIONr
#define WRITE_AUTONEGEXPANSIONr BCMI_QSGMII_SERDES_WRITE_AUTONEGEXPANSIONr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AUTONEGEXPANSIONr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AUTONEGNEXTPAGE
 * BLOCKS:   IEEE0
 * REGADDR:  0x0007
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_OR_UNFORMATTED_CODE_FIELD 
 *     TOGGLE           
 *     ACKNOWLEDGE2     
 *     MP               
 *     ACKNOLWEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr (0x00000007 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGNEXTPAGE.
 *
 */
typedef union BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_s {
	uint32_t v[1];
	uint32_t autonegnextpage[1];
	uint32_t _autonegnextpage;
} BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_t;

#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_CLR(r) (r).autonegnextpage[0] = 0
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_SET(r,d) (r).autonegnextpage[0] = d
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_GET(r) (r).autonegnextpage[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_NEXT_PAGEf_GET(r) ((((r).autonegnextpage[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_NEXT_PAGEf_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOLWEDGEf_GET(r) ((((r).autonegnextpage[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOLWEDGEf_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MPf_GET(r) ((((r).autonegnextpage[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MPf_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_GET(r) ((((r).autonegnextpage[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_TOGGLEf_GET(r) ((((r).autonegnextpage[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_TOGGLEf_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET(r) (((r).autonegnextpage[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET(r,f) (r).autonegnextpage[0]=(((r).autonegnextpage[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AUTONEGNEXTPAGE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AUTONEGNEXTPAGEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr,(_r._autonegnextpage))
#define BCMI_QSGMII_SERDES_WRITE_AUTONEGNEXTPAGEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr,(_r._autonegnextpage))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGNEXTPAGEr BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr
#define AUTONEGNEXTPAGEr_SIZE BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_SIZE
typedef BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_t AUTONEGNEXTPAGEr_t;
#define AUTONEGNEXTPAGEr_CLR BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_CLR
#define AUTONEGNEXTPAGEr_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_SET
#define AUTONEGNEXTPAGEr_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_GET
#define AUTONEGNEXTPAGEr_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_NEXT_PAGEf_GET
#define AUTONEGNEXTPAGEr_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_NEXT_PAGEf_SET
#define AUTONEGNEXTPAGEr_ACKNOLWEDGEf_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOLWEDGEf_GET
#define AUTONEGNEXTPAGEr_ACKNOLWEDGEf_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOLWEDGEf_SET
#define AUTONEGNEXTPAGEr_MPf_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MPf_GET
#define AUTONEGNEXTPAGEr_MPf_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MPf_SET
#define AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_GET
#define AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_ACKNOWLEDGE2f_SET
#define AUTONEGNEXTPAGEr_TOGGLEf_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_TOGGLEf_GET
#define AUTONEGNEXTPAGEr_TOGGLEf_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_TOGGLEf_SET
#define AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET
#define AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET
#define READ_AUTONEGNEXTPAGEr BCMI_QSGMII_SERDES_READ_AUTONEGNEXTPAGEr
#define WRITE_AUTONEGNEXTPAGEr BCMI_QSGMII_SERDES_WRITE_AUTONEGNEXTPAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AUTONEGNEXTPAGEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AUTONEGLINKPARTNERABILITY2
 * BLOCKS:   IEEE0
 * REGADDR:  0x0008
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MESSAGE_OR_UNFORMATTED_CODE_FIELD 
 *     TOGGLE           
 *     ACKNOWLEDGE2     
 *     MP               
 *     ACKNOLWEDGE      
 *     NEXT_PAGE        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r (0x00000008 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_SIZE 4

/*
 * This structure should be used to declare and program AUTONEGLINKPARTNERABILITY2.
 *
 */
typedef union BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_s {
	uint32_t v[1];
	uint32_t autoneglinkpartnerability2[1];
	uint32_t _autoneglinkpartnerability2;
} BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_t;

#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_CLR(r) (r).autoneglinkpartnerability2[0] = 0
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_SET(r,d) (r).autoneglinkpartnerability2[0] = d
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_GET(r) (r).autoneglinkpartnerability2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_GET(r) ((((r).autoneglinkpartnerability2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_GET(r) ((((r).autoneglinkpartnerability2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MPf_GET(r) ((((r).autoneglinkpartnerability2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MPf_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_GET(r) ((((r).autoneglinkpartnerability2[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_TOGGLEf_GET(r) ((((r).autoneglinkpartnerability2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_TOGGLEf_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET(r) (((r).autoneglinkpartnerability2[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET(r,f) (r).autoneglinkpartnerability2[0]=(((r).autoneglinkpartnerability2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AUTONEGLINKPARTNERABILITY2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AUTONEGLINKPARTNERABILITY2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r,(_r._autoneglinkpartnerability2))
#define BCMI_QSGMII_SERDES_WRITE_AUTONEGLINKPARTNERABILITY2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r,(_r._autoneglinkpartnerability2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AUTONEGLINKPARTNERABILITY2r BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r
#define AUTONEGLINKPARTNERABILITY2r_SIZE BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_SIZE
typedef BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_t AUTONEGLINKPARTNERABILITY2r_t;
#define AUTONEGLINKPARTNERABILITY2r_CLR BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_CLR
#define AUTONEGLINKPARTNERABILITY2r_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_SET
#define AUTONEGLINKPARTNERABILITY2r_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_GET
#define AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_GET
#define AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_NEXT_PAGEf_SET
#define AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_GET
#define AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOLWEDGEf_SET
#define AUTONEGLINKPARTNERABILITY2r_MPf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MPf_GET
#define AUTONEGLINKPARTNERABILITY2r_MPf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MPf_SET
#define AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_GET
#define AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_ACKNOWLEDGE2f_SET
#define AUTONEGLINKPARTNERABILITY2r_TOGGLEf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_TOGGLEf_GET
#define AUTONEGLINKPARTNERABILITY2r_TOGGLEf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_TOGGLEf_SET
#define AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_GET
#define AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r_MESSAGE_OR_UNFORMATTED_CODE_FIELDf_SET
#define READ_AUTONEGLINKPARTNERABILITY2r BCMI_QSGMII_SERDES_READ_AUTONEGLINKPARTNERABILITY2r
#define WRITE_AUTONEGLINKPARTNERABILITY2r BCMI_QSGMII_SERDES_WRITE_AUTONEGLINKPARTNERABILITY2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AUTONEGLINKPARTNERABILITY2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  EXTENDEDSTATUS
 * BLOCKS:   IEEE0
 * REGADDR:  0x000f
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CAP_1000BASE_T_HALF_DUPLEX 
 *     CAP_1000BASE_T_FULL_DUPLEX 
 *     CAP_1000BASE_X_HALF_DUPLEX 
 *     CAP_1000BASE_X_FULL_DUPLEX 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr (0x0000000f | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program EXTENDEDSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_s {
	uint32_t v[1];
	uint32_t extendedstatus[1];
	uint32_t _extendedstatus;
} BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_t;

#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CLR(r) (r).extendedstatus[0] = 0
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_SET(r,d) (r).extendedstatus[0] = d
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_GET(r) (r).extendedstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_GET(r) ((((r).extendedstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_SET(r,f) (r).extendedstatus[0]=(((r).extendedstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_GET(r) ((((r).extendedstatus[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_SET(r,f) (r).extendedstatus[0]=(((r).extendedstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_GET(r) ((((r).extendedstatus[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_SET(r,f) (r).extendedstatus[0]=(((r).extendedstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_GET(r) ((((r).extendedstatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_SET(r,f) (r).extendedstatus[0]=(((r).extendedstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))

/*
 * These macros can be used to access EXTENDEDSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_EXTENDEDSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_EXTENDEDSTATUSr,(_r._extendedstatus))
#define BCMI_QSGMII_SERDES_WRITE_EXTENDEDSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_EXTENDEDSTATUSr,(_r._extendedstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define EXTENDEDSTATUSr BCMI_QSGMII_SERDES_EXTENDEDSTATUSr
#define EXTENDEDSTATUSr_SIZE BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_t EXTENDEDSTATUSr_t;
#define EXTENDEDSTATUSr_CLR BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CLR
#define EXTENDEDSTATUSr_SET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_SET
#define EXTENDEDSTATUSr_GET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_GET
#define EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_GET
#define EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_FULL_DUPLEXf_SET
#define EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_GET
#define EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_X_HALF_DUPLEXf_SET
#define EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_GET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_GET
#define EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_SET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_FULL_DUPLEXf_SET
#define EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_GET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_GET
#define EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_SET BCMI_QSGMII_SERDES_EXTENDEDSTATUSr_CAP_1000BASE_T_HALF_DUPLEXf_SET
#define READ_EXTENDEDSTATUSr BCMI_QSGMII_SERDES_READ_EXTENDEDSTATUSr
#define WRITE_EXTENDEDSTATUSr BCMI_QSGMII_SERDES_WRITE_EXTENDEDSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_EXTENDEDSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANESTATUS
 * BLOCKS:   IEEE1
 * REGADDR:  0x0018
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SYNC_STAT        
 *     LOOPBACK_CAPABLE 
 *     TEST_PAT_CAPABLE 
 *     LANES_ALIGNED    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANESTATUSr (0x00001018 | PHY_REG_ACC_BRCM_SHADOW)

#define BCMI_QSGMII_SERDES_LANESTATUSr_SIZE 4

/*
 * This structure should be used to declare and program LANESTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANESTATUSr_s {
	uint32_t v[1];
	uint32_t lanestatus[1];
	uint32_t _lanestatus;
} BCMI_QSGMII_SERDES_LANESTATUSr_t;

#define BCMI_QSGMII_SERDES_LANESTATUSr_CLR(r) (r).lanestatus[0] = 0
#define BCMI_QSGMII_SERDES_LANESTATUSr_SET(r,d) (r).lanestatus[0] = d
#define BCMI_QSGMII_SERDES_LANESTATUSr_GET(r) (r).lanestatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANESTATUSr_LANES_ALIGNEDf_GET(r) ((((r).lanestatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_LANESTATUSr_LANES_ALIGNEDf_SET(r,f) (r).lanestatus[0]=(((r).lanestatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_LANESTATUSr_TEST_PAT_CAPABLEf_GET(r) ((((r).lanestatus[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_LANESTATUSr_TEST_PAT_CAPABLEf_SET(r,f) (r).lanestatus[0]=(((r).lanestatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_LANESTATUSr_LOOPBACK_CAPABLEf_GET(r) ((((r).lanestatus[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_LANESTATUSr_LOOPBACK_CAPABLEf_SET(r,f) (r).lanestatus[0]=(((r).lanestatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_LANESTATUSr_SYNC_STATf_GET(r) (((r).lanestatus[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANESTATUSr_SYNC_STATf_SET(r,f) (r).lanestatus[0]=(((r).lanestatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANESTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANESTATUSr(_pc,_r) phy_brcm_shadow_read(_pc,BCMI_QSGMII_SERDES_LANESTATUSr,(_r._lanestatus))
#define BCMI_QSGMII_SERDES_WRITE_LANESTATUSr(_pc,_r) phy_brcm_shadow_write(_pc,BCMI_QSGMII_SERDES_LANESTATUSr,(_r._lanestatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANESTATUSr BCMI_QSGMII_SERDES_LANESTATUSr
#define LANESTATUSr_SIZE BCMI_QSGMII_SERDES_LANESTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_LANESTATUSr_t LANESTATUSr_t;
#define LANESTATUSr_CLR BCMI_QSGMII_SERDES_LANESTATUSr_CLR
#define LANESTATUSr_SET BCMI_QSGMII_SERDES_LANESTATUSr_SET
#define LANESTATUSr_GET BCMI_QSGMII_SERDES_LANESTATUSr_GET
#define LANESTATUSr_LANES_ALIGNEDf_GET BCMI_QSGMII_SERDES_LANESTATUSr_LANES_ALIGNEDf_GET
#define LANESTATUSr_LANES_ALIGNEDf_SET BCMI_QSGMII_SERDES_LANESTATUSr_LANES_ALIGNEDf_SET
#define LANESTATUSr_TEST_PAT_CAPABLEf_GET BCMI_QSGMII_SERDES_LANESTATUSr_TEST_PAT_CAPABLEf_GET
#define LANESTATUSr_TEST_PAT_CAPABLEf_SET BCMI_QSGMII_SERDES_LANESTATUSr_TEST_PAT_CAPABLEf_SET
#define LANESTATUSr_LOOPBACK_CAPABLEf_GET BCMI_QSGMII_SERDES_LANESTATUSr_LOOPBACK_CAPABLEf_GET
#define LANESTATUSr_LOOPBACK_CAPABLEf_SET BCMI_QSGMII_SERDES_LANESTATUSr_LOOPBACK_CAPABLEf_SET
#define LANESTATUSr_SYNC_STATf_GET BCMI_QSGMII_SERDES_LANESTATUSr_SYNC_STATf_GET
#define LANESTATUSr_SYNC_STATf_SET BCMI_QSGMII_SERDES_LANESTATUSr_SYNC_STATf_SET
#define READ_LANESTATUSr BCMI_QSGMII_SERDES_READ_LANESTATUSr
#define WRITE_LANESTATUSr BCMI_QSGMII_SERDES_WRITE_LANESTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANESTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  IEEETESTCONTROL
 * BLOCKS:   IEEE1
 * REGADDR:  0x0019
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TESTPAT_SEL      
 *     TX_TESTPAT_EN    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr (0x00000019 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program IEEETESTCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_IEEETESTCONTROLr_s {
	uint32_t v[1];
	uint32_t ieeetestcontrol[1];
	uint32_t _ieeetestcontrol;
} BCMI_QSGMII_SERDES_IEEETESTCONTROLr_t;

#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_CLR(r) (r).ieeetestcontrol[0] = 0
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_SET(r,d) (r).ieeetestcontrol[0] = d
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_GET(r) (r).ieeetestcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TX_TESTPAT_ENf_GET(r) ((((r).ieeetestcontrol[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TX_TESTPAT_ENf_SET(r,f) (r).ieeetestcontrol[0]=(((r).ieeetestcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TESTPAT_SELf_GET(r) (((r).ieeetestcontrol[0]) & 0x3)
#define BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TESTPAT_SELf_SET(r,f) (r).ieeetestcontrol[0]=(((r).ieeetestcontrol[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access IEEETESTCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_IEEETESTCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_IEEETESTCONTROLr,(_r._ieeetestcontrol))
#define BCMI_QSGMII_SERDES_WRITE_IEEETESTCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_IEEETESTCONTROLr,(_r._ieeetestcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEETESTCONTROLr BCMI_QSGMII_SERDES_IEEETESTCONTROLr
#define IEEETESTCONTROLr_SIZE BCMI_QSGMII_SERDES_IEEETESTCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_IEEETESTCONTROLr_t IEEETESTCONTROLr_t;
#define IEEETESTCONTROLr_CLR BCMI_QSGMII_SERDES_IEEETESTCONTROLr_CLR
#define IEEETESTCONTROLr_SET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_SET
#define IEEETESTCONTROLr_GET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_GET
#define IEEETESTCONTROLr_TX_TESTPAT_ENf_GET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TX_TESTPAT_ENf_GET
#define IEEETESTCONTROLr_TX_TESTPAT_ENf_SET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TX_TESTPAT_ENf_SET
#define IEEETESTCONTROLr_TESTPAT_SELf_GET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TESTPAT_SELf_GET
#define IEEETESTCONTROLr_TESTPAT_SELf_SET BCMI_QSGMII_SERDES_IEEETESTCONTROLr_TESTPAT_SELf_SET
#define READ_IEEETESTCONTROLr BCMI_QSGMII_SERDES_READ_IEEETESTCONTROLr
#define WRITE_IEEETESTCONTROLr BCMI_QSGMII_SERDES_WRITE_IEEETESTCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_IEEETESTCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGXSCONTROL
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8000
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXCKO_DIV        
 *     AFRST_EN         
 *     EDEN             
 *     CDET_EN          
 *     MDIO_CONT_EN     
 *     HSTL             
 *     RLOOP            
 *     PLL_BYPASS       
 *     MODE_10G         
 *     RESET_ANLG       
 *     START_SEQUENCER  
 *     PCMP_EN          
 *     PGEN_EN          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGXSCONTROLr (0x00008000 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGXSCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGXSCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGXSCONTROLr_s {
	uint32_t v[1];
	uint32_t xgxscontrol[1];
	uint32_t _xgxscontrol;
} BCMI_QSGMII_SERDES_XGXSCONTROLr_t;

#define BCMI_QSGMII_SERDES_XGXSCONTROLr_CLR(r) (r).xgxscontrol[0] = 0
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_SET(r,d) (r).xgxscontrol[0] = d
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_GET(r) (r).xgxscontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PGEN_ENf_GET(r) ((((r).xgxscontrol[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PGEN_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PCMP_ENf_GET(r) ((((r).xgxscontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PCMP_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_START_SEQUENCERf_GET(r) ((((r).xgxscontrol[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_START_SEQUENCERf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_RESET_ANLGf_GET(r) ((((r).xgxscontrol[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_RESET_ANLGf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_MODE_10Gf_GET(r) ((((r).xgxscontrol[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_MODE_10Gf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PLL_BYPASSf_GET(r) ((((r).xgxscontrol[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_PLL_BYPASSf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_RLOOPf_GET(r) ((((r).xgxscontrol[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_RLOOPf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_HSTLf_GET(r) ((((r).xgxscontrol[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_HSTLf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_MDIO_CONT_ENf_GET(r) ((((r).xgxscontrol[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_MDIO_CONT_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_CDET_ENf_GET(r) ((((r).xgxscontrol[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_CDET_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_EDENf_GET(r) ((((r).xgxscontrol[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_EDENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_AFRST_ENf_GET(r) ((((r).xgxscontrol[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_AFRST_ENf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_TXCKO_DIVf_GET(r) (((r).xgxscontrol[0]) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSCONTROLr_TXCKO_DIVf_SET(r,f) (r).xgxscontrol[0]=(((r).xgxscontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGXSCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGXSCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGXSCONTROLr,(_r._xgxscontrol))
#define BCMI_QSGMII_SERDES_WRITE_XGXSCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGXSCONTROLr,(_r._xgxscontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGXSCONTROLr BCMI_QSGMII_SERDES_XGXSCONTROLr
#define XGXSCONTROLr_SIZE BCMI_QSGMII_SERDES_XGXSCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_XGXSCONTROLr_t XGXSCONTROLr_t;
#define XGXSCONTROLr_CLR BCMI_QSGMII_SERDES_XGXSCONTROLr_CLR
#define XGXSCONTROLr_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_SET
#define XGXSCONTROLr_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_GET
#define XGXSCONTROLr_PGEN_ENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_PGEN_ENf_GET
#define XGXSCONTROLr_PGEN_ENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_PGEN_ENf_SET
#define XGXSCONTROLr_PCMP_ENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_PCMP_ENf_GET
#define XGXSCONTROLr_PCMP_ENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_PCMP_ENf_SET
#define XGXSCONTROLr_START_SEQUENCERf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_START_SEQUENCERf_GET
#define XGXSCONTROLr_START_SEQUENCERf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_START_SEQUENCERf_SET
#define XGXSCONTROLr_RESET_ANLGf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_RESET_ANLGf_GET
#define XGXSCONTROLr_RESET_ANLGf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_RESET_ANLGf_SET
#define XGXSCONTROLr_MODE_10Gf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_MODE_10Gf_GET
#define XGXSCONTROLr_MODE_10Gf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_MODE_10Gf_SET
#define XGXSCONTROLr_PLL_BYPASSf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_PLL_BYPASSf_GET
#define XGXSCONTROLr_PLL_BYPASSf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_PLL_BYPASSf_SET
#define XGXSCONTROLr_RLOOPf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_RLOOPf_GET
#define XGXSCONTROLr_RLOOPf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_RLOOPf_SET
#define XGXSCONTROLr_HSTLf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_HSTLf_GET
#define XGXSCONTROLr_HSTLf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_HSTLf_SET
#define XGXSCONTROLr_MDIO_CONT_ENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_MDIO_CONT_ENf_GET
#define XGXSCONTROLr_MDIO_CONT_ENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_MDIO_CONT_ENf_SET
#define XGXSCONTROLr_CDET_ENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_CDET_ENf_GET
#define XGXSCONTROLr_CDET_ENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_CDET_ENf_SET
#define XGXSCONTROLr_EDENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_EDENf_GET
#define XGXSCONTROLr_EDENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_EDENf_SET
#define XGXSCONTROLr_AFRST_ENf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_AFRST_ENf_GET
#define XGXSCONTROLr_AFRST_ENf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_AFRST_ENf_SET
#define XGXSCONTROLr_TXCKO_DIVf_GET BCMI_QSGMII_SERDES_XGXSCONTROLr_TXCKO_DIVf_GET
#define XGXSCONTROLr_TXCKO_DIVf_SET BCMI_QSGMII_SERDES_XGXSCONTROLr_TXCKO_DIVf_SET
#define READ_XGXSCONTROLr BCMI_QSGMII_SERDES_READ_XGXSCONTROLr
#define WRITE_XGXSCONTROLr BCMI_QSGMII_SERDES_WRITE_XGXSCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGXSCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGXSSTATUS
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8001
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SK_EW_STATUS     
 *     CKCMP_O_VFLO_W   
 *     CKCMP_UNFLO_W    
 *     RXFERR           
 *     SEQUENCER_PASS   
 *     SEQUENCER_DONE   
 *     TXD_FIF_O_ERR    
 *     TXPLL_LOCK       
 *     RX_REMOTE_FAULT  
 *     TX_REMOTE_FAULT  
 *     ALWAYS_1         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGXSSTATUSr (0x00008001 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program XGXSSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGXSSTATUSr_s {
	uint32_t v[1];
	uint32_t xgxsstatus[1];
	uint32_t _xgxsstatus;
} BCMI_QSGMII_SERDES_XGXSSTATUSr_t;

#define BCMI_QSGMII_SERDES_XGXSSTATUSr_CLR(r) (r).xgxsstatus[0] = 0
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SET(r,d) (r).xgxsstatus[0] = d
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_GET(r) (r).xgxsstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_ALWAYS_1f_GET(r) ((((r).xgxsstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_ALWAYS_1f_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TX_REMOTE_FAULTf_GET(r) ((((r).xgxsstatus[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TX_REMOTE_FAULTf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_RX_REMOTE_FAULTf_GET(r) ((((r).xgxsstatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_RX_REMOTE_FAULTf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TXPLL_LOCKf_GET(r) ((((r).xgxsstatus[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TXPLL_LOCKf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TXD_FIF_O_ERRf_GET(r) ((((r).xgxsstatus[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_TXD_FIF_O_ERRf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_DONEf_GET(r) ((((r).xgxsstatus[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_DONEf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_PASSf_GET(r) ((((r).xgxsstatus[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_PASSf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_RXFERRf_GET(r) ((((r).xgxsstatus[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_RXFERRf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_UNFLO_Wf_GET(r) ((((r).xgxsstatus[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_UNFLO_Wf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET(r) ((((r).xgxsstatus[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SK_EW_STATUSf_GET(r) (((r).xgxsstatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_XGXSSTATUSr_SK_EW_STATUSf_SET(r,f) (r).xgxsstatus[0]=(((r).xgxsstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access XGXSSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGXSSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGXSSTATUSr,(_r._xgxsstatus))
#define BCMI_QSGMII_SERDES_WRITE_XGXSSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGXSSTATUSr,(_r._xgxsstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGXSSTATUSr BCMI_QSGMII_SERDES_XGXSSTATUSr
#define XGXSSTATUSr_SIZE BCMI_QSGMII_SERDES_XGXSSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_XGXSSTATUSr_t XGXSSTATUSr_t;
#define XGXSSTATUSr_CLR BCMI_QSGMII_SERDES_XGXSSTATUSr_CLR
#define XGXSSTATUSr_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_SET
#define XGXSSTATUSr_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_GET
#define XGXSSTATUSr_ALWAYS_1f_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_ALWAYS_1f_GET
#define XGXSSTATUSr_ALWAYS_1f_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_ALWAYS_1f_SET
#define XGXSSTATUSr_TX_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_TX_REMOTE_FAULTf_GET
#define XGXSSTATUSr_TX_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_TX_REMOTE_FAULTf_SET
#define XGXSSTATUSr_RX_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_RX_REMOTE_FAULTf_GET
#define XGXSSTATUSr_RX_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_RX_REMOTE_FAULTf_SET
#define XGXSSTATUSr_TXPLL_LOCKf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_TXPLL_LOCKf_GET
#define XGXSSTATUSr_TXPLL_LOCKf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_TXPLL_LOCKf_SET
#define XGXSSTATUSr_TXD_FIF_O_ERRf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_TXD_FIF_O_ERRf_GET
#define XGXSSTATUSr_TXD_FIF_O_ERRf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_TXD_FIF_O_ERRf_SET
#define XGXSSTATUSr_SEQUENCER_DONEf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_DONEf_GET
#define XGXSSTATUSr_SEQUENCER_DONEf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_DONEf_SET
#define XGXSSTATUSr_SEQUENCER_PASSf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_PASSf_GET
#define XGXSSTATUSr_SEQUENCER_PASSf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_SEQUENCER_PASSf_SET
#define XGXSSTATUSr_RXFERRf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_RXFERRf_GET
#define XGXSSTATUSr_RXFERRf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_RXFERRf_SET
#define XGXSSTATUSr_CKCMP_UNFLO_Wf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_UNFLO_Wf_GET
#define XGXSSTATUSr_CKCMP_UNFLO_Wf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_UNFLO_Wf_SET
#define XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET
#define XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET
#define XGXSSTATUSr_SK_EW_STATUSf_GET BCMI_QSGMII_SERDES_XGXSSTATUSr_SK_EW_STATUSf_GET
#define XGXSSTATUSr_SK_EW_STATUSf_SET BCMI_QSGMII_SERDES_XGXSSTATUSr_SK_EW_STATUSf_SET
#define READ_XGXSSTATUSr BCMI_QSGMII_SERDES_READ_XGXSSTATUSr
#define WRITE_XGXSSTATUSr BCMI_QSGMII_SERDES_WRITE_XGXSSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGXSSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIIIDLE
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8002
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IB               
 *     I                
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIIIDLEr (0x00008002 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIIIDLEr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIIDLE.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIIIDLEr_s {
	uint32_t v[1];
	uint32_t xgmiiidle[1];
	uint32_t _xgmiiidle;
} BCMI_QSGMII_SERDES_XGMIIIDLEr_t;

#define BCMI_QSGMII_SERDES_XGMIIIDLEr_CLR(r) (r).xgmiiidle[0] = 0
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_SET(r,d) (r).xgmiiidle[0] = d
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_GET(r) (r).xgmiiidle[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_If_GET(r) ((((r).xgmiiidle[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_If_SET(r,f) (r).xgmiiidle[0]=(((r).xgmiiidle[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_IBf_GET(r) (((r).xgmiiidle[0]) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIIIDLEr_IBf_SET(r,f) (r).xgmiiidle[0]=(((r).xgmiiidle[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIIIDLE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIIIDLEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIIIDLEr,(_r._xgmiiidle))
#define BCMI_QSGMII_SERDES_WRITE_XGMIIIDLEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIIIDLEr,(_r._xgmiiidle))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIIDLEr BCMI_QSGMII_SERDES_XGMIIIDLEr
#define XGMIIIDLEr_SIZE BCMI_QSGMII_SERDES_XGMIIIDLEr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIIIDLEr_t XGMIIIDLEr_t;
#define XGMIIIDLEr_CLR BCMI_QSGMII_SERDES_XGMIIIDLEr_CLR
#define XGMIIIDLEr_SET BCMI_QSGMII_SERDES_XGMIIIDLEr_SET
#define XGMIIIDLEr_GET BCMI_QSGMII_SERDES_XGMIIIDLEr_GET
#define XGMIIIDLEr_If_GET BCMI_QSGMII_SERDES_XGMIIIDLEr_If_GET
#define XGMIIIDLEr_If_SET BCMI_QSGMII_SERDES_XGMIIIDLEr_If_SET
#define XGMIIIDLEr_IBf_GET BCMI_QSGMII_SERDES_XGMIIIDLEr_IBf_GET
#define XGMIIIDLEr_IBf_SET BCMI_QSGMII_SERDES_XGMIIIDLEr_IBf_SET
#define READ_XGMIIIDLEr BCMI_QSGMII_SERDES_READ_XGMIIIDLEr
#define WRITE_XGMIIIDLEr BCMI_QSGMII_SERDES_WRITE_XGMIIIDLEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIIIDLEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIISYNC
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8003
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     KB               
 *     K                
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIISYNCr (0x00008003 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIISYNCr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISYNC.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIISYNCr_s {
	uint32_t v[1];
	uint32_t xgmiisync[1];
	uint32_t _xgmiisync;
} BCMI_QSGMII_SERDES_XGMIISYNCr_t;

#define BCMI_QSGMII_SERDES_XGMIISYNCr_CLR(r) (r).xgmiisync[0] = 0
#define BCMI_QSGMII_SERDES_XGMIISYNCr_SET(r,d) (r).xgmiisync[0] = d
#define BCMI_QSGMII_SERDES_XGMIISYNCr_GET(r) (r).xgmiisync[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIISYNCr_Kf_GET(r) ((((r).xgmiisync[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISYNCr_Kf_SET(r,f) (r).xgmiisync[0]=(((r).xgmiisync[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_XGMIISYNCr_KBf_GET(r) (((r).xgmiisync[0]) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISYNCr_KBf_SET(r,f) (r).xgmiisync[0]=(((r).xgmiisync[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISYNC.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIISYNCr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIISYNCr,(_r._xgmiisync))
#define BCMI_QSGMII_SERDES_WRITE_XGMIISYNCr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIISYNCr,(_r._xgmiisync))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISYNCr BCMI_QSGMII_SERDES_XGMIISYNCr
#define XGMIISYNCr_SIZE BCMI_QSGMII_SERDES_XGMIISYNCr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIISYNCr_t XGMIISYNCr_t;
#define XGMIISYNCr_CLR BCMI_QSGMII_SERDES_XGMIISYNCr_CLR
#define XGMIISYNCr_SET BCMI_QSGMII_SERDES_XGMIISYNCr_SET
#define XGMIISYNCr_GET BCMI_QSGMII_SERDES_XGMIISYNCr_GET
#define XGMIISYNCr_Kf_GET BCMI_QSGMII_SERDES_XGMIISYNCr_Kf_GET
#define XGMIISYNCr_Kf_SET BCMI_QSGMII_SERDES_XGMIISYNCr_Kf_SET
#define XGMIISYNCr_KBf_GET BCMI_QSGMII_SERDES_XGMIISYNCr_KBf_GET
#define XGMIISYNCr_KBf_SET BCMI_QSGMII_SERDES_XGMIISYNCr_KBf_SET
#define READ_XGMIISYNCr BCMI_QSGMII_SERDES_READ_XGMIISYNCr
#define WRITE_XGMIISYNCr BCMI_QSGMII_SERDES_WRITE_XGMIISYNCr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIISYNCr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIISKIP
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8004
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RB               
 *     R                
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIISKIPr (0x00008004 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIISKIPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISKIP.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIISKIPr_s {
	uint32_t v[1];
	uint32_t xgmiiskip[1];
	uint32_t _xgmiiskip;
} BCMI_QSGMII_SERDES_XGMIISKIPr_t;

#define BCMI_QSGMII_SERDES_XGMIISKIPr_CLR(r) (r).xgmiiskip[0] = 0
#define BCMI_QSGMII_SERDES_XGMIISKIPr_SET(r,d) (r).xgmiiskip[0] = d
#define BCMI_QSGMII_SERDES_XGMIISKIPr_GET(r) (r).xgmiiskip[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIISKIPr_Rf_GET(r) ((((r).xgmiiskip[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISKIPr_Rf_SET(r,f) (r).xgmiiskip[0]=(((r).xgmiiskip[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_XGMIISKIPr_RBf_GET(r) (((r).xgmiiskip[0]) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISKIPr_RBf_SET(r,f) (r).xgmiiskip[0]=(((r).xgmiiskip[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISKIP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIISKIPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIISKIPr,(_r._xgmiiskip))
#define BCMI_QSGMII_SERDES_WRITE_XGMIISKIPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIISKIPr,(_r._xgmiiskip))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISKIPr BCMI_QSGMII_SERDES_XGMIISKIPr
#define XGMIISKIPr_SIZE BCMI_QSGMII_SERDES_XGMIISKIPr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIISKIPr_t XGMIISKIPr_t;
#define XGMIISKIPr_CLR BCMI_QSGMII_SERDES_XGMIISKIPr_CLR
#define XGMIISKIPr_SET BCMI_QSGMII_SERDES_XGMIISKIPr_SET
#define XGMIISKIPr_GET BCMI_QSGMII_SERDES_XGMIISKIPr_GET
#define XGMIISKIPr_Rf_GET BCMI_QSGMII_SERDES_XGMIISKIPr_Rf_GET
#define XGMIISKIPr_Rf_SET BCMI_QSGMII_SERDES_XGMIISKIPr_Rf_SET
#define XGMIISKIPr_RBf_GET BCMI_QSGMII_SERDES_XGMIISKIPr_RBf_GET
#define XGMIISKIPr_RBf_SET BCMI_QSGMII_SERDES_XGMIISKIPr_RBf_SET
#define READ_XGMIISKIPr BCMI_QSGMII_SERDES_READ_XGMIISKIPr
#define WRITE_XGMIISKIPr BCMI_QSGMII_SERDES_WRITE_XGMIISKIPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIISKIPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIISOPEOP
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8005
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     T                
 *     S                
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr (0x00008005 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISOPEOP.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIISOPEOPr_s {
	uint32_t v[1];
	uint32_t xgmiisopeop[1];
	uint32_t _xgmiisopeop;
} BCMI_QSGMII_SERDES_XGMIISOPEOPr_t;

#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_CLR(r) (r).xgmiisopeop[0] = 0
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_SET(r,d) (r).xgmiisopeop[0] = d
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_GET(r) (r).xgmiisopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_Sf_GET(r) ((((r).xgmiisopeop[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_Sf_SET(r,f) (r).xgmiisopeop[0]=(((r).xgmiisopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_Tf_GET(r) (((r).xgmiisopeop[0]) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIISOPEOPr_Tf_SET(r,f) (r).xgmiisopeop[0]=(((r).xgmiisopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIISOPEOP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIISOPEOPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIISOPEOPr,(_r._xgmiisopeop))
#define BCMI_QSGMII_SERDES_WRITE_XGMIISOPEOPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIISOPEOPr,(_r._xgmiisopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISOPEOPr BCMI_QSGMII_SERDES_XGMIISOPEOPr
#define XGMIISOPEOPr_SIZE BCMI_QSGMII_SERDES_XGMIISOPEOPr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIISOPEOPr_t XGMIISOPEOPr_t;
#define XGMIISOPEOPr_CLR BCMI_QSGMII_SERDES_XGMIISOPEOPr_CLR
#define XGMIISOPEOPr_SET BCMI_QSGMII_SERDES_XGMIISOPEOPr_SET
#define XGMIISOPEOPr_GET BCMI_QSGMII_SERDES_XGMIISOPEOPr_GET
#define XGMIISOPEOPr_Sf_GET BCMI_QSGMII_SERDES_XGMIISOPEOPr_Sf_GET
#define XGMIISOPEOPr_Sf_SET BCMI_QSGMII_SERDES_XGMIISOPEOPr_Sf_SET
#define XGMIISOPEOPr_Tf_GET BCMI_QSGMII_SERDES_XGMIISOPEOPr_Tf_GET
#define XGMIISOPEOPr_Tf_SET BCMI_QSGMII_SERDES_XGMIISOPEOPr_Tf_SET
#define READ_XGMIISOPEOPr BCMI_QSGMII_SERDES_READ_XGMIISOPEOPr
#define WRITE_XGMIISOPEOPr BCMI_QSGMII_SERDES_WRITE_XGMIISOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIISOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIIALIGN
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8006
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     A                
 *     E                
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIIALIGNr (0x00008006 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIIALIGNr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIALIGN.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIIALIGNr_s {
	uint32_t v[1];
	uint32_t xgmiialign[1];
	uint32_t _xgmiialign;
} BCMI_QSGMII_SERDES_XGMIIALIGNr_t;

#define BCMI_QSGMII_SERDES_XGMIIALIGNr_CLR(r) (r).xgmiialign[0] = 0
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_SET(r,d) (r).xgmiialign[0] = d
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_GET(r) (r).xgmiialign[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_Ef_GET(r) ((((r).xgmiialign[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_Ef_SET(r,f) (r).xgmiialign[0]=(((r).xgmiialign[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_Af_GET(r) (((r).xgmiialign[0]) & 0xff)
#define BCMI_QSGMII_SERDES_XGMIIALIGNr_Af_SET(r,f) (r).xgmiialign[0]=(((r).xgmiialign[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access XGMIIALIGN.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIIALIGNr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIIALIGNr,(_r._xgmiialign))
#define BCMI_QSGMII_SERDES_WRITE_XGMIIALIGNr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIIALIGNr,(_r._xgmiialign))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIALIGNr BCMI_QSGMII_SERDES_XGMIIALIGNr
#define XGMIIALIGNr_SIZE BCMI_QSGMII_SERDES_XGMIIALIGNr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIIALIGNr_t XGMIIALIGNr_t;
#define XGMIIALIGNr_CLR BCMI_QSGMII_SERDES_XGMIIALIGNr_CLR
#define XGMIIALIGNr_SET BCMI_QSGMII_SERDES_XGMIIALIGNr_SET
#define XGMIIALIGNr_GET BCMI_QSGMII_SERDES_XGMIIALIGNr_GET
#define XGMIIALIGNr_Ef_GET BCMI_QSGMII_SERDES_XGMIIALIGNr_Ef_GET
#define XGMIIALIGNr_Ef_SET BCMI_QSGMII_SERDES_XGMIIALIGNr_Ef_SET
#define XGMIIALIGNr_Af_GET BCMI_QSGMII_SERDES_XGMIIALIGNr_Af_GET
#define XGMIIALIGNr_Af_SET BCMI_QSGMII_SERDES_XGMIIALIGNr_Af_SET
#define READ_XGMIIALIGNr BCMI_QSGMII_SERDES_READ_XGMIIALIGNr
#define WRITE_XGMIIALIGNr BCMI_QSGMII_SERDES_WRITE_XGMIIALIGNr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIIALIGNr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIIRCONTROL
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8007
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CKCMP_GT1_ICOL_DIS 
 *     CKCMP_AFRST_EN   
 *     CKCMP_NOIPG_EN   
 *     CHK_END_FORCE    
 *     CHK_END_STD_EN   
 *     CHK_END_EN       
 *     FORCE_INBNDLS_EN 
 *     TX_LF2_EN        
 *     TX_LF1_EN        
 *     TX_LF0_EN        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr (0x00008007 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGMIIRCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIIRCONTROLr_s {
	uint32_t v[1];
	uint32_t xgmiircontrol[1];
	uint32_t _xgmiircontrol;
} BCMI_QSGMII_SERDES_XGMIIRCONTROLr_t;

#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CLR(r) (r).xgmiircontrol[0] = 0
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_SET(r,d) (r).xgmiircontrol[0] = d
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_GET(r) (r).xgmiircontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF0_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF0_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF1_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF1_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF2_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF2_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_STD_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_STD_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_FORCEf_GET(r) ((((r).xgmiircontrol[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_FORCEf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET(r) ((((r).xgmiircontrol[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET(r) ((((r).xgmiircontrol[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET(r,f) (r).xgmiircontrol[0]=(((r).xgmiircontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XGMIIRCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIIRCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIIRCONTROLr,(_r._xgmiircontrol))
#define BCMI_QSGMII_SERDES_WRITE_XGMIIRCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIIRCONTROLr,(_r._xgmiircontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIIRCONTROLr BCMI_QSGMII_SERDES_XGMIIRCONTROLr
#define XGMIIRCONTROLr_SIZE BCMI_QSGMII_SERDES_XGMIIRCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIIRCONTROLr_t XGMIIRCONTROLr_t;
#define XGMIIRCONTROLr_CLR BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CLR
#define XGMIIRCONTROLr_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_SET
#define XGMIIRCONTROLr_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_GET
#define XGMIIRCONTROLr_TX_LF0_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF0_ENf_GET
#define XGMIIRCONTROLr_TX_LF0_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF0_ENf_SET
#define XGMIIRCONTROLr_TX_LF1_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF1_ENf_GET
#define XGMIIRCONTROLr_TX_LF1_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF1_ENf_SET
#define XGMIIRCONTROLr_TX_LF2_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF2_ENf_GET
#define XGMIIRCONTROLr_TX_LF2_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_TX_LF2_ENf_SET
#define XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_GET
#define XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_FORCE_INBNDLS_ENf_SET
#define XGMIIRCONTROLr_CHK_END_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_ENf_GET
#define XGMIIRCONTROLr_CHK_END_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_ENf_SET
#define XGMIIRCONTROLr_CHK_END_STD_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_STD_ENf_GET
#define XGMIIRCONTROLr_CHK_END_STD_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_STD_ENf_SET
#define XGMIIRCONTROLr_CHK_END_FORCEf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_FORCEf_GET
#define XGMIIRCONTROLr_CHK_END_FORCEf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CHK_END_FORCEf_SET
#define XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_GET
#define XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_NOIPG_ENf_SET
#define XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_AFRST_ENf_GET
#define XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_AFRST_ENf_SET
#define XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_GET
#define XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET BCMI_QSGMII_SERDES_XGMIIRCONTROLr_CKCMP_GT1_ICOL_DISf_SET
#define READ_XGMIIRCONTROLr BCMI_QSGMII_SERDES_READ_XGMIIRCONTROLr
#define WRITE_XGMIIRCONTROLr BCMI_QSGMII_SERDES_WRITE_XGMIIRCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIIRCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIITCONTROL
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8008
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_FORCE_DPATH_I_EN 
 *     TX_FORCE_DPATH_IORRF_EN 
 *     TX_XGMII_TCOL_OLD_EN 
 *     XENPAK_LFCLR_EN  
 *     FLIP_TXRX_LF     
 *     ALIGNSTAT_RXLF_EN 
 *     PN_SEL           
 *     SWAP_LANE_IND    
 *     SWAP_EN          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr (0x00008008 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program XGMIITCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIITCONTROLr_s {
	uint32_t v[1];
	uint32_t xgmiitcontrol[1];
	uint32_t _xgmiitcontrol;
} BCMI_QSGMII_SERDES_XGMIITCONTROLr_t;

#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_CLR(r) (r).xgmiitcontrol[0] = 0
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SET(r,d) (r).xgmiitcontrol[0] = d
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_GET(r) (r).xgmiitcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_LANE_INDf_GET(r) ((((r).xgmiitcontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_LANE_INDf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_PN_SELf_GET(r) ((((r).xgmiitcontrol[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_PN_SELf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_FLIP_TXRX_LFf_GET(r) ((((r).xgmiitcontrol[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_FLIP_TXRX_LFf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET(r) ((((r).xgmiitcontrol[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET(r,f) (r).xgmiitcontrol[0]=(((r).xgmiitcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))

/*
 * These macros can be used to access XGMIITCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIITCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIITCONTROLr,(_r._xgmiitcontrol))
#define BCMI_QSGMII_SERDES_WRITE_XGMIITCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIITCONTROLr,(_r._xgmiitcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIITCONTROLr BCMI_QSGMII_SERDES_XGMIITCONTROLr
#define XGMIITCONTROLr_SIZE BCMI_QSGMII_SERDES_XGMIITCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIITCONTROLr_t XGMIITCONTROLr_t;
#define XGMIITCONTROLr_CLR BCMI_QSGMII_SERDES_XGMIITCONTROLr_CLR
#define XGMIITCONTROLr_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_SET
#define XGMIITCONTROLr_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_GET
#define XGMIITCONTROLr_SWAP_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_ENf_GET
#define XGMIITCONTROLr_SWAP_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_ENf_SET
#define XGMIITCONTROLr_SWAP_LANE_INDf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_LANE_INDf_GET
#define XGMIITCONTROLr_SWAP_LANE_INDf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_SWAP_LANE_INDf_SET
#define XGMIITCONTROLr_PN_SELf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_PN_SELf_GET
#define XGMIITCONTROLr_PN_SELf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_PN_SELf_SET
#define XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_GET
#define XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_ALIGNSTAT_RXLF_ENf_SET
#define XGMIITCONTROLr_FLIP_TXRX_LFf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_FLIP_TXRX_LFf_GET
#define XGMIITCONTROLr_FLIP_TXRX_LFf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_FLIP_TXRX_LFf_SET
#define XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_XENPAK_LFCLR_ENf_GET
#define XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_XENPAK_LFCLR_ENf_SET
#define XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_GET
#define XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_XGMII_TCOL_OLD_ENf_SET
#define XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_GET
#define XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_IORRF_ENf_SET
#define XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_GET
#define XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET BCMI_QSGMII_SERDES_XGMIITCONTROLr_TX_FORCE_DPATH_I_ENf_SET
#define READ_XGMIITCONTROLr BCMI_QSGMII_SERDES_READ_XGMIITCONTROLr
#define WRITE_XGMIITCONTROLr BCMI_QSGMII_SERDES_WRITE_XGMIITCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIITCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  XGMIISWAP
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x8009
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SWAP_COUNT       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_XGMIISWAPr (0x00008009 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_XGMIISWAPr_SIZE 4

/*
 * This structure should be used to declare and program XGMIISWAP.
 *
 */
typedef union BCMI_QSGMII_SERDES_XGMIISWAPr_s {
	uint32_t v[1];
	uint32_t xgmiiswap[1];
	uint32_t _xgmiiswap;
} BCMI_QSGMII_SERDES_XGMIISWAPr_t;

#define BCMI_QSGMII_SERDES_XGMIISWAPr_CLR(r) (r).xgmiiswap[0] = 0
#define BCMI_QSGMII_SERDES_XGMIISWAPr_SET(r,d) (r).xgmiiswap[0] = d
#define BCMI_QSGMII_SERDES_XGMIISWAPr_GET(r) (r).xgmiiswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_XGMIISWAPr_SWAP_COUNTf_GET(r) (((r).xgmiiswap[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_XGMIISWAPr_SWAP_COUNTf_SET(r,f) (r).xgmiiswap[0]=(((r).xgmiiswap[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access XGMIISWAP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_XGMIISWAPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_XGMIISWAPr,(_r._xgmiiswap))
#define BCMI_QSGMII_SERDES_WRITE_XGMIISWAPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_XGMIISWAPr,(_r._xgmiiswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define XGMIISWAPr BCMI_QSGMII_SERDES_XGMIISWAPr
#define XGMIISWAPr_SIZE BCMI_QSGMII_SERDES_XGMIISWAPr_SIZE
typedef BCMI_QSGMII_SERDES_XGMIISWAPr_t XGMIISWAPr_t;
#define XGMIISWAPr_CLR BCMI_QSGMII_SERDES_XGMIISWAPr_CLR
#define XGMIISWAPr_SET BCMI_QSGMII_SERDES_XGMIISWAPr_SET
#define XGMIISWAPr_GET BCMI_QSGMII_SERDES_XGMIISWAPr_GET
#define XGMIISWAPr_SWAP_COUNTf_GET BCMI_QSGMII_SERDES_XGMIISWAPr_SWAP_COUNTf_GET
#define XGMIISWAPr_SWAP_COUNTf_SET BCMI_QSGMII_SERDES_XGMIISWAPr_SWAP_COUNTf_SET
#define READ_XGMIISWAPr BCMI_QSGMII_SERDES_READ_XGMIISWAPr
#define WRITE_XGMIISWAPr BCMI_QSGMII_SERDES_WRITE_XGMIISWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_XGMIISWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LSSLSID
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x800a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LSS_DOMAIN_ID    
 *     LSS_LS_ID        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LSSLSIDr (0x0000800a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LSSLSIDr_SIZE 4

/*
 * This structure should be used to declare and program LSSLSID.
 *
 */
typedef union BCMI_QSGMII_SERDES_LSSLSIDr_s {
	uint32_t v[1];
	uint32_t lsslsid[1];
	uint32_t _lsslsid;
} BCMI_QSGMII_SERDES_LSSLSIDr_t;

#define BCMI_QSGMII_SERDES_LSSLSIDr_CLR(r) (r).lsslsid[0] = 0
#define BCMI_QSGMII_SERDES_LSSLSIDr_SET(r,d) (r).lsslsid[0] = d
#define BCMI_QSGMII_SERDES_LSSLSIDr_GET(r) (r).lsslsid[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LSSLSIDr_LSS_LS_IDf_GET(r) ((((r).lsslsid[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LSSLSIDr_LSS_LS_IDf_SET(r,f) (r).lsslsid[0]=(((r).lsslsid[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LSSLSIDr_LSS_DOMAIN_IDf_GET(r) (((r).lsslsid[0]) & 0xff)
#define BCMI_QSGMII_SERDES_LSSLSIDr_LSS_DOMAIN_IDf_SET(r,f) (r).lsslsid[0]=(((r).lsslsid[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LSSLSID.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LSSLSIDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LSSLSIDr,(_r._lsslsid))
#define BCMI_QSGMII_SERDES_WRITE_LSSLSIDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LSSLSIDr,(_r._lsslsid))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSLSIDr BCMI_QSGMII_SERDES_LSSLSIDr
#define LSSLSIDr_SIZE BCMI_QSGMII_SERDES_LSSLSIDr_SIZE
typedef BCMI_QSGMII_SERDES_LSSLSIDr_t LSSLSIDr_t;
#define LSSLSIDr_CLR BCMI_QSGMII_SERDES_LSSLSIDr_CLR
#define LSSLSIDr_SET BCMI_QSGMII_SERDES_LSSLSIDr_SET
#define LSSLSIDr_GET BCMI_QSGMII_SERDES_LSSLSIDr_GET
#define LSSLSIDr_LSS_LS_IDf_GET BCMI_QSGMII_SERDES_LSSLSIDr_LSS_LS_IDf_GET
#define LSSLSIDr_LSS_LS_IDf_SET BCMI_QSGMII_SERDES_LSSLSIDr_LSS_LS_IDf_SET
#define LSSLSIDr_LSS_DOMAIN_IDf_GET BCMI_QSGMII_SERDES_LSSLSIDr_LSS_DOMAIN_IDf_GET
#define LSSLSIDr_LSS_DOMAIN_IDf_SET BCMI_QSGMII_SERDES_LSSLSIDr_LSS_DOMAIN_IDf_SET
#define READ_LSSLSIDr BCMI_QSGMII_SERDES_READ_LSSLSIDr
#define WRITE_LSSLSIDr BCMI_QSGMII_SERDES_WRITE_LSSLSIDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LSSLSIDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LSSTINFO
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x800b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LSSL_INFO_BYTE   
 *     LSS_FUNCTION_ID  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LSSTINFOr (0x0000800b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LSSTINFOr_SIZE 4

/*
 * This structure should be used to declare and program LSSTINFO.
 *
 */
typedef union BCMI_QSGMII_SERDES_LSSTINFOr_s {
	uint32_t v[1];
	uint32_t lsstinfo[1];
	uint32_t _lsstinfo;
} BCMI_QSGMII_SERDES_LSSTINFOr_t;

#define BCMI_QSGMII_SERDES_LSSTINFOr_CLR(r) (r).lsstinfo[0] = 0
#define BCMI_QSGMII_SERDES_LSSTINFOr_SET(r,d) (r).lsstinfo[0] = d
#define BCMI_QSGMII_SERDES_LSSTINFOr_GET(r) (r).lsstinfo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LSSTINFOr_LSS_FUNCTION_IDf_GET(r) ((((r).lsstinfo[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LSSTINFOr_LSS_FUNCTION_IDf_SET(r,f) (r).lsstinfo[0]=(((r).lsstinfo[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LSSTINFOr_LSSL_INFO_BYTEf_GET(r) (((r).lsstinfo[0]) & 0xff)
#define BCMI_QSGMII_SERDES_LSSTINFOr_LSSL_INFO_BYTEf_SET(r,f) (r).lsstinfo[0]=(((r).lsstinfo[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LSSTINFO.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LSSTINFOr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LSSTINFOr,(_r._lsstinfo))
#define BCMI_QSGMII_SERDES_WRITE_LSSTINFOr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LSSTINFOr,(_r._lsstinfo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSTINFOr BCMI_QSGMII_SERDES_LSSTINFOr
#define LSSTINFOr_SIZE BCMI_QSGMII_SERDES_LSSTINFOr_SIZE
typedef BCMI_QSGMII_SERDES_LSSTINFOr_t LSSTINFOr_t;
#define LSSTINFOr_CLR BCMI_QSGMII_SERDES_LSSTINFOr_CLR
#define LSSTINFOr_SET BCMI_QSGMII_SERDES_LSSTINFOr_SET
#define LSSTINFOr_GET BCMI_QSGMII_SERDES_LSSTINFOr_GET
#define LSSTINFOr_LSS_FUNCTION_IDf_GET BCMI_QSGMII_SERDES_LSSTINFOr_LSS_FUNCTION_IDf_GET
#define LSSTINFOr_LSS_FUNCTION_IDf_SET BCMI_QSGMII_SERDES_LSSTINFOr_LSS_FUNCTION_IDf_SET
#define LSSTINFOr_LSSL_INFO_BYTEf_GET BCMI_QSGMII_SERDES_LSSTINFOr_LSSL_INFO_BYTEf_GET
#define LSSTINFOr_LSSL_INFO_BYTEf_SET BCMI_QSGMII_SERDES_LSSTINFOr_LSSL_INFO_BYTEf_SET
#define READ_LSSTINFOr BCMI_QSGMII_SERDES_READ_LSSTINFOr
#define WRITE_LSSTINFOr BCMI_QSGMII_SERDES_WRITE_LSSTINFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LSSTINFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LSSRINFO
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x800c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LSSR_INFO_BYTE_8_0 
 *     LSSL_INFO_BYTE_8 
 *     LSS_FUNCTION_ID_8 
 *     LSS_DOMAIN_ID_8  
 *     LSS_LS_ID_8      
 *     STATUS_CONTROL   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LSSRINFOr (0x0000800c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LSSRINFOr_SIZE 4

/*
 * This structure should be used to declare and program LSSRINFO.
 *
 */
typedef union BCMI_QSGMII_SERDES_LSSRINFOr_s {
	uint32_t v[1];
	uint32_t lssrinfo[1];
	uint32_t _lssrinfo;
} BCMI_QSGMII_SERDES_LSSRINFOr_t;

#define BCMI_QSGMII_SERDES_LSSRINFOr_CLR(r) (r).lssrinfo[0] = 0
#define BCMI_QSGMII_SERDES_LSSRINFOr_SET(r,d) (r).lssrinfo[0] = d
#define BCMI_QSGMII_SERDES_LSSRINFOr_GET(r) (r).lssrinfo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LSSRINFOr_STATUS_CONTROLf_GET(r) ((((r).lssrinfo[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_LSSRINFOr_STATUS_CONTROLf_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_LS_ID_8f_GET(r) ((((r).lssrinfo[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_LS_ID_8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_DOMAIN_ID_8f_GET(r) ((((r).lssrinfo[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_DOMAIN_ID_8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_FUNCTION_ID_8f_GET(r) ((((r).lssrinfo[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSS_FUNCTION_ID_8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSSL_INFO_BYTE_8f_GET(r) ((((r).lssrinfo[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSSL_INFO_BYTE_8f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSSR_INFO_BYTE_8_0f_GET(r) (((r).lssrinfo[0]) & 0x1ff)
#define BCMI_QSGMII_SERDES_LSSRINFOr_LSSR_INFO_BYTE_8_0f_SET(r,f) (r).lssrinfo[0]=(((r).lssrinfo[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access LSSRINFO.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LSSRINFOr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LSSRINFOr,(_r._lssrinfo))
#define BCMI_QSGMII_SERDES_WRITE_LSSRINFOr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LSSRINFOr,(_r._lssrinfo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSRINFOr BCMI_QSGMII_SERDES_LSSRINFOr
#define LSSRINFOr_SIZE BCMI_QSGMII_SERDES_LSSRINFOr_SIZE
typedef BCMI_QSGMII_SERDES_LSSRINFOr_t LSSRINFOr_t;
#define LSSRINFOr_CLR BCMI_QSGMII_SERDES_LSSRINFOr_CLR
#define LSSRINFOr_SET BCMI_QSGMII_SERDES_LSSRINFOr_SET
#define LSSRINFOr_GET BCMI_QSGMII_SERDES_LSSRINFOr_GET
#define LSSRINFOr_STATUS_CONTROLf_GET BCMI_QSGMII_SERDES_LSSRINFOr_STATUS_CONTROLf_GET
#define LSSRINFOr_STATUS_CONTROLf_SET BCMI_QSGMII_SERDES_LSSRINFOr_STATUS_CONTROLf_SET
#define LSSRINFOr_LSS_LS_ID_8f_GET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_LS_ID_8f_GET
#define LSSRINFOr_LSS_LS_ID_8f_SET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_LS_ID_8f_SET
#define LSSRINFOr_LSS_DOMAIN_ID_8f_GET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_DOMAIN_ID_8f_GET
#define LSSRINFOr_LSS_DOMAIN_ID_8f_SET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_DOMAIN_ID_8f_SET
#define LSSRINFOr_LSS_FUNCTION_ID_8f_GET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_FUNCTION_ID_8f_GET
#define LSSRINFOr_LSS_FUNCTION_ID_8f_SET BCMI_QSGMII_SERDES_LSSRINFOr_LSS_FUNCTION_ID_8f_SET
#define LSSRINFOr_LSSL_INFO_BYTE_8f_GET BCMI_QSGMII_SERDES_LSSRINFOr_LSSL_INFO_BYTE_8f_GET
#define LSSRINFOr_LSSL_INFO_BYTE_8f_SET BCMI_QSGMII_SERDES_LSSRINFOr_LSSL_INFO_BYTE_8f_SET
#define LSSRINFOr_LSSR_INFO_BYTE_8_0f_GET BCMI_QSGMII_SERDES_LSSRINFOr_LSSR_INFO_BYTE_8_0f_GET
#define LSSRINFOr_LSSR_INFO_BYTE_8_0f_SET BCMI_QSGMII_SERDES_LSSRINFOr_LSSR_INFO_BYTE_8_0f_SET
#define READ_LSSRINFOr BCMI_QSGMII_SERDES_READ_LSSRINFOr
#define WRITE_LSSRINFOr BCMI_QSGMII_SERDES_WRITE_LSSRINFOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LSSRINFOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MMDSELECT
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x800d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     DEVCL22_EN       
 *     DEVDEVAD_EN      
 *     DEVPMD_EN        
 *     DEVAN_EN         
 *     MULTIMMDS_EN     
 *     MULTIPRTS_EN     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MMDSELECTr (0x0000800d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MMDSELECTr_SIZE 4

/*
 * This structure should be used to declare and program MMDSELECT.
 *
 */
typedef union BCMI_QSGMII_SERDES_MMDSELECTr_s {
	uint32_t v[1];
	uint32_t mmdselect[1];
	uint32_t _mmdselect;
} BCMI_QSGMII_SERDES_MMDSELECTr_t;

#define BCMI_QSGMII_SERDES_MMDSELECTr_CLR(r) (r).mmdselect[0] = 0
#define BCMI_QSGMII_SERDES_MMDSELECTr_SET(r,d) (r).mmdselect[0] = d
#define BCMI_QSGMII_SERDES_MMDSELECTr_GET(r) (r).mmdselect[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MMDSELECTr_MULTIPRTS_ENf_GET(r) ((((r).mmdselect[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_MULTIPRTS_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MMDSELECTr_MULTIMMDS_ENf_GET(r) ((((r).mmdselect[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_MULTIMMDS_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVAN_ENf_GET(r) ((((r).mmdselect[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVAN_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVPMD_ENf_GET(r) ((((r).mmdselect[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVPMD_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVDEVAD_ENf_GET(r) ((((r).mmdselect[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVDEVAD_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVCL22_ENf_GET(r) (((r).mmdselect[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MMDSELECTr_DEVCL22_ENf_SET(r,f) (r).mmdselect[0]=(((r).mmdselect[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MMDSELECT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MMDSELECTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MMDSELECTr,(_r._mmdselect))
#define BCMI_QSGMII_SERDES_WRITE_MMDSELECTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MMDSELECTr,(_r._mmdselect))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MMDSELECTr BCMI_QSGMII_SERDES_MMDSELECTr
#define MMDSELECTr_SIZE BCMI_QSGMII_SERDES_MMDSELECTr_SIZE
typedef BCMI_QSGMII_SERDES_MMDSELECTr_t MMDSELECTr_t;
#define MMDSELECTr_CLR BCMI_QSGMII_SERDES_MMDSELECTr_CLR
#define MMDSELECTr_SET BCMI_QSGMII_SERDES_MMDSELECTr_SET
#define MMDSELECTr_GET BCMI_QSGMII_SERDES_MMDSELECTr_GET
#define MMDSELECTr_MULTIPRTS_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_MULTIPRTS_ENf_GET
#define MMDSELECTr_MULTIPRTS_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_MULTIPRTS_ENf_SET
#define MMDSELECTr_MULTIMMDS_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_MULTIMMDS_ENf_GET
#define MMDSELECTr_MULTIMMDS_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_MULTIMMDS_ENf_SET
#define MMDSELECTr_DEVAN_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_DEVAN_ENf_GET
#define MMDSELECTr_DEVAN_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_DEVAN_ENf_SET
#define MMDSELECTr_DEVPMD_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_DEVPMD_ENf_GET
#define MMDSELECTr_DEVPMD_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_DEVPMD_ENf_SET
#define MMDSELECTr_DEVDEVAD_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_DEVDEVAD_ENf_GET
#define MMDSELECTr_DEVDEVAD_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_DEVDEVAD_ENf_SET
#define MMDSELECTr_DEVCL22_ENf_GET BCMI_QSGMII_SERDES_MMDSELECTr_DEVCL22_ENf_GET
#define MMDSELECTr_DEVCL22_ENf_SET BCMI_QSGMII_SERDES_MMDSELECTr_DEVCL22_ENf_SET
#define READ_MMDSELECTr BCMI_QSGMII_SERDES_READ_MMDSELECTr
#define WRITE_MMDSELECTr BCMI_QSGMII_SERDES_WRITE_MMDSELECTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MMDSELECTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISCCONTROL1
 * BLOCKS:   XGXS_BLOCK0
 * REGADDR:  0x800e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IEEE_BLKSEL_VAL_0 
 *     IEEE_BLKSEL_AUTODET 
 *     INVERT_RX_SIGDET 
 *     PARDET10G_PWRDNLINK_EN 
 *     FORCE_DIV5_FOR_LXCK25 
 *     IEEE_BLKSEL_VAL_1 
 *     LATCH_LINKDOWN_ENABLE 
 *     CLEAR_LINKDOWN   
 *     AN_DEV_EN_OVERRIDE 
 *     PMD_DEV_EN_OVERRIDE 
 *     PCS_DEV_EN_OVERRIDE 
 *     GLOBAL_PMD_TX_DISABLE 
 *     PMD_LANE0_TX_DISABLE 
 *     PMD_LANE1_TX_DISABLE 
 *     PMD_LANE2_TX_DISABLE 
 *     PMD_LANE3_TX_DISABLE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISCCONTROL1r (0x0000800e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISCCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program MISCCONTROL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISCCONTROL1r_s {
	uint32_t v[1];
	uint32_t misccontrol1[1];
	uint32_t _misccontrol1;
} BCMI_QSGMII_SERDES_MISCCONTROL1r_t;

#define BCMI_QSGMII_SERDES_MISCCONTROL1r_CLR(r) (r).misccontrol1[0] = 0
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_SET(r,d) (r).misccontrol1[0] = d
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_GET(r) (r).misccontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET(r) ((((r).misccontrol1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET(r) ((((r).misccontrol1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET(r) ((((r).misccontrol1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_GET(r) ((((r).misccontrol1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_CLEAR_LINKDOWNf_GET(r) ((((r).misccontrol1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_CLEAR_LINKDOWNf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET(r) ((((r).misccontrol1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_GET(r) ((((r).misccontrol1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET(r) ((((r).misccontrol1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET(r) ((((r).misccontrol1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_INVERT_RX_SIGDETf_GET(r) ((((r).misccontrol1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_INVERT_RX_SIGDETf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET(r) ((((r).misccontrol1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_GET(r) (((r).misccontrol1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_SET(r,f) (r).misccontrol1[0]=(((r).misccontrol1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISCCONTROL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISCCONTROL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISCCONTROL1r,(_r._misccontrol1))
#define BCMI_QSGMII_SERDES_WRITE_MISCCONTROL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISCCONTROL1r,(_r._misccontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISCCONTROL1r BCMI_QSGMII_SERDES_MISCCONTROL1r
#define MISCCONTROL1r_SIZE BCMI_QSGMII_SERDES_MISCCONTROL1r_SIZE
typedef BCMI_QSGMII_SERDES_MISCCONTROL1r_t MISCCONTROL1r_t;
#define MISCCONTROL1r_CLR BCMI_QSGMII_SERDES_MISCCONTROL1r_CLR
#define MISCCONTROL1r_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_SET
#define MISCCONTROL1r_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_GET
#define MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE3_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE2_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE1_TX_DISABLEf_SET
#define MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_GET
#define MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_LANE0_TX_DISABLEf_SET
#define MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_GET
#define MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_GLOBAL_PMD_TX_DISABLEf_SET
#define MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_GET
#define MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PCS_DEV_EN_OVERRIDEf_SET
#define MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_GET
#define MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PMD_DEV_EN_OVERRIDEf_SET
#define MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_GET
#define MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_AN_DEV_EN_OVERRIDEf_SET
#define MISCCONTROL1r_CLEAR_LINKDOWNf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_CLEAR_LINKDOWNf_GET
#define MISCCONTROL1r_CLEAR_LINKDOWNf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_CLEAR_LINKDOWNf_SET
#define MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_GET
#define MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_LATCH_LINKDOWN_ENABLEf_SET
#define MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_GET
#define MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_1f_SET
#define MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_GET
#define MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_FORCE_DIV5_FOR_LXCK25f_SET
#define MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_GET
#define MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_PARDET10G_PWRDNLINK_ENf_SET
#define MISCCONTROL1r_INVERT_RX_SIGDETf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_INVERT_RX_SIGDETf_GET
#define MISCCONTROL1r_INVERT_RX_SIGDETf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_INVERT_RX_SIGDETf_SET
#define MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_GET
#define MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_AUTODETf_SET
#define MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_GET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_GET
#define MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_SET BCMI_QSGMII_SERDES_MISCCONTROL1r_IEEE_BLKSEL_VAL_0f_SET
#define READ_MISCCONTROL1r BCMI_QSGMII_SERDES_READ_MISCCONTROL1r
#define WRITE_MISCCONTROL1r BCMI_QSGMII_SERDES_WRITE_MISCCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISCCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DESKEW
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8010
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MPWIN_8_0        
 *     DSWIN            
 *     DESK_EW_H_YST_EN 
 *     LINK_EN          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DESKEWr (0x00008010 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DESKEWr_SIZE 4

/*
 * This structure should be used to declare and program DESKEW.
 *
 */
typedef union BCMI_QSGMII_SERDES_DESKEWr_s {
	uint32_t v[1];
	uint32_t deskew[1];
	uint32_t _deskew;
} BCMI_QSGMII_SERDES_DESKEWr_t;

#define BCMI_QSGMII_SERDES_DESKEWr_CLR(r) (r).deskew[0] = 0
#define BCMI_QSGMII_SERDES_DESKEWr_SET(r,d) (r).deskew[0] = d
#define BCMI_QSGMII_SERDES_DESKEWr_GET(r) (r).deskew[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DESKEWr_LINK_ENf_GET(r) ((((r).deskew[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_DESKEWr_LINK_ENf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_DESKEWr_DESK_EW_H_YST_ENf_GET(r) ((((r).deskew[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_DESKEWr_DESK_EW_H_YST_ENf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_DESKEWr_DSWINf_GET(r) ((((r).deskew[0]) >> 9) & 0x1f)
#define BCMI_QSGMII_SERDES_DESKEWr_DSWINf_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1f << 9)) | ((((uint32_t)f) & 0x1f) << 9))
#define BCMI_QSGMII_SERDES_DESKEWr_MPWIN_8_0f_GET(r) (((r).deskew[0]) & 0x1ff)
#define BCMI_QSGMII_SERDES_DESKEWr_MPWIN_8_0f_SET(r,f) (r).deskew[0]=(((r).deskew[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access DESKEW.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DESKEWr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DESKEWr,(_r._deskew))
#define BCMI_QSGMII_SERDES_WRITE_DESKEWr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DESKEWr,(_r._deskew))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DESKEWr BCMI_QSGMII_SERDES_DESKEWr
#define DESKEWr_SIZE BCMI_QSGMII_SERDES_DESKEWr_SIZE
typedef BCMI_QSGMII_SERDES_DESKEWr_t DESKEWr_t;
#define DESKEWr_CLR BCMI_QSGMII_SERDES_DESKEWr_CLR
#define DESKEWr_SET BCMI_QSGMII_SERDES_DESKEWr_SET
#define DESKEWr_GET BCMI_QSGMII_SERDES_DESKEWr_GET
#define DESKEWr_LINK_ENf_GET BCMI_QSGMII_SERDES_DESKEWr_LINK_ENf_GET
#define DESKEWr_LINK_ENf_SET BCMI_QSGMII_SERDES_DESKEWr_LINK_ENf_SET
#define DESKEWr_DESK_EW_H_YST_ENf_GET BCMI_QSGMII_SERDES_DESKEWr_DESK_EW_H_YST_ENf_GET
#define DESKEWr_DESK_EW_H_YST_ENf_SET BCMI_QSGMII_SERDES_DESKEWr_DESK_EW_H_YST_ENf_SET
#define DESKEWr_DSWINf_GET BCMI_QSGMII_SERDES_DESKEWr_DSWINf_GET
#define DESKEWr_DSWINf_SET BCMI_QSGMII_SERDES_DESKEWr_DSWINf_SET
#define DESKEWr_MPWIN_8_0f_GET BCMI_QSGMII_SERDES_DESKEWr_MPWIN_8_0f_GET
#define DESKEWr_MPWIN_8_0f_SET BCMI_QSGMII_SERDES_DESKEWr_MPWIN_8_0f_SET
#define READ_DESKEWr BCMI_QSGMII_SERDES_READ_DESKEWr
#define WRITE_DESKEWr BCMI_QSGMII_SERDES_WRITE_DESKEWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DESKEWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LINK
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8011
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ACOLWIN          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LINKr (0x00008011 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LINKr_SIZE 4

/*
 * This structure should be used to declare and program LINK.
 *
 */
typedef union BCMI_QSGMII_SERDES_LINKr_s {
	uint32_t v[1];
	uint32_t link[1];
	uint32_t _link;
} BCMI_QSGMII_SERDES_LINKr_t;

#define BCMI_QSGMII_SERDES_LINKr_CLR(r) (r).link[0] = 0
#define BCMI_QSGMII_SERDES_LINKr_SET(r,d) (r).link[0] = d
#define BCMI_QSGMII_SERDES_LINKr_GET(r) (r).link[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LINKr_ACOLWINf_GET(r) (((r).link[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LINKr_ACOLWINf_SET(r,f) (r).link[0]=(((r).link[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LINK.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LINKr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LINKr,(_r._link))
#define BCMI_QSGMII_SERDES_WRITE_LINKr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LINKr,(_r._link))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINKr BCMI_QSGMII_SERDES_LINKr
#define LINKr_SIZE BCMI_QSGMII_SERDES_LINKr_SIZE
typedef BCMI_QSGMII_SERDES_LINKr_t LINKr_t;
#define LINKr_CLR BCMI_QSGMII_SERDES_LINKr_CLR
#define LINKr_SET BCMI_QSGMII_SERDES_LINKr_SET
#define LINKr_GET BCMI_QSGMII_SERDES_LINKr_GET
#define LINKr_ACOLWINf_GET BCMI_QSGMII_SERDES_LINKr_ACOLWINf_GET
#define LINKr_ACOLWINf_SET BCMI_QSGMII_SERDES_LINKr_ACOLWINf_SET
#define READ_LINKr BCMI_QSGMII_SERDES_READ_LINKr
#define WRITE_LINKr BCMI_QSGMII_SERDES_WRITE_LINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTRX
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8012
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RXTM_TSTSEL      
 *     RXTM_MODSEL      
 *     LINK_FORCE       
 *     RX_INBANDMDIO_QFLTR_EN 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTRXr (0x00008012 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTRXr_SIZE 4

/*
 * This structure should be used to declare and program TESTRX.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTRXr_s {
	uint32_t v[1];
	uint32_t testrx[1];
	uint32_t _testrx;
} BCMI_QSGMII_SERDES_TESTRXr_t;

#define BCMI_QSGMII_SERDES_TESTRXr_CLR(r) (r).testrx[0] = 0
#define BCMI_QSGMII_SERDES_TESTRXr_SET(r,d) (r).testrx[0] = d
#define BCMI_QSGMII_SERDES_TESTRXr_GET(r) (r).testrx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET(r) ((((r).testrx[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_TESTRXr_LINK_FORCEf_GET(r) ((((r).testrx[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_TESTRXr_LINK_FORCEf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_TESTRXr_RXTM_MODSELf_GET(r) ((((r).testrx[0]) >> 3) & 0x7)
#define BCMI_QSGMII_SERDES_TESTRXr_RXTM_MODSELf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_QSGMII_SERDES_TESTRXr_RXTM_TSTSELf_GET(r) (((r).testrx[0]) & 0x7)
#define BCMI_QSGMII_SERDES_TESTRXr_RXTM_TSTSELf_SET(r,f) (r).testrx[0]=(((r).testrx[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TESTRX.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTRXr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTRXr,(_r._testrx))
#define BCMI_QSGMII_SERDES_WRITE_TESTRXr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTRXr,(_r._testrx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTRXr BCMI_QSGMII_SERDES_TESTRXr
#define TESTRXr_SIZE BCMI_QSGMII_SERDES_TESTRXr_SIZE
typedef BCMI_QSGMII_SERDES_TESTRXr_t TESTRXr_t;
#define TESTRXr_CLR BCMI_QSGMII_SERDES_TESTRXr_CLR
#define TESTRXr_SET BCMI_QSGMII_SERDES_TESTRXr_SET
#define TESTRXr_GET BCMI_QSGMII_SERDES_TESTRXr_GET
#define TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET BCMI_QSGMII_SERDES_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_GET
#define TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET BCMI_QSGMII_SERDES_TESTRXr_RX_INBANDMDIO_QFLTR_ENf_SET
#define TESTRXr_LINK_FORCEf_GET BCMI_QSGMII_SERDES_TESTRXr_LINK_FORCEf_GET
#define TESTRXr_LINK_FORCEf_SET BCMI_QSGMII_SERDES_TESTRXr_LINK_FORCEf_SET
#define TESTRXr_RXTM_MODSELf_GET BCMI_QSGMII_SERDES_TESTRXr_RXTM_MODSELf_GET
#define TESTRXr_RXTM_MODSELf_SET BCMI_QSGMII_SERDES_TESTRXr_RXTM_MODSELf_SET
#define TESTRXr_RXTM_TSTSELf_GET BCMI_QSGMII_SERDES_TESTRXr_RXTM_TSTSELf_GET
#define TESTRXr_RXTM_TSTSELf_SET BCMI_QSGMII_SERDES_TESTRXr_RXTM_TSTSELf_SET
#define READ_TESTRXr BCMI_QSGMII_SERDES_READ_TESTRXr
#define WRITE_TESTRXr BCMI_QSGMII_SERDES_WRITE_TESTRXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTRXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTTX
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8013
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXTM_TSTSEL      
 *     TXTM_MODSEL      
 *     RX_CK4X1MUXSEL   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTTXr (0x00008013 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTTXr_SIZE 4

/*
 * This structure should be used to declare and program TESTTX.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTTXr_s {
	uint32_t v[1];
	uint32_t testtx[1];
	uint32_t _testtx;
} BCMI_QSGMII_SERDES_TESTTXr_t;

#define BCMI_QSGMII_SERDES_TESTTXr_CLR(r) (r).testtx[0] = 0
#define BCMI_QSGMII_SERDES_TESTTXr_SET(r,d) (r).testtx[0] = d
#define BCMI_QSGMII_SERDES_TESTTXr_GET(r) (r).testtx[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTTXr_RX_CK4X1MUXSELf_GET(r) ((((r).testtx[0]) >> 6) & 0x3)
#define BCMI_QSGMII_SERDES_TESTTXr_RX_CK4X1MUXSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_QSGMII_SERDES_TESTTXr_TXTM_MODSELf_GET(r) ((((r).testtx[0]) >> 3) & 0x7)
#define BCMI_QSGMII_SERDES_TESTTXr_TXTM_MODSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x7 << 3)) | ((((uint32_t)f) & 0x7) << 3))
#define BCMI_QSGMII_SERDES_TESTTXr_TXTM_TSTSELf_GET(r) (((r).testtx[0]) & 0x7)
#define BCMI_QSGMII_SERDES_TESTTXr_TXTM_TSTSELf_SET(r,f) (r).testtx[0]=(((r).testtx[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access TESTTX.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTTXr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTTXr,(_r._testtx))
#define BCMI_QSGMII_SERDES_WRITE_TESTTXr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTTXr,(_r._testtx))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTTXr BCMI_QSGMII_SERDES_TESTTXr
#define TESTTXr_SIZE BCMI_QSGMII_SERDES_TESTTXr_SIZE
typedef BCMI_QSGMII_SERDES_TESTTXr_t TESTTXr_t;
#define TESTTXr_CLR BCMI_QSGMII_SERDES_TESTTXr_CLR
#define TESTTXr_SET BCMI_QSGMII_SERDES_TESTTXr_SET
#define TESTTXr_GET BCMI_QSGMII_SERDES_TESTTXr_GET
#define TESTTXr_RX_CK4X1MUXSELf_GET BCMI_QSGMII_SERDES_TESTTXr_RX_CK4X1MUXSELf_GET
#define TESTTXr_RX_CK4X1MUXSELf_SET BCMI_QSGMII_SERDES_TESTTXr_RX_CK4X1MUXSELf_SET
#define TESTTXr_TXTM_MODSELf_GET BCMI_QSGMII_SERDES_TESTTXr_TXTM_MODSELf_GET
#define TESTTXr_TXTM_MODSELf_SET BCMI_QSGMII_SERDES_TESTTXr_TXTM_MODSELf_SET
#define TESTTXr_TXTM_TSTSELf_GET BCMI_QSGMII_SERDES_TESTTXr_TXTM_TSTSELf_GET
#define TESTTXr_TXTM_TSTSELf_SET BCMI_QSGMII_SERDES_TESTTXr_TXTM_TSTSELf_SET
#define READ_TESTTXr BCMI_QSGMII_SERDES_READ_TESTTXr
#define WRITE_TESTTXr BCMI_QSGMII_SERDES_WRITE_TESTTXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTTXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTXG
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8014
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     XG_RXTSTSEL      
 *     XG_TXTSTSEL      
 *     TEST_REG_SEL     
 *     SLICE_SEL_R      
 *     TXDT_SEL         
 *     EVNT_CNTR_SEL    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTXGr (0x00008014 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTXGr_SIZE 4

/*
 * This structure should be used to declare and program TESTXG.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTXGr_s {
	uint32_t v[1];
	uint32_t testxg[1];
	uint32_t _testxg;
} BCMI_QSGMII_SERDES_TESTXGr_t;

#define BCMI_QSGMII_SERDES_TESTXGr_CLR(r) (r).testxg[0] = 0
#define BCMI_QSGMII_SERDES_TESTXGr_SET(r,d) (r).testxg[0] = d
#define BCMI_QSGMII_SERDES_TESTXGr_GET(r) (r).testxg[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTXGr_EVNT_CNTR_SELf_GET(r) ((((r).testxg[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TESTXGr_EVNT_CNTR_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TESTXGr_TXDT_SELf_GET(r) ((((r).testxg[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TESTXGr_TXDT_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TESTXGr_SLICE_SEL_Rf_GET(r) ((((r).testxg[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_TESTXGr_SLICE_SEL_Rf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_TESTXGr_TEST_REG_SELf_GET(r) ((((r).testxg[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_TESTXGr_TEST_REG_SELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_TESTXGr_XG_TXTSTSELf_GET(r) ((((r).testxg[0]) >> 4) & 0x7)
#define BCMI_QSGMII_SERDES_TESTXGr_XG_TXTSTSELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_QSGMII_SERDES_TESTXGr_XG_RXTSTSELf_GET(r) (((r).testxg[0]) & 0xf)
#define BCMI_QSGMII_SERDES_TESTXGr_XG_RXTSTSELf_SET(r,f) (r).testxg[0]=(((r).testxg[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TESTXG.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTXGr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTXGr,(_r._testxg))
#define BCMI_QSGMII_SERDES_WRITE_TESTXGr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTXGr,(_r._testxg))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTXGr BCMI_QSGMII_SERDES_TESTXGr
#define TESTXGr_SIZE BCMI_QSGMII_SERDES_TESTXGr_SIZE
typedef BCMI_QSGMII_SERDES_TESTXGr_t TESTXGr_t;
#define TESTXGr_CLR BCMI_QSGMII_SERDES_TESTXGr_CLR
#define TESTXGr_SET BCMI_QSGMII_SERDES_TESTXGr_SET
#define TESTXGr_GET BCMI_QSGMII_SERDES_TESTXGr_GET
#define TESTXGr_EVNT_CNTR_SELf_GET BCMI_QSGMII_SERDES_TESTXGr_EVNT_CNTR_SELf_GET
#define TESTXGr_EVNT_CNTR_SELf_SET BCMI_QSGMII_SERDES_TESTXGr_EVNT_CNTR_SELf_SET
#define TESTXGr_TXDT_SELf_GET BCMI_QSGMII_SERDES_TESTXGr_TXDT_SELf_GET
#define TESTXGr_TXDT_SELf_SET BCMI_QSGMII_SERDES_TESTXGr_TXDT_SELf_SET
#define TESTXGr_SLICE_SEL_Rf_GET BCMI_QSGMII_SERDES_TESTXGr_SLICE_SEL_Rf_GET
#define TESTXGr_SLICE_SEL_Rf_SET BCMI_QSGMII_SERDES_TESTXGr_SLICE_SEL_Rf_SET
#define TESTXGr_TEST_REG_SELf_GET BCMI_QSGMII_SERDES_TESTXGr_TEST_REG_SELf_GET
#define TESTXGr_TEST_REG_SELf_SET BCMI_QSGMII_SERDES_TESTXGr_TEST_REG_SELf_SET
#define TESTXGr_XG_TXTSTSELf_GET BCMI_QSGMII_SERDES_TESTXGr_XG_TXTSTSELf_GET
#define TESTXGr_XG_TXTSTSELf_SET BCMI_QSGMII_SERDES_TESTXGr_XG_TXTSTSELf_SET
#define TESTXGr_XG_RXTSTSELf_GET BCMI_QSGMII_SERDES_TESTXGr_XG_RXTSTSELf_GET
#define TESTXGr_XG_RXTSTSELf_SET BCMI_QSGMII_SERDES_TESTXGr_XG_RXTSTSELf_SET
#define READ_TESTXGr BCMI_QSGMII_SERDES_READ_TESTXGr
#define WRITE_TESTXGr BCMI_QSGMII_SERDES_WRITE_TESTXGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTXGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANECTRL0
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8015
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL36_PCS_EN_TX   
 *     CL36_PCS_EN_RX   
 *     QSGMII_EN_TX     
 *     QSGMII_EN_RX     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANECTRL0r (0x00008015 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANECTRL0r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL0.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANECTRL0r_s {
	uint32_t v[1];
	uint32_t lanectrl0[1];
	uint32_t _lanectrl0;
} BCMI_QSGMII_SERDES_LANECTRL0r_t;

#define BCMI_QSGMII_SERDES_LANECTRL0r_CLR(r) (r).lanectrl0[0] = 0
#define BCMI_QSGMII_SERDES_LANECTRL0r_SET(r,d) (r).lanectrl0[0] = d
#define BCMI_QSGMII_SERDES_LANECTRL0r_GET(r) (r).lanectrl0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_RXf_GET(r) ((((r).lanectrl0[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_RXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_TXf_GET(r) ((((r).lanectrl0[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_TXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_RXf_GET(r) ((((r).lanectrl0[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_RXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_TXf_GET(r) (((r).lanectrl0[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_TXf_SET(r,f) (r).lanectrl0[0]=(((r).lanectrl0[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANECTRL0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANECTRL0r,(_r._lanectrl0))
#define BCMI_QSGMII_SERDES_WRITE_LANECTRL0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANECTRL0r,(_r._lanectrl0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL0r BCMI_QSGMII_SERDES_LANECTRL0r
#define LANECTRL0r_SIZE BCMI_QSGMII_SERDES_LANECTRL0r_SIZE
typedef BCMI_QSGMII_SERDES_LANECTRL0r_t LANECTRL0r_t;
#define LANECTRL0r_CLR BCMI_QSGMII_SERDES_LANECTRL0r_CLR
#define LANECTRL0r_SET BCMI_QSGMII_SERDES_LANECTRL0r_SET
#define LANECTRL0r_GET BCMI_QSGMII_SERDES_LANECTRL0r_GET
#define LANECTRL0r_QSGMII_EN_RXf_GET BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_RXf_GET
#define LANECTRL0r_QSGMII_EN_RXf_SET BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_RXf_SET
#define LANECTRL0r_QSGMII_EN_TXf_GET BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_TXf_GET
#define LANECTRL0r_QSGMII_EN_TXf_SET BCMI_QSGMII_SERDES_LANECTRL0r_QSGMII_EN_TXf_SET
#define LANECTRL0r_CL36_PCS_EN_RXf_GET BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_RXf_GET
#define LANECTRL0r_CL36_PCS_EN_RXf_SET BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_RXf_SET
#define LANECTRL0r_CL36_PCS_EN_TXf_GET BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_TXf_GET
#define LANECTRL0r_CL36_PCS_EN_TXf_SET BCMI_QSGMII_SERDES_LANECTRL0r_CL36_PCS_EN_TXf_SET
#define READ_LANECTRL0r BCMI_QSGMII_SERDES_READ_LANECTRL0r
#define WRITE_LANECTRL0r BCMI_QSGMII_SERDES_WRITE_LANECTRL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANECTRL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANECTRL1
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8016
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_MODE_LN0      
 *     TX_MODE_LN1      
 *     TX_MODE_LN2      
 *     TX_MODE_LN3      
 *     RX_MODE_LN0      
 *     RX_MODE_LN1      
 *     RX_MODE_LN2      
 *     RX_MODE_LN3      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANECTRL1r (0x00008016 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANECTRL1r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANECTRL1r_s {
	uint32_t v[1];
	uint32_t lanectrl1[1];
	uint32_t _lanectrl1;
} BCMI_QSGMII_SERDES_LANECTRL1r_t;

#define BCMI_QSGMII_SERDES_LANECTRL1r_CLR(r) (r).lanectrl1[0] = 0
#define BCMI_QSGMII_SERDES_LANECTRL1r_SET(r,d) (r).lanectrl1[0] = d
#define BCMI_QSGMII_SERDES_LANECTRL1r_GET(r) (r).lanectrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN3f_GET(r) ((((r).lanectrl1[0]) >> 14) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN3f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN2f_GET(r) ((((r).lanectrl1[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN2f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN1f_GET(r) ((((r).lanectrl1[0]) >> 10) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN1f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 10)) | ((((uint32_t)f) & 0x3) << 10))
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN0f_GET(r) ((((r).lanectrl1[0]) >> 8) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN0f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN3f_GET(r) ((((r).lanectrl1[0]) >> 6) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN3f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN2f_GET(r) ((((r).lanectrl1[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN2f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN1f_GET(r) ((((r).lanectrl1[0]) >> 2) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN1f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN0f_GET(r) (((r).lanectrl1[0]) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN0f_SET(r,f) (r).lanectrl1[0]=(((r).lanectrl1[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access LANECTRL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANECTRL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANECTRL1r,(_r._lanectrl1))
#define BCMI_QSGMII_SERDES_WRITE_LANECTRL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANECTRL1r,(_r._lanectrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL1r BCMI_QSGMII_SERDES_LANECTRL1r
#define LANECTRL1r_SIZE BCMI_QSGMII_SERDES_LANECTRL1r_SIZE
typedef BCMI_QSGMII_SERDES_LANECTRL1r_t LANECTRL1r_t;
#define LANECTRL1r_CLR BCMI_QSGMII_SERDES_LANECTRL1r_CLR
#define LANECTRL1r_SET BCMI_QSGMII_SERDES_LANECTRL1r_SET
#define LANECTRL1r_GET BCMI_QSGMII_SERDES_LANECTRL1r_GET
#define LANECTRL1r_RX_MODE_LN3f_GET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN3f_GET
#define LANECTRL1r_RX_MODE_LN3f_SET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN3f_SET
#define LANECTRL1r_RX_MODE_LN2f_GET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN2f_GET
#define LANECTRL1r_RX_MODE_LN2f_SET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN2f_SET
#define LANECTRL1r_RX_MODE_LN1f_GET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN1f_GET
#define LANECTRL1r_RX_MODE_LN1f_SET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN1f_SET
#define LANECTRL1r_RX_MODE_LN0f_GET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN0f_GET
#define LANECTRL1r_RX_MODE_LN0f_SET BCMI_QSGMII_SERDES_LANECTRL1r_RX_MODE_LN0f_SET
#define LANECTRL1r_TX_MODE_LN3f_GET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN3f_GET
#define LANECTRL1r_TX_MODE_LN3f_SET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN3f_SET
#define LANECTRL1r_TX_MODE_LN2f_GET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN2f_GET
#define LANECTRL1r_TX_MODE_LN2f_SET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN2f_SET
#define LANECTRL1r_TX_MODE_LN1f_GET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN1f_GET
#define LANECTRL1r_TX_MODE_LN1f_SET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN1f_SET
#define LANECTRL1r_TX_MODE_LN0f_GET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN0f_GET
#define LANECTRL1r_TX_MODE_LN0f_SET BCMI_QSGMII_SERDES_LANECTRL1r_TX_MODE_LN0f_SET
#define READ_LANECTRL1r BCMI_QSGMII_SERDES_READ_LANECTRL1r
#define WRITE_LANECTRL1r BCMI_QSGMII_SERDES_WRITE_LANECTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANECTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANECTRL2
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8017
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     GLOOP1G          
 *     RLOOP1G          
 *     EDEN1G           
 *     CDET_EN1G        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANECTRL2r (0x00008017 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANECTRL2r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANECTRL2r_s {
	uint32_t v[1];
	uint32_t lanectrl2[1];
	uint32_t _lanectrl2;
} BCMI_QSGMII_SERDES_LANECTRL2r_t;

#define BCMI_QSGMII_SERDES_LANECTRL2r_CLR(r) (r).lanectrl2[0] = 0
#define BCMI_QSGMII_SERDES_LANECTRL2r_SET(r,d) (r).lanectrl2[0] = d
#define BCMI_QSGMII_SERDES_LANECTRL2r_GET(r) (r).lanectrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANECTRL2r_CDET_EN1Gf_GET(r) ((((r).lanectrl2[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL2r_CDET_EN1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_LANECTRL2r_EDEN1Gf_GET(r) ((((r).lanectrl2[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL2r_EDEN1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_LANECTRL2r_RLOOP1Gf_GET(r) ((((r).lanectrl2[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL2r_RLOOP1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_LANECTRL2r_GLOOP1Gf_GET(r) (((r).lanectrl2[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL2r_GLOOP1Gf_SET(r,f) (r).lanectrl2[0]=(((r).lanectrl2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANECTRL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANECTRL2r,(_r._lanectrl2))
#define BCMI_QSGMII_SERDES_WRITE_LANECTRL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANECTRL2r,(_r._lanectrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL2r BCMI_QSGMII_SERDES_LANECTRL2r
#define LANECTRL2r_SIZE BCMI_QSGMII_SERDES_LANECTRL2r_SIZE
typedef BCMI_QSGMII_SERDES_LANECTRL2r_t LANECTRL2r_t;
#define LANECTRL2r_CLR BCMI_QSGMII_SERDES_LANECTRL2r_CLR
#define LANECTRL2r_SET BCMI_QSGMII_SERDES_LANECTRL2r_SET
#define LANECTRL2r_GET BCMI_QSGMII_SERDES_LANECTRL2r_GET
#define LANECTRL2r_CDET_EN1Gf_GET BCMI_QSGMII_SERDES_LANECTRL2r_CDET_EN1Gf_GET
#define LANECTRL2r_CDET_EN1Gf_SET BCMI_QSGMII_SERDES_LANECTRL2r_CDET_EN1Gf_SET
#define LANECTRL2r_EDEN1Gf_GET BCMI_QSGMII_SERDES_LANECTRL2r_EDEN1Gf_GET
#define LANECTRL2r_EDEN1Gf_SET BCMI_QSGMII_SERDES_LANECTRL2r_EDEN1Gf_SET
#define LANECTRL2r_RLOOP1Gf_GET BCMI_QSGMII_SERDES_LANECTRL2r_RLOOP1Gf_GET
#define LANECTRL2r_RLOOP1Gf_SET BCMI_QSGMII_SERDES_LANECTRL2r_RLOOP1Gf_SET
#define LANECTRL2r_GLOOP1Gf_GET BCMI_QSGMII_SERDES_LANECTRL2r_GLOOP1Gf_GET
#define LANECTRL2r_GLOOP1Gf_SET BCMI_QSGMII_SERDES_LANECTRL2r_GLOOP1Gf_SET
#define READ_LANECTRL2r BCMI_QSGMII_SERDES_READ_LANECTRL2r
#define WRITE_LANECTRL2r BCMI_QSGMII_SERDES_WRITE_LANECTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANECTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANECTRL3
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8018
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PWRDWN_RX        
 *     PWRDWN_TX        
 *     PWRDWN_PLL       
 *     PWRDWN10G_PLL_DIS 
 *     LOCK_REF_EN      
 *     PWRDWN_FORCE     
 *     LOCK_REF_R       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANECTRL3r (0x00008018 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANECTRL3r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL3.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANECTRL3r_s {
	uint32_t v[1];
	uint32_t lanectrl3[1];
	uint32_t _lanectrl3;
} BCMI_QSGMII_SERDES_LANECTRL3r_t;

#define BCMI_QSGMII_SERDES_LANECTRL3r_CLR(r) (r).lanectrl3[0] = 0
#define BCMI_QSGMII_SERDES_LANECTRL3r_SET(r,d) (r).lanectrl3[0] = d
#define BCMI_QSGMII_SERDES_LANECTRL3r_GET(r) (r).lanectrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_Rf_GET(r) ((((r).lanectrl3[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_Rf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_FORCEf_GET(r) ((((r).lanectrl3[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_FORCEf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_ENf_GET(r) ((((r).lanectrl3[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_ENf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN10G_PLL_DISf_GET(r) ((((r).lanectrl3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN10G_PLL_DISf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_PLLf_GET(r) ((((r).lanectrl3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_PLLf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_TXf_GET(r) ((((r).lanectrl3[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_TXf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_RXf_GET(r) (((r).lanectrl3[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_RXf_SET(r,f) (r).lanectrl3[0]=(((r).lanectrl3[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANECTRL3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANECTRL3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANECTRL3r,(_r._lanectrl3))
#define BCMI_QSGMII_SERDES_WRITE_LANECTRL3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANECTRL3r,(_r._lanectrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL3r BCMI_QSGMII_SERDES_LANECTRL3r
#define LANECTRL3r_SIZE BCMI_QSGMII_SERDES_LANECTRL3r_SIZE
typedef BCMI_QSGMII_SERDES_LANECTRL3r_t LANECTRL3r_t;
#define LANECTRL3r_CLR BCMI_QSGMII_SERDES_LANECTRL3r_CLR
#define LANECTRL3r_SET BCMI_QSGMII_SERDES_LANECTRL3r_SET
#define LANECTRL3r_GET BCMI_QSGMII_SERDES_LANECTRL3r_GET
#define LANECTRL3r_LOCK_REF_Rf_GET BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_Rf_GET
#define LANECTRL3r_LOCK_REF_Rf_SET BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_Rf_SET
#define LANECTRL3r_PWRDWN_FORCEf_GET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_FORCEf_GET
#define LANECTRL3r_PWRDWN_FORCEf_SET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_FORCEf_SET
#define LANECTRL3r_LOCK_REF_ENf_GET BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_ENf_GET
#define LANECTRL3r_LOCK_REF_ENf_SET BCMI_QSGMII_SERDES_LANECTRL3r_LOCK_REF_ENf_SET
#define LANECTRL3r_PWRDWN10G_PLL_DISf_GET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN10G_PLL_DISf_GET
#define LANECTRL3r_PWRDWN10G_PLL_DISf_SET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN10G_PLL_DISf_SET
#define LANECTRL3r_PWRDWN_PLLf_GET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_PLLf_GET
#define LANECTRL3r_PWRDWN_PLLf_SET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_PLLf_SET
#define LANECTRL3r_PWRDWN_TXf_GET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_TXf_GET
#define LANECTRL3r_PWRDWN_TXf_SET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_TXf_SET
#define LANECTRL3r_PWRDWN_RXf_GET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_RXf_GET
#define LANECTRL3r_PWRDWN_RXf_SET BCMI_QSGMII_SERDES_LANECTRL3r_PWRDWN_RXf_SET
#define READ_LANECTRL3r BCMI_QSGMII_SERDES_READ_LANECTRL3r
#define WRITE_LANECTRL3r BCMI_QSGMII_SERDES_WRITE_LANECTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANECTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANEPRBS
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x8019
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PRBS_ORDER0      
 *     PRBS_INV_LN0     
 *     PRBS_EN_LN0      
 *     PRBS_ORDER1      
 *     PRBS_INV_LN1     
 *     PRBS_EN_LN1      
 *     PRBS_ORDER2      
 *     PRBS_INV_LN2     
 *     PRBS_EN_LN2      
 *     PRBS_ORDER3      
 *     PRBS_INV_LN3     
 *     PRBS_EN_LN3      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANEPRBSr (0x00008019 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANEPRBSr_SIZE 4

/*
 * This structure should be used to declare and program LANEPRBS.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANEPRBSr_s {
	uint32_t v[1];
	uint32_t laneprbs[1];
	uint32_t _laneprbs;
} BCMI_QSGMII_SERDES_LANEPRBSr_t;

#define BCMI_QSGMII_SERDES_LANEPRBSr_CLR(r) (r).laneprbs[0] = 0
#define BCMI_QSGMII_SERDES_LANEPRBSr_SET(r,d) (r).laneprbs[0] = d
#define BCMI_QSGMII_SERDES_LANEPRBSr_GET(r) (r).laneprbs[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN3f_GET(r) ((((r).laneprbs[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN3f_GET(r) ((((r).laneprbs[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER3f_GET(r) ((((r).laneprbs[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER3f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN2f_GET(r) ((((r).laneprbs[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN2f_GET(r) ((((r).laneprbs[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER2f_GET(r) ((((r).laneprbs[0]) >> 8) & 0x3)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER2f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 8)) | ((((uint32_t)f) & 0x3) << 8))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN1f_GET(r) ((((r).laneprbs[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN1f_GET(r) ((((r).laneprbs[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER1f_GET(r) ((((r).laneprbs[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER1f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN0f_GET(r) ((((r).laneprbs[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN0f_GET(r) ((((r).laneprbs[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER0f_GET(r) (((r).laneprbs[0]) & 0x3)
#define BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER0f_SET(r,f) (r).laneprbs[0]=(((r).laneprbs[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access LANEPRBS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANEPRBSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANEPRBSr,(_r._laneprbs))
#define BCMI_QSGMII_SERDES_WRITE_LANEPRBSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANEPRBSr,(_r._laneprbs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANEPRBSr BCMI_QSGMII_SERDES_LANEPRBSr
#define LANEPRBSr_SIZE BCMI_QSGMII_SERDES_LANEPRBSr_SIZE
typedef BCMI_QSGMII_SERDES_LANEPRBSr_t LANEPRBSr_t;
#define LANEPRBSr_CLR BCMI_QSGMII_SERDES_LANEPRBSr_CLR
#define LANEPRBSr_SET BCMI_QSGMII_SERDES_LANEPRBSr_SET
#define LANEPRBSr_GET BCMI_QSGMII_SERDES_LANEPRBSr_GET
#define LANEPRBSr_PRBS_EN_LN3f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN3f_GET
#define LANEPRBSr_PRBS_EN_LN3f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN3f_SET
#define LANEPRBSr_PRBS_INV_LN3f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN3f_GET
#define LANEPRBSr_PRBS_INV_LN3f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN3f_SET
#define LANEPRBSr_PRBS_ORDER3f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER3f_GET
#define LANEPRBSr_PRBS_ORDER3f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER3f_SET
#define LANEPRBSr_PRBS_EN_LN2f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN2f_GET
#define LANEPRBSr_PRBS_EN_LN2f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN2f_SET
#define LANEPRBSr_PRBS_INV_LN2f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN2f_GET
#define LANEPRBSr_PRBS_INV_LN2f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN2f_SET
#define LANEPRBSr_PRBS_ORDER2f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER2f_GET
#define LANEPRBSr_PRBS_ORDER2f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER2f_SET
#define LANEPRBSr_PRBS_EN_LN1f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN1f_GET
#define LANEPRBSr_PRBS_EN_LN1f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN1f_SET
#define LANEPRBSr_PRBS_INV_LN1f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN1f_GET
#define LANEPRBSr_PRBS_INV_LN1f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN1f_SET
#define LANEPRBSr_PRBS_ORDER1f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER1f_GET
#define LANEPRBSr_PRBS_ORDER1f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER1f_SET
#define LANEPRBSr_PRBS_EN_LN0f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN0f_GET
#define LANEPRBSr_PRBS_EN_LN0f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_EN_LN0f_SET
#define LANEPRBSr_PRBS_INV_LN0f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN0f_GET
#define LANEPRBSr_PRBS_INV_LN0f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_INV_LN0f_SET
#define LANEPRBSr_PRBS_ORDER0f_GET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER0f_GET
#define LANEPRBSr_PRBS_ORDER0f_SET BCMI_QSGMII_SERDES_LANEPRBSr_PRBS_ORDER0f_SET
#define READ_LANEPRBSr BCMI_QSGMII_SERDES_READ_LANEPRBSr
#define WRITE_LANEPRBSr BCMI_QSGMII_SERDES_WRITE_LANEPRBSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANEPRBSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANETEST
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x801a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MODE_10G_SNOOP   
 *     RX_SNOOP_EN      
 *     LFCK_BYPASS      
 *     PLL_LOCK_RSTB_R  
 *     RXSEQSTART_EXT_DIS 
 *     PWRDN_CLKS_EN    
 *     PWRDN_SAFE_DIS   
 *     PWRDN_EXT_DIS    
 *     INBANDMDIORXRSTEN 
 *     TMUX_SEL         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANETESTr (0x0000801a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANETESTr_SIZE 4

/*
 * This structure should be used to declare and program LANETEST.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANETESTr_s {
	uint32_t v[1];
	uint32_t lanetest[1];
	uint32_t _lanetest;
} BCMI_QSGMII_SERDES_LANETESTr_t;

#define BCMI_QSGMII_SERDES_LANETESTr_CLR(r) (r).lanetest[0] = 0
#define BCMI_QSGMII_SERDES_LANETESTr_SET(r,d) (r).lanetest[0] = d
#define BCMI_QSGMII_SERDES_LANETESTr_GET(r) (r).lanetest[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANETESTr_TMUX_SELf_GET(r) ((((r).lanetest[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_LANETESTr_TMUX_SELf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_LANETESTr_INBANDMDIORXRSTENf_GET(r) ((((r).lanetest[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_INBANDMDIORXRSTENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_EXT_DISf_GET(r) ((((r).lanetest[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_EXT_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_SAFE_DISf_GET(r) ((((r).lanetest[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_SAFE_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_CLKS_ENf_GET(r) ((((r).lanetest[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_PWRDN_CLKS_ENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_LANETESTr_RXSEQSTART_EXT_DISf_GET(r) ((((r).lanetest[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_RXSEQSTART_EXT_DISf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_LANETESTr_PLL_LOCK_RSTB_Rf_GET(r) ((((r).lanetest[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_PLL_LOCK_RSTB_Rf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_LANETESTr_LFCK_BYPASSf_GET(r) ((((r).lanetest[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_LFCK_BYPASSf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_LANETESTr_RX_SNOOP_ENf_GET(r) ((((r).lanetest[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_LANETESTr_RX_SNOOP_ENf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_LANETESTr_MODE_10G_SNOOPf_GET(r) (((r).lanetest[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANETESTr_MODE_10G_SNOOPf_SET(r,f) (r).lanetest[0]=(((r).lanetest[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANETEST.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANETESTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANETESTr,(_r._lanetest))
#define BCMI_QSGMII_SERDES_WRITE_LANETESTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANETESTr,(_r._lanetest))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANETESTr BCMI_QSGMII_SERDES_LANETESTr
#define LANETESTr_SIZE BCMI_QSGMII_SERDES_LANETESTr_SIZE
typedef BCMI_QSGMII_SERDES_LANETESTr_t LANETESTr_t;
#define LANETESTr_CLR BCMI_QSGMII_SERDES_LANETESTr_CLR
#define LANETESTr_SET BCMI_QSGMII_SERDES_LANETESTr_SET
#define LANETESTr_GET BCMI_QSGMII_SERDES_LANETESTr_GET
#define LANETESTr_TMUX_SELf_GET BCMI_QSGMII_SERDES_LANETESTr_TMUX_SELf_GET
#define LANETESTr_TMUX_SELf_SET BCMI_QSGMII_SERDES_LANETESTr_TMUX_SELf_SET
#define LANETESTr_INBANDMDIORXRSTENf_GET BCMI_QSGMII_SERDES_LANETESTr_INBANDMDIORXRSTENf_GET
#define LANETESTr_INBANDMDIORXRSTENf_SET BCMI_QSGMII_SERDES_LANETESTr_INBANDMDIORXRSTENf_SET
#define LANETESTr_PWRDN_EXT_DISf_GET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_EXT_DISf_GET
#define LANETESTr_PWRDN_EXT_DISf_SET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_EXT_DISf_SET
#define LANETESTr_PWRDN_SAFE_DISf_GET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_SAFE_DISf_GET
#define LANETESTr_PWRDN_SAFE_DISf_SET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_SAFE_DISf_SET
#define LANETESTr_PWRDN_CLKS_ENf_GET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_CLKS_ENf_GET
#define LANETESTr_PWRDN_CLKS_ENf_SET BCMI_QSGMII_SERDES_LANETESTr_PWRDN_CLKS_ENf_SET
#define LANETESTr_RXSEQSTART_EXT_DISf_GET BCMI_QSGMII_SERDES_LANETESTr_RXSEQSTART_EXT_DISf_GET
#define LANETESTr_RXSEQSTART_EXT_DISf_SET BCMI_QSGMII_SERDES_LANETESTr_RXSEQSTART_EXT_DISf_SET
#define LANETESTr_PLL_LOCK_RSTB_Rf_GET BCMI_QSGMII_SERDES_LANETESTr_PLL_LOCK_RSTB_Rf_GET
#define LANETESTr_PLL_LOCK_RSTB_Rf_SET BCMI_QSGMII_SERDES_LANETESTr_PLL_LOCK_RSTB_Rf_SET
#define LANETESTr_LFCK_BYPASSf_GET BCMI_QSGMII_SERDES_LANETESTr_LFCK_BYPASSf_GET
#define LANETESTr_LFCK_BYPASSf_SET BCMI_QSGMII_SERDES_LANETESTr_LFCK_BYPASSf_SET
#define LANETESTr_RX_SNOOP_ENf_GET BCMI_QSGMII_SERDES_LANETESTr_RX_SNOOP_ENf_GET
#define LANETESTr_RX_SNOOP_ENf_SET BCMI_QSGMII_SERDES_LANETESTr_RX_SNOOP_ENf_SET
#define LANETESTr_MODE_10G_SNOOPf_GET BCMI_QSGMII_SERDES_LANETESTr_MODE_10G_SNOOPf_GET
#define LANETESTr_MODE_10G_SNOOPf_SET BCMI_QSGMII_SERDES_LANETESTr_MODE_10G_SNOOPf_SET
#define READ_LANETESTr BCMI_QSGMII_SERDES_READ_LANETESTr
#define WRITE_LANETESTr BCMI_QSGMII_SERDES_WRITE_LANETESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANETESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LSSREVNT
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x801b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LSSREVNT_TX_ACTIVE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LSSREVNTr (0x0000801b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LSSREVNTr_SIZE 4

/*
 * This structure should be used to declare and program LSSREVNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_LSSREVNTr_s {
	uint32_t v[1];
	uint32_t lssrevnt[1];
	uint32_t _lssrevnt;
} BCMI_QSGMII_SERDES_LSSREVNTr_t;

#define BCMI_QSGMII_SERDES_LSSREVNTr_CLR(r) (r).lssrevnt[0] = 0
#define BCMI_QSGMII_SERDES_LSSREVNTr_SET(r,d) (r).lssrevnt[0] = d
#define BCMI_QSGMII_SERDES_LSSREVNTr_GET(r) (r).lssrevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LSSREVNTr_LSSREVNT_TX_ACTIVEf_GET(r) (((r).lssrevnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LSSREVNTr_LSSREVNT_TX_ACTIVEf_SET(r,f) (r).lssrevnt[0]=(((r).lssrevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LSSREVNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LSSREVNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LSSREVNTr,(_r._lssrevnt))
#define BCMI_QSGMII_SERDES_WRITE_LSSREVNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LSSREVNTr,(_r._lssrevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LSSREVNTr BCMI_QSGMII_SERDES_LSSREVNTr
#define LSSREVNTr_SIZE BCMI_QSGMII_SERDES_LSSREVNTr_SIZE
typedef BCMI_QSGMII_SERDES_LSSREVNTr_t LSSREVNTr_t;
#define LSSREVNTr_CLR BCMI_QSGMII_SERDES_LSSREVNTr_CLR
#define LSSREVNTr_SET BCMI_QSGMII_SERDES_LSSREVNTr_SET
#define LSSREVNTr_GET BCMI_QSGMII_SERDES_LSSREVNTr_GET
#define LSSREVNTr_LSSREVNT_TX_ACTIVEf_GET BCMI_QSGMII_SERDES_LSSREVNTr_LSSREVNT_TX_ACTIVEf_GET
#define LSSREVNTr_LSSREVNT_TX_ACTIVEf_SET BCMI_QSGMII_SERDES_LSSREVNTr_LSSREVNT_TX_ACTIVEf_SET
#define READ_LSSREVNTr BCMI_QSGMII_SERDES_READ_LSSREVNTr
#define WRITE_LSSREVNTr BCMI_QSGMII_SERDES_WRITE_LSSREVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LSSREVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DSKEVNT
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x801c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     DSKEVNT_RX_ACTIVE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DSKEVNTr (0x0000801c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DSKEVNTr_SIZE 4

/*
 * This structure should be used to declare and program DSKEVNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_DSKEVNTr_s {
	uint32_t v[1];
	uint32_t dskevnt[1];
	uint32_t _dskevnt;
} BCMI_QSGMII_SERDES_DSKEVNTr_t;

#define BCMI_QSGMII_SERDES_DSKEVNTr_CLR(r) (r).dskevnt[0] = 0
#define BCMI_QSGMII_SERDES_DSKEVNTr_SET(r,d) (r).dskevnt[0] = d
#define BCMI_QSGMII_SERDES_DSKEVNTr_GET(r) (r).dskevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DSKEVNTr_DSKEVNT_RX_ACTIVEf_GET(r) (((r).dskevnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_DSKEVNTr_DSKEVNT_RX_ACTIVEf_SET(r,f) (r).dskevnt[0]=(((r).dskevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DSKEVNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DSKEVNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DSKEVNTr,(_r._dskevnt))
#define BCMI_QSGMII_SERDES_WRITE_DSKEVNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DSKEVNTr,(_r._dskevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DSKEVNTr BCMI_QSGMII_SERDES_DSKEVNTr
#define DSKEVNTr_SIZE BCMI_QSGMII_SERDES_DSKEVNTr_SIZE
typedef BCMI_QSGMII_SERDES_DSKEVNTr_t DSKEVNTr_t;
#define DSKEVNTr_CLR BCMI_QSGMII_SERDES_DSKEVNTr_CLR
#define DSKEVNTr_SET BCMI_QSGMII_SERDES_DSKEVNTr_SET
#define DSKEVNTr_GET BCMI_QSGMII_SERDES_DSKEVNTr_GET
#define DSKEVNTr_DSKEVNT_RX_ACTIVEf_GET BCMI_QSGMII_SERDES_DSKEVNTr_DSKEVNT_RX_ACTIVEf_GET
#define DSKEVNTr_DSKEVNT_RX_ACTIVEf_SET BCMI_QSGMII_SERDES_DSKEVNTr_DSKEVNT_RX_ACTIVEf_SET
#define READ_DSKEVNTr BCMI_QSGMII_SERDES_READ_DSKEVNTr
#define WRITE_DSKEVNTr BCMI_QSGMII_SERDES_WRITE_DSKEVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DSKEVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AERREVNT
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x801d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AERREVNT         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AERREVNTr (0x0000801d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AERREVNTr_SIZE 4

/*
 * This structure should be used to declare and program AERREVNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_AERREVNTr_s {
	uint32_t v[1];
	uint32_t aerrevnt[1];
	uint32_t _aerrevnt;
} BCMI_QSGMII_SERDES_AERREVNTr_t;

#define BCMI_QSGMII_SERDES_AERREVNTr_CLR(r) (r).aerrevnt[0] = 0
#define BCMI_QSGMII_SERDES_AERREVNTr_SET(r,d) (r).aerrevnt[0] = d
#define BCMI_QSGMII_SERDES_AERREVNTr_GET(r) (r).aerrevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AERREVNTr_AERREVNTf_GET(r) (((r).aerrevnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AERREVNTr_AERREVNTf_SET(r,f) (r).aerrevnt[0]=(((r).aerrevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AERREVNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AERREVNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AERREVNTr,(_r._aerrevnt))
#define BCMI_QSGMII_SERDES_WRITE_AERREVNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AERREVNTr,(_r._aerrevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AERREVNTr BCMI_QSGMII_SERDES_AERREVNTr
#define AERREVNTr_SIZE BCMI_QSGMII_SERDES_AERREVNTr_SIZE
typedef BCMI_QSGMII_SERDES_AERREVNTr_t AERREVNTr_t;
#define AERREVNTr_CLR BCMI_QSGMII_SERDES_AERREVNTr_CLR
#define AERREVNTr_SET BCMI_QSGMII_SERDES_AERREVNTr_SET
#define AERREVNTr_GET BCMI_QSGMII_SERDES_AERREVNTr_GET
#define AERREVNTr_AERREVNTf_GET BCMI_QSGMII_SERDES_AERREVNTr_AERREVNTf_GET
#define AERREVNTr_AERREVNTf_SET BCMI_QSGMII_SERDES_AERREVNTr_AERREVNTf_SET
#define READ_AERREVNTr BCMI_QSGMII_SERDES_READ_AERREVNTr
#define WRITE_AERREVNTr BCMI_QSGMII_SERDES_WRITE_AERREVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AERREVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CKCMPEVNT
 * BLOCKS:   XGXS_BLOCK1
 * REGADDR:  0x801e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CKCMPEVNT        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CKCMPEVNTr (0x0000801e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CKCMPEVNTr_SIZE 4

/*
 * This structure should be used to declare and program CKCMPEVNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_CKCMPEVNTr_s {
	uint32_t v[1];
	uint32_t ckcmpevnt[1];
	uint32_t _ckcmpevnt;
} BCMI_QSGMII_SERDES_CKCMPEVNTr_t;

#define BCMI_QSGMII_SERDES_CKCMPEVNTr_CLR(r) (r).ckcmpevnt[0] = 0
#define BCMI_QSGMII_SERDES_CKCMPEVNTr_SET(r,d) (r).ckcmpevnt[0] = d
#define BCMI_QSGMII_SERDES_CKCMPEVNTr_GET(r) (r).ckcmpevnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CKCMPEVNTr_CKCMPEVNTf_GET(r) (((r).ckcmpevnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_CKCMPEVNTr_CKCMPEVNTf_SET(r,f) (r).ckcmpevnt[0]=(((r).ckcmpevnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CKCMPEVNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CKCMPEVNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CKCMPEVNTr,(_r._ckcmpevnt))
#define BCMI_QSGMII_SERDES_WRITE_CKCMPEVNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CKCMPEVNTr,(_r._ckcmpevnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CKCMPEVNTr BCMI_QSGMII_SERDES_CKCMPEVNTr
#define CKCMPEVNTr_SIZE BCMI_QSGMII_SERDES_CKCMPEVNTr_SIZE
typedef BCMI_QSGMII_SERDES_CKCMPEVNTr_t CKCMPEVNTr_t;
#define CKCMPEVNTr_CLR BCMI_QSGMII_SERDES_CKCMPEVNTr_CLR
#define CKCMPEVNTr_SET BCMI_QSGMII_SERDES_CKCMPEVNTr_SET
#define CKCMPEVNTr_GET BCMI_QSGMII_SERDES_CKCMPEVNTr_GET
#define CKCMPEVNTr_CKCMPEVNTf_GET BCMI_QSGMII_SERDES_CKCMPEVNTr_CKCMPEVNTf_GET
#define CKCMPEVNTr_CKCMPEVNTf_SET BCMI_QSGMII_SERDES_CKCMPEVNTr_CKCMPEVNTf_SET
#define READ_CKCMPEVNTr BCMI_QSGMII_SERDES_READ_CKCMPEVNTr
#define WRITE_CKCMPEVNTr BCMI_QSGMII_SERDES_WRITE_CKCMPEVNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CKCMPEVNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTCONTROL
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8020
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXBERT_COUNT_CLR 
 *     TX10G_FIFO_RST   
 *     TXCK_OUT_FORCE   
 *     CJRMP_EN         
 *     CRPAT_EN         
 *     CJPAT_EN         
 *     SKEW_EN          
 *     Q_LINK_EN        
 *     Q_EN             
 *     RNDM_EN          
 *     RAMP_EN          
 *     PRBS_PRDER       
 *     TXBERT_SEED_LD   
 *     TXBERT_PKT_EN    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr (0x00008020 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTCONTROLr_s {
	uint32_t v[1];
	uint32_t txbertcontrol[1];
	uint32_t _txbertcontrol;
} BCMI_QSGMII_SERDES_TXBERTCONTROLr_t;

#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CLR(r) (r).txbertcontrol[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_SET(r,d) (r).txbertcontrol[0] = d
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_GET(r) (r).txbertcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_PKT_ENf_GET(r) ((((r).txbertcontrol[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_PKT_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_SEED_LDf_GET(r) ((((r).txbertcontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_SEED_LDf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_PRBS_PRDERf_GET(r) ((((r).txbertcontrol[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_PRBS_PRDERf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_RAMP_ENf_GET(r) ((((r).txbertcontrol[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_RAMP_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_RNDM_ENf_GET(r) ((((r).txbertcontrol[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_RNDM_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_ENf_GET(r) ((((r).txbertcontrol[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_LINK_ENf_GET(r) ((((r).txbertcontrol[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_LINK_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_SKEW_ENf_GET(r) ((((r).txbertcontrol[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_SKEW_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJPAT_ENf_GET(r) ((((r).txbertcontrol[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJPAT_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CRPAT_ENf_GET(r) ((((r).txbertcontrol[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CRPAT_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJRMP_ENf_GET(r) ((((r).txbertcontrol[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJRMP_ENf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXCK_OUT_FORCEf_GET(r) ((((r).txbertcontrol[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXCK_OUT_FORCEf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TX10G_FIFO_RSTf_GET(r) ((((r).txbertcontrol[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TX10G_FIFO_RSTf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_COUNT_CLRf_GET(r) (((r).txbertcontrol[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_COUNT_CLRf_SET(r,f) (r).txbertcontrol[0]=(((r).txbertcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TXBERTCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTCONTROLr,(_r._txbertcontrol))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTCONTROLr,(_r._txbertcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTCONTROLr BCMI_QSGMII_SERDES_TXBERTCONTROLr
#define TXBERTCONTROLr_SIZE BCMI_QSGMII_SERDES_TXBERTCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTCONTROLr_t TXBERTCONTROLr_t;
#define TXBERTCONTROLr_CLR BCMI_QSGMII_SERDES_TXBERTCONTROLr_CLR
#define TXBERTCONTROLr_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_SET
#define TXBERTCONTROLr_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_GET
#define TXBERTCONTROLr_TXBERT_PKT_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_PKT_ENf_GET
#define TXBERTCONTROLr_TXBERT_PKT_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_PKT_ENf_SET
#define TXBERTCONTROLr_TXBERT_SEED_LDf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_SEED_LDf_GET
#define TXBERTCONTROLr_TXBERT_SEED_LDf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_SEED_LDf_SET
#define TXBERTCONTROLr_PRBS_PRDERf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_PRBS_PRDERf_GET
#define TXBERTCONTROLr_PRBS_PRDERf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_PRBS_PRDERf_SET
#define TXBERTCONTROLr_RAMP_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_RAMP_ENf_GET
#define TXBERTCONTROLr_RAMP_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_RAMP_ENf_SET
#define TXBERTCONTROLr_RNDM_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_RNDM_ENf_GET
#define TXBERTCONTROLr_RNDM_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_RNDM_ENf_SET
#define TXBERTCONTROLr_Q_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_ENf_GET
#define TXBERTCONTROLr_Q_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_ENf_SET
#define TXBERTCONTROLr_Q_LINK_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_LINK_ENf_GET
#define TXBERTCONTROLr_Q_LINK_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_Q_LINK_ENf_SET
#define TXBERTCONTROLr_SKEW_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_SKEW_ENf_GET
#define TXBERTCONTROLr_SKEW_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_SKEW_ENf_SET
#define TXBERTCONTROLr_CJPAT_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJPAT_ENf_GET
#define TXBERTCONTROLr_CJPAT_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJPAT_ENf_SET
#define TXBERTCONTROLr_CRPAT_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CRPAT_ENf_GET
#define TXBERTCONTROLr_CRPAT_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CRPAT_ENf_SET
#define TXBERTCONTROLr_CJRMP_ENf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJRMP_ENf_GET
#define TXBERTCONTROLr_CJRMP_ENf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_CJRMP_ENf_SET
#define TXBERTCONTROLr_TXCK_OUT_FORCEf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXCK_OUT_FORCEf_GET
#define TXBERTCONTROLr_TXCK_OUT_FORCEf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXCK_OUT_FORCEf_SET
#define TXBERTCONTROLr_TX10G_FIFO_RSTf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TX10G_FIFO_RSTf_GET
#define TXBERTCONTROLr_TX10G_FIFO_RSTf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TX10G_FIFO_RSTf_SET
#define TXBERTCONTROLr_TXBERT_COUNT_CLRf_GET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_COUNT_CLRf_GET
#define TXBERTCONTROLr_TXBERT_COUNT_CLRf_SET BCMI_QSGMII_SERDES_TXBERTCONTROLr_TXBERT_COUNT_CLRf_SET
#define READ_TXBERTCONTROLr BCMI_QSGMII_SERDES_READ_TXBERTCONTROLr
#define WRITE_TXBERTCONTROLr BCMI_QSGMII_SERDES_WRITE_TXBERTCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTSOPEOP
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8021
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     EOP              
 *     SOP              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr (0x00008021 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSOPEOP.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTSOPEOPr_s {
	uint32_t v[1];
	uint32_t txbertsopeop[1];
	uint32_t _txbertsopeop;
} BCMI_QSGMII_SERDES_TXBERTSOPEOPr_t;

#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_CLR(r) (r).txbertsopeop[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SET(r,d) (r).txbertsopeop[0] = d
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_GET(r) (r).txbertsopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SOPf_GET(r) ((((r).txbertsopeop[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SOPf_SET(r,f) (r).txbertsopeop[0]=(((r).txbertsopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_EOPf_GET(r) (((r).txbertsopeop[0]) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTSOPEOPr_EOPf_SET(r,f) (r).txbertsopeop[0]=(((r).txbertsopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTSOPEOP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTSOPEOPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTSOPEOPr,(_r._txbertsopeop))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTSOPEOPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTSOPEOPr,(_r._txbertsopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSOPEOPr BCMI_QSGMII_SERDES_TXBERTSOPEOPr
#define TXBERTSOPEOPr_SIZE BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTSOPEOPr_t TXBERTSOPEOPr_t;
#define TXBERTSOPEOPr_CLR BCMI_QSGMII_SERDES_TXBERTSOPEOPr_CLR
#define TXBERTSOPEOPr_SET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SET
#define TXBERTSOPEOPr_GET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_GET
#define TXBERTSOPEOPr_SOPf_GET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SOPf_GET
#define TXBERTSOPEOPr_SOPf_SET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_SOPf_SET
#define TXBERTSOPEOPr_EOPf_GET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_EOPf_GET
#define TXBERTSOPEOPr_EOPf_SET BCMI_QSGMII_SERDES_TXBERTSOPEOPr_EOPf_SET
#define READ_TXBERTSOPEOPr BCMI_QSGMII_SERDES_READ_TXBERTSOPEOPr
#define WRITE_TXBERTSOPEOPr BCMI_QSGMII_SERDES_WRITE_TXBERTSOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTSOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTSIZE0
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8022
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXBERT_PKT_SIZE_9_0 
 *     TXBERT_IPG_SIZE  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r (0x00008022 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE0.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTSIZE0r_s {
	uint32_t v[1];
	uint32_t txbertsize0[1];
	uint32_t _txbertsize0;
} BCMI_QSGMII_SERDES_TXBERTSIZE0r_t;

#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_CLR(r) (r).txbertsize0[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_SET(r,d) (r).txbertsize0[0] = d
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_GET(r) (r).txbertsize0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_IPG_SIZEf_GET(r) ((((r).txbertsize0[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_IPG_SIZEf_SET(r,f) (r).txbertsize0[0]=(((r).txbertsize0[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_GET(r) (((r).txbertsize0[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_SET(r,f) (r).txbertsize0[0]=(((r).txbertsize0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXBERTSIZE0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTSIZE0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE0r,(_r._txbertsize0))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE0r,(_r._txbertsize0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE0r BCMI_QSGMII_SERDES_TXBERTSIZE0r
#define TXBERTSIZE0r_SIZE BCMI_QSGMII_SERDES_TXBERTSIZE0r_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTSIZE0r_t TXBERTSIZE0r_t;
#define TXBERTSIZE0r_CLR BCMI_QSGMII_SERDES_TXBERTSIZE0r_CLR
#define TXBERTSIZE0r_SET BCMI_QSGMII_SERDES_TXBERTSIZE0r_SET
#define TXBERTSIZE0r_GET BCMI_QSGMII_SERDES_TXBERTSIZE0r_GET
#define TXBERTSIZE0r_TXBERT_IPG_SIZEf_GET BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_IPG_SIZEf_GET
#define TXBERTSIZE0r_TXBERT_IPG_SIZEf_SET BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_IPG_SIZEf_SET
#define TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_GET BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_GET
#define TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_SET BCMI_QSGMII_SERDES_TXBERTSIZE0r_TXBERT_PKT_SIZE_9_0f_SET
#define READ_TXBERTSIZE0r BCMI_QSGMII_SERDES_READ_TXBERTSIZE0r
#define WRITE_TXBERTSIZE0r BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTSIZE0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTSIZE1
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8023
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     STPPKTCNT        
 *     AWIN_SIZE        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r (0x00008023 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE1.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTSIZE1r_s {
	uint32_t v[1];
	uint32_t txbertsize1[1];
	uint32_t _txbertsize1;
} BCMI_QSGMII_SERDES_TXBERTSIZE1r_t;

#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_CLR(r) (r).txbertsize1[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_SET(r,d) (r).txbertsize1[0] = d
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_GET(r) (r).txbertsize1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_AWIN_SIZEf_GET(r) ((((r).txbertsize1[0]) >> 10) & 0x3f)
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_AWIN_SIZEf_SET(r,f) (r).txbertsize1[0]=(((r).txbertsize1[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_STPPKTCNTf_GET(r) (((r).txbertsize1[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_TXBERTSIZE1r_STPPKTCNTf_SET(r,f) (r).txbertsize1[0]=(((r).txbertsize1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TXBERTSIZE1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTSIZE1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE1r,(_r._txbertsize1))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE1r,(_r._txbertsize1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE1r BCMI_QSGMII_SERDES_TXBERTSIZE1r
#define TXBERTSIZE1r_SIZE BCMI_QSGMII_SERDES_TXBERTSIZE1r_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTSIZE1r_t TXBERTSIZE1r_t;
#define TXBERTSIZE1r_CLR BCMI_QSGMII_SERDES_TXBERTSIZE1r_CLR
#define TXBERTSIZE1r_SET BCMI_QSGMII_SERDES_TXBERTSIZE1r_SET
#define TXBERTSIZE1r_GET BCMI_QSGMII_SERDES_TXBERTSIZE1r_GET
#define TXBERTSIZE1r_AWIN_SIZEf_GET BCMI_QSGMII_SERDES_TXBERTSIZE1r_AWIN_SIZEf_GET
#define TXBERTSIZE1r_AWIN_SIZEf_SET BCMI_QSGMII_SERDES_TXBERTSIZE1r_AWIN_SIZEf_SET
#define TXBERTSIZE1r_STPPKTCNTf_GET BCMI_QSGMII_SERDES_TXBERTSIZE1r_STPPKTCNTf_GET
#define TXBERTSIZE1r_STPPKTCNTf_SET BCMI_QSGMII_SERDES_TXBERTSIZE1r_STPPKTCNTf_SET
#define READ_TXBERTSIZE1r BCMI_QSGMII_SERDES_READ_TXBERTSIZE1r
#define WRITE_TXBERTSIZE1r BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTSIZE1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTSIZE2
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8024
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SKEW0            
 *     SKEW1            
 *     SKEW2            
 *     SKEW3            
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r (0x00008024 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTSIZE2.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTSIZE2r_s {
	uint32_t v[1];
	uint32_t txbertsize2[1];
	uint32_t _txbertsize2;
} BCMI_QSGMII_SERDES_TXBERTSIZE2r_t;

#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_CLR(r) (r).txbertsize2[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SET(r,d) (r).txbertsize2[0] = d
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_GET(r) (r).txbertsize2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW3f_GET(r) ((((r).txbertsize2[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW3f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW2f_GET(r) ((((r).txbertsize2[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW2f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW1f_GET(r) ((((r).txbertsize2[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW1f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW0f_GET(r) (((r).txbertsize2[0]) & 0xf)
#define BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW0f_SET(r,f) (r).txbertsize2[0]=(((r).txbertsize2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TXBERTSIZE2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTSIZE2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE2r,(_r._txbertsize2))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTSIZE2r,(_r._txbertsize2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTSIZE2r BCMI_QSGMII_SERDES_TXBERTSIZE2r
#define TXBERTSIZE2r_SIZE BCMI_QSGMII_SERDES_TXBERTSIZE2r_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTSIZE2r_t TXBERTSIZE2r_t;
#define TXBERTSIZE2r_CLR BCMI_QSGMII_SERDES_TXBERTSIZE2r_CLR
#define TXBERTSIZE2r_SET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SET
#define TXBERTSIZE2r_GET BCMI_QSGMII_SERDES_TXBERTSIZE2r_GET
#define TXBERTSIZE2r_SKEW3f_GET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW3f_GET
#define TXBERTSIZE2r_SKEW3f_SET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW3f_SET
#define TXBERTSIZE2r_SKEW2f_GET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW2f_GET
#define TXBERTSIZE2r_SKEW2f_SET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW2f_SET
#define TXBERTSIZE2r_SKEW1f_GET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW1f_GET
#define TXBERTSIZE2r_SKEW1f_SET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW1f_SET
#define TXBERTSIZE2r_SKEW0f_GET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW0f_GET
#define TXBERTSIZE2r_SKEW0f_SET BCMI_QSGMII_SERDES_TXBERTSIZE2r_SKEW0f_SET
#define READ_TXBERTSIZE2r BCMI_QSGMII_SERDES_READ_TXBERTSIZE2r
#define WRITE_TXBERTSIZE2r BCMI_QSGMII_SERDES_WRITE_TXBERTSIZE2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTSIZE2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTIPG0
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8025
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IPG0             
 *     IPG1             
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTIPG0r (0x00008025 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTIPG0r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTIPG0.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTIPG0r_s {
	uint32_t v[1];
	uint32_t txbertipg0[1];
	uint32_t _txbertipg0;
} BCMI_QSGMII_SERDES_TXBERTIPG0r_t;

#define BCMI_QSGMII_SERDES_TXBERTIPG0r_CLR(r) (r).txbertipg0[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_SET(r,d) (r).txbertipg0[0] = d
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_GET(r) (r).txbertipg0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG1f_GET(r) ((((r).txbertipg0[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG1f_SET(r,f) (r).txbertipg0[0]=(((r).txbertipg0[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG0f_GET(r) (((r).txbertipg0[0]) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG0f_SET(r,f) (r).txbertipg0[0]=(((r).txbertipg0[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTIPG0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTIPG0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTIPG0r,(_r._txbertipg0))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTIPG0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTIPG0r,(_r._txbertipg0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTIPG0r BCMI_QSGMII_SERDES_TXBERTIPG0r
#define TXBERTIPG0r_SIZE BCMI_QSGMII_SERDES_TXBERTIPG0r_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTIPG0r_t TXBERTIPG0r_t;
#define TXBERTIPG0r_CLR BCMI_QSGMII_SERDES_TXBERTIPG0r_CLR
#define TXBERTIPG0r_SET BCMI_QSGMII_SERDES_TXBERTIPG0r_SET
#define TXBERTIPG0r_GET BCMI_QSGMII_SERDES_TXBERTIPG0r_GET
#define TXBERTIPG0r_IPG1f_GET BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG1f_GET
#define TXBERTIPG0r_IPG1f_SET BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG1f_SET
#define TXBERTIPG0r_IPG0f_GET BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG0f_GET
#define TXBERTIPG0r_IPG0f_SET BCMI_QSGMII_SERDES_TXBERTIPG0r_IPG0f_SET
#define READ_TXBERTIPG0r BCMI_QSGMII_SERDES_READ_TXBERTIPG0r
#define WRITE_TXBERTIPG0r BCMI_QSGMII_SERDES_WRITE_TXBERTIPG0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTIPG0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXBERTIPG1
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8026
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IPG2             
 *     IPG3             
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXBERTIPG1r (0x00008026 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXBERTIPG1r_SIZE 4

/*
 * This structure should be used to declare and program TXBERTIPG1.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXBERTIPG1r_s {
	uint32_t v[1];
	uint32_t txbertipg1[1];
	uint32_t _txbertipg1;
} BCMI_QSGMII_SERDES_TXBERTIPG1r_t;

#define BCMI_QSGMII_SERDES_TXBERTIPG1r_CLR(r) (r).txbertipg1[0] = 0
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_SET(r,d) (r).txbertipg1[0] = d
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_GET(r) (r).txbertipg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG3f_GET(r) ((((r).txbertipg1[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG3f_SET(r,f) (r).txbertipg1[0]=(((r).txbertipg1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG2f_GET(r) (((r).txbertipg1[0]) & 0xff)
#define BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG2f_SET(r,f) (r).txbertipg1[0]=(((r).txbertipg1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access TXBERTIPG1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXBERTIPG1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXBERTIPG1r,(_r._txbertipg1))
#define BCMI_QSGMII_SERDES_WRITE_TXBERTIPG1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXBERTIPG1r,(_r._txbertipg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXBERTIPG1r BCMI_QSGMII_SERDES_TXBERTIPG1r
#define TXBERTIPG1r_SIZE BCMI_QSGMII_SERDES_TXBERTIPG1r_SIZE
typedef BCMI_QSGMII_SERDES_TXBERTIPG1r_t TXBERTIPG1r_t;
#define TXBERTIPG1r_CLR BCMI_QSGMII_SERDES_TXBERTIPG1r_CLR
#define TXBERTIPG1r_SET BCMI_QSGMII_SERDES_TXBERTIPG1r_SET
#define TXBERTIPG1r_GET BCMI_QSGMII_SERDES_TXBERTIPG1r_GET
#define TXBERTIPG1r_IPG3f_GET BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG3f_GET
#define TXBERTIPG1r_IPG3f_SET BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG3f_SET
#define TXBERTIPG1r_IPG2f_GET BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG2f_GET
#define TXBERTIPG1r_IPG2f_SET BCMI_QSGMII_SERDES_TXBERTIPG1r_IPG2f_SET
#define READ_TXBERTIPG1r BCMI_QSGMII_SERDES_READ_TXBERTIPG1r
#define WRITE_TXBERTIPG1r BCMI_QSGMII_SERDES_WRITE_TXBERTIPG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXBERTIPG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_BYTE_COUNT_LOW
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8027
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_TRANSMITTED_BYTE_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr (0x00008027 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program TX_BYTE_COUNT_LOW.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_s {
	uint32_t v[1];
	uint32_t tx_byte_count_low[1];
	uint32_t _tx_byte_count_low;
} BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_t;

#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_CLR(r) (r).tx_byte_count_low[0] = 0
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_SET(r,d) (r).tx_byte_count_low[0] = d
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_GET(r) (r).tx_byte_count_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_GET(r) (((r).tx_byte_count_low[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_SET(r,f) (r).tx_byte_count_low[0]=(((r).tx_byte_count_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TX_BYTE_COUNT_LOW.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_BYTE_COUNT_LOWr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr,(_r._tx_byte_count_low))
#define BCMI_QSGMII_SERDES_WRITE_TX_BYTE_COUNT_LOWr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr,(_r._tx_byte_count_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr
#define TX_BYTE_COUNT_LOWr_SIZE BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_SIZE
typedef BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_t TX_BYTE_COUNT_LOWr_t;
#define TX_BYTE_COUNT_LOWr_CLR BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_CLR
#define TX_BYTE_COUNT_LOWr_SET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_SET
#define TX_BYTE_COUNT_LOWr_GET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_GET
#define TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_GET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_GET
#define TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_SET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr_TOTAL_TRANSMITTED_BYTE_COUNTf_SET
#define READ_TX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_READ_TX_BYTE_COUNT_LOWr
#define WRITE_TX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_WRITE_TX_BYTE_COUNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_BYTE_COUNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_BYTE_COUNT_HIGH
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8028
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_TRANSMITTED_PACKET_COUNT_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr (0x00008028 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program TX_BYTE_COUNT_HIGH.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_s {
	uint32_t v[1];
	uint32_t tx_byte_count_high[1];
	uint32_t _tx_byte_count_high;
} BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_t;

#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_CLR(r) (r).tx_byte_count_high[0] = 0
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_SET(r,d) (r).tx_byte_count_high[0] = d
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_GET(r) (r).tx_byte_count_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET(r) (((r).tx_byte_count_high[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET(r,f) (r).tx_byte_count_high[0]=(((r).tx_byte_count_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TX_BYTE_COUNT_HIGH.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_BYTE_COUNT_HIGHr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr,(_r._tx_byte_count_high))
#define BCMI_QSGMII_SERDES_WRITE_TX_BYTE_COUNT_HIGHr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr,(_r._tx_byte_count_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr
#define TX_BYTE_COUNT_HIGHr_SIZE BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_SIZE
typedef BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_t TX_BYTE_COUNT_HIGHr_t;
#define TX_BYTE_COUNT_HIGHr_CLR BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_CLR
#define TX_BYTE_COUNT_HIGHr_SET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_SET
#define TX_BYTE_COUNT_HIGHr_GET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_GET
#define TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET
#define TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET
#define READ_TX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_READ_TX_BYTE_COUNT_HIGHr
#define WRITE_TX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_WRITE_TX_BYTE_COUNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_BYTE_COUNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_PACKET_COUNT_LOW
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x8029
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_TRANSMITTED_PACKET_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr (0x00008029 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program TX_PACKET_COUNT_LOW.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_s {
	uint32_t v[1];
	uint32_t tx_packet_count_low[1];
	uint32_t _tx_packet_count_low;
} BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_t;

#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_CLR(r) (r).tx_packet_count_low[0] = 0
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_SET(r,d) (r).tx_packet_count_low[0] = d
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_GET(r) (r).tx_packet_count_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_GET(r) (((r).tx_packet_count_low[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_SET(r,f) (r).tx_packet_count_low[0]=(((r).tx_packet_count_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TX_PACKET_COUNT_LOW.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_PACKET_COUNT_LOWr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr,(_r._tx_packet_count_low))
#define BCMI_QSGMII_SERDES_WRITE_TX_PACKET_COUNT_LOWr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr,(_r._tx_packet_count_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr
#define TX_PACKET_COUNT_LOWr_SIZE BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_SIZE
typedef BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_t TX_PACKET_COUNT_LOWr_t;
#define TX_PACKET_COUNT_LOWr_CLR BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_CLR
#define TX_PACKET_COUNT_LOWr_SET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_SET
#define TX_PACKET_COUNT_LOWr_GET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_GET
#define TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_GET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_GET
#define TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_SET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr_TOTAL_TRANSMITTED_PACKET_COUNTf_SET
#define READ_TX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_READ_TX_PACKET_COUNT_LOWr
#define WRITE_TX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_WRITE_TX_PACKET_COUNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_PACKET_COUNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_PACKET_COUNT_HIGH
 * BLOCKS:   TX_BERT_10G
 * REGADDR:  0x802a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_TRANSMITTED_PACKET_COUNT_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr (0x0000802a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program TX_PACKET_COUNT_HIGH.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_s {
	uint32_t v[1];
	uint32_t tx_packet_count_high[1];
	uint32_t _tx_packet_count_high;
} BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_t;

#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_CLR(r) (r).tx_packet_count_high[0] = 0
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_SET(r,d) (r).tx_packet_count_high[0] = d
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_GET(r) (r).tx_packet_count_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET(r) (((r).tx_packet_count_high[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET(r,f) (r).tx_packet_count_high[0]=(((r).tx_packet_count_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TX_PACKET_COUNT_HIGH.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_PACKET_COUNT_HIGHr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr,(_r._tx_packet_count_high))
#define BCMI_QSGMII_SERDES_WRITE_TX_PACKET_COUNT_HIGHr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr,(_r._tx_packet_count_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr
#define TX_PACKET_COUNT_HIGHr_SIZE BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_SIZE
typedef BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_t TX_PACKET_COUNT_HIGHr_t;
#define TX_PACKET_COUNT_HIGHr_CLR BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_CLR
#define TX_PACKET_COUNT_HIGHr_SET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_SET
#define TX_PACKET_COUNT_HIGHr_GET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_GET
#define TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_GET
#define TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr_TOTAL_TRANSMITTED_PACKET_COUNT_31_16f_SET
#define READ_TX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_READ_TX_PACKET_COUNT_HIGHr
#define WRITE_TX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_WRITE_TX_PACKET_COUNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_PACKET_COUNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RXBERTCONTROL
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x8030
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RXBERT_COUNT_CLR 
 *     RXBERT_ERR_CLR   
 *     SLICE_SEL        
 *     SOURCE_SEL       
 *     SOURCE_SEL_R     
 *     RXSTATSEL        
 *     CRCCHK_EN        
 *     CGBAD_TST_EN     
 *     RAMP_EN          
 *     PRBS_PRDER       
 *     RXBERT_SEED_LD   
 *     RXBERT_PKT_EN    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr (0x00008030 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_RXBERTCONTROLr_s {
	uint32_t v[1];
	uint32_t rxbertcontrol[1];
	uint32_t _rxbertcontrol;
} BCMI_QSGMII_SERDES_RXBERTCONTROLr_t;

#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_CLR(r) (r).rxbertcontrol[0] = 0
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SET(r,d) (r).rxbertcontrol[0] = d
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_GET(r) (r).rxbertcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_PKT_ENf_GET(r) ((((r).rxbertcontrol[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_PKT_ENf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_SEED_LDf_GET(r) ((((r).rxbertcontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_SEED_LDf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_PRBS_PRDERf_GET(r) ((((r).rxbertcontrol[0]) >> 12) & 0x3)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_PRBS_PRDERf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x3 << 12)) | ((((uint32_t)f) & 0x3) << 12))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RAMP_ENf_GET(r) ((((r).rxbertcontrol[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RAMP_ENf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_CGBAD_TST_ENf_GET(r) ((((r).rxbertcontrol[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_CGBAD_TST_ENf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_CRCCHK_ENf_GET(r) ((((r).rxbertcontrol[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_CRCCHK_ENf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXSTATSELf_GET(r) ((((r).rxbertcontrol[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXSTATSELf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SEL_Rf_GET(r) ((((r).rxbertcontrol[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SEL_Rf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SELf_GET(r) ((((r).rxbertcontrol[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SELf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SLICE_SELf_GET(r) ((((r).rxbertcontrol[0]) >> 2) & 0x3)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_SLICE_SELf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_ERR_CLRf_GET(r) ((((r).rxbertcontrol[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_ERR_CLRf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_COUNT_CLRf_GET(r) (((r).rxbertcontrol[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_COUNT_CLRf_SET(r,f) (r).rxbertcontrol[0]=(((r).rxbertcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RXBERTCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RXBERTCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RXBERTCONTROLr,(_r._rxbertcontrol))
#define BCMI_QSGMII_SERDES_WRITE_RXBERTCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RXBERTCONTROLr,(_r._rxbertcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTCONTROLr BCMI_QSGMII_SERDES_RXBERTCONTROLr
#define RXBERTCONTROLr_SIZE BCMI_QSGMII_SERDES_RXBERTCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_RXBERTCONTROLr_t RXBERTCONTROLr_t;
#define RXBERTCONTROLr_CLR BCMI_QSGMII_SERDES_RXBERTCONTROLr_CLR
#define RXBERTCONTROLr_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SET
#define RXBERTCONTROLr_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_GET
#define RXBERTCONTROLr_RXBERT_PKT_ENf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_PKT_ENf_GET
#define RXBERTCONTROLr_RXBERT_PKT_ENf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_PKT_ENf_SET
#define RXBERTCONTROLr_RXBERT_SEED_LDf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_SEED_LDf_GET
#define RXBERTCONTROLr_RXBERT_SEED_LDf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_SEED_LDf_SET
#define RXBERTCONTROLr_PRBS_PRDERf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_PRBS_PRDERf_GET
#define RXBERTCONTROLr_PRBS_PRDERf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_PRBS_PRDERf_SET
#define RXBERTCONTROLr_RAMP_ENf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RAMP_ENf_GET
#define RXBERTCONTROLr_RAMP_ENf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RAMP_ENf_SET
#define RXBERTCONTROLr_CGBAD_TST_ENf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_CGBAD_TST_ENf_GET
#define RXBERTCONTROLr_CGBAD_TST_ENf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_CGBAD_TST_ENf_SET
#define RXBERTCONTROLr_CRCCHK_ENf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_CRCCHK_ENf_GET
#define RXBERTCONTROLr_CRCCHK_ENf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_CRCCHK_ENf_SET
#define RXBERTCONTROLr_RXSTATSELf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXSTATSELf_GET
#define RXBERTCONTROLr_RXSTATSELf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXSTATSELf_SET
#define RXBERTCONTROLr_SOURCE_SEL_Rf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SEL_Rf_GET
#define RXBERTCONTROLr_SOURCE_SEL_Rf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SEL_Rf_SET
#define RXBERTCONTROLr_SOURCE_SELf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SELf_GET
#define RXBERTCONTROLr_SOURCE_SELf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SOURCE_SELf_SET
#define RXBERTCONTROLr_SLICE_SELf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SLICE_SELf_GET
#define RXBERTCONTROLr_SLICE_SELf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_SLICE_SELf_SET
#define RXBERTCONTROLr_RXBERT_ERR_CLRf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_ERR_CLRf_GET
#define RXBERTCONTROLr_RXBERT_ERR_CLRf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_ERR_CLRf_SET
#define RXBERTCONTROLr_RXBERT_COUNT_CLRf_GET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_COUNT_CLRf_GET
#define RXBERTCONTROLr_RXBERT_COUNT_CLRf_SET BCMI_QSGMII_SERDES_RXBERTCONTROLr_RXBERT_COUNT_CLRf_SET
#define READ_RXBERTCONTROLr BCMI_QSGMII_SERDES_READ_RXBERTCONTROLr
#define WRITE_RXBERTCONTROLr BCMI_QSGMII_SERDES_WRITE_RXBERTCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RXBERTCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RXBERTSOPEOP
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x8031
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     EOP              
 *     SOP              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr (0x00008031 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SIZE 4

/*
 * This structure should be used to declare and program RXBERTSOPEOP.
 *
 */
typedef union BCMI_QSGMII_SERDES_RXBERTSOPEOPr_s {
	uint32_t v[1];
	uint32_t rxbertsopeop[1];
	uint32_t _rxbertsopeop;
} BCMI_QSGMII_SERDES_RXBERTSOPEOPr_t;

#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_CLR(r) (r).rxbertsopeop[0] = 0
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SET(r,d) (r).rxbertsopeop[0] = d
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_GET(r) (r).rxbertsopeop[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SOPf_GET(r) ((((r).rxbertsopeop[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SOPf_SET(r,f) (r).rxbertsopeop[0]=(((r).rxbertsopeop[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_EOPf_GET(r) (((r).rxbertsopeop[0]) & 0xff)
#define BCMI_QSGMII_SERDES_RXBERTSOPEOPr_EOPf_SET(r,f) (r).rxbertsopeop[0]=(((r).rxbertsopeop[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access RXBERTSOPEOP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RXBERTSOPEOPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RXBERTSOPEOPr,(_r._rxbertsopeop))
#define BCMI_QSGMII_SERDES_WRITE_RXBERTSOPEOPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RXBERTSOPEOPr,(_r._rxbertsopeop))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXBERTSOPEOPr BCMI_QSGMII_SERDES_RXBERTSOPEOPr
#define RXBERTSOPEOPr_SIZE BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SIZE
typedef BCMI_QSGMII_SERDES_RXBERTSOPEOPr_t RXBERTSOPEOPr_t;
#define RXBERTSOPEOPr_CLR BCMI_QSGMII_SERDES_RXBERTSOPEOPr_CLR
#define RXBERTSOPEOPr_SET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SET
#define RXBERTSOPEOPr_GET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_GET
#define RXBERTSOPEOPr_SOPf_GET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SOPf_GET
#define RXBERTSOPEOPr_SOPf_SET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_SOPf_SET
#define RXBERTSOPEOPr_EOPf_GET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_EOPf_GET
#define RXBERTSOPEOPr_EOPf_SET BCMI_QSGMII_SERDES_RXBERTSOPEOPr_EOPf_SET
#define READ_RXBERTSOPEOPr BCMI_QSGMII_SERDES_READ_RXBERTSOPEOPr
#define WRITE_RXBERTSOPEOPr BCMI_QSGMII_SERDES_WRITE_RXBERTSOPEOPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RXBERTSOPEOPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_BYTE_COUNT_HIGH
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x8037
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_RECEIVED_BYTE_COUNT_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr (0x00008037 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program RX_BYTE_COUNT_HIGH.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_s {
	uint32_t v[1];
	uint32_t rx_byte_count_high[1];
	uint32_t _rx_byte_count_high;
} BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_t;

#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_CLR(r) (r).rx_byte_count_high[0] = 0
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_SET(r,d) (r).rx_byte_count_high[0] = d
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_GET(r) (r).rx_byte_count_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_GET(r) (((r).rx_byte_count_high[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_SET(r,f) (r).rx_byte_count_high[0]=(((r).rx_byte_count_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_BYTE_COUNT_HIGH.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_BYTE_COUNT_HIGHr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr,(_r._rx_byte_count_high))
#define BCMI_QSGMII_SERDES_WRITE_RX_BYTE_COUNT_HIGHr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr,(_r._rx_byte_count_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr
#define RX_BYTE_COUNT_HIGHr_SIZE BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_SIZE
typedef BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_t RX_BYTE_COUNT_HIGHr_t;
#define RX_BYTE_COUNT_HIGHr_CLR BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_CLR
#define RX_BYTE_COUNT_HIGHr_SET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_SET
#define RX_BYTE_COUNT_HIGHr_GET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_GET
#define RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_GET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_GET
#define RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_SET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr_TOTAL_RECEIVED_BYTE_COUNT_31_16f_SET
#define READ_RX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_READ_RX_BYTE_COUNT_HIGHr
#define WRITE_RX_BYTE_COUNT_HIGHr BCMI_QSGMII_SERDES_WRITE_RX_BYTE_COUNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_BYTE_COUNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_BYTE_COUNT_LOW
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x8038
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_RECEIVED_BYTE_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr (0x00008038 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program RX_BYTE_COUNT_LOW.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_s {
	uint32_t v[1];
	uint32_t rx_byte_count_low[1];
	uint32_t _rx_byte_count_low;
} BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_t;

#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_CLR(r) (r).rx_byte_count_low[0] = 0
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_SET(r,d) (r).rx_byte_count_low[0] = d
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_GET(r) (r).rx_byte_count_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_GET(r) (((r).rx_byte_count_low[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_SET(r,f) (r).rx_byte_count_low[0]=(((r).rx_byte_count_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_BYTE_COUNT_LOW.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_BYTE_COUNT_LOWr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr,(_r._rx_byte_count_low))
#define BCMI_QSGMII_SERDES_WRITE_RX_BYTE_COUNT_LOWr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr,(_r._rx_byte_count_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr
#define RX_BYTE_COUNT_LOWr_SIZE BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_SIZE
typedef BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_t RX_BYTE_COUNT_LOWr_t;
#define RX_BYTE_COUNT_LOWr_CLR BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_CLR
#define RX_BYTE_COUNT_LOWr_SET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_SET
#define RX_BYTE_COUNT_LOWr_GET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_GET
#define RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_GET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_GET
#define RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_SET BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr_TOTAL_RECEIVED_BYTE_COUNTf_SET
#define READ_RX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_READ_RX_BYTE_COUNT_LOWr
#define WRITE_RX_BYTE_COUNT_LOWr BCMI_QSGMII_SERDES_WRITE_RX_BYTE_COUNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_BYTE_COUNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_PACKET_COUNT_HIGH
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x8039
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr (0x00008039 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_SIZE 4

/*
 * This structure should be used to declare and program RX_PACKET_COUNT_HIGH.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_s {
	uint32_t v[1];
	uint32_t rx_packet_count_high[1];
	uint32_t _rx_packet_count_high;
} BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_t;

#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_CLR(r) (r).rx_packet_count_high[0] = 0
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_SET(r,d) (r).rx_packet_count_high[0] = d
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_GET(r) (r).rx_packet_count_high[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_GET(r) (((r).rx_packet_count_high[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_SET(r,f) (r).rx_packet_count_high[0]=(((r).rx_packet_count_high[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_PACKET_COUNT_HIGH.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_PACKET_COUNT_HIGHr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr,(_r._rx_packet_count_high))
#define BCMI_QSGMII_SERDES_WRITE_RX_PACKET_COUNT_HIGHr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr,(_r._rx_packet_count_high))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr
#define RX_PACKET_COUNT_HIGHr_SIZE BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_SIZE
typedef BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_t RX_PACKET_COUNT_HIGHr_t;
#define RX_PACKET_COUNT_HIGHr_CLR BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_CLR
#define RX_PACKET_COUNT_HIGHr_SET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_SET
#define RX_PACKET_COUNT_HIGHr_GET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_GET
#define RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_GET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_GET
#define RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_SET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT_31_16f_SET
#define READ_RX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_READ_RX_PACKET_COUNT_HIGHr
#define WRITE_RX_PACKET_COUNT_HIGHr BCMI_QSGMII_SERDES_WRITE_RX_PACKET_COUNT_HIGHr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_PACKET_COUNT_HIGHr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_PACKET_COUNT_LOW
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x803a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr (0x0000803a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_SIZE 4

/*
 * This structure should be used to declare and program RX_PACKET_COUNT_LOW.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_s {
	uint32_t v[1];
	uint32_t rx_packet_count_low[1];
	uint32_t _rx_packet_count_low;
} BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_t;

#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_CLR(r) (r).rx_packet_count_low[0] = 0
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_SET(r,d) (r).rx_packet_count_low[0] = d
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_GET(r) (r).rx_packet_count_low[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_GET(r) (((r).rx_packet_count_low[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_SET(r,f) (r).rx_packet_count_low[0]=(((r).rx_packet_count_low[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_PACKET_COUNT_LOW.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_PACKET_COUNT_LOWr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr,(_r._rx_packet_count_low))
#define BCMI_QSGMII_SERDES_WRITE_RX_PACKET_COUNT_LOWr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr,(_r._rx_packet_count_low))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr
#define RX_PACKET_COUNT_LOWr_SIZE BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_SIZE
typedef BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_t RX_PACKET_COUNT_LOWr_t;
#define RX_PACKET_COUNT_LOWr_CLR BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_CLR
#define RX_PACKET_COUNT_LOWr_SET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_SET
#define RX_PACKET_COUNT_LOWr_GET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_GET
#define RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_GET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_GET
#define RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_SET BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr_TOTAL_RECEIVED_PACKET_COUNT_OR_GOOD_CRC_32_COUNTf_SET
#define READ_RX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_READ_RX_PACKET_COUNT_LOWr
#define WRITE_RX_PACKET_COUNT_LOWr BCMI_QSGMII_SERDES_WRITE_RX_PACKET_COUNT_LOWr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_PACKET_COUNT_LOWr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_RX_BIT_ERROR_COUNT
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x803b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETS 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr (0x0000803b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program RX_RX_BIT_ERROR_COUNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_s {
	uint32_t v[1];
	uint32_t rx_rx_bit_error_count[1];
	uint32_t _rx_rx_bit_error_count;
} BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_t;

#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_CLR(r) (r).rx_rx_bit_error_count[0] = 0
#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_SET(r,d) (r).rx_rx_bit_error_count[0] = d
#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_GET(r) (r).rx_rx_bit_error_count[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_GET(r) (((r).rx_rx_bit_error_count[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_SET(r,f) (r).rx_rx_bit_error_count[0]=(((r).rx_rx_bit_error_count[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_RX_BIT_ERROR_COUNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_RX_BIT_ERROR_COUNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr,(_r._rx_rx_bit_error_count))
#define BCMI_QSGMII_SERDES_WRITE_RX_RX_BIT_ERROR_COUNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr,(_r._rx_rx_bit_error_count))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_RX_BIT_ERROR_COUNTr BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr
#define RX_RX_BIT_ERROR_COUNTr_SIZE BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_SIZE
typedef BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_t RX_RX_BIT_ERROR_COUNTr_t;
#define RX_RX_BIT_ERROR_COUNTr_CLR BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_CLR
#define RX_RX_BIT_ERROR_COUNTr_SET BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_SET
#define RX_RX_BIT_ERROR_COUNTr_GET BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_GET
#define RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_GET BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_GET
#define RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_SET BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr_TOTAL_BIT_ERRORS_IN_THE_RECEIVED_PACKETSf_SET
#define READ_RX_RX_BIT_ERROR_COUNTr BCMI_QSGMII_SERDES_READ_RX_RX_BIT_ERROR_COUNTr
#define WRITE_RX_RX_BIT_ERROR_COUNTr BCMI_QSGMII_SERDES_WRITE_RX_RX_BIT_ERROR_COUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_RX_BIT_ERROR_COUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_RX_BYTE_ERROR_COUNT
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x803c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETS 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr (0x0000803c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program RX_RX_BYTE_ERROR_COUNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_s {
	uint32_t v[1];
	uint32_t rx_rx_byte_error_count[1];
	uint32_t _rx_rx_byte_error_count;
} BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_t;

#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_CLR(r) (r).rx_rx_byte_error_count[0] = 0
#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_SET(r,d) (r).rx_rx_byte_error_count[0] = d
#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_GET(r) (r).rx_rx_byte_error_count[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_GET(r) (((r).rx_rx_byte_error_count[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_SET(r,f) (r).rx_rx_byte_error_count[0]=(((r).rx_rx_byte_error_count[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_RX_BYTE_ERROR_COUNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_RX_BYTE_ERROR_COUNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr,(_r._rx_rx_byte_error_count))
#define BCMI_QSGMII_SERDES_WRITE_RX_RX_BYTE_ERROR_COUNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr,(_r._rx_rx_byte_error_count))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_RX_BYTE_ERROR_COUNTr BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr
#define RX_RX_BYTE_ERROR_COUNTr_SIZE BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_SIZE
typedef BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_t RX_RX_BYTE_ERROR_COUNTr_t;
#define RX_RX_BYTE_ERROR_COUNTr_CLR BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_CLR
#define RX_RX_BYTE_ERROR_COUNTr_SET BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_SET
#define RX_RX_BYTE_ERROR_COUNTr_GET BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_GET
#define RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_GET BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_GET
#define RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_SET BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr_TOTAL_BYTE_ERRORS_IN_THE_RECEIVED_PACKETSf_SET
#define READ_RX_RX_BYTE_ERROR_COUNTr BCMI_QSGMII_SERDES_READ_RX_RX_BYTE_ERROR_COUNTr
#define WRITE_RX_RX_BYTE_ERROR_COUNTr BCMI_QSGMII_SERDES_WRITE_RX_RX_BYTE_ERROR_COUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_RX_BYTE_ERROR_COUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_RX_PACKET_ERROR_COUNT
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x803d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr (0x0000803d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_SIZE 4

/*
 * This structure should be used to declare and program RX_RX_PACKET_ERROR_COUNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_s {
	uint32_t v[1];
	uint32_t rx_rx_packet_error_count[1];
	uint32_t _rx_rx_packet_error_count;
} BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_t;

#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_CLR(r) (r).rx_rx_packet_error_count[0] = 0
#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_SET(r,d) (r).rx_rx_packet_error_count[0] = d
#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_GET(r) (r).rx_rx_packet_error_count[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_GET(r) (((r).rx_rx_packet_error_count[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_SET(r,f) (r).rx_rx_packet_error_count[0]=(((r).rx_rx_packet_error_count[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_RX_PACKET_ERROR_COUNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_RX_PACKET_ERROR_COUNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr,(_r._rx_rx_packet_error_count))
#define BCMI_QSGMII_SERDES_WRITE_RX_RX_PACKET_ERROR_COUNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr,(_r._rx_rx_packet_error_count))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_RX_PACKET_ERROR_COUNTr BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr
#define RX_RX_PACKET_ERROR_COUNTr_SIZE BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_SIZE
typedef BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_t RX_RX_PACKET_ERROR_COUNTr_t;
#define RX_RX_PACKET_ERROR_COUNTr_CLR BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_CLR
#define RX_RX_PACKET_ERROR_COUNTr_SET BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_SET
#define RX_RX_PACKET_ERROR_COUNTr_GET BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_GET
#define RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_GET BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_GET
#define RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_SET BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr_TOTAL_PACKET_ERRORS_IN_THE_RECEIVED_PACKETS_OR_BAD_CRC_32_COUNTf_SET
#define READ_RX_RX_PACKET_ERROR_COUNTr BCMI_QSGMII_SERDES_READ_RX_RX_PACKET_ERROR_COUNTr
#define WRITE_RX_RX_PACKET_ERROR_COUNTr BCMI_QSGMII_SERDES_WRITE_RX_RX_PACKET_ERROR_COUNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_RX_PACKET_ERROR_COUNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_STATUS_BITS
 * BLOCKS:   RX_BERT_10G
 * REGADDR:  0x803e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     XOR              
 *     DETECT_1FE       
 *     BITERR_OVERFLOW  
 *     PRBS_STATE       
 *     PRBS_STKY        
 *     PRBS_LOCK        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr (0x0000803e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_SIZE 4

/*
 * This structure should be used to declare and program RX_STATUS_BITS.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_STATUS_BITSr_s {
	uint32_t v[1];
	uint32_t rx_status_bits[1];
	uint32_t _rx_status_bits;
} BCMI_QSGMII_SERDES_RX_STATUS_BITSr_t;

#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_CLR(r) (r).rx_status_bits[0] = 0
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_SET(r,d) (r).rx_status_bits[0] = d
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_GET(r) (r).rx_status_bits[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_LOCKf_GET(r) ((((r).rx_status_bits[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_LOCKf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STKYf_GET(r) ((((r).rx_status_bits[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STKYf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STATEf_GET(r) ((((r).rx_status_bits[0]) >> 11) & 0x7)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STATEf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_BITERR_OVERFLOWf_GET(r) ((((r).rx_status_bits[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_BITERR_OVERFLOWf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_DETECT_1FEf_GET(r) ((((r).rx_status_bits[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_DETECT_1FEf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_XORf_GET(r) (((r).rx_status_bits[0]) & 0x7)
#define BCMI_QSGMII_SERDES_RX_STATUS_BITSr_XORf_SET(r,f) (r).rx_status_bits[0]=(((r).rx_status_bits[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RX_STATUS_BITS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_STATUS_BITSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_STATUS_BITSr,(_r._rx_status_bits))
#define BCMI_QSGMII_SERDES_WRITE_RX_STATUS_BITSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_STATUS_BITSr,(_r._rx_status_bits))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_STATUS_BITSr BCMI_QSGMII_SERDES_RX_STATUS_BITSr
#define RX_STATUS_BITSr_SIZE BCMI_QSGMII_SERDES_RX_STATUS_BITSr_SIZE
typedef BCMI_QSGMII_SERDES_RX_STATUS_BITSr_t RX_STATUS_BITSr_t;
#define RX_STATUS_BITSr_CLR BCMI_QSGMII_SERDES_RX_STATUS_BITSr_CLR
#define RX_STATUS_BITSr_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_SET
#define RX_STATUS_BITSr_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_GET
#define RX_STATUS_BITSr_PRBS_LOCKf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_LOCKf_GET
#define RX_STATUS_BITSr_PRBS_LOCKf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_LOCKf_SET
#define RX_STATUS_BITSr_PRBS_STKYf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STKYf_GET
#define RX_STATUS_BITSr_PRBS_STKYf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STKYf_SET
#define RX_STATUS_BITSr_PRBS_STATEf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STATEf_GET
#define RX_STATUS_BITSr_PRBS_STATEf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_PRBS_STATEf_SET
#define RX_STATUS_BITSr_BITERR_OVERFLOWf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_BITERR_OVERFLOWf_GET
#define RX_STATUS_BITSr_BITERR_OVERFLOWf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_BITERR_OVERFLOWf_SET
#define RX_STATUS_BITSr_DETECT_1FEf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_DETECT_1FEf_GET
#define RX_STATUS_BITSr_DETECT_1FEf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_DETECT_1FEf_SET
#define RX_STATUS_BITSr_XORf_GET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_XORf_GET
#define RX_STATUS_BITSr_XORf_SET BCMI_QSGMII_SERDES_RX_STATUS_BITSr_XORf_SET
#define READ_RX_STATUS_BITSr BCMI_QSGMII_SERDES_READ_RX_STATUS_BITSr
#define WRITE_RX_STATUS_BITSr BCMI_QSGMII_SERDES_WRITE_RX_STATUS_BITSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_STATUS_BITSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_STATUS
 * BLOCKS:   PLL
 * REGADDR:  0x8050
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PLL_MODE_AFE     
 *     LOSTPLLLOCK_STKY 
 *     SLOWDN           
 *     AMPPASS          
 *     CAPPASS          
 *     FREQPASS         
 *     PLLSEQPASS       
 *     AMPDONE          
 *     CAPDONE          
 *     FREQDONE         
 *     PLLSEQDONE       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_STATUSr (0x00008050 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program PLL_STATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_STATUSr_s {
	uint32_t v[1];
	uint32_t pll_status[1];
	uint32_t _pll_status;
} BCMI_QSGMII_SERDES_PLL_STATUSr_t;

#define BCMI_QSGMII_SERDES_PLL_STATUSr_CLR(r) (r).pll_status[0] = 0
#define BCMI_QSGMII_SERDES_PLL_STATUSr_SET(r,d) (r).pll_status[0] = d
#define BCMI_QSGMII_SERDES_PLL_STATUSr_GET(r) (r).pll_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQDONEf_GET(r) ((((r).pll_status[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQDONEf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_FREQDONEf_GET(r) ((((r).pll_status[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_FREQDONEf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_CAPDONEf_GET(r) ((((r).pll_status[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_CAPDONEf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_AMPDONEf_GET(r) ((((r).pll_status[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_AMPDONEf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQPASSf_GET(r) ((((r).pll_status[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQPASSf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_FREQPASSf_GET(r) ((((r).pll_status[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_FREQPASSf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_CAPPASSf_GET(r) ((((r).pll_status[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_CAPPASSf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_AMPPASSf_GET(r) ((((r).pll_status[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_AMPPASSf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_SLOWDNf_GET(r) ((((r).pll_status[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_SLOWDNf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_LOSTPLLLOCK_STKYf_GET(r) ((((r).pll_status[0]) >> 4) & 0x7)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_LOSTPLLLOCK_STKYf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLL_MODE_AFEf_GET(r) (((r).pll_status[0]) & 0xf)
#define BCMI_QSGMII_SERDES_PLL_STATUSr_PLL_MODE_AFEf_SET(r,f) (r).pll_status[0]=(((r).pll_status[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PLL_STATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_STATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_STATUSr,(_r._pll_status))
#define BCMI_QSGMII_SERDES_WRITE_PLL_STATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_STATUSr,(_r._pll_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_STATUSr BCMI_QSGMII_SERDES_PLL_STATUSr
#define PLL_STATUSr_SIZE BCMI_QSGMII_SERDES_PLL_STATUSr_SIZE
typedef BCMI_QSGMII_SERDES_PLL_STATUSr_t PLL_STATUSr_t;
#define PLL_STATUSr_CLR BCMI_QSGMII_SERDES_PLL_STATUSr_CLR
#define PLL_STATUSr_SET BCMI_QSGMII_SERDES_PLL_STATUSr_SET
#define PLL_STATUSr_GET BCMI_QSGMII_SERDES_PLL_STATUSr_GET
#define PLL_STATUSr_PLLSEQDONEf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQDONEf_GET
#define PLL_STATUSr_PLLSEQDONEf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQDONEf_SET
#define PLL_STATUSr_FREQDONEf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_FREQDONEf_GET
#define PLL_STATUSr_FREQDONEf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_FREQDONEf_SET
#define PLL_STATUSr_CAPDONEf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_CAPDONEf_GET
#define PLL_STATUSr_CAPDONEf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_CAPDONEf_SET
#define PLL_STATUSr_AMPDONEf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_AMPDONEf_GET
#define PLL_STATUSr_AMPDONEf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_AMPDONEf_SET
#define PLL_STATUSr_PLLSEQPASSf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQPASSf_GET
#define PLL_STATUSr_PLLSEQPASSf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_PLLSEQPASSf_SET
#define PLL_STATUSr_FREQPASSf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_FREQPASSf_GET
#define PLL_STATUSr_FREQPASSf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_FREQPASSf_SET
#define PLL_STATUSr_CAPPASSf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_CAPPASSf_GET
#define PLL_STATUSr_CAPPASSf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_CAPPASSf_SET
#define PLL_STATUSr_AMPPASSf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_AMPPASSf_GET
#define PLL_STATUSr_AMPPASSf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_AMPPASSf_SET
#define PLL_STATUSr_SLOWDNf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_SLOWDNf_GET
#define PLL_STATUSr_SLOWDNf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_SLOWDNf_SET
#define PLL_STATUSr_LOSTPLLLOCK_STKYf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_LOSTPLLLOCK_STKYf_GET
#define PLL_STATUSr_LOSTPLLLOCK_STKYf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_LOSTPLLLOCK_STKYf_SET
#define PLL_STATUSr_PLL_MODE_AFEf_GET BCMI_QSGMII_SERDES_PLL_STATUSr_PLL_MODE_AFEf_GET
#define PLL_STATUSr_PLL_MODE_AFEf_SET BCMI_QSGMII_SERDES_PLL_STATUSr_PLL_MODE_AFEf_SET
#define READ_PLL_STATUSr BCMI_QSGMII_SERDES_READ_PLL_STATUSr
#define WRITE_PLL_STATUSr BCMI_QSGMII_SERDES_WRITE_PLL_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_CONTROL
 * BLOCKS:   PLL
 * REGADDR:  0x8051
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PLLFORCELOCK     
 *     PLLFORCECPAPASS  
 *     PLLFORCECAPPASS_EN 
 *     PLLFORCECAPDONE  
 *     PLLFORCECAPDONE_EN 
 *     PLLFORCEPASS     
 *     PLLFORCEDONE     
 *     PLLFORCEDONE_EN  
 *     BYTESYNCRESTART_EN 
 *     LINKRESTART_EN   
 *     VCODONE_EN       
 *     CAPRETRY_EN      
 *     FREQMONITOR_EN   
 *     FREQDETRESTART_EN 
 *     FREQDETRETRY_EN  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_CONTROLr (0x00008051 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PLL_CONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_CONTROLr_s {
	uint32_t v[1];
	uint32_t pll_control[1];
	uint32_t _pll_control;
} BCMI_QSGMII_SERDES_PLL_CONTROLr_t;

#define BCMI_QSGMII_SERDES_PLL_CONTROLr_CLR(r) (r).pll_control[0] = 0
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_SET(r,d) (r).pll_control[0] = d
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_GET(r) (r).pll_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRETRY_ENf_GET(r) ((((r).pll_control[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRETRY_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRESTART_ENf_GET(r) ((((r).pll_control[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRESTART_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQMONITOR_ENf_GET(r) ((((r).pll_control[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQMONITOR_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_CAPRETRY_ENf_GET(r) ((((r).pll_control[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_CAPRETRY_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_VCODONE_ENf_GET(r) ((((r).pll_control[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_VCODONE_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_LINKRESTART_ENf_GET(r) ((((r).pll_control[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_LINKRESTART_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_BYTESYNCRESTART_ENf_GET(r) ((((r).pll_control[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_BYTESYNCRESTART_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONE_ENf_GET(r) ((((r).pll_control[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONE_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONEf_GET(r) ((((r).pll_control[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONEf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEPASSf_GET(r) ((((r).pll_control[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEPASSf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONE_ENf_GET(r) ((((r).pll_control[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONE_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONEf_GET(r) ((((r).pll_control[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONEf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPPASS_ENf_GET(r) ((((r).pll_control[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPPASS_ENf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECPAPASSf_GET(r) ((((r).pll_control[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECPAPASSf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCELOCKf_GET(r) (((r).pll_control[0]) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCELOCKf_SET(r,f) (r).pll_control[0]=(((r).pll_control[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PLL_CONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_CONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_CONTROLr,(_r._pll_control))
#define BCMI_QSGMII_SERDES_WRITE_PLL_CONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_CONTROLr,(_r._pll_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_CONTROLr BCMI_QSGMII_SERDES_PLL_CONTROLr
#define PLL_CONTROLr_SIZE BCMI_QSGMII_SERDES_PLL_CONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_PLL_CONTROLr_t PLL_CONTROLr_t;
#define PLL_CONTROLr_CLR BCMI_QSGMII_SERDES_PLL_CONTROLr_CLR
#define PLL_CONTROLr_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_SET
#define PLL_CONTROLr_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_GET
#define PLL_CONTROLr_FREQDETRETRY_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRETRY_ENf_GET
#define PLL_CONTROLr_FREQDETRETRY_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRETRY_ENf_SET
#define PLL_CONTROLr_FREQDETRESTART_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRESTART_ENf_GET
#define PLL_CONTROLr_FREQDETRESTART_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQDETRESTART_ENf_SET
#define PLL_CONTROLr_FREQMONITOR_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQMONITOR_ENf_GET
#define PLL_CONTROLr_FREQMONITOR_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_FREQMONITOR_ENf_SET
#define PLL_CONTROLr_CAPRETRY_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_CAPRETRY_ENf_GET
#define PLL_CONTROLr_CAPRETRY_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_CAPRETRY_ENf_SET
#define PLL_CONTROLr_VCODONE_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_VCODONE_ENf_GET
#define PLL_CONTROLr_VCODONE_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_VCODONE_ENf_SET
#define PLL_CONTROLr_LINKRESTART_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_LINKRESTART_ENf_GET
#define PLL_CONTROLr_LINKRESTART_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_LINKRESTART_ENf_SET
#define PLL_CONTROLr_BYTESYNCRESTART_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_BYTESYNCRESTART_ENf_GET
#define PLL_CONTROLr_BYTESYNCRESTART_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_BYTESYNCRESTART_ENf_SET
#define PLL_CONTROLr_PLLFORCEDONE_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONE_ENf_GET
#define PLL_CONTROLr_PLLFORCEDONE_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONE_ENf_SET
#define PLL_CONTROLr_PLLFORCEDONEf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONEf_GET
#define PLL_CONTROLr_PLLFORCEDONEf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEDONEf_SET
#define PLL_CONTROLr_PLLFORCEPASSf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEPASSf_GET
#define PLL_CONTROLr_PLLFORCEPASSf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCEPASSf_SET
#define PLL_CONTROLr_PLLFORCECAPDONE_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONE_ENf_GET
#define PLL_CONTROLr_PLLFORCECAPDONE_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONE_ENf_SET
#define PLL_CONTROLr_PLLFORCECAPDONEf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONEf_GET
#define PLL_CONTROLr_PLLFORCECAPDONEf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPDONEf_SET
#define PLL_CONTROLr_PLLFORCECAPPASS_ENf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPPASS_ENf_GET
#define PLL_CONTROLr_PLLFORCECAPPASS_ENf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECAPPASS_ENf_SET
#define PLL_CONTROLr_PLLFORCECPAPASSf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECPAPASSf_GET
#define PLL_CONTROLr_PLLFORCECPAPASSf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCECPAPASSf_SET
#define PLL_CONTROLr_PLLFORCELOCKf_GET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCELOCKf_GET
#define PLL_CONTROLr_PLLFORCELOCKf_SET BCMI_QSGMII_SERDES_PLL_CONTROLr_PLLFORCELOCKf_SET
#define READ_PLL_CONTROLr BCMI_QSGMII_SERDES_READ_PLL_CONTROLr
#define WRITE_PLL_CONTROLr BCMI_QSGMII_SERDES_WRITE_PLL_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_TIMER_1
 * BLOCKS:   PLL
 * REGADDR:  0x8052
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     VCOSTARTTIME     
 *     VCOSTEPTIME      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r (0x00008052 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_SIZE 4

/*
 * This structure should be used to declare and program PLL_TIMER_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_TIMER_1r_s {
	uint32_t v[1];
	uint32_t pll_timer_1[1];
	uint32_t _pll_timer_1;
} BCMI_QSGMII_SERDES_PLL_TIMER_1r_t;

#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_CLR(r) (r).pll_timer_1[0] = 0
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_SET(r,d) (r).pll_timer_1[0] = d
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_GET(r) (r).pll_timer_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTEPTIMEf_GET(r) ((((r).pll_timer_1[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTEPTIMEf_SET(r,f) (r).pll_timer_1[0]=(((r).pll_timer_1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTARTTIMEf_GET(r) (((r).pll_timer_1[0]) & 0xff)
#define BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTARTTIMEf_SET(r,f) (r).pll_timer_1[0]=(((r).pll_timer_1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PLL_TIMER_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_TIMER_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_1r,(_r._pll_timer_1))
#define BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_1r,(_r._pll_timer_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_TIMER_1r BCMI_QSGMII_SERDES_PLL_TIMER_1r
#define PLL_TIMER_1r_SIZE BCMI_QSGMII_SERDES_PLL_TIMER_1r_SIZE
typedef BCMI_QSGMII_SERDES_PLL_TIMER_1r_t PLL_TIMER_1r_t;
#define PLL_TIMER_1r_CLR BCMI_QSGMII_SERDES_PLL_TIMER_1r_CLR
#define PLL_TIMER_1r_SET BCMI_QSGMII_SERDES_PLL_TIMER_1r_SET
#define PLL_TIMER_1r_GET BCMI_QSGMII_SERDES_PLL_TIMER_1r_GET
#define PLL_TIMER_1r_VCOSTEPTIMEf_GET BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTEPTIMEf_GET
#define PLL_TIMER_1r_VCOSTEPTIMEf_SET BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTEPTIMEf_SET
#define PLL_TIMER_1r_VCOSTARTTIMEf_GET BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTARTTIMEf_GET
#define PLL_TIMER_1r_VCOSTARTTIMEf_SET BCMI_QSGMII_SERDES_PLL_TIMER_1r_VCOSTARTTIMEf_SET
#define READ_PLL_TIMER_1r BCMI_QSGMII_SERDES_READ_PLL_TIMER_1r
#define WRITE_PLL_TIMER_1r BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_TIMER_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_TIMER_2
 * BLOCKS:   PLL
 * REGADDR:  0x8053
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RETRYTIME        
 *     TESTMUXSEL       
 *     LFCKSINGLESTEP   
 *     LFCKSINGLESTEP_EN 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r (0x00008053 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_TIMER_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_TIMER_2r_s {
	uint32_t v[1];
	uint32_t pll_timer_2[1];
	uint32_t _pll_timer_2;
} BCMI_QSGMII_SERDES_PLL_TIMER_2r_t;

#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_CLR(r) (r).pll_timer_2[0] = 0
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_SET(r,d) (r).pll_timer_2[0] = d
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_GET(r) (r).pll_timer_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEP_ENf_GET(r) ((((r).pll_timer_2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEP_ENf_SET(r,f) (r).pll_timer_2[0]=(((r).pll_timer_2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEPf_GET(r) ((((r).pll_timer_2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEPf_SET(r,f) (r).pll_timer_2[0]=(((r).pll_timer_2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_TESTMUXSELf_GET(r) ((((r).pll_timer_2[0]) >> 8) & 0x1f)
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_TESTMUXSELf_SET(r,f) (r).pll_timer_2[0]=(((r).pll_timer_2[0] & ~((uint32_t)0x1f << 8)) | ((((uint32_t)f) & 0x1f) << 8))
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_RETRYTIMEf_GET(r) (((r).pll_timer_2[0]) & 0xff)
#define BCMI_QSGMII_SERDES_PLL_TIMER_2r_RETRYTIMEf_SET(r,f) (r).pll_timer_2[0]=(((r).pll_timer_2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PLL_TIMER_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_TIMER_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_2r,(_r._pll_timer_2))
#define BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_2r,(_r._pll_timer_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_TIMER_2r BCMI_QSGMII_SERDES_PLL_TIMER_2r
#define PLL_TIMER_2r_SIZE BCMI_QSGMII_SERDES_PLL_TIMER_2r_SIZE
typedef BCMI_QSGMII_SERDES_PLL_TIMER_2r_t PLL_TIMER_2r_t;
#define PLL_TIMER_2r_CLR BCMI_QSGMII_SERDES_PLL_TIMER_2r_CLR
#define PLL_TIMER_2r_SET BCMI_QSGMII_SERDES_PLL_TIMER_2r_SET
#define PLL_TIMER_2r_GET BCMI_QSGMII_SERDES_PLL_TIMER_2r_GET
#define PLL_TIMER_2r_LFCKSINGLESTEP_ENf_GET BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEP_ENf_GET
#define PLL_TIMER_2r_LFCKSINGLESTEP_ENf_SET BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEP_ENf_SET
#define PLL_TIMER_2r_LFCKSINGLESTEPf_GET BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEPf_GET
#define PLL_TIMER_2r_LFCKSINGLESTEPf_SET BCMI_QSGMII_SERDES_PLL_TIMER_2r_LFCKSINGLESTEPf_SET
#define PLL_TIMER_2r_TESTMUXSELf_GET BCMI_QSGMII_SERDES_PLL_TIMER_2r_TESTMUXSELf_GET
#define PLL_TIMER_2r_TESTMUXSELf_SET BCMI_QSGMII_SERDES_PLL_TIMER_2r_TESTMUXSELf_SET
#define PLL_TIMER_2r_RETRYTIMEf_GET BCMI_QSGMII_SERDES_PLL_TIMER_2r_RETRYTIMEf_GET
#define PLL_TIMER_2r_RETRYTIMEf_SET BCMI_QSGMII_SERDES_PLL_TIMER_2r_RETRYTIMEf_SET
#define READ_PLL_TIMER_2r BCMI_QSGMII_SERDES_READ_PLL_TIMER_2r
#define WRITE_PLL_TIMER_2r BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_TIMER_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_TIMER_3
 * BLOCKS:   PLL
 * REGADDR:  0x8054
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FREQDETTIME      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_TIMER_3r (0x00008054 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_SIZE 4

/*
 * This structure should be used to declare and program PLL_TIMER_3.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_TIMER_3r_s {
	uint32_t v[1];
	uint32_t pll_timer_3[1];
	uint32_t _pll_timer_3;
} BCMI_QSGMII_SERDES_PLL_TIMER_3r_t;

#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_CLR(r) (r).pll_timer_3[0] = 0
#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_SET(r,d) (r).pll_timer_3[0] = d
#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_GET(r) (r).pll_timer_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_FREQDETTIMEf_GET(r) (((r).pll_timer_3[0]) & 0xff)
#define BCMI_QSGMII_SERDES_PLL_TIMER_3r_FREQDETTIMEf_SET(r,f) (r).pll_timer_3[0]=(((r).pll_timer_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access PLL_TIMER_3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_TIMER_3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_3r,(_r._pll_timer_3))
#define BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_TIMER_3r,(_r._pll_timer_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_TIMER_3r BCMI_QSGMII_SERDES_PLL_TIMER_3r
#define PLL_TIMER_3r_SIZE BCMI_QSGMII_SERDES_PLL_TIMER_3r_SIZE
typedef BCMI_QSGMII_SERDES_PLL_TIMER_3r_t PLL_TIMER_3r_t;
#define PLL_TIMER_3r_CLR BCMI_QSGMII_SERDES_PLL_TIMER_3r_CLR
#define PLL_TIMER_3r_SET BCMI_QSGMII_SERDES_PLL_TIMER_3r_SET
#define PLL_TIMER_3r_GET BCMI_QSGMII_SERDES_PLL_TIMER_3r_GET
#define PLL_TIMER_3r_FREQDETTIMEf_GET BCMI_QSGMII_SERDES_PLL_TIMER_3r_FREQDETTIMEf_GET
#define PLL_TIMER_3r_FREQDETTIMEf_SET BCMI_QSGMII_SERDES_PLL_TIMER_3r_FREQDETTIMEf_SET
#define READ_PLL_TIMER_3r BCMI_QSGMII_SERDES_READ_PLL_TIMER_3r
#define WRITE_PLL_TIMER_3r BCMI_QSGMII_SERDES_WRITE_PLL_TIMER_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_TIMER_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CAP_CONTROL
 * BLOCKS:   PLL
 * REGADDR:  0x8055
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CAPSELECTM_CAPSELECT 
 *     CAPFORCESLOWDN_SLOWDN 
 *     SLOWDN_XOR       
 *     CAPFORCESLOWDN_EN 
 *     CAPSELECTM_EN    
 *     CAPRESTART       
 *     CONTROL_STATUS   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CAP_CONTROLr (0x00008055 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CAP_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CAP_CONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_CAP_CONTROLr_s {
	uint32_t v[1];
	uint32_t cap_control[1];
	uint32_t _cap_control;
} BCMI_QSGMII_SERDES_CAP_CONTROLr_t;

#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CLR(r) (r).cap_control[0] = 0
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_SET(r,d) (r).cap_control[0] = d
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_GET(r) (r).cap_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CONTROL_STATUSf_GET(r) ((((r).cap_control[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CONTROL_STATUSf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPRESTARTf_GET(r) ((((r).cap_control[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPRESTARTf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_ENf_GET(r) ((((r).cap_control[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_ENf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_ENf_GET(r) ((((r).cap_control[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_ENf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_SLOWDN_XORf_GET(r) ((((r).cap_control[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_SLOWDN_XORf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_GET(r) ((((r).cap_control[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_CAPSELECTf_GET(r) (((r).cap_control[0]) & 0x7f)
#define BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_CAPSELECTf_SET(r,f) (r).cap_control[0]=(((r).cap_control[0] & ~((uint32_t)0x7f)) | (((uint32_t)f) & 0x7f))

/*
 * These macros can be used to access CAP_CONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CAP_CONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CAP_CONTROLr,(_r._cap_control))
#define BCMI_QSGMII_SERDES_WRITE_CAP_CONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CAP_CONTROLr,(_r._cap_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CAP_CONTROLr BCMI_QSGMII_SERDES_CAP_CONTROLr
#define CAP_CONTROLr_SIZE BCMI_QSGMII_SERDES_CAP_CONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_CAP_CONTROLr_t CAP_CONTROLr_t;
#define CAP_CONTROLr_CLR BCMI_QSGMII_SERDES_CAP_CONTROLr_CLR
#define CAP_CONTROLr_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_SET
#define CAP_CONTROLr_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_GET
#define CAP_CONTROLr_CONTROL_STATUSf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CONTROL_STATUSf_GET
#define CAP_CONTROLr_CONTROL_STATUSf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CONTROL_STATUSf_SET
#define CAP_CONTROLr_CAPRESTARTf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPRESTARTf_GET
#define CAP_CONTROLr_CAPRESTARTf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPRESTARTf_SET
#define CAP_CONTROLr_CAPSELECTM_ENf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_ENf_GET
#define CAP_CONTROLr_CAPSELECTM_ENf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_ENf_SET
#define CAP_CONTROLr_CAPFORCESLOWDN_ENf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_ENf_GET
#define CAP_CONTROLr_CAPFORCESLOWDN_ENf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_ENf_SET
#define CAP_CONTROLr_SLOWDN_XORf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_SLOWDN_XORf_GET
#define CAP_CONTROLr_SLOWDN_XORf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_SLOWDN_XORf_SET
#define CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_GET
#define CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPFORCESLOWDN_SLOWDNf_SET
#define CAP_CONTROLr_CAPSELECTM_CAPSELECTf_GET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_CAPSELECTf_GET
#define CAP_CONTROLr_CAPSELECTM_CAPSELECTf_SET BCMI_QSGMII_SERDES_CAP_CONTROLr_CAPSELECTM_CAPSELECTf_SET
#define READ_CAP_CONTROLr BCMI_QSGMII_SERDES_READ_CAP_CONTROLr
#define WRITE_CAP_CONTROLr BCMI_QSGMII_SERDES_WRITE_CAP_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CAP_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AMP_CONTROL
 * BLOCKS:   PLL
 * REGADDR:  0x8056
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AMPFORCESELECTM_SELECTM 
 *     AMPFORCEABOVEVSS_ABOVEVSS 
 *     AMPFORCEBELOWVDD_BELOWVDD 
 *     FOCRE_PLL_MODE_AFE_REMAP 
 *     FOCRE_PLL_MODE_AFE_REMAP_SEL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AMP_CONTROLr (0x00008056 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AMP_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program AMP_CONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_AMP_CONTROLr_s {
	uint32_t v[1];
	uint32_t amp_control[1];
	uint32_t _amp_control;
} BCMI_QSGMII_SERDES_AMP_CONTROLr_t;

#define BCMI_QSGMII_SERDES_AMP_CONTROLr_CLR(r) (r).amp_control[0] = 0
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_SET(r,d) (r).amp_control[0] = d
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_GET(r) (r).amp_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_GET(r) ((((r).amp_control[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_SET(r,f) (r).amp_control[0]=(((r).amp_control[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_GET(r) ((((r).amp_control[0]) >> 10) & 0x1f)
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_SET(r,f) (r).amp_control[0]=(((r).amp_control[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_GET(r) ((((r).amp_control[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_SET(r,f) (r).amp_control[0]=(((r).amp_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_GET(r) ((((r).amp_control[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_SET(r,f) (r).amp_control[0]=(((r).amp_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_GET(r) (((r).amp_control[0]) & 0x7)
#define BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_SET(r,f) (r).amp_control[0]=(((r).amp_control[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access AMP_CONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AMP_CONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AMP_CONTROLr,(_r._amp_control))
#define BCMI_QSGMII_SERDES_WRITE_AMP_CONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AMP_CONTROLr,(_r._amp_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AMP_CONTROLr BCMI_QSGMII_SERDES_AMP_CONTROLr
#define AMP_CONTROLr_SIZE BCMI_QSGMII_SERDES_AMP_CONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_AMP_CONTROLr_t AMP_CONTROLr_t;
#define AMP_CONTROLr_CLR BCMI_QSGMII_SERDES_AMP_CONTROLr_CLR
#define AMP_CONTROLr_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_SET
#define AMP_CONTROLr_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_GET
#define AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_GET
#define AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAP_SELf_SET
#define AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_GET
#define AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_FOCRE_PLL_MODE_AFE_REMAPf_SET
#define AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_GET
#define AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEBELOWVDD_BELOWVDDf_SET
#define AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_GET
#define AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCEABOVEVSS_ABOVEVSSf_SET
#define AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_GET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_GET
#define AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_SET BCMI_QSGMII_SERDES_AMP_CONTROLr_AMPFORCESELECTM_SELECTMf_SET
#define READ_AMP_CONTROLr BCMI_QSGMII_SERDES_READ_AMP_CONTROLr
#define WRITE_AMP_CONTROLr BCMI_QSGMII_SERDES_WRITE_AMP_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AMP_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  FREQ_DET_COUNTER
 * BLOCKS:   PLL
 * REGADDR:  0x8057
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     WINDOW           
 *     RESOLUTION       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr (0x00008057 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_SIZE 4

/*
 * This structure should be used to declare and program FREQ_DET_COUNTER.
 *
 */
typedef union BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_s {
	uint32_t v[1];
	uint32_t freq_det_counter[1];
	uint32_t _freq_det_counter;
} BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_t;

#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_CLR(r) (r).freq_det_counter[0] = 0
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_SET(r,d) (r).freq_det_counter[0] = d
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_GET(r) (r).freq_det_counter[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_RESOLUTIONf_GET(r) ((((r).freq_det_counter[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_RESOLUTIONf_SET(r,f) (r).freq_det_counter[0]=(((r).freq_det_counter[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_WINDOWf_GET(r) (((r).freq_det_counter[0]) & 0xff)
#define BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_WINDOWf_SET(r,f) (r).freq_det_counter[0]=(((r).freq_det_counter[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access FREQ_DET_COUNTER.
 *
 */
#define BCMI_QSGMII_SERDES_READ_FREQ_DET_COUNTERr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr,(_r._freq_det_counter))
#define BCMI_QSGMII_SERDES_WRITE_FREQ_DET_COUNTERr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr,(_r._freq_det_counter))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define FREQ_DET_COUNTERr BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr
#define FREQ_DET_COUNTERr_SIZE BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_SIZE
typedef BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_t FREQ_DET_COUNTERr_t;
#define FREQ_DET_COUNTERr_CLR BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_CLR
#define FREQ_DET_COUNTERr_SET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_SET
#define FREQ_DET_COUNTERr_GET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_GET
#define FREQ_DET_COUNTERr_RESOLUTIONf_GET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_RESOLUTIONf_GET
#define FREQ_DET_COUNTERr_RESOLUTIONf_SET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_RESOLUTIONf_SET
#define FREQ_DET_COUNTERr_WINDOWf_GET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_WINDOWf_GET
#define FREQ_DET_COUNTERr_WINDOWf_SET BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr_WINDOWf_SET
#define READ_FREQ_DET_COUNTERr BCMI_QSGMII_SERDES_READ_FREQ_DET_COUNTERr
#define WRITE_FREQ_DET_COUNTERr BCMI_QSGMII_SERDES_WRITE_FREQ_DET_COUNTERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_FREQ_DET_COUNTERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_ASTATUS_1
 * BLOCKS:   PLL
 * REGADDR:  0x8058
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PLL_DIV          
 *     PLL_LOW          
 *     PLL_RANGE        
 *     PLL_2RXCLKBW     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r (0x00008058 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program PLL_ASTATUS_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_s {
	uint32_t v[1];
	uint32_t pll_astatus_1[1];
	uint32_t _pll_astatus_1;
} BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_t;

#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_CLR(r) (r).pll_astatus_1[0] = 0
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_SET(r,d) (r).pll_astatus_1[0] = d
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_GET(r) (r).pll_astatus_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_2RXCLKBWf_GET(r) ((((r).pll_astatus_1[0]) >> 13) & 0x7)
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_2RXCLKBWf_SET(r,f) (r).pll_astatus_1[0]=(((r).pll_astatus_1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_RANGEf_GET(r) ((((r).pll_astatus_1[0]) >> 6) & 0xf)
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_RANGEf_SET(r,f) (r).pll_astatus_1[0]=(((r).pll_astatus_1[0] & ~((uint32_t)0xf << 6)) | ((((uint32_t)f) & 0xf) << 6))
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_LOWf_GET(r) ((((r).pll_astatus_1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_LOWf_SET(r,f) (r).pll_astatus_1[0]=(((r).pll_astatus_1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_DIVf_GET(r) (((r).pll_astatus_1[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_DIVf_SET(r,f) (r).pll_astatus_1[0]=(((r).pll_astatus_1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access PLL_ASTATUS_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_ASTATUS_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_ASTATUS_1r,(_r._pll_astatus_1))
#define BCMI_QSGMII_SERDES_WRITE_PLL_ASTATUS_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_ASTATUS_1r,(_r._pll_astatus_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_ASTATUS_1r BCMI_QSGMII_SERDES_PLL_ASTATUS_1r
#define PLL_ASTATUS_1r_SIZE BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_SIZE
typedef BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_t PLL_ASTATUS_1r_t;
#define PLL_ASTATUS_1r_CLR BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_CLR
#define PLL_ASTATUS_1r_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_SET
#define PLL_ASTATUS_1r_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_GET
#define PLL_ASTATUS_1r_PLL_2RXCLKBWf_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_2RXCLKBWf_GET
#define PLL_ASTATUS_1r_PLL_2RXCLKBWf_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_2RXCLKBWf_SET
#define PLL_ASTATUS_1r_PLL_RANGEf_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_RANGEf_GET
#define PLL_ASTATUS_1r_PLL_RANGEf_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_RANGEf_SET
#define PLL_ASTATUS_1r_PLL_LOWf_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_LOWf_GET
#define PLL_ASTATUS_1r_PLL_LOWf_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_LOWf_SET
#define PLL_ASTATUS_1r_PLL_DIVf_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_DIVf_GET
#define PLL_ASTATUS_1r_PLL_DIVf_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_1r_PLL_DIVf_SET
#define READ_PLL_ASTATUS_1r BCMI_QSGMII_SERDES_READ_PLL_ASTATUS_1r
#define WRITE_PLL_ASTATUS_1r BCMI_QSGMII_SERDES_WRITE_PLL_ASTATUS_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_ASTATUS_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PLL_ASTATUS_2
 * BLOCKS:   PLL
 * REGADDR:  0x8059
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RESERVED         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r (0x00008059 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_SIZE 4

/*
 * This structure should be used to declare and program PLL_ASTATUS_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_s {
	uint32_t v[1];
	uint32_t pll_astatus_2[1];
	uint32_t _pll_astatus_2;
} BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_t;

#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_CLR(r) (r).pll_astatus_2[0] = 0
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_SET(r,d) (r).pll_astatus_2[0] = d
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_GET(r) (r).pll_astatus_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_RESERVEDf_GET(r) (((r).pll_astatus_2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_RESERVEDf_SET(r,f) (r).pll_astatus_2[0]=(((r).pll_astatus_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PLL_ASTATUS_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PLL_ASTATUS_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PLL_ASTATUS_2r,(_r._pll_astatus_2))
#define BCMI_QSGMII_SERDES_WRITE_PLL_ASTATUS_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PLL_ASTATUS_2r,(_r._pll_astatus_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PLL_ASTATUS_2r BCMI_QSGMII_SERDES_PLL_ASTATUS_2r
#define PLL_ASTATUS_2r_SIZE BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_SIZE
typedef BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_t PLL_ASTATUS_2r_t;
#define PLL_ASTATUS_2r_CLR BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_CLR
#define PLL_ASTATUS_2r_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_SET
#define PLL_ASTATUS_2r_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_GET
#define PLL_ASTATUS_2r_RESERVEDf_GET BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_RESERVEDf_GET
#define PLL_ASTATUS_2r_RESERVEDf_SET BCMI_QSGMII_SERDES_PLL_ASTATUS_2r_RESERVEDf_SET
#define READ_PLL_ASTATUS_2r BCMI_QSGMII_SERDES_READ_PLL_ASTATUS_2r
#define WRITE_PLL_ASTATUS_2r BCMI_QSGMII_SERDES_WRITE_PLL_ASTATUS_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PLL_ASTATUS_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANAPLLACONTROL0
 * BLOCKS:   PLL
 * REGADDR:  0x805a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RESERVED         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r (0x0000805a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL0.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_s {
	uint32_t v[1];
	uint32_t anapllacontrol0[1];
	uint32_t _anapllacontrol0;
} BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_t;

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_CLR(r) (r).anapllacontrol0[0] = 0
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_SET(r,d) (r).anapllacontrol0[0] = d
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_GET(r) (r).anapllacontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_RESERVEDf_GET(r) (((r).anapllacontrol0[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_RESERVEDf_SET(r,f) (r).anapllacontrol0[0]=(((r).anapllacontrol0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANAPLLACONTROL0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL0r,(_r._anapllacontrol0))
#define BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL0r,(_r._anapllacontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL0r BCMI_QSGMII_SERDES_ANAPLLACONTROL0r
#define ANAPLLACONTROL0r_SIZE BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_SIZE
typedef BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_t ANAPLLACONTROL0r_t;
#define ANAPLLACONTROL0r_CLR BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_CLR
#define ANAPLLACONTROL0r_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_SET
#define ANAPLLACONTROL0r_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_GET
#define ANAPLLACONTROL0r_RESERVEDf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_RESERVEDf_GET
#define ANAPLLACONTROL0r_RESERVEDf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL0r_RESERVEDf_SET
#define READ_ANAPLLACONTROL0r BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL0r
#define WRITE_ANAPLLACONTROL0r BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANAPLLACONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANAPLLACONTROL1
 * BLOCKS:   PLL
 * REGADDR:  0x805b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_TCLK_SEL      
 *     OP_DRAIN_ENB     
 *     PLL_0P9_V_ENB    
 *     PLL_VCOOASB_ENB  
 *     PLL_STUP_ENB     
 *     PLL_RESET        
 *     FTUNE_ENB        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r (0x0000805b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_s {
	uint32_t v[1];
	uint32_t anapllacontrol1[1];
	uint32_t _anapllacontrol1;
} BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_t;

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_CLR(r) (r).anapllacontrol1[0] = 0
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_SET(r,d) (r).anapllacontrol1[0] = d
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_GET(r) (r).anapllacontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_FTUNE_ENBf_GET(r) ((((r).anapllacontrol1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_FTUNE_ENBf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_RESETf_GET(r) ((((r).anapllacontrol1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_RESETf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_STUP_ENBf_GET(r) ((((r).anapllacontrol1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_STUP_ENBf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_GET(r) ((((r).anapllacontrol1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_0P9_V_ENBf_GET(r) ((((r).anapllacontrol1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_0P9_V_ENBf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_OP_DRAIN_ENBf_GET(r) ((((r).anapllacontrol1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_OP_DRAIN_ENBf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_RX_TCLK_SELf_GET(r) ((((r).anapllacontrol1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_RX_TCLK_SELf_SET(r,f) (r).anapllacontrol1[0]=(((r).anapllacontrol1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))

/*
 * These macros can be used to access ANAPLLACONTROL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL1r,(_r._anapllacontrol1))
#define BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL1r,(_r._anapllacontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL1r BCMI_QSGMII_SERDES_ANAPLLACONTROL1r
#define ANAPLLACONTROL1r_SIZE BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_SIZE
typedef BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_t ANAPLLACONTROL1r_t;
#define ANAPLLACONTROL1r_CLR BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_CLR
#define ANAPLLACONTROL1r_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_SET
#define ANAPLLACONTROL1r_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_GET
#define ANAPLLACONTROL1r_FTUNE_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_FTUNE_ENBf_GET
#define ANAPLLACONTROL1r_FTUNE_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_FTUNE_ENBf_SET
#define ANAPLLACONTROL1r_PLL_RESETf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_RESETf_GET
#define ANAPLLACONTROL1r_PLL_RESETf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_RESETf_SET
#define ANAPLLACONTROL1r_PLL_STUP_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_STUP_ENBf_GET
#define ANAPLLACONTROL1r_PLL_STUP_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_STUP_ENBf_SET
#define ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_GET
#define ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_VCOOASB_ENBf_SET
#define ANAPLLACONTROL1r_PLL_0P9_V_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_0P9_V_ENBf_GET
#define ANAPLLACONTROL1r_PLL_0P9_V_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_PLL_0P9_V_ENBf_SET
#define ANAPLLACONTROL1r_OP_DRAIN_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_OP_DRAIN_ENBf_GET
#define ANAPLLACONTROL1r_OP_DRAIN_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_OP_DRAIN_ENBf_SET
#define ANAPLLACONTROL1r_RX_TCLK_SELf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_RX_TCLK_SELf_GET
#define ANAPLLACONTROL1r_RX_TCLK_SELf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL1r_RX_TCLK_SELf_SET
#define READ_ANAPLLACONTROL1r BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL1r
#define WRITE_ANAPLLACONTROL1r BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANAPLLACONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANAPLLACONTROL2
 * BLOCKS:   PLL
 * REGADDR:  0x805c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     HRZ_ENB          
 *     IQP              
 *     REFL_PLL         
 *     REFH_PLL         
 *     IBMIN            
 *     IBMODE           
 *     IBMAX            
 *     ICP              
 *     ICK              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r (0x0000805c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_s {
	uint32_t v[1];
	uint32_t anapllacontrol2[1];
	uint32_t _anapllacontrol2;
} BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_t;

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_CLR(r) (r).anapllacontrol2[0] = 0
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_SET(r,d) (r).anapllacontrol2[0] = d
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_GET(r) (r).anapllacontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICKf_GET(r) ((((r).anapllacontrol2[0]) >> 13) & 0x7)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICKf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICPf_GET(r) ((((r).anapllacontrol2[0]) >> 10) & 0x7)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICPf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMAXf_GET(r) ((((r).anapllacontrol2[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMAXf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMODEf_GET(r) ((((r).anapllacontrol2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMODEf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMINf_GET(r) ((((r).anapllacontrol2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMINf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFH_PLLf_GET(r) ((((r).anapllacontrol2[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFH_PLLf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFL_PLLf_GET(r) ((((r).anapllacontrol2[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFL_PLLf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IQPf_GET(r) ((((r).anapllacontrol2[0]) >> 1) & 0xf)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IQPf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0xf << 1)) | ((((uint32_t)f) & 0xf) << 1))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_HRZ_ENBf_GET(r) (((r).anapllacontrol2[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_HRZ_ENBf_SET(r,f) (r).anapllacontrol2[0]=(((r).anapllacontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL2r,(_r._anapllacontrol2))
#define BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL2r,(_r._anapllacontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL2r BCMI_QSGMII_SERDES_ANAPLLACONTROL2r
#define ANAPLLACONTROL2r_SIZE BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_SIZE
typedef BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_t ANAPLLACONTROL2r_t;
#define ANAPLLACONTROL2r_CLR BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_CLR
#define ANAPLLACONTROL2r_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_SET
#define ANAPLLACONTROL2r_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_GET
#define ANAPLLACONTROL2r_ICKf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICKf_GET
#define ANAPLLACONTROL2r_ICKf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICKf_SET
#define ANAPLLACONTROL2r_ICPf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICPf_GET
#define ANAPLLACONTROL2r_ICPf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_ICPf_SET
#define ANAPLLACONTROL2r_IBMAXf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMAXf_GET
#define ANAPLLACONTROL2r_IBMAXf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMAXf_SET
#define ANAPLLACONTROL2r_IBMODEf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMODEf_GET
#define ANAPLLACONTROL2r_IBMODEf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMODEf_SET
#define ANAPLLACONTROL2r_IBMINf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMINf_GET
#define ANAPLLACONTROL2r_IBMINf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IBMINf_SET
#define ANAPLLACONTROL2r_REFH_PLLf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFH_PLLf_GET
#define ANAPLLACONTROL2r_REFH_PLLf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFH_PLLf_SET
#define ANAPLLACONTROL2r_REFL_PLLf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFL_PLLf_GET
#define ANAPLLACONTROL2r_REFL_PLLf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_REFL_PLLf_SET
#define ANAPLLACONTROL2r_IQPf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IQPf_GET
#define ANAPLLACONTROL2r_IQPf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_IQPf_SET
#define ANAPLLACONTROL2r_HRZ_ENBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_HRZ_ENBf_GET
#define ANAPLLACONTROL2r_HRZ_ENBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL2r_HRZ_ENBf_SET
#define READ_ANAPLLACONTROL2r BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL2r
#define WRITE_ANAPLLACONTROL2r BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANAPLLACONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANAPLLACONTROL3
 * BLOCKS:   PLL
 * REGADDR:  0x805d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IVCO_1           
 *     IVCO_0           
 *     IVCO_2           
 *     ICM_1            
 *     ICM_0            
 *     ICM_2            
 *     ICOMP_1          
 *     ICOMP_0          
 *     ICOMP_2          
 *     ITEST_1          
 *     ITEST_0          
 *     ITEST_2          
 *     TEST_VREF        
 *     TEST_VC          
 *     TEST_PLL         
 *     TEST_RX          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r (0x0000805d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL3.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_s {
	uint32_t v[1];
	uint32_t anapllacontrol3[1];
	uint32_t _anapllacontrol3;
} BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_t;

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_CLR(r) (r).anapllacontrol3[0] = 0
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_SET(r,d) (r).anapllacontrol3[0] = d
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_GET(r) (r).anapllacontrol3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_RXf_GET(r) ((((r).anapllacontrol3[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_RXf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_PLLf_GET(r) ((((r).anapllacontrol3[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_PLLf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VCf_GET(r) ((((r).anapllacontrol3[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VCf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VREFf_GET(r) ((((r).anapllacontrol3[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VREFf_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_2f_GET(r) ((((r).anapllacontrol3[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_0f_GET(r) ((((r).anapllacontrol3[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_1f_GET(r) ((((r).anapllacontrol3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_2f_GET(r) ((((r).anapllacontrol3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_0f_GET(r) ((((r).anapllacontrol3[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_1f_GET(r) ((((r).anapllacontrol3[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_2f_GET(r) ((((r).anapllacontrol3[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_0f_GET(r) ((((r).anapllacontrol3[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_1f_GET(r) ((((r).anapllacontrol3[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_2f_GET(r) ((((r).anapllacontrol3[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_2f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_0f_GET(r) ((((r).anapllacontrol3[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_0f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_1f_GET(r) (((r).anapllacontrol3[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_1f_SET(r,f) (r).anapllacontrol3[0]=(((r).anapllacontrol3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANAPLLACONTROL3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL3r,(_r._anapllacontrol3))
#define BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL3r,(_r._anapllacontrol3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL3r BCMI_QSGMII_SERDES_ANAPLLACONTROL3r
#define ANAPLLACONTROL3r_SIZE BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_SIZE
typedef BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_t ANAPLLACONTROL3r_t;
#define ANAPLLACONTROL3r_CLR BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_CLR
#define ANAPLLACONTROL3r_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_SET
#define ANAPLLACONTROL3r_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_GET
#define ANAPLLACONTROL3r_TEST_RXf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_RXf_GET
#define ANAPLLACONTROL3r_TEST_RXf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_RXf_SET
#define ANAPLLACONTROL3r_TEST_PLLf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_PLLf_GET
#define ANAPLLACONTROL3r_TEST_PLLf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_PLLf_SET
#define ANAPLLACONTROL3r_TEST_VCf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VCf_GET
#define ANAPLLACONTROL3r_TEST_VCf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VCf_SET
#define ANAPLLACONTROL3r_TEST_VREFf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VREFf_GET
#define ANAPLLACONTROL3r_TEST_VREFf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_TEST_VREFf_SET
#define ANAPLLACONTROL3r_ITEST_2f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_2f_GET
#define ANAPLLACONTROL3r_ITEST_2f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_2f_SET
#define ANAPLLACONTROL3r_ITEST_0f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_0f_GET
#define ANAPLLACONTROL3r_ITEST_0f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_0f_SET
#define ANAPLLACONTROL3r_ITEST_1f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_1f_GET
#define ANAPLLACONTROL3r_ITEST_1f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ITEST_1f_SET
#define ANAPLLACONTROL3r_ICOMP_2f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_2f_GET
#define ANAPLLACONTROL3r_ICOMP_2f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_2f_SET
#define ANAPLLACONTROL3r_ICOMP_0f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_0f_GET
#define ANAPLLACONTROL3r_ICOMP_0f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_0f_SET
#define ANAPLLACONTROL3r_ICOMP_1f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_1f_GET
#define ANAPLLACONTROL3r_ICOMP_1f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICOMP_1f_SET
#define ANAPLLACONTROL3r_ICM_2f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_2f_GET
#define ANAPLLACONTROL3r_ICM_2f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_2f_SET
#define ANAPLLACONTROL3r_ICM_0f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_0f_GET
#define ANAPLLACONTROL3r_ICM_0f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_0f_SET
#define ANAPLLACONTROL3r_ICM_1f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_1f_GET
#define ANAPLLACONTROL3r_ICM_1f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_ICM_1f_SET
#define ANAPLLACONTROL3r_IVCO_2f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_2f_GET
#define ANAPLLACONTROL3r_IVCO_2f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_2f_SET
#define ANAPLLACONTROL3r_IVCO_0f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_0f_GET
#define ANAPLLACONTROL3r_IVCO_0f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_0f_SET
#define ANAPLLACONTROL3r_IVCO_1f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_1f_GET
#define ANAPLLACONTROL3r_IVCO_1f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL3r_IVCO_1f_SET
#define READ_ANAPLLACONTROL3r BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL3r
#define WRITE_ANAPLLACONTROL3r BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANAPLLACONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANAPLLACONTROL4
 * BLOCKS:   PLL
 * REGADDR:  0x805e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PTATADJ          
 *     CTATADJ          
 *     PLL2RX_CLKBW     
 *     COMP_VTH         
 *     VDDR_BGB         
 *     KVH_0            
 *     KVH_1            
 *     EN40LP           
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r (0x0000805e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_SIZE 4

/*
 * This structure should be used to declare and program ANAPLLACONTROL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_s {
	uint32_t v[1];
	uint32_t anapllacontrol4[1];
	uint32_t _anapllacontrol4;
} BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_t;

#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CLR(r) (r).anapllacontrol4[0] = 0
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_SET(r,d) (r).anapllacontrol4[0] = d
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_GET(r) (r).anapllacontrol4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_EN40LPf_GET(r) ((((r).anapllacontrol4[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_EN40LPf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_1f_GET(r) ((((r).anapllacontrol4[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_1f_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_0f_GET(r) ((((r).anapllacontrol4[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_0f_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_VDDR_BGBf_GET(r) ((((r).anapllacontrol4[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_VDDR_BGBf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_COMP_VTHf_GET(r) ((((r).anapllacontrol4[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_COMP_VTHf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PLL2RX_CLKBWf_GET(r) ((((r).anapllacontrol4[0]) >> 8) & 0x7)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PLL2RX_CLKBWf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0x7 << 8)) | ((((uint32_t)f) & 0x7) << 8))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CTATADJf_GET(r) ((((r).anapllacontrol4[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CTATADJf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PTATADJf_GET(r) (((r).anapllacontrol4[0]) & 0xf)
#define BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PTATADJf_SET(r,f) (r).anapllacontrol4[0]=(((r).anapllacontrol4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access ANAPLLACONTROL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL4r,(_r._anapllacontrol4))
#define BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANAPLLACONTROL4r,(_r._anapllacontrol4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANAPLLACONTROL4r BCMI_QSGMII_SERDES_ANAPLLACONTROL4r
#define ANAPLLACONTROL4r_SIZE BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_SIZE
typedef BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_t ANAPLLACONTROL4r_t;
#define ANAPLLACONTROL4r_CLR BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CLR
#define ANAPLLACONTROL4r_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_SET
#define ANAPLLACONTROL4r_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_GET
#define ANAPLLACONTROL4r_EN40LPf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_EN40LPf_GET
#define ANAPLLACONTROL4r_EN40LPf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_EN40LPf_SET
#define ANAPLLACONTROL4r_KVH_1f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_1f_GET
#define ANAPLLACONTROL4r_KVH_1f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_1f_SET
#define ANAPLLACONTROL4r_KVH_0f_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_0f_GET
#define ANAPLLACONTROL4r_KVH_0f_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_KVH_0f_SET
#define ANAPLLACONTROL4r_VDDR_BGBf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_VDDR_BGBf_GET
#define ANAPLLACONTROL4r_VDDR_BGBf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_VDDR_BGBf_SET
#define ANAPLLACONTROL4r_COMP_VTHf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_COMP_VTHf_GET
#define ANAPLLACONTROL4r_COMP_VTHf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_COMP_VTHf_SET
#define ANAPLLACONTROL4r_PLL2RX_CLKBWf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PLL2RX_CLKBWf_GET
#define ANAPLLACONTROL4r_PLL2RX_CLKBWf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PLL2RX_CLKBWf_SET
#define ANAPLLACONTROL4r_CTATADJf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CTATADJf_GET
#define ANAPLLACONTROL4r_CTATADJf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_CTATADJf_SET
#define ANAPLLACONTROL4r_PTATADJf_GET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PTATADJf_GET
#define ANAPLLACONTROL4r_PTATADJf_SET BCMI_QSGMII_SERDES_ANAPLLACONTROL4r_PTATADJf_SET
#define READ_ANAPLLACONTROL4r BCMI_QSGMII_SERDES_READ_ANAPLLACONTROL4r
#define WRITE_ANAPLLACONTROL4r BCMI_QSGMII_SERDES_WRITE_ANAPLLACONTROL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANAPLLACONTROL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_ASTATUS_0
 * BLOCKS:   TX
 * REGADDR:  0x8060
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXPLL_LOCK1G     
 *     RLTXFER_STKY     
 *     TX_PWRDN         
 *     TX_RESET         
 *     TBI_MODE         
 *     TXFERR_STKY      
 *     TXDISABLE_LN     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r (0x00008060 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_SIZE 4

/*
 * This structure should be used to declare and program TX_ASTATUS_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_ASTATUS_0r_s {
	uint32_t v[1];
	uint32_t tx_astatus_0[1];
	uint32_t _tx_astatus_0;
} BCMI_QSGMII_SERDES_TX_ASTATUS_0r_t;

#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_CLR(r) (r).tx_astatus_0[0] = 0
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_SET(r,d) (r).tx_astatus_0[0] = d
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_GET(r) (r).tx_astatus_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXDISABLE_LNf_GET(r) ((((r).tx_astatus_0[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXDISABLE_LNf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXFERR_STKYf_GET(r) ((((r).tx_astatus_0[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXFERR_STKYf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TBI_MODEf_GET(r) ((((r).tx_astatus_0[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TBI_MODEf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_RESETf_GET(r) ((((r).tx_astatus_0[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_RESETf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_PWRDNf_GET(r) ((((r).tx_astatus_0[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_PWRDNf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_RLTXFER_STKYf_GET(r) ((((r).tx_astatus_0[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_RLTXFER_STKYf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXPLL_LOCK1Gf_GET(r) (((r).tx_astatus_0[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXPLL_LOCK1Gf_SET(r,f) (r).tx_astatus_0[0]=(((r).tx_astatus_0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX_ASTATUS_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_ASTATUS_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_ASTATUS_0r,(_r._tx_astatus_0))
#define BCMI_QSGMII_SERDES_WRITE_TX_ASTATUS_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_ASTATUS_0r,(_r._tx_astatus_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_ASTATUS_0r BCMI_QSGMII_SERDES_TX_ASTATUS_0r
#define TX_ASTATUS_0r_SIZE BCMI_QSGMII_SERDES_TX_ASTATUS_0r_SIZE
typedef BCMI_QSGMII_SERDES_TX_ASTATUS_0r_t TX_ASTATUS_0r_t;
#define TX_ASTATUS_0r_CLR BCMI_QSGMII_SERDES_TX_ASTATUS_0r_CLR
#define TX_ASTATUS_0r_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_SET
#define TX_ASTATUS_0r_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_GET
#define TX_ASTATUS_0r_TXDISABLE_LNf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXDISABLE_LNf_GET
#define TX_ASTATUS_0r_TXDISABLE_LNf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXDISABLE_LNf_SET
#define TX_ASTATUS_0r_TXFERR_STKYf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXFERR_STKYf_GET
#define TX_ASTATUS_0r_TXFERR_STKYf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXFERR_STKYf_SET
#define TX_ASTATUS_0r_TBI_MODEf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TBI_MODEf_GET
#define TX_ASTATUS_0r_TBI_MODEf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TBI_MODEf_SET
#define TX_ASTATUS_0r_TX_RESETf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_RESETf_GET
#define TX_ASTATUS_0r_TX_RESETf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_RESETf_SET
#define TX_ASTATUS_0r_TX_PWRDNf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_PWRDNf_GET
#define TX_ASTATUS_0r_TX_PWRDNf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TX_PWRDNf_SET
#define TX_ASTATUS_0r_RLTXFER_STKYf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_RLTXFER_STKYf_GET
#define TX_ASTATUS_0r_RLTXFER_STKYf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_RLTXFER_STKYf_SET
#define TX_ASTATUS_0r_TXPLL_LOCK1Gf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXPLL_LOCK1Gf_GET
#define TX_ASTATUS_0r_TXPLL_LOCK1Gf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_0r_TXPLL_LOCK1Gf_SET
#define READ_TX_ASTATUS_0r BCMI_QSGMII_SERDES_READ_TX_ASTATUS_0r
#define WRITE_TX_ASTATUS_0r BCMI_QSGMII_SERDES_WRITE_TX_ASTATUS_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_ASTATUS_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_ACONTROL_0
 * BLOCKS:   TX
 * REGADDR:  0x8061
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_MDATA_EN      
 *     TXPAT_EN         
 *     EDEN_FORCE_R     
 *     EDEN_R           
 *     RTBI_FLIP        
 *     TXPOL_FLIP       
 *     PCKT_STRT        
 *     PCKT_EN          
 *     PRBS_EN          
 *     GLOOPOUTDISABLE  
 *     TXCK_DME_EN      
 *     FORCE_EXT_FRST   
 *     TX1G_FIFO_RST    
 *     FORCE_TCLK       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r (0x00008061 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_SIZE 4

/*
 * This structure should be used to declare and program TX_ACONTROL_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_ACONTROL_0r_s {
	uint32_t v[1];
	uint32_t tx_acontrol_0[1];
	uint32_t _tx_acontrol_0;
} BCMI_QSGMII_SERDES_TX_ACONTROL_0r_t;

#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_CLR(r) (r).tx_acontrol_0[0] = 0
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_SET(r,d) (r).tx_acontrol_0[0] = d
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GET(r) (r).tx_acontrol_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_TCLKf_GET(r) ((((r).tx_acontrol_0[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_TCLKf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX1G_FIFO_RSTf_GET(r) ((((r).tx_acontrol_0[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX1G_FIFO_RSTf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_EXT_FRSTf_GET(r) ((((r).tx_acontrol_0[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_EXT_FRSTf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXCK_DME_ENf_GET(r) ((((r).tx_acontrol_0[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXCK_DME_ENf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GLOOPOUTDISABLEf_GET(r) ((((r).tx_acontrol_0[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GLOOPOUTDISABLEf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PRBS_ENf_GET(r) ((((r).tx_acontrol_0[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PRBS_ENf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_ENf_GET(r) ((((r).tx_acontrol_0[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_ENf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_STRTf_GET(r) ((((r).tx_acontrol_0[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_STRTf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPOL_FLIPf_GET(r) ((((r).tx_acontrol_0[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPOL_FLIPf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_RTBI_FLIPf_GET(r) ((((r).tx_acontrol_0[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_RTBI_FLIPf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_Rf_GET(r) ((((r).tx_acontrol_0[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_Rf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_FORCE_Rf_GET(r) ((((r).tx_acontrol_0[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_FORCE_Rf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPAT_ENf_GET(r) ((((r).tx_acontrol_0[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPAT_ENf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX_MDATA_ENf_GET(r) (((r).tx_acontrol_0[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX_MDATA_ENf_SET(r,f) (r).tx_acontrol_0[0]=(((r).tx_acontrol_0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX_ACONTROL_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_ACONTROL_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_ACONTROL_0r,(_r._tx_acontrol_0))
#define BCMI_QSGMII_SERDES_WRITE_TX_ACONTROL_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_ACONTROL_0r,(_r._tx_acontrol_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_ACONTROL_0r BCMI_QSGMII_SERDES_TX_ACONTROL_0r
#define TX_ACONTROL_0r_SIZE BCMI_QSGMII_SERDES_TX_ACONTROL_0r_SIZE
typedef BCMI_QSGMII_SERDES_TX_ACONTROL_0r_t TX_ACONTROL_0r_t;
#define TX_ACONTROL_0r_CLR BCMI_QSGMII_SERDES_TX_ACONTROL_0r_CLR
#define TX_ACONTROL_0r_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_SET
#define TX_ACONTROL_0r_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GET
#define TX_ACONTROL_0r_FORCE_TCLKf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_TCLKf_GET
#define TX_ACONTROL_0r_FORCE_TCLKf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_TCLKf_SET
#define TX_ACONTROL_0r_TX1G_FIFO_RSTf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX1G_FIFO_RSTf_GET
#define TX_ACONTROL_0r_TX1G_FIFO_RSTf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX1G_FIFO_RSTf_SET
#define TX_ACONTROL_0r_FORCE_EXT_FRSTf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_EXT_FRSTf_GET
#define TX_ACONTROL_0r_FORCE_EXT_FRSTf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_FORCE_EXT_FRSTf_SET
#define TX_ACONTROL_0r_TXCK_DME_ENf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXCK_DME_ENf_GET
#define TX_ACONTROL_0r_TXCK_DME_ENf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXCK_DME_ENf_SET
#define TX_ACONTROL_0r_GLOOPOUTDISABLEf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GLOOPOUTDISABLEf_GET
#define TX_ACONTROL_0r_GLOOPOUTDISABLEf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_GLOOPOUTDISABLEf_SET
#define TX_ACONTROL_0r_PRBS_ENf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PRBS_ENf_GET
#define TX_ACONTROL_0r_PRBS_ENf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PRBS_ENf_SET
#define TX_ACONTROL_0r_PCKT_ENf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_ENf_GET
#define TX_ACONTROL_0r_PCKT_ENf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_ENf_SET
#define TX_ACONTROL_0r_PCKT_STRTf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_STRTf_GET
#define TX_ACONTROL_0r_PCKT_STRTf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_PCKT_STRTf_SET
#define TX_ACONTROL_0r_TXPOL_FLIPf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPOL_FLIPf_GET
#define TX_ACONTROL_0r_TXPOL_FLIPf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPOL_FLIPf_SET
#define TX_ACONTROL_0r_RTBI_FLIPf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_RTBI_FLIPf_GET
#define TX_ACONTROL_0r_RTBI_FLIPf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_RTBI_FLIPf_SET
#define TX_ACONTROL_0r_EDEN_Rf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_Rf_GET
#define TX_ACONTROL_0r_EDEN_Rf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_Rf_SET
#define TX_ACONTROL_0r_EDEN_FORCE_Rf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_FORCE_Rf_GET
#define TX_ACONTROL_0r_EDEN_FORCE_Rf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_EDEN_FORCE_Rf_SET
#define TX_ACONTROL_0r_TXPAT_ENf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPAT_ENf_GET
#define TX_ACONTROL_0r_TXPAT_ENf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TXPAT_ENf_SET
#define TX_ACONTROL_0r_TX_MDATA_ENf_GET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX_MDATA_ENf_GET
#define TX_ACONTROL_0r_TX_MDATA_ENf_SET BCMI_QSGMII_SERDES_TX_ACONTROL_0r_TX_MDATA_ENf_SET
#define READ_TX_ACONTROL_0r BCMI_QSGMII_SERDES_READ_TX_ACONTROL_0r
#define WRITE_TX_ACONTROL_0r BCMI_QSGMII_SERDES_WRITE_TX_ACONTROL_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_ACONTROL_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_MDATA_0
 * BLOCKS:   TX
 * REGADDR:  0x8062
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATA_9_0 
 *     RLFIFO_TSTSEL    
 *     TXTESTMUXSELECT  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_MDATA_0r (0x00008062 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_MDATA_0r_SIZE 4

/*
 * This structure should be used to declare and program TX_MDATA_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_MDATA_0r_s {
	uint32_t v[1];
	uint32_t tx_mdata_0[1];
	uint32_t _tx_mdata_0;
} BCMI_QSGMII_SERDES_TX_MDATA_0r_t;

#define BCMI_QSGMII_SERDES_TX_MDATA_0r_CLR(r) (r).tx_mdata_0[0] = 0
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_SET(r,d) (r).tx_mdata_0[0] = d
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_GET(r) (r).tx_mdata_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_TXTESTMUXSELECTf_GET(r) ((((r).tx_mdata_0[0]) >> 13) & 0x7)
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_TXTESTMUXSELECTf_SET(r,f) (r).tx_mdata_0[0]=(((r).tx_mdata_0[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_RLFIFO_TSTSELf_GET(r) ((((r).tx_mdata_0[0]) >> 10) & 0x7)
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_RLFIFO_TSTSELf_SET(r,f) (r).tx_mdata_0[0]=(((r).tx_mdata_0[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_TXMDIOTSTDATA_9_0f_GET(r) (((r).tx_mdata_0[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_TX_MDATA_0r_TXMDIOTSTDATA_9_0f_SET(r,f) (r).tx_mdata_0[0]=(((r).tx_mdata_0[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX_MDATA_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_MDATA_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_MDATA_0r,(_r._tx_mdata_0))
#define BCMI_QSGMII_SERDES_WRITE_TX_MDATA_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_MDATA_0r,(_r._tx_mdata_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_MDATA_0r BCMI_QSGMII_SERDES_TX_MDATA_0r
#define TX_MDATA_0r_SIZE BCMI_QSGMII_SERDES_TX_MDATA_0r_SIZE
typedef BCMI_QSGMII_SERDES_TX_MDATA_0r_t TX_MDATA_0r_t;
#define TX_MDATA_0r_CLR BCMI_QSGMII_SERDES_TX_MDATA_0r_CLR
#define TX_MDATA_0r_SET BCMI_QSGMII_SERDES_TX_MDATA_0r_SET
#define TX_MDATA_0r_GET BCMI_QSGMII_SERDES_TX_MDATA_0r_GET
#define TX_MDATA_0r_TXTESTMUXSELECTf_GET BCMI_QSGMII_SERDES_TX_MDATA_0r_TXTESTMUXSELECTf_GET
#define TX_MDATA_0r_TXTESTMUXSELECTf_SET BCMI_QSGMII_SERDES_TX_MDATA_0r_TXTESTMUXSELECTf_SET
#define TX_MDATA_0r_RLFIFO_TSTSELf_GET BCMI_QSGMII_SERDES_TX_MDATA_0r_RLFIFO_TSTSELf_GET
#define TX_MDATA_0r_RLFIFO_TSTSELf_SET BCMI_QSGMII_SERDES_TX_MDATA_0r_RLFIFO_TSTSELf_SET
#define TX_MDATA_0r_TXMDIOTSTDATA_9_0f_GET BCMI_QSGMII_SERDES_TX_MDATA_0r_TXMDIOTSTDATA_9_0f_GET
#define TX_MDATA_0r_TXMDIOTSTDATA_9_0f_SET BCMI_QSGMII_SERDES_TX_MDATA_0r_TXMDIOTSTDATA_9_0f_SET
#define READ_TX_MDATA_0r BCMI_QSGMII_SERDES_READ_TX_MDATA_0r
#define WRITE_TX_MDATA_0r BCMI_QSGMII_SERDES_WRITE_TX_MDATA_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_MDATA_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_MDATA_1
 * BLOCKS:   TX
 * REGADDR:  0x8063
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXMDIOTSTDATA_19_10 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_MDATA_1r (0x00008063 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_MDATA_1r_SIZE 4

/*
 * This structure should be used to declare and program TX_MDATA_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_MDATA_1r_s {
	uint32_t v[1];
	uint32_t tx_mdata_1[1];
	uint32_t _tx_mdata_1;
} BCMI_QSGMII_SERDES_TX_MDATA_1r_t;

#define BCMI_QSGMII_SERDES_TX_MDATA_1r_CLR(r) (r).tx_mdata_1[0] = 0
#define BCMI_QSGMII_SERDES_TX_MDATA_1r_SET(r,d) (r).tx_mdata_1[0] = d
#define BCMI_QSGMII_SERDES_TX_MDATA_1r_GET(r) (r).tx_mdata_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_MDATA_1r_TXMDIOTSTDATA_19_10f_GET(r) (((r).tx_mdata_1[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_TX_MDATA_1r_TXMDIOTSTDATA_19_10f_SET(r,f) (r).tx_mdata_1[0]=(((r).tx_mdata_1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access TX_MDATA_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_MDATA_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_MDATA_1r,(_r._tx_mdata_1))
#define BCMI_QSGMII_SERDES_WRITE_TX_MDATA_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_MDATA_1r,(_r._tx_mdata_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_MDATA_1r BCMI_QSGMII_SERDES_TX_MDATA_1r
#define TX_MDATA_1r_SIZE BCMI_QSGMII_SERDES_TX_MDATA_1r_SIZE
typedef BCMI_QSGMII_SERDES_TX_MDATA_1r_t TX_MDATA_1r_t;
#define TX_MDATA_1r_CLR BCMI_QSGMII_SERDES_TX_MDATA_1r_CLR
#define TX_MDATA_1r_SET BCMI_QSGMII_SERDES_TX_MDATA_1r_SET
#define TX_MDATA_1r_GET BCMI_QSGMII_SERDES_TX_MDATA_1r_GET
#define TX_MDATA_1r_TXMDIOTSTDATA_19_10f_GET BCMI_QSGMII_SERDES_TX_MDATA_1r_TXMDIOTSTDATA_19_10f_GET
#define TX_MDATA_1r_TXMDIOTSTDATA_19_10f_SET BCMI_QSGMII_SERDES_TX_MDATA_1r_TXMDIOTSTDATA_19_10f_SET
#define READ_TX_MDATA_1r BCMI_QSGMII_SERDES_READ_TX_MDATA_1r
#define WRITE_TX_MDATA_1r BCMI_QSGMII_SERDES_WRITE_TX_MDATA_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_MDATA_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_ASTATUS_1
 * BLOCKS:   TX
 * REGADDR:  0x8064
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     REFL_TX          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r (0x00008064 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_SIZE 4

/*
 * This structure should be used to declare and program TX_ASTATUS_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_ASTATUS_1r_s {
	uint32_t v[1];
	uint32_t tx_astatus_1[1];
	uint32_t _tx_astatus_1;
} BCMI_QSGMII_SERDES_TX_ASTATUS_1r_t;

#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_CLR(r) (r).tx_astatus_1[0] = 0
#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_SET(r,d) (r).tx_astatus_1[0] = d
#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_GET(r) (r).tx_astatus_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_REFL_TXf_GET(r) ((((r).tx_astatus_1[0]) >> 14) & 0x3)
#define BCMI_QSGMII_SERDES_TX_ASTATUS_1r_REFL_TXf_SET(r,f) (r).tx_astatus_1[0]=(((r).tx_astatus_1[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))

/*
 * These macros can be used to access TX_ASTATUS_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_ASTATUS_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_ASTATUS_1r,(_r._tx_astatus_1))
#define BCMI_QSGMII_SERDES_WRITE_TX_ASTATUS_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_ASTATUS_1r,(_r._tx_astatus_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_ASTATUS_1r BCMI_QSGMII_SERDES_TX_ASTATUS_1r
#define TX_ASTATUS_1r_SIZE BCMI_QSGMII_SERDES_TX_ASTATUS_1r_SIZE
typedef BCMI_QSGMII_SERDES_TX_ASTATUS_1r_t TX_ASTATUS_1r_t;
#define TX_ASTATUS_1r_CLR BCMI_QSGMII_SERDES_TX_ASTATUS_1r_CLR
#define TX_ASTATUS_1r_SET BCMI_QSGMII_SERDES_TX_ASTATUS_1r_SET
#define TX_ASTATUS_1r_GET BCMI_QSGMII_SERDES_TX_ASTATUS_1r_GET
#define TX_ASTATUS_1r_REFL_TXf_GET BCMI_QSGMII_SERDES_TX_ASTATUS_1r_REFL_TXf_GET
#define TX_ASTATUS_1r_REFL_TXf_SET BCMI_QSGMII_SERDES_TX_ASTATUS_1r_REFL_TXf_SET
#define READ_TX_ASTATUS_1r BCMI_QSGMII_SERDES_READ_TX_ASTATUS_1r
#define WRITE_TX_ASTATUS_1r BCMI_QSGMII_SERDES_WRITE_TX_ASTATUS_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_ASTATUS_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_BGVCM
 * BLOCKS:   TX
 * REGADDR:  0x8065
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AUX_CTRL         
 *     LOWPWR           
 *     TICKSEL          
 *     IDLE_RES         
 *     VDDR_BG          
 *     REFH_TX          
 *     REFL_TX          
 *     ICLKGEN_0        
 *     ICLKGEN_1        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_BGVCMr (0x00008065 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_BGVCMr_SIZE 4

/*
 * This structure should be used to declare and program TX_BGVCM.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_BGVCMr_s {
	uint32_t v[1];
	uint32_t tx_bgvcm[1];
	uint32_t _tx_bgvcm;
} BCMI_QSGMII_SERDES_TX_BGVCMr_t;

#define BCMI_QSGMII_SERDES_TX_BGVCMr_CLR(r) (r).tx_bgvcm[0] = 0
#define BCMI_QSGMII_SERDES_TX_BGVCMr_SET(r,d) (r).tx_bgvcm[0] = d
#define BCMI_QSGMII_SERDES_TX_BGVCMr_GET(r) (r).tx_bgvcm[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_1f_GET(r) ((((r).tx_bgvcm[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_1f_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_0f_GET(r) ((((r).tx_bgvcm[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_0f_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_REFL_TXf_GET(r) ((((r).tx_bgvcm[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_REFL_TXf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_REFH_TXf_GET(r) ((((r).tx_bgvcm[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_REFH_TXf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_VDDR_BGf_GET(r) ((((r).tx_bgvcm[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_VDDR_BGf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_IDLE_RESf_GET(r) ((((r).tx_bgvcm[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_IDLE_RESf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_TICKSELf_GET(r) ((((r).tx_bgvcm[0]) >> 7) & 0x3)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_TICKSELf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x3 << 7)) | ((((uint32_t)f) & 0x3) << 7))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_LOWPWRf_GET(r) ((((r).tx_bgvcm[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_LOWPWRf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_TX_BGVCMr_AUX_CTRLf_GET(r) (((r).tx_bgvcm[0]) & 0x3f)
#define BCMI_QSGMII_SERDES_TX_BGVCMr_AUX_CTRLf_SET(r,f) (r).tx_bgvcm[0]=(((r).tx_bgvcm[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access TX_BGVCM.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_BGVCMr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_BGVCMr,(_r._tx_bgvcm))
#define BCMI_QSGMII_SERDES_WRITE_TX_BGVCMr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_BGVCMr,(_r._tx_bgvcm))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_BGVCMr BCMI_QSGMII_SERDES_TX_BGVCMr
#define TX_BGVCMr_SIZE BCMI_QSGMII_SERDES_TX_BGVCMr_SIZE
typedef BCMI_QSGMII_SERDES_TX_BGVCMr_t TX_BGVCMr_t;
#define TX_BGVCMr_CLR BCMI_QSGMII_SERDES_TX_BGVCMr_CLR
#define TX_BGVCMr_SET BCMI_QSGMII_SERDES_TX_BGVCMr_SET
#define TX_BGVCMr_GET BCMI_QSGMII_SERDES_TX_BGVCMr_GET
#define TX_BGVCMr_ICLKGEN_1f_GET BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_1f_GET
#define TX_BGVCMr_ICLKGEN_1f_SET BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_1f_SET
#define TX_BGVCMr_ICLKGEN_0f_GET BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_0f_GET
#define TX_BGVCMr_ICLKGEN_0f_SET BCMI_QSGMII_SERDES_TX_BGVCMr_ICLKGEN_0f_SET
#define TX_BGVCMr_REFL_TXf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_REFL_TXf_GET
#define TX_BGVCMr_REFL_TXf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_REFL_TXf_SET
#define TX_BGVCMr_REFH_TXf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_REFH_TXf_GET
#define TX_BGVCMr_REFH_TXf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_REFH_TXf_SET
#define TX_BGVCMr_VDDR_BGf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_VDDR_BGf_GET
#define TX_BGVCMr_VDDR_BGf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_VDDR_BGf_SET
#define TX_BGVCMr_IDLE_RESf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_IDLE_RESf_GET
#define TX_BGVCMr_IDLE_RESf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_IDLE_RESf_SET
#define TX_BGVCMr_TICKSELf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_TICKSELf_GET
#define TX_BGVCMr_TICKSELf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_TICKSELf_SET
#define TX_BGVCMr_LOWPWRf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_LOWPWRf_GET
#define TX_BGVCMr_LOWPWRf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_LOWPWRf_SET
#define TX_BGVCMr_AUX_CTRLf_GET BCMI_QSGMII_SERDES_TX_BGVCMr_AUX_CTRLf_GET
#define TX_BGVCMr_AUX_CTRLf_SET BCMI_QSGMII_SERDES_TX_BGVCMr_AUX_CTRLf_SET
#define READ_TX_BGVCMr BCMI_QSGMII_SERDES_READ_TX_BGVCMr
#define WRITE_TX_BGVCMr BCMI_QSGMII_SERDES_WRITE_TX_BGVCMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_BGVCMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_IBUFF_1T2T
 * BLOCKS:   TX
 * REGADDR:  0x8066
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ICLKGEN_2        
 *     ICLKINT          
 *     ICLKBUF          
 *     ICLKBUF2         
 *     MAIN_COEF        
 *     POST_COEF_0      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr (0x00008066 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_SIZE 4

/*
 * This structure should be used to declare and program TX_IBUFF_1T2T.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_s {
	uint32_t v[1];
	uint32_t tx_ibuff_1t2t[1];
	uint32_t _tx_ibuff_1t2t;
} BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_t;

#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_CLR(r) (r).tx_ibuff_1t2t[0] = 0
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_SET(r,d) (r).tx_ibuff_1t2t[0] = d
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_GET(r) (r).tx_ibuff_1t2t[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_POST_COEF_0f_GET(r) ((((r).tx_ibuff_1t2t[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_POST_COEF_0f_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_MAIN_COEFf_GET(r) ((((r).tx_ibuff_1t2t[0]) >> 10) & 0x1f)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_MAIN_COEFf_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x1f << 10)) | ((((uint32_t)f) & 0x1f) << 10))
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUF2f_GET(r) ((((r).tx_ibuff_1t2t[0]) >> 7) & 0x7)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUF2f_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x7 << 7)) | ((((uint32_t)f) & 0x7) << 7))
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUFf_GET(r) ((((r).tx_ibuff_1t2t[0]) >> 4) & 0x7)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUFf_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKINTf_GET(r) ((((r).tx_ibuff_1t2t[0]) >> 1) & 0x7)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKINTf_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKGEN_2f_GET(r) (((r).tx_ibuff_1t2t[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKGEN_2f_SET(r,f) (r).tx_ibuff_1t2t[0]=(((r).tx_ibuff_1t2t[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TX_IBUFF_1T2T.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_IBUFF_1T2Tr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr,(_r._tx_ibuff_1t2t))
#define BCMI_QSGMII_SERDES_WRITE_TX_IBUFF_1T2Tr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr,(_r._tx_ibuff_1t2t))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_IBUFF_1T2Tr BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr
#define TX_IBUFF_1T2Tr_SIZE BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_SIZE
typedef BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_t TX_IBUFF_1T2Tr_t;
#define TX_IBUFF_1T2Tr_CLR BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_CLR
#define TX_IBUFF_1T2Tr_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_SET
#define TX_IBUFF_1T2Tr_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_GET
#define TX_IBUFF_1T2Tr_POST_COEF_0f_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_POST_COEF_0f_GET
#define TX_IBUFF_1T2Tr_POST_COEF_0f_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_POST_COEF_0f_SET
#define TX_IBUFF_1T2Tr_MAIN_COEFf_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_MAIN_COEFf_GET
#define TX_IBUFF_1T2Tr_MAIN_COEFf_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_MAIN_COEFf_SET
#define TX_IBUFF_1T2Tr_ICLKBUF2f_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUF2f_GET
#define TX_IBUFF_1T2Tr_ICLKBUF2f_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUF2f_SET
#define TX_IBUFF_1T2Tr_ICLKBUFf_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUFf_GET
#define TX_IBUFF_1T2Tr_ICLKBUFf_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKBUFf_SET
#define TX_IBUFF_1T2Tr_ICLKINTf_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKINTf_GET
#define TX_IBUFF_1T2Tr_ICLKINTf_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKINTf_SET
#define TX_IBUFF_1T2Tr_ICLKGEN_2f_GET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKGEN_2f_GET
#define TX_IBUFF_1T2Tr_ICLKGEN_2f_SET BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr_ICLKGEN_2f_SET
#define READ_TX_IBUFF_1T2Tr BCMI_QSGMII_SERDES_READ_TX_IBUFF_1T2Tr
#define WRITE_TX_IBUFF_1T2Tr BCMI_QSGMII_SERDES_WRITE_TX_IBUFF_1T2Tr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_IBUFF_1T2Tr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TX_DRIVER
 * BLOCKS:   TX
 * REGADDR:  0x8067
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     POST_COEF_4_1    
 *     FIR_CONST        
 *     DRIVER_FIXED_ENB 
 *     DRV_AMP          
 *     PWRDN_OUTGND     
 *     SEL_CLK          
 *     TCLK_OUT_ENB     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TX_DRIVERr (0x00008067 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TX_DRIVERr_SIZE 4

/*
 * This structure should be used to declare and program TX_DRIVER.
 *
 */
typedef union BCMI_QSGMII_SERDES_TX_DRIVERr_s {
	uint32_t v[1];
	uint32_t tx_driver[1];
	uint32_t _tx_driver;
} BCMI_QSGMII_SERDES_TX_DRIVERr_t;

#define BCMI_QSGMII_SERDES_TX_DRIVERr_CLR(r) (r).tx_driver[0] = 0
#define BCMI_QSGMII_SERDES_TX_DRIVERr_SET(r,d) (r).tx_driver[0] = d
#define BCMI_QSGMII_SERDES_TX_DRIVERr_GET(r) (r).tx_driver[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TX_DRIVERr_TCLK_OUT_ENBf_GET(r) ((((r).tx_driver[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_TCLK_OUT_ENBf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_SEL_CLKf_GET(r) ((((r).tx_driver[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_SEL_CLKf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_PWRDN_OUTGNDf_GET(r) ((((r).tx_driver[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_PWRDN_OUTGNDf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_DRV_AMPf_GET(r) ((((r).tx_driver[0]) >> 6) & 0x3f)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_DRV_AMPf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_DRIVER_FIXED_ENBf_GET(r) ((((r).tx_driver[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_DRIVER_FIXED_ENBf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_FIR_CONSTf_GET(r) ((((r).tx_driver[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_FIR_CONSTf_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_TX_DRIVERr_POST_COEF_4_1f_GET(r) (((r).tx_driver[0]) & 0xf)
#define BCMI_QSGMII_SERDES_TX_DRIVERr_POST_COEF_4_1f_SET(r,f) (r).tx_driver[0]=(((r).tx_driver[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access TX_DRIVER.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TX_DRIVERr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TX_DRIVERr,(_r._tx_driver))
#define BCMI_QSGMII_SERDES_WRITE_TX_DRIVERr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TX_DRIVERr,(_r._tx_driver))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TX_DRIVERr BCMI_QSGMII_SERDES_TX_DRIVERr
#define TX_DRIVERr_SIZE BCMI_QSGMII_SERDES_TX_DRIVERr_SIZE
typedef BCMI_QSGMII_SERDES_TX_DRIVERr_t TX_DRIVERr_t;
#define TX_DRIVERr_CLR BCMI_QSGMII_SERDES_TX_DRIVERr_CLR
#define TX_DRIVERr_SET BCMI_QSGMII_SERDES_TX_DRIVERr_SET
#define TX_DRIVERr_GET BCMI_QSGMII_SERDES_TX_DRIVERr_GET
#define TX_DRIVERr_TCLK_OUT_ENBf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_TCLK_OUT_ENBf_GET
#define TX_DRIVERr_TCLK_OUT_ENBf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_TCLK_OUT_ENBf_SET
#define TX_DRIVERr_SEL_CLKf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_SEL_CLKf_GET
#define TX_DRIVERr_SEL_CLKf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_SEL_CLKf_SET
#define TX_DRIVERr_PWRDN_OUTGNDf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_PWRDN_OUTGNDf_GET
#define TX_DRIVERr_PWRDN_OUTGNDf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_PWRDN_OUTGNDf_SET
#define TX_DRIVERr_DRV_AMPf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_DRV_AMPf_GET
#define TX_DRIVERr_DRV_AMPf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_DRV_AMPf_SET
#define TX_DRIVERr_DRIVER_FIXED_ENBf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_DRIVER_FIXED_ENBf_GET
#define TX_DRIVERr_DRIVER_FIXED_ENBf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_DRIVER_FIXED_ENBf_SET
#define TX_DRIVERr_FIR_CONSTf_GET BCMI_QSGMII_SERDES_TX_DRIVERr_FIR_CONSTf_GET
#define TX_DRIVERr_FIR_CONSTf_SET BCMI_QSGMII_SERDES_TX_DRIVERr_FIR_CONSTf_SET
#define TX_DRIVERr_POST_COEF_4_1f_GET BCMI_QSGMII_SERDES_TX_DRIVERr_POST_COEF_4_1f_GET
#define TX_DRIVERr_POST_COEF_4_1f_SET BCMI_QSGMII_SERDES_TX_DRIVERr_POST_COEF_4_1f_SET
#define READ_TX_DRIVERr BCMI_QSGMII_SERDES_READ_TX_DRIVERr
#define WRITE_TX_DRIVERr BCMI_QSGMII_SERDES_WRITE_TX_DRIVERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TX_DRIVERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXACONTROL4
 * BLOCKS:   TX
 * REGADDR:  0x8068
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_CTRL_63_48_RESERVED 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXACONTROL4r (0x00008068 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_SIZE 4

/*
 * This structure should be used to declare and program ANATXACONTROL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXACONTROL4r_s {
	uint32_t v[1];
	uint32_t anatxacontrol4[1];
	uint32_t _anatxacontrol4;
} BCMI_QSGMII_SERDES_ANATXACONTROL4r_t;

#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_CLR(r) (r).anatxacontrol4[0] = 0
#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_SET(r,d) (r).anatxacontrol4[0] = d
#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_GET(r) (r).anatxacontrol4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_GET(r) (((r).anatxacontrol4[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_SET(r,f) (r).anatxacontrol4[0]=(((r).anatxacontrol4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANATXACONTROL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXACONTROL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXACONTROL4r,(_r._anatxacontrol4))
#define BCMI_QSGMII_SERDES_WRITE_ANATXACONTROL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXACONTROL4r,(_r._anatxacontrol4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXACONTROL4r BCMI_QSGMII_SERDES_ANATXACONTROL4r
#define ANATXACONTROL4r_SIZE BCMI_QSGMII_SERDES_ANATXACONTROL4r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXACONTROL4r_t ANATXACONTROL4r_t;
#define ANATXACONTROL4r_CLR BCMI_QSGMII_SERDES_ANATXACONTROL4r_CLR
#define ANATXACONTROL4r_SET BCMI_QSGMII_SERDES_ANATXACONTROL4r_SET
#define ANATXACONTROL4r_GET BCMI_QSGMII_SERDES_ANATXACONTROL4r_GET
#define ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_GET BCMI_QSGMII_SERDES_ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_GET
#define ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_SET BCMI_QSGMII_SERDES_ANATXACONTROL4r_TX_CTRL_63_48_RESERVEDf_SET
#define READ_ANATXACONTROL4r BCMI_QSGMII_SERDES_READ_ANATXACONTROL4r
#define WRITE_ANATXACONTROL4r BCMI_QSGMII_SERDES_WRITE_ANATXACONTROL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXACONTROL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXACONTROL5
 * BLOCKS:   TX
 * REGADDR:  0x8069
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_DRV_SQLCH     
 *     TX_FORCE_GEN_VAL 
 *     RX_EQCTRL_DFE_14_3 
 *     TX_FORCE_GEN_SEL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r (0x00008069 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_SIZE 4

/*
 * This structure should be used to declare and program ANATXACONTROL5.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXACONTROL5r_s {
	uint32_t v[1];
	uint32_t anatxacontrol5[1];
	uint32_t _anatxacontrol5;
} BCMI_QSGMII_SERDES_ANATXACONTROL5r_t;

#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_CLR(r) (r).anatxacontrol5[0] = 0
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_SET(r,d) (r).anatxacontrol5[0] = d
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_GET(r) (r).anatxacontrol5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_SELf_GET(r) ((((r).anatxacontrol5[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_SELf_SET(r,f) (r).anatxacontrol5[0]=(((r).anatxacontrol5[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_GET(r) ((((r).anatxacontrol5[0]) >> 3) & 0xfff)
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_SET(r,f) (r).anatxacontrol5[0]=(((r).anatxacontrol5[0] & ~((uint32_t)0xfff << 3)) | ((((uint32_t)f) & 0xfff) << 3))
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_VALf_GET(r) ((((r).anatxacontrol5[0]) >> 1) & 0x3)
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_VALf_SET(r,f) (r).anatxacontrol5[0]=(((r).anatxacontrol5[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_DRV_SQLCHf_GET(r) (((r).anatxacontrol5[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_DRV_SQLCHf_SET(r,f) (r).anatxacontrol5[0]=(((r).anatxacontrol5[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANATXACONTROL5.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXACONTROL5r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXACONTROL5r,(_r._anatxacontrol5))
#define BCMI_QSGMII_SERDES_WRITE_ANATXACONTROL5r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXACONTROL5r,(_r._anatxacontrol5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXACONTROL5r BCMI_QSGMII_SERDES_ANATXACONTROL5r
#define ANATXACONTROL5r_SIZE BCMI_QSGMII_SERDES_ANATXACONTROL5r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXACONTROL5r_t ANATXACONTROL5r_t;
#define ANATXACONTROL5r_CLR BCMI_QSGMII_SERDES_ANATXACONTROL5r_CLR
#define ANATXACONTROL5r_SET BCMI_QSGMII_SERDES_ANATXACONTROL5r_SET
#define ANATXACONTROL5r_GET BCMI_QSGMII_SERDES_ANATXACONTROL5r_GET
#define ANATXACONTROL5r_TX_FORCE_GEN_SELf_GET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_SELf_GET
#define ANATXACONTROL5r_TX_FORCE_GEN_SELf_SET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_SELf_SET
#define ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_GET BCMI_QSGMII_SERDES_ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_GET
#define ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_SET BCMI_QSGMII_SERDES_ANATXACONTROL5r_RX_EQCTRL_DFE_14_3f_SET
#define ANATXACONTROL5r_TX_FORCE_GEN_VALf_GET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_VALf_GET
#define ANATXACONTROL5r_TX_FORCE_GEN_VALf_SET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_FORCE_GEN_VALf_SET
#define ANATXACONTROL5r_TX_DRV_SQLCHf_GET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_DRV_SQLCHf_GET
#define ANATXACONTROL5r_TX_DRV_SQLCHf_SET BCMI_QSGMII_SERDES_ANATXACONTROL5r_TX_DRV_SQLCHf_SET
#define READ_ANATXACONTROL5r BCMI_QSGMII_SERDES_READ_ANATXACONTROL5r
#define WRITE_ANATXACONTROL5r BCMI_QSGMII_SERDES_WRITE_ANATXACONTROL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXACONTROL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXAIPCTRL1
 * BLOCKS:   TX
 * REGADDR:  0x806a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_INTERP_CTRL_15_00 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r (0x0000806a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program ANATXAIPCTRL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_s {
	uint32_t v[1];
	uint32_t anatxaipctrl1[1];
	uint32_t _anatxaipctrl1;
} BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_t;

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_CLR(r) (r).anatxaipctrl1[0] = 0
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_SET(r,d) (r).anatxaipctrl1[0] = d
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_GET(r) (r).anatxaipctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_GET(r) (((r).anatxaipctrl1[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_SET(r,f) (r).anatxaipctrl1[0]=(((r).anatxaipctrl1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANATXAIPCTRL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL1r,(_r._anatxaipctrl1))
#define BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL1r,(_r._anatxaipctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXAIPCTRL1r BCMI_QSGMII_SERDES_ANATXAIPCTRL1r
#define ANATXAIPCTRL1r_SIZE BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_t ANATXAIPCTRL1r_t;
#define ANATXAIPCTRL1r_CLR BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_CLR
#define ANATXAIPCTRL1r_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_SET
#define ANATXAIPCTRL1r_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_GET
#define ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_GET
#define ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL1r_TX_INTERP_CTRL_15_00f_SET
#define READ_ANATXAIPCTRL1r BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL1r
#define WRITE_ANATXAIPCTRL1r BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXAIPCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXAIPCTRL2
 * BLOCKS:   TX
 * REGADDR:  0x806b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_INTERP_CTRL_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r (0x0000806b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_SIZE 4

/*
 * This structure should be used to declare and program ANATXAIPCTRL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_s {
	uint32_t v[1];
	uint32_t anatxaipctrl2[1];
	uint32_t _anatxaipctrl2;
} BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_t;

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_CLR(r) (r).anatxaipctrl2[0] = 0
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_SET(r,d) (r).anatxaipctrl2[0] = d
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_GET(r) (r).anatxaipctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_GET(r) (((r).anatxaipctrl2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_SET(r,f) (r).anatxaipctrl2[0]=(((r).anatxaipctrl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANATXAIPCTRL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL2r,(_r._anatxaipctrl2))
#define BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL2r,(_r._anatxaipctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXAIPCTRL2r BCMI_QSGMII_SERDES_ANATXAIPCTRL2r
#define ANATXAIPCTRL2r_SIZE BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_t ANATXAIPCTRL2r_t;
#define ANATXAIPCTRL2r_CLR BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_CLR
#define ANATXAIPCTRL2r_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_SET
#define ANATXAIPCTRL2r_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_GET
#define ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_GET
#define ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL2r_TX_INTERP_CTRL_31_16f_SET
#define READ_ANATXAIPCTRL2r BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL2r
#define WRITE_ANATXAIPCTRL2r BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXAIPCTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXAIPCTRL3
 * BLOCKS:   TX
 * REGADDR:  0x806c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_INTERP_CTRL_47_32 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r (0x0000806c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_SIZE 4

/*
 * This structure should be used to declare and program ANATXAIPCTRL3.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_s {
	uint32_t v[1];
	uint32_t anatxaipctrl3[1];
	uint32_t _anatxaipctrl3;
} BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_t;

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_CLR(r) (r).anatxaipctrl3[0] = 0
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_SET(r,d) (r).anatxaipctrl3[0] = d
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_GET(r) (r).anatxaipctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_GET(r) (((r).anatxaipctrl3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_SET(r,f) (r).anatxaipctrl3[0]=(((r).anatxaipctrl3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANATXAIPCTRL3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL3r,(_r._anatxaipctrl3))
#define BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL3r,(_r._anatxaipctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXAIPCTRL3r BCMI_QSGMII_SERDES_ANATXAIPCTRL3r
#define ANATXAIPCTRL3r_SIZE BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_t ANATXAIPCTRL3r_t;
#define ANATXAIPCTRL3r_CLR BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_CLR
#define ANATXAIPCTRL3r_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_SET
#define ANATXAIPCTRL3r_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_GET
#define ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_GET
#define ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL3r_TX_INTERP_CTRL_47_32f_SET
#define READ_ANATXAIPCTRL3r BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL3r
#define WRITE_ANATXAIPCTRL3r BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXAIPCTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANATXAIPCTRL4
 * BLOCKS:   TX
 * REGADDR:  0x806d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_INTERP_CTRL_63_48 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r (0x0000806d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_SIZE 4

/*
 * This structure should be used to declare and program ANATXAIPCTRL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_s {
	uint32_t v[1];
	uint32_t anatxaipctrl4[1];
	uint32_t _anatxaipctrl4;
} BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_t;

#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_CLR(r) (r).anatxaipctrl4[0] = 0
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_SET(r,d) (r).anatxaipctrl4[0] = d
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_GET(r) (r).anatxaipctrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_GET(r) (((r).anatxaipctrl4[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_SET(r,f) (r).anatxaipctrl4[0]=(((r).anatxaipctrl4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANATXAIPCTRL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL4r,(_r._anatxaipctrl4))
#define BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANATXAIPCTRL4r,(_r._anatxaipctrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANATXAIPCTRL4r BCMI_QSGMII_SERDES_ANATXAIPCTRL4r
#define ANATXAIPCTRL4r_SIZE BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_SIZE
typedef BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_t ANATXAIPCTRL4r_t;
#define ANATXAIPCTRL4r_CLR BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_CLR
#define ANATXAIPCTRL4r_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_SET
#define ANATXAIPCTRL4r_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_GET
#define ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_GET BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_GET
#define ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_SET BCMI_QSGMII_SERDES_ANATXAIPCTRL4r_TX_INTERP_CTRL_63_48f_SET
#define READ_ANATXAIPCTRL4r BCMI_QSGMII_SERDES_READ_ANATXAIPCTRL4r
#define WRITE_ANATXAIPCTRL4r BCMI_QSGMII_SERDES_WRITE_ANATXAIPCTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANATXAIPCTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_STATUS
 * BLOCKS:   RX
 * REGADDR:  0x80b0
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RESERVED         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_STATUSr (0x000080b0 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX_STATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_STATUSr_s {
	uint32_t v[1];
	uint32_t rx_status[1];
	uint32_t _rx_status;
} BCMI_QSGMII_SERDES_RX_STATUSr_t;

#define BCMI_QSGMII_SERDES_RX_STATUSr_CLR(r) (r).rx_status[0] = 0
#define BCMI_QSGMII_SERDES_RX_STATUSr_SET(r,d) (r).rx_status[0] = d
#define BCMI_QSGMII_SERDES_RX_STATUSr_GET(r) (r).rx_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_STATUSr_RESERVEDf_GET(r) (((r).rx_status[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_STATUSr_RESERVEDf_SET(r,f) (r).rx_status[0]=(((r).rx_status[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_STATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_STATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_STATUSr,(_r._rx_status))
#define BCMI_QSGMII_SERDES_WRITE_RX_STATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_STATUSr,(_r._rx_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_STATUSr BCMI_QSGMII_SERDES_RX_STATUSr
#define RX_STATUSr_SIZE BCMI_QSGMII_SERDES_RX_STATUSr_SIZE
typedef BCMI_QSGMII_SERDES_RX_STATUSr_t RX_STATUSr_t;
#define RX_STATUSr_CLR BCMI_QSGMII_SERDES_RX_STATUSr_CLR
#define RX_STATUSr_SET BCMI_QSGMII_SERDES_RX_STATUSr_SET
#define RX_STATUSr_GET BCMI_QSGMII_SERDES_RX_STATUSr_GET
#define RX_STATUSr_RESERVEDf_GET BCMI_QSGMII_SERDES_RX_STATUSr_RESERVEDf_GET
#define RX_STATUSr_RESERVEDf_SET BCMI_QSGMII_SERDES_RX_STATUSr_RESERVEDf_SET
#define READ_RX_STATUSr BCMI_QSGMII_SERDES_READ_RX_STATUSr
#define WRITE_RX_STATUSr BCMI_QSGMII_SERDES_WRITE_RX_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_CONTROL
 * BLOCKS:   RX
 * REGADDR:  0x80b1
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     STATUS_SEL       
 *     FORCE_EXT_FRST_SM 
 *     FORCERXSEQDONE   
 *     PHFREQ_RST_DIS   
 *     OVERIDE_SIG_VAL  
 *     OVERIDE_SIG_EN   
 *     SIGDETMONITOR_EN 
 *     SIGDETTRESTART_EN 
 *     SIGDETECTED_EN   
 *     RXSEQRESTART     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_CONTROLr (0x000080b1 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program RX_CONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_CONTROLr_s {
	uint32_t v[1];
	uint32_t rx_control[1];
	uint32_t _rx_control;
} BCMI_QSGMII_SERDES_RX_CONTROLr_t;

#define BCMI_QSGMII_SERDES_RX_CONTROLr_CLR(r) (r).rx_control[0] = 0
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SET(r,d) (r).rx_control[0] = d
#define BCMI_QSGMII_SERDES_RX_CONTROLr_GET(r) (r).rx_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_CONTROLr_RXSEQRESTARTf_GET(r) ((((r).rx_control[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_RXSEQRESTARTf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETECTED_ENf_GET(r) ((((r).rx_control[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETECTED_ENf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETTRESTART_ENf_GET(r) ((((r).rx_control[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETTRESTART_ENf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETMONITOR_ENf_GET(r) ((((r).rx_control[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETMONITOR_ENf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_ENf_GET(r) ((((r).rx_control[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_ENf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_VALf_GET(r) ((((r).rx_control[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_VALf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_PHFREQ_RST_DISf_GET(r) ((((r).rx_control[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_PHFREQ_RST_DISf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_FORCERXSEQDONEf_GET(r) ((((r).rx_control[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_FORCERXSEQDONEf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_FORCE_EXT_FRST_SMf_GET(r) ((((r).rx_control[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_FORCE_EXT_FRST_SMf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_CONTROLr_STATUS_SELf_GET(r) (((r).rx_control[0]) & 0x7)
#define BCMI_QSGMII_SERDES_RX_CONTROLr_STATUS_SELf_SET(r,f) (r).rx_control[0]=(((r).rx_control[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access RX_CONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_CONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_CONTROLr,(_r._rx_control))
#define BCMI_QSGMII_SERDES_WRITE_RX_CONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_CONTROLr,(_r._rx_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CONTROLr BCMI_QSGMII_SERDES_RX_CONTROLr
#define RX_CONTROLr_SIZE BCMI_QSGMII_SERDES_RX_CONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_RX_CONTROLr_t RX_CONTROLr_t;
#define RX_CONTROLr_CLR BCMI_QSGMII_SERDES_RX_CONTROLr_CLR
#define RX_CONTROLr_SET BCMI_QSGMII_SERDES_RX_CONTROLr_SET
#define RX_CONTROLr_GET BCMI_QSGMII_SERDES_RX_CONTROLr_GET
#define RX_CONTROLr_RXSEQRESTARTf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_RXSEQRESTARTf_GET
#define RX_CONTROLr_RXSEQRESTARTf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_RXSEQRESTARTf_SET
#define RX_CONTROLr_SIGDETECTED_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETECTED_ENf_GET
#define RX_CONTROLr_SIGDETECTED_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETECTED_ENf_SET
#define RX_CONTROLr_SIGDETTRESTART_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETTRESTART_ENf_GET
#define RX_CONTROLr_SIGDETTRESTART_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETTRESTART_ENf_SET
#define RX_CONTROLr_SIGDETMONITOR_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETMONITOR_ENf_GET
#define RX_CONTROLr_SIGDETMONITOR_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_SIGDETMONITOR_ENf_SET
#define RX_CONTROLr_OVERIDE_SIG_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_ENf_GET
#define RX_CONTROLr_OVERIDE_SIG_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_ENf_SET
#define RX_CONTROLr_OVERIDE_SIG_VALf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_VALf_GET
#define RX_CONTROLr_OVERIDE_SIG_VALf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_OVERIDE_SIG_VALf_SET
#define RX_CONTROLr_PHFREQ_RST_DISf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_PHFREQ_RST_DISf_GET
#define RX_CONTROLr_PHFREQ_RST_DISf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_PHFREQ_RST_DISf_SET
#define RX_CONTROLr_FORCERXSEQDONEf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_FORCERXSEQDONEf_GET
#define RX_CONTROLr_FORCERXSEQDONEf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_FORCERXSEQDONEf_SET
#define RX_CONTROLr_FORCE_EXT_FRST_SMf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_FORCE_EXT_FRST_SMf_GET
#define RX_CONTROLr_FORCE_EXT_FRST_SMf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_FORCE_EXT_FRST_SMf_SET
#define RX_CONTROLr_STATUS_SELf_GET BCMI_QSGMII_SERDES_RX_CONTROLr_STATUS_SELf_GET
#define RX_CONTROLr_STATUS_SELf_SET BCMI_QSGMII_SERDES_RX_CONTROLr_STATUS_SELf_SET
#define READ_RX_CONTROLr BCMI_QSGMII_SERDES_READ_RX_CONTROLr
#define WRITE_RX_CONTROLr BCMI_QSGMII_SERDES_WRITE_RX_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_TIMER_1
 * BLOCKS:   RX
 * REGADDR:  0x80b2
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CDR_ACQ_TIME     
 *     CDR_TRK_TIME     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_TIMER_1r (0x000080b2 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_TIMER_1r_SIZE 4

/*
 * This structure should be used to declare and program RX_TIMER_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_TIMER_1r_s {
	uint32_t v[1];
	uint32_t rx_timer_1[1];
	uint32_t _rx_timer_1;
} BCMI_QSGMII_SERDES_RX_TIMER_1r_t;

#define BCMI_QSGMII_SERDES_RX_TIMER_1r_CLR(r) (r).rx_timer_1[0] = 0
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_SET(r,d) (r).rx_timer_1[0] = d
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_GET(r) (r).rx_timer_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_TRK_TIMEf_GET(r) ((((r).rx_timer_1[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_TRK_TIMEf_SET(r,f) (r).rx_timer_1[0]=(((r).rx_timer_1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_ACQ_TIMEf_GET(r) (((r).rx_timer_1[0]) & 0xff)
#define BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_ACQ_TIMEf_SET(r,f) (r).rx_timer_1[0]=(((r).rx_timer_1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access RX_TIMER_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_TIMER_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_TIMER_1r,(_r._rx_timer_1))
#define BCMI_QSGMII_SERDES_WRITE_RX_TIMER_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_TIMER_1r,(_r._rx_timer_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_TIMER_1r BCMI_QSGMII_SERDES_RX_TIMER_1r
#define RX_TIMER_1r_SIZE BCMI_QSGMII_SERDES_RX_TIMER_1r_SIZE
typedef BCMI_QSGMII_SERDES_RX_TIMER_1r_t RX_TIMER_1r_t;
#define RX_TIMER_1r_CLR BCMI_QSGMII_SERDES_RX_TIMER_1r_CLR
#define RX_TIMER_1r_SET BCMI_QSGMII_SERDES_RX_TIMER_1r_SET
#define RX_TIMER_1r_GET BCMI_QSGMII_SERDES_RX_TIMER_1r_GET
#define RX_TIMER_1r_CDR_TRK_TIMEf_GET BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_TRK_TIMEf_GET
#define RX_TIMER_1r_CDR_TRK_TIMEf_SET BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_TRK_TIMEf_SET
#define RX_TIMER_1r_CDR_ACQ_TIMEf_GET BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_ACQ_TIMEf_GET
#define RX_TIMER_1r_CDR_ACQ_TIMEf_SET BCMI_QSGMII_SERDES_RX_TIMER_1r_CDR_ACQ_TIMEf_SET
#define READ_RX_TIMER_1r BCMI_QSGMII_SERDES_READ_RX_TIMER_1r
#define WRITE_RX_TIMER_1r BCMI_QSGMII_SERDES_WRITE_RX_TIMER_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_TIMER_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANARXACTRL4
 * BLOCKS:   RX
 * REGADDR:  0x80b3
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SATA_ENB         
 *     RXWCLK4_TO_TCLK_ENB 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANARXACTRL4r (0x000080b3 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANARXACTRL4r_SIZE 4

/*
 * This structure should be used to declare and program ANARXACTRL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANARXACTRL4r_s {
	uint32_t v[1];
	uint32_t anarxactrl4[1];
	uint32_t _anarxactrl4;
} BCMI_QSGMII_SERDES_ANARXACTRL4r_t;

#define BCMI_QSGMII_SERDES_ANARXACTRL4r_CLR(r) (r).anarxactrl4[0] = 0
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_SET(r,d) (r).anarxactrl4[0] = d
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_GET(r) (r).anarxactrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_GET(r) ((((r).anarxactrl4[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_SET(r,f) (r).anarxactrl4[0]=(((r).anarxactrl4[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_SATA_ENBf_GET(r) (((r).anarxactrl4[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXACTRL4r_SATA_ENBf_SET(r,f) (r).anarxactrl4[0]=(((r).anarxactrl4[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXACTRL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANARXACTRL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANARXACTRL4r,(_r._anarxactrl4))
#define BCMI_QSGMII_SERDES_WRITE_ANARXACTRL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANARXACTRL4r,(_r._anarxactrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXACTRL4r BCMI_QSGMII_SERDES_ANARXACTRL4r
#define ANARXACTRL4r_SIZE BCMI_QSGMII_SERDES_ANARXACTRL4r_SIZE
typedef BCMI_QSGMII_SERDES_ANARXACTRL4r_t ANARXACTRL4r_t;
#define ANARXACTRL4r_CLR BCMI_QSGMII_SERDES_ANARXACTRL4r_CLR
#define ANARXACTRL4r_SET BCMI_QSGMII_SERDES_ANARXACTRL4r_SET
#define ANARXACTRL4r_GET BCMI_QSGMII_SERDES_ANARXACTRL4r_GET
#define ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_GET BCMI_QSGMII_SERDES_ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_GET
#define ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_SET BCMI_QSGMII_SERDES_ANARXACTRL4r_RXWCLK4_TO_TCLK_ENBf_SET
#define ANARXACTRL4r_SATA_ENBf_GET BCMI_QSGMII_SERDES_ANARXACTRL4r_SATA_ENBf_GET
#define ANARXACTRL4r_SATA_ENBf_SET BCMI_QSGMII_SERDES_ANARXACTRL4r_SATA_ENBf_SET
#define READ_ANARXACTRL4r BCMI_QSGMII_SERDES_READ_ANARXACTRL4r
#define WRITE_ANARXACTRL4r BCMI_QSGMII_SERDES_WRITE_ANARXACTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANARXACTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_SIGDET
 * BLOCKS:   RX
 * REGADDR:  0x80b4
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PHFREQ_RST       
 *     DC_COUPLE_EN     
 *     INVERT_RX_SIGDET 
 *     RX_SIGDET_FORCE  
 *     RX_SIGDET        
 *     CX4_SIGDET_EN_SM 
 *     EXT_SIGDET_EN_SM 
 *     CX4_SIGDET_CNT_LD 
 *     SIGDET_TIME      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_SIGDETr (0x000080b4 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_SIGDETr_SIZE 4

/*
 * This structure should be used to declare and program RX_SIGDET.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_SIGDETr_s {
	uint32_t v[1];
	uint32_t rx_sigdet[1];
	uint32_t _rx_sigdet;
} BCMI_QSGMII_SERDES_RX_SIGDETr_t;

#define BCMI_QSGMII_SERDES_RX_SIGDETr_CLR(r) (r).rx_sigdet[0] = 0
#define BCMI_QSGMII_SERDES_RX_SIGDETr_SET(r,d) (r).rx_sigdet[0] = d
#define BCMI_QSGMII_SERDES_RX_SIGDETr_GET(r) (r).rx_sigdet[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_SIGDETr_SIGDET_TIMEf_GET(r) ((((r).rx_sigdet[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_SIGDET_TIMEf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_CNT_LDf_GET(r) ((((r).rx_sigdet[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_CNT_LDf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_EXT_SIGDET_EN_SMf_GET(r) ((((r).rx_sigdet[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_EXT_SIGDET_EN_SMf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_EN_SMf_GET(r) ((((r).rx_sigdet[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_EN_SMf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDETf_GET(r) ((((r).rx_sigdet[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDETf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDET_FORCEf_GET(r) ((((r).rx_sigdet[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDET_FORCEf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_INVERT_RX_SIGDETf_GET(r) ((((r).rx_sigdet[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_INVERT_RX_SIGDETf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_DC_COUPLE_ENf_GET(r) ((((r).rx_sigdet[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_DC_COUPLE_ENf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX_SIGDETr_PHFREQ_RSTf_GET(r) (((r).rx_sigdet[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_SIGDETr_PHFREQ_RSTf_SET(r,f) (r).rx_sigdet[0]=(((r).rx_sigdet[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_SIGDET.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_SIGDETr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_SIGDETr,(_r._rx_sigdet))
#define BCMI_QSGMII_SERDES_WRITE_RX_SIGDETr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_SIGDETr,(_r._rx_sigdet))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_SIGDETr BCMI_QSGMII_SERDES_RX_SIGDETr
#define RX_SIGDETr_SIZE BCMI_QSGMII_SERDES_RX_SIGDETr_SIZE
typedef BCMI_QSGMII_SERDES_RX_SIGDETr_t RX_SIGDETr_t;
#define RX_SIGDETr_CLR BCMI_QSGMII_SERDES_RX_SIGDETr_CLR
#define RX_SIGDETr_SET BCMI_QSGMII_SERDES_RX_SIGDETr_SET
#define RX_SIGDETr_GET BCMI_QSGMII_SERDES_RX_SIGDETr_GET
#define RX_SIGDETr_SIGDET_TIMEf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_SIGDET_TIMEf_GET
#define RX_SIGDETr_SIGDET_TIMEf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_SIGDET_TIMEf_SET
#define RX_SIGDETr_CX4_SIGDET_CNT_LDf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_CNT_LDf_GET
#define RX_SIGDETr_CX4_SIGDET_CNT_LDf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_CNT_LDf_SET
#define RX_SIGDETr_EXT_SIGDET_EN_SMf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_EXT_SIGDET_EN_SMf_GET
#define RX_SIGDETr_EXT_SIGDET_EN_SMf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_EXT_SIGDET_EN_SMf_SET
#define RX_SIGDETr_CX4_SIGDET_EN_SMf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_EN_SMf_GET
#define RX_SIGDETr_CX4_SIGDET_EN_SMf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_CX4_SIGDET_EN_SMf_SET
#define RX_SIGDETr_RX_SIGDETf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDETf_GET
#define RX_SIGDETr_RX_SIGDETf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDETf_SET
#define RX_SIGDETr_RX_SIGDET_FORCEf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDET_FORCEf_GET
#define RX_SIGDETr_RX_SIGDET_FORCEf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_RX_SIGDET_FORCEf_SET
#define RX_SIGDETr_INVERT_RX_SIGDETf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_INVERT_RX_SIGDETf_GET
#define RX_SIGDETr_INVERT_RX_SIGDETf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_INVERT_RX_SIGDETf_SET
#define RX_SIGDETr_DC_COUPLE_ENf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_DC_COUPLE_ENf_GET
#define RX_SIGDETr_DC_COUPLE_ENf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_DC_COUPLE_ENf_SET
#define RX_SIGDETr_PHFREQ_RSTf_GET BCMI_QSGMII_SERDES_RX_SIGDETr_PHFREQ_RSTf_GET
#define RX_SIGDETr_PHFREQ_RSTf_SET BCMI_QSGMII_SERDES_RX_SIGDETr_PHFREQ_RSTf_SET
#define READ_RX_SIGDETr BCMI_QSGMII_SERDES_READ_RX_SIGDETr
#define WRITE_RX_SIGDETr BCMI_QSGMII_SERDES_WRITE_RX_SIGDETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_SIGDETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_CDRPHASE
 * BLOCKS:   RX
 * REGADDR:  0x80b5
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PHASE_DELTA      
 *     PHASE_STROBE     
 *     PHASE_DEC        
 *     PHASE_INC        
 *     PHASE_OVERRIDE   
 *     PHASE_OFFSET     
 *     PHASE_FREEZE_VAL 
 *     PHASE_FREEZE_EN  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr (0x000080b5 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_SIZE 4

/*
 * This structure should be used to declare and program RX_CDRPHASE.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_CDRPHASEr_s {
	uint32_t v[1];
	uint32_t rx_cdrphase[1];
	uint32_t _rx_cdrphase;
} BCMI_QSGMII_SERDES_RX_CDRPHASEr_t;

#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_CLR(r) (r).rx_cdrphase[0] = 0
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_SET(r,d) (r).rx_cdrphase[0] = d
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_GET(r) (r).rx_cdrphase[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_ENf_GET(r) ((((r).rx_cdrphase[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_ENf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_VALf_GET(r) ((((r).rx_cdrphase[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_VALf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OFFSETf_GET(r) ((((r).rx_cdrphase[0]) >> 8) & 0x3f)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OFFSETf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OVERRIDEf_GET(r) ((((r).rx_cdrphase[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OVERRIDEf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_INCf_GET(r) ((((r).rx_cdrphase[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_INCf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DECf_GET(r) ((((r).rx_cdrphase[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DECf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_STROBEf_GET(r) ((((r).rx_cdrphase[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_STROBEf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DELTAf_GET(r) (((r).rx_cdrphase[0]) & 0xf)
#define BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DELTAf_SET(r,f) (r).rx_cdrphase[0]=(((r).rx_cdrphase[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RX_CDRPHASE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_CDRPHASEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_CDRPHASEr,(_r._rx_cdrphase))
#define BCMI_QSGMII_SERDES_WRITE_RX_CDRPHASEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_CDRPHASEr,(_r._rx_cdrphase))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CDRPHASEr BCMI_QSGMII_SERDES_RX_CDRPHASEr
#define RX_CDRPHASEr_SIZE BCMI_QSGMII_SERDES_RX_CDRPHASEr_SIZE
typedef BCMI_QSGMII_SERDES_RX_CDRPHASEr_t RX_CDRPHASEr_t;
#define RX_CDRPHASEr_CLR BCMI_QSGMII_SERDES_RX_CDRPHASEr_CLR
#define RX_CDRPHASEr_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_SET
#define RX_CDRPHASEr_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_GET
#define RX_CDRPHASEr_PHASE_FREEZE_ENf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_ENf_GET
#define RX_CDRPHASEr_PHASE_FREEZE_ENf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_ENf_SET
#define RX_CDRPHASEr_PHASE_FREEZE_VALf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_VALf_GET
#define RX_CDRPHASEr_PHASE_FREEZE_VALf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_FREEZE_VALf_SET
#define RX_CDRPHASEr_PHASE_OFFSETf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OFFSETf_GET
#define RX_CDRPHASEr_PHASE_OFFSETf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OFFSETf_SET
#define RX_CDRPHASEr_PHASE_OVERRIDEf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OVERRIDEf_GET
#define RX_CDRPHASEr_PHASE_OVERRIDEf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_OVERRIDEf_SET
#define RX_CDRPHASEr_PHASE_INCf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_INCf_GET
#define RX_CDRPHASEr_PHASE_INCf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_INCf_SET
#define RX_CDRPHASEr_PHASE_DECf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DECf_GET
#define RX_CDRPHASEr_PHASE_DECf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DECf_SET
#define RX_CDRPHASEr_PHASE_STROBEf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_STROBEf_GET
#define RX_CDRPHASEr_PHASE_STROBEf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_STROBEf_SET
#define RX_CDRPHASEr_PHASE_DELTAf_GET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DELTAf_GET
#define RX_CDRPHASEr_PHASE_DELTAf_SET BCMI_QSGMII_SERDES_RX_CDRPHASEr_PHASE_DELTAf_SET
#define READ_RX_CDRPHASEr BCMI_QSGMII_SERDES_READ_RX_CDRPHASEr
#define WRITE_RX_CDRPHASEr BCMI_QSGMII_SERDES_WRITE_RX_CDRPHASEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_CDRPHASEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_CDRFREQ
 * BLOCKS:   RX
 * REGADDR:  0x80b6
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FREQ_OVERRIDE_VAL 
 *     FREQ_OVERRIDE_EN 
 *     FLIP_POLARITY    
 *     FALLING_EDGE     
 *     BWSEL_INTG_TRCK  
 *     BWSEL_PROP_TRCK  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_CDRFREQr (0x000080b6 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_CDRFREQr_SIZE 4

/*
 * This structure should be used to declare and program RX_CDRFREQ.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_CDRFREQr_s {
	uint32_t v[1];
	uint32_t rx_cdrfreq[1];
	uint32_t _rx_cdrfreq;
} BCMI_QSGMII_SERDES_RX_CDRFREQr_t;

#define BCMI_QSGMII_SERDES_RX_CDRFREQr_CLR(r) (r).rx_cdrfreq[0] = 0
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_SET(r,d) (r).rx_cdrfreq[0] = d
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_GET(r) (r).rx_cdrfreq[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_PROP_TRCKf_GET(r) ((((r).rx_cdrfreq[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_PROP_TRCKf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_INTG_TRCKf_GET(r) ((((r).rx_cdrfreq[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_INTG_TRCKf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FALLING_EDGEf_GET(r) ((((r).rx_cdrfreq[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FALLING_EDGEf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FLIP_POLARITYf_GET(r) ((((r).rx_cdrfreq[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FLIP_POLARITYf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_ENf_GET(r) ((((r).rx_cdrfreq[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_ENf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_VALf_GET(r) (((r).rx_cdrfreq[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_VALf_SET(r,f) (r).rx_cdrfreq[0]=(((r).rx_cdrfreq[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RX_CDRFREQ.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_CDRFREQr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_CDRFREQr,(_r._rx_cdrfreq))
#define BCMI_QSGMII_SERDES_WRITE_RX_CDRFREQr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_CDRFREQr,(_r._rx_cdrfreq))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CDRFREQr BCMI_QSGMII_SERDES_RX_CDRFREQr
#define RX_CDRFREQr_SIZE BCMI_QSGMII_SERDES_RX_CDRFREQr_SIZE
typedef BCMI_QSGMII_SERDES_RX_CDRFREQr_t RX_CDRFREQr_t;
#define RX_CDRFREQr_CLR BCMI_QSGMII_SERDES_RX_CDRFREQr_CLR
#define RX_CDRFREQr_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_SET
#define RX_CDRFREQr_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_GET
#define RX_CDRFREQr_BWSEL_PROP_TRCKf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_PROP_TRCKf_GET
#define RX_CDRFREQr_BWSEL_PROP_TRCKf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_PROP_TRCKf_SET
#define RX_CDRFREQr_BWSEL_INTG_TRCKf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_INTG_TRCKf_GET
#define RX_CDRFREQr_BWSEL_INTG_TRCKf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_BWSEL_INTG_TRCKf_SET
#define RX_CDRFREQr_FALLING_EDGEf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_FALLING_EDGEf_GET
#define RX_CDRFREQr_FALLING_EDGEf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_FALLING_EDGEf_SET
#define RX_CDRFREQr_FLIP_POLARITYf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_FLIP_POLARITYf_GET
#define RX_CDRFREQr_FLIP_POLARITYf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_FLIP_POLARITYf_SET
#define RX_CDRFREQr_FREQ_OVERRIDE_ENf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_ENf_GET
#define RX_CDRFREQr_FREQ_OVERRIDE_ENf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_ENf_SET
#define RX_CDRFREQr_FREQ_OVERRIDE_VALf_GET BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_VALf_GET
#define RX_CDRFREQr_FREQ_OVERRIDE_VALf_SET BCMI_QSGMII_SERDES_RX_CDRFREQr_FREQ_OVERRIDE_VALf_SET
#define READ_RX_CDRFREQr BCMI_QSGMII_SERDES_READ_RX_CDRFREQr
#define WRITE_RX_CDRFREQr BCMI_QSGMII_SERDES_WRITE_RX_CDRFREQr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_CDRFREQr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_EQCONFIG
 * BLOCKS:   RX
 * REGADDR:  0x80b7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     BWSEL_INTG_ACQ_0 
 *     BWSEL_PROP_ACQ   
 *     BWSEL_INTG_ACQ_1 
 *     BWSEL_PROP_ACQ_1 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr (0x000080b7 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_SIZE 4

/*
 * This structure should be used to declare and program RX_EQCONFIG.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_EQCONFIGr_s {
	uint32_t v[1];
	uint32_t rx_eqconfig[1];
	uint32_t _rx_eqconfig;
} BCMI_QSGMII_SERDES_RX_EQCONFIGr_t;

#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_CLR(r) (r).rx_eqconfig[0] = 0
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_SET(r,d) (r).rx_eqconfig[0] = d
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_GET(r) (r).rx_eqconfig[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_GET(r) ((((r).rx_eqconfig[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_SET(r,f) (r).rx_eqconfig[0]=(((r).rx_eqconfig[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_GET(r) ((((r).rx_eqconfig[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_SET(r,f) (r).rx_eqconfig[0]=(((r).rx_eqconfig[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQf_GET(r) ((((r).rx_eqconfig[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQf_SET(r,f) (r).rx_eqconfig[0]=(((r).rx_eqconfig[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_GET(r) (((r).rx_eqconfig[0]) & 0xf)
#define BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_SET(r,f) (r).rx_eqconfig[0]=(((r).rx_eqconfig[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access RX_EQCONFIG.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_EQCONFIGr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_EQCONFIGr,(_r._rx_eqconfig))
#define BCMI_QSGMII_SERDES_WRITE_RX_EQCONFIGr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_EQCONFIGr,(_r._rx_eqconfig))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_EQCONFIGr BCMI_QSGMII_SERDES_RX_EQCONFIGr
#define RX_EQCONFIGr_SIZE BCMI_QSGMII_SERDES_RX_EQCONFIGr_SIZE
typedef BCMI_QSGMII_SERDES_RX_EQCONFIGr_t RX_EQCONFIGr_t;
#define RX_EQCONFIGr_CLR BCMI_QSGMII_SERDES_RX_EQCONFIGr_CLR
#define RX_EQCONFIGr_SET BCMI_QSGMII_SERDES_RX_EQCONFIGr_SET
#define RX_EQCONFIGr_GET BCMI_QSGMII_SERDES_RX_EQCONFIGr_GET
#define RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_GET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_GET
#define RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_SET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQ_1f_SET
#define RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_GET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_GET
#define RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_SET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_1f_SET
#define RX_EQCONFIGr_BWSEL_PROP_ACQf_GET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQf_GET
#define RX_EQCONFIGr_BWSEL_PROP_ACQf_SET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_PROP_ACQf_SET
#define RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_GET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_GET
#define RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_SET BCMI_QSGMII_SERDES_RX_EQCONFIGr_BWSEL_INTG_ACQ_0f_SET
#define READ_RX_EQCONFIGr BCMI_QSGMII_SERDES_READ_RX_EQCONFIGr
#define WRITE_RX_EQCONFIGr BCMI_QSGMII_SERDES_WRITE_RX_EQCONFIGr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_EQCONFIGr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_TEST
 * BLOCKS:   RX
 * REGADDR:  0x80b8
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RESERVED         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_TESTr (0x000080b8 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_TESTr_SIZE 4

/*
 * This structure should be used to declare and program RX_TEST.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_TESTr_s {
	uint32_t v[1];
	uint32_t rx_test[1];
	uint32_t _rx_test;
} BCMI_QSGMII_SERDES_RX_TESTr_t;

#define BCMI_QSGMII_SERDES_RX_TESTr_CLR(r) (r).rx_test[0] = 0
#define BCMI_QSGMII_SERDES_RX_TESTr_SET(r,d) (r).rx_test[0] = d
#define BCMI_QSGMII_SERDES_RX_TESTr_GET(r) (r).rx_test[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_TESTr_RESERVEDf_GET(r) (((r).rx_test[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_TESTr_RESERVEDf_SET(r,f) (r).rx_test[0]=(((r).rx_test[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_TEST.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_TESTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_TESTr,(_r._rx_test))
#define BCMI_QSGMII_SERDES_WRITE_RX_TESTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_TESTr,(_r._rx_test))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_TESTr BCMI_QSGMII_SERDES_RX_TESTr
#define RX_TESTr_SIZE BCMI_QSGMII_SERDES_RX_TESTr_SIZE
typedef BCMI_QSGMII_SERDES_RX_TESTr_t RX_TESTr_t;
#define RX_TESTr_CLR BCMI_QSGMII_SERDES_RX_TESTr_CLR
#define RX_TESTr_SET BCMI_QSGMII_SERDES_RX_TESTr_SET
#define RX_TESTr_GET BCMI_QSGMII_SERDES_RX_TESTr_GET
#define RX_TESTr_RESERVEDf_GET BCMI_QSGMII_SERDES_RX_TESTr_RESERVEDf_GET
#define RX_TESTr_RESERVEDf_SET BCMI_QSGMII_SERDES_RX_TESTr_RESERVEDf_SET
#define READ_RX_TESTr BCMI_QSGMII_SERDES_READ_RX_TESTr
#define WRITE_RX_TESTr BCMI_QSGMII_SERDES_WRITE_RX_TESTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_TESTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_CONTROL_1G
 * BLOCKS:   RX
 * REGADDR:  0x80b9
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL         
 *     FREQ_SEL_FORCE   
 *     PHASE_SEL        
 *     RTBI_FLIP        
 *     RTBI_CKFLIP      
 *     CSTRETCH         
 *     CGBAD_EN         
 *     PRBS_EN          
 *     EMON_EN          
 *     CGBAD_TST        
 *     RXD_DEC_SEL      
 *     PRBS_CLR_DIS     
 *     STAMUXREGDIS     
 *     PKT_COUNT_EN     
 *     FPAT_MD          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr (0x000080b9 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_SIZE 4

/*
 * This structure should be used to declare and program RX_CONTROL_1G.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_s {
	uint32_t v[1];
	uint32_t rx_control_1g[1];
	uint32_t _rx_control_1g;
} BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_t;

#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CLR(r) (r).rx_control_1g[0] = 0
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_SET(r,d) (r).rx_control_1g[0] = d
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_GET(r) (r).rx_control_1g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FPAT_MDf_GET(r) ((((r).rx_control_1g[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FPAT_MDf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PKT_COUNT_ENf_GET(r) ((((r).rx_control_1g[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PKT_COUNT_ENf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_STAMUXREGDISf_GET(r) ((((r).rx_control_1g[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_STAMUXREGDISf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_CLR_DISf_GET(r) ((((r).rx_control_1g[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_CLR_DISf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RXD_DEC_SELf_GET(r) ((((r).rx_control_1g[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RXD_DEC_SELf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_TSTf_GET(r) ((((r).rx_control_1g[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_TSTf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_EMON_ENf_GET(r) ((((r).rx_control_1g[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_EMON_ENf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_ENf_GET(r) ((((r).rx_control_1g[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_ENf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_ENf_GET(r) ((((r).rx_control_1g[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_ENf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CSTRETCHf_GET(r) ((((r).rx_control_1g[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CSTRETCHf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_CKFLIPf_GET(r) ((((r).rx_control_1g[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_CKFLIPf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_FLIPf_GET(r) ((((r).rx_control_1g[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_FLIPf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PHASE_SELf_GET(r) ((((r).rx_control_1g[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PHASE_SELf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SEL_FORCEf_GET(r) ((((r).rx_control_1g[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SEL_FORCEf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SELf_GET(r) (((r).rx_control_1g[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SELf_SET(r,f) (r).rx_control_1g[0]=(((r).rx_control_1g[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_CONTROL_1G.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_CONTROL_1Gr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_CONTROL_1Gr,(_r._rx_control_1g))
#define BCMI_QSGMII_SERDES_WRITE_RX_CONTROL_1Gr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_CONTROL_1Gr,(_r._rx_control_1g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CONTROL_1Gr BCMI_QSGMII_SERDES_RX_CONTROL_1Gr
#define RX_CONTROL_1Gr_SIZE BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_SIZE
typedef BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_t RX_CONTROL_1Gr_t;
#define RX_CONTROL_1Gr_CLR BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CLR
#define RX_CONTROL_1Gr_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_SET
#define RX_CONTROL_1Gr_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_GET
#define RX_CONTROL_1Gr_FPAT_MDf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FPAT_MDf_GET
#define RX_CONTROL_1Gr_FPAT_MDf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FPAT_MDf_SET
#define RX_CONTROL_1Gr_PKT_COUNT_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PKT_COUNT_ENf_GET
#define RX_CONTROL_1Gr_PKT_COUNT_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PKT_COUNT_ENf_SET
#define RX_CONTROL_1Gr_STAMUXREGDISf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_STAMUXREGDISf_GET
#define RX_CONTROL_1Gr_STAMUXREGDISf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_STAMUXREGDISf_SET
#define RX_CONTROL_1Gr_PRBS_CLR_DISf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_CLR_DISf_GET
#define RX_CONTROL_1Gr_PRBS_CLR_DISf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_CLR_DISf_SET
#define RX_CONTROL_1Gr_RXD_DEC_SELf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RXD_DEC_SELf_GET
#define RX_CONTROL_1Gr_RXD_DEC_SELf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RXD_DEC_SELf_SET
#define RX_CONTROL_1Gr_CGBAD_TSTf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_TSTf_GET
#define RX_CONTROL_1Gr_CGBAD_TSTf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_TSTf_SET
#define RX_CONTROL_1Gr_EMON_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_EMON_ENf_GET
#define RX_CONTROL_1Gr_EMON_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_EMON_ENf_SET
#define RX_CONTROL_1Gr_PRBS_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_ENf_GET
#define RX_CONTROL_1Gr_PRBS_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PRBS_ENf_SET
#define RX_CONTROL_1Gr_CGBAD_ENf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_ENf_GET
#define RX_CONTROL_1Gr_CGBAD_ENf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CGBAD_ENf_SET
#define RX_CONTROL_1Gr_CSTRETCHf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CSTRETCHf_GET
#define RX_CONTROL_1Gr_CSTRETCHf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_CSTRETCHf_SET
#define RX_CONTROL_1Gr_RTBI_CKFLIPf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_CKFLIPf_GET
#define RX_CONTROL_1Gr_RTBI_CKFLIPf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_CKFLIPf_SET
#define RX_CONTROL_1Gr_RTBI_FLIPf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_FLIPf_GET
#define RX_CONTROL_1Gr_RTBI_FLIPf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_RTBI_FLIPf_SET
#define RX_CONTROL_1Gr_PHASE_SELf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PHASE_SELf_GET
#define RX_CONTROL_1Gr_PHASE_SELf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_PHASE_SELf_SET
#define RX_CONTROL_1Gr_FREQ_SEL_FORCEf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SEL_FORCEf_GET
#define RX_CONTROL_1Gr_FREQ_SEL_FORCEf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SEL_FORCEf_SET
#define RX_CONTROL_1Gr_FREQ_SELf_GET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SELf_GET
#define RX_CONTROL_1Gr_FREQ_SELf_SET BCMI_QSGMII_SERDES_RX_CONTROL_1Gr_FREQ_SELf_SET
#define READ_RX_CONTROL_1Gr BCMI_QSGMII_SERDES_READ_RX_CONTROL_1Gr
#define WRITE_RX_CONTROL_1Gr BCMI_QSGMII_SERDES_WRITE_RX_CONTROL_1Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_CONTROL_1Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_CONTROL_PCIE
 * BLOCKS:   RX
 * REGADDR:  0x80ba
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     INTEG_MODE       
 *     RX_POLARITY_R    
 *     RX_POLARITY_FORCE_R 
 *     LINK_EN_R        
 *     LINK_EN_FORCE_R  
 *     COMMA_ADJ_EN_R   
 *     COMMA_ADJ_EN_FORCE_R 
 *     COMMA_ADJ_EN_FORCE_SYNC 
 *     COMMA_ADJ_EN_FORCE_EXT 
 *     SYNC_STATUS_R    
 *     SYNC_STATUS_FORCE_R 
 *     SYNC_STATUS_FORCE_SYNC 
 *     COM_MASK         
 *     COM_MASK_FORCE_R 
 *     COMMA_ADJ_SYNC_SEL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr (0x000080ba | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SIZE 4

/*
 * This structure should be used to declare and program RX_CONTROL_PCIE.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_s {
	uint32_t v[1];
	uint32_t rx_control_pcie[1];
	uint32_t _rx_control_pcie;
} BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_t;

#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_CLR(r) (r).rx_control_pcie[0] = 0
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SET(r,d) (r).rx_control_pcie[0] = d
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_GET(r) (r).rx_control_pcie[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_GET(r) ((((r).rx_control_pcie[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASKf_GET(r) ((((r).rx_control_pcie[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASKf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_GET(r) ((((r).rx_control_pcie[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_GET(r) ((((r).rx_control_pcie[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_GET(r) ((((r).rx_control_pcie[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_Rf_GET(r) ((((r).rx_control_pcie[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_Rf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_INTEG_MODEf_GET(r) (((r).rx_control_pcie[0]) & 0x3)
#define BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_INTEG_MODEf_SET(r,f) (r).rx_control_pcie[0]=(((r).rx_control_pcie[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RX_CONTROL_PCIE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_CONTROL_PCIEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr,(_r._rx_control_pcie))
#define BCMI_QSGMII_SERDES_WRITE_RX_CONTROL_PCIEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr,(_r._rx_control_pcie))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_CONTROL_PCIEr BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr
#define RX_CONTROL_PCIEr_SIZE BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SIZE
typedef BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_t RX_CONTROL_PCIEr_t;
#define RX_CONTROL_PCIEr_CLR BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_CLR
#define RX_CONTROL_PCIEr_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SET
#define RX_CONTROL_PCIEr_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_SYNC_SELf_SET
#define RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_GET
#define RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASK_FORCE_Rf_SET
#define RX_CONTROL_PCIEr_COM_MASKf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASKf_GET
#define RX_CONTROL_PCIEr_COM_MASKf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COM_MASKf_SET
#define RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_GET
#define RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_SYNCf_SET
#define RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_GET
#define RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_FORCE_Rf_SET
#define RX_CONTROL_PCIEr_SYNC_STATUS_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_Rf_GET
#define RX_CONTROL_PCIEr_SYNC_STATUS_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_SYNC_STATUS_Rf_SET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_EXTf_SET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_SYNCf_SET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_FORCE_Rf_SET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_GET
#define RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_COMMA_ADJ_EN_Rf_SET
#define RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_GET
#define RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_FORCE_Rf_SET
#define RX_CONTROL_PCIEr_LINK_EN_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_Rf_GET
#define RX_CONTROL_PCIEr_LINK_EN_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_LINK_EN_Rf_SET
#define RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_GET
#define RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_FORCE_Rf_SET
#define RX_CONTROL_PCIEr_RX_POLARITY_Rf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_Rf_GET
#define RX_CONTROL_PCIEr_RX_POLARITY_Rf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_RX_POLARITY_Rf_SET
#define RX_CONTROL_PCIEr_INTEG_MODEf_GET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_INTEG_MODEf_GET
#define RX_CONTROL_PCIEr_INTEG_MODEf_SET BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr_INTEG_MODEf_SET
#define READ_RX_CONTROL_PCIEr BCMI_QSGMII_SERDES_READ_RX_CONTROL_PCIEr
#define WRITE_RX_CONTROL_PCIEr BCMI_QSGMII_SERDES_WRITE_RX_CONTROL_PCIEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_CONTROL_PCIEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_ASTATUS
 * BLOCKS:   RX
 * REGADDR:  0x80bb
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SIGDET           
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_ASTATUSr (0x000080bb | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_ASTATUSr_SIZE 4

/*
 * This structure should be used to declare and program RX_ASTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_ASTATUSr_s {
	uint32_t v[1];
	uint32_t rx_astatus[1];
	uint32_t _rx_astatus;
} BCMI_QSGMII_SERDES_RX_ASTATUSr_t;

#define BCMI_QSGMII_SERDES_RX_ASTATUSr_CLR(r) (r).rx_astatus[0] = 0
#define BCMI_QSGMII_SERDES_RX_ASTATUSr_SET(r,d) (r).rx_astatus[0] = d
#define BCMI_QSGMII_SERDES_RX_ASTATUSr_GET(r) (r).rx_astatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_ASTATUSr_SIGDETf_GET(r) (((r).rx_astatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_ASTATUSr_SIGDETf_SET(r,f) (r).rx_astatus[0]=(((r).rx_astatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_ASTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_ASTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_ASTATUSr,(_r._rx_astatus))
#define BCMI_QSGMII_SERDES_WRITE_RX_ASTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_ASTATUSr,(_r._rx_astatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_ASTATUSr BCMI_QSGMII_SERDES_RX_ASTATUSr
#define RX_ASTATUSr_SIZE BCMI_QSGMII_SERDES_RX_ASTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_RX_ASTATUSr_t RX_ASTATUSr_t;
#define RX_ASTATUSr_CLR BCMI_QSGMII_SERDES_RX_ASTATUSr_CLR
#define RX_ASTATUSr_SET BCMI_QSGMII_SERDES_RX_ASTATUSr_SET
#define RX_ASTATUSr_GET BCMI_QSGMII_SERDES_RX_ASTATUSr_GET
#define RX_ASTATUSr_SIGDETf_GET BCMI_QSGMII_SERDES_RX_ASTATUSr_SIGDETf_GET
#define RX_ASTATUSr_SIGDETf_SET BCMI_QSGMII_SERDES_RX_ASTATUSr_SIGDETf_SET
#define READ_RX_ASTATUSr BCMI_QSGMII_SERDES_READ_RX_ASTATUSr
#define WRITE_RX_ASTATUSr BCMI_QSGMII_SERDES_WRITE_RX_ASTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_ASTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_EQ_BOOST
 * BLOCKS:   RX
 * REGADDR:  0x80bc
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IMIN_ICM         
 *     IMODE_ICM        
 *     IMAX_ICM         
 *     IMIN_SIGDET      
 *     IMODE_SIGDET     
 *     IMAX_SIGDET      
 *     IMIN_EQBUF1      
 *     IMODE_EQBUF1     
 *     IMAX_EQBUF1      
 *     IMIN_EQBUF2      
 *     IMODE_EQBUF2     
 *     IMAX_EQBUF2      
 *     IMIN_EQBUF3      
 *     IMODE_EQBUF3     
 *     IMAX_EQBUF3      
 *     IMIN_DIV2        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr (0x000080bc | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_SIZE 4

/*
 * This structure should be used to declare and program RX_EQ_BOOST.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_s {
	uint32_t v[1];
	uint32_t rx_eq_boost[1];
	uint32_t _rx_eq_boost;
} BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_t;

#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_CLR(r) (r).rx_eq_boost[0] = 0
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_SET(r,d) (r).rx_eq_boost[0] = d
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_GET(r) (r).rx_eq_boost[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_DIV2f_GET(r) ((((r).rx_eq_boost[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_DIV2f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF3f_GET(r) ((((r).rx_eq_boost[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF3f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF3f_GET(r) ((((r).rx_eq_boost[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF3f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF3f_GET(r) ((((r).rx_eq_boost[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF3f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF2f_GET(r) ((((r).rx_eq_boost[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF2f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF2f_GET(r) ((((r).rx_eq_boost[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF2f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF2f_GET(r) ((((r).rx_eq_boost[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF2f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF1f_GET(r) ((((r).rx_eq_boost[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF1f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF1f_GET(r) ((((r).rx_eq_boost[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF1f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF1f_GET(r) ((((r).rx_eq_boost[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF1f_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_SIGDETf_GET(r) ((((r).rx_eq_boost[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_SIGDETf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_SIGDETf_GET(r) ((((r).rx_eq_boost[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_SIGDETf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_SIGDETf_GET(r) ((((r).rx_eq_boost[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_SIGDETf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_ICMf_GET(r) ((((r).rx_eq_boost[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_ICMf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_ICMf_GET(r) ((((r).rx_eq_boost[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_ICMf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_ICMf_GET(r) (((r).rx_eq_boost[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_ICMf_SET(r,f) (r).rx_eq_boost[0]=(((r).rx_eq_boost[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_EQ_BOOST.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_EQ_BOOSTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_EQ_BOOSTr,(_r._rx_eq_boost))
#define BCMI_QSGMII_SERDES_WRITE_RX_EQ_BOOSTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_EQ_BOOSTr,(_r._rx_eq_boost))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_EQ_BOOSTr BCMI_QSGMII_SERDES_RX_EQ_BOOSTr
#define RX_EQ_BOOSTr_SIZE BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_SIZE
typedef BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_t RX_EQ_BOOSTr_t;
#define RX_EQ_BOOSTr_CLR BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_CLR
#define RX_EQ_BOOSTr_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_SET
#define RX_EQ_BOOSTr_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_GET
#define RX_EQ_BOOSTr_IMIN_DIV2f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_DIV2f_GET
#define RX_EQ_BOOSTr_IMIN_DIV2f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_DIV2f_SET
#define RX_EQ_BOOSTr_IMAX_EQBUF3f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF3f_GET
#define RX_EQ_BOOSTr_IMAX_EQBUF3f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF3f_SET
#define RX_EQ_BOOSTr_IMODE_EQBUF3f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF3f_GET
#define RX_EQ_BOOSTr_IMODE_EQBUF3f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF3f_SET
#define RX_EQ_BOOSTr_IMIN_EQBUF3f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF3f_GET
#define RX_EQ_BOOSTr_IMIN_EQBUF3f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF3f_SET
#define RX_EQ_BOOSTr_IMAX_EQBUF2f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF2f_GET
#define RX_EQ_BOOSTr_IMAX_EQBUF2f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF2f_SET
#define RX_EQ_BOOSTr_IMODE_EQBUF2f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF2f_GET
#define RX_EQ_BOOSTr_IMODE_EQBUF2f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF2f_SET
#define RX_EQ_BOOSTr_IMIN_EQBUF2f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF2f_GET
#define RX_EQ_BOOSTr_IMIN_EQBUF2f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF2f_SET
#define RX_EQ_BOOSTr_IMAX_EQBUF1f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF1f_GET
#define RX_EQ_BOOSTr_IMAX_EQBUF1f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_EQBUF1f_SET
#define RX_EQ_BOOSTr_IMODE_EQBUF1f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF1f_GET
#define RX_EQ_BOOSTr_IMODE_EQBUF1f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_EQBUF1f_SET
#define RX_EQ_BOOSTr_IMIN_EQBUF1f_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF1f_GET
#define RX_EQ_BOOSTr_IMIN_EQBUF1f_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_EQBUF1f_SET
#define RX_EQ_BOOSTr_IMAX_SIGDETf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_SIGDETf_GET
#define RX_EQ_BOOSTr_IMAX_SIGDETf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_SIGDETf_SET
#define RX_EQ_BOOSTr_IMODE_SIGDETf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_SIGDETf_GET
#define RX_EQ_BOOSTr_IMODE_SIGDETf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_SIGDETf_SET
#define RX_EQ_BOOSTr_IMIN_SIGDETf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_SIGDETf_GET
#define RX_EQ_BOOSTr_IMIN_SIGDETf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_SIGDETf_SET
#define RX_EQ_BOOSTr_IMAX_ICMf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_ICMf_GET
#define RX_EQ_BOOSTr_IMAX_ICMf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMAX_ICMf_SET
#define RX_EQ_BOOSTr_IMODE_ICMf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_ICMf_GET
#define RX_EQ_BOOSTr_IMODE_ICMf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMODE_ICMf_SET
#define RX_EQ_BOOSTr_IMIN_ICMf_GET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_ICMf_GET
#define RX_EQ_BOOSTr_IMIN_ICMf_SET BCMI_QSGMII_SERDES_RX_EQ_BOOSTr_IMIN_ICMf_SET
#define READ_RX_EQ_BOOSTr BCMI_QSGMII_SERDES_READ_RX_EQ_BOOSTr
#define WRITE_RX_EQ_BOOSTr BCMI_QSGMII_SERDES_WRITE_RX_EQ_BOOSTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_EQ_BOOSTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_IB_DATA_EQ
 * BLOCKS:   RX
 * REGADDR:  0x80bd
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     IMODE_DIV2       
 *     IMAX_DIV2        
 *     IMIN_IBUF        
 *     IMODE_IBUF       
 *     IMAX_IBUF        
 *     IMIN_SLIC        
 *     IMODE_SLIC       
 *     IMAX_SLIC        
 *     IMIN_EQ          
 *     IMODE_EQ         
 *     IMAX_EQ          
 *     IMIN_PI          
 *     IMODE_PI         
 *     IMAX_PI          
 *     SIGDET_RC_CTRL_0 
 *     SIGDET_RC_CTRL_1 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr (0x000080bd | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIZE 4

/*
 * This structure should be used to declare and program RX_IB_DATA_EQ.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_s {
	uint32_t v[1];
	uint32_t rx_ib_data_eq[1];
	uint32_t _rx_ib_data_eq;
} BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_t;

#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_CLR(r) (r).rx_ib_data_eq[0] = 0
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SET(r,d) (r).rx_ib_data_eq[0] = d
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_GET(r) (r).rx_ib_data_eq[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_GET(r) ((((r).rx_ib_data_eq[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_GET(r) ((((r).rx_ib_data_eq[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_PIf_GET(r) ((((r).rx_ib_data_eq[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_PIf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_PIf_GET(r) ((((r).rx_ib_data_eq[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_PIf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_PIf_GET(r) ((((r).rx_ib_data_eq[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_PIf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_EQf_GET(r) ((((r).rx_ib_data_eq[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_EQf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_EQf_GET(r) ((((r).rx_ib_data_eq[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_EQf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_EQf_GET(r) ((((r).rx_ib_data_eq[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_EQf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_SLICf_GET(r) ((((r).rx_ib_data_eq[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_SLICf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_SLICf_GET(r) ((((r).rx_ib_data_eq[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_SLICf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_SLICf_GET(r) ((((r).rx_ib_data_eq[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_SLICf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_IBUFf_GET(r) ((((r).rx_ib_data_eq[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_IBUFf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_IBUFf_GET(r) ((((r).rx_ib_data_eq[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_IBUFf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_IBUFf_GET(r) ((((r).rx_ib_data_eq[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_IBUFf_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_DIV2f_GET(r) ((((r).rx_ib_data_eq[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_DIV2f_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_DIV2f_GET(r) (((r).rx_ib_data_eq[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_DIV2f_SET(r,f) (r).rx_ib_data_eq[0]=(((r).rx_ib_data_eq[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_IB_DATA_EQ.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_IB_DATA_EQr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_IB_DATA_EQr,(_r._rx_ib_data_eq))
#define BCMI_QSGMII_SERDES_WRITE_RX_IB_DATA_EQr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_IB_DATA_EQr,(_r._rx_ib_data_eq))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_IB_DATA_EQr BCMI_QSGMII_SERDES_RX_IB_DATA_EQr
#define RX_IB_DATA_EQr_SIZE BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIZE
typedef BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_t RX_IB_DATA_EQr_t;
#define RX_IB_DATA_EQr_CLR BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_CLR
#define RX_IB_DATA_EQr_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SET
#define RX_IB_DATA_EQr_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_GET
#define RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_GET
#define RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_1f_SET
#define RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_GET
#define RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_SIGDET_RC_CTRL_0f_SET
#define RX_IB_DATA_EQr_IMAX_PIf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_PIf_GET
#define RX_IB_DATA_EQr_IMAX_PIf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_PIf_SET
#define RX_IB_DATA_EQr_IMODE_PIf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_PIf_GET
#define RX_IB_DATA_EQr_IMODE_PIf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_PIf_SET
#define RX_IB_DATA_EQr_IMIN_PIf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_PIf_GET
#define RX_IB_DATA_EQr_IMIN_PIf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_PIf_SET
#define RX_IB_DATA_EQr_IMAX_EQf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_EQf_GET
#define RX_IB_DATA_EQr_IMAX_EQf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_EQf_SET
#define RX_IB_DATA_EQr_IMODE_EQf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_EQf_GET
#define RX_IB_DATA_EQr_IMODE_EQf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_EQf_SET
#define RX_IB_DATA_EQr_IMIN_EQf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_EQf_GET
#define RX_IB_DATA_EQr_IMIN_EQf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_EQf_SET
#define RX_IB_DATA_EQr_IMAX_SLICf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_SLICf_GET
#define RX_IB_DATA_EQr_IMAX_SLICf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_SLICf_SET
#define RX_IB_DATA_EQr_IMODE_SLICf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_SLICf_GET
#define RX_IB_DATA_EQr_IMODE_SLICf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_SLICf_SET
#define RX_IB_DATA_EQr_IMIN_SLICf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_SLICf_GET
#define RX_IB_DATA_EQr_IMIN_SLICf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_SLICf_SET
#define RX_IB_DATA_EQr_IMAX_IBUFf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_IBUFf_GET
#define RX_IB_DATA_EQr_IMAX_IBUFf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_IBUFf_SET
#define RX_IB_DATA_EQr_IMODE_IBUFf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_IBUFf_GET
#define RX_IB_DATA_EQr_IMODE_IBUFf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_IBUFf_SET
#define RX_IB_DATA_EQr_IMIN_IBUFf_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_IBUFf_GET
#define RX_IB_DATA_EQr_IMIN_IBUFf_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMIN_IBUFf_SET
#define RX_IB_DATA_EQr_IMAX_DIV2f_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_DIV2f_GET
#define RX_IB_DATA_EQr_IMAX_DIV2f_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMAX_DIV2f_SET
#define RX_IB_DATA_EQr_IMODE_DIV2f_GET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_DIV2f_GET
#define RX_IB_DATA_EQr_IMODE_DIV2f_SET BCMI_QSGMII_SERDES_RX_IB_DATA_EQr_IMODE_DIV2f_SET
#define READ_RX_IB_DATA_EQr BCMI_QSGMII_SERDES_READ_RX_IB_DATA_EQr
#define WRITE_RX_IB_DATA_EQr BCMI_QSGMII_SERDES_WRITE_RX_IB_DATA_EQr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_IB_DATA_EQr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_IB_ADC_BUFF
 * BLOCKS:   RX
 * REGADDR:  0x80be
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SIGDET_RC_CTRL_2 
 *     SIGDET_OFFSET_CTRL_0 
 *     SIGDET_OFFSET_CTRL_1 
 *     SIGDET_OFFSET_CTRL_2 
 *     LP_BACK_ENB      
 *     SIGDET_PWRDN     
 *     BGB_DISABLE      
 *     TEST_PORT_ENB    
 *     BIAS_GEN_REFL    
 *     BIAS_GEN_REFH    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr (0x000080be | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIZE 4

/*
 * This structure should be used to declare and program RX_IB_ADC_BUFF.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_s {
	uint32_t v[1];
	uint32_t rx_ib_adc_buff[1];
	uint32_t _rx_ib_adc_buff;
} BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_t;

#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_CLR(r) (r).rx_ib_adc_buff[0] = 0
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SET(r,d) (r).rx_ib_adc_buff[0] = d
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_GET(r) (r).rx_ib_adc_buff[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_TEST_PORT_ENBf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_TEST_PORT_ENBf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BGB_DISABLEf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BGB_DISABLEf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_PWRDNf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_PWRDNf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_LP_BACK_ENBf_GET(r) ((((r).rx_ib_adc_buff[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_LP_BACK_ENBf_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_GET(r) ((((r).rx_ib_adc_buff[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_GET(r) ((((r).rx_ib_adc_buff[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_GET(r) ((((r).rx_ib_adc_buff[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_GET(r) (((r).rx_ib_adc_buff[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_SET(r,f) (r).rx_ib_adc_buff[0]=(((r).rx_ib_adc_buff[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX_IB_ADC_BUFF.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_IB_ADC_BUFFr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr,(_r._rx_ib_adc_buff))
#define BCMI_QSGMII_SERDES_WRITE_RX_IB_ADC_BUFFr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr,(_r._rx_ib_adc_buff))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_IB_ADC_BUFFr BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr
#define RX_IB_ADC_BUFFr_SIZE BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIZE
typedef BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_t RX_IB_ADC_BUFFr_t;
#define RX_IB_ADC_BUFFr_CLR BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_CLR
#define RX_IB_ADC_BUFFr_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SET
#define RX_IB_ADC_BUFFr_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_GET
#define RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_GET
#define RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFHf_SET
#define RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_GET
#define RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BIAS_GEN_REFLf_SET
#define RX_IB_ADC_BUFFr_TEST_PORT_ENBf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_TEST_PORT_ENBf_GET
#define RX_IB_ADC_BUFFr_TEST_PORT_ENBf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_TEST_PORT_ENBf_SET
#define RX_IB_ADC_BUFFr_BGB_DISABLEf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BGB_DISABLEf_GET
#define RX_IB_ADC_BUFFr_BGB_DISABLEf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_BGB_DISABLEf_SET
#define RX_IB_ADC_BUFFr_SIGDET_PWRDNf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_PWRDNf_GET
#define RX_IB_ADC_BUFFr_SIGDET_PWRDNf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_PWRDNf_SET
#define RX_IB_ADC_BUFFr_LP_BACK_ENBf_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_LP_BACK_ENBf_GET
#define RX_IB_ADC_BUFFr_LP_BACK_ENBf_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_LP_BACK_ENBf_SET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_GET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_2f_SET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_GET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_1f_SET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_GET
#define RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_OFFSET_CTRL_0f_SET
#define RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_GET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_GET
#define RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_SET BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr_SIGDET_RC_CTRL_2f_SET
#define READ_RX_IB_ADC_BUFFr BCMI_QSGMII_SERDES_READ_RX_IB_ADC_BUFFr
#define WRITE_RX_IB_ADC_BUFFr BCMI_QSGMII_SERDES_WRITE_RX_IB_ADC_BUFFr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_IB_ADC_BUFFr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RXLNSWAP
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8100
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_LNSWAP_FORCE3 
 *     RX_LNSWAP_FORCE2 
 *     RX_LNSWAP_FORCE1 
 *     RX_LNSWAP_FORCE0 
 *     Q3_MSB           
 *     Q2_MSB           
 *     Q1_MSB           
 *     Q0_MSB           
 *     RX_LNSWAP_LINK_EN 
 *     QSET_PROG_EN     
 *     RX_LNSWAP_FORCE_EN 
 *     RX_LNSWAP_EN     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RXLNSWAPr (0x00008100 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RXLNSWAPr_SIZE 4

/*
 * This structure should be used to declare and program RXLNSWAP.
 *
 */
typedef union BCMI_QSGMII_SERDES_RXLNSWAPr_s {
	uint32_t v[1];
	uint32_t rxlnswap[1];
	uint32_t _rxlnswap;
} BCMI_QSGMII_SERDES_RXLNSWAPr_t;

#define BCMI_QSGMII_SERDES_RXLNSWAPr_CLR(r) (r).rxlnswap[0] = 0
#define BCMI_QSGMII_SERDES_RXLNSWAPr_SET(r,d) (r).rxlnswap[0] = d
#define BCMI_QSGMII_SERDES_RXLNSWAPr_GET(r) (r).rxlnswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_ENf_GET(r) ((((r).rxlnswap[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET(r) ((((r).rxlnswap[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_QSET_PROG_ENf_GET(r) ((((r).rxlnswap[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_QSET_PROG_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET(r) ((((r).rxlnswap[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q0_MSBf_GET(r) ((((r).rxlnswap[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q0_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q1_MSBf_GET(r) ((((r).rxlnswap[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q1_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q2_MSBf_GET(r) ((((r).rxlnswap[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q2_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q3_MSBf_GET(r) ((((r).rxlnswap[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_Q3_MSBf_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE0f_GET(r) ((((r).rxlnswap[0]) >> 6) & 0x3)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE0f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE1f_GET(r) ((((r).rxlnswap[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE1f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE2f_GET(r) ((((r).rxlnswap[0]) >> 2) & 0x3)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE2f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE3f_GET(r) (((r).rxlnswap[0]) & 0x3)
#define BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE3f_SET(r,f) (r).rxlnswap[0]=(((r).rxlnswap[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access RXLNSWAP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RXLNSWAPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RXLNSWAPr,(_r._rxlnswap))
#define BCMI_QSGMII_SERDES_WRITE_RXLNSWAPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RXLNSWAPr,(_r._rxlnswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXLNSWAPr BCMI_QSGMII_SERDES_RXLNSWAPr
#define RXLNSWAPr_SIZE BCMI_QSGMII_SERDES_RXLNSWAPr_SIZE
typedef BCMI_QSGMII_SERDES_RXLNSWAPr_t RXLNSWAPr_t;
#define RXLNSWAPr_CLR BCMI_QSGMII_SERDES_RXLNSWAPr_CLR
#define RXLNSWAPr_SET BCMI_QSGMII_SERDES_RXLNSWAPr_SET
#define RXLNSWAPr_GET BCMI_QSGMII_SERDES_RXLNSWAPr_GET
#define RXLNSWAPr_RX_LNSWAP_ENf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_ENf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_ENf_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE_ENf_SET
#define RXLNSWAPr_QSET_PROG_ENf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_QSET_PROG_ENf_GET
#define RXLNSWAPr_QSET_PROG_ENf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_QSET_PROG_ENf_SET
#define RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_LINK_ENf_GET
#define RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_LINK_ENf_SET
#define RXLNSWAPr_Q0_MSBf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_Q0_MSBf_GET
#define RXLNSWAPr_Q0_MSBf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_Q0_MSBf_SET
#define RXLNSWAPr_Q1_MSBf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_Q1_MSBf_GET
#define RXLNSWAPr_Q1_MSBf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_Q1_MSBf_SET
#define RXLNSWAPr_Q2_MSBf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_Q2_MSBf_GET
#define RXLNSWAPr_Q2_MSBf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_Q2_MSBf_SET
#define RXLNSWAPr_Q3_MSBf_GET BCMI_QSGMII_SERDES_RXLNSWAPr_Q3_MSBf_GET
#define RXLNSWAPr_Q3_MSBf_SET BCMI_QSGMII_SERDES_RXLNSWAPr_Q3_MSBf_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE0f_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE0f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE0f_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE0f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE1f_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE1f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE1f_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE1f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE2f_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE2f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE2f_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE2f_SET
#define RXLNSWAPr_RX_LNSWAP_FORCE3f_GET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE3f_GET
#define RXLNSWAPr_RX_LNSWAP_FORCE3f_SET BCMI_QSGMII_SERDES_RXLNSWAPr_RX_LNSWAP_FORCE3f_SET
#define READ_RXLNSWAPr BCMI_QSGMII_SERDES_READ_RXLNSWAPr
#define WRITE_RXLNSWAPr BCMI_QSGMII_SERDES_WRITE_RXLNSWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RXLNSWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXLNSWAP
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8101
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_LNSWAP_FORCE3 
 *     TX_LNSWAP_FORCE2 
 *     TX_LNSWAP_FORCE1 
 *     TX_LNSWAP_FORCE0 
 *     TX_LNSWAP_EN     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXLNSWAPr (0x00008101 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXLNSWAPr_SIZE 4

/*
 * This structure should be used to declare and program TXLNSWAP.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXLNSWAPr_s {
	uint32_t v[1];
	uint32_t txlnswap[1];
	uint32_t _txlnswap;
} BCMI_QSGMII_SERDES_TXLNSWAPr_t;

#define BCMI_QSGMII_SERDES_TXLNSWAPr_CLR(r) (r).txlnswap[0] = 0
#define BCMI_QSGMII_SERDES_TXLNSWAPr_SET(r,d) (r).txlnswap[0] = d
#define BCMI_QSGMII_SERDES_TXLNSWAPr_GET(r) (r).txlnswap[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_ENf_GET(r) ((((r).txlnswap[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_ENf_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE0f_GET(r) ((((r).txlnswap[0]) >> 6) & 0x3)
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE0f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 6)) | ((((uint32_t)f) & 0x3) << 6))
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE1f_GET(r) ((((r).txlnswap[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE1f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE2f_GET(r) ((((r).txlnswap[0]) >> 2) & 0x3)
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE2f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE3f_GET(r) (((r).txlnswap[0]) & 0x3)
#define BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE3f_SET(r,f) (r).txlnswap[0]=(((r).txlnswap[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TXLNSWAP.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXLNSWAPr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXLNSWAPr,(_r._txlnswap))
#define BCMI_QSGMII_SERDES_WRITE_TXLNSWAPr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXLNSWAPr,(_r._txlnswap))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXLNSWAPr BCMI_QSGMII_SERDES_TXLNSWAPr
#define TXLNSWAPr_SIZE BCMI_QSGMII_SERDES_TXLNSWAPr_SIZE
typedef BCMI_QSGMII_SERDES_TXLNSWAPr_t TXLNSWAPr_t;
#define TXLNSWAPr_CLR BCMI_QSGMII_SERDES_TXLNSWAPr_CLR
#define TXLNSWAPr_SET BCMI_QSGMII_SERDES_TXLNSWAPr_SET
#define TXLNSWAPr_GET BCMI_QSGMII_SERDES_TXLNSWAPr_GET
#define TXLNSWAPr_TX_LNSWAP_ENf_GET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_ENf_GET
#define TXLNSWAPr_TX_LNSWAP_ENf_SET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_ENf_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE0f_GET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE0f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE0f_SET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE0f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE1f_GET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE1f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE1f_SET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE1f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE2f_GET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE2f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE2f_SET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE2f_SET
#define TXLNSWAPr_TX_LNSWAP_FORCE3f_GET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE3f_GET
#define TXLNSWAPr_TX_LNSWAP_FORCE3f_SET BCMI_QSGMII_SERDES_TXLNSWAPr_TX_LNSWAP_FORCE3f_SET
#define READ_TXLNSWAPr BCMI_QSGMII_SERDES_READ_TXLNSWAPr
#define WRITE_TXLNSWAPr BCMI_QSGMII_SERDES_WRITE_TXLNSWAPr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXLNSWAPr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  QSETLNS01
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8102
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     Q0               
 *     Q1               
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_QSETLNS01r (0x00008102 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_QSETLNS01r_SIZE 4

/*
 * This structure should be used to declare and program QSETLNS01.
 *
 */
typedef union BCMI_QSGMII_SERDES_QSETLNS01r_s {
	uint32_t v[1];
	uint32_t qsetlns01[1];
	uint32_t _qsetlns01;
} BCMI_QSGMII_SERDES_QSETLNS01r_t;

#define BCMI_QSGMII_SERDES_QSETLNS01r_CLR(r) (r).qsetlns01[0] = 0
#define BCMI_QSGMII_SERDES_QSETLNS01r_SET(r,d) (r).qsetlns01[0] = d
#define BCMI_QSGMII_SERDES_QSETLNS01r_GET(r) (r).qsetlns01[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_QSETLNS01r_Q1f_GET(r) ((((r).qsetlns01[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_QSETLNS01r_Q1f_SET(r,f) (r).qsetlns01[0]=(((r).qsetlns01[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_QSETLNS01r_Q0f_GET(r) (((r).qsetlns01[0]) & 0xff)
#define BCMI_QSGMII_SERDES_QSETLNS01r_Q0f_SET(r,f) (r).qsetlns01[0]=(((r).qsetlns01[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access QSETLNS01.
 *
 */
#define BCMI_QSGMII_SERDES_READ_QSETLNS01r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_QSETLNS01r,(_r._qsetlns01))
#define BCMI_QSGMII_SERDES_WRITE_QSETLNS01r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_QSETLNS01r,(_r._qsetlns01))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define QSETLNS01r BCMI_QSGMII_SERDES_QSETLNS01r
#define QSETLNS01r_SIZE BCMI_QSGMII_SERDES_QSETLNS01r_SIZE
typedef BCMI_QSGMII_SERDES_QSETLNS01r_t QSETLNS01r_t;
#define QSETLNS01r_CLR BCMI_QSGMII_SERDES_QSETLNS01r_CLR
#define QSETLNS01r_SET BCMI_QSGMII_SERDES_QSETLNS01r_SET
#define QSETLNS01r_GET BCMI_QSGMII_SERDES_QSETLNS01r_GET
#define QSETLNS01r_Q1f_GET BCMI_QSGMII_SERDES_QSETLNS01r_Q1f_GET
#define QSETLNS01r_Q1f_SET BCMI_QSGMII_SERDES_QSETLNS01r_Q1f_SET
#define QSETLNS01r_Q0f_GET BCMI_QSGMII_SERDES_QSETLNS01r_Q0f_GET
#define QSETLNS01r_Q0f_SET BCMI_QSGMII_SERDES_QSETLNS01r_Q0f_SET
#define READ_QSETLNS01r BCMI_QSGMII_SERDES_READ_QSETLNS01r
#define WRITE_QSETLNS01r BCMI_QSGMII_SERDES_WRITE_QSETLNS01r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_QSETLNS01r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  QSETLNS23
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8103
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     Q2               
 *     Q3               
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_QSETLNS23r (0x00008103 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_QSETLNS23r_SIZE 4

/*
 * This structure should be used to declare and program QSETLNS23.
 *
 */
typedef union BCMI_QSGMII_SERDES_QSETLNS23r_s {
	uint32_t v[1];
	uint32_t qsetlns23[1];
	uint32_t _qsetlns23;
} BCMI_QSGMII_SERDES_QSETLNS23r_t;

#define BCMI_QSGMII_SERDES_QSETLNS23r_CLR(r) (r).qsetlns23[0] = 0
#define BCMI_QSGMII_SERDES_QSETLNS23r_SET(r,d) (r).qsetlns23[0] = d
#define BCMI_QSGMII_SERDES_QSETLNS23r_GET(r) (r).qsetlns23[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_QSETLNS23r_Q3f_GET(r) ((((r).qsetlns23[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_QSETLNS23r_Q3f_SET(r,f) (r).qsetlns23[0]=(((r).qsetlns23[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_QSETLNS23r_Q2f_GET(r) (((r).qsetlns23[0]) & 0xff)
#define BCMI_QSGMII_SERDES_QSETLNS23r_Q2f_SET(r,f) (r).qsetlns23[0]=(((r).qsetlns23[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access QSETLNS23.
 *
 */
#define BCMI_QSGMII_SERDES_READ_QSETLNS23r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_QSETLNS23r,(_r._qsetlns23))
#define BCMI_QSGMII_SERDES_WRITE_QSETLNS23r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_QSETLNS23r,(_r._qsetlns23))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define QSETLNS23r BCMI_QSGMII_SERDES_QSETLNS23r
#define QSETLNS23r_SIZE BCMI_QSGMII_SERDES_QSETLNS23r_SIZE
typedef BCMI_QSGMII_SERDES_QSETLNS23r_t QSETLNS23r_t;
#define QSETLNS23r_CLR BCMI_QSGMII_SERDES_QSETLNS23r_CLR
#define QSETLNS23r_SET BCMI_QSGMII_SERDES_QSETLNS23r_SET
#define QSETLNS23r_GET BCMI_QSGMII_SERDES_QSETLNS23r_GET
#define QSETLNS23r_Q3f_GET BCMI_QSGMII_SERDES_QSETLNS23r_Q3f_GET
#define QSETLNS23r_Q3f_SET BCMI_QSGMII_SERDES_QSETLNS23r_Q3f_SET
#define QSETLNS23r_Q2f_GET BCMI_QSGMII_SERDES_QSETLNS23r_Q2f_GET
#define QSETLNS23r_Q2f_SET BCMI_QSGMII_SERDES_QSETLNS23r_Q2f_SET
#define READ_QSETLNS23r BCMI_QSGMII_SERDES_READ_QSETLNS23r
#define WRITE_QSETLNS23r BCMI_QSGMII_SERDES_WRITE_QSETLNS23r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_QSETLNS23r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  UNICOREMODE10G
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8104
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     UNICOREMODE10GCX4 
 *     UNICOREMODE10GHIG 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr (0x00008104 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_SIZE 4

/*
 * This structure should be used to declare and program UNICOREMODE10G.
 *
 */
typedef union BCMI_QSGMII_SERDES_UNICOREMODE10Gr_s {
	uint32_t v[1];
	uint32_t unicoremode10g[1];
	uint32_t _unicoremode10g;
} BCMI_QSGMII_SERDES_UNICOREMODE10Gr_t;

#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_CLR(r) (r).unicoremode10g[0] = 0
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_SET(r,d) (r).unicoremode10g[0] = d
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_GET(r) (r).unicoremode10g[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET(r) ((((r).unicoremode10g[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET(r,f) (r).unicoremode10g[0]=(((r).unicoremode10g[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET(r) (((r).unicoremode10g[0]) & 0xf)
#define BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET(r,f) (r).unicoremode10g[0]=(((r).unicoremode10g[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access UNICOREMODE10G.
 *
 */
#define BCMI_QSGMII_SERDES_READ_UNICOREMODE10Gr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_UNICOREMODE10Gr,(_r._unicoremode10g))
#define BCMI_QSGMII_SERDES_WRITE_UNICOREMODE10Gr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_UNICOREMODE10Gr,(_r._unicoremode10g))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UNICOREMODE10Gr BCMI_QSGMII_SERDES_UNICOREMODE10Gr
#define UNICOREMODE10Gr_SIZE BCMI_QSGMII_SERDES_UNICOREMODE10Gr_SIZE
typedef BCMI_QSGMII_SERDES_UNICOREMODE10Gr_t UNICOREMODE10Gr_t;
#define UNICOREMODE10Gr_CLR BCMI_QSGMII_SERDES_UNICOREMODE10Gr_CLR
#define UNICOREMODE10Gr_SET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_SET
#define UNICOREMODE10Gr_GET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_GET
#define UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GHIGf_GET
#define UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GHIGf_SET
#define UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GCX4f_GET
#define UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET BCMI_QSGMII_SERDES_UNICOREMODE10Gr_UNICOREMODE10GCX4f_SET
#define READ_UNICOREMODE10Gr BCMI_QSGMII_SERDES_READ_UNICOREMODE10Gr
#define WRITE_UNICOREMODE10Gr BCMI_QSGMII_SERDES_WRITE_UNICOREMODE10Gr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_UNICOREMODE10Gr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  INDCOMBCTRL
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8105
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MASTERLN_SEL     
 *     RXCKGMII_LINK_DECOUPLE 
 *     DISPARITY_EN_VAL 
 *     DISPERROR_EN_SYNC_VAL 
 *     DISPERROR_EN_VAL 
 *     DISPERROR_EN_FORCE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr (0x00008105 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_SIZE 4

/*
 * This structure should be used to declare and program INDCOMBCTRL.
 *
 */
typedef union BCMI_QSGMII_SERDES_INDCOMBCTRLr_s {
	uint32_t v[1];
	uint32_t indcombctrl[1];
	uint32_t _indcombctrl;
} BCMI_QSGMII_SERDES_INDCOMBCTRLr_t;

#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_CLR(r) (r).indcombctrl[0] = 0
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_SET(r,d) (r).indcombctrl[0] = d
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_GET(r) (r).indcombctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_FORCEf_GET(r) ((((r).indcombctrl[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_FORCEf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_VALf_GET(r) ((((r).indcombctrl[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_VALf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_GET(r) ((((r).indcombctrl[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPARITY_EN_VALf_GET(r) ((((r).indcombctrl[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPARITY_EN_VALf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_GET(r) ((((r).indcombctrl[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_MASTERLN_SELf_GET(r) (((r).indcombctrl[0]) & 0x3)
#define BCMI_QSGMII_SERDES_INDCOMBCTRLr_MASTERLN_SELf_SET(r,f) (r).indcombctrl[0]=(((r).indcombctrl[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access INDCOMBCTRL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_INDCOMBCTRLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_INDCOMBCTRLr,(_r._indcombctrl))
#define BCMI_QSGMII_SERDES_WRITE_INDCOMBCTRLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_INDCOMBCTRLr,(_r._indcombctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define INDCOMBCTRLr BCMI_QSGMII_SERDES_INDCOMBCTRLr
#define INDCOMBCTRLr_SIZE BCMI_QSGMII_SERDES_INDCOMBCTRLr_SIZE
typedef BCMI_QSGMII_SERDES_INDCOMBCTRLr_t INDCOMBCTRLr_t;
#define INDCOMBCTRLr_CLR BCMI_QSGMII_SERDES_INDCOMBCTRLr_CLR
#define INDCOMBCTRLr_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_SET
#define INDCOMBCTRLr_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_GET
#define INDCOMBCTRLr_DISPERROR_EN_FORCEf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_FORCEf_GET
#define INDCOMBCTRLr_DISPERROR_EN_FORCEf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_FORCEf_SET
#define INDCOMBCTRLr_DISPERROR_EN_VALf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_VALf_GET
#define INDCOMBCTRLr_DISPERROR_EN_VALf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_VALf_SET
#define INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_GET
#define INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPERROR_EN_SYNC_VALf_SET
#define INDCOMBCTRLr_DISPARITY_EN_VALf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPARITY_EN_VALf_GET
#define INDCOMBCTRLr_DISPARITY_EN_VALf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_DISPARITY_EN_VALf_SET
#define INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_GET
#define INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_RXCKGMII_LINK_DECOUPLEf_SET
#define INDCOMBCTRLr_MASTERLN_SELf_GET BCMI_QSGMII_SERDES_INDCOMBCTRLr_MASTERLN_SELf_GET
#define INDCOMBCTRLr_MASTERLN_SELf_SET BCMI_QSGMII_SERDES_INDCOMBCTRLr_MASTERLN_SELf_SET
#define READ_INDCOMBCTRLr BCMI_QSGMII_SERDES_READ_INDCOMBCTRLr
#define WRITE_INDCOMBCTRLr BCMI_QSGMII_SERDES_WRITE_INDCOMBCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_INDCOMBCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTMODELANE
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8106
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SLICE_SELECTOR   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTMODELANEr (0x00008106 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTMODELANEr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODELANE.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTMODELANEr_s {
	uint32_t v[1];
	uint32_t testmodelane[1];
	uint32_t _testmodelane;
} BCMI_QSGMII_SERDES_TESTMODELANEr_t;

#define BCMI_QSGMII_SERDES_TESTMODELANEr_CLR(r) (r).testmodelane[0] = 0
#define BCMI_QSGMII_SERDES_TESTMODELANEr_SET(r,d) (r).testmodelane[0] = d
#define BCMI_QSGMII_SERDES_TESTMODELANEr_GET(r) (r).testmodelane[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTMODELANEr_SLICE_SELECTORf_GET(r) (((r).testmodelane[0]) & 0x3)
#define BCMI_QSGMII_SERDES_TESTMODELANEr_SLICE_SELECTORf_SET(r,f) (r).testmodelane[0]=(((r).testmodelane[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access TESTMODELANE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTMODELANEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTMODELANEr,(_r._testmodelane))
#define BCMI_QSGMII_SERDES_WRITE_TESTMODELANEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTMODELANEr,(_r._testmodelane))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODELANEr BCMI_QSGMII_SERDES_TESTMODELANEr
#define TESTMODELANEr_SIZE BCMI_QSGMII_SERDES_TESTMODELANEr_SIZE
typedef BCMI_QSGMII_SERDES_TESTMODELANEr_t TESTMODELANEr_t;
#define TESTMODELANEr_CLR BCMI_QSGMII_SERDES_TESTMODELANEr_CLR
#define TESTMODELANEr_SET BCMI_QSGMII_SERDES_TESTMODELANEr_SET
#define TESTMODELANEr_GET BCMI_QSGMII_SERDES_TESTMODELANEr_GET
#define TESTMODELANEr_SLICE_SELECTORf_GET BCMI_QSGMII_SERDES_TESTMODELANEr_SLICE_SELECTORf_GET
#define TESTMODELANEr_SLICE_SELECTORf_SET BCMI_QSGMII_SERDES_TESTMODELANEr_SLICE_SELECTORf_SET
#define READ_TESTMODELANEr BCMI_QSGMII_SERDES_READ_TESTMODELANEr
#define WRITE_TESTMODELANEr BCMI_QSGMII_SERDES_WRITE_TESTMODELANEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTMODELANEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTMODECOMBO
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8107
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TEST_MONITOR_MODE1 
 *     TEST_MONITOR_MODE2 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr (0x00008107 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODECOMBO.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTMODECOMBOr_s {
	uint32_t v[1];
	uint32_t testmodecombo[1];
	uint32_t _testmodecombo;
} BCMI_QSGMII_SERDES_TESTMODECOMBOr_t;

#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_CLR(r) (r).testmodecombo[0] = 0
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_SET(r,d) (r).testmodecombo[0] = d
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_GET(r) (r).testmodecombo[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET(r) ((((r).testmodecombo[0]) >> 6) & 0x3f)
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET(r,f) (r).testmodecombo[0]=(((r).testmodecombo[0] & ~((uint32_t)0x3f << 6)) | ((((uint32_t)f) & 0x3f) << 6))
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET(r) (((r).testmodecombo[0]) & 0x3f)
#define BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET(r,f) (r).testmodecombo[0]=(((r).testmodecombo[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access TESTMODECOMBO.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTMODECOMBOr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTMODECOMBOr,(_r._testmodecombo))
#define BCMI_QSGMII_SERDES_WRITE_TESTMODECOMBOr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTMODECOMBOr,(_r._testmodecombo))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODECOMBOr BCMI_QSGMII_SERDES_TESTMODECOMBOr
#define TESTMODECOMBOr_SIZE BCMI_QSGMII_SERDES_TESTMODECOMBOr_SIZE
typedef BCMI_QSGMII_SERDES_TESTMODECOMBOr_t TESTMODECOMBOr_t;
#define TESTMODECOMBOr_CLR BCMI_QSGMII_SERDES_TESTMODECOMBOr_CLR
#define TESTMODECOMBOr_SET BCMI_QSGMII_SERDES_TESTMODECOMBOr_SET
#define TESTMODECOMBOr_GET BCMI_QSGMII_SERDES_TESTMODECOMBOr_GET
#define TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE2f_GET
#define TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE2f_SET
#define TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE1f_GET
#define TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET BCMI_QSGMII_SERDES_TESTMODECOMBOr_TEST_MONITOR_MODE1f_SET
#define READ_TESTMODECOMBOr BCMI_QSGMII_SERDES_READ_TESTMODECOMBOr
#define WRITE_TESTMODECOMBOr BCMI_QSGMII_SERDES_WRITE_TESTMODECOMBOr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTMODECOMBOr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTMODEMUX
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8108
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TMUX_EN          
 *     TMUX_SEL         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTMODEMUXr (0x00008108 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTMODEMUXr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODEMUX.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTMODEMUXr_s {
	uint32_t v[1];
	uint32_t testmodemux[1];
	uint32_t _testmodemux;
} BCMI_QSGMII_SERDES_TESTMODEMUXr_t;

#define BCMI_QSGMII_SERDES_TESTMODEMUXr_CLR(r) (r).testmodemux[0] = 0
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_SET(r,d) (r).testmodemux[0] = d
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_GET(r) (r).testmodemux[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_SELf_GET(r) ((((r).testmodemux[0]) >> 1) & 0x7)
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_SELf_SET(r,f) (r).testmodemux[0]=(((r).testmodemux[0] & ~((uint32_t)0x7 << 1)) | ((((uint32_t)f) & 0x7) << 1))
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_ENf_GET(r) (((r).testmodemux[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_ENf_SET(r,f) (r).testmodemux[0]=(((r).testmodemux[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TESTMODEMUX.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTMODEMUXr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTMODEMUXr,(_r._testmodemux))
#define BCMI_QSGMII_SERDES_WRITE_TESTMODEMUXr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTMODEMUXr,(_r._testmodemux))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODEMUXr BCMI_QSGMII_SERDES_TESTMODEMUXr
#define TESTMODEMUXr_SIZE BCMI_QSGMII_SERDES_TESTMODEMUXr_SIZE
typedef BCMI_QSGMII_SERDES_TESTMODEMUXr_t TESTMODEMUXr_t;
#define TESTMODEMUXr_CLR BCMI_QSGMII_SERDES_TESTMODEMUXr_CLR
#define TESTMODEMUXr_SET BCMI_QSGMII_SERDES_TESTMODEMUXr_SET
#define TESTMODEMUXr_GET BCMI_QSGMII_SERDES_TESTMODEMUXr_GET
#define TESTMODEMUXr_TMUX_SELf_GET BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_SELf_GET
#define TESTMODEMUXr_TMUX_SELf_SET BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_SELf_SET
#define TESTMODEMUXr_TMUX_ENf_GET BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_ENf_GET
#define TESTMODEMUXr_TMUX_ENf_SET BCMI_QSGMII_SERDES_TESTMODEMUXr_TMUX_ENf_SET
#define READ_TESTMODEMUXr BCMI_QSGMII_SERDES_READ_TESTMODEMUXr
#define WRITE_TESTMODEMUXr BCMI_QSGMII_SERDES_WRITE_TESTMODEMUXr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTMODEMUXr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CX4SIGDETCNT
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x8109
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CX4SIGDETCNT     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr (0x00008109 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_SIZE 4

/*
 * This structure should be used to declare and program CX4SIGDETCNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_CX4SIGDETCNTr_s {
	uint32_t v[1];
	uint32_t cx4sigdetcnt[1];
	uint32_t _cx4sigdetcnt;
} BCMI_QSGMII_SERDES_CX4SIGDETCNTr_t;

#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CLR(r) (r).cx4sigdetcnt[0] = 0
#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_SET(r,d) (r).cx4sigdetcnt[0] = d
#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_GET(r) (r).cx4sigdetcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CX4SIGDETCNTf_GET(r) (((r).cx4sigdetcnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CX4SIGDETCNTf_SET(r,f) (r).cx4sigdetcnt[0]=(((r).cx4sigdetcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CX4SIGDETCNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CX4SIGDETCNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CX4SIGDETCNTr,(_r._cx4sigdetcnt))
#define BCMI_QSGMII_SERDES_WRITE_CX4SIGDETCNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CX4SIGDETCNTr,(_r._cx4sigdetcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CX4SIGDETCNTr BCMI_QSGMII_SERDES_CX4SIGDETCNTr
#define CX4SIGDETCNTr_SIZE BCMI_QSGMII_SERDES_CX4SIGDETCNTr_SIZE
typedef BCMI_QSGMII_SERDES_CX4SIGDETCNTr_t CX4SIGDETCNTr_t;
#define CX4SIGDETCNTr_CLR BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CLR
#define CX4SIGDETCNTr_SET BCMI_QSGMII_SERDES_CX4SIGDETCNTr_SET
#define CX4SIGDETCNTr_GET BCMI_QSGMII_SERDES_CX4SIGDETCNTr_GET
#define CX4SIGDETCNTr_CX4SIGDETCNTf_GET BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CX4SIGDETCNTf_GET
#define CX4SIGDETCNTr_CX4SIGDETCNTf_SET BCMI_QSGMII_SERDES_CX4SIGDETCNTr_CX4SIGDETCNTf_SET
#define READ_CX4SIGDETCNTr BCMI_QSGMII_SERDES_READ_CX4SIGDETCNTr
#define WRITE_CX4SIGDETCNTr BCMI_QSGMII_SERDES_WRITE_CX4SIGDETCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CX4SIGDETCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANERESET
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x810a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RESET_RX         
 *     RESET_TX         
 *     RESET_PLL        
 *     RESET_MDIO       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANERESETr (0x0000810a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANERESETr_SIZE 4

/*
 * This structure should be used to declare and program LANERESET.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANERESETr_s {
	uint32_t v[1];
	uint32_t lanereset[1];
	uint32_t _lanereset;
} BCMI_QSGMII_SERDES_LANERESETr_t;

#define BCMI_QSGMII_SERDES_LANERESETr_CLR(r) (r).lanereset[0] = 0
#define BCMI_QSGMII_SERDES_LANERESETr_SET(r,d) (r).lanereset[0] = d
#define BCMI_QSGMII_SERDES_LANERESETr_GET(r) (r).lanereset[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_MDIOf_GET(r) ((((r).lanereset[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_MDIOf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_PLLf_GET(r) ((((r).lanereset[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_PLLf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_TXf_GET(r) ((((r).lanereset[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_TXf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_RXf_GET(r) (((r).lanereset[0]) & 0xf)
#define BCMI_QSGMII_SERDES_LANERESETr_RESET_RXf_SET(r,f) (r).lanereset[0]=(((r).lanereset[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access LANERESET.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANERESETr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANERESETr,(_r._lanereset))
#define BCMI_QSGMII_SERDES_WRITE_LANERESETr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANERESETr,(_r._lanereset))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANERESETr BCMI_QSGMII_SERDES_LANERESETr
#define LANERESETr_SIZE BCMI_QSGMII_SERDES_LANERESETr_SIZE
typedef BCMI_QSGMII_SERDES_LANERESETr_t LANERESETr_t;
#define LANERESETr_CLR BCMI_QSGMII_SERDES_LANERESETr_CLR
#define LANERESETr_SET BCMI_QSGMII_SERDES_LANERESETr_SET
#define LANERESETr_GET BCMI_QSGMII_SERDES_LANERESETr_GET
#define LANERESETr_RESET_MDIOf_GET BCMI_QSGMII_SERDES_LANERESETr_RESET_MDIOf_GET
#define LANERESETr_RESET_MDIOf_SET BCMI_QSGMII_SERDES_LANERESETr_RESET_MDIOf_SET
#define LANERESETr_RESET_PLLf_GET BCMI_QSGMII_SERDES_LANERESETr_RESET_PLLf_GET
#define LANERESETr_RESET_PLLf_SET BCMI_QSGMII_SERDES_LANERESETr_RESET_PLLf_SET
#define LANERESETr_RESET_TXf_GET BCMI_QSGMII_SERDES_LANERESETr_RESET_TXf_GET
#define LANERESETr_RESET_TXf_SET BCMI_QSGMII_SERDES_LANERESETr_RESET_TXf_SET
#define LANERESETr_RESET_RXf_GET BCMI_QSGMII_SERDES_LANERESETr_RESET_RXf_GET
#define LANERESETr_RESET_RXf_SET BCMI_QSGMII_SERDES_LANERESETr_RESET_RXf_SET
#define READ_LANERESETr BCMI_QSGMII_SERDES_READ_LANERESETr
#define WRITE_LANERESETr BCMI_QSGMII_SERDES_WRITE_LANERESETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANERESETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LANECTRL4
 * BLOCKS:   XGXS_BLOCK2
 * REGADDR:  0x810b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_START_LANE_OFS 
 *     RX_START_LANE_OFS_COMP 
 *     TX_SWAP_START_LANE 
 *     TX_LANE_REVERSE  
 *     RX_LANE_REVERSE  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LANECTRL4r (0x0000810b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LANECTRL4r_SIZE 4

/*
 * This structure should be used to declare and program LANECTRL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_LANECTRL4r_s {
	uint32_t v[1];
	uint32_t lanectrl4[1];
	uint32_t _lanectrl4;
} BCMI_QSGMII_SERDES_LANECTRL4r_t;

#define BCMI_QSGMII_SERDES_LANECTRL4r_CLR(r) (r).lanectrl4[0] = 0
#define BCMI_QSGMII_SERDES_LANECTRL4r_SET(r,d) (r).lanectrl4[0] = d
#define BCMI_QSGMII_SERDES_LANECTRL4r_GET(r) (r).lanectrl4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_LANE_REVERSEf_GET(r) ((((r).lanectrl4[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_LANE_REVERSEf_SET(r,f) (r).lanectrl4[0]=(((r).lanectrl4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_LANECTRL4r_TX_LANE_REVERSEf_GET(r) ((((r).lanectrl4[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_LANECTRL4r_TX_LANE_REVERSEf_SET(r,f) (r).lanectrl4[0]=(((r).lanectrl4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_LANECTRL4r_TX_SWAP_START_LANEf_GET(r) ((((r).lanectrl4[0]) >> 4) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL4r_TX_SWAP_START_LANEf_SET(r,f) (r).lanectrl4[0]=(((r).lanectrl4[0] & ~((uint32_t)0x3 << 4)) | ((((uint32_t)f) & 0x3) << 4))
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFS_COMPf_GET(r) ((((r).lanectrl4[0]) >> 2) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFS_COMPf_SET(r,f) (r).lanectrl4[0]=(((r).lanectrl4[0] & ~((uint32_t)0x3 << 2)) | ((((uint32_t)f) & 0x3) << 2))
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFSf_GET(r) (((r).lanectrl4[0]) & 0x3)
#define BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFSf_SET(r,f) (r).lanectrl4[0]=(((r).lanectrl4[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access LANECTRL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LANECTRL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LANECTRL4r,(_r._lanectrl4))
#define BCMI_QSGMII_SERDES_WRITE_LANECTRL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LANECTRL4r,(_r._lanectrl4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LANECTRL4r BCMI_QSGMII_SERDES_LANECTRL4r
#define LANECTRL4r_SIZE BCMI_QSGMII_SERDES_LANECTRL4r_SIZE
typedef BCMI_QSGMII_SERDES_LANECTRL4r_t LANECTRL4r_t;
#define LANECTRL4r_CLR BCMI_QSGMII_SERDES_LANECTRL4r_CLR
#define LANECTRL4r_SET BCMI_QSGMII_SERDES_LANECTRL4r_SET
#define LANECTRL4r_GET BCMI_QSGMII_SERDES_LANECTRL4r_GET
#define LANECTRL4r_RX_LANE_REVERSEf_GET BCMI_QSGMII_SERDES_LANECTRL4r_RX_LANE_REVERSEf_GET
#define LANECTRL4r_RX_LANE_REVERSEf_SET BCMI_QSGMII_SERDES_LANECTRL4r_RX_LANE_REVERSEf_SET
#define LANECTRL4r_TX_LANE_REVERSEf_GET BCMI_QSGMII_SERDES_LANECTRL4r_TX_LANE_REVERSEf_GET
#define LANECTRL4r_TX_LANE_REVERSEf_SET BCMI_QSGMII_SERDES_LANECTRL4r_TX_LANE_REVERSEf_SET
#define LANECTRL4r_TX_SWAP_START_LANEf_GET BCMI_QSGMII_SERDES_LANECTRL4r_TX_SWAP_START_LANEf_GET
#define LANECTRL4r_TX_SWAP_START_LANEf_SET BCMI_QSGMII_SERDES_LANECTRL4r_TX_SWAP_START_LANEf_SET
#define LANECTRL4r_RX_START_LANE_OFS_COMPf_GET BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFS_COMPf_GET
#define LANECTRL4r_RX_START_LANE_OFS_COMPf_SET BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFS_COMPf_SET
#define LANECTRL4r_RX_START_LANE_OFSf_GET BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFSf_GET
#define LANECTRL4r_RX_START_LANE_OFSf_SET BCMI_QSGMII_SERDES_LANECTRL4r_RX_START_LANE_OFSf_SET
#define READ_LANECTRL4r BCMI_QSGMII_SERDES_READ_LANECTRL4r
#define WRITE_LANECTRL4r BCMI_QSGMII_SERDES_WRITE_LANECTRL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LANECTRL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LOCALSTATUS
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8110
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALMDIOEN      
 *     LOCALRDDATARDY   
 *     LOCALIACRDY      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LOCALSTATUSr (0x00008110 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LOCALSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program LOCALSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_LOCALSTATUSr_s {
	uint32_t v[1];
	uint32_t localstatus[1];
	uint32_t _localstatus;
} BCMI_QSGMII_SERDES_LOCALSTATUSr_t;

#define BCMI_QSGMII_SERDES_LOCALSTATUSr_CLR(r) (r).localstatus[0] = 0
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_SET(r,d) (r).localstatus[0] = d
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_GET(r) (r).localstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALIACRDYf_GET(r) ((((r).localstatus[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALIACRDYf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALRDDATARDYf_GET(r) ((((r).localstatus[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALRDDATARDYf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALMDIOENf_GET(r) (((r).localstatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALMDIOENf_SET(r,f) (r).localstatus[0]=(((r).localstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LOCALSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LOCALSTATUSr,(_r._localstatus))
#define BCMI_QSGMII_SERDES_WRITE_LOCALSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LOCALSTATUSr,(_r._localstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALSTATUSr BCMI_QSGMII_SERDES_LOCALSTATUSr
#define LOCALSTATUSr_SIZE BCMI_QSGMII_SERDES_LOCALSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_LOCALSTATUSr_t LOCALSTATUSr_t;
#define LOCALSTATUSr_CLR BCMI_QSGMII_SERDES_LOCALSTATUSr_CLR
#define LOCALSTATUSr_SET BCMI_QSGMII_SERDES_LOCALSTATUSr_SET
#define LOCALSTATUSr_GET BCMI_QSGMII_SERDES_LOCALSTATUSr_GET
#define LOCALSTATUSr_LOCALIACRDYf_GET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALIACRDYf_GET
#define LOCALSTATUSr_LOCALIACRDYf_SET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALIACRDYf_SET
#define LOCALSTATUSr_LOCALRDDATARDYf_GET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALRDDATARDYf_GET
#define LOCALSTATUSr_LOCALRDDATARDYf_SET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALRDDATARDYf_SET
#define LOCALSTATUSr_LOCALMDIOENf_GET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALMDIOENf_GET
#define LOCALSTATUSr_LOCALMDIOENf_SET BCMI_QSGMII_SERDES_LOCALSTATUSr_LOCALMDIOENf_SET
#define READ_LOCALSTATUSr BCMI_QSGMII_SERDES_READ_LOCALSTATUSr
#define WRITE_LOCALSTATUSr BCMI_QSGMII_SERDES_WRITE_LOCALSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LOCALSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LOCALCONTROL0
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8111
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     REMOTEMDIOEN     
 *     LOCALWRITEREQ    
 *     TX_INBANDMDIO_RST 
 *     RX_INBANDMDIO_RST 
 *     EXTREMOTEMDIOEN  
 *     REMOTEMDIOENDPNT 
 *     REMOTEMDIOPASSTHRU 
 *     Q0_DETDIS        
 *     REMOTEWRITE_LN0_MSB 
 *     REMOTEWRITE_LN1_MSB 
 *     REMOTEWRITE_LN2_MSB 
 *     REMOTEWRITE_LN3_MSB 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r (0x00008111 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_SIZE 4

/*
 * This structure should be used to declare and program LOCALCONTROL0.
 *
 */
typedef union BCMI_QSGMII_SERDES_LOCALCONTROL0r_s {
	uint32_t v[1];
	uint32_t localcontrol0[1];
	uint32_t _localcontrol0;
} BCMI_QSGMII_SERDES_LOCALCONTROL0r_t;

#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_CLR(r) (r).localcontrol0[0] = 0
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_SET(r,d) (r).localcontrol0[0] = d
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_GET(r) (r).localcontrol0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET(r) ((((r).localcontrol0[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET(r) ((((r).localcontrol0[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET(r) ((((r).localcontrol0[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET(r) ((((r).localcontrol0[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_Q0_DETDISf_GET(r) ((((r).localcontrol0[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_Q0_DETDISf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET(r) ((((r).localcontrol0[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET(r) ((((r).localcontrol0[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_EXTREMOTEMDIOENf_GET(r) ((((r).localcontrol0[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_EXTREMOTEMDIOENf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET(r) ((((r).localcontrol0[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET(r) ((((r).localcontrol0[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_LOCALWRITEREQf_GET(r) ((((r).localcontrol0[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_LOCALWRITEREQf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENf_GET(r) (((r).localcontrol0[0]) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENf_SET(r,f) (r).localcontrol0[0]=(((r).localcontrol0[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALCONTROL0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LOCALCONTROL0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LOCALCONTROL0r,(_r._localcontrol0))
#define BCMI_QSGMII_SERDES_WRITE_LOCALCONTROL0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LOCALCONTROL0r,(_r._localcontrol0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALCONTROL0r BCMI_QSGMII_SERDES_LOCALCONTROL0r
#define LOCALCONTROL0r_SIZE BCMI_QSGMII_SERDES_LOCALCONTROL0r_SIZE
typedef BCMI_QSGMII_SERDES_LOCALCONTROL0r_t LOCALCONTROL0r_t;
#define LOCALCONTROL0r_CLR BCMI_QSGMII_SERDES_LOCALCONTROL0r_CLR
#define LOCALCONTROL0r_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_SET
#define LOCALCONTROL0r_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN3_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN2_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN1_MSBf_SET
#define LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_GET
#define LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEWRITE_LN0_MSBf_SET
#define LOCALCONTROL0r_Q0_DETDISf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_Q0_DETDISf_GET
#define LOCALCONTROL0r_Q0_DETDISf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_Q0_DETDISf_SET
#define LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_GET
#define LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOPASSTHRUf_SET
#define LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENDPNTf_GET
#define LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENDPNTf_SET
#define LOCALCONTROL0r_EXTREMOTEMDIOENf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_EXTREMOTEMDIOENf_GET
#define LOCALCONTROL0r_EXTREMOTEMDIOENf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_EXTREMOTEMDIOENf_SET
#define LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_GET
#define LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_RX_INBANDMDIO_RSTf_SET
#define LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_GET
#define LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_TX_INBANDMDIO_RSTf_SET
#define LOCALCONTROL0r_LOCALWRITEREQf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_LOCALWRITEREQf_GET
#define LOCALCONTROL0r_LOCALWRITEREQf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_LOCALWRITEREQf_SET
#define LOCALCONTROL0r_REMOTEMDIOENf_GET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENf_GET
#define LOCALCONTROL0r_REMOTEMDIOENf_SET BCMI_QSGMII_SERDES_LOCALCONTROL0r_REMOTEMDIOENf_SET
#define READ_LOCALCONTROL0r BCMI_QSGMII_SERDES_READ_LOCALCONTROL0r
#define WRITE_LOCALCONTROL0r BCMI_QSGMII_SERDES_WRITE_LOCALCONTROL0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LOCALCONTROL0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LOCALCONTROL1
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8112
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_INBANDMDIOSTATSEL 
 *     LOCALREMOTEERRORCLR 
 *     RX_INBANDMDIO_Q0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r (0x00008112 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program LOCALCONTROL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_LOCALCONTROL1r_s {
	uint32_t v[1];
	uint32_t localcontrol1[1];
	uint32_t _localcontrol1;
} BCMI_QSGMII_SERDES_LOCALCONTROL1r_t;

#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_CLR(r) (r).localcontrol1[0] = 0
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_SET(r,d) (r).localcontrol1[0] = d
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_GET(r) (r).localcontrol1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET(r) ((((r).localcontrol1[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET(r) ((((r).localcontrol1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET(r) (((r).localcontrol1[0]) & 0x7)
#define BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET(r,f) (r).localcontrol1[0]=(((r).localcontrol1[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access LOCALCONTROL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LOCALCONTROL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LOCALCONTROL1r,(_r._localcontrol1))
#define BCMI_QSGMII_SERDES_WRITE_LOCALCONTROL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LOCALCONTROL1r,(_r._localcontrol1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALCONTROL1r BCMI_QSGMII_SERDES_LOCALCONTROL1r
#define LOCALCONTROL1r_SIZE BCMI_QSGMII_SERDES_LOCALCONTROL1r_SIZE
typedef BCMI_QSGMII_SERDES_LOCALCONTROL1r_t LOCALCONTROL1r_t;
#define LOCALCONTROL1r_CLR BCMI_QSGMII_SERDES_LOCALCONTROL1r_CLR
#define LOCALCONTROL1r_SET BCMI_QSGMII_SERDES_LOCALCONTROL1r_SET
#define LOCALCONTROL1r_GET BCMI_QSGMII_SERDES_LOCALCONTROL1r_GET
#define LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_GET
#define LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIO_Q0f_SET
#define LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET BCMI_QSGMII_SERDES_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_GET
#define LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET BCMI_QSGMII_SERDES_LOCALCONTROL1r_LOCALREMOTEERRORCLRf_SET
#define LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_GET
#define LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET BCMI_QSGMII_SERDES_LOCALCONTROL1r_RX_INBANDMDIOSTATSELf_SET
#define READ_LOCALCONTROL1r BCMI_QSGMII_SERDES_READ_LOCALCONTROL1r
#define WRITE_LOCALCONTROL1r BCMI_QSGMII_SERDES_WRITE_LOCALCONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LOCALCONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  REMOTEWRITE03
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8113
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALWRITE_LN3   
 *     LOCALWRITE_LN0   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r (0x00008113 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEWRITE03.
 *
 */
typedef union BCMI_QSGMII_SERDES_REMOTEWRITE03r_s {
	uint32_t v[1];
	uint32_t remotewrite03[1];
	uint32_t _remotewrite03;
} BCMI_QSGMII_SERDES_REMOTEWRITE03r_t;

#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_CLR(r) (r).remotewrite03[0] = 0
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_SET(r,d) (r).remotewrite03[0] = d
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_GET(r) (r).remotewrite03[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN0f_GET(r) ((((r).remotewrite03[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN0f_SET(r,f) (r).remotewrite03[0]=(((r).remotewrite03[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN3f_GET(r) (((r).remotewrite03[0]) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN3f_SET(r,f) (r).remotewrite03[0]=(((r).remotewrite03[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEWRITE03.
 *
 */
#define BCMI_QSGMII_SERDES_READ_REMOTEWRITE03r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_REMOTEWRITE03r,(_r._remotewrite03))
#define BCMI_QSGMII_SERDES_WRITE_REMOTEWRITE03r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_REMOTEWRITE03r,(_r._remotewrite03))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEWRITE03r BCMI_QSGMII_SERDES_REMOTEWRITE03r
#define REMOTEWRITE03r_SIZE BCMI_QSGMII_SERDES_REMOTEWRITE03r_SIZE
typedef BCMI_QSGMII_SERDES_REMOTEWRITE03r_t REMOTEWRITE03r_t;
#define REMOTEWRITE03r_CLR BCMI_QSGMII_SERDES_REMOTEWRITE03r_CLR
#define REMOTEWRITE03r_SET BCMI_QSGMII_SERDES_REMOTEWRITE03r_SET
#define REMOTEWRITE03r_GET BCMI_QSGMII_SERDES_REMOTEWRITE03r_GET
#define REMOTEWRITE03r_LOCALWRITE_LN0f_GET BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN0f_GET
#define REMOTEWRITE03r_LOCALWRITE_LN0f_SET BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN0f_SET
#define REMOTEWRITE03r_LOCALWRITE_LN3f_GET BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN3f_GET
#define REMOTEWRITE03r_LOCALWRITE_LN3f_SET BCMI_QSGMII_SERDES_REMOTEWRITE03r_LOCALWRITE_LN3f_SET
#define READ_REMOTEWRITE03r BCMI_QSGMII_SERDES_READ_REMOTEWRITE03r
#define WRITE_REMOTEWRITE03r BCMI_QSGMII_SERDES_WRITE_REMOTEWRITE03r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_REMOTEWRITE03r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  REMOTEWRITE12
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8114
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALWRITE_LN2   
 *     LOCALWRITE_LN1   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r (0x00008114 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEWRITE12.
 *
 */
typedef union BCMI_QSGMII_SERDES_REMOTEWRITE12r_s {
	uint32_t v[1];
	uint32_t remotewrite12[1];
	uint32_t _remotewrite12;
} BCMI_QSGMII_SERDES_REMOTEWRITE12r_t;

#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_CLR(r) (r).remotewrite12[0] = 0
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_SET(r,d) (r).remotewrite12[0] = d
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_GET(r) (r).remotewrite12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN1f_GET(r) ((((r).remotewrite12[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN1f_SET(r,f) (r).remotewrite12[0]=(((r).remotewrite12[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN2f_GET(r) (((r).remotewrite12[0]) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN2f_SET(r,f) (r).remotewrite12[0]=(((r).remotewrite12[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEWRITE12.
 *
 */
#define BCMI_QSGMII_SERDES_READ_REMOTEWRITE12r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_REMOTEWRITE12r,(_r._remotewrite12))
#define BCMI_QSGMII_SERDES_WRITE_REMOTEWRITE12r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_REMOTEWRITE12r,(_r._remotewrite12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEWRITE12r BCMI_QSGMII_SERDES_REMOTEWRITE12r
#define REMOTEWRITE12r_SIZE BCMI_QSGMII_SERDES_REMOTEWRITE12r_SIZE
typedef BCMI_QSGMII_SERDES_REMOTEWRITE12r_t REMOTEWRITE12r_t;
#define REMOTEWRITE12r_CLR BCMI_QSGMII_SERDES_REMOTEWRITE12r_CLR
#define REMOTEWRITE12r_SET BCMI_QSGMII_SERDES_REMOTEWRITE12r_SET
#define REMOTEWRITE12r_GET BCMI_QSGMII_SERDES_REMOTEWRITE12r_GET
#define REMOTEWRITE12r_LOCALWRITE_LN1f_GET BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN1f_GET
#define REMOTEWRITE12r_LOCALWRITE_LN1f_SET BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN1f_SET
#define REMOTEWRITE12r_LOCALWRITE_LN2f_GET BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN2f_GET
#define REMOTEWRITE12r_LOCALWRITE_LN2f_SET BCMI_QSGMII_SERDES_REMOTEWRITE12r_LOCALWRITE_LN2f_SET
#define READ_REMOTEWRITE12r BCMI_QSGMII_SERDES_READ_REMOTEWRITE12r
#define WRITE_REMOTEWRITE12r BCMI_QSGMII_SERDES_WRITE_REMOTEWRITE12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_REMOTEWRITE12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  REMOTEREAD12
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8115
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALRDDATA      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_REMOTEREAD12r (0x00008115 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_REMOTEREAD12r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEREAD12.
 *
 */
typedef union BCMI_QSGMII_SERDES_REMOTEREAD12r_s {
	uint32_t v[1];
	uint32_t remoteread12[1];
	uint32_t _remoteread12;
} BCMI_QSGMII_SERDES_REMOTEREAD12r_t;

#define BCMI_QSGMII_SERDES_REMOTEREAD12r_CLR(r) (r).remoteread12[0] = 0
#define BCMI_QSGMII_SERDES_REMOTEREAD12r_SET(r,d) (r).remoteread12[0] = d
#define BCMI_QSGMII_SERDES_REMOTEREAD12r_GET(r) (r).remoteread12[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_REMOTEREAD12r_LOCALRDDATAf_GET(r) (((r).remoteread12[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_REMOTEREAD12r_LOCALRDDATAf_SET(r,f) (r).remoteread12[0]=(((r).remoteread12[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access REMOTEREAD12.
 *
 */
#define BCMI_QSGMII_SERDES_READ_REMOTEREAD12r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_REMOTEREAD12r,(_r._remoteread12))
#define BCMI_QSGMII_SERDES_WRITE_REMOTEREAD12r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_REMOTEREAD12r,(_r._remoteread12))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEREAD12r BCMI_QSGMII_SERDES_REMOTEREAD12r
#define REMOTEREAD12r_SIZE BCMI_QSGMII_SERDES_REMOTEREAD12r_SIZE
typedef BCMI_QSGMII_SERDES_REMOTEREAD12r_t REMOTEREAD12r_t;
#define REMOTEREAD12r_CLR BCMI_QSGMII_SERDES_REMOTEREAD12r_CLR
#define REMOTEREAD12r_SET BCMI_QSGMII_SERDES_REMOTEREAD12r_SET
#define REMOTEREAD12r_GET BCMI_QSGMII_SERDES_REMOTEREAD12r_GET
#define REMOTEREAD12r_LOCALRDDATAf_GET BCMI_QSGMII_SERDES_REMOTEREAD12r_LOCALRDDATAf_GET
#define REMOTEREAD12r_LOCALRDDATAf_SET BCMI_QSGMII_SERDES_REMOTEREAD12r_LOCALRDDATAf_SET
#define READ_REMOTEREAD12r BCMI_QSGMII_SERDES_READ_REMOTEREAD12r
#define WRITE_REMOTEREAD12r BCMI_QSGMII_SERDES_WRITE_REMOTEREAD12r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_REMOTEREAD12r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  REMOTEREADX3
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8116
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALRDDATAID    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_REMOTEREADX3r (0x00008116 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_REMOTEREADX3r_SIZE 4

/*
 * This structure should be used to declare and program REMOTEREADX3.
 *
 */
typedef union BCMI_QSGMII_SERDES_REMOTEREADX3r_s {
	uint32_t v[1];
	uint32_t remotereadx3[1];
	uint32_t _remotereadx3;
} BCMI_QSGMII_SERDES_REMOTEREADX3r_t;

#define BCMI_QSGMII_SERDES_REMOTEREADX3r_CLR(r) (r).remotereadx3[0] = 0
#define BCMI_QSGMII_SERDES_REMOTEREADX3r_SET(r,d) (r).remotereadx3[0] = d
#define BCMI_QSGMII_SERDES_REMOTEREADX3r_GET(r) (r).remotereadx3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_REMOTEREADX3r_LOCALRDDATAIDf_GET(r) (((r).remotereadx3[0]) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEREADX3r_LOCALRDDATAIDf_SET(r,f) (r).remotereadx3[0]=(((r).remotereadx3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEREADX3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_REMOTEREADX3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_REMOTEREADX3r,(_r._remotereadx3))
#define BCMI_QSGMII_SERDES_WRITE_REMOTEREADX3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_REMOTEREADX3r,(_r._remotereadx3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEREADX3r BCMI_QSGMII_SERDES_REMOTEREADX3r
#define REMOTEREADX3r_SIZE BCMI_QSGMII_SERDES_REMOTEREADX3r_SIZE
typedef BCMI_QSGMII_SERDES_REMOTEREADX3r_t REMOTEREADX3r_t;
#define REMOTEREADX3r_CLR BCMI_QSGMII_SERDES_REMOTEREADX3r_CLR
#define REMOTEREADX3r_SET BCMI_QSGMII_SERDES_REMOTEREADX3r_SET
#define REMOTEREADX3r_GET BCMI_QSGMII_SERDES_REMOTEREADX3r_GET
#define REMOTEREADX3r_LOCALRDDATAIDf_GET BCMI_QSGMII_SERDES_REMOTEREADX3r_LOCALRDDATAIDf_GET
#define REMOTEREADX3r_LOCALRDDATAIDf_SET BCMI_QSGMII_SERDES_REMOTEREADX3r_LOCALRDDATAIDf_SET
#define READ_REMOTEREADX3r BCMI_QSGMII_SERDES_READ_REMOTEREADX3r
#define WRITE_REMOTEREADX3r BCMI_QSGMII_SERDES_WRITE_REMOTEREADX3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_REMOTEREADX3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX_INBANDMDIOSTAT
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8117
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_INBANDMDIOSTAT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr (0x00008117 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_SIZE 4

/*
 * This structure should be used to declare and program RX_INBANDMDIOSTAT.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_s {
	uint32_t v[1];
	uint32_t rx_inbandmdiostat[1];
	uint32_t _rx_inbandmdiostat;
} BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_t;

#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_CLR(r) (r).rx_inbandmdiostat[0] = 0
#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_SET(r,d) (r).rx_inbandmdiostat[0] = d
#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_GET(r) (r).rx_inbandmdiostat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_GET(r) (((r).rx_inbandmdiostat[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_SET(r,f) (r).rx_inbandmdiostat[0]=(((r).rx_inbandmdiostat[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX_INBANDMDIOSTAT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX_INBANDMDIOSTATr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr,(_r._rx_inbandmdiostat))
#define BCMI_QSGMII_SERDES_WRITE_RX_INBANDMDIOSTATr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr,(_r._rx_inbandmdiostat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX_INBANDMDIOSTATr BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr
#define RX_INBANDMDIOSTATr_SIZE BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_SIZE
typedef BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_t RX_INBANDMDIOSTATr_t;
#define RX_INBANDMDIOSTATr_CLR BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_CLR
#define RX_INBANDMDIOSTATr_SET BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_SET
#define RX_INBANDMDIOSTATr_GET BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_GET
#define RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_GET BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_GET
#define RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_SET BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr_RX_INBANDMDIOSTATf_SET
#define READ_RX_INBANDMDIOSTATr BCMI_QSGMII_SERDES_READ_RX_INBANDMDIOSTATr
#define WRITE_RX_INBANDMDIOSTATr BCMI_QSGMII_SERDES_WRITE_RX_INBANDMDIOSTATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX_INBANDMDIOSTATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LOCALIAC
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8118
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALIACREQ      
 *     IAC_LN1_IAC_LN2  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LOCALIACr (0x00008118 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LOCALIACr_SIZE 4

/*
 * This structure should be used to declare and program LOCALIAC.
 *
 */
typedef union BCMI_QSGMII_SERDES_LOCALIACr_s {
	uint32_t v[1];
	uint32_t localiac[1];
	uint32_t _localiac;
} BCMI_QSGMII_SERDES_LOCALIACr_t;

#define BCMI_QSGMII_SERDES_LOCALIACr_CLR(r) (r).localiac[0] = 0
#define BCMI_QSGMII_SERDES_LOCALIACr_SET(r,d) (r).localiac[0] = d
#define BCMI_QSGMII_SERDES_LOCALIACr_GET(r) (r).localiac[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LOCALIACr_IAC_LN1_IAC_LN2f_GET(r) ((((r).localiac[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LOCALIACr_IAC_LN1_IAC_LN2f_SET(r,f) (r).localiac[0]=(((r).localiac[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LOCALIACr_LOCALIACREQf_GET(r) (((r).localiac[0]) & 0x1)
#define BCMI_QSGMII_SERDES_LOCALIACr_LOCALIACREQf_SET(r,f) (r).localiac[0]=(((r).localiac[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access LOCALIAC.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LOCALIACr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LOCALIACr,(_r._localiac))
#define BCMI_QSGMII_SERDES_WRITE_LOCALIACr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LOCALIACr,(_r._localiac))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LOCALIACr BCMI_QSGMII_SERDES_LOCALIACr
#define LOCALIACr_SIZE BCMI_QSGMII_SERDES_LOCALIACr_SIZE
typedef BCMI_QSGMII_SERDES_LOCALIACr_t LOCALIACr_t;
#define LOCALIACr_CLR BCMI_QSGMII_SERDES_LOCALIACr_CLR
#define LOCALIACr_SET BCMI_QSGMII_SERDES_LOCALIACr_SET
#define LOCALIACr_GET BCMI_QSGMII_SERDES_LOCALIACr_GET
#define LOCALIACr_IAC_LN1_IAC_LN2f_GET BCMI_QSGMII_SERDES_LOCALIACr_IAC_LN1_IAC_LN2f_GET
#define LOCALIACr_IAC_LN1_IAC_LN2f_SET BCMI_QSGMII_SERDES_LOCALIACr_IAC_LN1_IAC_LN2f_SET
#define LOCALIACr_LOCALIACREQf_GET BCMI_QSGMII_SERDES_LOCALIACr_LOCALIACREQf_GET
#define LOCALIACr_LOCALIACREQf_SET BCMI_QSGMII_SERDES_LOCALIACr_LOCALIACREQf_SET
#define READ_LOCALIACr BCMI_QSGMII_SERDES_READ_LOCALIACr
#define WRITE_LOCALIACr BCMI_QSGMII_SERDES_WRITE_LOCALIACr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LOCALIACr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  REMOTEIACN
 * BLOCKS:   IN_BAND_MDIO
 * REGADDR:  0x8119
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LOCALIACN        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_REMOTEIACNr (0x00008119 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_REMOTEIACNr_SIZE 4

/*
 * This structure should be used to declare and program REMOTEIACN.
 *
 */
typedef union BCMI_QSGMII_SERDES_REMOTEIACNr_s {
	uint32_t v[1];
	uint32_t remoteiacn[1];
	uint32_t _remoteiacn;
} BCMI_QSGMII_SERDES_REMOTEIACNr_t;

#define BCMI_QSGMII_SERDES_REMOTEIACNr_CLR(r) (r).remoteiacn[0] = 0
#define BCMI_QSGMII_SERDES_REMOTEIACNr_SET(r,d) (r).remoteiacn[0] = d
#define BCMI_QSGMII_SERDES_REMOTEIACNr_GET(r) (r).remoteiacn[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_REMOTEIACNr_LOCALIACNf_GET(r) (((r).remoteiacn[0]) & 0xff)
#define BCMI_QSGMII_SERDES_REMOTEIACNr_LOCALIACNf_SET(r,f) (r).remoteiacn[0]=(((r).remoteiacn[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access REMOTEIACN.
 *
 */
#define BCMI_QSGMII_SERDES_READ_REMOTEIACNr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_REMOTEIACNr,(_r._remoteiacn))
#define BCMI_QSGMII_SERDES_WRITE_REMOTEIACNr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_REMOTEIACNr,(_r._remoteiacn))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define REMOTEIACNr BCMI_QSGMII_SERDES_REMOTEIACNr
#define REMOTEIACNr_SIZE BCMI_QSGMII_SERDES_REMOTEIACNr_SIZE
typedef BCMI_QSGMII_SERDES_REMOTEIACNr_t REMOTEIACNr_t;
#define REMOTEIACNr_CLR BCMI_QSGMII_SERDES_REMOTEIACNr_CLR
#define REMOTEIACNr_SET BCMI_QSGMII_SERDES_REMOTEIACNr_SET
#define REMOTEIACNr_GET BCMI_QSGMII_SERDES_REMOTEIACNr_GET
#define REMOTEIACNr_LOCALIACNf_GET BCMI_QSGMII_SERDES_REMOTEIACNr_LOCALIACNf_GET
#define REMOTEIACNr_LOCALIACNf_SET BCMI_QSGMII_SERDES_REMOTEIACNr_LOCALIACNf_SET
#define READ_REMOTEIACNr BCMI_QSGMII_SERDES_READ_REMOTEIACNr
#define WRITE_REMOTEIACNr BCMI_QSGMII_SERDES_WRITE_REMOTEIACNr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_REMOTEIACNr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_MISCRXSTATUS
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8120
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_BP_LH         
 *     MR_NP_LH         
 *     NP_TOGGLE_ERR_LH 
 *     RX_CONFIG_IS_0_LH 
 *     OVER1GMP_LH      
 *     NONMATCHINGMP_LH 
 *     REMOTEPHYMP_LH   
 *     NULLMP_LH        
 *     INVALIDSEQ_LH    
 *     MATCHINGOUI_LSB_LH 
 *     MATCHINGOUI_MSB_LH 
 *     NONMATCHINGOUI_LH 
 *     MP5_LH           
 *     UP3_LH           
 *     TETON_BRK_LINK_LH 
 *     CAPTURE_NP_LH    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr (0x00008120 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program GP_MISCRXSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_s {
	uint32_t v[1];
	uint32_t gp_miscrxstatus[1];
	uint32_t _gp_miscrxstatus;
} BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_t;

#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CLR(r) (r).gp_miscrxstatus[0] = 0
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_SET(r,d) (r).gp_miscrxstatus[0] = d
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_GET(r) (r).gp_miscrxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CAPTURE_NP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CAPTURE_NP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_UP3_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_UP3_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MP5_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MP5_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_INVALIDSEQ_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_INVALIDSEQ_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NULLMP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NULLMP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_OVER1GMP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_OVER1GMP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_NP_LHf_GET(r) ((((r).gp_miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_NP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_BP_LHf_GET(r) (((r).gp_miscrxstatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_BP_LHf_SET(r,f) (r).gp_miscrxstatus[0]=(((r).gp_miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access GP_MISCRXSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_MISCRXSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr,(_r._gp_miscrxstatus))
#define BCMI_QSGMII_SERDES_WRITE_GP_MISCRXSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr,(_r._gp_miscrxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_MISCRXSTATUSr BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr
#define GP_MISCRXSTATUSr_SIZE BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_t GP_MISCRXSTATUSr_t;
#define GP_MISCRXSTATUSr_CLR BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CLR
#define GP_MISCRXSTATUSr_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_SET
#define GP_MISCRXSTATUSr_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_GET
#define GP_MISCRXSTATUSr_CAPTURE_NP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CAPTURE_NP_LHf_GET
#define GP_MISCRXSTATUSr_CAPTURE_NP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_CAPTURE_NP_LHf_SET
#define GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_GET
#define GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_TETON_BRK_LINK_LHf_SET
#define GP_MISCRXSTATUSr_UP3_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_UP3_LHf_GET
#define GP_MISCRXSTATUSr_UP3_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_UP3_LHf_SET
#define GP_MISCRXSTATUSr_MP5_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MP5_LHf_GET
#define GP_MISCRXSTATUSr_MP5_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MP5_LHf_SET
#define GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_GET
#define GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGOUI_LHf_SET
#define GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_GET
#define GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_MSB_LHf_SET
#define GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_GET
#define GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MATCHINGOUI_LSB_LHf_SET
#define GP_MISCRXSTATUSr_INVALIDSEQ_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_INVALIDSEQ_LHf_GET
#define GP_MISCRXSTATUSr_INVALIDSEQ_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_INVALIDSEQ_LHf_SET
#define GP_MISCRXSTATUSr_NULLMP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NULLMP_LHf_GET
#define GP_MISCRXSTATUSr_NULLMP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NULLMP_LHf_SET
#define GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_GET
#define GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_REMOTEPHYMP_LHf_SET
#define GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_GET
#define GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NONMATCHINGMP_LHf_SET
#define GP_MISCRXSTATUSr_OVER1GMP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_OVER1GMP_LHf_GET
#define GP_MISCRXSTATUSr_OVER1GMP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_OVER1GMP_LHf_SET
#define GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET
#define GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET
#define GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET
#define GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET
#define GP_MISCRXSTATUSr_MR_NP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_NP_LHf_GET
#define GP_MISCRXSTATUSr_MR_NP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_NP_LHf_SET
#define GP_MISCRXSTATUSr_MR_BP_LHf_GET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_BP_LHf_GET
#define GP_MISCRXSTATUSr_MR_BP_LHf_SET BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr_MR_BP_LHf_SET
#define READ_GP_MISCRXSTATUSr BCMI_QSGMII_SERDES_READ_GP_MISCRXSTATUSr
#define WRITE_GP_MISCRXSTATUSr BCMI_QSGMII_SERDES_WRITE_GP_MISCRXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_MISCRXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_XGXSSTATUS
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8121
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SK_EW_STATUS     
 *     CKCMP_O_VFLO_W   
 *     CKCMP_UNFLO_W    
 *     RXFERR           
 *     SEQUENCER_PASS   
 *     SEQUENCER_DONE   
 *     TXD_FIF_O_ERR    
 *     TXPLL_LOCK       
 *     RX_REMOTE_FAULT  
 *     TX_REMOTE_FAULT  
 *     ALWAYS_1         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr (0x00008121 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program GP_XGXSSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_s {
	uint32_t v[1];
	uint32_t gp_xgxsstatus[1];
	uint32_t _gp_xgxsstatus;
} BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_t;

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CLR(r) (r).gp_xgxsstatus[0] = 0
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SET(r,d) (r).gp_xgxsstatus[0] = d
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_GET(r) (r).gp_xgxsstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_ALWAYS_1f_GET(r) ((((r).gp_xgxsstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_ALWAYS_1f_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TX_REMOTE_FAULTf_GET(r) ((((r).gp_xgxsstatus[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TX_REMOTE_FAULTf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RX_REMOTE_FAULTf_GET(r) ((((r).gp_xgxsstatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RX_REMOTE_FAULTf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXPLL_LOCKf_GET(r) ((((r).gp_xgxsstatus[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXPLL_LOCKf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXD_FIF_O_ERRf_GET(r) ((((r).gp_xgxsstatus[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXD_FIF_O_ERRf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_DONEf_GET(r) ((((r).gp_xgxsstatus[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_DONEf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_PASSf_GET(r) ((((r).gp_xgxsstatus[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_PASSf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RXFERRf_GET(r) ((((r).gp_xgxsstatus[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RXFERRf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_GET(r) ((((r).gp_xgxsstatus[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET(r) ((((r).gp_xgxsstatus[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SK_EW_STATUSf_GET(r) (((r).gp_xgxsstatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SK_EW_STATUSf_SET(r,f) (r).gp_xgxsstatus[0]=(((r).gp_xgxsstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access GP_XGXSSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUSr,(_r._gp_xgxsstatus))
#define BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUSr,(_r._gp_xgxsstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_XGXSSTATUSr BCMI_QSGMII_SERDES_GP_XGXSSTATUSr
#define GP_XGXSSTATUSr_SIZE BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_t GP_XGXSSTATUSr_t;
#define GP_XGXSSTATUSr_CLR BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CLR
#define GP_XGXSSTATUSr_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SET
#define GP_XGXSSTATUSr_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_GET
#define GP_XGXSSTATUSr_ALWAYS_1f_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_ALWAYS_1f_GET
#define GP_XGXSSTATUSr_ALWAYS_1f_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_ALWAYS_1f_SET
#define GP_XGXSSTATUSr_TX_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TX_REMOTE_FAULTf_GET
#define GP_XGXSSTATUSr_TX_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TX_REMOTE_FAULTf_SET
#define GP_XGXSSTATUSr_RX_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RX_REMOTE_FAULTf_GET
#define GP_XGXSSTATUSr_RX_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RX_REMOTE_FAULTf_SET
#define GP_XGXSSTATUSr_TXPLL_LOCKf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXPLL_LOCKf_GET
#define GP_XGXSSTATUSr_TXPLL_LOCKf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXPLL_LOCKf_SET
#define GP_XGXSSTATUSr_TXD_FIF_O_ERRf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXD_FIF_O_ERRf_GET
#define GP_XGXSSTATUSr_TXD_FIF_O_ERRf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_TXD_FIF_O_ERRf_SET
#define GP_XGXSSTATUSr_SEQUENCER_DONEf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_DONEf_GET
#define GP_XGXSSTATUSr_SEQUENCER_DONEf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_DONEf_SET
#define GP_XGXSSTATUSr_SEQUENCER_PASSf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_PASSf_GET
#define GP_XGXSSTATUSr_SEQUENCER_PASSf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SEQUENCER_PASSf_SET
#define GP_XGXSSTATUSr_RXFERRf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RXFERRf_GET
#define GP_XGXSSTATUSr_RXFERRf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_RXFERRf_SET
#define GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_GET
#define GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_UNFLO_Wf_SET
#define GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_GET
#define GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_CKCMP_O_VFLO_Wf_SET
#define GP_XGXSSTATUSr_SK_EW_STATUSf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SK_EW_STATUSf_GET
#define GP_XGXSSTATUSr_SK_EW_STATUSf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUSr_SK_EW_STATUSf_SET
#define READ_GP_XGXSSTATUSr BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUSr
#define WRITE_GP_XGXSSTATUSr BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_XGXSSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_XGXSSTATUS1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8122
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ACTUAL_SPEED     
 *     PLL_MODE_AFE     
 *     AUTONEG_COMPLETE 
 *     LINKSTAT         
 *     LINK10G          
 *     SGMII_MODE       
 *     SERDESMODE_EN_TX 
 *     MODE_10G_TX      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r (0x00008122 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program GP_XGXSSTATUS1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_s {
	uint32_t v[1];
	uint32_t gp_xgxsstatus1[1];
	uint32_t _gp_xgxsstatus1;
} BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_t;

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_CLR(r) (r).gp_xgxsstatus1[0] = 0
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SET(r,d) (r).gp_xgxsstatus1[0] = d
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_GET(r) (r).gp_xgxsstatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_MODE_10G_TXf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_MODE_10G_TXf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SGMII_MODEf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SGMII_MODEf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINK10Gf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINK10Gf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINKSTATf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINKSTATf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_PLL_MODE_AFEf_GET(r) ((((r).gp_xgxsstatus1[0]) >> 4) & 0x7)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_PLL_MODE_AFEf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_ACTUAL_SPEEDf_GET(r) (((r).gp_xgxsstatus1[0]) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_ACTUAL_SPEEDf_SET(r,f) (r).gp_xgxsstatus1[0]=(((r).gp_xgxsstatus1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access GP_XGXSSTATUS1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r,(_r._gp_xgxsstatus1))
#define BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r,(_r._gp_xgxsstatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_XGXSSTATUS1r BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r
#define GP_XGXSSTATUS1r_SIZE BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_t GP_XGXSSTATUS1r_t;
#define GP_XGXSSTATUS1r_CLR BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_CLR
#define GP_XGXSSTATUS1r_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SET
#define GP_XGXSSTATUS1r_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_GET
#define GP_XGXSSTATUS1r_MODE_10G_TXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_MODE_10G_TXf_GET
#define GP_XGXSSTATUS1r_MODE_10G_TXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_MODE_10G_TXf_SET
#define GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_GET
#define GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SERDESMODE_EN_TXf_SET
#define GP_XGXSSTATUS1r_SGMII_MODEf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SGMII_MODEf_GET
#define GP_XGXSSTATUS1r_SGMII_MODEf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_SGMII_MODEf_SET
#define GP_XGXSSTATUS1r_LINK10Gf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINK10Gf_GET
#define GP_XGXSSTATUS1r_LINK10Gf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINK10Gf_SET
#define GP_XGXSSTATUS1r_LINKSTATf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINKSTATf_GET
#define GP_XGXSSTATUS1r_LINKSTATf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_LINKSTATf_SET
#define GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_GET
#define GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_AUTONEG_COMPLETEf_SET
#define GP_XGXSSTATUS1r_PLL_MODE_AFEf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_PLL_MODE_AFEf_GET
#define GP_XGXSSTATUS1r_PLL_MODE_AFEf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_PLL_MODE_AFEf_SET
#define GP_XGXSSTATUS1r_ACTUAL_SPEEDf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_ACTUAL_SPEEDf_GET
#define GP_XGXSSTATUS1r_ACTUAL_SPEEDf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r_ACTUAL_SPEEDf_SET
#define READ_GP_XGXSSTATUS1r BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS1r
#define WRITE_GP_XGXSSTATUS1r BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_XGXSSTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_XGXSSTATUS2
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8123
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FREQ_SEL_TX      
 *     FREQ_SEL_RX      
 *     GPWRDWN_TX       
 *     GPWRDWN_RX       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r (0x00008123 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_SIZE 4

/*
 * This structure should be used to declare and program GP_XGXSSTATUS2.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_s {
	uint32_t v[1];
	uint32_t gp_xgxsstatus2[1];
	uint32_t _gp_xgxsstatus2;
} BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_t;

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_CLR(r) (r).gp_xgxsstatus2[0] = 0
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_SET(r,d) (r).gp_xgxsstatus2[0] = d
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GET(r) (r).gp_xgxsstatus2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_RXf_GET(r) ((((r).gp_xgxsstatus2[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_RXf_SET(r,f) (r).gp_xgxsstatus2[0]=(((r).gp_xgxsstatus2[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_TXf_GET(r) ((((r).gp_xgxsstatus2[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_TXf_SET(r,f) (r).gp_xgxsstatus2[0]=(((r).gp_xgxsstatus2[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_RXf_GET(r) ((((r).gp_xgxsstatus2[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_RXf_SET(r,f) (r).gp_xgxsstatus2[0]=(((r).gp_xgxsstatus2[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_TXf_GET(r) (((r).gp_xgxsstatus2[0]) & 0xf)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_TXf_SET(r,f) (r).gp_xgxsstatus2[0]=(((r).gp_xgxsstatus2[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access GP_XGXSSTATUS2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r,(_r._gp_xgxsstatus2))
#define BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r,(_r._gp_xgxsstatus2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_XGXSSTATUS2r BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r
#define GP_XGXSSTATUS2r_SIZE BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_SIZE
typedef BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_t GP_XGXSSTATUS2r_t;
#define GP_XGXSSTATUS2r_CLR BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_CLR
#define GP_XGXSSTATUS2r_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_SET
#define GP_XGXSSTATUS2r_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GET
#define GP_XGXSSTATUS2r_GPWRDWN_RXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_RXf_GET
#define GP_XGXSSTATUS2r_GPWRDWN_RXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_RXf_SET
#define GP_XGXSSTATUS2r_GPWRDWN_TXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_TXf_GET
#define GP_XGXSSTATUS2r_GPWRDWN_TXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_GPWRDWN_TXf_SET
#define GP_XGXSSTATUS2r_FREQ_SEL_RXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_RXf_GET
#define GP_XGXSSTATUS2r_FREQ_SEL_RXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_RXf_SET
#define GP_XGXSSTATUS2r_FREQ_SEL_TXf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_TXf_GET
#define GP_XGXSSTATUS2r_FREQ_SEL_TXf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r_FREQ_SEL_TXf_SET
#define READ_GP_XGXSSTATUS2r BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS2r
#define WRITE_GP_XGXSSTATUS2r BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_XGXSSTATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_1000XSTATUS1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8124
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     SPEED_STATUS     
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     EARLY_END_EXTENSION_DETECTED 
 *     CARRIER_EXTEND_ERR_DETECTED 
 *     RX_ERR_DETECTED  
 *     TX_ERR_DETECTED  
 *     CRC_ERR_DETECTED 
 *     FALSE_CARRIER_DETECTED 
 *     RXFIFO_ERR_DETECTED 
 *     TXFIFO_ERR_DETECTED 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r (0x00008124 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program GP_1000XSTATUS1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_s {
	uint32_t v[1];
	uint32_t gp_1000xstatus1[1];
	uint32_t _gp_1000xstatus1;
} BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_t;

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CLR(r) (r).gp_1000xstatus1[0] = 0
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SET(r,d) (r).gp_1000xstatus1[0] = d
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_GET(r) (r).gp_1000xstatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TX_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TX_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RX_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RX_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_GET(r) ((((r).gp_1000xstatus1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).gp_1000xstatus1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).gp_1000xstatus1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SPEED_STATUSf_GET(r) ((((r).gp_1000xstatus1[0]) >> 3) & 0x3)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SPEED_STATUSf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_DUPLEX_STATUSf_GET(r) ((((r).gp_1000xstatus1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_DUPLEX_STATUSf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_LINK_STATUSf_GET(r) ((((r).gp_1000xstatus1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_LINK_STATUSf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SGMII_MODEf_GET(r) (((r).gp_1000xstatus1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SGMII_MODEf_SET(r,f) (r).gp_1000xstatus1[0]=(((r).gp_1000xstatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access GP_1000XSTATUS1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS1r,(_r._gp_1000xstatus1))
#define BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS1r,(_r._gp_1000xstatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_1000XSTATUS1r BCMI_QSGMII_SERDES_GP_1000XSTATUS1r
#define GP_1000XSTATUS1r_SIZE BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_t GP_1000XSTATUS1r_t;
#define GP_1000XSTATUS1r_CLR BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CLR
#define GP_1000XSTATUS1r_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SET
#define GP_1000XSTATUS1r_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_GET
#define GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TXFIFO_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RXFIFO_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_GET
#define GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_FALSE_CARRIER_DETECTEDf_SET
#define GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CRC_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_TX_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TX_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_TX_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_TX_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_RX_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RX_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_RX_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_RX_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_GET
#define GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_CARRIER_EXTEND_ERR_DETECTEDf_SET
#define GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_GET
#define GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_EARLY_END_EXTENSION_DETECTEDf_SET
#define GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define GP_1000XSTATUS1r_SPEED_STATUSf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SPEED_STATUSf_GET
#define GP_1000XSTATUS1r_SPEED_STATUSf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SPEED_STATUSf_SET
#define GP_1000XSTATUS1r_DUPLEX_STATUSf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_DUPLEX_STATUSf_GET
#define GP_1000XSTATUS1r_DUPLEX_STATUSf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_DUPLEX_STATUSf_SET
#define GP_1000XSTATUS1r_LINK_STATUSf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_LINK_STATUSf_GET
#define GP_1000XSTATUS1r_LINK_STATUSf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_LINK_STATUSf_SET
#define GP_1000XSTATUS1r_SGMII_MODEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SGMII_MODEf_GET
#define GP_1000XSTATUS1r_SGMII_MODEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS1r_SGMII_MODEf_SET
#define READ_GP_1000XSTATUS1r BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS1r
#define WRITE_GP_1000XSTATUS1r BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_1000XSTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_1000XSTATUS2
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8125
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_ERROR_STATE   
 *     ABILITY_DETECT_STATE 
 *     ACKNOWLEDGE_DETECT_STATE 
 *     COMPLETE_ACKNOWLEDGE_STATE 
 *     IDLE_DETECT_STATE 
 *     LINK_WENT_DOWN_FROM_LOSS_OF_SYNC 
 *     RUDI_INVALID     
 *     RUDI_I           
 *     RUDI_C           
 *     SYNC_STATUS_OK   
 *     SYNC_STATUS_FAIL 
 *     SGMII_SELECTOR_MISMATCH 
 *     AUTONEG_RESOLUTION_ERR 
 *     CONSISTENCY_MISMATCH 
 *     SGMII_MODE_CHANGE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r (0x00008125 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SIZE 4

/*
 * This structure should be used to declare and program GP_1000XSTATUS2.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_s {
	uint32_t v[1];
	uint32_t gp_1000xstatus2[1];
	uint32_t _gp_1000xstatus2;
} BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_t;

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CLR(r) (r).gp_1000xstatus2[0] = 0
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SET(r,d) (r).gp_1000xstatus2[0] = d
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_GET(r) (r).gp_1000xstatus2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_GET(r) ((((r).gp_1000xstatus2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_GET(r) ((((r).gp_1000xstatus2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_GET(r) ((((r).gp_1000xstatus2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).gp_1000xstatus2[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_FAILf_GET(r) ((((r).gp_1000xstatus2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_FAILf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_OKf_GET(r) ((((r).gp_1000xstatus2[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_OKf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_Cf_GET(r) ((((r).gp_1000xstatus2[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_Cf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_If_GET(r) ((((r).gp_1000xstatus2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_If_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_INVALIDf_GET(r) ((((r).gp_1000xstatus2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_INVALIDf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET(r) ((((r).gp_1000xstatus2[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_IDLE_DETECT_STATEf_GET(r) ((((r).gp_1000xstatus2[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_IDLE_DETECT_STATEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_GET(r) ((((r).gp_1000xstatus2[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_GET(r) ((((r).gp_1000xstatus2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_GET(r) ((((r).gp_1000xstatus2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AN_ERROR_STATEf_GET(r) (((r).gp_1000xstatus2[0]) & 0x3)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AN_ERROR_STATEf_SET(r,f) (r).gp_1000xstatus2[0]=(((r).gp_1000xstatus2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access GP_1000XSTATUS2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS2r,(_r._gp_1000xstatus2))
#define BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS2r,(_r._gp_1000xstatus2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_1000XSTATUS2r BCMI_QSGMII_SERDES_GP_1000XSTATUS2r
#define GP_1000XSTATUS2r_SIZE BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SIZE
typedef BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_t GP_1000XSTATUS2r_t;
#define GP_1000XSTATUS2r_CLR BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CLR
#define GP_1000XSTATUS2r_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SET
#define GP_1000XSTATUS2r_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_GET
#define GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_GET
#define GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_MODE_CHANGEf_SET
#define GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_GET
#define GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_CONSISTENCY_MISMATCHf_SET
#define GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_GET
#define GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AUTONEG_RESOLUTION_ERRf_SET
#define GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_GET
#define GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SGMII_SELECTOR_MISMATCHf_SET
#define GP_1000XSTATUS2r_SYNC_STATUS_FAILf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_FAILf_GET
#define GP_1000XSTATUS2r_SYNC_STATUS_FAILf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_FAILf_SET
#define GP_1000XSTATUS2r_SYNC_STATUS_OKf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_OKf_GET
#define GP_1000XSTATUS2r_SYNC_STATUS_OKf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_SYNC_STATUS_OKf_SET
#define GP_1000XSTATUS2r_RUDI_Cf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_Cf_GET
#define GP_1000XSTATUS2r_RUDI_Cf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_Cf_SET
#define GP_1000XSTATUS2r_RUDI_If_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_If_GET
#define GP_1000XSTATUS2r_RUDI_If_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_If_SET
#define GP_1000XSTATUS2r_RUDI_INVALIDf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_INVALIDf_GET
#define GP_1000XSTATUS2r_RUDI_INVALIDf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_RUDI_INVALIDf_SET
#define GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET
#define GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET
#define GP_1000XSTATUS2r_IDLE_DETECT_STATEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_IDLE_DETECT_STATEf_GET
#define GP_1000XSTATUS2r_IDLE_DETECT_STATEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_IDLE_DETECT_STATEf_SET
#define GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_GET
#define GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_COMPLETE_ACKNOWLEDGE_STATEf_SET
#define GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_GET
#define GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ACKNOWLEDGE_DETECT_STATEf_SET
#define GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_GET
#define GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_ABILITY_DETECT_STATEf_SET
#define GP_1000XSTATUS2r_AN_ERROR_STATEf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AN_ERROR_STATEf_GET
#define GP_1000XSTATUS2r_AN_ERROR_STATEf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS2r_AN_ERROR_STATEf_SET
#define READ_GP_1000XSTATUS2r BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS2r
#define WRITE_GP_1000XSTATUS2r BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_1000XSTATUS2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_1000XSTATUS3
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8126
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SD_FILTER_CHG    
 *     SD_MUX           
 *     SD_FILTER        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r (0x00008126 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SIZE 4

/*
 * This structure should be used to declare and program GP_1000XSTATUS3.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_s {
	uint32_t v[1];
	uint32_t gp_1000xstatus3[1];
	uint32_t _gp_1000xstatus3;
} BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_t;

#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_CLR(r) (r).gp_1000xstatus3[0] = 0
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SET(r,d) (r).gp_1000xstatus3[0] = d
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_GET(r) (r).gp_1000xstatus3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTERf_GET(r) ((((r).gp_1000xstatus3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTERf_SET(r,f) (r).gp_1000xstatus3[0]=(((r).gp_1000xstatus3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_MUXf_GET(r) ((((r).gp_1000xstatus3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_MUXf_SET(r,f) (r).gp_1000xstatus3[0]=(((r).gp_1000xstatus3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTER_CHGf_GET(r) ((((r).gp_1000xstatus3[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTER_CHGf_SET(r,f) (r).gp_1000xstatus3[0]=(((r).gp_1000xstatus3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access GP_1000XSTATUS3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS3r,(_r._gp_1000xstatus3))
#define BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_1000XSTATUS3r,(_r._gp_1000xstatus3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_1000XSTATUS3r BCMI_QSGMII_SERDES_GP_1000XSTATUS3r
#define GP_1000XSTATUS3r_SIZE BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SIZE
typedef BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_t GP_1000XSTATUS3r_t;
#define GP_1000XSTATUS3r_CLR BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_CLR
#define GP_1000XSTATUS3r_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SET
#define GP_1000XSTATUS3r_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_GET
#define GP_1000XSTATUS3r_SD_FILTERf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTERf_GET
#define GP_1000XSTATUS3r_SD_FILTERf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTERf_SET
#define GP_1000XSTATUS3r_SD_MUXf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_MUXf_GET
#define GP_1000XSTATUS3r_SD_MUXf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_MUXf_SET
#define GP_1000XSTATUS3r_SD_FILTER_CHGf_GET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTER_CHGf_GET
#define GP_1000XSTATUS3r_SD_FILTER_CHGf_SET BCMI_QSGMII_SERDES_GP_1000XSTATUS3r_SD_FILTER_CHGf_SET
#define READ_GP_1000XSTATUS3r BCMI_QSGMII_SERDES_READ_GP_1000XSTATUS3r
#define WRITE_GP_1000XSTATUS3r BCMI_QSGMII_SERDES_WRITE_GP_1000XSTATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_1000XSTATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_TPOUT_1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8127
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TPOUT            
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_TPOUT_1r (0x00008127 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_SIZE 4

/*
 * This structure should be used to declare and program GP_TPOUT_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_TPOUT_1r_s {
	uint32_t v[1];
	uint32_t gp_tpout_1[1];
	uint32_t _gp_tpout_1;
} BCMI_QSGMII_SERDES_GP_TPOUT_1r_t;

#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_CLR(r) (r).gp_tpout_1[0] = 0
#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_SET(r,d) (r).gp_tpout_1[0] = d
#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_GET(r) (r).gp_tpout_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_TPOUTf_GET(r) (((r).gp_tpout_1[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_GP_TPOUT_1r_TPOUTf_SET(r,f) (r).gp_tpout_1[0]=(((r).gp_tpout_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access GP_TPOUT_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_TPOUT_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_TPOUT_1r,(_r._gp_tpout_1))
#define BCMI_QSGMII_SERDES_WRITE_GP_TPOUT_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_TPOUT_1r,(_r._gp_tpout_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_TPOUT_1r BCMI_QSGMII_SERDES_GP_TPOUT_1r
#define GP_TPOUT_1r_SIZE BCMI_QSGMII_SERDES_GP_TPOUT_1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_TPOUT_1r_t GP_TPOUT_1r_t;
#define GP_TPOUT_1r_CLR BCMI_QSGMII_SERDES_GP_TPOUT_1r_CLR
#define GP_TPOUT_1r_SET BCMI_QSGMII_SERDES_GP_TPOUT_1r_SET
#define GP_TPOUT_1r_GET BCMI_QSGMII_SERDES_GP_TPOUT_1r_GET
#define GP_TPOUT_1r_TPOUTf_GET BCMI_QSGMII_SERDES_GP_TPOUT_1r_TPOUTf_GET
#define GP_TPOUT_1r_TPOUTf_SET BCMI_QSGMII_SERDES_GP_TPOUT_1r_TPOUTf_SET
#define READ_GP_TPOUT_1r BCMI_QSGMII_SERDES_READ_GP_TPOUT_1r
#define WRITE_GP_TPOUT_1r BCMI_QSGMII_SERDES_WRITE_GP_TPOUT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_TPOUT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_TPOUT_2
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8128
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TPOUT_23_8       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_TPOUT_2r (0x00008128 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_SIZE 4

/*
 * This structure should be used to declare and program GP_TPOUT_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_TPOUT_2r_s {
	uint32_t v[1];
	uint32_t gp_tpout_2[1];
	uint32_t _gp_tpout_2;
} BCMI_QSGMII_SERDES_GP_TPOUT_2r_t;

#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_CLR(r) (r).gp_tpout_2[0] = 0
#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_SET(r,d) (r).gp_tpout_2[0] = d
#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_GET(r) (r).gp_tpout_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_TPOUT_23_8f_GET(r) (((r).gp_tpout_2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_GP_TPOUT_2r_TPOUT_23_8f_SET(r,f) (r).gp_tpout_2[0]=(((r).gp_tpout_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access GP_TPOUT_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_TPOUT_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_TPOUT_2r,(_r._gp_tpout_2))
#define BCMI_QSGMII_SERDES_WRITE_GP_TPOUT_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_TPOUT_2r,(_r._gp_tpout_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_TPOUT_2r BCMI_QSGMII_SERDES_GP_TPOUT_2r
#define GP_TPOUT_2r_SIZE BCMI_QSGMII_SERDES_GP_TPOUT_2r_SIZE
typedef BCMI_QSGMII_SERDES_GP_TPOUT_2r_t GP_TPOUT_2r_t;
#define GP_TPOUT_2r_CLR BCMI_QSGMII_SERDES_GP_TPOUT_2r_CLR
#define GP_TPOUT_2r_SET BCMI_QSGMII_SERDES_GP_TPOUT_2r_SET
#define GP_TPOUT_2r_GET BCMI_QSGMII_SERDES_GP_TPOUT_2r_GET
#define GP_TPOUT_2r_TPOUT_23_8f_GET BCMI_QSGMII_SERDES_GP_TPOUT_2r_TPOUT_23_8f_GET
#define GP_TPOUT_2r_TPOUT_23_8f_SET BCMI_QSGMII_SERDES_GP_TPOUT_2r_TPOUT_23_8f_SET
#define READ_GP_TPOUT_2r BCMI_QSGMII_SERDES_READ_GP_TPOUT_2r
#define WRITE_GP_TPOUT_2r BCMI_QSGMII_SERDES_WRITE_GP_TPOUT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_TPOUT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_XGXSSTATUS3
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x8129
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     HCD_OVER_1G_10_0 
 *     GPWRDWN_PLL      
 *     PD_PARK_AN       
 *     LATCH_LINKDOWN_10G_O 
 *     LINK_LATCHDOWN   
 *     LINK             
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r (0x00008129 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_SIZE 4

/*
 * This structure should be used to declare and program GP_XGXSSTATUS3.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_s {
	uint32_t v[1];
	uint32_t gp_xgxsstatus3[1];
	uint32_t _gp_xgxsstatus3;
} BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_t;

#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_CLR(r) (r).gp_xgxsstatus3[0] = 0
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_SET(r,d) (r).gp_xgxsstatus3[0] = d
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GET(r) (r).gp_xgxsstatus3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINKf_GET(r) ((((r).gp_xgxsstatus3[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINKf_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINK_LATCHDOWNf_GET(r) ((((r).gp_xgxsstatus3[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINK_LATCHDOWNf_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET(r) ((((r).gp_xgxsstatus3[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_PD_PARK_ANf_GET(r) ((((r).gp_xgxsstatus3[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_PD_PARK_ANf_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GPWRDWN_PLLf_GET(r) ((((r).gp_xgxsstatus3[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GPWRDWN_PLLf_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_GET(r) (((r).gp_xgxsstatus3[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_SET(r,f) (r).gp_xgxsstatus3[0]=(((r).gp_xgxsstatus3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access GP_XGXSSTATUS3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r,(_r._gp_xgxsstatus3))
#define BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r,(_r._gp_xgxsstatus3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_XGXSSTATUS3r BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r
#define GP_XGXSSTATUS3r_SIZE BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_SIZE
typedef BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_t GP_XGXSSTATUS3r_t;
#define GP_XGXSSTATUS3r_CLR BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_CLR
#define GP_XGXSSTATUS3r_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_SET
#define GP_XGXSSTATUS3r_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GET
#define GP_XGXSSTATUS3r_LINKf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINKf_GET
#define GP_XGXSSTATUS3r_LINKf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINKf_SET
#define GP_XGXSSTATUS3r_LINK_LATCHDOWNf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINK_LATCHDOWNf_GET
#define GP_XGXSSTATUS3r_LINK_LATCHDOWNf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LINK_LATCHDOWNf_SET
#define GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_GET
#define GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_LATCH_LINKDOWN_10G_Of_SET
#define GP_XGXSSTATUS3r_PD_PARK_ANf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_PD_PARK_ANf_GET
#define GP_XGXSSTATUS3r_PD_PARK_ANf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_PD_PARK_ANf_SET
#define GP_XGXSSTATUS3r_GPWRDWN_PLLf_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GPWRDWN_PLLf_GET
#define GP_XGXSSTATUS3r_GPWRDWN_PLLf_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_GPWRDWN_PLLf_SET
#define GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_GET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_GET
#define GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_SET BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r_HCD_OVER_1G_10_0f_SET
#define READ_GP_XGXSSTATUS3r BCMI_QSGMII_SERDES_READ_GP_XGXSSTATUS3r
#define WRITE_GP_XGXSSTATUS3r BCMI_QSGMII_SERDES_WRITE_GP_XGXSSTATUS3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_XGXSSTATUS3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_X2500STATUS1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x812a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FAIL_CNT         
 *     S_DEAD           
 *     S_LOSTLINK       
 *     S_COMPLETE       
 *     S_WAIT4LINK      
 *     S_PLLSWIT        
 *     S_CLOCKSWIT      
 *     S_WAIT30MS       
 *     S_WAIT2RES       
 *     S_BC_REG_RST     
 *     LATCHMDIO        
 *     LATCH_HCD_OVER_1G 
 *     HCD_OVER_1G_OR   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r (0x0000812a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_SIZE 4

/*
 * This structure should be used to declare and program GP_X2500STATUS1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_X2500STATUS1r_s {
	uint32_t v[1];
	uint32_t gp_x2500status1[1];
	uint32_t _gp_x2500status1;
} BCMI_QSGMII_SERDES_GP_X2500STATUS1r_t;

#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_CLR(r) (r).gp_x2500status1[0] = 0
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_SET(r,d) (r).gp_x2500status1[0] = d
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_GET(r) (r).gp_x2500status1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_HCD_OVER_1G_ORf_GET(r) ((((r).gp_x2500status1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_HCD_OVER_1G_ORf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET(r) ((((r).gp_x2500status1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCHMDIOf_GET(r) ((((r).gp_x2500status1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCHMDIOf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_BC_REG_RSTf_GET(r) ((((r).gp_x2500status1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_BC_REG_RSTf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT2RESf_GET(r) ((((r).gp_x2500status1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT2RESf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT30MSf_GET(r) ((((r).gp_x2500status1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT30MSf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_CLOCKSWITf_GET(r) ((((r).gp_x2500status1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_CLOCKSWITf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_PLLSWITf_GET(r) ((((r).gp_x2500status1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_PLLSWITf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT4LINKf_GET(r) ((((r).gp_x2500status1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT4LINKf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_COMPLETEf_GET(r) ((((r).gp_x2500status1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_COMPLETEf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_LOSTLINKf_GET(r) ((((r).gp_x2500status1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_LOSTLINKf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_DEADf_GET(r) ((((r).gp_x2500status1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_DEADf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_FAIL_CNTf_GET(r) (((r).gp_x2500status1[0]) & 0xf)
#define BCMI_QSGMII_SERDES_GP_X2500STATUS1r_FAIL_CNTf_SET(r,f) (r).gp_x2500status1[0]=(((r).gp_x2500status1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access GP_X2500STATUS1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_X2500STATUS1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_X2500STATUS1r,(_r._gp_x2500status1))
#define BCMI_QSGMII_SERDES_WRITE_GP_X2500STATUS1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_X2500STATUS1r,(_r._gp_x2500status1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_X2500STATUS1r BCMI_QSGMII_SERDES_GP_X2500STATUS1r
#define GP_X2500STATUS1r_SIZE BCMI_QSGMII_SERDES_GP_X2500STATUS1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_X2500STATUS1r_t GP_X2500STATUS1r_t;
#define GP_X2500STATUS1r_CLR BCMI_QSGMII_SERDES_GP_X2500STATUS1r_CLR
#define GP_X2500STATUS1r_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_SET
#define GP_X2500STATUS1r_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_GET
#define GP_X2500STATUS1r_HCD_OVER_1G_ORf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_HCD_OVER_1G_ORf_GET
#define GP_X2500STATUS1r_HCD_OVER_1G_ORf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_HCD_OVER_1G_ORf_SET
#define GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_GET
#define GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCH_HCD_OVER_1Gf_SET
#define GP_X2500STATUS1r_LATCHMDIOf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCHMDIOf_GET
#define GP_X2500STATUS1r_LATCHMDIOf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_LATCHMDIOf_SET
#define GP_X2500STATUS1r_S_BC_REG_RSTf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_BC_REG_RSTf_GET
#define GP_X2500STATUS1r_S_BC_REG_RSTf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_BC_REG_RSTf_SET
#define GP_X2500STATUS1r_S_WAIT2RESf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT2RESf_GET
#define GP_X2500STATUS1r_S_WAIT2RESf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT2RESf_SET
#define GP_X2500STATUS1r_S_WAIT30MSf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT30MSf_GET
#define GP_X2500STATUS1r_S_WAIT30MSf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT30MSf_SET
#define GP_X2500STATUS1r_S_CLOCKSWITf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_CLOCKSWITf_GET
#define GP_X2500STATUS1r_S_CLOCKSWITf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_CLOCKSWITf_SET
#define GP_X2500STATUS1r_S_PLLSWITf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_PLLSWITf_GET
#define GP_X2500STATUS1r_S_PLLSWITf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_PLLSWITf_SET
#define GP_X2500STATUS1r_S_WAIT4LINKf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT4LINKf_GET
#define GP_X2500STATUS1r_S_WAIT4LINKf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_WAIT4LINKf_SET
#define GP_X2500STATUS1r_S_COMPLETEf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_COMPLETEf_GET
#define GP_X2500STATUS1r_S_COMPLETEf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_COMPLETEf_SET
#define GP_X2500STATUS1r_S_LOSTLINKf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_LOSTLINKf_GET
#define GP_X2500STATUS1r_S_LOSTLINKf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_LOSTLINKf_SET
#define GP_X2500STATUS1r_S_DEADf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_DEADf_GET
#define GP_X2500STATUS1r_S_DEADf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_S_DEADf_SET
#define GP_X2500STATUS1r_FAIL_CNTf_GET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_FAIL_CNTf_GET
#define GP_X2500STATUS1r_FAIL_CNTf_SET BCMI_QSGMII_SERDES_GP_X2500STATUS1r_FAIL_CNTf_SET
#define READ_GP_X2500STATUS1r BCMI_QSGMII_SERDES_READ_GP_X2500STATUS1r
#define WRITE_GP_X2500STATUS1r BCMI_QSGMII_SERDES_WRITE_GP_X2500STATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_X2500STATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_TOPANSTATUS1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x812b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_AUTONEG_COMPLETE 
 *     CL37_AUTONEG_COMPLETE 
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     CL73_MR_LP_AUTONEG_ABLE 
 *     CL73_LP_NP_BAM_ABLE 
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     ACTUAL_SPEED     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r (0x0000812b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_SIZE 4

/*
 * This structure should be used to declare and program GP_TOPANSTATUS1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_s {
	uint32_t v[1];
	uint32_t gp_topanstatus1[1];
	uint32_t _gp_topanstatus1;
} BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_t;

#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CLR(r) (r).gp_topanstatus1[0] = 0
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_SET(r,d) (r).gp_topanstatus1[0] = d
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_GET(r) (r).gp_topanstatus1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_ACTUAL_SPEEDf_GET(r) ((((r).gp_topanstatus1[0]) >> 8) & 0x3f)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_ACTUAL_SPEEDf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x3f << 8)) | ((((uint32_t)f) & 0x3f) << 8))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).gp_topanstatus1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).gp_topanstatus1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET(r) ((((r).gp_topanstatus1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET(r) ((((r).gp_topanstatus1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_DUPLEX_STATUSf_GET(r) ((((r).gp_topanstatus1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_DUPLEX_STATUSf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_LINK_STATUSf_GET(r) ((((r).gp_topanstatus1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_LINK_STATUSf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET(r) ((((r).gp_topanstatus1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET(r) (((r).gp_topanstatus1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET(r,f) (r).gp_topanstatus1[0]=(((r).gp_topanstatus1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access GP_TOPANSTATUS1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_TOPANSTATUS1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r,(_r._gp_topanstatus1))
#define BCMI_QSGMII_SERDES_WRITE_GP_TOPANSTATUS1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r,(_r._gp_topanstatus1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_TOPANSTATUS1r BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r
#define GP_TOPANSTATUS1r_SIZE BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_t GP_TOPANSTATUS1r_t;
#define GP_TOPANSTATUS1r_CLR BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CLR
#define GP_TOPANSTATUS1r_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_SET
#define GP_TOPANSTATUS1r_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_GET
#define GP_TOPANSTATUS1r_ACTUAL_SPEEDf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_ACTUAL_SPEEDf_GET
#define GP_TOPANSTATUS1r_ACTUAL_SPEEDf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_ACTUAL_SPEEDf_SET
#define GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_GET
#define GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_LP_NP_BAM_ABLEf_SET
#define GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_GET
#define GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_MR_LP_AUTONEG_ABLEf_SET
#define GP_TOPANSTATUS1r_DUPLEX_STATUSf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_DUPLEX_STATUSf_GET
#define GP_TOPANSTATUS1r_DUPLEX_STATUSf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_DUPLEX_STATUSf_SET
#define GP_TOPANSTATUS1r_LINK_STATUSf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_LINK_STATUSf_GET
#define GP_TOPANSTATUS1r_LINK_STATUSf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_LINK_STATUSf_SET
#define GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_GET
#define GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL37_AUTONEG_COMPLETEf_SET
#define GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_GET
#define GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r_CL73_AUTONEG_COMPLETEf_SET
#define READ_GP_TOPANSTATUS1r BCMI_QSGMII_SERDES_READ_GP_TOPANSTATUS1r
#define WRITE_GP_TOPANSTATUS1r BCMI_QSGMII_SERDES_WRITE_GP_TOPANSTATUS1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_TOPANSTATUS1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_LP_UP1
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x812c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_LP_UP1r (0x0000812c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_LP_UP1r_SIZE 4

/*
 * This structure should be used to declare and program GP_LP_UP1.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_LP_UP1r_s {
	uint32_t v[1];
	uint32_t gp_lp_up1[1];
	uint32_t _gp_lp_up1;
} BCMI_QSGMII_SERDES_GP_LP_UP1r_t;

#define BCMI_QSGMII_SERDES_GP_LP_UP1r_CLR(r) (r).gp_lp_up1[0] = 0
#define BCMI_QSGMII_SERDES_GP_LP_UP1r_SET(r,d) (r).gp_lp_up1[0] = d
#define BCMI_QSGMII_SERDES_GP_LP_UP1r_GET(r) (r).gp_lp_up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_GET(r) (((r).gp_lp_up1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_SET(r,f) (r).gp_lp_up1[0]=(((r).gp_lp_up1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access GP_LP_UP1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_LP_UP1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_LP_UP1r,(_r._gp_lp_up1))
#define BCMI_QSGMII_SERDES_WRITE_GP_LP_UP1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_LP_UP1r,(_r._gp_lp_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_LP_UP1r BCMI_QSGMII_SERDES_GP_LP_UP1r
#define GP_LP_UP1r_SIZE BCMI_QSGMII_SERDES_GP_LP_UP1r_SIZE
typedef BCMI_QSGMII_SERDES_GP_LP_UP1r_t GP_LP_UP1r_t;
#define GP_LP_UP1r_CLR BCMI_QSGMII_SERDES_GP_LP_UP1r_CLR
#define GP_LP_UP1r_SET BCMI_QSGMII_SERDES_GP_LP_UP1r_SET
#define GP_LP_UP1r_GET BCMI_QSGMII_SERDES_GP_LP_UP1r_GET
#define GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_GET BCMI_QSGMII_SERDES_GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_GET
#define GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_SET BCMI_QSGMII_SERDES_GP_LP_UP1r_LP_ADV_OVER_1G_10_0f_SET
#define READ_GP_LP_UP1r BCMI_QSGMII_SERDES_READ_GP_LP_UP1r
#define WRITE_GP_LP_UP1r BCMI_QSGMII_SERDES_WRITE_GP_LP_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_LP_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_LP_UP2
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x812d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_21_11 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_LP_UP2r (0x0000812d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_LP_UP2r_SIZE 4

/*
 * This structure should be used to declare and program GP_LP_UP2.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_LP_UP2r_s {
	uint32_t v[1];
	uint32_t gp_lp_up2[1];
	uint32_t _gp_lp_up2;
} BCMI_QSGMII_SERDES_GP_LP_UP2r_t;

#define BCMI_QSGMII_SERDES_GP_LP_UP2r_CLR(r) (r).gp_lp_up2[0] = 0
#define BCMI_QSGMII_SERDES_GP_LP_UP2r_SET(r,d) (r).gp_lp_up2[0] = d
#define BCMI_QSGMII_SERDES_GP_LP_UP2r_GET(r) (r).gp_lp_up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_GET(r) (((r).gp_lp_up2[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_SET(r,f) (r).gp_lp_up2[0]=(((r).gp_lp_up2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access GP_LP_UP2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_LP_UP2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_LP_UP2r,(_r._gp_lp_up2))
#define BCMI_QSGMII_SERDES_WRITE_GP_LP_UP2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_LP_UP2r,(_r._gp_lp_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_LP_UP2r BCMI_QSGMII_SERDES_GP_LP_UP2r
#define GP_LP_UP2r_SIZE BCMI_QSGMII_SERDES_GP_LP_UP2r_SIZE
typedef BCMI_QSGMII_SERDES_GP_LP_UP2r_t GP_LP_UP2r_t;
#define GP_LP_UP2r_CLR BCMI_QSGMII_SERDES_GP_LP_UP2r_CLR
#define GP_LP_UP2r_SET BCMI_QSGMII_SERDES_GP_LP_UP2r_SET
#define GP_LP_UP2r_GET BCMI_QSGMII_SERDES_GP_LP_UP2r_GET
#define GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_GET BCMI_QSGMII_SERDES_GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_GET
#define GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_SET BCMI_QSGMII_SERDES_GP_LP_UP2r_LP_ADV_OVER_1G_21_11f_SET
#define READ_GP_LP_UP2r BCMI_QSGMII_SERDES_READ_GP_LP_UP2r
#define WRITE_GP_LP_UP2r BCMI_QSGMII_SERDES_WRITE_GP_LP_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_LP_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  GP_LP_UP3
 * BLOCKS:   GP_STATUS
 * REGADDR:  0x812e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_31_22 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_GP_LP_UP3r (0x0000812e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_GP_LP_UP3r_SIZE 4

/*
 * This structure should be used to declare and program GP_LP_UP3.
 *
 */
typedef union BCMI_QSGMII_SERDES_GP_LP_UP3r_s {
	uint32_t v[1];
	uint32_t gp_lp_up3[1];
	uint32_t _gp_lp_up3;
} BCMI_QSGMII_SERDES_GP_LP_UP3r_t;

#define BCMI_QSGMII_SERDES_GP_LP_UP3r_CLR(r) (r).gp_lp_up3[0] = 0
#define BCMI_QSGMII_SERDES_GP_LP_UP3r_SET(r,d) (r).gp_lp_up3[0] = d
#define BCMI_QSGMII_SERDES_GP_LP_UP3r_GET(r) (r).gp_lp_up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_GET(r) (((r).gp_lp_up3[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_SET(r,f) (r).gp_lp_up3[0]=(((r).gp_lp_up3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access GP_LP_UP3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_GP_LP_UP3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_GP_LP_UP3r,(_r._gp_lp_up3))
#define BCMI_QSGMII_SERDES_WRITE_GP_LP_UP3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_GP_LP_UP3r,(_r._gp_lp_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define GP_LP_UP3r BCMI_QSGMII_SERDES_GP_LP_UP3r
#define GP_LP_UP3r_SIZE BCMI_QSGMII_SERDES_GP_LP_UP3r_SIZE
typedef BCMI_QSGMII_SERDES_GP_LP_UP3r_t GP_LP_UP3r_t;
#define GP_LP_UP3r_CLR BCMI_QSGMII_SERDES_GP_LP_UP3r_CLR
#define GP_LP_UP3r_SET BCMI_QSGMII_SERDES_GP_LP_UP3r_SET
#define GP_LP_UP3r_GET BCMI_QSGMII_SERDES_GP_LP_UP3r_GET
#define GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_GET BCMI_QSGMII_SERDES_GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_GET
#define GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_SET BCMI_QSGMII_SERDES_GP_LP_UP3r_LP_ADV_OVER_1G_31_22f_SET
#define READ_GP_LP_UP3r BCMI_QSGMII_SERDES_READ_GP_LP_UP3r
#define WRITE_GP_LP_UP3r BCMI_QSGMII_SERDES_WRITE_GP_LP_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_GP_LP_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GSTATUS
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8130
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RXSEQDONE        
 *     PD_LSSFAULTCOUNT 
 *     PD_PARK_AN       
 *     PD_BUSY          
 *     PD_TXDLANEOFF    
 *     PD_TUNEPLL10G    
 *     PD_TUNEPLL12G    
 *     PD_LSSFAULTCOUNT_EN 
 *     PD_CX4_EN        
 *     PD_LINK          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr (0x00008130 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GSTATUSr_s {
	uint32_t v[1];
	uint32_t pardet10gstatus[1];
	uint32_t _pardet10gstatus;
} BCMI_QSGMII_SERDES_PARDET10GSTATUSr_t;

#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_CLR(r) (r).pardet10gstatus[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_SET(r,d) (r).pardet10gstatus[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_GET(r) (r).pardet10gstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LINKf_GET(r) ((((r).pardet10gstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LINKf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_CX4_ENf_GET(r) ((((r).pardet10gstatus[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_CX4_ENf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_GET(r) ((((r).pardet10gstatus[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL12Gf_GET(r) ((((r).pardet10gstatus[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL12Gf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL10Gf_GET(r) ((((r).pardet10gstatus[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL10Gf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TXDLANEOFFf_GET(r) ((((r).pardet10gstatus[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TXDLANEOFFf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_BUSYf_GET(r) ((((r).pardet10gstatus[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_BUSYf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_PARK_ANf_GET(r) ((((r).pardet10gstatus[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_PARK_ANf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_GET(r) ((((r).pardet10gstatus[0]) >> 4) & 0xf)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0xf << 4)) | ((((uint32_t)f) & 0xf) << 4))
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_RXSEQDONEf_GET(r) (((r).pardet10gstatus[0]) & 0xf)
#define BCMI_QSGMII_SERDES_PARDET10GSTATUSr_RXSEQDONEf_SET(r,f) (r).pardet10gstatus[0]=(((r).pardet10gstatus[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access PARDET10GSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GSTATUSr,(_r._pardet10gstatus))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GSTATUSr,(_r._pardet10gstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GSTATUSr BCMI_QSGMII_SERDES_PARDET10GSTATUSr
#define PARDET10GSTATUSr_SIZE BCMI_QSGMII_SERDES_PARDET10GSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GSTATUSr_t PARDET10GSTATUSr_t;
#define PARDET10GSTATUSr_CLR BCMI_QSGMII_SERDES_PARDET10GSTATUSr_CLR
#define PARDET10GSTATUSr_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_SET
#define PARDET10GSTATUSr_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_GET
#define PARDET10GSTATUSr_PD_LINKf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LINKf_GET
#define PARDET10GSTATUSr_PD_LINKf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LINKf_SET
#define PARDET10GSTATUSr_PD_CX4_ENf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_CX4_ENf_GET
#define PARDET10GSTATUSr_PD_CX4_ENf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_CX4_ENf_SET
#define PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_GET
#define PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNT_ENf_SET
#define PARDET10GSTATUSr_PD_TUNEPLL12Gf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL12Gf_GET
#define PARDET10GSTATUSr_PD_TUNEPLL12Gf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL12Gf_SET
#define PARDET10GSTATUSr_PD_TUNEPLL10Gf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL10Gf_GET
#define PARDET10GSTATUSr_PD_TUNEPLL10Gf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TUNEPLL10Gf_SET
#define PARDET10GSTATUSr_PD_TXDLANEOFFf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TXDLANEOFFf_GET
#define PARDET10GSTATUSr_PD_TXDLANEOFFf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_TXDLANEOFFf_SET
#define PARDET10GSTATUSr_PD_BUSYf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_BUSYf_GET
#define PARDET10GSTATUSr_PD_BUSYf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_BUSYf_SET
#define PARDET10GSTATUSr_PD_PARK_ANf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_PARK_ANf_GET
#define PARDET10GSTATUSr_PD_PARK_ANf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_PARK_ANf_SET
#define PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_GET
#define PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_PD_LSSFAULTCOUNTf_SET
#define PARDET10GSTATUSr_RXSEQDONEf_GET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_RXSEQDONEf_GET
#define PARDET10GSTATUSr_RXSEQDONEf_SET BCMI_QSGMII_SERDES_PARDET10GSTATUSr_RXSEQDONEf_SET
#define READ_PARDET10GSTATUSr BCMI_QSGMII_SERDES_READ_PARDET10GSTATUSr
#define WRITE_PARDET10GSTATUSr BCMI_QSGMII_SERDES_WRITE_PARDET10GSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GCONTROL
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8131
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PARDET10G_EN     
 *     PD_FAST_TIMER_EN 
 *     PD_STAT_SEL      
 *     PD_10G_DISABLE   
 *     PD_10G_TXDON_DISABLE 
 *     PD_12G_DISABLE   
 *     PD_12G_TXDON_DISABLE 
 *     PD_SW_TXDOFF     
 *     PD_SW_LSSFAULTCOUNT_EN 
 *     PD_SW_TUNEPLL10G 
 *     PD_SW_TUNEPLL12G 
 *     PD_SW_CX4_EN     
 *     PD_SW_BUSY_AN    
 *     PD_SW_OVERIDE    
 *     PD_CX4_INIT      
 *     FORCE_PARDET10G_EN 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr (0x00008131 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GCONTROLr_s {
	uint32_t v[1];
	uint32_t pardet10gcontrol[1];
	uint32_t _pardet10gcontrol;
} BCMI_QSGMII_SERDES_PARDET10GCONTROLr_t;

#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_CLR(r) (r).pardet10gcontrol[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_SET(r,d) (r).pardet10gcontrol[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_GET(r) (r).pardet10gcontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET(r) ((((r).pardet10gcontrol[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_CX4_INITf_GET(r) ((((r).pardet10gcontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_CX4_INITf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_OVERIDEf_GET(r) ((((r).pardet10gcontrol[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_OVERIDEf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET(r) ((((r).pardet10gcontrol[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_CX4_ENf_GET(r) ((((r).pardet10gcontrol[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_CX4_ENf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET(r) ((((r).pardet10gcontrol[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET(r) ((((r).pardet10gcontrol[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET(r) ((((r).pardet10gcontrol[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TXDOFFf_GET(r) ((((r).pardet10gcontrol[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TXDOFFf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET(r) ((((r).pardet10gcontrol[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_DISABLEf_GET(r) ((((r).pardet10gcontrol[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_DISABLEf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET(r) ((((r).pardet10gcontrol[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_DISABLEf_GET(r) ((((r).pardet10gcontrol[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_DISABLEf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_STAT_SELf_GET(r) ((((r).pardet10gcontrol[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_STAT_SELf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET(r) ((((r).pardet10gcontrol[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PARDET10G_ENf_GET(r) (((r).pardet10gcontrol[0]) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PARDET10G_ENf_SET(r,f) (r).pardet10gcontrol[0]=(((r).pardet10gcontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PARDET10GCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GCONTROLr,(_r._pardet10gcontrol))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GCONTROLr,(_r._pardet10gcontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GCONTROLr BCMI_QSGMII_SERDES_PARDET10GCONTROLr
#define PARDET10GCONTROLr_SIZE BCMI_QSGMII_SERDES_PARDET10GCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GCONTROLr_t PARDET10GCONTROLr_t;
#define PARDET10GCONTROLr_CLR BCMI_QSGMII_SERDES_PARDET10GCONTROLr_CLR
#define PARDET10GCONTROLr_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_SET
#define PARDET10GCONTROLr_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_GET
#define PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_GET
#define PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_FORCE_PARDET10G_ENf_SET
#define PARDET10GCONTROLr_PD_CX4_INITf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_CX4_INITf_GET
#define PARDET10GCONTROLr_PD_CX4_INITf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_CX4_INITf_SET
#define PARDET10GCONTROLr_PD_SW_OVERIDEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_OVERIDEf_GET
#define PARDET10GCONTROLr_PD_SW_OVERIDEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_OVERIDEf_SET
#define PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_BUSY_ANf_GET
#define PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_BUSY_ANf_SET
#define PARDET10GCONTROLr_PD_SW_CX4_ENf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_CX4_ENf_GET
#define PARDET10GCONTROLr_PD_SW_CX4_ENf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_CX4_ENf_SET
#define PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_GET
#define PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL12Gf_SET
#define PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_GET
#define PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TUNEPLL10Gf_SET
#define PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_GET
#define PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_LSSFAULTCOUNT_ENf_SET
#define PARDET10GCONTROLr_PD_SW_TXDOFFf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TXDOFFf_GET
#define PARDET10GCONTROLr_PD_SW_TXDOFFf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_SW_TXDOFFf_SET
#define PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_GET
#define PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_TXDON_DISABLEf_SET
#define PARDET10GCONTROLr_PD_12G_DISABLEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_DISABLEf_GET
#define PARDET10GCONTROLr_PD_12G_DISABLEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_12G_DISABLEf_SET
#define PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_GET
#define PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_TXDON_DISABLEf_SET
#define PARDET10GCONTROLr_PD_10G_DISABLEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_DISABLEf_GET
#define PARDET10GCONTROLr_PD_10G_DISABLEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_10G_DISABLEf_SET
#define PARDET10GCONTROLr_PD_STAT_SELf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_STAT_SELf_GET
#define PARDET10GCONTROLr_PD_STAT_SELf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_STAT_SELf_SET
#define PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_GET
#define PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PD_FAST_TIMER_ENf_SET
#define PARDET10GCONTROLr_PARDET10G_ENf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PARDET10G_ENf_GET
#define PARDET10GCONTROLr_PARDET10G_ENf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROLr_PARDET10G_ENf_SET
#define READ_PARDET10GCONTROLr BCMI_QSGMII_SERDES_READ_PARDET10GCONTROLr
#define WRITE_PARDET10GCONTROLr BCMI_QSGMII_SERDES_WRITE_PARDET10GCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GSIGDET
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8132
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PD_SD_COUNT      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr (0x00008132 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GSIGDET.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GSIGDETr_s {
	uint32_t v[1];
	uint32_t pardet10gsigdet[1];
	uint32_t _pardet10gsigdet;
} BCMI_QSGMII_SERDES_PARDET10GSIGDETr_t;

#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_CLR(r) (r).pardet10gsigdet[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_SET(r,d) (r).pardet10gsigdet[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_GET(r) (r).pardet10gsigdet[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_PD_SD_COUNTf_GET(r) (((r).pardet10gsigdet[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_PARDET10GSIGDETr_PD_SD_COUNTf_SET(r,f) (r).pardet10gsigdet[0]=(((r).pardet10gsigdet[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PARDET10GSIGDET.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GSIGDETr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GSIGDETr,(_r._pardet10gsigdet))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GSIGDETr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GSIGDETr,(_r._pardet10gsigdet))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GSIGDETr BCMI_QSGMII_SERDES_PARDET10GSIGDETr
#define PARDET10GSIGDETr_SIZE BCMI_QSGMII_SERDES_PARDET10GSIGDETr_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GSIGDETr_t PARDET10GSIGDETr_t;
#define PARDET10GSIGDETr_CLR BCMI_QSGMII_SERDES_PARDET10GSIGDETr_CLR
#define PARDET10GSIGDETr_SET BCMI_QSGMII_SERDES_PARDET10GSIGDETr_SET
#define PARDET10GSIGDETr_GET BCMI_QSGMII_SERDES_PARDET10GSIGDETr_GET
#define PARDET10GSIGDETr_PD_SD_COUNTf_GET BCMI_QSGMII_SERDES_PARDET10GSIGDETr_PD_SD_COUNTf_GET
#define PARDET10GSIGDETr_PD_SD_COUNTf_SET BCMI_QSGMII_SERDES_PARDET10GSIGDETr_PD_SD_COUNTf_SET
#define READ_PARDET10GSIGDETr BCMI_QSGMII_SERDES_READ_PARDET10GSIGDETr
#define WRITE_PARDET10GSIGDETr BCMI_QSGMII_SERDES_WRITE_PARDET10GSIGDETr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GSIGDETr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GLINK
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8133
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PD_LINK_COUNT    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GLINKr (0x00008133 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GLINKr_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GLINK.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GLINKr_s {
	uint32_t v[1];
	uint32_t pardet10glink[1];
	uint32_t _pardet10glink;
} BCMI_QSGMII_SERDES_PARDET10GLINKr_t;

#define BCMI_QSGMII_SERDES_PARDET10GLINKr_CLR(r) (r).pardet10glink[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GLINKr_SET(r,d) (r).pardet10glink[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GLINKr_GET(r) (r).pardet10glink[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GLINKr_PD_LINK_COUNTf_GET(r) (((r).pardet10glink[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_PARDET10GLINKr_PD_LINK_COUNTf_SET(r,f) (r).pardet10glink[0]=(((r).pardet10glink[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PARDET10GLINK.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GLINKr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GLINKr,(_r._pardet10glink))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GLINKr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GLINKr,(_r._pardet10glink))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GLINKr BCMI_QSGMII_SERDES_PARDET10GLINKr
#define PARDET10GLINKr_SIZE BCMI_QSGMII_SERDES_PARDET10GLINKr_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GLINKr_t PARDET10GLINKr_t;
#define PARDET10GLINKr_CLR BCMI_QSGMII_SERDES_PARDET10GLINKr_CLR
#define PARDET10GLINKr_SET BCMI_QSGMII_SERDES_PARDET10GLINKr_SET
#define PARDET10GLINKr_GET BCMI_QSGMII_SERDES_PARDET10GLINKr_GET
#define PARDET10GLINKr_PD_LINK_COUNTf_GET BCMI_QSGMII_SERDES_PARDET10GLINKr_PD_LINK_COUNTf_GET
#define PARDET10GLINKr_PD_LINK_COUNTf_SET BCMI_QSGMII_SERDES_PARDET10GLINKr_PD_LINK_COUNTf_SET
#define READ_PARDET10GLINKr BCMI_QSGMII_SERDES_READ_PARDET10GLINKr
#define WRITE_PARDET10GLINKr BCMI_QSGMII_SERDES_WRITE_PARDET10GLINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GLINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GLOSTLINK
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8134
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PD_LOSTLINK_COUNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr (0x00008134 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GLOSTLINK.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_s {
	uint32_t v[1];
	uint32_t pardet10glostlink[1];
	uint32_t _pardet10glostlink;
} BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_t;

#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_CLR(r) (r).pardet10glostlink[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_SET(r,d) (r).pardet10glostlink[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_GET(r) (r).pardet10glostlink[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET(r) (((r).pardet10glostlink[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET(r,f) (r).pardet10glostlink[0]=(((r).pardet10glostlink[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access PARDET10GLOSTLINK.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GLOSTLINKr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr,(_r._pardet10glostlink))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GLOSTLINKr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr,(_r._pardet10glostlink))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GLOSTLINKr BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr
#define PARDET10GLOSTLINKr_SIZE BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_t PARDET10GLOSTLINKr_t;
#define PARDET10GLOSTLINKr_CLR BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_CLR
#define PARDET10GLOSTLINKr_SET BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_SET
#define PARDET10GLOSTLINKr_GET BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_GET
#define PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_GET
#define PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr_PD_LOSTLINK_COUNTf_SET
#define READ_PARDET10GLOSTLINKr BCMI_QSGMII_SERDES_READ_PARDET10GLOSTLINKr
#define WRITE_PARDET10GLOSTLINKr BCMI_QSGMII_SERDES_WRITE_PARDET10GLOSTLINKr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GLOSTLINKr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL1
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8135
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_INTERNAL_10US_TIMER_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL1r (0x00008135 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL1r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL1r_s {
	uint32_t v[1];
	uint32_t cl73control1[1];
	uint32_t _cl73control1;
} BCMI_QSGMII_SERDES_CL73CONTROL1r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL1r_CLR(r) (r).cl73control1[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL1r_SET(r,d) (r).cl73control1[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL1r_GET(r) (r).cl73control1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET(r) (((r).cl73control1[0]) & 0xff)
#define BCMI_QSGMII_SERDES_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET(r,f) (r).cl73control1[0]=(((r).cl73control1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access CL73CONTROL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL1r,(_r._cl73control1))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL1r,(_r._cl73control1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL1r BCMI_QSGMII_SERDES_CL73CONTROL1r
#define CL73CONTROL1r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL1r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL1r_t CL73CONTROL1r_t;
#define CL73CONTROL1r_CLR BCMI_QSGMII_SERDES_CL73CONTROL1r_CLR
#define CL73CONTROL1r_SET BCMI_QSGMII_SERDES_CL73CONTROL1r_SET
#define CL73CONTROL1r_GET BCMI_QSGMII_SERDES_CL73CONTROL1r_GET
#define CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_GET
#define CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL1r_CL73_INTERNAL_10US_TIMER_VALf_SET
#define READ_CL73CONTROL1r BCMI_QSGMII_SERDES_READ_CL73CONTROL1r
#define WRITE_CL73CONTROL1r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL2
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8136
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_LINK_FAIL_INHIBIT_TIMER_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL2r (0x00008136 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL2r_s {
	uint32_t v[1];
	uint32_t cl73control2[1];
	uint32_t _cl73control2;
} BCMI_QSGMII_SERDES_CL73CONTROL2r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL2r_CLR(r) (r).cl73control2[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL2r_SET(r,d) (r).cl73control2[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL2r_GET(r) (r).cl73control2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET(r) (((r).cl73control2[0]) & 0x1fff)
#define BCMI_QSGMII_SERDES_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET(r,f) (r).cl73control2[0]=(((r).cl73control2[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access CL73CONTROL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL2r,(_r._cl73control2))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL2r,(_r._cl73control2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL2r BCMI_QSGMII_SERDES_CL73CONTROL2r
#define CL73CONTROL2r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL2r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL2r_t CL73CONTROL2r_t;
#define CL73CONTROL2r_CLR BCMI_QSGMII_SERDES_CL73CONTROL2r_CLR
#define CL73CONTROL2r_SET BCMI_QSGMII_SERDES_CL73CONTROL2r_SET
#define CL73CONTROL2r_GET BCMI_QSGMII_SERDES_CL73CONTROL2r_GET
#define CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_GET
#define CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL2r_CL73_LINK_FAIL_INHIBIT_TIMER_VALf_SET
#define READ_CL73CONTROL2r BCMI_QSGMII_SERDES_READ_CL73CONTROL2r
#define WRITE_CL73CONTROL2r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL3
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8137
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_AN_WAIT_TIMER_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL3r (0x00008137 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL3r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL3.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL3r_s {
	uint32_t v[1];
	uint32_t cl73control3[1];
	uint32_t _cl73control3;
} BCMI_QSGMII_SERDES_CL73CONTROL3r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL3r_CLR(r) (r).cl73control3[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL3r_SET(r,d) (r).cl73control3[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL3r_GET(r) (r).cl73control3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET(r) (((r).cl73control3[0]) & 0x1fff)
#define BCMI_QSGMII_SERDES_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET(r,f) (r).cl73control3[0]=(((r).cl73control3[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access CL73CONTROL3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL3r,(_r._cl73control3))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL3r,(_r._cl73control3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL3r BCMI_QSGMII_SERDES_CL73CONTROL3r
#define CL73CONTROL3r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL3r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL3r_t CL73CONTROL3r_t;
#define CL73CONTROL3r_CLR BCMI_QSGMII_SERDES_CL73CONTROL3r_CLR
#define CL73CONTROL3r_SET BCMI_QSGMII_SERDES_CL73CONTROL3r_SET
#define CL73CONTROL3r_GET BCMI_QSGMII_SERDES_CL73CONTROL3r_GET
#define CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_GET
#define CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL3r_CL73_AN_WAIT_TIMER_VALf_SET
#define READ_CL73CONTROL3r BCMI_QSGMII_SERDES_READ_CL73CONTROL3r
#define WRITE_CL73CONTROL3r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL4
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8138
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_BREAK_LINK_TIMER_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL4r (0x00008138 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL4r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL4.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL4r_s {
	uint32_t v[1];
	uint32_t cl73control4[1];
	uint32_t _cl73control4;
} BCMI_QSGMII_SERDES_CL73CONTROL4r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL4r_CLR(r) (r).cl73control4[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL4r_SET(r,d) (r).cl73control4[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL4r_GET(r) (r).cl73control4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET(r) (((r).cl73control4[0]) & 0x1fff)
#define BCMI_QSGMII_SERDES_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET(r,f) (r).cl73control4[0]=(((r).cl73control4[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access CL73CONTROL4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL4r,(_r._cl73control4))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL4r,(_r._cl73control4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL4r BCMI_QSGMII_SERDES_CL73CONTROL4r
#define CL73CONTROL4r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL4r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL4r_t CL73CONTROL4r_t;
#define CL73CONTROL4r_CLR BCMI_QSGMII_SERDES_CL73CONTROL4r_CLR
#define CL73CONTROL4r_SET BCMI_QSGMII_SERDES_CL73CONTROL4r_SET
#define CL73CONTROL4r_GET BCMI_QSGMII_SERDES_CL73CONTROL4r_GET
#define CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_GET
#define CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL4r_CL73_BREAK_LINK_TIMER_VALf_SET
#define READ_CL73CONTROL4r BCMI_QSGMII_SERDES_READ_CL73CONTROL4r
#define WRITE_CL73CONTROL4r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL5
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x8139
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_BREAK_LINK_TIMER_BAM_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL5r (0x00008139 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL5r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL5.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL5r_s {
	uint32_t v[1];
	uint32_t cl73control5[1];
	uint32_t _cl73control5;
} BCMI_QSGMII_SERDES_CL73CONTROL5r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL5r_CLR(r) (r).cl73control5[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL5r_SET(r,d) (r).cl73control5[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL5r_GET(r) (r).cl73control5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_GET(r) (((r).cl73control5[0]) & 0x1fff)
#define BCMI_QSGMII_SERDES_CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_SET(r,f) (r).cl73control5[0]=(((r).cl73control5[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access CL73CONTROL5.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL5r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL5r,(_r._cl73control5))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL5r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL5r,(_r._cl73control5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL5r BCMI_QSGMII_SERDES_CL73CONTROL5r
#define CL73CONTROL5r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL5r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL5r_t CL73CONTROL5r_t;
#define CL73CONTROL5r_CLR BCMI_QSGMII_SERDES_CL73CONTROL5r_CLR
#define CL73CONTROL5r_SET BCMI_QSGMII_SERDES_CL73CONTROL5r_SET
#define CL73CONTROL5r_GET BCMI_QSGMII_SERDES_CL73CONTROL5r_GET
#define CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_GET
#define CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL5r_CL73_BREAK_LINK_TIMER_BAM_VALf_SET
#define READ_CL73CONTROL5r BCMI_QSGMII_SERDES_READ_CL73CONTROL5r
#define WRITE_CL73CONTROL5r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73CONTROL6
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x813a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_IGNORE_LINK_TIMER_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73CONTROL6r (0x0000813a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73CONTROL6r_SIZE 4

/*
 * This structure should be used to declare and program CL73CONTROL6.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73CONTROL6r_s {
	uint32_t v[1];
	uint32_t cl73control6[1];
	uint32_t _cl73control6;
} BCMI_QSGMII_SERDES_CL73CONTROL6r_t;

#define BCMI_QSGMII_SERDES_CL73CONTROL6r_CLR(r) (r).cl73control6[0] = 0
#define BCMI_QSGMII_SERDES_CL73CONTROL6r_SET(r,d) (r).cl73control6[0] = d
#define BCMI_QSGMII_SERDES_CL73CONTROL6r_GET(r) (r).cl73control6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET(r) (((r).cl73control6[0]) & 0x1fff)
#define BCMI_QSGMII_SERDES_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET(r,f) (r).cl73control6[0]=(((r).cl73control6[0] & ~((uint32_t)0x1fff)) | (((uint32_t)f) & 0x1fff))

/*
 * These macros can be used to access CL73CONTROL6.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73CONTROL6r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73CONTROL6r,(_r._cl73control6))
#define BCMI_QSGMII_SERDES_WRITE_CL73CONTROL6r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73CONTROL6r,(_r._cl73control6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73CONTROL6r BCMI_QSGMII_SERDES_CL73CONTROL6r
#define CL73CONTROL6r_SIZE BCMI_QSGMII_SERDES_CL73CONTROL6r_SIZE
typedef BCMI_QSGMII_SERDES_CL73CONTROL6r_t CL73CONTROL6r_t;
#define CL73CONTROL6r_CLR BCMI_QSGMII_SERDES_CL73CONTROL6r_CLR
#define CL73CONTROL6r_SET BCMI_QSGMII_SERDES_CL73CONTROL6r_SET
#define CL73CONTROL6r_GET BCMI_QSGMII_SERDES_CL73CONTROL6r_GET
#define CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET BCMI_QSGMII_SERDES_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_GET
#define CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET BCMI_QSGMII_SERDES_CL73CONTROL6r_CL73_IGNORE_LINK_TIMER_VALf_SET
#define READ_CL73CONTROL6r BCMI_QSGMII_SERDES_READ_CL73CONTROL6r
#define WRITE_CL73CONTROL6r BCMI_QSGMII_SERDES_WRITE_CL73CONTROL6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73CONTROL6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_DMETMRS
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x813b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL73_DME_PAGE_TEST_MIN_CNT_VAL 
 *     CL73_DME_PAGE_TEST_MAX_CNT_VAL 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr (0x0000813b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_SIZE 4

/*
 * This structure should be used to declare and program CL73_DMETMRS.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_DMETMRSr_s {
	uint32_t v[1];
	uint32_t cl73_dmetmrs[1];
	uint32_t _cl73_dmetmrs;
} BCMI_QSGMII_SERDES_CL73_DMETMRSr_t;

#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_CLR(r) (r).cl73_dmetmrs[0] = 0
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_SET(r,d) (r).cl73_dmetmrs[0] = d
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_GET(r) (r).cl73_dmetmrs[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET(r) ((((r).cl73_dmetmrs[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET(r,f) (r).cl73_dmetmrs[0]=(((r).cl73_dmetmrs[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET(r) (((r).cl73_dmetmrs[0]) & 0xff)
#define BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET(r,f) (r).cl73_dmetmrs[0]=(((r).cl73_dmetmrs[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access CL73_DMETMRS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_DMETMRSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_DMETMRSr,(_r._cl73_dmetmrs))
#define BCMI_QSGMII_SERDES_WRITE_CL73_DMETMRSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_DMETMRSr,(_r._cl73_dmetmrs))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_DMETMRSr BCMI_QSGMII_SERDES_CL73_DMETMRSr
#define CL73_DMETMRSr_SIZE BCMI_QSGMII_SERDES_CL73_DMETMRSr_SIZE
typedef BCMI_QSGMII_SERDES_CL73_DMETMRSr_t CL73_DMETMRSr_t;
#define CL73_DMETMRSr_CLR BCMI_QSGMII_SERDES_CL73_DMETMRSr_CLR
#define CL73_DMETMRSr_SET BCMI_QSGMII_SERDES_CL73_DMETMRSr_SET
#define CL73_DMETMRSr_GET BCMI_QSGMII_SERDES_CL73_DMETMRSr_GET
#define CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_GET
#define CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MAX_CNT_VALf_SET
#define CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_GET
#define CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET BCMI_QSGMII_SERDES_CL73_DMETMRSr_CL73_DME_PAGE_TEST_MIN_CNT_VALf_SET
#define READ_CL73_DMETMRSr BCMI_QSGMII_SERDES_READ_CL73_DMETMRSr
#define WRITE_CL73_DMETMRSr BCMI_QSGMII_SERDES_WRITE_CL73_DMETMRSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_DMETMRSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PARDET10GCONTROL2
 * BLOCKS:   PARALLEL_DETECT_10G
 * REGADDR:  0x813c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PD_IGNORELINK_DIS 
 *     PD_CL73_COUPLE_DIS 
 *     PD_USELINKSTATUS 
 *     PD_10G_DISABLE   
 *     PD_PARKFAIL      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r (0x0000813c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_SIZE 4

/*
 * This structure should be used to declare and program PARDET10GCONTROL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_s {
	uint32_t v[1];
	uint32_t pardet10gcontrol2[1];
	uint32_t _pardet10gcontrol2;
} BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_t;

#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_CLR(r) (r).pardet10gcontrol2[0] = 0
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_SET(r,d) (r).pardet10gcontrol2[0] = d
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_GET(r) (r).pardet10gcontrol2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_PARKFAILf_GET(r) ((((r).pardet10gcontrol2[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_PARKFAILf_SET(r,f) (r).pardet10gcontrol2[0]=(((r).pardet10gcontrol2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_10G_DISABLEf_GET(r) ((((r).pardet10gcontrol2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_10G_DISABLEf_SET(r,f) (r).pardet10gcontrol2[0]=(((r).pardet10gcontrol2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET(r) ((((r).pardet10gcontrol2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET(r,f) (r).pardet10gcontrol2[0]=(((r).pardet10gcontrol2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET(r) ((((r).pardet10gcontrol2[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET(r,f) (r).pardet10gcontrol2[0]=(((r).pardet10gcontrol2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET(r) (((r).pardet10gcontrol2[0]) & 0x1)
#define BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET(r,f) (r).pardet10gcontrol2[0]=(((r).pardet10gcontrol2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PARDET10GCONTROL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PARDET10GCONTROL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PARDET10GCONTROL2r,(_r._pardet10gcontrol2))
#define BCMI_QSGMII_SERDES_WRITE_PARDET10GCONTROL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PARDET10GCONTROL2r,(_r._pardet10gcontrol2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PARDET10GCONTROL2r BCMI_QSGMII_SERDES_PARDET10GCONTROL2r
#define PARDET10GCONTROL2r_SIZE BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_SIZE
typedef BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_t PARDET10GCONTROL2r_t;
#define PARDET10GCONTROL2r_CLR BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_CLR
#define PARDET10GCONTROL2r_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_SET
#define PARDET10GCONTROL2r_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_GET
#define PARDET10GCONTROL2r_PD_PARKFAILf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_PARKFAILf_GET
#define PARDET10GCONTROL2r_PD_PARKFAILf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_PARKFAILf_SET
#define PARDET10GCONTROL2r_PD_10G_DISABLEf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_10G_DISABLEf_GET
#define PARDET10GCONTROL2r_PD_10G_DISABLEf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_10G_DISABLEf_SET
#define PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_USELINKSTATUSf_GET
#define PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_USELINKSTATUSf_SET
#define PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_GET
#define PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_CL73_COUPLE_DISf_SET
#define PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_GET
#define PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET BCMI_QSGMII_SERDES_PARDET10GCONTROL2r_PD_IGNORELINK_DISf_SET
#define READ_PARDET10GCONTROL2r BCMI_QSGMII_SERDES_READ_PARDET10GCONTROL2r
#define WRITE_PARDET10GCONTROL2r BCMI_QSGMII_SERDES_WRITE_PARDET10GCONTROL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PARDET10GCONTROL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANARXJITTERCTRL
 * BLOCKS:   RX0 RX1 RX2 RX3 RX_ALL
 * REGADDR:  0x8190
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     JITTER_DIAG_EN   
 *     JITTER_DIAG_MODE 
 *     JITTER_SLOPE_RAMP 
 *     JITTER_TYPE      
 *     JITTER_SKEW      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr (0x00008190 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_SIZE 4

/*
 * This structure should be used to declare and program ANARXJITTERCTRL.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_s {
	uint32_t v[1];
	uint32_t anarxjitterctrl[1];
	uint32_t _anarxjitterctrl;
} BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_t;

#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_CLR(r) (r).anarxjitterctrl[0] = 0
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_SET(r,d) (r).anarxjitterctrl[0] = d
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_GET(r) (r).anarxjitterctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SKEWf_GET(r) ((((r).anarxjitterctrl[0]) >> 11) & 0x3)
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SKEWf_SET(r,f) (r).anarxjitterctrl[0]=(((r).anarxjitterctrl[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_TYPEf_GET(r) ((((r).anarxjitterctrl[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_TYPEf_SET(r,f) (r).anarxjitterctrl[0]=(((r).anarxjitterctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET(r) ((((r).anarxjitterctrl[0]) >> 2) & 0x7f)
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET(r,f) (r).anarxjitterctrl[0]=(((r).anarxjitterctrl[0] & ~((uint32_t)0x7f << 2)) | ((((uint32_t)f) & 0x7f) << 2))
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET(r) ((((r).anarxjitterctrl[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET(r,f) (r).anarxjitterctrl[0]=(((r).anarxjitterctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET(r) (((r).anarxjitterctrl[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET(r,f) (r).anarxjitterctrl[0]=(((r).anarxjitterctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXJITTERCTRL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANARXJITTERCTRLr(_pc,_i,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANARXJITTERCTRLr+((_i)*0x10),(_r._anarxjitterctrl))
#define BCMI_QSGMII_SERDES_WRITE_ANARXJITTERCTRLr(_pc,_i,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANARXJITTERCTRLr+((_i)*0x10),(_r._anarxjitterctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXJITTERCTRLr BCMI_QSGMII_SERDES_ANARXJITTERCTRLr
#define ANARXJITTERCTRLr_SIZE BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_SIZE
typedef BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_t ANARXJITTERCTRLr_t;
#define ANARXJITTERCTRLr_CLR BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_CLR
#define ANARXJITTERCTRLr_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_SET
#define ANARXJITTERCTRLr_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_GET
#define ANARXJITTERCTRLr_JITTER_SKEWf_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SKEWf_GET
#define ANARXJITTERCTRLr_JITTER_SKEWf_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SKEWf_SET
#define ANARXJITTERCTRLr_JITTER_TYPEf_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_TYPEf_GET
#define ANARXJITTERCTRLr_JITTER_TYPEf_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_TYPEf_SET
#define ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET
#define ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET
#define ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET
#define ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET
#define ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET
#define ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET BCMI_QSGMII_SERDES_ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET
#define READ_ANARXJITTERCTRLr BCMI_QSGMII_SERDES_READ_ANARXJITTERCTRLr
#define WRITE_ANARXJITTERCTRLr BCMI_QSGMII_SERDES_WRITE_ANARXJITTERCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANARXJITTERCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX0_1_ANARXJITTERCTRL
 * BLOCKS:   RX0_1
 * REGADDR:  0x8190
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     JITTER_DIAG_EN   
 *     JITTER_DIAG_MODE 
 *     JITTER_SLOPE_RAMP 
 *     JITTER_TYPE      
 *     JITTER_SKEW      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr (0x00008190 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_SIZE 4

/*
 * This structure should be used to declare and program RX0_1_ANARXJITTERCTRL.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_s {
	uint32_t v[1];
	uint32_t rx0_1_anarxjitterctrl[1];
	uint32_t _rx0_1_anarxjitterctrl;
} BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_t;

#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_CLR(r) (r).rx0_1_anarxjitterctrl[0] = 0
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_SET(r,d) (r).rx0_1_anarxjitterctrl[0] = d
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_GET(r) (r).rx0_1_anarxjitterctrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_GET(r) ((((r).rx0_1_anarxjitterctrl[0]) >> 11) & 0x3)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_SET(r,f) (r).rx0_1_anarxjitterctrl[0]=(((r).rx0_1_anarxjitterctrl[0] & ~((uint32_t)0x3 << 11)) | ((((uint32_t)f) & 0x3) << 11))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_GET(r) ((((r).rx0_1_anarxjitterctrl[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_SET(r,f) (r).rx0_1_anarxjitterctrl[0]=(((r).rx0_1_anarxjitterctrl[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET(r) ((((r).rx0_1_anarxjitterctrl[0]) >> 2) & 0x7f)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET(r,f) (r).rx0_1_anarxjitterctrl[0]=(((r).rx0_1_anarxjitterctrl[0] & ~((uint32_t)0x7f << 2)) | ((((uint32_t)f) & 0x7f) << 2))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET(r) ((((r).rx0_1_anarxjitterctrl[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET(r,f) (r).rx0_1_anarxjitterctrl[0]=(((r).rx0_1_anarxjitterctrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET(r) (((r).rx0_1_anarxjitterctrl[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET(r,f) (r).rx0_1_anarxjitterctrl[0]=(((r).rx0_1_anarxjitterctrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX0_1_ANARXJITTERCTRL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX0_1_ANARXJITTERCTRLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr,(_r._rx0_1_anarxjitterctrl))
#define BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXJITTERCTRLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr,(_r._rx0_1_anarxjitterctrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX0_1_ANARXJITTERCTRLr BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr
#define RX0_1_ANARXJITTERCTRLr_SIZE BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_SIZE
typedef BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_t RX0_1_ANARXJITTERCTRLr_t;
#define RX0_1_ANARXJITTERCTRLr_CLR BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_CLR
#define RX0_1_ANARXJITTERCTRLr_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_SET
#define RX0_1_ANARXJITTERCTRLr_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SKEWf_SET
#define RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_TYPEf_SET
#define RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_SLOPE_RAMPf_SET
#define RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_MODEf_SET
#define RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_GET
#define RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr_JITTER_DIAG_ENf_SET
#define READ_RX0_1_ANARXJITTERCTRLr BCMI_QSGMII_SERDES_READ_RX0_1_ANARXJITTERCTRLr
#define WRITE_RX0_1_ANARXJITTERCTRLr BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXJITTERCTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERCTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANARXJITTERTIME
 * BLOCKS:   RX0 RX1 RX2 RX3 RX_ALL
 * REGADDR:  0x8191
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     JITTER_T_HOLD    
 *     JITTER_T_RAMP    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr (0x00008191 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_SIZE 4

/*
 * This structure should be used to declare and program ANARXJITTERTIME.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_s {
	uint32_t v[1];
	uint32_t anarxjittertime[1];
	uint32_t _anarxjittertime;
} BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_t;

#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_CLR(r) (r).anarxjittertime[0] = 0
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_SET(r,d) (r).anarxjittertime[0] = d
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_GET(r) (r).anarxjittertime[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_RAMPf_GET(r) ((((r).anarxjittertime[0]) >> 5) & 0x3f)
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_RAMPf_SET(r,f) (r).anarxjittertime[0]=(((r).anarxjittertime[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_HOLDf_GET(r) (((r).anarxjittertime[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_HOLDf_SET(r,f) (r).anarxjittertime[0]=(((r).anarxjittertime[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access ANARXJITTERTIME.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANARXJITTERTIMEr(_pc,_i,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANARXJITTERTIMEr+((_i)*0x10),(_r._anarxjittertime))
#define BCMI_QSGMII_SERDES_WRITE_ANARXJITTERTIMEr(_pc,_i,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANARXJITTERTIMEr+((_i)*0x10),(_r._anarxjittertime))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXJITTERTIMEr BCMI_QSGMII_SERDES_ANARXJITTERTIMEr
#define ANARXJITTERTIMEr_SIZE BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_SIZE
typedef BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_t ANARXJITTERTIMEr_t;
#define ANARXJITTERTIMEr_CLR BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_CLR
#define ANARXJITTERTIMEr_SET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_SET
#define ANARXJITTERTIMEr_GET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_GET
#define ANARXJITTERTIMEr_JITTER_T_RAMPf_GET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_RAMPf_GET
#define ANARXJITTERTIMEr_JITTER_T_RAMPf_SET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_RAMPf_SET
#define ANARXJITTERTIMEr_JITTER_T_HOLDf_GET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_HOLDf_GET
#define ANARXJITTERTIMEr_JITTER_T_HOLDf_SET BCMI_QSGMII_SERDES_ANARXJITTERTIMEr_JITTER_T_HOLDf_SET
#define READ_ANARXJITTERTIMEr BCMI_QSGMII_SERDES_READ_ANARXJITTERTIMEr
#define WRITE_ANARXJITTERTIMEr BCMI_QSGMII_SERDES_WRITE_ANARXJITTERTIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANARXJITTERTIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX0_1_ANARXJITTERTIME
 * BLOCKS:   RX0_1
 * REGADDR:  0x8191
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     JITTER_T_HOLD    
 *     JITTER_T_RAMP    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr (0x00008191 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_SIZE 4

/*
 * This structure should be used to declare and program RX0_1_ANARXJITTERTIME.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_s {
	uint32_t v[1];
	uint32_t rx0_1_anarxjittertime[1];
	uint32_t _rx0_1_anarxjittertime;
} BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_t;

#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_CLR(r) (r).rx0_1_anarxjittertime[0] = 0
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_SET(r,d) (r).rx0_1_anarxjittertime[0] = d
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_GET(r) (r).rx0_1_anarxjittertime[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_GET(r) ((((r).rx0_1_anarxjittertime[0]) >> 5) & 0x3f)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_SET(r,f) (r).rx0_1_anarxjittertime[0]=(((r).rx0_1_anarxjittertime[0] & ~((uint32_t)0x3f << 5)) | ((((uint32_t)f) & 0x3f) << 5))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_GET(r) (((r).rx0_1_anarxjittertime[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_SET(r,f) (r).rx0_1_anarxjittertime[0]=(((r).rx0_1_anarxjittertime[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access RX0_1_ANARXJITTERTIME.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX0_1_ANARXJITTERTIMEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr,(_r._rx0_1_anarxjittertime))
#define BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXJITTERTIMEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr,(_r._rx0_1_anarxjittertime))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX0_1_ANARXJITTERTIMEr BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr
#define RX0_1_ANARXJITTERTIMEr_SIZE BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_SIZE
typedef BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_t RX0_1_ANARXJITTERTIMEr_t;
#define RX0_1_ANARXJITTERTIMEr_CLR BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_CLR
#define RX0_1_ANARXJITTERTIMEr_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_SET
#define RX0_1_ANARXJITTERTIMEr_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_GET
#define RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_GET
#define RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_RAMPf_SET
#define RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_GET
#define RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr_JITTER_T_HOLDf_SET
#define READ_RX0_1_ANARXJITTERTIMEr BCMI_QSGMII_SERDES_READ_RX0_1_ANARXJITTERTIMEr
#define WRITE_RX0_1_ANARXJITTERTIMEr BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXJITTERTIMEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX0_1_ANARXJITTERTIMEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANARXVEMADJ
 * BLOCKS:   RX0 RX1 RX2 RX3 RX_ALL
 * REGADDR:  0x8192
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_VEM_ADJ       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANARXVEMADJr (0x00008192 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANARXVEMADJr_SIZE 4

/*
 * This structure should be used to declare and program ANARXVEMADJ.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANARXVEMADJr_s {
	uint32_t v[1];
	uint32_t anarxvemadj[1];
	uint32_t _anarxvemadj;
} BCMI_QSGMII_SERDES_ANARXVEMADJr_t;

#define BCMI_QSGMII_SERDES_ANARXVEMADJr_CLR(r) (r).anarxvemadj[0] = 0
#define BCMI_QSGMII_SERDES_ANARXVEMADJr_SET(r,d) (r).anarxvemadj[0] = d
#define BCMI_QSGMII_SERDES_ANARXVEMADJr_GET(r) (r).anarxvemadj[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANARXVEMADJr_RX_VEM_ADJf_GET(r) (((r).anarxvemadj[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_ANARXVEMADJr_RX_VEM_ADJf_SET(r,f) (r).anarxvemadj[0]=(((r).anarxvemadj[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access ANARXVEMADJ.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANARXVEMADJr(_pc,_i,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANARXVEMADJr+((_i)*0x10),(_r._anarxvemadj))
#define BCMI_QSGMII_SERDES_WRITE_ANARXVEMADJr(_pc,_i,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANARXVEMADJr+((_i)*0x10),(_r._anarxvemadj))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXVEMADJr BCMI_QSGMII_SERDES_ANARXVEMADJr
#define ANARXVEMADJr_SIZE BCMI_QSGMII_SERDES_ANARXVEMADJr_SIZE
typedef BCMI_QSGMII_SERDES_ANARXVEMADJr_t ANARXVEMADJr_t;
#define ANARXVEMADJr_CLR BCMI_QSGMII_SERDES_ANARXVEMADJr_CLR
#define ANARXVEMADJr_SET BCMI_QSGMII_SERDES_ANARXVEMADJr_SET
#define ANARXVEMADJr_GET BCMI_QSGMII_SERDES_ANARXVEMADJr_GET
#define ANARXVEMADJr_RX_VEM_ADJf_GET BCMI_QSGMII_SERDES_ANARXVEMADJr_RX_VEM_ADJf_GET
#define ANARXVEMADJr_RX_VEM_ADJf_SET BCMI_QSGMII_SERDES_ANARXVEMADJr_RX_VEM_ADJf_SET
#define READ_ANARXVEMADJr BCMI_QSGMII_SERDES_READ_ANARXVEMADJr
#define WRITE_ANARXVEMADJr BCMI_QSGMII_SERDES_WRITE_ANARXVEMADJr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANARXVEMADJr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX0_1_ANARXVEMADJ
 * BLOCKS:   RX0_1
 * REGADDR:  0x8192
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_VEM_ADJ       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr (0x00008192 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_SIZE 4

/*
 * This structure should be used to declare and program RX0_1_ANARXVEMADJ.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_s {
	uint32_t v[1];
	uint32_t rx0_1_anarxvemadj[1];
	uint32_t _rx0_1_anarxvemadj;
} BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_t;

#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_CLR(r) (r).rx0_1_anarxvemadj[0] = 0
#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_SET(r,d) (r).rx0_1_anarxvemadj[0] = d
#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_GET(r) (r).rx0_1_anarxvemadj[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_RX_VEM_ADJf_GET(r) (((r).rx0_1_anarxvemadj[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_RX_VEM_ADJf_SET(r,f) (r).rx0_1_anarxvemadj[0]=(((r).rx0_1_anarxvemadj[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RX0_1_ANARXVEMADJ.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX0_1_ANARXVEMADJr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr,(_r._rx0_1_anarxvemadj))
#define BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXVEMADJr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr,(_r._rx0_1_anarxvemadj))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX0_1_ANARXVEMADJr BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr
#define RX0_1_ANARXVEMADJr_SIZE BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_SIZE
typedef BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_t RX0_1_ANARXVEMADJr_t;
#define RX0_1_ANARXVEMADJr_CLR BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_CLR
#define RX0_1_ANARXVEMADJr_SET BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_SET
#define RX0_1_ANARXVEMADJr_GET BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_GET
#define RX0_1_ANARXVEMADJr_RX_VEM_ADJf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_RX_VEM_ADJf_GET
#define RX0_1_ANARXVEMADJr_RX_VEM_ADJf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr_RX_VEM_ADJf_SET
#define READ_RX0_1_ANARXVEMADJr BCMI_QSGMII_SERDES_READ_RX0_1_ANARXVEMADJr
#define WRITE_RX0_1_ANARXVEMADJr BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXVEMADJr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX0_1_ANARXVEMADJr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  ANARXCONTROLVEM
 * BLOCKS:   RX0 RX1 RX2 RX3 RX_ALL
 * REGADDR:  0x8193
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_VEM_SIGN_BIT  
 *     RX_VEM_PD        
 *     RX_SLUMPART_MODE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr (0x00008193 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_SIZE 4

/*
 * This structure should be used to declare and program ANARXCONTROLVEM.
 *
 */
typedef union BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_s {
	uint32_t v[1];
	uint32_t anarxcontrolvem[1];
	uint32_t _anarxcontrolvem;
} BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_t;

#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_CLR(r) (r).anarxcontrolvem[0] = 0
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_SET(r,d) (r).anarxcontrolvem[0] = d
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_GET(r) (r).anarxcontrolvem[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET(r) ((((r).anarxcontrolvem[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET(r,f) (r).anarxcontrolvem[0]=(((r).anarxcontrolvem[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_PDf_GET(r) ((((r).anarxcontrolvem[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_PDf_SET(r,f) (r).anarxcontrolvem[0]=(((r).anarxcontrolvem[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET(r) (((r).anarxcontrolvem[0]) & 0x1)
#define BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET(r,f) (r).anarxcontrolvem[0]=(((r).anarxcontrolvem[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access ANARXCONTROLVEM.
 *
 */
#define BCMI_QSGMII_SERDES_READ_ANARXCONTROLVEMr(_pc,_i,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_ANARXCONTROLVEMr+((_i)*0x10),(_r._anarxcontrolvem))
#define BCMI_QSGMII_SERDES_WRITE_ANARXCONTROLVEMr(_pc,_i,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_ANARXCONTROLVEMr+((_i)*0x10),(_r._anarxcontrolvem))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define ANARXCONTROLVEMr BCMI_QSGMII_SERDES_ANARXCONTROLVEMr
#define ANARXCONTROLVEMr_SIZE BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_SIZE
typedef BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_t ANARXCONTROLVEMr_t;
#define ANARXCONTROLVEMr_CLR BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_CLR
#define ANARXCONTROLVEMr_SET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_SET
#define ANARXCONTROLVEMr_GET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_GET
#define ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET
#define ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET
#define ANARXCONTROLVEMr_RX_VEM_PDf_GET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_PDf_GET
#define ANARXCONTROLVEMr_RX_VEM_PDf_SET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_PDf_SET
#define ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET
#define ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET BCMI_QSGMII_SERDES_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET
#define READ_ANARXCONTROLVEMr BCMI_QSGMII_SERDES_READ_ANARXCONTROLVEMr
#define WRITE_ANARXCONTROLVEMr BCMI_QSGMII_SERDES_WRITE_ANARXCONTROLVEMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_ANARXCONTROLVEMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RX0_1_ANARXCONTROLVEM
 * BLOCKS:   RX0_1
 * REGADDR:  0x8193
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_VEM_SIGN_BIT  
 *     RX_VEM_PD        
 *     RX_SLUMPART_MODE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr (0x00008193 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_SIZE 4

/*
 * This structure should be used to declare and program RX0_1_ANARXCONTROLVEM.
 *
 */
typedef union BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_s {
	uint32_t v[1];
	uint32_t rx0_1_anarxcontrolvem[1];
	uint32_t _rx0_1_anarxcontrolvem;
} BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_t;

#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_CLR(r) (r).rx0_1_anarxcontrolvem[0] = 0
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_SET(r,d) (r).rx0_1_anarxcontrolvem[0] = d
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_GET(r) (r).rx0_1_anarxcontrolvem[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET(r) ((((r).rx0_1_anarxcontrolvem[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET(r,f) (r).rx0_1_anarxcontrolvem[0]=(((r).rx0_1_anarxcontrolvem[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_GET(r) ((((r).rx0_1_anarxcontrolvem[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_SET(r,f) (r).rx0_1_anarxcontrolvem[0]=(((r).rx0_1_anarxcontrolvem[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET(r) (((r).rx0_1_anarxcontrolvem[0]) & 0x1)
#define BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET(r,f) (r).rx0_1_anarxcontrolvem[0]=(((r).rx0_1_anarxcontrolvem[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access RX0_1_ANARXCONTROLVEM.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RX0_1_ANARXCONTROLVEMr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr,(_r._rx0_1_anarxcontrolvem))
#define BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXCONTROLVEMr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr,(_r._rx0_1_anarxcontrolvem))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RX0_1_ANARXCONTROLVEMr BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr
#define RX0_1_ANARXCONTROLVEMr_SIZE BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_SIZE
typedef BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_t RX0_1_ANARXCONTROLVEMr_t;
#define RX0_1_ANARXCONTROLVEMr_CLR BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_CLR
#define RX0_1_ANARXCONTROLVEMr_SET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_SET
#define RX0_1_ANARXCONTROLVEMr_GET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_GET
#define RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_GET
#define RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_SLUMPART_MODEf_SET
#define RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_GET
#define RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_PDf_SET
#define RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_GET
#define RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr_RX_VEM_SIGN_BITf_SET
#define READ_RX0_1_ANARXCONTROLVEMr BCMI_QSGMII_SERDES_READ_RX0_1_ANARXCONTROLVEMr
#define WRITE_RX0_1_ANARXCONTROLVEMr BCMI_QSGMII_SERDES_WRITE_RX0_1_ANARXCONTROLVEMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RX0_1_ANARXCONTROLVEMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CONTROL1000X1
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8300
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FIBER_MODE_1000X 
 *     TBI_INTERFACE    
 *     SIGNAL_DETECT_EN 
 *     INVERT_SIGNAL_DETECT 
 *     AUTODET_EN       
 *     SGMII_MASTER_MODE 
 *     DISABLE_PLL_PWRDWN 
 *     CRC_CHECKER_DISABLE 
 *     COMMA_DET_EN     
 *     ZERO_COMMA_DETECTOR_PHASE 
 *     REMOTE_LOOPBACK  
 *     SEL_RX_PKTS_FOR_CNTR 
 *     SERDES_TX_AMPLITUDE_OVERRIDE 
 *     MASTER_MDIO_PHY_SEL 
 *     DISABLE_SIGNAL_DETCT_FILTER 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CONTROL1000X1r (0x00008300 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CONTROL1000X1r_s {
	uint32_t v[1];
	uint32_t control1000x1[1];
	uint32_t _control1000x1;
} BCMI_QSGMII_SERDES_CONTROL1000X1r_t;

#define BCMI_QSGMII_SERDES_CONTROL1000X1r_CLR(r) (r).control1000x1[0] = 0
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SET(r,d) (r).control1000x1[0] = d
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_GET(r) (r).control1000x1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_GET(r) ((((r).control1000x1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_MASTER_MDIO_PHY_SELf_GET(r) ((((r).control1000x1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_MASTER_MDIO_PHY_SELf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_GET(r) ((((r).control1000x1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET(r) ((((r).control1000x1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_REMOTE_LOOPBACKf_GET(r) ((((r).control1000x1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_REMOTE_LOOPBACKf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET(r) ((((r).control1000x1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_COMMA_DET_ENf_GET(r) ((((r).control1000x1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_COMMA_DET_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET(r) ((((r).control1000x1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET(r) ((((r).control1000x1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SGMII_MASTER_MODEf_GET(r) ((((r).control1000x1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SGMII_MASTER_MODEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_AUTODET_ENf_GET(r) ((((r).control1000x1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_AUTODET_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET(r) ((((r).control1000x1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SIGNAL_DETECT_ENf_GET(r) ((((r).control1000x1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_SIGNAL_DETECT_ENf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_TBI_INTERFACEf_GET(r) ((((r).control1000x1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_TBI_INTERFACEf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_FIBER_MODE_1000Xf_GET(r) (((r).control1000x1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X1r_FIBER_MODE_1000Xf_SET(r,f) (r).control1000x1[0]=(((r).control1000x1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CONTROL1000X1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CONTROL1000X1r,(_r._control1000x1))
#define BCMI_QSGMII_SERDES_WRITE_CONTROL1000X1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CONTROL1000X1r,(_r._control1000x1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X1r BCMI_QSGMII_SERDES_CONTROL1000X1r
#define CONTROL1000X1r_SIZE BCMI_QSGMII_SERDES_CONTROL1000X1r_SIZE
typedef BCMI_QSGMII_SERDES_CONTROL1000X1r_t CONTROL1000X1r_t;
#define CONTROL1000X1r_CLR BCMI_QSGMII_SERDES_CONTROL1000X1r_CLR
#define CONTROL1000X1r_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_SET
#define CONTROL1000X1r_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_GET
#define CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_GET
#define CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_SIGNAL_DETCT_FILTERf_SET
#define CONTROL1000X1r_MASTER_MDIO_PHY_SELf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_MASTER_MDIO_PHY_SELf_GET
#define CONTROL1000X1r_MASTER_MDIO_PHY_SELf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_MASTER_MDIO_PHY_SELf_SET
#define CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_GET
#define CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_SERDES_TX_AMPLITUDE_OVERRIDEf_SET
#define CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_GET
#define CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_SEL_RX_PKTS_FOR_CNTRf_SET
#define CONTROL1000X1r_REMOTE_LOOPBACKf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_REMOTE_LOOPBACKf_GET
#define CONTROL1000X1r_REMOTE_LOOPBACKf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_REMOTE_LOOPBACKf_SET
#define CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_GET
#define CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_ZERO_COMMA_DETECTOR_PHASEf_SET
#define CONTROL1000X1r_COMMA_DET_ENf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_COMMA_DET_ENf_GET
#define CONTROL1000X1r_COMMA_DET_ENf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_COMMA_DET_ENf_SET
#define CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_CRC_CHECKER_DISABLEf_GET
#define CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_CRC_CHECKER_DISABLEf_SET
#define CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_GET
#define CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_DISABLE_PLL_PWRDWNf_SET
#define CONTROL1000X1r_SGMII_MASTER_MODEf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_SGMII_MASTER_MODEf_GET
#define CONTROL1000X1r_SGMII_MASTER_MODEf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_SGMII_MASTER_MODEf_SET
#define CONTROL1000X1r_AUTODET_ENf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_AUTODET_ENf_GET
#define CONTROL1000X1r_AUTODET_ENf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_AUTODET_ENf_SET
#define CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_GET
#define CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_INVERT_SIGNAL_DETECTf_SET
#define CONTROL1000X1r_SIGNAL_DETECT_ENf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_SIGNAL_DETECT_ENf_GET
#define CONTROL1000X1r_SIGNAL_DETECT_ENf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_SIGNAL_DETECT_ENf_SET
#define CONTROL1000X1r_TBI_INTERFACEf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_TBI_INTERFACEf_GET
#define CONTROL1000X1r_TBI_INTERFACEf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_TBI_INTERFACEf_SET
#define CONTROL1000X1r_FIBER_MODE_1000Xf_GET BCMI_QSGMII_SERDES_CONTROL1000X1r_FIBER_MODE_1000Xf_GET
#define CONTROL1000X1r_FIBER_MODE_1000Xf_SET BCMI_QSGMII_SERDES_CONTROL1000X1r_FIBER_MODE_1000Xf_SET
#define READ_CONTROL1000X1r BCMI_QSGMII_SERDES_READ_CONTROL1000X1r
#define WRITE_CONTROL1000X1r BCMI_QSGMII_SERDES_WRITE_CONTROL1000X1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CONTROL1000X1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CONTROL1000X2
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8301
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ENABLE_PARALLEL_DETECTION 
 *     DISABLE_FALSE_LINK 
 *     FILTER_FORCE_LINK 
 *     ENABLE_AUTONEG_ERR_TIMER 
 *     DISABLE_REMOTE_FAULT_SENSING 
 *     FORCE_XMIT_DATA_ON_TXSIDE 
 *     AUTONEG_FAST_TIMERS 
 *     DISABLE_CARRIER_EXTEND 
 *     DISABLE_TRRR_GENERATION 
 *     BYPASS_PCS_RX    
 *     BYPASS_PCS_TX    
 *     TEST_CNTR        
 *     TRANSMIT_PACKET_SEQ_TEST 
 *     TRANSMIT_IDLEJAM_SEQ_TEST 
 *     CLEAR_BER_COUNT  
 *     DISABLE_EXTEND_FDX_ONLY 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CONTROL1000X2r (0x00008301 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CONTROL1000X2r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X2.
 *
 */
typedef union BCMI_QSGMII_SERDES_CONTROL1000X2r_s {
	uint32_t v[1];
	uint32_t control1000x2[1];
	uint32_t _control1000x2;
} BCMI_QSGMII_SERDES_CONTROL1000X2r_t;

#define BCMI_QSGMII_SERDES_CONTROL1000X2r_CLR(r) (r).control1000x2[0] = 0
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_SET(r,d) (r).control1000x2[0] = d
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_GET(r) (r).control1000x2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET(r) ((((r).control1000x2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_CLEAR_BER_COUNTf_GET(r) ((((r).control1000x2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_CLEAR_BER_COUNTf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET(r) ((((r).control1000x2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET(r) ((((r).control1000x2[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TEST_CNTRf_GET(r) ((((r).control1000x2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_TEST_CNTRf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_TXf_GET(r) ((((r).control1000x2[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_TXf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_RXf_GET(r) ((((r).control1000x2[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_RXf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET(r) ((((r).control1000x2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET(r) ((((r).control1000x2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET(r) ((((r).control1000x2[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET(r) ((((r).control1000x2[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET(r) ((((r).control1000x2[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET(r) ((((r).control1000x2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_FILTER_FORCE_LINKf_GET(r) ((((r).control1000x2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_FILTER_FORCE_LINKf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_FALSE_LINKf_GET(r) ((((r).control1000x2[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_FALSE_LINKf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET(r) (((r).control1000x2[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET(r,f) (r).control1000x2[0]=(((r).control1000x2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CONTROL1000X2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CONTROL1000X2r,(_r._control1000x2))
#define BCMI_QSGMII_SERDES_WRITE_CONTROL1000X2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CONTROL1000X2r,(_r._control1000x2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X2r BCMI_QSGMII_SERDES_CONTROL1000X2r
#define CONTROL1000X2r_SIZE BCMI_QSGMII_SERDES_CONTROL1000X2r_SIZE
typedef BCMI_QSGMII_SERDES_CONTROL1000X2r_t CONTROL1000X2r_t;
#define CONTROL1000X2r_CLR BCMI_QSGMII_SERDES_CONTROL1000X2r_CLR
#define CONTROL1000X2r_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_SET
#define CONTROL1000X2r_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_GET
#define CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_GET
#define CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_EXTEND_FDX_ONLYf_SET
#define CONTROL1000X2r_CLEAR_BER_COUNTf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_CLEAR_BER_COUNTf_GET
#define CONTROL1000X2r_CLEAR_BER_COUNTf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_CLEAR_BER_COUNTf_SET
#define CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_GET
#define CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_IDLEJAM_SEQ_TESTf_SET
#define CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_GET
#define CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_TRANSMIT_PACKET_SEQ_TESTf_SET
#define CONTROL1000X2r_TEST_CNTRf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_TEST_CNTRf_GET
#define CONTROL1000X2r_TEST_CNTRf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_TEST_CNTRf_SET
#define CONTROL1000X2r_BYPASS_PCS_TXf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_TXf_GET
#define CONTROL1000X2r_BYPASS_PCS_TXf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_TXf_SET
#define CONTROL1000X2r_BYPASS_PCS_RXf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_RXf_GET
#define CONTROL1000X2r_BYPASS_PCS_RXf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_BYPASS_PCS_RXf_SET
#define CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_GET
#define CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_TRRR_GENERATIONf_SET
#define CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_GET
#define CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_CARRIER_EXTENDf_SET
#define CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_GET
#define CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_AUTONEG_FAST_TIMERSf_SET
#define CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_GET
#define CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_FORCE_XMIT_DATA_ON_TXSIDEf_SET
#define CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_GET
#define CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_REMOTE_FAULT_SENSINGf_SET
#define CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_GET
#define CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_AUTONEG_ERR_TIMERf_SET
#define CONTROL1000X2r_FILTER_FORCE_LINKf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_FILTER_FORCE_LINKf_GET
#define CONTROL1000X2r_FILTER_FORCE_LINKf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_FILTER_FORCE_LINKf_SET
#define CONTROL1000X2r_DISABLE_FALSE_LINKf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_FALSE_LINKf_GET
#define CONTROL1000X2r_DISABLE_FALSE_LINKf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_DISABLE_FALSE_LINKf_SET
#define CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_GET
#define CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET BCMI_QSGMII_SERDES_CONTROL1000X2r_ENABLE_PARALLEL_DETECTIONf_SET
#define READ_CONTROL1000X2r BCMI_QSGMII_SERDES_READ_CONTROL1000X2r
#define WRITE_CONTROL1000X2r BCMI_QSGMII_SERDES_WRITE_CONTROL1000X2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CONTROL1000X2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CONTROL1000X3
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8302
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_FIFO_RST      
 *     FIFO_ELASTICITY_TX 
 *     EARLY_PREAMBLE_TX 
 *     EARLY_PREAMBLE_RX 
 *     FREQ_LOCK_ELASTICITY_RX 
 *     FREQ_LOCK_ELASTICITY_TX 
 *     BYPASS_TXFIFO1000 
 *     FORCE_TXFIFO_ON  
 *     BLOCK_TXEN_MODE  
 *     JAM_FALSE_CARRIER_MODE 
 *     EXT_PHY_CRS_MODE 
 *     INVERT_EXT_PHY_CRS 
 *     DISABLE_TX_CRS   
 *     RXFIFO_GMII_RESET 
 *     DISABLE_PACKET_MISALIGN 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CONTROL1000X3r (0x00008302 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CONTROL1000X3r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X3.
 *
 */
typedef union BCMI_QSGMII_SERDES_CONTROL1000X3r_s {
	uint32_t v[1];
	uint32_t control1000x3[1];
	uint32_t _control1000x3;
} BCMI_QSGMII_SERDES_CONTROL1000X3r_t;

#define BCMI_QSGMII_SERDES_CONTROL1000X3r_CLR(r) (r).control1000x3[0] = 0
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_SET(r,d) (r).control1000x3[0] = d
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_GET(r) (r).control1000x3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET(r) ((((r).control1000x3[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_RXFIFO_GMII_RESETf_GET(r) ((((r).control1000x3[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_RXFIFO_GMII_RESETf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_TX_CRSf_GET(r) ((((r).control1000x3[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_TX_CRSf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET(r) ((((r).control1000x3[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET(r) ((((r).control1000x3[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET(r) ((((r).control1000x3[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_BLOCK_TXEN_MODEf_GET(r) ((((r).control1000x3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_BLOCK_TXEN_MODEf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FORCE_TXFIFO_ONf_GET(r) ((((r).control1000x3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FORCE_TXFIFO_ONf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_BYPASS_TXFIFO1000f_GET(r) ((((r).control1000x3[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_BYPASS_TXFIFO1000f_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET(r) ((((r).control1000x3[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET(r) ((((r).control1000x3[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET(r) ((((r).control1000x3[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET(r) ((((r).control1000x3[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FIFO_ELASTICITY_TXf_GET(r) ((((r).control1000x3[0]) >> 1) & 0x3)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_FIFO_ELASTICITY_TXf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_TX_FIFO_RSTf_GET(r) (((r).control1000x3[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X3r_TX_FIFO_RSTf_SET(r,f) (r).control1000x3[0]=(((r).control1000x3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CONTROL1000X3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CONTROL1000X3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CONTROL1000X3r,(_r._control1000x3))
#define BCMI_QSGMII_SERDES_WRITE_CONTROL1000X3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CONTROL1000X3r,(_r._control1000x3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X3r BCMI_QSGMII_SERDES_CONTROL1000X3r
#define CONTROL1000X3r_SIZE BCMI_QSGMII_SERDES_CONTROL1000X3r_SIZE
typedef BCMI_QSGMII_SERDES_CONTROL1000X3r_t CONTROL1000X3r_t;
#define CONTROL1000X3r_CLR BCMI_QSGMII_SERDES_CONTROL1000X3r_CLR
#define CONTROL1000X3r_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_SET
#define CONTROL1000X3r_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_GET
#define CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_GET
#define CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_PACKET_MISALIGNf_SET
#define CONTROL1000X3r_RXFIFO_GMII_RESETf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_RXFIFO_GMII_RESETf_GET
#define CONTROL1000X3r_RXFIFO_GMII_RESETf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_RXFIFO_GMII_RESETf_SET
#define CONTROL1000X3r_DISABLE_TX_CRSf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_TX_CRSf_GET
#define CONTROL1000X3r_DISABLE_TX_CRSf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_DISABLE_TX_CRSf_SET
#define CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_GET
#define CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_INVERT_EXT_PHY_CRSf_SET
#define CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_EXT_PHY_CRS_MODEf_GET
#define CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_EXT_PHY_CRS_MODEf_SET
#define CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_GET
#define CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_JAM_FALSE_CARRIER_MODEf_SET
#define CONTROL1000X3r_BLOCK_TXEN_MODEf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_BLOCK_TXEN_MODEf_GET
#define CONTROL1000X3r_BLOCK_TXEN_MODEf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_BLOCK_TXEN_MODEf_SET
#define CONTROL1000X3r_FORCE_TXFIFO_ONf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_FORCE_TXFIFO_ONf_GET
#define CONTROL1000X3r_FORCE_TXFIFO_ONf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_FORCE_TXFIFO_ONf_SET
#define CONTROL1000X3r_BYPASS_TXFIFO1000f_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_BYPASS_TXFIFO1000f_GET
#define CONTROL1000X3r_BYPASS_TXFIFO1000f_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_BYPASS_TXFIFO1000f_SET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_GET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_TXf_SET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_GET
#define CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_FREQ_LOCK_ELASTICITY_RXf_SET
#define CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_RXf_GET
#define CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_RXf_SET
#define CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_TXf_GET
#define CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_EARLY_PREAMBLE_TXf_SET
#define CONTROL1000X3r_FIFO_ELASTICITY_TXf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_FIFO_ELASTICITY_TXf_GET
#define CONTROL1000X3r_FIFO_ELASTICITY_TXf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_FIFO_ELASTICITY_TXf_SET
#define CONTROL1000X3r_TX_FIFO_RSTf_GET BCMI_QSGMII_SERDES_CONTROL1000X3r_TX_FIFO_RSTf_GET
#define CONTROL1000X3r_TX_FIFO_RSTf_SET BCMI_QSGMII_SERDES_CONTROL1000X3r_TX_FIFO_RSTf_SET
#define READ_CONTROL1000X3r BCMI_QSGMII_SERDES_READ_CONTROL1000X3r
#define WRITE_CONTROL1000X3r BCMI_QSGMII_SERDES_WRITE_CONTROL1000X3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CONTROL1000X3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CONTROL1000X4
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8303
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MISCRXSTATUS_SEL 
 *     NP_COUNT_CLRNRD  
 *     NP_COUNT_CLRNBP  
 *     LP_NEXT_PAGE_SEL 
 *     FIFO_ERR_CLR     
 *     LINK_FORCE       
 *     LATCH_LINKDOWN_ENABLE 
 *     CLEAR_LINKDOWN   
 *     ZERO_RXDGMII     
 *     TX_CONFIG_REG_SEL 
 *     ENABLE_LAST_RESOLUTION_ERR 
 *     DISABLE_RESOLUTION_ERR_RESTART 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CONTROL1000X4r (0x00008303 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CONTROL1000X4r_SIZE 4

/*
 * This structure should be used to declare and program CONTROL1000X4.
 *
 */
typedef union BCMI_QSGMII_SERDES_CONTROL1000X4r_s {
	uint32_t v[1];
	uint32_t control1000x4[1];
	uint32_t _control1000x4;
} BCMI_QSGMII_SERDES_CONTROL1000X4r_t;

#define BCMI_QSGMII_SERDES_CONTROL1000X4r_CLR(r) (r).control1000x4[0] = 0
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_SET(r,d) (r).control1000x4[0] = d
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_GET(r) (r).control1000x4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET(r) ((((r).control1000x4[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET(r) ((((r).control1000x4[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_TX_CONFIG_REG_SELf_GET(r) ((((r).control1000x4[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_TX_CONFIG_REG_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_ZERO_RXDGMIIf_GET(r) ((((r).control1000x4[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_ZERO_RXDGMIIf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_CLEAR_LINKDOWNf_GET(r) ((((r).control1000x4[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_CLEAR_LINKDOWNf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET(r) ((((r).control1000x4[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LINK_FORCEf_GET(r) ((((r).control1000x4[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LINK_FORCEf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_FIFO_ERR_CLRf_GET(r) ((((r).control1000x4[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_FIFO_ERR_CLRf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET(r) ((((r).control1000x4[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNBPf_GET(r) ((((r).control1000x4[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNBPf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNRDf_GET(r) ((((r).control1000x4[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNRDf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_MISCRXSTATUS_SELf_GET(r) (((r).control1000x4[0]) & 0x7)
#define BCMI_QSGMII_SERDES_CONTROL1000X4r_MISCRXSTATUS_SELf_SET(r,f) (r).control1000x4[0]=(((r).control1000x4[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access CONTROL1000X4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CONTROL1000X4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CONTROL1000X4r,(_r._control1000x4))
#define BCMI_QSGMII_SERDES_WRITE_CONTROL1000X4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CONTROL1000X4r,(_r._control1000x4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CONTROL1000X4r BCMI_QSGMII_SERDES_CONTROL1000X4r
#define CONTROL1000X4r_SIZE BCMI_QSGMII_SERDES_CONTROL1000X4r_SIZE
typedef BCMI_QSGMII_SERDES_CONTROL1000X4r_t CONTROL1000X4r_t;
#define CONTROL1000X4r_CLR BCMI_QSGMII_SERDES_CONTROL1000X4r_CLR
#define CONTROL1000X4r_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_SET
#define CONTROL1000X4r_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_GET
#define CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_GET
#define CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_DISABLE_RESOLUTION_ERR_RESTARTf_SET
#define CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_GET
#define CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_ENABLE_LAST_RESOLUTION_ERRf_SET
#define CONTROL1000X4r_TX_CONFIG_REG_SELf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_TX_CONFIG_REG_SELf_GET
#define CONTROL1000X4r_TX_CONFIG_REG_SELf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_TX_CONFIG_REG_SELf_SET
#define CONTROL1000X4r_ZERO_RXDGMIIf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_ZERO_RXDGMIIf_GET
#define CONTROL1000X4r_ZERO_RXDGMIIf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_ZERO_RXDGMIIf_SET
#define CONTROL1000X4r_CLEAR_LINKDOWNf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_CLEAR_LINKDOWNf_GET
#define CONTROL1000X4r_CLEAR_LINKDOWNf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_CLEAR_LINKDOWNf_SET
#define CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_GET
#define CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_LATCH_LINKDOWN_ENABLEf_SET
#define CONTROL1000X4r_LINK_FORCEf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_LINK_FORCEf_GET
#define CONTROL1000X4r_LINK_FORCEf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_LINK_FORCEf_SET
#define CONTROL1000X4r_FIFO_ERR_CLRf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_FIFO_ERR_CLRf_GET
#define CONTROL1000X4r_FIFO_ERR_CLRf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_FIFO_ERR_CLRf_SET
#define CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_LP_NEXT_PAGE_SELf_GET
#define CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_LP_NEXT_PAGE_SELf_SET
#define CONTROL1000X4r_NP_COUNT_CLRNBPf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNBPf_GET
#define CONTROL1000X4r_NP_COUNT_CLRNBPf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNBPf_SET
#define CONTROL1000X4r_NP_COUNT_CLRNRDf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNRDf_GET
#define CONTROL1000X4r_NP_COUNT_CLRNRDf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_NP_COUNT_CLRNRDf_SET
#define CONTROL1000X4r_MISCRXSTATUS_SELf_GET BCMI_QSGMII_SERDES_CONTROL1000X4r_MISCRXSTATUS_SELf_GET
#define CONTROL1000X4r_MISCRXSTATUS_SELf_SET BCMI_QSGMII_SERDES_CONTROL1000X4r_MISCRXSTATUS_SELf_SET
#define READ_CONTROL1000X4r BCMI_QSGMII_SERDES_READ_CONTROL1000X4r
#define WRITE_CONTROL1000X4r BCMI_QSGMII_SERDES_WRITE_CONTROL1000X4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CONTROL1000X4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  STATUS1000X1
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8304
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SGMII_MODE       
 *     LINK_STATUS      
 *     DUPLEX_STATUS    
 *     SPEED_STATUS     
 *     PAUSE_RESOLUTION_TXSIDE 
 *     PAUSE_RESOLUTION_RXSIDE 
 *     EARLY_END_EXTENSION_DETECTED 
 *     CARRIER_EXTEND_ERR_DETECTED 
 *     RX_ERR_DETECTED  
 *     TX_ERR_DETECTED  
 *     CRC_ERR_DETECTED 
 *     FALSE_CARRIER_DETECTED 
 *     RXFIFO_ERR_DETECTED 
 *     TXFIFO_ERR_DETECTED 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_STATUS1000X1r (0x00008304 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_STATUS1000X1r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X1.
 *
 */
typedef union BCMI_QSGMII_SERDES_STATUS1000X1r_s {
	uint32_t v[1];
	uint32_t status1000x1[1];
	uint32_t _status1000x1;
} BCMI_QSGMII_SERDES_STATUS1000X1r_t;

#define BCMI_QSGMII_SERDES_STATUS1000X1r_CLR(r) (r).status1000x1[0] = 0
#define BCMI_QSGMII_SERDES_STATUS1000X1r_SET(r,d) (r).status1000x1[0] = d
#define BCMI_QSGMII_SERDES_STATUS1000X1r_GET(r) (r).status1000x1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_CRC_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_CRC_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_TX_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_TX_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_RX_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_RX_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET(r) ((((r).status1000x1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET(r) ((((r).status1000x1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET(r) ((((r).status1000x1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_SPEED_STATUSf_GET(r) ((((r).status1000x1[0]) >> 3) & 0x3)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_SPEED_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x3 << 3)) | ((((uint32_t)f) & 0x3) << 3))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_DUPLEX_STATUSf_GET(r) ((((r).status1000x1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_DUPLEX_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_LINK_STATUSf_GET(r) ((((r).status1000x1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_LINK_STATUSf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_STATUS1000X1r_SGMII_MODEf_GET(r) (((r).status1000x1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X1r_SGMII_MODEf_SET(r,f) (r).status1000x1[0]=(((r).status1000x1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access STATUS1000X1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_STATUS1000X1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_STATUS1000X1r,(_r._status1000x1))
#define BCMI_QSGMII_SERDES_WRITE_STATUS1000X1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_STATUS1000X1r,(_r._status1000x1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X1r BCMI_QSGMII_SERDES_STATUS1000X1r
#define STATUS1000X1r_SIZE BCMI_QSGMII_SERDES_STATUS1000X1r_SIZE
typedef BCMI_QSGMII_SERDES_STATUS1000X1r_t STATUS1000X1r_t;
#define STATUS1000X1r_CLR BCMI_QSGMII_SERDES_STATUS1000X1r_CLR
#define STATUS1000X1r_SET BCMI_QSGMII_SERDES_STATUS1000X1r_SET
#define STATUS1000X1r_GET BCMI_QSGMII_SERDES_STATUS1000X1r_GET
#define STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_GET
#define STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_TXFIFO_ERR_DETECTEDf_SET
#define STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_GET
#define STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_RXFIFO_ERR_DETECTEDf_SET
#define STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_GET
#define STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_FALSE_CARRIER_DETECTEDf_SET
#define STATUS1000X1r_CRC_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_CRC_ERR_DETECTEDf_GET
#define STATUS1000X1r_CRC_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_CRC_ERR_DETECTEDf_SET
#define STATUS1000X1r_TX_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_TX_ERR_DETECTEDf_GET
#define STATUS1000X1r_TX_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_TX_ERR_DETECTEDf_SET
#define STATUS1000X1r_RX_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_RX_ERR_DETECTEDf_GET
#define STATUS1000X1r_RX_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_RX_ERR_DETECTEDf_SET
#define STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_GET
#define STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_CARRIER_EXTEND_ERR_DETECTEDf_SET
#define STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_GET
#define STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_EARLY_END_EXTENSION_DETECTEDf_SET
#define STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_GET
#define STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_RXSIDEf_SET
#define STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_GET
#define STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_PAUSE_RESOLUTION_TXSIDEf_SET
#define STATUS1000X1r_SPEED_STATUSf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_SPEED_STATUSf_GET
#define STATUS1000X1r_SPEED_STATUSf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_SPEED_STATUSf_SET
#define STATUS1000X1r_DUPLEX_STATUSf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_DUPLEX_STATUSf_GET
#define STATUS1000X1r_DUPLEX_STATUSf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_DUPLEX_STATUSf_SET
#define STATUS1000X1r_LINK_STATUSf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_LINK_STATUSf_GET
#define STATUS1000X1r_LINK_STATUSf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_LINK_STATUSf_SET
#define STATUS1000X1r_SGMII_MODEf_GET BCMI_QSGMII_SERDES_STATUS1000X1r_SGMII_MODEf_GET
#define STATUS1000X1r_SGMII_MODEf_SET BCMI_QSGMII_SERDES_STATUS1000X1r_SGMII_MODEf_SET
#define READ_STATUS1000X1r BCMI_QSGMII_SERDES_READ_STATUS1000X1r
#define WRITE_STATUS1000X1r BCMI_QSGMII_SERDES_WRITE_STATUS1000X1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_STATUS1000X1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  STATUS1000X2
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8305
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_ERROR_STATE   
 *     ABILITY_DETECT_STATE 
 *     ACKNOWLEDGE_DETECT_STATE 
 *     COMPLETE_ACKNOWLEDGE_STATE 
 *     IDLE_DETECT_STATE 
 *     LINK_WENT_DOWN_FROM_LOSS_OF_SYNC 
 *     RUDI_INVALID     
 *     RUDI_I           
 *     RUDI_C           
 *     SYNC_STATUS_OK   
 *     SYNC_STATUS_FAIL 
 *     SGMII_SELECTOR_MISMATCH 
 *     AUTONEG_RESOLUTION_ERR 
 *     CONSISTENCY_MISMATCH 
 *     SGMII_MODE_CHANGE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_STATUS1000X2r (0x00008305 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_STATUS1000X2r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X2.
 *
 */
typedef union BCMI_QSGMII_SERDES_STATUS1000X2r_s {
	uint32_t v[1];
	uint32_t status1000x2[1];
	uint32_t _status1000x2;
} BCMI_QSGMII_SERDES_STATUS1000X2r_t;

#define BCMI_QSGMII_SERDES_STATUS1000X2r_CLR(r) (r).status1000x2[0] = 0
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SET(r,d) (r).status1000x2[0] = d
#define BCMI_QSGMII_SERDES_STATUS1000X2r_GET(r) (r).status1000x2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_MODE_CHANGEf_GET(r) ((((r).status1000x2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_MODE_CHANGEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET(r) ((((r).status1000x2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET(r) ((((r).status1000x2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET(r) ((((r).status1000x2[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_FAILf_GET(r) ((((r).status1000x2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_FAILf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_OKf_GET(r) ((((r).status1000x2[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_OKf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_Cf_GET(r) ((((r).status1000x2[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_Cf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_If_GET(r) ((((r).status1000x2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_If_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_INVALIDf_GET(r) ((((r).status1000x2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_INVALIDf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET(r) ((((r).status1000x2[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_IDLE_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_IDLE_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET(r) ((((r).status1000x2[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_ABILITY_DETECT_STATEf_GET(r) ((((r).status1000x2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_ABILITY_DETECT_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_STATUS1000X2r_AN_ERROR_STATEf_GET(r) (((r).status1000x2[0]) & 0x3)
#define BCMI_QSGMII_SERDES_STATUS1000X2r_AN_ERROR_STATEf_SET(r,f) (r).status1000x2[0]=(((r).status1000x2[0] & ~((uint32_t)0x3)) | (((uint32_t)f) & 0x3))

/*
 * These macros can be used to access STATUS1000X2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_STATUS1000X2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_STATUS1000X2r,(_r._status1000x2))
#define BCMI_QSGMII_SERDES_WRITE_STATUS1000X2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_STATUS1000X2r,(_r._status1000x2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X2r BCMI_QSGMII_SERDES_STATUS1000X2r
#define STATUS1000X2r_SIZE BCMI_QSGMII_SERDES_STATUS1000X2r_SIZE
typedef BCMI_QSGMII_SERDES_STATUS1000X2r_t STATUS1000X2r_t;
#define STATUS1000X2r_CLR BCMI_QSGMII_SERDES_STATUS1000X2r_CLR
#define STATUS1000X2r_SET BCMI_QSGMII_SERDES_STATUS1000X2r_SET
#define STATUS1000X2r_GET BCMI_QSGMII_SERDES_STATUS1000X2r_GET
#define STATUS1000X2r_SGMII_MODE_CHANGEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_MODE_CHANGEf_GET
#define STATUS1000X2r_SGMII_MODE_CHANGEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_MODE_CHANGEf_SET
#define STATUS1000X2r_CONSISTENCY_MISMATCHf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_CONSISTENCY_MISMATCHf_GET
#define STATUS1000X2r_CONSISTENCY_MISMATCHf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_CONSISTENCY_MISMATCHf_SET
#define STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_GET
#define STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_AUTONEG_RESOLUTION_ERRf_SET
#define STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_GET
#define STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_SGMII_SELECTOR_MISMATCHf_SET
#define STATUS1000X2r_SYNC_STATUS_FAILf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_FAILf_GET
#define STATUS1000X2r_SYNC_STATUS_FAILf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_FAILf_SET
#define STATUS1000X2r_SYNC_STATUS_OKf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_OKf_GET
#define STATUS1000X2r_SYNC_STATUS_OKf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_SYNC_STATUS_OKf_SET
#define STATUS1000X2r_RUDI_Cf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_Cf_GET
#define STATUS1000X2r_RUDI_Cf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_Cf_SET
#define STATUS1000X2r_RUDI_If_GET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_If_GET
#define STATUS1000X2r_RUDI_If_SET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_If_SET
#define STATUS1000X2r_RUDI_INVALIDf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_INVALIDf_GET
#define STATUS1000X2r_RUDI_INVALIDf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_RUDI_INVALIDf_SET
#define STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_GET
#define STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_LINK_WENT_DOWN_FROM_LOSS_OF_SYNCf_SET
#define STATUS1000X2r_IDLE_DETECT_STATEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_IDLE_DETECT_STATEf_GET
#define STATUS1000X2r_IDLE_DETECT_STATEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_IDLE_DETECT_STATEf_SET
#define STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_GET
#define STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_COMPLETE_ACKNOWLEDGE_STATEf_SET
#define STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_GET
#define STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_ACKNOWLEDGE_DETECT_STATEf_SET
#define STATUS1000X2r_ABILITY_DETECT_STATEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_ABILITY_DETECT_STATEf_GET
#define STATUS1000X2r_ABILITY_DETECT_STATEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_ABILITY_DETECT_STATEf_SET
#define STATUS1000X2r_AN_ERROR_STATEf_GET BCMI_QSGMII_SERDES_STATUS1000X2r_AN_ERROR_STATEf_GET
#define STATUS1000X2r_AN_ERROR_STATEf_SET BCMI_QSGMII_SERDES_STATUS1000X2r_AN_ERROR_STATEf_SET
#define READ_STATUS1000X2r BCMI_QSGMII_SERDES_READ_STATUS1000X2r
#define WRITE_STATUS1000X2r BCMI_QSGMII_SERDES_WRITE_STATUS1000X2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_STATUS1000X2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  STATUS1000X3
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8306
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SD_FILTER_CHG    
 *     SD_MUX           
 *     SD_FILTER        
 *     LATCH_LINKDOWN   
 *     REMOTEPHY_AUTOSEL 
 *     PD_PARK_AN       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_STATUS1000X3r (0x00008306 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_STATUS1000X3r_SIZE 4

/*
 * This structure should be used to declare and program STATUS1000X3.
 *
 */
typedef union BCMI_QSGMII_SERDES_STATUS1000X3r_s {
	uint32_t v[1];
	uint32_t status1000x3[1];
	uint32_t _status1000x3;
} BCMI_QSGMII_SERDES_STATUS1000X3r_t;

#define BCMI_QSGMII_SERDES_STATUS1000X3r_CLR(r) (r).status1000x3[0] = 0
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SET(r,d) (r).status1000x3[0] = d
#define BCMI_QSGMII_SERDES_STATUS1000X3r_GET(r) (r).status1000x3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_STATUS1000X3r_PD_PARK_ANf_GET(r) ((((r).status1000x3[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_PD_PARK_ANf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET(r) ((((r).status1000x3[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_STATUS1000X3r_LATCH_LINKDOWNf_GET(r) ((((r).status1000x3[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_LATCH_LINKDOWNf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTERf_GET(r) ((((r).status1000x3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTERf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_MUXf_GET(r) ((((r).status1000x3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_MUXf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTER_CHGf_GET(r) ((((r).status1000x3[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTER_CHGf_SET(r,f) (r).status1000x3[0]=(((r).status1000x3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))

/*
 * These macros can be used to access STATUS1000X3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_STATUS1000X3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_STATUS1000X3r,(_r._status1000x3))
#define BCMI_QSGMII_SERDES_WRITE_STATUS1000X3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_STATUS1000X3r,(_r._status1000x3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define STATUS1000X3r BCMI_QSGMII_SERDES_STATUS1000X3r
#define STATUS1000X3r_SIZE BCMI_QSGMII_SERDES_STATUS1000X3r_SIZE
typedef BCMI_QSGMII_SERDES_STATUS1000X3r_t STATUS1000X3r_t;
#define STATUS1000X3r_CLR BCMI_QSGMII_SERDES_STATUS1000X3r_CLR
#define STATUS1000X3r_SET BCMI_QSGMII_SERDES_STATUS1000X3r_SET
#define STATUS1000X3r_GET BCMI_QSGMII_SERDES_STATUS1000X3r_GET
#define STATUS1000X3r_PD_PARK_ANf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_PD_PARK_ANf_GET
#define STATUS1000X3r_PD_PARK_ANf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_PD_PARK_ANf_SET
#define STATUS1000X3r_REMOTEPHY_AUTOSELf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_REMOTEPHY_AUTOSELf_GET
#define STATUS1000X3r_REMOTEPHY_AUTOSELf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_REMOTEPHY_AUTOSELf_SET
#define STATUS1000X3r_LATCH_LINKDOWNf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_LATCH_LINKDOWNf_GET
#define STATUS1000X3r_LATCH_LINKDOWNf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_LATCH_LINKDOWNf_SET
#define STATUS1000X3r_SD_FILTERf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTERf_GET
#define STATUS1000X3r_SD_FILTERf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTERf_SET
#define STATUS1000X3r_SD_MUXf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_MUXf_GET
#define STATUS1000X3r_SD_MUXf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_MUXf_SET
#define STATUS1000X3r_SD_FILTER_CHGf_GET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTER_CHGf_GET
#define STATUS1000X3r_SD_FILTER_CHGf_SET BCMI_QSGMII_SERDES_STATUS1000X3r_SD_FILTER_CHGf_SET
#define READ_STATUS1000X3r BCMI_QSGMII_SERDES_READ_STATUS1000X3r
#define WRITE_STATUS1000X3r BCMI_QSGMII_SERDES_WRITE_STATUS1000X3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_STATUS1000X3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CRCERR_RXPKTCNTR
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8307
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CRC_ERR_RX_PKT_CNTR 
 *     BIT_ERROR_RATE_COUNTER 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr (0x00008307 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_SIZE 4

/*
 * This structure should be used to declare and program CRCERR_RXPKTCNTR.
 *
 */
typedef union BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_s {
	uint32_t v[1];
	uint32_t crcerr_rxpktcntr[1];
	uint32_t _crcerr_rxpktcntr;
} BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_t;

#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CLR(r) (r).crcerr_rxpktcntr[0] = 0
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_SET(r,d) (r).crcerr_rxpktcntr[0] = d
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_GET(r) (r).crcerr_rxpktcntr[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_GET(r) ((((r).crcerr_rxpktcntr[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_SET(r,f) (r).crcerr_rxpktcntr[0]=(((r).crcerr_rxpktcntr[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_GET(r) (((r).crcerr_rxpktcntr[0]) & 0xff)
#define BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_SET(r,f) (r).crcerr_rxpktcntr[0]=(((r).crcerr_rxpktcntr[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access CRCERR_RXPKTCNTR.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CRCERR_RXPKTCNTRr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr,(_r._crcerr_rxpktcntr))
#define BCMI_QSGMII_SERDES_WRITE_CRCERR_RXPKTCNTRr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr,(_r._crcerr_rxpktcntr))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CRCERR_RXPKTCNTRr BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr
#define CRCERR_RXPKTCNTRr_SIZE BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_SIZE
typedef BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_t CRCERR_RXPKTCNTRr_t;
#define CRCERR_RXPKTCNTRr_CLR BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CLR
#define CRCERR_RXPKTCNTRr_SET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_SET
#define CRCERR_RXPKTCNTRr_GET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_GET
#define CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_GET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_GET
#define CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_SET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_BIT_ERROR_RATE_COUNTERf_SET
#define CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_GET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_GET
#define CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_SET BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr_CRC_ERR_RX_PKT_CNTRf_SET
#define READ_CRCERR_RXPKTCNTRr BCMI_QSGMII_SERDES_READ_CRCERR_RXPKTCNTRr
#define WRITE_CRCERR_RXPKTCNTRr BCMI_QSGMII_SERDES_WRITE_CRCERR_RXPKTCNTRr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CRCERR_RXPKTCNTRr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISC1
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8308
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FORCE_SPEED      
 *     FORCE_SPEED_SEL  
 *     FORCE_LN_MODE    
 *     TX_UNDERRUN_1000_DIS 
 *     FORCE_TICK0_SW2  
 *     FORCE_PLL_MODE_AFE 
 *     FORCE_PLL_MODE_AFE_SEL 
 *     REFCLK_SEL       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISC1r (0x00008308 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISC1r_SIZE 4

/*
 * This structure should be used to declare and program MISC1.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISC1r_s {
	uint32_t v[1];
	uint32_t misc1[1];
	uint32_t _misc1;
} BCMI_QSGMII_SERDES_MISC1r_t;

#define BCMI_QSGMII_SERDES_MISC1r_CLR(r) (r).misc1[0] = 0
#define BCMI_QSGMII_SERDES_MISC1r_SET(r,d) (r).misc1[0] = d
#define BCMI_QSGMII_SERDES_MISC1r_GET(r) (r).misc1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISC1r_REFCLK_SELf_GET(r) ((((r).misc1[0]) >> 13) & 0x7)
#define BCMI_QSGMII_SERDES_MISC1r_REFCLK_SELf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x7 << 13)) | ((((uint32_t)f) & 0x7) << 13))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFE_SELf_GET(r) ((((r).misc1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFE_SELf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFEf_GET(r) ((((r).misc1[0]) >> 8) & 0xf)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFEf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0xf << 8)) | ((((uint32_t)f) & 0xf) << 8))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_TICK0_SW2f_GET(r) ((((r).misc1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_TICK0_SW2f_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MISC1r_TX_UNDERRUN_1000_DISf_GET(r) ((((r).misc1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MISC1r_TX_UNDERRUN_1000_DISf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_LN_MODEf_GET(r) ((((r).misc1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_LN_MODEf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEED_SELf_GET(r) ((((r).misc1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEED_SELf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEEDf_GET(r) (((r).misc1[0]) & 0xf)
#define BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEEDf_SET(r,f) (r).misc1[0]=(((r).misc1[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access MISC1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISC1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISC1r,(_r._misc1))
#define BCMI_QSGMII_SERDES_WRITE_MISC1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISC1r,(_r._misc1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC1r BCMI_QSGMII_SERDES_MISC1r
#define MISC1r_SIZE BCMI_QSGMII_SERDES_MISC1r_SIZE
typedef BCMI_QSGMII_SERDES_MISC1r_t MISC1r_t;
#define MISC1r_CLR BCMI_QSGMII_SERDES_MISC1r_CLR
#define MISC1r_SET BCMI_QSGMII_SERDES_MISC1r_SET
#define MISC1r_GET BCMI_QSGMII_SERDES_MISC1r_GET
#define MISC1r_REFCLK_SELf_GET BCMI_QSGMII_SERDES_MISC1r_REFCLK_SELf_GET
#define MISC1r_REFCLK_SELf_SET BCMI_QSGMII_SERDES_MISC1r_REFCLK_SELf_SET
#define MISC1r_FORCE_PLL_MODE_AFE_SELf_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFE_SELf_GET
#define MISC1r_FORCE_PLL_MODE_AFE_SELf_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFE_SELf_SET
#define MISC1r_FORCE_PLL_MODE_AFEf_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFEf_GET
#define MISC1r_FORCE_PLL_MODE_AFEf_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_PLL_MODE_AFEf_SET
#define MISC1r_FORCE_TICK0_SW2f_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_TICK0_SW2f_GET
#define MISC1r_FORCE_TICK0_SW2f_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_TICK0_SW2f_SET
#define MISC1r_TX_UNDERRUN_1000_DISf_GET BCMI_QSGMII_SERDES_MISC1r_TX_UNDERRUN_1000_DISf_GET
#define MISC1r_TX_UNDERRUN_1000_DISf_SET BCMI_QSGMII_SERDES_MISC1r_TX_UNDERRUN_1000_DISf_SET
#define MISC1r_FORCE_LN_MODEf_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_LN_MODEf_GET
#define MISC1r_FORCE_LN_MODEf_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_LN_MODEf_SET
#define MISC1r_FORCE_SPEED_SELf_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEED_SELf_GET
#define MISC1r_FORCE_SPEED_SELf_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEED_SELf_SET
#define MISC1r_FORCE_SPEEDf_GET BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEEDf_GET
#define MISC1r_FORCE_SPEEDf_SET BCMI_QSGMII_SERDES_MISC1r_FORCE_SPEEDf_SET
#define READ_MISC1r BCMI_QSGMII_SERDES_READ_MISC1r
#define WRITE_MISC1r BCMI_QSGMII_SERDES_WRITE_MISC1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISC1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISC2
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x8309
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_DEADTRAP      
 *     AN_TXDISABLE_LN  
 *     AN_RXSEQSTARTDIS 
 *     AN_TXDISABLEPHASE 
 *     FIFO_ERR_CYA     
 *     PMA_PMD_FORCED_SPEED_ENC_EN 
 *     KX_CL73_AN_EN    
 *     MIIGMIIMUX_EN    
 *     MIIGMIIDLY_EN    
 *     CLK41_BYPASS     
 *     CLKSIGDET_BYPASS 
 *     RLPBK_RXRST_EN   
 *     RLPBK_SW_FORCE   
 *     RXCK_MII_GEN_SEL 
 *     LFCK_MII_GEN_SEL 
 *     RXCKPL_SEL_COMBO 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISC2r (0x00008309 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISC2r_SIZE 4

/*
 * This structure should be used to declare and program MISC2.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISC2r_s {
	uint32_t v[1];
	uint32_t misc2[1];
	uint32_t _misc2;
} BCMI_QSGMII_SERDES_MISC2r_t;

#define BCMI_QSGMII_SERDES_MISC2r_CLR(r) (r).misc2[0] = 0
#define BCMI_QSGMII_SERDES_MISC2r_SET(r,d) (r).misc2[0] = d
#define BCMI_QSGMII_SERDES_MISC2r_GET(r) (r).misc2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISC2r_RXCKPL_SEL_COMBOf_GET(r) ((((r).misc2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_RXCKPL_SEL_COMBOf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MISC2r_LFCK_MII_GEN_SELf_GET(r) ((((r).misc2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_LFCK_MII_GEN_SELf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_MISC2r_RXCK_MII_GEN_SELf_GET(r) ((((r).misc2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_RXCK_MII_GEN_SELf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_MISC2r_RLPBK_SW_FORCEf_GET(r) ((((r).misc2[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_RLPBK_SW_FORCEf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_MISC2r_RLPBK_RXRST_ENf_GET(r) ((((r).misc2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_RLPBK_RXRST_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_MISC2r_CLKSIGDET_BYPASSf_GET(r) ((((r).misc2[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_CLKSIGDET_BYPASSf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_MISC2r_CLK41_BYPASSf_GET(r) ((((r).misc2[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_CLK41_BYPASSf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_MISC2r_MIIGMIIDLY_ENf_GET(r) ((((r).misc2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_MIIGMIIDLY_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MISC2r_MIIGMIIMUX_ENf_GET(r) ((((r).misc2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_MIIGMIIMUX_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MISC2r_KX_CL73_AN_ENf_GET(r) ((((r).misc2[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_KX_CL73_AN_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET(r) ((((r).misc2[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MISC2r_FIFO_ERR_CYAf_GET(r) ((((r).misc2[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_FIFO_ERR_CYAf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLEPHASEf_GET(r) ((((r).misc2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLEPHASEf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MISC2r_AN_RXSEQSTARTDISf_GET(r) ((((r).misc2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_AN_RXSEQSTARTDISf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLE_LNf_GET(r) ((((r).misc2[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLE_LNf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MISC2r_AN_DEADTRAPf_GET(r) (((r).misc2[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MISC2r_AN_DEADTRAPf_SET(r,f) (r).misc2[0]=(((r).misc2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISC2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISC2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISC2r,(_r._misc2))
#define BCMI_QSGMII_SERDES_WRITE_MISC2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISC2r,(_r._misc2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC2r BCMI_QSGMII_SERDES_MISC2r
#define MISC2r_SIZE BCMI_QSGMII_SERDES_MISC2r_SIZE
typedef BCMI_QSGMII_SERDES_MISC2r_t MISC2r_t;
#define MISC2r_CLR BCMI_QSGMII_SERDES_MISC2r_CLR
#define MISC2r_SET BCMI_QSGMII_SERDES_MISC2r_SET
#define MISC2r_GET BCMI_QSGMII_SERDES_MISC2r_GET
#define MISC2r_RXCKPL_SEL_COMBOf_GET BCMI_QSGMII_SERDES_MISC2r_RXCKPL_SEL_COMBOf_GET
#define MISC2r_RXCKPL_SEL_COMBOf_SET BCMI_QSGMII_SERDES_MISC2r_RXCKPL_SEL_COMBOf_SET
#define MISC2r_LFCK_MII_GEN_SELf_GET BCMI_QSGMII_SERDES_MISC2r_LFCK_MII_GEN_SELf_GET
#define MISC2r_LFCK_MII_GEN_SELf_SET BCMI_QSGMII_SERDES_MISC2r_LFCK_MII_GEN_SELf_SET
#define MISC2r_RXCK_MII_GEN_SELf_GET BCMI_QSGMII_SERDES_MISC2r_RXCK_MII_GEN_SELf_GET
#define MISC2r_RXCK_MII_GEN_SELf_SET BCMI_QSGMII_SERDES_MISC2r_RXCK_MII_GEN_SELf_SET
#define MISC2r_RLPBK_SW_FORCEf_GET BCMI_QSGMII_SERDES_MISC2r_RLPBK_SW_FORCEf_GET
#define MISC2r_RLPBK_SW_FORCEf_SET BCMI_QSGMII_SERDES_MISC2r_RLPBK_SW_FORCEf_SET
#define MISC2r_RLPBK_RXRST_ENf_GET BCMI_QSGMII_SERDES_MISC2r_RLPBK_RXRST_ENf_GET
#define MISC2r_RLPBK_RXRST_ENf_SET BCMI_QSGMII_SERDES_MISC2r_RLPBK_RXRST_ENf_SET
#define MISC2r_CLKSIGDET_BYPASSf_GET BCMI_QSGMII_SERDES_MISC2r_CLKSIGDET_BYPASSf_GET
#define MISC2r_CLKSIGDET_BYPASSf_SET BCMI_QSGMII_SERDES_MISC2r_CLKSIGDET_BYPASSf_SET
#define MISC2r_CLK41_BYPASSf_GET BCMI_QSGMII_SERDES_MISC2r_CLK41_BYPASSf_GET
#define MISC2r_CLK41_BYPASSf_SET BCMI_QSGMII_SERDES_MISC2r_CLK41_BYPASSf_SET
#define MISC2r_MIIGMIIDLY_ENf_GET BCMI_QSGMII_SERDES_MISC2r_MIIGMIIDLY_ENf_GET
#define MISC2r_MIIGMIIDLY_ENf_SET BCMI_QSGMII_SERDES_MISC2r_MIIGMIIDLY_ENf_SET
#define MISC2r_MIIGMIIMUX_ENf_GET BCMI_QSGMII_SERDES_MISC2r_MIIGMIIMUX_ENf_GET
#define MISC2r_MIIGMIIMUX_ENf_SET BCMI_QSGMII_SERDES_MISC2r_MIIGMIIMUX_ENf_SET
#define MISC2r_KX_CL73_AN_ENf_GET BCMI_QSGMII_SERDES_MISC2r_KX_CL73_AN_ENf_GET
#define MISC2r_KX_CL73_AN_ENf_SET BCMI_QSGMII_SERDES_MISC2r_KX_CL73_AN_ENf_SET
#define MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET BCMI_QSGMII_SERDES_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_GET
#define MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET BCMI_QSGMII_SERDES_MISC2r_PMA_PMD_FORCED_SPEED_ENC_ENf_SET
#define MISC2r_FIFO_ERR_CYAf_GET BCMI_QSGMII_SERDES_MISC2r_FIFO_ERR_CYAf_GET
#define MISC2r_FIFO_ERR_CYAf_SET BCMI_QSGMII_SERDES_MISC2r_FIFO_ERR_CYAf_SET
#define MISC2r_AN_TXDISABLEPHASEf_GET BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLEPHASEf_GET
#define MISC2r_AN_TXDISABLEPHASEf_SET BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLEPHASEf_SET
#define MISC2r_AN_RXSEQSTARTDISf_GET BCMI_QSGMII_SERDES_MISC2r_AN_RXSEQSTARTDISf_GET
#define MISC2r_AN_RXSEQSTARTDISf_SET BCMI_QSGMII_SERDES_MISC2r_AN_RXSEQSTARTDISf_SET
#define MISC2r_AN_TXDISABLE_LNf_GET BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLE_LNf_GET
#define MISC2r_AN_TXDISABLE_LNf_SET BCMI_QSGMII_SERDES_MISC2r_AN_TXDISABLE_LNf_SET
#define MISC2r_AN_DEADTRAPf_GET BCMI_QSGMII_SERDES_MISC2r_AN_DEADTRAPf_GET
#define MISC2r_AN_DEADTRAPf_SET BCMI_QSGMII_SERDES_MISC2r_AN_DEADTRAPf_SET
#define READ_MISC2r BCMI_QSGMII_SERDES_READ_MISC2r
#define WRITE_MISC2r BCMI_QSGMII_SERDES_WRITE_MISC2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISC2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PATGENCONTROL
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x830a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SEL_PATTERN_GEN_DATA 
 *     RUN_PATTERN_GEN  
 *     SINGLE_PASS_MODE 
 *     PKT_SIZE         
 *     IPG_SELECT       
 *     EN_CRC_CHECKER_FRAGMENT_ERR_DET 
 *     SKIP_CRC         
 *     TX_ERR           
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PATGENCONTROLr (0x0000830a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SIZE 4

/*
 * This structure should be used to declare and program PATGENCONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_PATGENCONTROLr_s {
	uint32_t v[1];
	uint32_t patgencontrol[1];
	uint32_t _patgencontrol;
} BCMI_QSGMII_SERDES_PATGENCONTROLr_t;

#define BCMI_QSGMII_SERDES_PATGENCONTROLr_CLR(r) (r).patgencontrol[0] = 0
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SET(r,d) (r).patgencontrol[0] = d
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_GET(r) (r).patgencontrol[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_TX_ERRf_GET(r) ((((r).patgencontrol[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_TX_ERRf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SKIP_CRCf_GET(r) ((((r).patgencontrol[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SKIP_CRCf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET(r) ((((r).patgencontrol[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_IPG_SELECTf_GET(r) ((((r).patgencontrol[0]) >> 9) & 0x7)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_IPG_SELECTf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x7 << 9)) | ((((uint32_t)f) & 0x7) << 9))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_PKT_SIZEf_GET(r) ((((r).patgencontrol[0]) >> 3) & 0x3f)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_PKT_SIZEf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x3f << 3)) | ((((uint32_t)f) & 0x3f) << 3))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SINGLE_PASS_MODEf_GET(r) ((((r).patgencontrol[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SINGLE_PASS_MODEf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_RUN_PATTERN_GENf_GET(r) ((((r).patgencontrol[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_RUN_PATTERN_GENf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_GET(r) (((r).patgencontrol[0]) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_SET(r,f) (r).patgencontrol[0]=(((r).patgencontrol[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access PATGENCONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PATGENCONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PATGENCONTROLr,(_r._patgencontrol))
#define BCMI_QSGMII_SERDES_WRITE_PATGENCONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PATGENCONTROLr,(_r._patgencontrol))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATGENCONTROLr BCMI_QSGMII_SERDES_PATGENCONTROLr
#define PATGENCONTROLr_SIZE BCMI_QSGMII_SERDES_PATGENCONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_PATGENCONTROLr_t PATGENCONTROLr_t;
#define PATGENCONTROLr_CLR BCMI_QSGMII_SERDES_PATGENCONTROLr_CLR
#define PATGENCONTROLr_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_SET
#define PATGENCONTROLr_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_GET
#define PATGENCONTROLr_TX_ERRf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_TX_ERRf_GET
#define PATGENCONTROLr_TX_ERRf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_TX_ERRf_SET
#define PATGENCONTROLr_SKIP_CRCf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_SKIP_CRCf_GET
#define PATGENCONTROLr_SKIP_CRCf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_SKIP_CRCf_SET
#define PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_GET
#define PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_EN_CRC_CHECKER_FRAGMENT_ERR_DETf_SET
#define PATGENCONTROLr_IPG_SELECTf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_IPG_SELECTf_GET
#define PATGENCONTROLr_IPG_SELECTf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_IPG_SELECTf_SET
#define PATGENCONTROLr_PKT_SIZEf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_PKT_SIZEf_GET
#define PATGENCONTROLr_PKT_SIZEf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_PKT_SIZEf_SET
#define PATGENCONTROLr_SINGLE_PASS_MODEf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_SINGLE_PASS_MODEf_GET
#define PATGENCONTROLr_SINGLE_PASS_MODEf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_SINGLE_PASS_MODEf_SET
#define PATGENCONTROLr_RUN_PATTERN_GENf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_RUN_PATTERN_GENf_GET
#define PATGENCONTROLr_RUN_PATTERN_GENf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_RUN_PATTERN_GENf_SET
#define PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_GET BCMI_QSGMII_SERDES_PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_GET
#define PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_SET BCMI_QSGMII_SERDES_PATGENCONTROLr_SEL_PATTERN_GEN_DATAf_SET
#define READ_PATGENCONTROLr BCMI_QSGMII_SERDES_READ_PATGENCONTROLr
#define WRITE_PATGENCONTROLr BCMI_QSGMII_SERDES_WRITE_PATGENCONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PATGENCONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  PATGENSTATUS
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x830b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PATTERN_GEN_FSM  
 *     PATTERN_GEN_ACTIVE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_PATGENSTATUSr (0x0000830b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_PATGENSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program PATGENSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_PATGENSTATUSr_s {
	uint32_t v[1];
	uint32_t patgenstatus[1];
	uint32_t _patgenstatus;
} BCMI_QSGMII_SERDES_PATGENSTATUSr_t;

#define BCMI_QSGMII_SERDES_PATGENSTATUSr_CLR(r) (r).patgenstatus[0] = 0
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_SET(r,d) (r).patgenstatus[0] = d
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_GET(r) (r).patgenstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_ACTIVEf_GET(r) ((((r).patgenstatus[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_ACTIVEf_SET(r,f) (r).patgenstatus[0]=(((r).patgenstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_FSMf_GET(r) (((r).patgenstatus[0]) & 0x7)
#define BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_FSMf_SET(r,f) (r).patgenstatus[0]=(((r).patgenstatus[0] & ~((uint32_t)0x7)) | (((uint32_t)f) & 0x7))

/*
 * These macros can be used to access PATGENSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_PATGENSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_PATGENSTATUSr,(_r._patgenstatus))
#define BCMI_QSGMII_SERDES_WRITE_PATGENSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_PATGENSTATUSr,(_r._patgenstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define PATGENSTATUSr BCMI_QSGMII_SERDES_PATGENSTATUSr
#define PATGENSTATUSr_SIZE BCMI_QSGMII_SERDES_PATGENSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_PATGENSTATUSr_t PATGENSTATUSr_t;
#define PATGENSTATUSr_CLR BCMI_QSGMII_SERDES_PATGENSTATUSr_CLR
#define PATGENSTATUSr_SET BCMI_QSGMII_SERDES_PATGENSTATUSr_SET
#define PATGENSTATUSr_GET BCMI_QSGMII_SERDES_PATGENSTATUSr_GET
#define PATGENSTATUSr_PATTERN_GEN_ACTIVEf_GET BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_ACTIVEf_GET
#define PATGENSTATUSr_PATTERN_GEN_ACTIVEf_SET BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_ACTIVEf_SET
#define PATGENSTATUSr_PATTERN_GEN_FSMf_GET BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_FSMf_GET
#define PATGENSTATUSr_PATTERN_GEN_FSMf_SET BCMI_QSGMII_SERDES_PATGENSTATUSr_PATTERN_GEN_FSMf_SET
#define READ_PATGENSTATUSr BCMI_QSGMII_SERDES_READ_PATGENSTATUSr
#define WRITE_PATGENSTATUSr BCMI_QSGMII_SERDES_WRITE_PATGENSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_PATGENSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TESTMODE
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x830c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FIFO_IPG_CYA_RX  
 *     ELASTICITY_RX    
 *     DIG1000X_AFRST_CYA 
 *     FIFO_FSM_CYA_RX  
 *     CLEAR_PACKET_COUNTERS 
 *     DISABLE_RESET_CNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TESTMODEr (0x0000830c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TESTMODEr_SIZE 4

/*
 * This structure should be used to declare and program TESTMODE.
 *
 */
typedef union BCMI_QSGMII_SERDES_TESTMODEr_s {
	uint32_t v[1];
	uint32_t testmode[1];
	uint32_t _testmode;
} BCMI_QSGMII_SERDES_TESTMODEr_t;

#define BCMI_QSGMII_SERDES_TESTMODEr_CLR(r) (r).testmode[0] = 0
#define BCMI_QSGMII_SERDES_TESTMODEr_SET(r,d) (r).testmode[0] = d
#define BCMI_QSGMII_SERDES_TESTMODEr_GET(r) (r).testmode[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TESTMODEr_DISABLE_RESET_CNTf_GET(r) ((((r).testmode[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEr_DISABLE_RESET_CNTf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_TESTMODEr_CLEAR_PACKET_COUNTERSf_GET(r) ((((r).testmode[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEr_CLEAR_PACKET_COUNTERSf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_TESTMODEr_FIFO_FSM_CYA_RXf_GET(r) ((((r).testmode[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEr_FIFO_FSM_CYA_RXf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_TESTMODEr_DIG1000X_AFRST_CYAf_GET(r) ((((r).testmode[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEr_DIG1000X_AFRST_CYAf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_TESTMODEr_ELASTICITY_RXf_GET(r) ((((r).testmode[0]) >> 1) & 0x3)
#define BCMI_QSGMII_SERDES_TESTMODEr_ELASTICITY_RXf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x3 << 1)) | ((((uint32_t)f) & 0x3) << 1))
#define BCMI_QSGMII_SERDES_TESTMODEr_FIFO_IPG_CYA_RXf_GET(r) (((r).testmode[0]) & 0x1)
#define BCMI_QSGMII_SERDES_TESTMODEr_FIFO_IPG_CYA_RXf_SET(r,f) (r).testmode[0]=(((r).testmode[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access TESTMODE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TESTMODEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TESTMODEr,(_r._testmode))
#define BCMI_QSGMII_SERDES_WRITE_TESTMODEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TESTMODEr,(_r._testmode))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TESTMODEr BCMI_QSGMII_SERDES_TESTMODEr
#define TESTMODEr_SIZE BCMI_QSGMII_SERDES_TESTMODEr_SIZE
typedef BCMI_QSGMII_SERDES_TESTMODEr_t TESTMODEr_t;
#define TESTMODEr_CLR BCMI_QSGMII_SERDES_TESTMODEr_CLR
#define TESTMODEr_SET BCMI_QSGMII_SERDES_TESTMODEr_SET
#define TESTMODEr_GET BCMI_QSGMII_SERDES_TESTMODEr_GET
#define TESTMODEr_DISABLE_RESET_CNTf_GET BCMI_QSGMII_SERDES_TESTMODEr_DISABLE_RESET_CNTf_GET
#define TESTMODEr_DISABLE_RESET_CNTf_SET BCMI_QSGMII_SERDES_TESTMODEr_DISABLE_RESET_CNTf_SET
#define TESTMODEr_CLEAR_PACKET_COUNTERSf_GET BCMI_QSGMII_SERDES_TESTMODEr_CLEAR_PACKET_COUNTERSf_GET
#define TESTMODEr_CLEAR_PACKET_COUNTERSf_SET BCMI_QSGMII_SERDES_TESTMODEr_CLEAR_PACKET_COUNTERSf_SET
#define TESTMODEr_FIFO_FSM_CYA_RXf_GET BCMI_QSGMII_SERDES_TESTMODEr_FIFO_FSM_CYA_RXf_GET
#define TESTMODEr_FIFO_FSM_CYA_RXf_SET BCMI_QSGMII_SERDES_TESTMODEr_FIFO_FSM_CYA_RXf_SET
#define TESTMODEr_DIG1000X_AFRST_CYAf_GET BCMI_QSGMII_SERDES_TESTMODEr_DIG1000X_AFRST_CYAf_GET
#define TESTMODEr_DIG1000X_AFRST_CYAf_SET BCMI_QSGMII_SERDES_TESTMODEr_DIG1000X_AFRST_CYAf_SET
#define TESTMODEr_ELASTICITY_RXf_GET BCMI_QSGMII_SERDES_TESTMODEr_ELASTICITY_RXf_GET
#define TESTMODEr_ELASTICITY_RXf_SET BCMI_QSGMII_SERDES_TESTMODEr_ELASTICITY_RXf_SET
#define TESTMODEr_FIFO_IPG_CYA_RXf_GET BCMI_QSGMII_SERDES_TESTMODEr_FIFO_IPG_CYA_RXf_GET
#define TESTMODEr_FIFO_IPG_CYA_RXf_SET BCMI_QSGMII_SERDES_TESTMODEr_FIFO_IPG_CYA_RXf_SET
#define READ_TESTMODEr BCMI_QSGMII_SERDES_READ_TESTMODEr
#define WRITE_TESTMODEr BCMI_QSGMII_SERDES_WRITE_TESTMODEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TESTMODEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TXPKTCNT
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x830d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TXPKTCNT         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TXPKTCNTr (0x0000830d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TXPKTCNTr_SIZE 4

/*
 * This structure should be used to declare and program TXPKTCNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_TXPKTCNTr_s {
	uint32_t v[1];
	uint32_t txpktcnt[1];
	uint32_t _txpktcnt;
} BCMI_QSGMII_SERDES_TXPKTCNTr_t;

#define BCMI_QSGMII_SERDES_TXPKTCNTr_CLR(r) (r).txpktcnt[0] = 0
#define BCMI_QSGMII_SERDES_TXPKTCNTr_SET(r,d) (r).txpktcnt[0] = d
#define BCMI_QSGMII_SERDES_TXPKTCNTr_GET(r) (r).txpktcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TXPKTCNTr_TXPKTCNTf_GET(r) (((r).txpktcnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TXPKTCNTr_TXPKTCNTf_SET(r,f) (r).txpktcnt[0]=(((r).txpktcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TXPKTCNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TXPKTCNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TXPKTCNTr,(_r._txpktcnt))
#define BCMI_QSGMII_SERDES_WRITE_TXPKTCNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TXPKTCNTr,(_r._txpktcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TXPKTCNTr BCMI_QSGMII_SERDES_TXPKTCNTr
#define TXPKTCNTr_SIZE BCMI_QSGMII_SERDES_TXPKTCNTr_SIZE
typedef BCMI_QSGMII_SERDES_TXPKTCNTr_t TXPKTCNTr_t;
#define TXPKTCNTr_CLR BCMI_QSGMII_SERDES_TXPKTCNTr_CLR
#define TXPKTCNTr_SET BCMI_QSGMII_SERDES_TXPKTCNTr_SET
#define TXPKTCNTr_GET BCMI_QSGMII_SERDES_TXPKTCNTr_GET
#define TXPKTCNTr_TXPKTCNTf_GET BCMI_QSGMII_SERDES_TXPKTCNTr_TXPKTCNTf_GET
#define TXPKTCNTr_TXPKTCNTf_SET BCMI_QSGMII_SERDES_TXPKTCNTr_TXPKTCNTf_SET
#define READ_TXPKTCNTr BCMI_QSGMII_SERDES_READ_TXPKTCNTr
#define WRITE_TXPKTCNTr BCMI_QSGMII_SERDES_WRITE_TXPKTCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TXPKTCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RXPKTCNT
 * BLOCKS:   SERDES_DIGITAL
 * REGADDR:  0x830e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RXPKTCNT         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RXPKTCNTr (0x0000830e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RXPKTCNTr_SIZE 4

/*
 * This structure should be used to declare and program RXPKTCNT.
 *
 */
typedef union BCMI_QSGMII_SERDES_RXPKTCNTr_s {
	uint32_t v[1];
	uint32_t rxpktcnt[1];
	uint32_t _rxpktcnt;
} BCMI_QSGMII_SERDES_RXPKTCNTr_t;

#define BCMI_QSGMII_SERDES_RXPKTCNTr_CLR(r) (r).rxpktcnt[0] = 0
#define BCMI_QSGMII_SERDES_RXPKTCNTr_SET(r,d) (r).rxpktcnt[0] = d
#define BCMI_QSGMII_SERDES_RXPKTCNTr_GET(r) (r).rxpktcnt[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RXPKTCNTr_RXPKTCNTf_GET(r) (((r).rxpktcnt[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_RXPKTCNTr_RXPKTCNTf_SET(r,f) (r).rxpktcnt[0]=(((r).rxpktcnt[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access RXPKTCNT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RXPKTCNTr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RXPKTCNTr,(_r._rxpktcnt))
#define BCMI_QSGMII_SERDES_WRITE_RXPKTCNTr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RXPKTCNTr,(_r._rxpktcnt))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RXPKTCNTr BCMI_QSGMII_SERDES_RXPKTCNTr
#define RXPKTCNTr_SIZE BCMI_QSGMII_SERDES_RXPKTCNTr_SIZE
typedef BCMI_QSGMII_SERDES_RXPKTCNTr_t RXPKTCNTr_t;
#define RXPKTCNTr_CLR BCMI_QSGMII_SERDES_RXPKTCNTr_CLR
#define RXPKTCNTr_SET BCMI_QSGMII_SERDES_RXPKTCNTr_SET
#define RXPKTCNTr_GET BCMI_QSGMII_SERDES_RXPKTCNTr_GET
#define RXPKTCNTr_RXPKTCNTf_GET BCMI_QSGMII_SERDES_RXPKTCNTr_RXPKTCNTf_GET
#define RXPKTCNTr_RXPKTCNTf_SET BCMI_QSGMII_SERDES_RXPKTCNTr_RXPKTCNTf_SET
#define READ_RXPKTCNTr BCMI_QSGMII_SERDES_READ_RXPKTCNTr
#define WRITE_RXPKTCNTr BCMI_QSGMII_SERDES_WRITE_RXPKTCNTr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RXPKTCNTr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  SERDES_ID0
 * BLOCKS:   TEST
 * REGADDR:  0x8310
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MODEL            
 *     TECH             
 *     BONDING          
 *     REV_NUMBER       
 *     REV_LETTER       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_SERDES_ID0r (0x00008310 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_SERDES_ID0r_SIZE 4

/*
 * This structure should be used to declare and program SERDES_ID0.
 *
 */
typedef union BCMI_QSGMII_SERDES_SERDES_ID0r_s {
	uint32_t v[1];
	uint32_t serdes_id0[1];
	uint32_t _serdes_id0;
} BCMI_QSGMII_SERDES_SERDES_ID0r_t;

#define BCMI_QSGMII_SERDES_SERDES_ID0r_CLR(r) (r).serdes_id0[0] = 0
#define BCMI_QSGMII_SERDES_SERDES_ID0r_SET(r,d) (r).serdes_id0[0] = d
#define BCMI_QSGMII_SERDES_SERDES_ID0r_GET(r) (r).serdes_id0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_SERDES_ID0r_REV_LETTERf_GET(r) ((((r).serdes_id0[0]) >> 14) & 0x3)
#define BCMI_QSGMII_SERDES_SERDES_ID0r_REV_LETTERf_SET(r,f) (r).serdes_id0[0]=(((r).serdes_id0[0] & ~((uint32_t)0x3 << 14)) | ((((uint32_t)f) & 0x3) << 14))
#define BCMI_QSGMII_SERDES_SERDES_ID0r_REV_NUMBERf_GET(r) ((((r).serdes_id0[0]) >> 11) & 0x7)
#define BCMI_QSGMII_SERDES_SERDES_ID0r_REV_NUMBERf_SET(r,f) (r).serdes_id0[0]=(((r).serdes_id0[0] & ~((uint32_t)0x7 << 11)) | ((((uint32_t)f) & 0x7) << 11))
#define BCMI_QSGMII_SERDES_SERDES_ID0r_BONDINGf_GET(r) ((((r).serdes_id0[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_SERDES_ID0r_BONDINGf_SET(r,f) (r).serdes_id0[0]=(((r).serdes_id0[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_SERDES_ID0r_TECHf_GET(r) ((((r).serdes_id0[0]) >> 6) & 0x7)
#define BCMI_QSGMII_SERDES_SERDES_ID0r_TECHf_SET(r,f) (r).serdes_id0[0]=(((r).serdes_id0[0] & ~((uint32_t)0x7 << 6)) | ((((uint32_t)f) & 0x7) << 6))
#define BCMI_QSGMII_SERDES_SERDES_ID0r_MODELf_GET(r) (((r).serdes_id0[0]) & 0x3f)
#define BCMI_QSGMII_SERDES_SERDES_ID0r_MODELf_SET(r,f) (r).serdes_id0[0]=(((r).serdes_id0[0] & ~((uint32_t)0x3f)) | (((uint32_t)f) & 0x3f))

/*
 * These macros can be used to access SERDES_ID0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_SERDES_ID0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_SERDES_ID0r,(_r._serdes_id0))
#define BCMI_QSGMII_SERDES_WRITE_SERDES_ID0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_SERDES_ID0r,(_r._serdes_id0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDES_ID0r BCMI_QSGMII_SERDES_SERDES_ID0r
#define SERDES_ID0r_SIZE BCMI_QSGMII_SERDES_SERDES_ID0r_SIZE
typedef BCMI_QSGMII_SERDES_SERDES_ID0r_t SERDES_ID0r_t;
#define SERDES_ID0r_CLR BCMI_QSGMII_SERDES_SERDES_ID0r_CLR
#define SERDES_ID0r_SET BCMI_QSGMII_SERDES_SERDES_ID0r_SET
#define SERDES_ID0r_GET BCMI_QSGMII_SERDES_SERDES_ID0r_GET
#define SERDES_ID0r_REV_LETTERf_GET BCMI_QSGMII_SERDES_SERDES_ID0r_REV_LETTERf_GET
#define SERDES_ID0r_REV_LETTERf_SET BCMI_QSGMII_SERDES_SERDES_ID0r_REV_LETTERf_SET
#define SERDES_ID0r_REV_NUMBERf_GET BCMI_QSGMII_SERDES_SERDES_ID0r_REV_NUMBERf_GET
#define SERDES_ID0r_REV_NUMBERf_SET BCMI_QSGMII_SERDES_SERDES_ID0r_REV_NUMBERf_SET
#define SERDES_ID0r_BONDINGf_GET BCMI_QSGMII_SERDES_SERDES_ID0r_BONDINGf_GET
#define SERDES_ID0r_BONDINGf_SET BCMI_QSGMII_SERDES_SERDES_ID0r_BONDINGf_SET
#define SERDES_ID0r_TECHf_GET BCMI_QSGMII_SERDES_SERDES_ID0r_TECHf_GET
#define SERDES_ID0r_TECHf_SET BCMI_QSGMII_SERDES_SERDES_ID0r_TECHf_SET
#define SERDES_ID0r_MODELf_GET BCMI_QSGMII_SERDES_SERDES_ID0r_MODELf_GET
#define SERDES_ID0r_MODELf_SET BCMI_QSGMII_SERDES_SERDES_ID0r_MODELf_SET
#define READ_SERDES_ID0r BCMI_QSGMII_SERDES_READ_SERDES_ID0r
#define WRITE_SERDES_ID0r BCMI_QSGMII_SERDES_WRITE_SERDES_ID0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_SERDES_ID0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  SERDES_ID1
 * BLOCKS:   TEST
 * REGADDR:  0x8311
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     PROTOCOL         
 *     MULTIPLICITY     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_SERDES_ID1r (0x00008311 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_SERDES_ID1r_SIZE 4

/*
 * This structure should be used to declare and program SERDES_ID1.
 *
 */
typedef union BCMI_QSGMII_SERDES_SERDES_ID1r_s {
	uint32_t v[1];
	uint32_t serdes_id1[1];
	uint32_t _serdes_id1;
} BCMI_QSGMII_SERDES_SERDES_ID1r_t;

#define BCMI_QSGMII_SERDES_SERDES_ID1r_CLR(r) (r).serdes_id1[0] = 0
#define BCMI_QSGMII_SERDES_SERDES_ID1r_SET(r,d) (r).serdes_id1[0] = d
#define BCMI_QSGMII_SERDES_SERDES_ID1r_GET(r) (r).serdes_id1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_SERDES_ID1r_MULTIPLICITYf_GET(r) ((((r).serdes_id1[0]) >> 12) & 0xf)
#define BCMI_QSGMII_SERDES_SERDES_ID1r_MULTIPLICITYf_SET(r,f) (r).serdes_id1[0]=(((r).serdes_id1[0] & ~((uint32_t)0xf << 12)) | ((((uint32_t)f) & 0xf) << 12))
#define BCMI_QSGMII_SERDES_SERDES_ID1r_PROTOCOLf_GET(r) (((r).serdes_id1[0]) & 0xfff)
#define BCMI_QSGMII_SERDES_SERDES_ID1r_PROTOCOLf_SET(r,f) (r).serdes_id1[0]=(((r).serdes_id1[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access SERDES_ID1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_SERDES_ID1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_SERDES_ID1r,(_r._serdes_id1))
#define BCMI_QSGMII_SERDES_WRITE_SERDES_ID1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_SERDES_ID1r,(_r._serdes_id1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDES_ID1r BCMI_QSGMII_SERDES_SERDES_ID1r
#define SERDES_ID1r_SIZE BCMI_QSGMII_SERDES_SERDES_ID1r_SIZE
typedef BCMI_QSGMII_SERDES_SERDES_ID1r_t SERDES_ID1r_t;
#define SERDES_ID1r_CLR BCMI_QSGMII_SERDES_SERDES_ID1r_CLR
#define SERDES_ID1r_SET BCMI_QSGMII_SERDES_SERDES_ID1r_SET
#define SERDES_ID1r_GET BCMI_QSGMII_SERDES_SERDES_ID1r_GET
#define SERDES_ID1r_MULTIPLICITYf_GET BCMI_QSGMII_SERDES_SERDES_ID1r_MULTIPLICITYf_GET
#define SERDES_ID1r_MULTIPLICITYf_SET BCMI_QSGMII_SERDES_SERDES_ID1r_MULTIPLICITYf_SET
#define SERDES_ID1r_PROTOCOLf_GET BCMI_QSGMII_SERDES_SERDES_ID1r_PROTOCOLf_GET
#define SERDES_ID1r_PROTOCOLf_SET BCMI_QSGMII_SERDES_SERDES_ID1r_PROTOCOLf_SET
#define READ_SERDES_ID1r BCMI_QSGMII_SERDES_READ_SERDES_ID1r
#define WRITE_SERDES_ID1r BCMI_QSGMII_SERDES_WRITE_SERDES_ID1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_SERDES_ID1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  SERDES_ID2
 * BLOCKS:   TEST
 * REGADDR:  0x8312
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SPEED            
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_SERDES_ID2r (0x00008312 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_SERDES_ID2r_SIZE 4

/*
 * This structure should be used to declare and program SERDES_ID2.
 *
 */
typedef union BCMI_QSGMII_SERDES_SERDES_ID2r_s {
	uint32_t v[1];
	uint32_t serdes_id2[1];
	uint32_t _serdes_id2;
} BCMI_QSGMII_SERDES_SERDES_ID2r_t;

#define BCMI_QSGMII_SERDES_SERDES_ID2r_CLR(r) (r).serdes_id2[0] = 0
#define BCMI_QSGMII_SERDES_SERDES_ID2r_SET(r,d) (r).serdes_id2[0] = d
#define BCMI_QSGMII_SERDES_SERDES_ID2r_GET(r) (r).serdes_id2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_SERDES_ID2r_SPEEDf_GET(r) (((r).serdes_id2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_SERDES_ID2r_SPEEDf_SET(r,f) (r).serdes_id2[0]=(((r).serdes_id2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access SERDES_ID2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_SERDES_ID2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_SERDES_ID2r,(_r._serdes_id2))
#define BCMI_QSGMII_SERDES_WRITE_SERDES_ID2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_SERDES_ID2r,(_r._serdes_id2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SERDES_ID2r BCMI_QSGMII_SERDES_SERDES_ID2r
#define SERDES_ID2r_SIZE BCMI_QSGMII_SERDES_SERDES_ID2r_SIZE
typedef BCMI_QSGMII_SERDES_SERDES_ID2r_t SERDES_ID2r_t;
#define SERDES_ID2r_CLR BCMI_QSGMII_SERDES_SERDES_ID2r_CLR
#define SERDES_ID2r_SET BCMI_QSGMII_SERDES_SERDES_ID2r_SET
#define SERDES_ID2r_GET BCMI_QSGMII_SERDES_SERDES_ID2r_GET
#define SERDES_ID2r_SPEEDf_GET BCMI_QSGMII_SERDES_SERDES_ID2r_SPEEDf_GET
#define SERDES_ID2r_SPEEDf_SET BCMI_QSGMII_SERDES_SERDES_ID2r_SPEEDf_SET
#define READ_SERDES_ID2r BCMI_QSGMII_SERDES_READ_SERDES_ID2r
#define WRITE_SERDES_ID2r BCMI_QSGMII_SERDES_WRITE_SERDES_ID2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_SERDES_ID2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_0
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8320
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_LOSTLINK_CNT  
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_0r (0x00008320 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_0r_s {
	uint32_t v[1];
	uint32_t digctl_3_0[1];
	uint32_t _digctl_3_0;
} BCMI_QSGMII_SERDES_DIGCTL_3_0r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_CLR(r) (r).digctl_3_0[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_SET(r,d) (r).digctl_3_0[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_GET(r) (r).digctl_3_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET(r) (((r).digctl_3_0[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET(r,f) (r).digctl_3_0[0]=(((r).digctl_3_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_0r,(_r._digctl_3_0))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_0r,(_r._digctl_3_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_0r BCMI_QSGMII_SERDES_DIGCTL_3_0r
#define DIGCTL_3_0r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_0r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_0r_t DIGCTL_3_0r_t;
#define DIGCTL_3_0r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_0r_CLR
#define DIGCTL_3_0r_SET BCMI_QSGMII_SERDES_DIGCTL_3_0r_SET
#define DIGCTL_3_0r_GET BCMI_QSGMII_SERDES_DIGCTL_3_0r_GET
#define DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_0r_AN_LOSTLINK_CNTf_GET
#define DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_0r_AN_LOSTLINK_CNTf_SET
#define READ_DIGCTL_3_0r BCMI_QSGMII_SERDES_READ_DIGCTL_3_0r
#define WRITE_DIGCTL_3_0r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_1
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8321
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_SWITCH_CNT    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_1r (0x00008321 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_1r_s {
	uint32_t v[1];
	uint32_t digctl_3_1[1];
	uint32_t _digctl_3_1;
} BCMI_QSGMII_SERDES_DIGCTL_3_1r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_CLR(r) (r).digctl_3_1[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_SET(r,d) (r).digctl_3_1[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_GET(r) (r).digctl_3_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_AN_SWITCH_CNTf_GET(r) (((r).digctl_3_1[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_1r_AN_SWITCH_CNTf_SET(r,f) (r).digctl_3_1[0]=(((r).digctl_3_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_1r,(_r._digctl_3_1))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_1r,(_r._digctl_3_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_1r BCMI_QSGMII_SERDES_DIGCTL_3_1r
#define DIGCTL_3_1r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_1r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_1r_t DIGCTL_3_1r_t;
#define DIGCTL_3_1r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_1r_CLR
#define DIGCTL_3_1r_SET BCMI_QSGMII_SERDES_DIGCTL_3_1r_SET
#define DIGCTL_3_1r_GET BCMI_QSGMII_SERDES_DIGCTL_3_1r_GET
#define DIGCTL_3_1r_AN_SWITCH_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_1r_AN_SWITCH_CNTf_GET
#define DIGCTL_3_1r_AN_SWITCH_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_1r_AN_SWITCH_CNTf_SET
#define READ_DIGCTL_3_1r BCMI_QSGMII_SERDES_READ_DIGCTL_3_1r
#define WRITE_DIGCTL_3_1r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_2
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8322
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_LINK_CNT      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_2r (0x00008322 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_2r_s {
	uint32_t v[1];
	uint32_t digctl_3_2[1];
	uint32_t _digctl_3_2;
} BCMI_QSGMII_SERDES_DIGCTL_3_2r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_CLR(r) (r).digctl_3_2[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_SET(r,d) (r).digctl_3_2[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_GET(r) (r).digctl_3_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_AN_LINK_CNTf_GET(r) (((r).digctl_3_2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_2r_AN_LINK_CNTf_SET(r,f) (r).digctl_3_2[0]=(((r).digctl_3_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_2r,(_r._digctl_3_2))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_2r,(_r._digctl_3_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_2r BCMI_QSGMII_SERDES_DIGCTL_3_2r
#define DIGCTL_3_2r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_2r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_2r_t DIGCTL_3_2r_t;
#define DIGCTL_3_2r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_2r_CLR
#define DIGCTL_3_2r_SET BCMI_QSGMII_SERDES_DIGCTL_3_2r_SET
#define DIGCTL_3_2r_GET BCMI_QSGMII_SERDES_DIGCTL_3_2r_GET
#define DIGCTL_3_2r_AN_LINK_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_2r_AN_LINK_CNTf_GET
#define DIGCTL_3_2r_AN_LINK_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_2r_AN_LINK_CNTf_SET
#define READ_DIGCTL_3_2r BCMI_QSGMII_SERDES_READ_DIGCTL_3_2r
#define WRITE_DIGCTL_3_2r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_3
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8323
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_LINK_CNT_23_16 
 *     AN_SWITCH_CNT_23_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r (0x00008323 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_3.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_3r_s {
	uint32_t v[1];
	uint32_t digctl_3_3[1];
	uint32_t _digctl_3_3;
} BCMI_QSGMII_SERDES_DIGCTL_3_3r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_CLR(r) (r).digctl_3_3[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_SET(r,d) (r).digctl_3_3[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_GET(r) (r).digctl_3_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_GET(r) ((((r).digctl_3_3[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_SET(r,f) (r).digctl_3_3[0]=(((r).digctl_3_3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_LINK_CNT_23_16f_GET(r) (((r).digctl_3_3[0]) & 0xff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_LINK_CNT_23_16f_SET(r,f) (r).digctl_3_3[0]=(((r).digctl_3_3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access DIGCTL_3_3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_3r,(_r._digctl_3_3))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_3r,(_r._digctl_3_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_3r BCMI_QSGMII_SERDES_DIGCTL_3_3r
#define DIGCTL_3_3r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_3r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_3r_t DIGCTL_3_3r_t;
#define DIGCTL_3_3r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_3r_CLR
#define DIGCTL_3_3r_SET BCMI_QSGMII_SERDES_DIGCTL_3_3r_SET
#define DIGCTL_3_3r_GET BCMI_QSGMII_SERDES_DIGCTL_3_3r_GET
#define DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_GET BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_GET
#define DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_SET BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_SWITCH_CNT_23_16f_SET
#define DIGCTL_3_3r_AN_LINK_CNT_23_16f_GET BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_LINK_CNT_23_16f_GET
#define DIGCTL_3_3r_AN_LINK_CNT_23_16f_SET BCMI_QSGMII_SERDES_DIGCTL_3_3r_AN_LINK_CNT_23_16f_SET
#define READ_DIGCTL_3_3r BCMI_QSGMII_SERDES_READ_DIGCTL_3_3r
#define WRITE_DIGCTL_3_3r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_4
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8324
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_FAIL_CNT      
 *     NO_FAIL_CNT      
 *     MP_NUMBER_10_0   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r (0x00008324 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_4.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_4r_s {
	uint32_t v[1];
	uint32_t digctl_3_4[1];
	uint32_t _digctl_3_4;
} BCMI_QSGMII_SERDES_DIGCTL_3_4r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_CLR(r) (r).digctl_3_4[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_SET(r,d) (r).digctl_3_4[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_GET(r) (r).digctl_3_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_MP_NUMBER_10_0f_GET(r) ((((r).digctl_3_4[0]) >> 5) & 0x7ff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_MP_NUMBER_10_0f_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_NO_FAIL_CNTf_GET(r) ((((r).digctl_3_4[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_NO_FAIL_CNTf_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_AN_FAIL_CNTf_GET(r) (((r).digctl_3_4[0]) & 0xf)
#define BCMI_QSGMII_SERDES_DIGCTL_3_4r_AN_FAIL_CNTf_SET(r,f) (r).digctl_3_4[0]=(((r).digctl_3_4[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access DIGCTL_3_4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_4r,(_r._digctl_3_4))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_4r,(_r._digctl_3_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_4r BCMI_QSGMII_SERDES_DIGCTL_3_4r
#define DIGCTL_3_4r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_4r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_4r_t DIGCTL_3_4r_t;
#define DIGCTL_3_4r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_4r_CLR
#define DIGCTL_3_4r_SET BCMI_QSGMII_SERDES_DIGCTL_3_4r_SET
#define DIGCTL_3_4r_GET BCMI_QSGMII_SERDES_DIGCTL_3_4r_GET
#define DIGCTL_3_4r_MP_NUMBER_10_0f_GET BCMI_QSGMII_SERDES_DIGCTL_3_4r_MP_NUMBER_10_0f_GET
#define DIGCTL_3_4r_MP_NUMBER_10_0f_SET BCMI_QSGMII_SERDES_DIGCTL_3_4r_MP_NUMBER_10_0f_SET
#define DIGCTL_3_4r_NO_FAIL_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_4r_NO_FAIL_CNTf_GET
#define DIGCTL_3_4r_NO_FAIL_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_4r_NO_FAIL_CNTf_SET
#define DIGCTL_3_4r_AN_FAIL_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_4r_AN_FAIL_CNTf_GET
#define DIGCTL_3_4r_AN_FAIL_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_4r_AN_FAIL_CNTf_SET
#define READ_DIGCTL_3_4r BCMI_QSGMII_SERDES_READ_DIGCTL_3_4r
#define WRITE_DIGCTL_3_4r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_5
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8325
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_IGNORELINK_CNT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_5r (0x00008325 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_5.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_5r_s {
	uint32_t v[1];
	uint32_t digctl_3_5[1];
	uint32_t _digctl_3_5;
} BCMI_QSGMII_SERDES_DIGCTL_3_5r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_CLR(r) (r).digctl_3_5[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_SET(r,d) (r).digctl_3_5[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_GET(r) (r).digctl_3_5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET(r) (((r).digctl_3_5[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET(r,f) (r).digctl_3_5[0]=(((r).digctl_3_5[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access DIGCTL_3_5.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_5r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_5r,(_r._digctl_3_5))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_5r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_5r,(_r._digctl_3_5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_5r BCMI_QSGMII_SERDES_DIGCTL_3_5r
#define DIGCTL_3_5r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_5r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_5r_t DIGCTL_3_5r_t;
#define DIGCTL_3_5r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_5r_CLR
#define DIGCTL_3_5r_SET BCMI_QSGMII_SERDES_DIGCTL_3_5r_SET
#define DIGCTL_3_5r_GET BCMI_QSGMII_SERDES_DIGCTL_3_5r_GET
#define DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET BCMI_QSGMII_SERDES_DIGCTL_3_5r_AN_IGNORELINK_CNTf_GET
#define DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET BCMI_QSGMII_SERDES_DIGCTL_3_5r_AN_IGNORELINK_CNTf_SET
#define READ_DIGCTL_3_5r BCMI_QSGMII_SERDES_READ_DIGCTL_3_5r
#define WRITE_DIGCTL_3_5r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  DIGCTL_3_6
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8326
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     AN_LOSTLINK_CNT_23_16 
 *     AN_IGNORELINK_CNT_23_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r (0x00008326 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_SIZE 4

/*
 * This structure should be used to declare and program DIGCTL_3_6.
 *
 */
typedef union BCMI_QSGMII_SERDES_DIGCTL_3_6r_s {
	uint32_t v[1];
	uint32_t digctl_3_6[1];
	uint32_t _digctl_3_6;
} BCMI_QSGMII_SERDES_DIGCTL_3_6r_t;

#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_CLR(r) (r).digctl_3_6[0] = 0
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_SET(r,d) (r).digctl_3_6[0] = d
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_GET(r) (r).digctl_3_6[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_GET(r) ((((r).digctl_3_6[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_SET(r,f) (r).digctl_3_6[0]=(((r).digctl_3_6[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_GET(r) (((r).digctl_3_6[0]) & 0xff)
#define BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_SET(r,f) (r).digctl_3_6[0]=(((r).digctl_3_6[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access DIGCTL_3_6.
 *
 */
#define BCMI_QSGMII_SERDES_READ_DIGCTL_3_6r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_6r,(_r._digctl_3_6))
#define BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_6r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_DIGCTL_3_6r,(_r._digctl_3_6))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define DIGCTL_3_6r BCMI_QSGMII_SERDES_DIGCTL_3_6r
#define DIGCTL_3_6r_SIZE BCMI_QSGMII_SERDES_DIGCTL_3_6r_SIZE
typedef BCMI_QSGMII_SERDES_DIGCTL_3_6r_t DIGCTL_3_6r_t;
#define DIGCTL_3_6r_CLR BCMI_QSGMII_SERDES_DIGCTL_3_6r_CLR
#define DIGCTL_3_6r_SET BCMI_QSGMII_SERDES_DIGCTL_3_6r_SET
#define DIGCTL_3_6r_GET BCMI_QSGMII_SERDES_DIGCTL_3_6r_GET
#define DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_GET BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_GET
#define DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_SET BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_IGNORELINK_CNT_23_16f_SET
#define DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_GET BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_GET
#define DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_SET BCMI_QSGMII_SERDES_DIGCTL_3_6r_AN_LOSTLINK_CNT_23_16f_SET
#define READ_DIGCTL_3_6r BCMI_QSGMII_SERDES_READ_DIGCTL_3_6r
#define WRITE_DIGCTL_3_6r BCMI_QSGMII_SERDES_WRITE_DIGCTL_3_6r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_DIGCTL_3_6r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TPOUT_1
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8327
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TPOUT            
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TPOUT_1r (0x00008327 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TPOUT_1r_SIZE 4

/*
 * This structure should be used to declare and program TPOUT_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_TPOUT_1r_s {
	uint32_t v[1];
	uint32_t tpout_1[1];
	uint32_t _tpout_1;
} BCMI_QSGMII_SERDES_TPOUT_1r_t;

#define BCMI_QSGMII_SERDES_TPOUT_1r_CLR(r) (r).tpout_1[0] = 0
#define BCMI_QSGMII_SERDES_TPOUT_1r_SET(r,d) (r).tpout_1[0] = d
#define BCMI_QSGMII_SERDES_TPOUT_1r_GET(r) (r).tpout_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TPOUT_1r_TPOUTf_GET(r) (((r).tpout_1[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TPOUT_1r_TPOUTf_SET(r,f) (r).tpout_1[0]=(((r).tpout_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TPOUT_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TPOUT_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TPOUT_1r,(_r._tpout_1))
#define BCMI_QSGMII_SERDES_WRITE_TPOUT_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TPOUT_1r,(_r._tpout_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TPOUT_1r BCMI_QSGMII_SERDES_TPOUT_1r
#define TPOUT_1r_SIZE BCMI_QSGMII_SERDES_TPOUT_1r_SIZE
typedef BCMI_QSGMII_SERDES_TPOUT_1r_t TPOUT_1r_t;
#define TPOUT_1r_CLR BCMI_QSGMII_SERDES_TPOUT_1r_CLR
#define TPOUT_1r_SET BCMI_QSGMII_SERDES_TPOUT_1r_SET
#define TPOUT_1r_GET BCMI_QSGMII_SERDES_TPOUT_1r_GET
#define TPOUT_1r_TPOUTf_GET BCMI_QSGMII_SERDES_TPOUT_1r_TPOUTf_GET
#define TPOUT_1r_TPOUTf_SET BCMI_QSGMII_SERDES_TPOUT_1r_TPOUTf_SET
#define READ_TPOUT_1r BCMI_QSGMII_SERDES_READ_TPOUT_1r
#define WRITE_TPOUT_1r BCMI_QSGMII_SERDES_WRITE_TPOUT_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TPOUT_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  TPOUT_2
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8328
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TPOUT_23_8       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_TPOUT_2r (0x00008328 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_TPOUT_2r_SIZE 4

/*
 * This structure should be used to declare and program TPOUT_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_TPOUT_2r_s {
	uint32_t v[1];
	uint32_t tpout_2[1];
	uint32_t _tpout_2;
} BCMI_QSGMII_SERDES_TPOUT_2r_t;

#define BCMI_QSGMII_SERDES_TPOUT_2r_CLR(r) (r).tpout_2[0] = 0
#define BCMI_QSGMII_SERDES_TPOUT_2r_SET(r,d) (r).tpout_2[0] = d
#define BCMI_QSGMII_SERDES_TPOUT_2r_GET(r) (r).tpout_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_TPOUT_2r_TPOUT_23_8f_GET(r) (((r).tpout_2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_TPOUT_2r_TPOUT_23_8f_SET(r,f) (r).tpout_2[0]=(((r).tpout_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access TPOUT_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_TPOUT_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_TPOUT_2r,(_r._tpout_2))
#define BCMI_QSGMII_SERDES_WRITE_TPOUT_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_TPOUT_2r,(_r._tpout_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define TPOUT_2r BCMI_QSGMII_SERDES_TPOUT_2r
#define TPOUT_2r_SIZE BCMI_QSGMII_SERDES_TPOUT_2r_SIZE
typedef BCMI_QSGMII_SERDES_TPOUT_2r_t TPOUT_2r_t;
#define TPOUT_2r_CLR BCMI_QSGMII_SERDES_TPOUT_2r_CLR
#define TPOUT_2r_SET BCMI_QSGMII_SERDES_TPOUT_2r_SET
#define TPOUT_2r_GET BCMI_QSGMII_SERDES_TPOUT_2r_GET
#define TPOUT_2r_TPOUT_23_8f_GET BCMI_QSGMII_SERDES_TPOUT_2r_TPOUT_23_8f_GET
#define TPOUT_2r_TPOUT_23_8f_SET BCMI_QSGMII_SERDES_TPOUT_2r_TPOUT_23_8f_SET
#define READ_TPOUT_2r BCMI_QSGMII_SERDES_READ_TPOUT_2r
#define WRITE_TPOUT_2r BCMI_QSGMII_SERDES_WRITE_TPOUT_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_TPOUT_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  UP1
 * BLOCKS:   OVER_1G
 * REGADDR:  0x8329
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_ADV_OVER_1G_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_UP1r (0x00008329 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_UP1r_SIZE 4

/*
 * This structure should be used to declare and program UP1.
 *
 */
typedef union BCMI_QSGMII_SERDES_UP1r_s {
	uint32_t v[1];
	uint32_t up1[1];
	uint32_t _up1;
} BCMI_QSGMII_SERDES_UP1r_t;

#define BCMI_QSGMII_SERDES_UP1r_CLR(r) (r).up1[0] = 0
#define BCMI_QSGMII_SERDES_UP1r_SET(r,d) (r).up1[0] = d
#define BCMI_QSGMII_SERDES_UP1r_GET(r) (r).up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_UP1r_MR_ADV_OVER_1G_10_0f_GET(r) (((r).up1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_UP1r_MR_ADV_OVER_1G_10_0f_SET(r,f) (r).up1[0]=(((r).up1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access UP1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_UP1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_UP1r,(_r._up1))
#define BCMI_QSGMII_SERDES_WRITE_UP1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_UP1r,(_r._up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP1r BCMI_QSGMII_SERDES_UP1r
#define UP1r_SIZE BCMI_QSGMII_SERDES_UP1r_SIZE
typedef BCMI_QSGMII_SERDES_UP1r_t UP1r_t;
#define UP1r_CLR BCMI_QSGMII_SERDES_UP1r_CLR
#define UP1r_SET BCMI_QSGMII_SERDES_UP1r_SET
#define UP1r_GET BCMI_QSGMII_SERDES_UP1r_GET
#define UP1r_MR_ADV_OVER_1G_10_0f_GET BCMI_QSGMII_SERDES_UP1r_MR_ADV_OVER_1G_10_0f_GET
#define UP1r_MR_ADV_OVER_1G_10_0f_SET BCMI_QSGMII_SERDES_UP1r_MR_ADV_OVER_1G_10_0f_SET
#define READ_UP1r BCMI_QSGMII_SERDES_READ_UP1r
#define WRITE_UP1r BCMI_QSGMII_SERDES_WRITE_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  UP2
 * BLOCKS:   OVER_1G
 * REGADDR:  0x832a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_ADV_OVER_1G_21_11 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_UP2r (0x0000832a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_UP2r_SIZE 4

/*
 * This structure should be used to declare and program UP2.
 *
 */
typedef union BCMI_QSGMII_SERDES_UP2r_s {
	uint32_t v[1];
	uint32_t up2[1];
	uint32_t _up2;
} BCMI_QSGMII_SERDES_UP2r_t;

#define BCMI_QSGMII_SERDES_UP2r_CLR(r) (r).up2[0] = 0
#define BCMI_QSGMII_SERDES_UP2r_SET(r,d) (r).up2[0] = d
#define BCMI_QSGMII_SERDES_UP2r_GET(r) (r).up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_UP2r_MR_ADV_OVER_1G_21_11f_GET(r) (((r).up2[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_UP2r_MR_ADV_OVER_1G_21_11f_SET(r,f) (r).up2[0]=(((r).up2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access UP2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_UP2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_UP2r,(_r._up2))
#define BCMI_QSGMII_SERDES_WRITE_UP2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_UP2r,(_r._up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP2r BCMI_QSGMII_SERDES_UP2r
#define UP2r_SIZE BCMI_QSGMII_SERDES_UP2r_SIZE
typedef BCMI_QSGMII_SERDES_UP2r_t UP2r_t;
#define UP2r_CLR BCMI_QSGMII_SERDES_UP2r_CLR
#define UP2r_SET BCMI_QSGMII_SERDES_UP2r_SET
#define UP2r_GET BCMI_QSGMII_SERDES_UP2r_GET
#define UP2r_MR_ADV_OVER_1G_21_11f_GET BCMI_QSGMII_SERDES_UP2r_MR_ADV_OVER_1G_21_11f_GET
#define UP2r_MR_ADV_OVER_1G_21_11f_SET BCMI_QSGMII_SERDES_UP2r_MR_ADV_OVER_1G_21_11f_SET
#define READ_UP2r BCMI_QSGMII_SERDES_READ_UP2r
#define WRITE_UP2r BCMI_QSGMII_SERDES_WRITE_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  UP3
 * BLOCKS:   OVER_1G
 * REGADDR:  0x832b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_ADV_OVER_1G_31_22 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_UP3r (0x0000832b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_UP3r_SIZE 4

/*
 * This structure should be used to declare and program UP3.
 *
 */
typedef union BCMI_QSGMII_SERDES_UP3r_s {
	uint32_t v[1];
	uint32_t up3[1];
	uint32_t _up3;
} BCMI_QSGMII_SERDES_UP3r_t;

#define BCMI_QSGMII_SERDES_UP3r_CLR(r) (r).up3[0] = 0
#define BCMI_QSGMII_SERDES_UP3r_SET(r,d) (r).up3[0] = d
#define BCMI_QSGMII_SERDES_UP3r_GET(r) (r).up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_UP3r_MR_ADV_OVER_1G_31_22f_GET(r) (((r).up3[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_UP3r_MR_ADV_OVER_1G_31_22f_SET(r,f) (r).up3[0]=(((r).up3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access UP3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_UP3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_UP3r,(_r._up3))
#define BCMI_QSGMII_SERDES_WRITE_UP3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_UP3r,(_r._up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UP3r BCMI_QSGMII_SERDES_UP3r
#define UP3r_SIZE BCMI_QSGMII_SERDES_UP3r_SIZE
typedef BCMI_QSGMII_SERDES_UP3r_t UP3r_t;
#define UP3r_CLR BCMI_QSGMII_SERDES_UP3r_CLR
#define UP3r_SET BCMI_QSGMII_SERDES_UP3r_SET
#define UP3r_GET BCMI_QSGMII_SERDES_UP3r_GET
#define UP3r_MR_ADV_OVER_1G_31_22f_GET BCMI_QSGMII_SERDES_UP3r_MR_ADV_OVER_1G_31_22f_GET
#define UP3r_MR_ADV_OVER_1G_31_22f_SET BCMI_QSGMII_SERDES_UP3r_MR_ADV_OVER_1G_31_22f_SET
#define READ_UP3r BCMI_QSGMII_SERDES_READ_UP3r
#define WRITE_UP3r BCMI_QSGMII_SERDES_WRITE_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_UP1
 * BLOCKS:   OVER_1G
 * REGADDR:  0x832c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_UP1r (0x0000832c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_UP1r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP1.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_UP1r_s {
	uint32_t v[1];
	uint32_t lp_up1[1];
	uint32_t _lp_up1;
} BCMI_QSGMII_SERDES_LP_UP1r_t;

#define BCMI_QSGMII_SERDES_LP_UP1r_CLR(r) (r).lp_up1[0] = 0
#define BCMI_QSGMII_SERDES_LP_UP1r_SET(r,d) (r).lp_up1[0] = d
#define BCMI_QSGMII_SERDES_LP_UP1r_GET(r) (r).lp_up1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_UP1r_LP_ADV_OVER_1G_10_0f_GET(r) (((r).lp_up1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_UP1r_LP_ADV_OVER_1G_10_0f_SET(r,f) (r).lp_up1[0]=(((r).lp_up1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_UP1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_UP1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_UP1r,(_r._lp_up1))
#define BCMI_QSGMII_SERDES_WRITE_LP_UP1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_UP1r,(_r._lp_up1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP1r BCMI_QSGMII_SERDES_LP_UP1r
#define LP_UP1r_SIZE BCMI_QSGMII_SERDES_LP_UP1r_SIZE
typedef BCMI_QSGMII_SERDES_LP_UP1r_t LP_UP1r_t;
#define LP_UP1r_CLR BCMI_QSGMII_SERDES_LP_UP1r_CLR
#define LP_UP1r_SET BCMI_QSGMII_SERDES_LP_UP1r_SET
#define LP_UP1r_GET BCMI_QSGMII_SERDES_LP_UP1r_GET
#define LP_UP1r_LP_ADV_OVER_1G_10_0f_GET BCMI_QSGMII_SERDES_LP_UP1r_LP_ADV_OVER_1G_10_0f_GET
#define LP_UP1r_LP_ADV_OVER_1G_10_0f_SET BCMI_QSGMII_SERDES_LP_UP1r_LP_ADV_OVER_1G_10_0f_SET
#define READ_LP_UP1r BCMI_QSGMII_SERDES_READ_LP_UP1r
#define WRITE_LP_UP1r BCMI_QSGMII_SERDES_WRITE_LP_UP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_UP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_UP2
 * BLOCKS:   OVER_1G
 * REGADDR:  0x832d
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_21_11 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_UP2r (0x0000832d | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_UP2r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP2.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_UP2r_s {
	uint32_t v[1];
	uint32_t lp_up2[1];
	uint32_t _lp_up2;
} BCMI_QSGMII_SERDES_LP_UP2r_t;

#define BCMI_QSGMII_SERDES_LP_UP2r_CLR(r) (r).lp_up2[0] = 0
#define BCMI_QSGMII_SERDES_LP_UP2r_SET(r,d) (r).lp_up2[0] = d
#define BCMI_QSGMII_SERDES_LP_UP2r_GET(r) (r).lp_up2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_UP2r_LP_ADV_OVER_1G_21_11f_GET(r) (((r).lp_up2[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_UP2r_LP_ADV_OVER_1G_21_11f_SET(r,f) (r).lp_up2[0]=(((r).lp_up2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_UP2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_UP2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_UP2r,(_r._lp_up2))
#define BCMI_QSGMII_SERDES_WRITE_LP_UP2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_UP2r,(_r._lp_up2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP2r BCMI_QSGMII_SERDES_LP_UP2r
#define LP_UP2r_SIZE BCMI_QSGMII_SERDES_LP_UP2r_SIZE
typedef BCMI_QSGMII_SERDES_LP_UP2r_t LP_UP2r_t;
#define LP_UP2r_CLR BCMI_QSGMII_SERDES_LP_UP2r_CLR
#define LP_UP2r_SET BCMI_QSGMII_SERDES_LP_UP2r_SET
#define LP_UP2r_GET BCMI_QSGMII_SERDES_LP_UP2r_GET
#define LP_UP2r_LP_ADV_OVER_1G_21_11f_GET BCMI_QSGMII_SERDES_LP_UP2r_LP_ADV_OVER_1G_21_11f_GET
#define LP_UP2r_LP_ADV_OVER_1G_21_11f_SET BCMI_QSGMII_SERDES_LP_UP2r_LP_ADV_OVER_1G_21_11f_SET
#define READ_LP_UP2r BCMI_QSGMII_SERDES_READ_LP_UP2r
#define WRITE_LP_UP2r BCMI_QSGMII_SERDES_WRITE_LP_UP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_UP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_UP3
 * BLOCKS:   OVER_1G
 * REGADDR:  0x832e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_ADV_OVER_1G_31_22 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_UP3r (0x0000832e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_UP3r_SIZE 4

/*
 * This structure should be used to declare and program LP_UP3.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_UP3r_s {
	uint32_t v[1];
	uint32_t lp_up3[1];
	uint32_t _lp_up3;
} BCMI_QSGMII_SERDES_LP_UP3r_t;

#define BCMI_QSGMII_SERDES_LP_UP3r_CLR(r) (r).lp_up3[0] = 0
#define BCMI_QSGMII_SERDES_LP_UP3r_SET(r,d) (r).lp_up3[0] = d
#define BCMI_QSGMII_SERDES_LP_UP3r_GET(r) (r).lp_up3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_UP3r_LP_ADV_OVER_1G_31_22f_GET(r) (((r).lp_up3[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_UP3r_LP_ADV_OVER_1G_31_22f_SET(r,f) (r).lp_up3[0]=(((r).lp_up3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_UP3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_UP3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_UP3r,(_r._lp_up3))
#define BCMI_QSGMII_SERDES_WRITE_LP_UP3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_UP3r,(_r._lp_up3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UP3r BCMI_QSGMII_SERDES_LP_UP3r
#define LP_UP3r_SIZE BCMI_QSGMII_SERDES_LP_UP3r_SIZE
typedef BCMI_QSGMII_SERDES_LP_UP3r_t LP_UP3r_t;
#define LP_UP3r_CLR BCMI_QSGMII_SERDES_LP_UP3r_CLR
#define LP_UP3r_SET BCMI_QSGMII_SERDES_LP_UP3r_SET
#define LP_UP3r_GET BCMI_QSGMII_SERDES_LP_UP3r_GET
#define LP_UP3r_LP_ADV_OVER_1G_31_22f_GET BCMI_QSGMII_SERDES_LP_UP3r_LP_ADV_OVER_1G_31_22f_GET
#define LP_UP3r_LP_ADV_OVER_1G_31_22f_SET BCMI_QSGMII_SERDES_LP_UP3r_LP_ADV_OVER_1G_31_22f_SET
#define READ_LP_UP3r BCMI_QSGMII_SERDES_READ_LP_UP3r
#define WRITE_LP_UP3r BCMI_QSGMII_SERDES_WRITE_LP_UP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_UP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISCRXSTATUS
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8330
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_BP_LH         
 *     MR_NP_LH         
 *     NP_TOGGLE_ERR_LH 
 *     RX_CONFIG_IS_0_LH 
 *     OVER1GMP_LH      
 *     NONMATCHINGMP_LH 
 *     REMOTEPHYMP_LH   
 *     NULLMP_LH        
 *     INVALIDSEQ_LH    
 *     NEXTPAGESEQDONE_LH 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr (0x00008330 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_SIZE 4

/*
 * This structure should be used to declare and program MISCRXSTATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISCRXSTATUSr_s {
	uint32_t v[1];
	uint32_t miscrxstatus[1];
	uint32_t _miscrxstatus;
} BCMI_QSGMII_SERDES_MISCRXSTATUSr_t;

#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_CLR(r) (r).miscrxstatus[0] = 0
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_SET(r,d) (r).miscrxstatus[0] = d
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_GET(r) (r).miscrxstatus[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_GET(r) ((((r).miscrxstatus[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_INVALIDSEQ_LHf_GET(r) ((((r).miscrxstatus[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_INVALIDSEQ_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NULLMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NULLMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_REMOTEPHYMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_REMOTEPHYMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NONMATCHINGMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NONMATCHINGMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_OVER1GMP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_OVER1GMP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET(r) ((((r).miscrxstatus[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET(r) ((((r).miscrxstatus[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_NP_LHf_GET(r) ((((r).miscrxstatus[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_NP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_BP_LHf_GET(r) (((r).miscrxstatus[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_BP_LHf_SET(r,f) (r).miscrxstatus[0]=(((r).miscrxstatus[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISCRXSTATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISCRXSTATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISCRXSTATUSr,(_r._miscrxstatus))
#define BCMI_QSGMII_SERDES_WRITE_MISCRXSTATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISCRXSTATUSr,(_r._miscrxstatus))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISCRXSTATUSr BCMI_QSGMII_SERDES_MISCRXSTATUSr
#define MISCRXSTATUSr_SIZE BCMI_QSGMII_SERDES_MISCRXSTATUSr_SIZE
typedef BCMI_QSGMII_SERDES_MISCRXSTATUSr_t MISCRXSTATUSr_t;
#define MISCRXSTATUSr_CLR BCMI_QSGMII_SERDES_MISCRXSTATUSr_CLR
#define MISCRXSTATUSr_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_SET
#define MISCRXSTATUSr_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_GET
#define MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_GET
#define MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NEXTPAGESEQDONE_LHf_SET
#define MISCRXSTATUSr_INVALIDSEQ_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_INVALIDSEQ_LHf_GET
#define MISCRXSTATUSr_INVALIDSEQ_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_INVALIDSEQ_LHf_SET
#define MISCRXSTATUSr_NULLMP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NULLMP_LHf_GET
#define MISCRXSTATUSr_NULLMP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NULLMP_LHf_SET
#define MISCRXSTATUSr_REMOTEPHYMP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_REMOTEPHYMP_LHf_GET
#define MISCRXSTATUSr_REMOTEPHYMP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_REMOTEPHYMP_LHf_SET
#define MISCRXSTATUSr_NONMATCHINGMP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NONMATCHINGMP_LHf_GET
#define MISCRXSTATUSr_NONMATCHINGMP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NONMATCHINGMP_LHf_SET
#define MISCRXSTATUSr_OVER1GMP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_OVER1GMP_LHf_GET
#define MISCRXSTATUSr_OVER1GMP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_OVER1GMP_LHf_SET
#define MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_GET
#define MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_RX_CONFIG_IS_0_LHf_SET
#define MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_GET
#define MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_NP_TOGGLE_ERR_LHf_SET
#define MISCRXSTATUSr_MR_NP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_NP_LHf_GET
#define MISCRXSTATUSr_MR_NP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_NP_LHf_SET
#define MISCRXSTATUSr_MR_BP_LHf_GET BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_BP_LHf_GET
#define MISCRXSTATUSr_MR_BP_LHf_SET BCMI_QSGMII_SERDES_MISCRXSTATUSr_MR_BP_LHf_SET
#define READ_MISCRXSTATUSr BCMI_QSGMII_SERDES_READ_MISCRXSTATUSr
#define WRITE_MISCRXSTATUSr BCMI_QSGMII_SERDES_WRITE_MISCRXSTATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISCRXSTATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_BASEPAGE
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8331
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_BASEPAGE      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_BASEPAGEr (0x00008331 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_SIZE 4

/*
 * This structure should be used to declare and program LP_BASEPAGE.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_BASEPAGEr_s {
	uint32_t v[1];
	uint32_t lp_basepage[1];
	uint32_t _lp_basepage;
} BCMI_QSGMII_SERDES_LP_BASEPAGEr_t;

#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_CLR(r) (r).lp_basepage[0] = 0
#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_SET(r,d) (r).lp_basepage[0] = d
#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_GET(r) (r).lp_basepage[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_LP_BASEPAGEf_GET(r) (((r).lp_basepage[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_BASEPAGEr_LP_BASEPAGEf_SET(r,f) (r).lp_basepage[0]=(((r).lp_basepage[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_BASEPAGE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_BASEPAGEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_BASEPAGEr,(_r._lp_basepage))
#define BCMI_QSGMII_SERDES_WRITE_LP_BASEPAGEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_BASEPAGEr,(_r._lp_basepage))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_BASEPAGEr BCMI_QSGMII_SERDES_LP_BASEPAGEr
#define LP_BASEPAGEr_SIZE BCMI_QSGMII_SERDES_LP_BASEPAGEr_SIZE
typedef BCMI_QSGMII_SERDES_LP_BASEPAGEr_t LP_BASEPAGEr_t;
#define LP_BASEPAGEr_CLR BCMI_QSGMII_SERDES_LP_BASEPAGEr_CLR
#define LP_BASEPAGEr_SET BCMI_QSGMII_SERDES_LP_BASEPAGEr_SET
#define LP_BASEPAGEr_GET BCMI_QSGMII_SERDES_LP_BASEPAGEr_GET
#define LP_BASEPAGEr_LP_BASEPAGEf_GET BCMI_QSGMII_SERDES_LP_BASEPAGEr_LP_BASEPAGEf_GET
#define LP_BASEPAGEr_LP_BASEPAGEf_SET BCMI_QSGMII_SERDES_LP_BASEPAGEr_LP_BASEPAGEf_SET
#define READ_LP_BASEPAGEr BCMI_QSGMII_SERDES_READ_LP_BASEPAGEr
#define WRITE_LP_BASEPAGEr BCMI_QSGMII_SERDES_WRITE_LP_BASEPAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_BASEPAGEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_NEXTPAGE_0
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8332
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_0    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r (0x00008332 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_0[1];
	uint32_t _lp_nextpage_0;
} BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_t;

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_CLR(r) (r).lp_nextpage_0[0] = 0
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_SET(r,d) (r).lp_nextpage_0[0] = d
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_GET(r) (r).lp_nextpage_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET(r) (((r).lp_nextpage_0[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET(r,f) (r).lp_nextpage_0[0]=(((r).lp_nextpage_0[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r,(_r._lp_nextpage_0))
#define BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r,(_r._lp_nextpage_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_0r BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r
#define LP_NEXTPAGE_0r_SIZE BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_SIZE
typedef BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_t LP_NEXTPAGE_0r_t;
#define LP_NEXTPAGE_0r_CLR BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_CLR
#define LP_NEXTPAGE_0r_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_SET
#define LP_NEXTPAGE_0r_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_GET
#define LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_GET
#define LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r_LP_NEXTPAGE_0f_SET
#define READ_LP_NEXTPAGE_0r BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_0r
#define WRITE_LP_NEXTPAGE_0r BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_NEXTPAGE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_NEXTPAGE_1
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8333
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_1    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r (0x00008333 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_1[1];
	uint32_t _lp_nextpage_1;
} BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_t;

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_CLR(r) (r).lp_nextpage_1[0] = 0
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_SET(r,d) (r).lp_nextpage_1[0] = d
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_GET(r) (r).lp_nextpage_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET(r) (((r).lp_nextpage_1[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET(r,f) (r).lp_nextpage_1[0]=(((r).lp_nextpage_1[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r,(_r._lp_nextpage_1))
#define BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r,(_r._lp_nextpage_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_1r BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r
#define LP_NEXTPAGE_1r_SIZE BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_SIZE
typedef BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_t LP_NEXTPAGE_1r_t;
#define LP_NEXTPAGE_1r_CLR BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_CLR
#define LP_NEXTPAGE_1r_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_SET
#define LP_NEXTPAGE_1r_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_GET
#define LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_GET
#define LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r_LP_NEXTPAGE_1f_SET
#define READ_LP_NEXTPAGE_1r BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_1r
#define WRITE_LP_NEXTPAGE_1r BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_NEXTPAGE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_NEXTPAGE_2
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8334
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_2    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r (0x00008334 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_2[1];
	uint32_t _lp_nextpage_2;
} BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_t;

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_CLR(r) (r).lp_nextpage_2[0] = 0
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_SET(r,d) (r).lp_nextpage_2[0] = d
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_GET(r) (r).lp_nextpage_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET(r) (((r).lp_nextpage_2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET(r,f) (r).lp_nextpage_2[0]=(((r).lp_nextpage_2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r,(_r._lp_nextpage_2))
#define BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r,(_r._lp_nextpage_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_2r BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r
#define LP_NEXTPAGE_2r_SIZE BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_SIZE
typedef BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_t LP_NEXTPAGE_2r_t;
#define LP_NEXTPAGE_2r_CLR BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_CLR
#define LP_NEXTPAGE_2r_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_SET
#define LP_NEXTPAGE_2r_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_GET
#define LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_GET
#define LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r_LP_NEXTPAGE_2f_SET
#define READ_LP_NEXTPAGE_2r BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_2r
#define WRITE_LP_NEXTPAGE_2r BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_NEXTPAGE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_NEXTPAGE_3
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8335
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_3    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r (0x00008335 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_3.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_3[1];
	uint32_t _lp_nextpage_3;
} BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_t;

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_CLR(r) (r).lp_nextpage_3[0] = 0
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_SET(r,d) (r).lp_nextpage_3[0] = d
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_GET(r) (r).lp_nextpage_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET(r) (((r).lp_nextpage_3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET(r,f) (r).lp_nextpage_3[0]=(((r).lp_nextpage_3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r,(_r._lp_nextpage_3))
#define BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r,(_r._lp_nextpage_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_3r BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r
#define LP_NEXTPAGE_3r_SIZE BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_SIZE
typedef BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_t LP_NEXTPAGE_3r_t;
#define LP_NEXTPAGE_3r_CLR BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_CLR
#define LP_NEXTPAGE_3r_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_SET
#define LP_NEXTPAGE_3r_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_GET
#define LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_GET
#define LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r_LP_NEXTPAGE_3f_SET
#define READ_LP_NEXTPAGE_3r BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_3r
#define WRITE_LP_NEXTPAGE_3r BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_NEXTPAGE_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_NEXTPAGE_4
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8336
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NEXTPAGE_4    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r (0x00008336 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_SIZE 4

/*
 * This structure should be used to declare and program LP_NEXTPAGE_4.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_s {
	uint32_t v[1];
	uint32_t lp_nextpage_4[1];
	uint32_t _lp_nextpage_4;
} BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_t;

#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_CLR(r) (r).lp_nextpage_4[0] = 0
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_SET(r,d) (r).lp_nextpage_4[0] = d
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_GET(r) (r).lp_nextpage_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET(r) (((r).lp_nextpage_4[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET(r,f) (r).lp_nextpage_4[0]=(((r).lp_nextpage_4[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access LP_NEXTPAGE_4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r,(_r._lp_nextpage_4))
#define BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r,(_r._lp_nextpage_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_NEXTPAGE_4r BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r
#define LP_NEXTPAGE_4r_SIZE BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_SIZE
typedef BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_t LP_NEXTPAGE_4r_t;
#define LP_NEXTPAGE_4r_CLR BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_CLR
#define LP_NEXTPAGE_4r_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_SET
#define LP_NEXTPAGE_4r_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_GET
#define LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_GET
#define LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r_LP_NEXTPAGE_4f_SET
#define READ_LP_NEXTPAGE_4r BCMI_QSGMII_SERDES_READ_LP_NEXTPAGE_4r
#define WRITE_LP_NEXTPAGE_4r BCMI_QSGMII_SERDES_WRITE_LP_NEXTPAGE_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_NEXTPAGE_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RP_NEXTPAGE_0
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8337
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_0_10_0 
 *     REMOTE_PHY_ENABLE 
 *     OVER_1G_DISABLE  
 *     NULL_PAGE_ENABLE 
 *     EXTRA_PAGE_DISABLE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r (0x00008337 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_0.
 *
 */
typedef union BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_0[1];
	uint32_t _rp_nextpage_0;
} BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_t;

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_CLR(r) (r).rp_nextpage_0[0] = 0
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_SET(r,d) (r).rp_nextpage_0[0] = d
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_GET(r) (r).rp_nextpage_0[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET(r) ((((r).rp_nextpage_0[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_GET(r) (((r).rp_nextpage_0[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_SET(r,f) (r).rp_nextpage_0[0]=(((r).rp_nextpage_0[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_0.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_0r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r,(_r._rp_nextpage_0))
#define BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_0r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r,(_r._rp_nextpage_0))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_0r BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r
#define RP_NEXTPAGE_0r_SIZE BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_SIZE
typedef BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_t RP_NEXTPAGE_0r_t;
#define RP_NEXTPAGE_0r_CLR BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_CLR
#define RP_NEXTPAGE_0r_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_SET
#define RP_NEXTPAGE_0r_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_GET
#define RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_GET
#define RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_EXTRA_PAGE_DISABLEf_SET
#define RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_GET
#define RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_NULL_PAGE_ENABLEf_SET
#define RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_GET
#define RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_OVER_1G_DISABLEf_SET
#define RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_GET
#define RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_REMOTE_PHY_ENABLEf_SET
#define RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_GET
#define RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r_RP_NEXTPAGE_0_10_0f_SET
#define READ_RP_NEXTPAGE_0r BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_0r
#define WRITE_RP_NEXTPAGE_0r BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_0r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RP_NEXTPAGE_0r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RP_NEXTPAGE_1
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8338
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_1_10_0 
 *     REMPHY_DECODE_ENABLE 
 *     REMPHY_RESOLUTION_DISABLE 
 *     REMPHY_RSLTN_ERR_RSTRT_DISABLE 
 *     REMPHY_LINKDOWN_RSTRT_ENABLE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r (0x00008338 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_1.
 *
 */
typedef union BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_1[1];
	uint32_t _rp_nextpage_1;
} BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_t;

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_CLR(r) (r).rp_nextpage_1[0] = 0
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_SET(r,d) (r).rp_nextpage_1[0] = d
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_GET(r) (r).rp_nextpage_1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_GET(r) ((((r).rp_nextpage_1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_GET(r) (((r).rp_nextpage_1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_SET(r,f) (r).rp_nextpage_1[0]=(((r).rp_nextpage_1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r,(_r._rp_nextpage_1))
#define BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r,(_r._rp_nextpage_1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_1r BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r
#define RP_NEXTPAGE_1r_SIZE BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_SIZE
typedef BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_t RP_NEXTPAGE_1r_t;
#define RP_NEXTPAGE_1r_CLR BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_CLR
#define RP_NEXTPAGE_1r_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_SET
#define RP_NEXTPAGE_1r_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_GET
#define RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_GET
#define RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_LINKDOWN_RSTRT_ENABLEf_SET
#define RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_GET
#define RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RSLTN_ERR_RSTRT_DISABLEf_SET
#define RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_GET
#define RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_RESOLUTION_DISABLEf_SET
#define RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_GET
#define RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_REMPHY_DECODE_ENABLEf_SET
#define RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_GET
#define RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r_RP_NEXTPAGE_1_10_0f_SET
#define READ_RP_NEXTPAGE_1r BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_1r
#define WRITE_RP_NEXTPAGE_1r BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RP_NEXTPAGE_1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RP_NEXTPAGE_2
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x8339
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_2_10_0 
 *     REMPHY_NP_CLR_DISABLE 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r (0x00008339 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_2.
 *
 */
typedef union BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_2[1];
	uint32_t _rp_nextpage_2;
} BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_t;

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_CLR(r) (r).rp_nextpage_2[0] = 0
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_SET(r,d) (r).rp_nextpage_2[0] = d
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_GET(r) (r).rp_nextpage_2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET(r) ((((r).rp_nextpage_2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET(r,f) (r).rp_nextpage_2[0]=(((r).rp_nextpage_2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_GET(r) (((r).rp_nextpage_2[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_SET(r,f) (r).rp_nextpage_2[0]=(((r).rp_nextpage_2[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r,(_r._rp_nextpage_2))
#define BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r,(_r._rp_nextpage_2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_2r BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r
#define RP_NEXTPAGE_2r_SIZE BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_SIZE
typedef BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_t RP_NEXTPAGE_2r_t;
#define RP_NEXTPAGE_2r_CLR BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_CLR
#define RP_NEXTPAGE_2r_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_SET
#define RP_NEXTPAGE_2r_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_GET
#define RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_GET
#define RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_REMPHY_NP_CLR_DISABLEf_SET
#define RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_GET
#define RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r_RP_NEXTPAGE_2_10_0f_SET
#define READ_RP_NEXTPAGE_2r BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_2r
#define WRITE_RP_NEXTPAGE_2r BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RP_NEXTPAGE_2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RP_NEXTPAGE_3
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x833a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_3_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r (0x0000833a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_3.
 *
 */
typedef union BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_3[1];
	uint32_t _rp_nextpage_3;
} BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_t;

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_CLR(r) (r).rp_nextpage_3[0] = 0
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_SET(r,d) (r).rp_nextpage_3[0] = d
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_GET(r) (r).rp_nextpage_3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_GET(r) (((r).rp_nextpage_3[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_SET(r,f) (r).rp_nextpage_3[0]=(((r).rp_nextpage_3[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r,(_r._rp_nextpage_3))
#define BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r,(_r._rp_nextpage_3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_3r BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r
#define RP_NEXTPAGE_3r_SIZE BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_SIZE
typedef BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_t RP_NEXTPAGE_3r_t;
#define RP_NEXTPAGE_3r_CLR BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_CLR
#define RP_NEXTPAGE_3r_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_SET
#define RP_NEXTPAGE_3r_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_GET
#define RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_GET
#define RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r_RP_NEXTPAGE_3_10_0f_SET
#define READ_RP_NEXTPAGE_3r BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_3r
#define WRITE_RP_NEXTPAGE_3r BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RP_NEXTPAGE_3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  RP_NEXTPAGE_4
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x833b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RP_NEXTPAGE_4_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r (0x0000833b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_SIZE 4

/*
 * This structure should be used to declare and program RP_NEXTPAGE_4.
 *
 */
typedef union BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_s {
	uint32_t v[1];
	uint32_t rp_nextpage_4[1];
	uint32_t _rp_nextpage_4;
} BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_t;

#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_CLR(r) (r).rp_nextpage_4[0] = 0
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_SET(r,d) (r).rp_nextpage_4[0] = d
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_GET(r) (r).rp_nextpage_4[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_GET(r) (((r).rp_nextpage_4[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_SET(r,f) (r).rp_nextpage_4[0]=(((r).rp_nextpage_4[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access RP_NEXTPAGE_4.
 *
 */
#define BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_4r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r,(_r._rp_nextpage_4))
#define BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_4r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r,(_r._rp_nextpage_4))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define RP_NEXTPAGE_4r BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r
#define RP_NEXTPAGE_4r_SIZE BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_SIZE
typedef BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_t RP_NEXTPAGE_4r_t;
#define RP_NEXTPAGE_4r_CLR BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_CLR
#define RP_NEXTPAGE_4r_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_SET
#define RP_NEXTPAGE_4r_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_GET
#define RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_GET BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_GET
#define RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_SET BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r_RP_NEXTPAGE_4_10_0f_SET
#define READ_RP_NEXTPAGE_4r BCMI_QSGMII_SERDES_READ_RP_NEXTPAGE_4r
#define WRITE_RP_NEXTPAGE_4r BCMI_QSGMII_SERDES_WRITE_RP_NEXTPAGE_4r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_RP_NEXTPAGE_4r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISC3
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x833c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RXSIGDETPWRDN_OVERRIDE_VAL 
 *     RXSIGDETPWRDN_OVERRIDE 
 *     TBI_MODE_FORCE_R 
 *     DISABLE_PCS_TX_FORCE_R 
 *     DISABLE_PCS_TX_R 
 *     FIFO_ERR_CYA2    
 *     LANEDISABLE      
 *     QSGMII_EXT_SEL   
 *     FIFO_IPG_CYA     
 *     FIFO_FSM_CYA     
 *     LPI_CYCLE_CNT_CYA 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISC3r (0x0000833c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISC3r_SIZE 4

/*
 * This structure should be used to declare and program MISC3.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISC3r_s {
	uint32_t v[1];
	uint32_t misc3[1];
	uint32_t _misc3;
} BCMI_QSGMII_SERDES_MISC3r_t;

#define BCMI_QSGMII_SERDES_MISC3r_CLR(r) (r).misc3[0] = 0
#define BCMI_QSGMII_SERDES_MISC3r_SET(r,d) (r).misc3[0] = d
#define BCMI_QSGMII_SERDES_MISC3r_GET(r) (r).misc3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISC3r_LPI_CYCLE_CNT_CYAf_GET(r) ((((r).misc3[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_LPI_CYCLE_CNT_CYAf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_FSM_CYAf_GET(r) ((((r).misc3[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_FSM_CYAf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_IPG_CYAf_GET(r) ((((r).misc3[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_IPG_CYAf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_MISC3r_QSGMII_EXT_SELf_GET(r) ((((r).misc3[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_QSGMII_EXT_SELf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_MISC3r_LANEDISABLEf_GET(r) ((((r).misc3[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_LANEDISABLEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_ERR_CYA2f_GET(r) ((((r).misc3[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_FIFO_ERR_CYA2f_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_Rf_GET(r) ((((r).misc3[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET(r) ((((r).misc3[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MISC3r_TBI_MODE_FORCE_Rf_GET(r) ((((r).misc3[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_TBI_MODE_FORCE_Rf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET(r) ((((r).misc3[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET(r) (((r).misc3[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET(r,f) (r).misc3[0]=(((r).misc3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MISC3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISC3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISC3r,(_r._misc3))
#define BCMI_QSGMII_SERDES_WRITE_MISC3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISC3r,(_r._misc3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC3r BCMI_QSGMII_SERDES_MISC3r
#define MISC3r_SIZE BCMI_QSGMII_SERDES_MISC3r_SIZE
typedef BCMI_QSGMII_SERDES_MISC3r_t MISC3r_t;
#define MISC3r_CLR BCMI_QSGMII_SERDES_MISC3r_CLR
#define MISC3r_SET BCMI_QSGMII_SERDES_MISC3r_SET
#define MISC3r_GET BCMI_QSGMII_SERDES_MISC3r_GET
#define MISC3r_LPI_CYCLE_CNT_CYAf_GET BCMI_QSGMII_SERDES_MISC3r_LPI_CYCLE_CNT_CYAf_GET
#define MISC3r_LPI_CYCLE_CNT_CYAf_SET BCMI_QSGMII_SERDES_MISC3r_LPI_CYCLE_CNT_CYAf_SET
#define MISC3r_FIFO_FSM_CYAf_GET BCMI_QSGMII_SERDES_MISC3r_FIFO_FSM_CYAf_GET
#define MISC3r_FIFO_FSM_CYAf_SET BCMI_QSGMII_SERDES_MISC3r_FIFO_FSM_CYAf_SET
#define MISC3r_FIFO_IPG_CYAf_GET BCMI_QSGMII_SERDES_MISC3r_FIFO_IPG_CYAf_GET
#define MISC3r_FIFO_IPG_CYAf_SET BCMI_QSGMII_SERDES_MISC3r_FIFO_IPG_CYAf_SET
#define MISC3r_QSGMII_EXT_SELf_GET BCMI_QSGMII_SERDES_MISC3r_QSGMII_EXT_SELf_GET
#define MISC3r_QSGMII_EXT_SELf_SET BCMI_QSGMII_SERDES_MISC3r_QSGMII_EXT_SELf_SET
#define MISC3r_LANEDISABLEf_GET BCMI_QSGMII_SERDES_MISC3r_LANEDISABLEf_GET
#define MISC3r_LANEDISABLEf_SET BCMI_QSGMII_SERDES_MISC3r_LANEDISABLEf_SET
#define MISC3r_FIFO_ERR_CYA2f_GET BCMI_QSGMII_SERDES_MISC3r_FIFO_ERR_CYA2f_GET
#define MISC3r_FIFO_ERR_CYA2f_SET BCMI_QSGMII_SERDES_MISC3r_FIFO_ERR_CYA2f_SET
#define MISC3r_DISABLE_PCS_TX_Rf_GET BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_Rf_GET
#define MISC3r_DISABLE_PCS_TX_Rf_SET BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_Rf_SET
#define MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_FORCE_Rf_GET
#define MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET BCMI_QSGMII_SERDES_MISC3r_DISABLE_PCS_TX_FORCE_Rf_SET
#define MISC3r_TBI_MODE_FORCE_Rf_GET BCMI_QSGMII_SERDES_MISC3r_TBI_MODE_FORCE_Rf_GET
#define MISC3r_TBI_MODE_FORCE_Rf_SET BCMI_QSGMII_SERDES_MISC3r_TBI_MODE_FORCE_Rf_SET
#define MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDEf_GET
#define MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDEf_SET
#define MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_GET
#define MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET BCMI_QSGMII_SERDES_MISC3r_RXSIGDETPWRDN_OVERRIDE_VALf_SET
#define READ_MISC3r BCMI_QSGMII_SERDES_READ_MISC3r
#define WRITE_MISC3r BCMI_QSGMII_SERDES_WRITE_MISC3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISC3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MISC5
 * BLOCKS:   REMOTE_PHY
 * REGADDR:  0x833e
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LPI_EN_TX        
 *     LPI_EN_RX        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MISC5r (0x0000833e | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MISC5r_SIZE 4

/*
 * This structure should be used to declare and program MISC5.
 *
 */
typedef union BCMI_QSGMII_SERDES_MISC5r_s {
	uint32_t v[1];
	uint32_t misc5[1];
	uint32_t _misc5;
} BCMI_QSGMII_SERDES_MISC5r_t;

#define BCMI_QSGMII_SERDES_MISC5r_CLR(r) (r).misc5[0] = 0
#define BCMI_QSGMII_SERDES_MISC5r_SET(r,d) (r).misc5[0] = d
#define BCMI_QSGMII_SERDES_MISC5r_GET(r) (r).misc5[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MISC5r_LPI_EN_RXf_GET(r) ((((r).misc5[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_MISC5r_LPI_EN_RXf_SET(r,f) (r).misc5[0]=(((r).misc5[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_MISC5r_LPI_EN_TXf_GET(r) ((((r).misc5[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_MISC5r_LPI_EN_TXf_SET(r,f) (r).misc5[0]=(((r).misc5[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))

/*
 * These macros can be used to access MISC5.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MISC5r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MISC5r,(_r._misc5))
#define BCMI_QSGMII_SERDES_WRITE_MISC5r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MISC5r,(_r._misc5))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MISC5r BCMI_QSGMII_SERDES_MISC5r
#define MISC5r_SIZE BCMI_QSGMII_SERDES_MISC5r_SIZE
typedef BCMI_QSGMII_SERDES_MISC5r_t MISC5r_t;
#define MISC5r_CLR BCMI_QSGMII_SERDES_MISC5r_CLR
#define MISC5r_SET BCMI_QSGMII_SERDES_MISC5r_SET
#define MISC5r_GET BCMI_QSGMII_SERDES_MISC5r_GET
#define MISC5r_LPI_EN_RXf_GET BCMI_QSGMII_SERDES_MISC5r_LPI_EN_RXf_GET
#define MISC5r_LPI_EN_RXf_SET BCMI_QSGMII_SERDES_MISC5r_LPI_EN_RXf_SET
#define MISC5r_LPI_EN_TXf_GET BCMI_QSGMII_SERDES_MISC5r_LPI_EN_TXf_GET
#define MISC5r_LPI_EN_TXf_SET BCMI_QSGMII_SERDES_MISC5r_LPI_EN_TXf_SET
#define READ_MISC5r BCMI_QSGMII_SERDES_READ_MISC5r
#define WRITE_MISC5r BCMI_QSGMII_SERDES_WRITE_MISC5r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MISC5r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  MP5_NEXTPAGECTRL
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8350
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     BAM_MODE         
 *     TETON_MODE       
 *     TETON_MODE_UP3_EN 
 *     NP_SW_OVERRIDE_EN 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr (0x00008350 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_SIZE 4

/*
 * This structure should be used to declare and program MP5_NEXTPAGECTRL.
 *
 */
typedef union BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_s {
	uint32_t v[1];
	uint32_t mp5_nextpagectrl[1];
	uint32_t _mp5_nextpagectrl;
} BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_t;

#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_CLR(r) (r).mp5_nextpagectrl[0] = 0
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_SET(r,d) (r).mp5_nextpagectrl[0] = d
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_GET(r) (r).mp5_nextpagectrl[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODEf_GET(r) ((((r).mp5_nextpagectrl[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODEf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_BAM_MODEf_GET(r) (((r).mp5_nextpagectrl[0]) & 0x1)
#define BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_BAM_MODEf_SET(r,f) (r).mp5_nextpagectrl[0]=(((r).mp5_nextpagectrl[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access MP5_NEXTPAGECTRL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_MP5_NEXTPAGECTRLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr,(_r._mp5_nextpagectrl))
#define BCMI_QSGMII_SERDES_WRITE_MP5_NEXTPAGECTRLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr,(_r._mp5_nextpagectrl))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define MP5_NEXTPAGECTRLr BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr
#define MP5_NEXTPAGECTRLr_SIZE BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_SIZE
typedef BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_t MP5_NEXTPAGECTRLr_t;
#define MP5_NEXTPAGECTRLr_CLR BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_CLR
#define MP5_NEXTPAGECTRLr_SET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_SET
#define MP5_NEXTPAGECTRLr_GET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_GET
#define MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_GET
#define MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_NP_SW_OVERRIDE_ENf_SET
#define MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_GET
#define MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODE_UP3_ENf_SET
#define MP5_NEXTPAGECTRLr_TETON_MODEf_GET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODEf_GET
#define MP5_NEXTPAGECTRLr_TETON_MODEf_SET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_TETON_MODEf_SET
#define MP5_NEXTPAGECTRLr_BAM_MODEf_GET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_BAM_MODEf_GET
#define MP5_NEXTPAGECTRLr_BAM_MODEf_SET BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr_BAM_MODEf_SET
#define READ_MP5_NEXTPAGECTRLr BCMI_QSGMII_SERDES_READ_MP5_NEXTPAGECTRLr
#define WRITE_MP5_NEXTPAGECTRLr BCMI_QSGMII_SERDES_WRITE_MP5_NEXTPAGECTRLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_MP5_NEXTPAGECTRLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LINK_TIMER_OFFSET1
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8351
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MAX_OFFSET       
 *     SGMII_OFFSET     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r (0x00008351 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET1.
 *
 */
typedef union BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_s {
	uint32_t v[1];
	uint32_t link_timer_offset1[1];
	uint32_t _link_timer_offset1;
} BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_t;

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_CLR(r) (r).link_timer_offset1[0] = 0
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SET(r,d) (r).link_timer_offset1[0] = d
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_GET(r) (r).link_timer_offset1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET(r) ((((r).link_timer_offset1[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET(r,f) (r).link_timer_offset1[0]=(((r).link_timer_offset1[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET(r) (((r).link_timer_offset1[0]) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET(r,f) (r).link_timer_offset1[0]=(((r).link_timer_offset1[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r,(_r._link_timer_offset1))
#define BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r,(_r._link_timer_offset1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET1r BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r
#define LINK_TIMER_OFFSET1r_SIZE BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SIZE
typedef BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_t LINK_TIMER_OFFSET1r_t;
#define LINK_TIMER_OFFSET1r_CLR BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_CLR
#define LINK_TIMER_OFFSET1r_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SET
#define LINK_TIMER_OFFSET1r_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_GET
#define LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_GET
#define LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_SGMII_OFFSETf_SET
#define LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_MAX_OFFSETf_GET
#define LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r_MAX_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET1r BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET1r
#define WRITE_LINK_TIMER_OFFSET1r BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LINK_TIMER_OFFSET2
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8352
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LINK_DOWN_OFFSET 
 *     LINK_UP_OFFSET   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r (0x00008352 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET2.
 *
 */
typedef union BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_s {
	uint32_t v[1];
	uint32_t link_timer_offset2[1];
	uint32_t _link_timer_offset2;
} BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_t;

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_CLR(r) (r).link_timer_offset2[0] = 0
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_SET(r,d) (r).link_timer_offset2[0] = d
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_GET(r) (r).link_timer_offset2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET(r) ((((r).link_timer_offset2[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET(r,f) (r).link_timer_offset2[0]=(((r).link_timer_offset2[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET(r) (((r).link_timer_offset2[0]) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET(r,f) (r).link_timer_offset2[0]=(((r).link_timer_offset2[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r,(_r._link_timer_offset2))
#define BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r,(_r._link_timer_offset2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET2r BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r
#define LINK_TIMER_OFFSET2r_SIZE BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_SIZE
typedef BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_t LINK_TIMER_OFFSET2r_t;
#define LINK_TIMER_OFFSET2r_CLR BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_CLR
#define LINK_TIMER_OFFSET2r_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_SET
#define LINK_TIMER_OFFSET2r_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_GET
#define LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_GET
#define LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_UP_OFFSETf_SET
#define LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_GET
#define LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r_LINK_DOWN_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET2r BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET2r
#define WRITE_LINK_TIMER_OFFSET2r BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LINK_TIMER_OFFSET3
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8353
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     NP_LINK_OFFSET   
 *     BREAK_LINK_OFFSET 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r (0x00008353 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_SIZE 4

/*
 * This structure should be used to declare and program LINK_TIMER_OFFSET3.
 *
 */
typedef union BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_s {
	uint32_t v[1];
	uint32_t link_timer_offset3[1];
	uint32_t _link_timer_offset3;
} BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_t;

#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_CLR(r) (r).link_timer_offset3[0] = 0
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_SET(r,d) (r).link_timer_offset3[0] = d
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_GET(r) (r).link_timer_offset3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET(r) ((((r).link_timer_offset3[0]) >> 8) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET(r,f) (r).link_timer_offset3[0]=(((r).link_timer_offset3[0] & ~((uint32_t)0xff << 8)) | ((((uint32_t)f) & 0xff) << 8))
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET(r) (((r).link_timer_offset3[0]) & 0xff)
#define BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET(r,f) (r).link_timer_offset3[0]=(((r).link_timer_offset3[0] & ~((uint32_t)0xff)) | (((uint32_t)f) & 0xff))

/*
 * These macros can be used to access LINK_TIMER_OFFSET3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r,(_r._link_timer_offset3))
#define BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r,(_r._link_timer_offset3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LINK_TIMER_OFFSET3r BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r
#define LINK_TIMER_OFFSET3r_SIZE BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_SIZE
typedef BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_t LINK_TIMER_OFFSET3r_t;
#define LINK_TIMER_OFFSET3r_CLR BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_CLR
#define LINK_TIMER_OFFSET3r_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_SET
#define LINK_TIMER_OFFSET3r_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_GET
#define LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_GET
#define LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_BREAK_LINK_OFFSETf_SET
#define LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_GET
#define LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r_NP_LINK_OFFSETf_SET
#define READ_LINK_TIMER_OFFSET3r BCMI_QSGMII_SERDES_READ_LINK_TIMER_OFFSET3r
#define WRITE_LINK_TIMER_OFFSET3r BCMI_QSGMII_SERDES_WRITE_LINK_TIMER_OFFSET3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LINK_TIMER_OFFSET3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  OUI_MSB_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8354
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     OUI_23_13        
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr (0x00008354 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program OUI_MSB_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_s {
	uint32_t v[1];
	uint32_t oui_msb_field[1];
	uint32_t _oui_msb_field;
} BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_t;

#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_CLR(r) (r).oui_msb_field[0] = 0
#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_SET(r,d) (r).oui_msb_field[0] = d
#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_GET(r) (r).oui_msb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_OUI_23_13f_GET(r) (((r).oui_msb_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_OUI_23_13f_SET(r,f) (r).oui_msb_field[0]=(((r).oui_msb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access OUI_MSB_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_OUI_MSB_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_OUI_MSB_FIELDr,(_r._oui_msb_field))
#define BCMI_QSGMII_SERDES_WRITE_OUI_MSB_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_OUI_MSB_FIELDr,(_r._oui_msb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define OUI_MSB_FIELDr BCMI_QSGMII_SERDES_OUI_MSB_FIELDr
#define OUI_MSB_FIELDr_SIZE BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_t OUI_MSB_FIELDr_t;
#define OUI_MSB_FIELDr_CLR BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_CLR
#define OUI_MSB_FIELDr_SET BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_SET
#define OUI_MSB_FIELDr_GET BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_GET
#define OUI_MSB_FIELDr_OUI_23_13f_GET BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_OUI_23_13f_GET
#define OUI_MSB_FIELDr_OUI_23_13f_SET BCMI_QSGMII_SERDES_OUI_MSB_FIELDr_OUI_23_13f_SET
#define READ_OUI_MSB_FIELDr BCMI_QSGMII_SERDES_READ_OUI_MSB_FIELDr
#define WRITE_OUI_MSB_FIELDr BCMI_QSGMII_SERDES_WRITE_OUI_MSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_OUI_MSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  OUI_LSB_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8355
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     OUI_12_2         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr (0x00008355 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program OUI_LSB_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_s {
	uint32_t v[1];
	uint32_t oui_lsb_field[1];
	uint32_t _oui_lsb_field;
} BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_t;

#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_CLR(r) (r).oui_lsb_field[0] = 0
#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_SET(r,d) (r).oui_lsb_field[0] = d
#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_GET(r) (r).oui_lsb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_OUI_12_2f_GET(r) (((r).oui_lsb_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_OUI_12_2f_SET(r,f) (r).oui_lsb_field[0]=(((r).oui_lsb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access OUI_LSB_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_OUI_LSB_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_OUI_LSB_FIELDr,(_r._oui_lsb_field))
#define BCMI_QSGMII_SERDES_WRITE_OUI_LSB_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_OUI_LSB_FIELDr,(_r._oui_lsb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define OUI_LSB_FIELDr BCMI_QSGMII_SERDES_OUI_LSB_FIELDr
#define OUI_LSB_FIELDr_SIZE BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_t OUI_LSB_FIELDr_t;
#define OUI_LSB_FIELDr_CLR BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_CLR
#define OUI_LSB_FIELDr_SET BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_SET
#define OUI_LSB_FIELDr_GET BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_GET
#define OUI_LSB_FIELDr_OUI_12_2f_GET BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_OUI_12_2f_GET
#define OUI_LSB_FIELDr_OUI_12_2f_SET BCMI_QSGMII_SERDES_OUI_LSB_FIELDr_OUI_12_2f_SET
#define READ_OUI_LSB_FIELDr BCMI_QSGMII_SERDES_READ_OUI_LSB_FIELDr
#define WRITE_OUI_LSB_FIELDr BCMI_QSGMII_SERDES_WRITE_OUI_LSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_OUI_LSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  BAM_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8356
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     BAM_FIELD        
 *     OUI              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_BAM_FIELDr (0x00008356 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_BAM_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program BAM_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_BAM_FIELDr_s {
	uint32_t v[1];
	uint32_t bam_field[1];
	uint32_t _bam_field;
} BCMI_QSGMII_SERDES_BAM_FIELDr_t;

#define BCMI_QSGMII_SERDES_BAM_FIELDr_CLR(r) (r).bam_field[0] = 0
#define BCMI_QSGMII_SERDES_BAM_FIELDr_SET(r,d) (r).bam_field[0] = d
#define BCMI_QSGMII_SERDES_BAM_FIELDr_GET(r) (r).bam_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_BAM_FIELDr_OUIf_GET(r) ((((r).bam_field[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_BAM_FIELDr_OUIf_SET(r,f) (r).bam_field[0]=(((r).bam_field[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_BAM_FIELDr_BAM_FIELDf_GET(r) (((r).bam_field[0]) & 0x1ff)
#define BCMI_QSGMII_SERDES_BAM_FIELDr_BAM_FIELDf_SET(r,f) (r).bam_field[0]=(((r).bam_field[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access BAM_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_BAM_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_BAM_FIELDr,(_r._bam_field))
#define BCMI_QSGMII_SERDES_WRITE_BAM_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_BAM_FIELDr,(_r._bam_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BAM_FIELDr BCMI_QSGMII_SERDES_BAM_FIELDr
#define BAM_FIELDr_SIZE BCMI_QSGMII_SERDES_BAM_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_BAM_FIELDr_t BAM_FIELDr_t;
#define BAM_FIELDr_CLR BCMI_QSGMII_SERDES_BAM_FIELDr_CLR
#define BAM_FIELDr_SET BCMI_QSGMII_SERDES_BAM_FIELDr_SET
#define BAM_FIELDr_GET BCMI_QSGMII_SERDES_BAM_FIELDr_GET
#define BAM_FIELDr_OUIf_GET BCMI_QSGMII_SERDES_BAM_FIELDr_OUIf_GET
#define BAM_FIELDr_OUIf_SET BCMI_QSGMII_SERDES_BAM_FIELDr_OUIf_SET
#define BAM_FIELDr_BAM_FIELDf_GET BCMI_QSGMII_SERDES_BAM_FIELDr_BAM_FIELDf_GET
#define BAM_FIELDr_BAM_FIELDf_SET BCMI_QSGMII_SERDES_BAM_FIELDr_BAM_FIELDf_SET
#define READ_BAM_FIELDr BCMI_QSGMII_SERDES_READ_BAM_FIELDr
#define WRITE_BAM_FIELDr BCMI_QSGMII_SERDES_WRITE_BAM_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_BAM_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  UD_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8357
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     UD_FIELD         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_UD_FIELDr (0x00008357 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_UD_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program UD_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_UD_FIELDr_s {
	uint32_t v[1];
	uint32_t ud_field[1];
	uint32_t _ud_field;
} BCMI_QSGMII_SERDES_UD_FIELDr_t;

#define BCMI_QSGMII_SERDES_UD_FIELDr_CLR(r) (r).ud_field[0] = 0
#define BCMI_QSGMII_SERDES_UD_FIELDr_SET(r,d) (r).ud_field[0] = d
#define BCMI_QSGMII_SERDES_UD_FIELDr_GET(r) (r).ud_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_UD_FIELDr_UD_FIELDf_GET(r) (((r).ud_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_UD_FIELDr_UD_FIELDf_SET(r,f) (r).ud_field[0]=(((r).ud_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access UD_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_UD_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_UD_FIELDr,(_r._ud_field))
#define BCMI_QSGMII_SERDES_WRITE_UD_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_UD_FIELDr,(_r._ud_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define UD_FIELDr BCMI_QSGMII_SERDES_UD_FIELDr
#define UD_FIELDr_SIZE BCMI_QSGMII_SERDES_UD_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_UD_FIELDr_t UD_FIELDr_t;
#define UD_FIELDr_CLR BCMI_QSGMII_SERDES_UD_FIELDr_CLR
#define UD_FIELDr_SET BCMI_QSGMII_SERDES_UD_FIELDr_SET
#define UD_FIELDr_GET BCMI_QSGMII_SERDES_UD_FIELDr_GET
#define UD_FIELDr_UD_FIELDf_GET BCMI_QSGMII_SERDES_UD_FIELDr_UD_FIELDf_GET
#define UD_FIELDr_UD_FIELDf_SET BCMI_QSGMII_SERDES_UD_FIELDr_UD_FIELDf_SET
#define READ_UD_FIELDr BCMI_QSGMII_SERDES_READ_UD_FIELDr
#define WRITE_UD_FIELDr BCMI_QSGMII_SERDES_WRITE_UD_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_UD_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_OUI_MSB_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8358
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_OUI_23_13     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr (0x00008358 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_OUI_MSB_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_oui_msb_field[1];
	uint32_t _lp_oui_msb_field;
} BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_t;

#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_CLR(r) (r).lp_oui_msb_field[0] = 0
#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_SET(r,d) (r).lp_oui_msb_field[0] = d
#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_GET(r) (r).lp_oui_msb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_LP_OUI_23_13f_GET(r) (((r).lp_oui_msb_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_LP_OUI_23_13f_SET(r,f) (r).lp_oui_msb_field[0]=(((r).lp_oui_msb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_OUI_MSB_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_OUI_MSB_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr,(_r._lp_oui_msb_field))
#define BCMI_QSGMII_SERDES_WRITE_LP_OUI_MSB_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr,(_r._lp_oui_msb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_OUI_MSB_FIELDr BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr
#define LP_OUI_MSB_FIELDr_SIZE BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_t LP_OUI_MSB_FIELDr_t;
#define LP_OUI_MSB_FIELDr_CLR BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_CLR
#define LP_OUI_MSB_FIELDr_SET BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_SET
#define LP_OUI_MSB_FIELDr_GET BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_GET
#define LP_OUI_MSB_FIELDr_LP_OUI_23_13f_GET BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_LP_OUI_23_13f_GET
#define LP_OUI_MSB_FIELDr_LP_OUI_23_13f_SET BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr_LP_OUI_23_13f_SET
#define READ_LP_OUI_MSB_FIELDr BCMI_QSGMII_SERDES_READ_LP_OUI_MSB_FIELDr
#define WRITE_LP_OUI_MSB_FIELDr BCMI_QSGMII_SERDES_WRITE_LP_OUI_MSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_OUI_MSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_OUI_LSB_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x8359
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_OUI_12_2      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr (0x00008359 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_OUI_LSB_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_oui_lsb_field[1];
	uint32_t _lp_oui_lsb_field;
} BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_t;

#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_CLR(r) (r).lp_oui_lsb_field[0] = 0
#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_SET(r,d) (r).lp_oui_lsb_field[0] = d
#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_GET(r) (r).lp_oui_lsb_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_LP_OUI_12_2f_GET(r) (((r).lp_oui_lsb_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_LP_OUI_12_2f_SET(r,f) (r).lp_oui_lsb_field[0]=(((r).lp_oui_lsb_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_OUI_LSB_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_OUI_LSB_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr,(_r._lp_oui_lsb_field))
#define BCMI_QSGMII_SERDES_WRITE_LP_OUI_LSB_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr,(_r._lp_oui_lsb_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_OUI_LSB_FIELDr BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr
#define LP_OUI_LSB_FIELDr_SIZE BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_t LP_OUI_LSB_FIELDr_t;
#define LP_OUI_LSB_FIELDr_CLR BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_CLR
#define LP_OUI_LSB_FIELDr_SET BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_SET
#define LP_OUI_LSB_FIELDr_GET BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_GET
#define LP_OUI_LSB_FIELDr_LP_OUI_12_2f_GET BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_LP_OUI_12_2f_GET
#define LP_OUI_LSB_FIELDr_LP_OUI_12_2f_SET BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr_LP_OUI_12_2f_SET
#define READ_LP_OUI_LSB_FIELDr BCMI_QSGMII_SERDES_READ_LP_OUI_LSB_FIELDr
#define WRITE_LP_OUI_LSB_FIELDr BCMI_QSGMII_SERDES_WRITE_LP_OUI_LSB_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_OUI_LSB_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_BAM_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x835a
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_BAM_FIELD     
 *     LP_OUI           
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr (0x0000835a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_BAM_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_BAM_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_bam_field[1];
	uint32_t _lp_bam_field;
} BCMI_QSGMII_SERDES_LP_BAM_FIELDr_t;

#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_CLR(r) (r).lp_bam_field[0] = 0
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_SET(r,d) (r).lp_bam_field[0] = d
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_GET(r) (r).lp_bam_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_OUIf_GET(r) ((((r).lp_bam_field[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_OUIf_SET(r,f) (r).lp_bam_field[0]=(((r).lp_bam_field[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_BAM_FIELDf_GET(r) (((r).lp_bam_field[0]) & 0x1ff)
#define BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_BAM_FIELDf_SET(r,f) (r).lp_bam_field[0]=(((r).lp_bam_field[0] & ~((uint32_t)0x1ff)) | (((uint32_t)f) & 0x1ff))

/*
 * These macros can be used to access LP_BAM_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_BAM_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_BAM_FIELDr,(_r._lp_bam_field))
#define BCMI_QSGMII_SERDES_WRITE_LP_BAM_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_BAM_FIELDr,(_r._lp_bam_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_BAM_FIELDr BCMI_QSGMII_SERDES_LP_BAM_FIELDr
#define LP_BAM_FIELDr_SIZE BCMI_QSGMII_SERDES_LP_BAM_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_LP_BAM_FIELDr_t LP_BAM_FIELDr_t;
#define LP_BAM_FIELDr_CLR BCMI_QSGMII_SERDES_LP_BAM_FIELDr_CLR
#define LP_BAM_FIELDr_SET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_SET
#define LP_BAM_FIELDr_GET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_GET
#define LP_BAM_FIELDr_LP_OUIf_GET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_OUIf_GET
#define LP_BAM_FIELDr_LP_OUIf_SET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_OUIf_SET
#define LP_BAM_FIELDr_LP_BAM_FIELDf_GET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_BAM_FIELDf_GET
#define LP_BAM_FIELDr_LP_BAM_FIELDf_SET BCMI_QSGMII_SERDES_LP_BAM_FIELDr_LP_BAM_FIELDf_SET
#define READ_LP_BAM_FIELDr BCMI_QSGMII_SERDES_READ_LP_BAM_FIELDr
#define WRITE_LP_BAM_FIELDr BCMI_QSGMII_SERDES_WRITE_LP_BAM_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_BAM_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  LP_UD_FIELD
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x835b
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_UD_FIELD      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_LP_UD_FIELDr (0x0000835b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_SIZE 4

/*
 * This structure should be used to declare and program LP_UD_FIELD.
 *
 */
typedef union BCMI_QSGMII_SERDES_LP_UD_FIELDr_s {
	uint32_t v[1];
	uint32_t lp_ud_field[1];
	uint32_t _lp_ud_field;
} BCMI_QSGMII_SERDES_LP_UD_FIELDr_t;

#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_CLR(r) (r).lp_ud_field[0] = 0
#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_SET(r,d) (r).lp_ud_field[0] = d
#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_GET(r) (r).lp_ud_field[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_LP_UD_FIELDf_GET(r) (((r).lp_ud_field[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_LP_UD_FIELDr_LP_UD_FIELDf_SET(r,f) (r).lp_ud_field[0]=(((r).lp_ud_field[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access LP_UD_FIELD.
 *
 */
#define BCMI_QSGMII_SERDES_READ_LP_UD_FIELDr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_LP_UD_FIELDr,(_r._lp_ud_field))
#define BCMI_QSGMII_SERDES_WRITE_LP_UD_FIELDr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_LP_UD_FIELDr,(_r._lp_ud_field))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define LP_UD_FIELDr BCMI_QSGMII_SERDES_LP_UD_FIELDr
#define LP_UD_FIELDr_SIZE BCMI_QSGMII_SERDES_LP_UD_FIELDr_SIZE
typedef BCMI_QSGMII_SERDES_LP_UD_FIELDr_t LP_UD_FIELDr_t;
#define LP_UD_FIELDr_CLR BCMI_QSGMII_SERDES_LP_UD_FIELDr_CLR
#define LP_UD_FIELDr_SET BCMI_QSGMII_SERDES_LP_UD_FIELDr_SET
#define LP_UD_FIELDr_GET BCMI_QSGMII_SERDES_LP_UD_FIELDr_GET
#define LP_UD_FIELDr_LP_UD_FIELDf_GET BCMI_QSGMII_SERDES_LP_UD_FIELDr_LP_UD_FIELDf_GET
#define LP_UD_FIELDr_LP_UD_FIELDf_SET BCMI_QSGMII_SERDES_LP_UD_FIELDr_LP_UD_FIELDf_SET
#define READ_LP_UD_FIELDr BCMI_QSGMII_SERDES_READ_LP_UD_FIELDr
#define WRITE_LP_UD_FIELDr BCMI_QSGMII_SERDES_WRITE_LP_UD_FIELDr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_LP_UD_FIELDr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  SGMII_BASEPAGE
 * BLOCKS:   BAM_NEXT_PAGE
 * REGADDR:  0x835c
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     SGMII_BASEPAGE_11_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr (0x0000835c | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SIZE 4

/*
 * This structure should be used to declare and program SGMII_BASEPAGE.
 *
 */
typedef union BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_s {
	uint32_t v[1];
	uint32_t sgmii_basepage[1];
	uint32_t _sgmii_basepage;
} BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_t;

#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_CLR(r) (r).sgmii_basepage[0] = 0
#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SET(r,d) (r).sgmii_basepage[0] = d
#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_GET(r) (r).sgmii_basepage[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_GET(r) (((r).sgmii_basepage[0]) & 0xfff)
#define BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_SET(r,f) (r).sgmii_basepage[0]=(((r).sgmii_basepage[0] & ~((uint32_t)0xfff)) | (((uint32_t)f) & 0xfff))

/*
 * These macros can be used to access SGMII_BASEPAGE.
 *
 */
#define BCMI_QSGMII_SERDES_READ_SGMII_BASEPAGEr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_SGMII_BASEPAGEr,(_r._sgmii_basepage))
#define BCMI_QSGMII_SERDES_WRITE_SGMII_BASEPAGEr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_SGMII_BASEPAGEr,(_r._sgmii_basepage))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define SGMII_BASEPAGEr BCMI_QSGMII_SERDES_SGMII_BASEPAGEr
#define SGMII_BASEPAGEr_SIZE BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SIZE
typedef BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_t SGMII_BASEPAGEr_t;
#define SGMII_BASEPAGEr_CLR BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_CLR
#define SGMII_BASEPAGEr_SET BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SET
#define SGMII_BASEPAGEr_GET BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_GET
#define SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_GET BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_GET
#define SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_SET BCMI_QSGMII_SERDES_SGMII_BASEPAGEr_SGMII_BASEPAGE_11_0f_SET
#define READ_SGMII_BASEPAGEr BCMI_QSGMII_SERDES_READ_SGMII_BASEPAGEr
#define WRITE_SGMII_BASEPAGEr BCMI_QSGMII_SERDES_WRITE_SGMII_BASEPAGEr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_SGMII_BASEPAGEr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_UCTRL1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8370
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     FORCE_CL73_TX_OMUX_EN 
 *     CL73_USTAT1_MUXSEL 
 *     COUPLE_W_CL37_RESTART 
 *     COUPLE_W_CL73_RESTART 
 *     COUPLE_W_CL73_RESTART_WO_LINK_FAIL 
 *     CL73_NONCE_MATCH_VAL 
 *     CL73_NONCE_MATCH_OVER 
 *     LINKFAILTIMERQUAL_EN 
 *     LINKFAILTIMER_DIS 
 *     LONGPARDETTIMER_DIS 
 *     CL73_ALLOWCL37AN 
 *     CL73_PARDET_DIS  
 *     CL73_LOSSOFSYNCFAIL_EN 
 *     TXDISABLEBAM_EN_VAL 
 *     TXDISABLEBAM_EN_OVER 
 *     CL73_FAST_TIMERS 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r (0x00008370 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_UCTRL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_UCTRL1r_s {
	uint32_t v[1];
	uint32_t cl73_uctrl1[1];
	uint32_t _cl73_uctrl1;
} BCMI_QSGMII_SERDES_CL73_UCTRL1r_t;

#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CLR(r) (r).cl73_uctrl1[0] = 0
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_SET(r,d) (r).cl73_uctrl1[0] = d
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_GET(r) (r).cl73_uctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_FAST_TIMERSf_GET(r) ((((r).cl73_uctrl1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_FAST_TIMERSf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_GET(r) ((((r).cl73_uctrl1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_GET(r) ((((r).cl73_uctrl1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET(r) ((((r).cl73_uctrl1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_PARDET_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_PARDET_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET(r) ((((r).cl73_uctrl1[0]) >> 10) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 10)) | ((((uint32_t)f) & 0x1) << 10))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMER_DISf_GET(r) ((((r).cl73_uctrl1[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMER_DISf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET(r) ((((r).cl73_uctrl1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET(r) ((((r).cl73_uctrl1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET(r) ((((r).cl73_uctrl1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET(r) ((((r).cl73_uctrl1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET(r) ((((r).cl73_uctrl1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET(r) ((((r).cl73_uctrl1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET(r) ((((r).cl73_uctrl1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET(r) (((r).cl73_uctrl1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET(r,f) (r).cl73_uctrl1[0]=(((r).cl73_uctrl1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_UCTRL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_UCTRL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_UCTRL1r,(_r._cl73_uctrl1))
#define BCMI_QSGMII_SERDES_WRITE_CL73_UCTRL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_UCTRL1r,(_r._cl73_uctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_UCTRL1r BCMI_QSGMII_SERDES_CL73_UCTRL1r
#define CL73_UCTRL1r_SIZE BCMI_QSGMII_SERDES_CL73_UCTRL1r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_UCTRL1r_t CL73_UCTRL1r_t;
#define CL73_UCTRL1r_CLR BCMI_QSGMII_SERDES_CL73_UCTRL1r_CLR
#define CL73_UCTRL1r_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_SET
#define CL73_UCTRL1r_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_GET
#define CL73_UCTRL1r_CL73_FAST_TIMERSf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_FAST_TIMERSf_GET
#define CL73_UCTRL1r_CL73_FAST_TIMERSf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_FAST_TIMERSf_SET
#define CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_GET
#define CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_OVERf_SET
#define CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_GET
#define CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_TXDISABLEBAM_EN_VALf_SET
#define CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_GET
#define CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_LOSSOFSYNCFAIL_ENf_SET
#define CL73_UCTRL1r_CL73_PARDET_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_PARDET_DISf_GET
#define CL73_UCTRL1r_CL73_PARDET_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_PARDET_DISf_SET
#define CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_ALLOWCL37ANf_GET
#define CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_ALLOWCL37ANf_SET
#define CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LONGPARDETTIMER_DISf_GET
#define CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LONGPARDETTIMER_DISf_SET
#define CL73_UCTRL1r_LINKFAILTIMER_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMER_DISf_GET
#define CL73_UCTRL1r_LINKFAILTIMER_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMER_DISf_SET
#define CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_GET
#define CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_LINKFAILTIMERQUAL_ENf_SET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_GET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_OVERf_SET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_GET
#define CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_NONCE_MATCH_VALf_SET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_GET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTART_WO_LINK_FAILf_SET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_GET
#define CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL73_RESTARTf_SET
#define CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_GET
#define CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_COUPLE_W_CL37_RESTARTf_SET
#define CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_GET
#define CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_CL73_USTAT1_MUXSELf_SET
#define CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET BCMI_QSGMII_SERDES_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_GET
#define CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET BCMI_QSGMII_SERDES_CL73_UCTRL1r_FORCE_CL73_TX_OMUX_ENf_SET
#define READ_CL73_UCTRL1r BCMI_QSGMII_SERDES_READ_CL73_UCTRL1r
#define WRITE_CL73_UCTRL1r BCMI_QSGMII_SERDES_WRITE_CL73_UCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_UCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_USTAT1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8371
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ARB_FSM_9_0      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_USTAT1r (0x00008371 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_USTAT1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_USTAT1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_USTAT1r_s {
	uint32_t v[1];
	uint32_t cl73_ustat1[1];
	uint32_t _cl73_ustat1;
} BCMI_QSGMII_SERDES_CL73_USTAT1r_t;

#define BCMI_QSGMII_SERDES_CL73_USTAT1r_CLR(r) (r).cl73_ustat1[0] = 0
#define BCMI_QSGMII_SERDES_CL73_USTAT1r_SET(r,d) (r).cl73_ustat1[0] = d
#define BCMI_QSGMII_SERDES_CL73_USTAT1r_GET(r) (r).cl73_ustat1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_USTAT1r_ARB_FSM_9_0f_GET(r) (((r).cl73_ustat1[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_CL73_USTAT1r_ARB_FSM_9_0f_SET(r,f) (r).cl73_ustat1[0]=(((r).cl73_ustat1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_USTAT1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_USTAT1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_USTAT1r,(_r._cl73_ustat1))
#define BCMI_QSGMII_SERDES_WRITE_CL73_USTAT1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_USTAT1r,(_r._cl73_ustat1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_USTAT1r BCMI_QSGMII_SERDES_CL73_USTAT1r
#define CL73_USTAT1r_SIZE BCMI_QSGMII_SERDES_CL73_USTAT1r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_USTAT1r_t CL73_USTAT1r_t;
#define CL73_USTAT1r_CLR BCMI_QSGMII_SERDES_CL73_USTAT1r_CLR
#define CL73_USTAT1r_SET BCMI_QSGMII_SERDES_CL73_USTAT1r_SET
#define CL73_USTAT1r_GET BCMI_QSGMII_SERDES_CL73_USTAT1r_GET
#define CL73_USTAT1r_ARB_FSM_9_0f_GET BCMI_QSGMII_SERDES_CL73_USTAT1r_ARB_FSM_9_0f_GET
#define CL73_USTAT1r_ARB_FSM_9_0f_SET BCMI_QSGMII_SERDES_CL73_USTAT1r_ARB_FSM_9_0f_SET
#define READ_CL73_USTAT1r BCMI_QSGMII_SERDES_READ_CL73_USTAT1r
#define WRITE_CL73_USTAT1r BCMI_QSGMII_SERDES_WRITE_CL73_USTAT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_USTAT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMCTRL1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8372
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     UD_CODE_FIELD_41_32 
 *     CL73_BAM_TEST_MP5_HALT_STEP 
 *     CL73_BAM_TEST_MP5_HALT_EN 
 *     CL73_BAMNP_AFTER_BP_EN 
 *     CL73_BAM_STATION_MNGR_EN 
 *     CL73_BAMEN       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r (0x00008372 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl1[1];
	uint32_t _cl73_bamctrl1;
} BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CLR(r) (r).cl73_bamctrl1[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_SET(r,d) (r).cl73_bamctrl1[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_GET(r) (r).cl73_bamctrl1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET(r) ((((r).cl73_bamctrl1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET(r) ((((r).cl73_bamctrl1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_GET(r) (((r).cl73_bamctrl1[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_SET(r,f) (r).cl73_bamctrl1[0]=(((r).cl73_bamctrl1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_BAMCTRL1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL1r,(_r._cl73_bamctrl1))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL1r,(_r._cl73_bamctrl1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL1r BCMI_QSGMII_SERDES_CL73_BAMCTRL1r
#define CL73_BAMCTRL1r_SIZE BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_t CL73_BAMCTRL1r_t;
#define CL73_BAMCTRL1r_CLR BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CLR
#define CL73_BAMCTRL1r_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_SET
#define CL73_BAMCTRL1r_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_GET
#define CL73_BAMCTRL1r_CL73_BAMENf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMENf_GET
#define CL73_BAMCTRL1r_CL73_BAMENf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_STATION_MNGR_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAMNP_AFTER_BP_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_GET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_ENf_SET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_GET
#define CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_CL73_BAM_TEST_MP5_HALT_STEPf_SET
#define CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_GET
#define CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL1r_UD_CODE_FIELD_41_32f_SET
#define READ_CL73_BAMCTRL1r BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL1r
#define WRITE_CL73_BAMCTRL1r BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMCTRL1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMCTRL2
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8373
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     UD_CODE_FIELD_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r (0x00008373 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl2[1];
	uint32_t _cl73_bamctrl2;
} BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_CLR(r) (r).cl73_bamctrl2[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_SET(r,d) (r).cl73_bamctrl2[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_GET(r) (r).cl73_bamctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_GET(r) (((r).cl73_bamctrl2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_SET(r,f) (r).cl73_bamctrl2[0]=(((r).cl73_bamctrl2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMCTRL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL2r,(_r._cl73_bamctrl2))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL2r,(_r._cl73_bamctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL2r BCMI_QSGMII_SERDES_CL73_BAMCTRL2r
#define CL73_BAMCTRL2r_SIZE BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_t CL73_BAMCTRL2r_t;
#define CL73_BAMCTRL2r_CLR BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_CLR
#define CL73_BAMCTRL2r_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_SET
#define CL73_BAMCTRL2r_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_GET
#define CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_GET
#define CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL2r_UD_CODE_FIELD_31_16f_SET
#define READ_CL73_BAMCTRL2r BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL2r
#define WRITE_CL73_BAMCTRL2r BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMCTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMCTRL3
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8374
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     USECL73_HCD_MR   
 *     UD_CODE_FIELD_15_1 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r (0x00008374 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMCTRL3.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_s {
	uint32_t v[1];
	uint32_t cl73_bamctrl3[1];
	uint32_t _cl73_bamctrl3;
} BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_CLR(r) (r).cl73_bamctrl3[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_SET(r,d) (r).cl73_bamctrl3[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_GET(r) (r).cl73_bamctrl3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_GET(r) ((((r).cl73_bamctrl3[0]) >> 1) & 0x7fff)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_SET(r,f) (r).cl73_bamctrl3[0]=(((r).cl73_bamctrl3[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_USECL73_HCD_MRf_GET(r) (((r).cl73_bamctrl3[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_USECL73_HCD_MRf_SET(r,f) (r).cl73_bamctrl3[0]=(((r).cl73_bamctrl3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_BAMCTRL3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL3r,(_r._cl73_bamctrl3))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMCTRL3r,(_r._cl73_bamctrl3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMCTRL3r BCMI_QSGMII_SERDES_CL73_BAMCTRL3r
#define CL73_BAMCTRL3r_SIZE BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_t CL73_BAMCTRL3r_t;
#define CL73_BAMCTRL3r_CLR BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_CLR
#define CL73_BAMCTRL3r_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_SET
#define CL73_BAMCTRL3r_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_GET
#define CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_GET
#define CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_UD_CODE_FIELD_15_1f_SET
#define CL73_BAMCTRL3r_USECL73_HCD_MRf_GET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_USECL73_HCD_MRf_GET
#define CL73_BAMCTRL3r_USECL73_HCD_MRf_SET BCMI_QSGMII_SERDES_CL73_BAMCTRL3r_USECL73_HCD_MRf_SET
#define READ_CL73_BAMCTRL3r BCMI_QSGMII_SERDES_READ_CL73_BAMCTRL3r
#define WRITE_CL73_BAMCTRL3r BCMI_QSGMII_SERDES_WRITE_CL73_BAMCTRL3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMCTRL3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMSTAT1
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8375
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_UD_CODE_FIELD_41_32 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r (0x00008375 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT1.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat1[1];
	uint32_t _cl73_bamstat1;
} BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_CLR(r) (r).cl73_bamstat1[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_SET(r,d) (r).cl73_bamstat1[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_GET(r) (r).cl73_bamstat1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_GET(r) (((r).cl73_bamstat1[0]) & 0x3ff)
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_SET(r,f) (r).cl73_bamstat1[0]=(((r).cl73_bamstat1[0] & ~((uint32_t)0x3ff)) | (((uint32_t)f) & 0x3ff))

/*
 * These macros can be used to access CL73_BAMSTAT1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT1r,(_r._cl73_bamstat1))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT1r,(_r._cl73_bamstat1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT1r BCMI_QSGMII_SERDES_CL73_BAMSTAT1r
#define CL73_BAMSTAT1r_SIZE BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_t CL73_BAMSTAT1r_t;
#define CL73_BAMSTAT1r_CLR BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_CLR
#define CL73_BAMSTAT1r_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_SET
#define CL73_BAMSTAT1r_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_GET
#define CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_GET
#define CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT1r_LP_UD_CODE_FIELD_41_32f_SET
#define READ_CL73_BAMSTAT1r BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT1r
#define WRITE_CL73_BAMSTAT1r BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMSTAT1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMSTAT2
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8376
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_UD_CODE_FIELD_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r (0x00008376 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT2.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat2[1];
	uint32_t _cl73_bamstat2;
} BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_CLR(r) (r).cl73_bamstat2[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_SET(r,d) (r).cl73_bamstat2[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_GET(r) (r).cl73_bamstat2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_GET(r) (((r).cl73_bamstat2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_SET(r,f) (r).cl73_bamstat2[0]=(((r).cl73_bamstat2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_BAMSTAT2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT2r,(_r._cl73_bamstat2))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT2r,(_r._cl73_bamstat2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT2r BCMI_QSGMII_SERDES_CL73_BAMSTAT2r
#define CL73_BAMSTAT2r_SIZE BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_t CL73_BAMSTAT2r_t;
#define CL73_BAMSTAT2r_CLR BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_CLR
#define CL73_BAMSTAT2r_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_SET
#define CL73_BAMSTAT2r_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_GET
#define CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_GET
#define CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT2r_LP_UD_CODE_FIELD_31_16f_SET
#define READ_CL73_BAMSTAT2r BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT2r
#define WRITE_CL73_BAMSTAT2r BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMSTAT2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_BAMSTAT3
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8377
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     USECL73_HCD_LP   
 *     LP_UD_CODE_FIELD_15_1 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r (0x00008377 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_SIZE 4

/*
 * This structure should be used to declare and program CL73_BAMSTAT3.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_s {
	uint32_t v[1];
	uint32_t cl73_bamstat3[1];
	uint32_t _cl73_bamstat3;
} BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_t;

#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_CLR(r) (r).cl73_bamstat3[0] = 0
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_SET(r,d) (r).cl73_bamstat3[0] = d
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_GET(r) (r).cl73_bamstat3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_GET(r) ((((r).cl73_bamstat3[0]) >> 1) & 0x7fff)
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_SET(r,f) (r).cl73_bamstat3[0]=(((r).cl73_bamstat3[0] & ~((uint32_t)0x7fff << 1)) | ((((uint32_t)f) & 0x7fff) << 1))
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_USECL73_HCD_LPf_GET(r) (((r).cl73_bamstat3[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_USECL73_HCD_LPf_SET(r,f) (r).cl73_bamstat3[0]=(((r).cl73_bamstat3[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_BAMSTAT3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT3r,(_r._cl73_bamstat3))
#define BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_BAMSTAT3r,(_r._cl73_bamstat3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_BAMSTAT3r BCMI_QSGMII_SERDES_CL73_BAMSTAT3r
#define CL73_BAMSTAT3r_SIZE BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_t CL73_BAMSTAT3r_t;
#define CL73_BAMSTAT3r_CLR BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_CLR
#define CL73_BAMSTAT3r_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_SET
#define CL73_BAMSTAT3r_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_GET
#define CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_GET
#define CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_LP_UD_CODE_FIELD_15_1f_SET
#define CL73_BAMSTAT3r_USECL73_HCD_LPf_GET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_USECL73_HCD_LPf_GET
#define CL73_BAMSTAT3r_USECL73_HCD_LPf_SET BCMI_QSGMII_SERDES_CL73_BAMSTAT3r_USECL73_HCD_LPf_SET
#define READ_CL73_BAMSTAT3r BCMI_QSGMII_SERDES_READ_CL73_BAMSTAT3r
#define WRITE_CL73_BAMSTAT3r BCMI_QSGMII_SERDES_WRITE_CL73_BAMSTAT3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_BAMSTAT3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_UCTRL2
 * BLOCKS:   CL73_USERB0
 * REGADDR:  0x8378
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     HOLD_LP_ABILITY  
 *     CONFIG_MATCH_DIS 
 *     AN_GOOD_CHECK_BAM37_DIS 
 *     SIGDET_TIMER_DIS 
 *     CL73_BAMSTAT123_SEL 
 *     CL73_RECORD_2NP_AFTER_BP_EN 
 *     CL73_SUPPRESS_MR_PAGE_RX_DIS 
 *     RX_DME_STATUS_SEL 
 *     USELINK          
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r (0x00008378 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIZE 4

/*
 * This structure should be used to declare and program CL73_UCTRL2.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_UCTRL2r_s {
	uint32_t v[1];
	uint32_t cl73_uctrl2[1];
	uint32_t _cl73_uctrl2;
} BCMI_QSGMII_SERDES_CL73_UCTRL2r_t;

#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CLR(r) (r).cl73_uctrl2[0] = 0
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_SET(r,d) (r).cl73_uctrl2[0] = d
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_GET(r) (r).cl73_uctrl2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_USELINKf_GET(r) ((((r).cl73_uctrl2[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_USELINKf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_RX_DME_STATUS_SELf_GET(r) ((((r).cl73_uctrl2[0]) >> 9) & 0x3)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_RX_DME_STATUS_SELf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x3 << 9)) | ((((uint32_t)f) & 0x3) << 9))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_GET(r) ((((r).cl73_uctrl2[0]) >> 8) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 8)) | ((((uint32_t)f) & 0x1) << 8))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_GET(r) ((((r).cl73_uctrl2[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_BAMSTAT123_SELf_GET(r) ((((r).cl73_uctrl2[0]) >> 4) & 0x7)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_BAMSTAT123_SELf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x7 << 4)) | ((((uint32_t)f) & 0x7) << 4))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIGDET_TIMER_DISf_GET(r) ((((r).cl73_uctrl2[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIGDET_TIMER_DISf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_GET(r) ((((r).cl73_uctrl2[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CONFIG_MATCH_DISf_GET(r) ((((r).cl73_uctrl2[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_CONFIG_MATCH_DISf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_HOLD_LP_ABILITYf_GET(r) (((r).cl73_uctrl2[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_UCTRL2r_HOLD_LP_ABILITYf_SET(r,f) (r).cl73_uctrl2[0]=(((r).cl73_uctrl2[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_UCTRL2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_UCTRL2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_UCTRL2r,(_r._cl73_uctrl2))
#define BCMI_QSGMII_SERDES_WRITE_CL73_UCTRL2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_UCTRL2r,(_r._cl73_uctrl2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_UCTRL2r BCMI_QSGMII_SERDES_CL73_UCTRL2r
#define CL73_UCTRL2r_SIZE BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIZE
typedef BCMI_QSGMII_SERDES_CL73_UCTRL2r_t CL73_UCTRL2r_t;
#define CL73_UCTRL2r_CLR BCMI_QSGMII_SERDES_CL73_UCTRL2r_CLR
#define CL73_UCTRL2r_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_SET
#define CL73_UCTRL2r_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_GET
#define CL73_UCTRL2r_USELINKf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_USELINKf_GET
#define CL73_UCTRL2r_USELINKf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_USELINKf_SET
#define CL73_UCTRL2r_RX_DME_STATUS_SELf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_RX_DME_STATUS_SELf_GET
#define CL73_UCTRL2r_RX_DME_STATUS_SELf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_RX_DME_STATUS_SELf_SET
#define CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_GET
#define CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_SUPPRESS_MR_PAGE_RX_DISf_SET
#define CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_GET
#define CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_RECORD_2NP_AFTER_BP_ENf_SET
#define CL73_UCTRL2r_CL73_BAMSTAT123_SELf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_BAMSTAT123_SELf_GET
#define CL73_UCTRL2r_CL73_BAMSTAT123_SELf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CL73_BAMSTAT123_SELf_SET
#define CL73_UCTRL2r_SIGDET_TIMER_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIGDET_TIMER_DISf_GET
#define CL73_UCTRL2r_SIGDET_TIMER_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_SIGDET_TIMER_DISf_SET
#define CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_GET
#define CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_AN_GOOD_CHECK_BAM37_DISf_SET
#define CL73_UCTRL2r_CONFIG_MATCH_DISf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CONFIG_MATCH_DISf_GET
#define CL73_UCTRL2r_CONFIG_MATCH_DISf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_CONFIG_MATCH_DISf_SET
#define CL73_UCTRL2r_HOLD_LP_ABILITYf_GET BCMI_QSGMII_SERDES_CL73_UCTRL2r_HOLD_LP_ABILITYf_GET
#define CL73_UCTRL2r_HOLD_LP_ABILITYf_SET BCMI_QSGMII_SERDES_CL73_UCTRL2r_HOLD_LP_ABILITYf_SET
#define READ_CL73_UCTRL2r BCMI_QSGMII_SERDES_READ_CL73_UCTRL2r
#define WRITE_CL73_UCTRL2r BCMI_QSGMII_SERDES_WRITE_CL73_UCTRL2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_UCTRL2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  EEEUSERB0CL36_TX_LPI_SM
 * BLOCKS:   EEEUSERB0
 * REGADDR:  0x8391
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     TX_LPI_IND       
 *     TX_LPI_RCVD      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr (0x00008391 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_SIZE 4

/*
 * This structure should be used to declare and program EEEUSERB0CL36_TX_LPI_SM.
 *
 */
typedef union BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_s {
	uint32_t v[1];
	uint32_t eeeuserb0cl36_tx_lpi_sm[1];
	uint32_t _eeeuserb0cl36_tx_lpi_sm;
} BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_t;

#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_CLR(r) (r).eeeuserb0cl36_tx_lpi_sm[0] = 0
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_SET(r,d) (r).eeeuserb0cl36_tx_lpi_sm[0] = d
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_GET(r) (r).eeeuserb0cl36_tx_lpi_sm[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_GET(r) ((((r).eeeuserb0cl36_tx_lpi_sm[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_SET(r,f) (r).eeeuserb0cl36_tx_lpi_sm[0]=(((r).eeeuserb0cl36_tx_lpi_sm[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_GET(r) ((((r).eeeuserb0cl36_tx_lpi_sm[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_SET(r,f) (r).eeeuserb0cl36_tx_lpi_sm[0]=(((r).eeeuserb0cl36_tx_lpi_sm[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))

/*
 * These macros can be used to access EEEUSERB0CL36_TX_LPI_SM.
 *
 */
#define BCMI_QSGMII_SERDES_READ_EEEUSERB0CL36_TX_LPI_SMr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr,(_r._eeeuserb0cl36_tx_lpi_sm))
#define BCMI_QSGMII_SERDES_WRITE_EEEUSERB0CL36_TX_LPI_SMr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr,(_r._eeeuserb0cl36_tx_lpi_sm))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define EEEUSERB0CL36_TX_LPI_SMr BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr
#define EEEUSERB0CL36_TX_LPI_SMr_SIZE BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_SIZE
typedef BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_t EEEUSERB0CL36_TX_LPI_SMr_t;
#define EEEUSERB0CL36_TX_LPI_SMr_CLR BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_CLR
#define EEEUSERB0CL36_TX_LPI_SMr_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_SET
#define EEEUSERB0CL36_TX_LPI_SMr_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_GET
#define EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_GET
#define EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_RCVDf_SET
#define EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_GET
#define EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr_TX_LPI_INDf_SET
#define READ_EEEUSERB0CL36_TX_LPI_SMr BCMI_QSGMII_SERDES_READ_EEEUSERB0CL36_TX_LPI_SMr
#define WRITE_EEEUSERB0CL36_TX_LPI_SMr BCMI_QSGMII_SERDES_WRITE_EEEUSERB0CL36_TX_LPI_SMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_EEEUSERB0CL36_TX_LPI_SMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  EEEUSERB0CL36_RX_LPI_SM
 * BLOCKS:   EEEUSERB0
 * REGADDR:  0x8392
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     RX_LPI_IND       
 *     RX_LPI_RCVD      
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr (0x00008392 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_SIZE 4

/*
 * This structure should be used to declare and program EEEUSERB0CL36_RX_LPI_SM.
 *
 */
typedef union BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_s {
	uint32_t v[1];
	uint32_t eeeuserb0cl36_rx_lpi_sm[1];
	uint32_t _eeeuserb0cl36_rx_lpi_sm;
} BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_t;

#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_CLR(r) (r).eeeuserb0cl36_rx_lpi_sm[0] = 0
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_SET(r,d) (r).eeeuserb0cl36_rx_lpi_sm[0] = d
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_GET(r) (r).eeeuserb0cl36_rx_lpi_sm[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_GET(r) ((((r).eeeuserb0cl36_rx_lpi_sm[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_SET(r,f) (r).eeeuserb0cl36_rx_lpi_sm[0]=(((r).eeeuserb0cl36_rx_lpi_sm[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_GET(r) ((((r).eeeuserb0cl36_rx_lpi_sm[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_SET(r,f) (r).eeeuserb0cl36_rx_lpi_sm[0]=(((r).eeeuserb0cl36_rx_lpi_sm[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))

/*
 * These macros can be used to access EEEUSERB0CL36_RX_LPI_SM.
 *
 */
#define BCMI_QSGMII_SERDES_READ_EEEUSERB0CL36_RX_LPI_SMr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr,(_r._eeeuserb0cl36_rx_lpi_sm))
#define BCMI_QSGMII_SERDES_WRITE_EEEUSERB0CL36_RX_LPI_SMr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr,(_r._eeeuserb0cl36_rx_lpi_sm))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define EEEUSERB0CL36_RX_LPI_SMr BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr
#define EEEUSERB0CL36_RX_LPI_SMr_SIZE BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_SIZE
typedef BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_t EEEUSERB0CL36_RX_LPI_SMr_t;
#define EEEUSERB0CL36_RX_LPI_SMr_CLR BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_CLR
#define EEEUSERB0CL36_RX_LPI_SMr_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_SET
#define EEEUSERB0CL36_RX_LPI_SMr_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_GET
#define EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_GET
#define EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_RCVDf_SET
#define EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_GET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_GET
#define EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_SET BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr_RX_LPI_INDf_SET
#define READ_EEEUSERB0CL36_RX_LPI_SMr BCMI_QSGMII_SERDES_READ_EEEUSERB0CL36_RX_LPI_SMr
#define WRITE_EEEUSERB0CL36_RX_LPI_SMr BCMI_QSGMII_SERDES_WRITE_EEEUSERB0CL36_RX_LPI_SMr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_EEEUSERB0CL36_RX_LPI_SMr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AER
 * BLOCKS:   AER_BLOCK
 * REGADDR:  0xffde
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     ADDRESS_EXTENSION_REGISTER 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AERr (0x0000ffde | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AERr_SIZE 4

/*
 * This structure should be used to declare and program AER.
 *
 */
typedef union BCMI_QSGMII_SERDES_AERr_s {
	uint32_t v[1];
	uint32_t aer[1];
	uint32_t _aer;
} BCMI_QSGMII_SERDES_AERr_t;

#define BCMI_QSGMII_SERDES_AERr_CLR(r) (r).aer[0] = 0
#define BCMI_QSGMII_SERDES_AERr_SET(r,d) (r).aer[0] = d
#define BCMI_QSGMII_SERDES_AERr_GET(r) (r).aer[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AERr_ADDRESS_EXTENSION_REGISTERf_GET(r) (((r).aer[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AERr_ADDRESS_EXTENSION_REGISTERf_SET(r,f) (r).aer[0]=(((r).aer[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AER.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AERr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AERr,(_r._aer))
#define BCMI_QSGMII_SERDES_WRITE_AERr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AERr,(_r._aer))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AERr BCMI_QSGMII_SERDES_AERr
#define AERr_SIZE BCMI_QSGMII_SERDES_AERr_SIZE
typedef BCMI_QSGMII_SERDES_AERr_t AERr_t;
#define AERr_CLR BCMI_QSGMII_SERDES_AERr_CLR
#define AERr_SET BCMI_QSGMII_SERDES_AERr_SET
#define AERr_GET BCMI_QSGMII_SERDES_AERr_GET
#define AERr_ADDRESS_EXTENSION_REGISTERf_GET BCMI_QSGMII_SERDES_AERr_ADDRESS_EXTENSION_REGISTERf_GET
#define AERr_ADDRESS_EXTENSION_REGISTERf_SET BCMI_QSGMII_SERDES_AERr_ADDRESS_EXTENSION_REGISTERf_SET
#define READ_AERr BCMI_QSGMII_SERDES_READ_AERr
#define WRITE_AERr BCMI_QSGMII_SERDES_WRITE_AERr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AERr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_ADV1
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0010
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_SEL_FIELD     
 *     LD_ECHOED_NONCE  
 *     LD_PAUSE_FIELD   
 *     LD_REMOTE_FAULT  
 *     LD_ACKNOLWEDGE   
 *     LD_NEXT_PAGE     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_ADV1r (0x00070010 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_ADV1r_SIZE 4

/*
 * This structure should be used to declare and program AN_ADV1.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_ADV1r_s {
	uint32_t v[1];
	uint32_t an_adv1[1];
	uint32_t _an_adv1;
} BCMI_QSGMII_SERDES_AN_ADV1r_t;

#define BCMI_QSGMII_SERDES_AN_ADV1r_CLR(r) (r).an_adv1[0] = 0
#define BCMI_QSGMII_SERDES_AN_ADV1r_SET(r,d) (r).an_adv1[0] = d
#define BCMI_QSGMII_SERDES_AN_ADV1r_GET(r) (r).an_adv1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_NEXT_PAGEf_GET(r) ((((r).an_adv1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_NEXT_PAGEf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_ACKNOLWEDGEf_GET(r) ((((r).an_adv1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_ACKNOLWEDGEf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_REMOTE_FAULTf_GET(r) ((((r).an_adv1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_REMOTE_FAULTf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_PAUSE_FIELDf_GET(r) ((((r).an_adv1[0]) >> 10) & 0x7)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_PAUSE_FIELDf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_ECHOED_NONCEf_GET(r) ((((r).an_adv1[0]) >> 5) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_ECHOED_NONCEf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_SEL_FIELDf_GET(r) (((r).an_adv1[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_ADV1r_LD_SEL_FIELDf_SET(r,f) (r).an_adv1[0]=(((r).an_adv1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_ADV1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_ADV1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_ADV1r,(_r._an_adv1))
#define BCMI_QSGMII_SERDES_WRITE_AN_ADV1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_ADV1r,(_r._an_adv1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_ADV1r BCMI_QSGMII_SERDES_AN_ADV1r
#define AN_ADV1r_SIZE BCMI_QSGMII_SERDES_AN_ADV1r_SIZE
typedef BCMI_QSGMII_SERDES_AN_ADV1r_t AN_ADV1r_t;
#define AN_ADV1r_CLR BCMI_QSGMII_SERDES_AN_ADV1r_CLR
#define AN_ADV1r_SET BCMI_QSGMII_SERDES_AN_ADV1r_SET
#define AN_ADV1r_GET BCMI_QSGMII_SERDES_AN_ADV1r_GET
#define AN_ADV1r_LD_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_NEXT_PAGEf_GET
#define AN_ADV1r_LD_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_NEXT_PAGEf_SET
#define AN_ADV1r_LD_ACKNOLWEDGEf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_ACKNOLWEDGEf_GET
#define AN_ADV1r_LD_ACKNOLWEDGEf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_ACKNOLWEDGEf_SET
#define AN_ADV1r_LD_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_REMOTE_FAULTf_GET
#define AN_ADV1r_LD_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_REMOTE_FAULTf_SET
#define AN_ADV1r_LD_PAUSE_FIELDf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_PAUSE_FIELDf_GET
#define AN_ADV1r_LD_PAUSE_FIELDf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_PAUSE_FIELDf_SET
#define AN_ADV1r_LD_ECHOED_NONCEf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_ECHOED_NONCEf_GET
#define AN_ADV1r_LD_ECHOED_NONCEf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_ECHOED_NONCEf_SET
#define AN_ADV1r_LD_SEL_FIELDf_GET BCMI_QSGMII_SERDES_AN_ADV1r_LD_SEL_FIELDf_GET
#define AN_ADV1r_LD_SEL_FIELDf_SET BCMI_QSGMII_SERDES_AN_ADV1r_LD_SEL_FIELDf_SET
#define READ_AN_ADV1r BCMI_QSGMII_SERDES_READ_AN_ADV1r
#define WRITE_AN_ADV1r BCMI_QSGMII_SERDES_WRITE_AN_ADV1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_ADV1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_ADV2
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0011
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_TX_NONCE      
 *     LD_TECH_ABILITY_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_ADV2r (0x00070011 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_ADV2r_SIZE 4

/*
 * This structure should be used to declare and program AN_ADV2.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_ADV2r_s {
	uint32_t v[1];
	uint32_t an_adv2[1];
	uint32_t _an_adv2;
} BCMI_QSGMII_SERDES_AN_ADV2r_t;

#define BCMI_QSGMII_SERDES_AN_ADV2r_CLR(r) (r).an_adv2[0] = 0
#define BCMI_QSGMII_SERDES_AN_ADV2r_SET(r,d) (r).an_adv2[0] = d
#define BCMI_QSGMII_SERDES_AN_ADV2r_GET(r) (r).an_adv2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_ADV2r_LD_TECH_ABILITY_10_0f_GET(r) ((((r).an_adv2[0]) >> 5) & 0x7ff)
#define BCMI_QSGMII_SERDES_AN_ADV2r_LD_TECH_ABILITY_10_0f_SET(r,f) (r).an_adv2[0]=(((r).an_adv2[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_QSGMII_SERDES_AN_ADV2r_LD_TX_NONCEf_GET(r) (((r).an_adv2[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_ADV2r_LD_TX_NONCEf_SET(r,f) (r).an_adv2[0]=(((r).an_adv2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_ADV2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_ADV2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_ADV2r,(_r._an_adv2))
#define BCMI_QSGMII_SERDES_WRITE_AN_ADV2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_ADV2r,(_r._an_adv2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_ADV2r BCMI_QSGMII_SERDES_AN_ADV2r
#define AN_ADV2r_SIZE BCMI_QSGMII_SERDES_AN_ADV2r_SIZE
typedef BCMI_QSGMII_SERDES_AN_ADV2r_t AN_ADV2r_t;
#define AN_ADV2r_CLR BCMI_QSGMII_SERDES_AN_ADV2r_CLR
#define AN_ADV2r_SET BCMI_QSGMII_SERDES_AN_ADV2r_SET
#define AN_ADV2r_GET BCMI_QSGMII_SERDES_AN_ADV2r_GET
#define AN_ADV2r_LD_TECH_ABILITY_10_0f_GET BCMI_QSGMII_SERDES_AN_ADV2r_LD_TECH_ABILITY_10_0f_GET
#define AN_ADV2r_LD_TECH_ABILITY_10_0f_SET BCMI_QSGMII_SERDES_AN_ADV2r_LD_TECH_ABILITY_10_0f_SET
#define AN_ADV2r_LD_TX_NONCEf_GET BCMI_QSGMII_SERDES_AN_ADV2r_LD_TX_NONCEf_GET
#define AN_ADV2r_LD_TX_NONCEf_SET BCMI_QSGMII_SERDES_AN_ADV2r_LD_TX_NONCEf_SET
#define READ_AN_ADV2r BCMI_QSGMII_SERDES_READ_AN_ADV2r
#define WRITE_AN_ADV2r BCMI_QSGMII_SERDES_WRITE_AN_ADV2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_ADV2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_ADV3
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0012
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_TECH_ABILITY_26_11 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_ADV3r (0x00070012 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_ADV3r_SIZE 4

/*
 * This structure should be used to declare and program AN_ADV3.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_ADV3r_s {
	uint32_t v[1];
	uint32_t an_adv3[1];
	uint32_t _an_adv3;
} BCMI_QSGMII_SERDES_AN_ADV3r_t;

#define BCMI_QSGMII_SERDES_AN_ADV3r_CLR(r) (r).an_adv3[0] = 0
#define BCMI_QSGMII_SERDES_AN_ADV3r_SET(r,d) (r).an_adv3[0] = d
#define BCMI_QSGMII_SERDES_AN_ADV3r_GET(r) (r).an_adv3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_ADV3r_LD_TECH_ABILITY_26_11f_GET(r) (((r).an_adv3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_ADV3r_LD_TECH_ABILITY_26_11f_SET(r,f) (r).an_adv3[0]=(((r).an_adv3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_ADV3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_ADV3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_ADV3r,(_r._an_adv3))
#define BCMI_QSGMII_SERDES_WRITE_AN_ADV3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_ADV3r,(_r._an_adv3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_ADV3r BCMI_QSGMII_SERDES_AN_ADV3r
#define AN_ADV3r_SIZE BCMI_QSGMII_SERDES_AN_ADV3r_SIZE
typedef BCMI_QSGMII_SERDES_AN_ADV3r_t AN_ADV3r_t;
#define AN_ADV3r_CLR BCMI_QSGMII_SERDES_AN_ADV3r_CLR
#define AN_ADV3r_SET BCMI_QSGMII_SERDES_AN_ADV3r_SET
#define AN_ADV3r_GET BCMI_QSGMII_SERDES_AN_ADV3r_GET
#define AN_ADV3r_LD_TECH_ABILITY_26_11f_GET BCMI_QSGMII_SERDES_AN_ADV3r_LD_TECH_ABILITY_26_11f_GET
#define AN_ADV3r_LD_TECH_ABILITY_26_11f_SET BCMI_QSGMII_SERDES_AN_ADV3r_LD_TECH_ABILITY_26_11f_SET
#define READ_AN_ADV3r BCMI_QSGMII_SERDES_READ_AN_ADV3r
#define WRITE_AN_ADV3r BCMI_QSGMII_SERDES_WRITE_AN_ADV3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_ADV3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_ADV1
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0013
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_SEL_FIELD     
 *     LP_ECHOED_NONCE  
 *     LP_PAUSE_FIELD   
 *     LP_REMOTE_FAULT  
 *     LP_ACKNOLWEDGE   
 *     LP_NEXT_PAGE     
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r (0x00070013 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_ADV1.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_ADV1r_s {
	uint32_t v[1];
	uint32_t an_lp_adv1[1];
	uint32_t _an_lp_adv1;
} BCMI_QSGMII_SERDES_AN_LP_ADV1r_t;

#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_CLR(r) (r).an_lp_adv1[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_SET(r,d) (r).an_lp_adv1[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_GET(r) (r).an_lp_adv1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_NEXT_PAGEf_GET(r) ((((r).an_lp_adv1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_NEXT_PAGEf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ACKNOLWEDGEf_GET(r) ((((r).an_lp_adv1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ACKNOLWEDGEf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_REMOTE_FAULTf_GET(r) ((((r).an_lp_adv1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_REMOTE_FAULTf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_PAUSE_FIELDf_GET(r) ((((r).an_lp_adv1[0]) >> 10) & 0x7)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_PAUSE_FIELDf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x7 << 10)) | ((((uint32_t)f) & 0x7) << 10))
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ECHOED_NONCEf_GET(r) ((((r).an_lp_adv1[0]) >> 5) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ECHOED_NONCEf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x1f << 5)) | ((((uint32_t)f) & 0x1f) << 5))
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_SEL_FIELDf_GET(r) (((r).an_lp_adv1[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_SEL_FIELDf_SET(r,f) (r).an_lp_adv1[0]=(((r).an_lp_adv1[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_LP_ADV1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_ADV1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV1r,(_r._an_lp_adv1))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV1r,(_r._an_lp_adv1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_ADV1r BCMI_QSGMII_SERDES_AN_LP_ADV1r
#define AN_LP_ADV1r_SIZE BCMI_QSGMII_SERDES_AN_LP_ADV1r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_ADV1r_t AN_LP_ADV1r_t;
#define AN_LP_ADV1r_CLR BCMI_QSGMII_SERDES_AN_LP_ADV1r_CLR
#define AN_LP_ADV1r_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_SET
#define AN_LP_ADV1r_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_GET
#define AN_LP_ADV1r_LP_NEXT_PAGEf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_NEXT_PAGEf_GET
#define AN_LP_ADV1r_LP_NEXT_PAGEf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_NEXT_PAGEf_SET
#define AN_LP_ADV1r_LP_ACKNOLWEDGEf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ACKNOLWEDGEf_GET
#define AN_LP_ADV1r_LP_ACKNOLWEDGEf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ACKNOLWEDGEf_SET
#define AN_LP_ADV1r_LP_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_REMOTE_FAULTf_GET
#define AN_LP_ADV1r_LP_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_REMOTE_FAULTf_SET
#define AN_LP_ADV1r_LP_PAUSE_FIELDf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_PAUSE_FIELDf_GET
#define AN_LP_ADV1r_LP_PAUSE_FIELDf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_PAUSE_FIELDf_SET
#define AN_LP_ADV1r_LP_ECHOED_NONCEf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ECHOED_NONCEf_GET
#define AN_LP_ADV1r_LP_ECHOED_NONCEf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_ECHOED_NONCEf_SET
#define AN_LP_ADV1r_LP_SEL_FIELDf_GET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_SEL_FIELDf_GET
#define AN_LP_ADV1r_LP_SEL_FIELDf_SET BCMI_QSGMII_SERDES_AN_LP_ADV1r_LP_SEL_FIELDf_SET
#define READ_AN_LP_ADV1r BCMI_QSGMII_SERDES_READ_AN_LP_ADV1r
#define WRITE_AN_LP_ADV1r BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_ADV1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_ADV2
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0014
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_TX_NONCE      
 *     LP_TECH_ABILITY_10_0 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r (0x00070014 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_ADV2.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_ADV2r_s {
	uint32_t v[1];
	uint32_t an_lp_adv2[1];
	uint32_t _an_lp_adv2;
} BCMI_QSGMII_SERDES_AN_LP_ADV2r_t;

#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_CLR(r) (r).an_lp_adv2[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_SET(r,d) (r).an_lp_adv2[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_GET(r) (r).an_lp_adv2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_GET(r) ((((r).an_lp_adv2[0]) >> 5) & 0x7ff)
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_SET(r,f) (r).an_lp_adv2[0]=(((r).an_lp_adv2[0] & ~((uint32_t)0x7ff << 5)) | ((((uint32_t)f) & 0x7ff) << 5))
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TX_NONCEf_GET(r) (((r).an_lp_adv2[0]) & 0x1f)
#define BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TX_NONCEf_SET(r,f) (r).an_lp_adv2[0]=(((r).an_lp_adv2[0] & ~((uint32_t)0x1f)) | (((uint32_t)f) & 0x1f))

/*
 * These macros can be used to access AN_LP_ADV2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_ADV2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV2r,(_r._an_lp_adv2))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV2r,(_r._an_lp_adv2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_ADV2r BCMI_QSGMII_SERDES_AN_LP_ADV2r
#define AN_LP_ADV2r_SIZE BCMI_QSGMII_SERDES_AN_LP_ADV2r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_ADV2r_t AN_LP_ADV2r_t;
#define AN_LP_ADV2r_CLR BCMI_QSGMII_SERDES_AN_LP_ADV2r_CLR
#define AN_LP_ADV2r_SET BCMI_QSGMII_SERDES_AN_LP_ADV2r_SET
#define AN_LP_ADV2r_GET BCMI_QSGMII_SERDES_AN_LP_ADV2r_GET
#define AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_GET BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_GET
#define AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_SET BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TECH_ABILITY_10_0f_SET
#define AN_LP_ADV2r_LP_TX_NONCEf_GET BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TX_NONCEf_GET
#define AN_LP_ADV2r_LP_TX_NONCEf_SET BCMI_QSGMII_SERDES_AN_LP_ADV2r_LP_TX_NONCEf_SET
#define READ_AN_LP_ADV2r BCMI_QSGMII_SERDES_READ_AN_LP_ADV2r
#define WRITE_AN_LP_ADV2r BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_ADV2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_NP1
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0016
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_NP_MSG_CODE_FIELD 
 *     LD_NP_TOGGLE     
 *     LD_NP_ACK2       
 *     LD_NP_MP         
 *     LD_NP_ACK        
 *     LD_NP_NP         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_NP1r (0x00070016 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_NP1r_SIZE 4

/*
 * This structure should be used to declare and program AN_NP1.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_NP1r_s {
	uint32_t v[1];
	uint32_t an_np1[1];
	uint32_t _an_np1;
} BCMI_QSGMII_SERDES_AN_NP1r_t;

#define BCMI_QSGMII_SERDES_AN_NP1r_CLR(r) (r).an_np1[0] = 0
#define BCMI_QSGMII_SERDES_AN_NP1r_SET(r,d) (r).an_np1[0] = d
#define BCMI_QSGMII_SERDES_AN_NP1r_GET(r) (r).an_np1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_NPf_GET(r) ((((r).an_np1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_NPf_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACKf_GET(r) ((((r).an_np1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACKf_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MPf_GET(r) ((((r).an_np1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MPf_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACK2f_GET(r) ((((r).an_np1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACK2f_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_TOGGLEf_GET(r) ((((r).an_np1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_TOGGLEf_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MSG_CODE_FIELDf_GET(r) (((r).an_np1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MSG_CODE_FIELDf_SET(r,f) (r).an_np1[0]=(((r).an_np1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_NP1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_NP1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_NP1r,(_r._an_np1))
#define BCMI_QSGMII_SERDES_WRITE_AN_NP1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_NP1r,(_r._an_np1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_NP1r BCMI_QSGMII_SERDES_AN_NP1r
#define AN_NP1r_SIZE BCMI_QSGMII_SERDES_AN_NP1r_SIZE
typedef BCMI_QSGMII_SERDES_AN_NP1r_t AN_NP1r_t;
#define AN_NP1r_CLR BCMI_QSGMII_SERDES_AN_NP1r_CLR
#define AN_NP1r_SET BCMI_QSGMII_SERDES_AN_NP1r_SET
#define AN_NP1r_GET BCMI_QSGMII_SERDES_AN_NP1r_GET
#define AN_NP1r_LD_NP_NPf_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_NPf_GET
#define AN_NP1r_LD_NP_NPf_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_NPf_SET
#define AN_NP1r_LD_NP_ACKf_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACKf_GET
#define AN_NP1r_LD_NP_ACKf_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACKf_SET
#define AN_NP1r_LD_NP_MPf_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MPf_GET
#define AN_NP1r_LD_NP_MPf_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MPf_SET
#define AN_NP1r_LD_NP_ACK2f_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACK2f_GET
#define AN_NP1r_LD_NP_ACK2f_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_ACK2f_SET
#define AN_NP1r_LD_NP_TOGGLEf_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_TOGGLEf_GET
#define AN_NP1r_LD_NP_TOGGLEf_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_TOGGLEf_SET
#define AN_NP1r_LD_NP_MSG_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MSG_CODE_FIELDf_GET
#define AN_NP1r_LD_NP_MSG_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AN_NP1r_LD_NP_MSG_CODE_FIELDf_SET
#define READ_AN_NP1r BCMI_QSGMII_SERDES_READ_AN_NP1r
#define WRITE_AN_NP1r BCMI_QSGMII_SERDES_WRITE_AN_NP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_NP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_NP2
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0017
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_NP_UNF_CODE_FIELD 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_NP2r (0x00070017 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_NP2r_SIZE 4

/*
 * This structure should be used to declare and program AN_NP2.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_NP2r_s {
	uint32_t v[1];
	uint32_t an_np2[1];
	uint32_t _an_np2;
} BCMI_QSGMII_SERDES_AN_NP2r_t;

#define BCMI_QSGMII_SERDES_AN_NP2r_CLR(r) (r).an_np2[0] = 0
#define BCMI_QSGMII_SERDES_AN_NP2r_SET(r,d) (r).an_np2[0] = d
#define BCMI_QSGMII_SERDES_AN_NP2r_GET(r) (r).an_np2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_NP2r_LD_NP_UNF_CODE_FIELDf_GET(r) (((r).an_np2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_NP2r_LD_NP_UNF_CODE_FIELDf_SET(r,f) (r).an_np2[0]=(((r).an_np2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_NP2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_NP2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_NP2r,(_r._an_np2))
#define BCMI_QSGMII_SERDES_WRITE_AN_NP2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_NP2r,(_r._an_np2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_NP2r BCMI_QSGMII_SERDES_AN_NP2r
#define AN_NP2r_SIZE BCMI_QSGMII_SERDES_AN_NP2r_SIZE
typedef BCMI_QSGMII_SERDES_AN_NP2r_t AN_NP2r_t;
#define AN_NP2r_CLR BCMI_QSGMII_SERDES_AN_NP2r_CLR
#define AN_NP2r_SET BCMI_QSGMII_SERDES_AN_NP2r_SET
#define AN_NP2r_GET BCMI_QSGMII_SERDES_AN_NP2r_GET
#define AN_NP2r_LD_NP_UNF_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AN_NP2r_LD_NP_UNF_CODE_FIELDf_GET
#define AN_NP2r_LD_NP_UNF_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AN_NP2r_LD_NP_UNF_CODE_FIELDf_SET
#define READ_AN_NP2r BCMI_QSGMII_SERDES_READ_AN_NP2r
#define WRITE_AN_NP2r BCMI_QSGMII_SERDES_WRITE_AN_NP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_NP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_NP3
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0018
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LD_NP_UNF_CODE_FIELD_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_NP3r (0x07001018 | PHY_REG_ACC_BRCM_SHADOW)

#define BCMI_QSGMII_SERDES_AN_NP3r_SIZE 4

/*
 * This structure should be used to declare and program AN_NP3.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_NP3r_s {
	uint32_t v[1];
	uint32_t an_np3[1];
	uint32_t _an_np3;
} BCMI_QSGMII_SERDES_AN_NP3r_t;

#define BCMI_QSGMII_SERDES_AN_NP3r_CLR(r) (r).an_np3[0] = 0
#define BCMI_QSGMII_SERDES_AN_NP3r_SET(r,d) (r).an_np3[0] = d
#define BCMI_QSGMII_SERDES_AN_NP3r_GET(r) (r).an_np3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_GET(r) (((r).an_np3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_SET(r,f) (r).an_np3[0]=(((r).an_np3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_NP3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_NP3r(_pc,_r) phy_brcm_shadow_read(_pc,BCMI_QSGMII_SERDES_AN_NP3r,(_r._an_np3))
#define BCMI_QSGMII_SERDES_WRITE_AN_NP3r(_pc,_r) phy_brcm_shadow_write(_pc,BCMI_QSGMII_SERDES_AN_NP3r,(_r._an_np3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_NP3r BCMI_QSGMII_SERDES_AN_NP3r
#define AN_NP3r_SIZE BCMI_QSGMII_SERDES_AN_NP3r_SIZE
typedef BCMI_QSGMII_SERDES_AN_NP3r_t AN_NP3r_t;
#define AN_NP3r_CLR BCMI_QSGMII_SERDES_AN_NP3r_CLR
#define AN_NP3r_SET BCMI_QSGMII_SERDES_AN_NP3r_SET
#define AN_NP3r_GET BCMI_QSGMII_SERDES_AN_NP3r_GET
#define AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_GET BCMI_QSGMII_SERDES_AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_GET
#define AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_SET BCMI_QSGMII_SERDES_AN_NP3r_LD_NP_UNF_CODE_FIELD_31_16f_SET
#define READ_AN_NP3r BCMI_QSGMII_SERDES_READ_AN_NP3r
#define WRITE_AN_NP3r BCMI_QSGMII_SERDES_WRITE_AN_NP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_NP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_NP1
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0019
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NP_MSG_CODE_FIELD 
 *     LP_NP_TOGGLE     
 *     LP_NP_ACK2       
 *     LP_NP_MP         
 *     LP_NP_ACK        
 *     LP_NP_NP         
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_NP1r (0x00070019 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_LP_NP1r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_NP1.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_NP1r_s {
	uint32_t v[1];
	uint32_t an_lp_np1[1];
	uint32_t _an_lp_np1;
} BCMI_QSGMII_SERDES_AN_LP_NP1r_t;

#define BCMI_QSGMII_SERDES_AN_LP_NP1r_CLR(r) (r).an_lp_np1[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_SET(r,d) (r).an_lp_np1[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_GET(r) (r).an_lp_np1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_NPf_GET(r) ((((r).an_lp_np1[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_NPf_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACKf_GET(r) ((((r).an_lp_np1[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACKf_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MPf_GET(r) ((((r).an_lp_np1[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MPf_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACK2f_GET(r) ((((r).an_lp_np1[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACK2f_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_TOGGLEf_GET(r) ((((r).an_lp_np1[0]) >> 11) & 0x1)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_TOGGLEf_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x1 << 11)) | ((((uint32_t)f) & 0x1) << 11))
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_GET(r) (((r).an_lp_np1[0]) & 0x7ff)
#define BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_SET(r,f) (r).an_lp_np1[0]=(((r).an_lp_np1[0] & ~((uint32_t)0x7ff)) | (((uint32_t)f) & 0x7ff))

/*
 * These macros can be used to access AN_LP_NP1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_NP1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_LP_NP1r,(_r._an_lp_np1))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_NP1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_LP_NP1r,(_r._an_lp_np1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_NP1r BCMI_QSGMII_SERDES_AN_LP_NP1r
#define AN_LP_NP1r_SIZE BCMI_QSGMII_SERDES_AN_LP_NP1r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_NP1r_t AN_LP_NP1r_t;
#define AN_LP_NP1r_CLR BCMI_QSGMII_SERDES_AN_LP_NP1r_CLR
#define AN_LP_NP1r_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_SET
#define AN_LP_NP1r_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_GET
#define AN_LP_NP1r_LP_NP_NPf_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_NPf_GET
#define AN_LP_NP1r_LP_NP_NPf_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_NPf_SET
#define AN_LP_NP1r_LP_NP_ACKf_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACKf_GET
#define AN_LP_NP1r_LP_NP_ACKf_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACKf_SET
#define AN_LP_NP1r_LP_NP_MPf_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MPf_GET
#define AN_LP_NP1r_LP_NP_MPf_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MPf_SET
#define AN_LP_NP1r_LP_NP_ACK2f_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACK2f_GET
#define AN_LP_NP1r_LP_NP_ACK2f_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_ACK2f_SET
#define AN_LP_NP1r_LP_NP_TOGGLEf_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_TOGGLEf_GET
#define AN_LP_NP1r_LP_NP_TOGGLEf_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_TOGGLEf_SET
#define AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_GET
#define AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AN_LP_NP1r_LP_NP_MSG_CODE_FIELDf_SET
#define READ_AN_LP_NP1r BCMI_QSGMII_SERDES_READ_AN_LP_NP1r
#define WRITE_AN_LP_NP1r BCMI_QSGMII_SERDES_WRITE_AN_LP_NP1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_NP1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_NP2
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x001a
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NP_UNF_CODE_FIELD 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_NP2r (0x0007001a | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_LP_NP2r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_NP2.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_NP2r_s {
	uint32_t v[1];
	uint32_t an_lp_np2[1];
	uint32_t _an_lp_np2;
} BCMI_QSGMII_SERDES_AN_LP_NP2r_t;

#define BCMI_QSGMII_SERDES_AN_LP_NP2r_CLR(r) (r).an_lp_np2[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_NP2r_SET(r,d) (r).an_lp_np2[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_NP2r_GET(r) (r).an_lp_np2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_GET(r) (((r).an_lp_np2[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_SET(r,f) (r).an_lp_np2[0]=(((r).an_lp_np2[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_NP2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_NP2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_LP_NP2r,(_r._an_lp_np2))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_NP2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_LP_NP2r,(_r._an_lp_np2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_NP2r BCMI_QSGMII_SERDES_AN_LP_NP2r
#define AN_LP_NP2r_SIZE BCMI_QSGMII_SERDES_AN_LP_NP2r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_NP2r_t AN_LP_NP2r_t;
#define AN_LP_NP2r_CLR BCMI_QSGMII_SERDES_AN_LP_NP2r_CLR
#define AN_LP_NP2r_SET BCMI_QSGMII_SERDES_AN_LP_NP2r_SET
#define AN_LP_NP2r_GET BCMI_QSGMII_SERDES_AN_LP_NP2r_GET
#define AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_GET BCMI_QSGMII_SERDES_AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_GET
#define AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_SET BCMI_QSGMII_SERDES_AN_LP_NP2r_LP_NP_UNF_CODE_FIELDf_SET
#define READ_AN_LP_NP2r BCMI_QSGMII_SERDES_READ_AN_LP_NP2r
#define WRITE_AN_LP_NP2r BCMI_QSGMII_SERDES_WRITE_AN_LP_NP2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_NP2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_NP3
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x001b
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_NP_UNF_CODE_FIELD_31_16 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_NP3r (0x0007001b | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_AN_LP_NP3r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_NP3.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_NP3r_s {
	uint32_t v[1];
	uint32_t an_lp_np3[1];
	uint32_t _an_lp_np3;
} BCMI_QSGMII_SERDES_AN_LP_NP3r_t;

#define BCMI_QSGMII_SERDES_AN_LP_NP3r_CLR(r) (r).an_lp_np3[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_NP3r_SET(r,d) (r).an_lp_np3[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_NP3r_GET(r) (r).an_lp_np3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_GET(r) (((r).an_lp_np3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_SET(r,f) (r).an_lp_np3[0]=(((r).an_lp_np3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_NP3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_NP3r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_AN_LP_NP3r,(_r._an_lp_np3))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_NP3r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_AN_LP_NP3r,(_r._an_lp_np3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_NP3r BCMI_QSGMII_SERDES_AN_LP_NP3r
#define AN_LP_NP3r_SIZE BCMI_QSGMII_SERDES_AN_LP_NP3r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_NP3r_t AN_LP_NP3r_t;
#define AN_LP_NP3r_CLR BCMI_QSGMII_SERDES_AN_LP_NP3r_CLR
#define AN_LP_NP3r_SET BCMI_QSGMII_SERDES_AN_LP_NP3r_SET
#define AN_LP_NP3r_GET BCMI_QSGMII_SERDES_AN_LP_NP3r_GET
#define AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_GET BCMI_QSGMII_SERDES_AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_GET
#define AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_SET BCMI_QSGMII_SERDES_AN_LP_NP3r_LP_NP_UNF_CODE_FIELD_31_16f_SET
#define READ_AN_LP_NP3r BCMI_QSGMII_SERDES_READ_AN_LP_NP3r
#define WRITE_AN_LP_NP3r BCMI_QSGMII_SERDES_WRITE_AN_LP_NP3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_NP3r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_AN_CONTROL
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8380
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     MR_RES_NEGOTIATION 
 *     MR_AUTONEG_EN    
 *     MR_MAIN_RESET    
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr (0x00078380 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_SIZE 4

/*
 * This structure should be used to declare and program CL73_AN_CONTROL.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_s {
	uint32_t v[1];
	uint32_t cl73_an_control[1];
	uint32_t _cl73_an_control;
} BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_t;

#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_CLR(r) (r).cl73_an_control[0] = 0
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_SET(r,d) (r).cl73_an_control[0] = d
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_GET(r) (r).cl73_an_control[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_MAIN_RESETf_GET(r) ((((r).cl73_an_control[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_MAIN_RESETf_SET(r,f) (r).cl73_an_control[0]=(((r).cl73_an_control[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_AUTONEG_ENf_GET(r) ((((r).cl73_an_control[0]) >> 12) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_AUTONEG_ENf_SET(r,f) (r).cl73_an_control[0]=(((r).cl73_an_control[0] & ~((uint32_t)0x1 << 12)) | ((((uint32_t)f) & 0x1) << 12))
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_GET(r) ((((r).cl73_an_control[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_SET(r,f) (r).cl73_an_control[0]=(((r).cl73_an_control[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))

/*
 * These macros can be used to access CL73_AN_CONTROL.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_AN_CONTROLr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_AN_CONTROLr,(_r._cl73_an_control))
#define BCMI_QSGMII_SERDES_WRITE_CL73_AN_CONTROLr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_AN_CONTROLr,(_r._cl73_an_control))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_AN_CONTROLr BCMI_QSGMII_SERDES_CL73_AN_CONTROLr
#define CL73_AN_CONTROLr_SIZE BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_SIZE
typedef BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_t CL73_AN_CONTROLr_t;
#define CL73_AN_CONTROLr_CLR BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_CLR
#define CL73_AN_CONTROLr_SET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_SET
#define CL73_AN_CONTROLr_GET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_GET
#define CL73_AN_CONTROLr_MR_MAIN_RESETf_GET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_MAIN_RESETf_GET
#define CL73_AN_CONTROLr_MR_MAIN_RESETf_SET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_MAIN_RESETf_SET
#define CL73_AN_CONTROLr_MR_AUTONEG_ENf_GET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_AUTONEG_ENf_GET
#define CL73_AN_CONTROLr_MR_AUTONEG_ENf_SET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_AUTONEG_ENf_SET
#define CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_GET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_GET
#define CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_SET BCMI_QSGMII_SERDES_CL73_AN_CONTROLr_MR_RES_NEGOTIATIONf_SET
#define READ_CL73_AN_CONTROLr BCMI_QSGMII_SERDES_READ_CL73_AN_CONTROLr
#define WRITE_CL73_AN_CONTROLr BCMI_QSGMII_SERDES_WRITE_CL73_AN_CONTROLr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_AN_CONTROLr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_AN_STATUS
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8381
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_AN_ABLE       
 *     LINK_STATUS      
 *     AN_ABILITY       
 *     REMOTE_FAULT     
 *     AN_COMPLETE      
 *     PAGE_RECEIVED    
 *     EXTENED_NP_STATUS 
 *     PARALLEL_DETECTION_FAULT 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr (0x00078381 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_SIZE 4

/*
 * This structure should be used to declare and program CL73_AN_STATUS.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_AN_STATUSr_s {
	uint32_t v[1];
	uint32_t cl73_an_status[1];
	uint32_t _cl73_an_status;
} BCMI_QSGMII_SERDES_CL73_AN_STATUSr_t;

#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_CLR(r) (r).cl73_an_status[0] = 0
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_SET(r,d) (r).cl73_an_status[0] = d
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_GET(r) (r).cl73_an_status[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_GET(r) ((((r).cl73_an_status[0]) >> 9) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 9)) | ((((uint32_t)f) & 0x1) << 9))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_EXTENED_NP_STATUSf_GET(r) ((((r).cl73_an_status[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_EXTENED_NP_STATUSf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PAGE_RECEIVEDf_GET(r) ((((r).cl73_an_status[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PAGE_RECEIVEDf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_COMPLETEf_GET(r) ((((r).cl73_an_status[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_COMPLETEf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_REMOTE_FAULTf_GET(r) ((((r).cl73_an_status[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_REMOTE_FAULTf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_ABILITYf_GET(r) ((((r).cl73_an_status[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_ABILITYf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LINK_STATUSf_GET(r) ((((r).cl73_an_status[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LINK_STATUSf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LP_AN_ABLEf_GET(r) (((r).cl73_an_status[0]) & 0x1)
#define BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LP_AN_ABLEf_SET(r,f) (r).cl73_an_status[0]=(((r).cl73_an_status[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access CL73_AN_STATUS.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_AN_STATUSr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_AN_STATUSr,(_r._cl73_an_status))
#define BCMI_QSGMII_SERDES_WRITE_CL73_AN_STATUSr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_AN_STATUSr,(_r._cl73_an_status))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_AN_STATUSr BCMI_QSGMII_SERDES_CL73_AN_STATUSr
#define CL73_AN_STATUSr_SIZE BCMI_QSGMII_SERDES_CL73_AN_STATUSr_SIZE
typedef BCMI_QSGMII_SERDES_CL73_AN_STATUSr_t CL73_AN_STATUSr_t;
#define CL73_AN_STATUSr_CLR BCMI_QSGMII_SERDES_CL73_AN_STATUSr_CLR
#define CL73_AN_STATUSr_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_SET
#define CL73_AN_STATUSr_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_GET
#define CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_GET
#define CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PARALLEL_DETECTION_FAULTf_SET
#define CL73_AN_STATUSr_EXTENED_NP_STATUSf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_EXTENED_NP_STATUSf_GET
#define CL73_AN_STATUSr_EXTENED_NP_STATUSf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_EXTENED_NP_STATUSf_SET
#define CL73_AN_STATUSr_PAGE_RECEIVEDf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PAGE_RECEIVEDf_GET
#define CL73_AN_STATUSr_PAGE_RECEIVEDf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_PAGE_RECEIVEDf_SET
#define CL73_AN_STATUSr_AN_COMPLETEf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_COMPLETEf_GET
#define CL73_AN_STATUSr_AN_COMPLETEf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_COMPLETEf_SET
#define CL73_AN_STATUSr_REMOTE_FAULTf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_REMOTE_FAULTf_GET
#define CL73_AN_STATUSr_REMOTE_FAULTf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_REMOTE_FAULTf_SET
#define CL73_AN_STATUSr_AN_ABILITYf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_ABILITYf_GET
#define CL73_AN_STATUSr_AN_ABILITYf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_AN_ABILITYf_SET
#define CL73_AN_STATUSr_LINK_STATUSf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LINK_STATUSf_GET
#define CL73_AN_STATUSr_LINK_STATUSf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LINK_STATUSf_SET
#define CL73_AN_STATUSr_LP_AN_ABLEf_GET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LP_AN_ABLEf_GET
#define CL73_AN_STATUSr_LP_AN_ABLEf_SET BCMI_QSGMII_SERDES_CL73_AN_STATUSr_LP_AN_ABLEf_SET
#define READ_CL73_AN_STATUSr BCMI_QSGMII_SERDES_READ_CL73_AN_STATUSr
#define WRITE_CL73_AN_STATUSr BCMI_QSGMII_SERDES_WRITE_CL73_AN_STATUSr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_AN_STATUSr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_PHYIDMSB
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8382
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     OUI              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr (0x00078382 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_SIZE 4

/*
 * This structure should be used to declare and program CL73_PHYIDMSB.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_s {
	uint32_t v[1];
	uint32_t cl73_phyidmsb[1];
	uint32_t _cl73_phyidmsb;
} BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_t;

#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_CLR(r) (r).cl73_phyidmsb[0] = 0
#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_SET(r,d) (r).cl73_phyidmsb[0] = d
#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_GET(r) (r).cl73_phyidmsb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_OUIf_GET(r) (((r).cl73_phyidmsb[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_OUIf_SET(r,f) (r).cl73_phyidmsb[0]=(((r).cl73_phyidmsb[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access CL73_PHYIDMSB.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_PHYIDMSBr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_PHYIDMSBr,(_r._cl73_phyidmsb))
#define BCMI_QSGMII_SERDES_WRITE_CL73_PHYIDMSBr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_PHYIDMSBr,(_r._cl73_phyidmsb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_PHYIDMSBr BCMI_QSGMII_SERDES_CL73_PHYIDMSBr
#define CL73_PHYIDMSBr_SIZE BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_SIZE
typedef BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_t CL73_PHYIDMSBr_t;
#define CL73_PHYIDMSBr_CLR BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_CLR
#define CL73_PHYIDMSBr_SET BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_SET
#define CL73_PHYIDMSBr_GET BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_GET
#define CL73_PHYIDMSBr_OUIf_GET BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_OUIf_GET
#define CL73_PHYIDMSBr_OUIf_SET BCMI_QSGMII_SERDES_CL73_PHYIDMSBr_OUIf_SET
#define READ_CL73_PHYIDMSBr BCMI_QSGMII_SERDES_READ_CL73_PHYIDMSBr
#define WRITE_CL73_PHYIDMSBr BCMI_QSGMII_SERDES_WRITE_CL73_PHYIDMSBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_PHYIDMSBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  CL73_PHYIDLSB
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8383
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     REVISION         
 *     MODEL            
 *     OUI              
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr (0x00078383 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_SIZE 4

/*
 * This structure should be used to declare and program CL73_PHYIDLSB.
 *
 */
typedef union BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_s {
	uint32_t v[1];
	uint32_t cl73_phyidlsb[1];
	uint32_t _cl73_phyidlsb;
} BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_t;

#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_CLR(r) (r).cl73_phyidlsb[0] = 0
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_SET(r,d) (r).cl73_phyidlsb[0] = d
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_GET(r) (r).cl73_phyidlsb[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_OUIf_GET(r) ((((r).cl73_phyidlsb[0]) >> 10) & 0x3f)
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_OUIf_SET(r,f) (r).cl73_phyidlsb[0]=(((r).cl73_phyidlsb[0] & ~((uint32_t)0x3f << 10)) | ((((uint32_t)f) & 0x3f) << 10))
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_MODELf_GET(r) ((((r).cl73_phyidlsb[0]) >> 4) & 0x3f)
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_MODELf_SET(r,f) (r).cl73_phyidlsb[0]=(((r).cl73_phyidlsb[0] & ~((uint32_t)0x3f << 4)) | ((((uint32_t)f) & 0x3f) << 4))
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_REVISIONf_GET(r) (((r).cl73_phyidlsb[0]) & 0xf)
#define BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_REVISIONf_SET(r,f) (r).cl73_phyidlsb[0]=(((r).cl73_phyidlsb[0] & ~((uint32_t)0xf)) | (((uint32_t)f) & 0xf))

/*
 * These macros can be used to access CL73_PHYIDLSB.
 *
 */
#define BCMI_QSGMII_SERDES_READ_CL73_PHYIDLSBr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_CL73_PHYIDLSBr,(_r._cl73_phyidlsb))
#define BCMI_QSGMII_SERDES_WRITE_CL73_PHYIDLSBr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_CL73_PHYIDLSBr,(_r._cl73_phyidlsb))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define CL73_PHYIDLSBr BCMI_QSGMII_SERDES_CL73_PHYIDLSBr
#define CL73_PHYIDLSBr_SIZE BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_SIZE
typedef BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_t CL73_PHYIDLSBr_t;
#define CL73_PHYIDLSBr_CLR BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_CLR
#define CL73_PHYIDLSBr_SET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_SET
#define CL73_PHYIDLSBr_GET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_GET
#define CL73_PHYIDLSBr_OUIf_GET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_OUIf_GET
#define CL73_PHYIDLSBr_OUIf_SET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_OUIf_SET
#define CL73_PHYIDLSBr_MODELf_GET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_MODELf_GET
#define CL73_PHYIDLSBr_MODELf_SET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_MODELf_SET
#define CL73_PHYIDLSBr_REVISIONf_GET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_REVISIONf_GET
#define CL73_PHYIDLSBr_REVISIONf_SET BCMI_QSGMII_SERDES_CL73_PHYIDLSBr_REVISIONf_SET
#define READ_CL73_PHYIDLSBr BCMI_QSGMII_SERDES_READ_CL73_PHYIDLSBr
#define WRITE_CL73_PHYIDLSBr BCMI_QSGMII_SERDES_WRITE_CL73_PHYIDLSBr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_CL73_PHYIDLSBr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  IEEEDEVINPKG1
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8385
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CLAUSE22_PRESENT 
 *     PMD_PMA_PRESENT  
 *     WIS_PRESENT      
 *     PCS_PRESENT      
 *     PHY_XS_PRESENT   
 *     DTE_XS_PRESENT   
 *     TC_PRESENT       
 *     AN_PRESENT       
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r (0x00078385 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_SIZE 4

/*
 * This structure should be used to declare and program IEEEDEVINPKG1.
 *
 */
typedef union BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_s {
	uint32_t v[1];
	uint32_t ieeedevinpkg1[1];
	uint32_t _ieeedevinpkg1;
} BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_t;

#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLR(r) (r).ieeedevinpkg1[0] = 0
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_SET(r,d) (r).ieeedevinpkg1[0] = d
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_GET(r) (r).ieeedevinpkg1[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_AN_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 7) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_AN_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 7)) | ((((uint32_t)f) & 0x1) << 7))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_TC_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 6) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_TC_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 6)) | ((((uint32_t)f) & 0x1) << 6))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_DTE_XS_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 5) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_DTE_XS_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 5)) | ((((uint32_t)f) & 0x1) << 5))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PHY_XS_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 4) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PHY_XS_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 4)) | ((((uint32_t)f) & 0x1) << 4))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PCS_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PCS_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_WIS_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_WIS_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PMD_PMA_PRESENTf_GET(r) ((((r).ieeedevinpkg1[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PMD_PMA_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLAUSE22_PRESENTf_GET(r) (((r).ieeedevinpkg1[0]) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLAUSE22_PRESENTf_SET(r,f) (r).ieeedevinpkg1[0]=(((r).ieeedevinpkg1[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access IEEEDEVINPKG1.
 *
 */
#define BCMI_QSGMII_SERDES_READ_IEEEDEVINPKG1r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_IEEEDEVINPKG1r,(_r._ieeedevinpkg1))
#define BCMI_QSGMII_SERDES_WRITE_IEEEDEVINPKG1r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_IEEEDEVINPKG1r,(_r._ieeedevinpkg1))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEEDEVINPKG1r BCMI_QSGMII_SERDES_IEEEDEVINPKG1r
#define IEEEDEVINPKG1r_SIZE BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_SIZE
typedef BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_t IEEEDEVINPKG1r_t;
#define IEEEDEVINPKG1r_CLR BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLR
#define IEEEDEVINPKG1r_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_SET
#define IEEEDEVINPKG1r_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_GET
#define IEEEDEVINPKG1r_AN_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_AN_PRESENTf_GET
#define IEEEDEVINPKG1r_AN_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_AN_PRESENTf_SET
#define IEEEDEVINPKG1r_TC_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_TC_PRESENTf_GET
#define IEEEDEVINPKG1r_TC_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_TC_PRESENTf_SET
#define IEEEDEVINPKG1r_DTE_XS_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_DTE_XS_PRESENTf_GET
#define IEEEDEVINPKG1r_DTE_XS_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_DTE_XS_PRESENTf_SET
#define IEEEDEVINPKG1r_PHY_XS_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PHY_XS_PRESENTf_GET
#define IEEEDEVINPKG1r_PHY_XS_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PHY_XS_PRESENTf_SET
#define IEEEDEVINPKG1r_PCS_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PCS_PRESENTf_GET
#define IEEEDEVINPKG1r_PCS_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PCS_PRESENTf_SET
#define IEEEDEVINPKG1r_WIS_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_WIS_PRESENTf_GET
#define IEEEDEVINPKG1r_WIS_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_WIS_PRESENTf_SET
#define IEEEDEVINPKG1r_PMD_PMA_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PMD_PMA_PRESENTf_GET
#define IEEEDEVINPKG1r_PMD_PMA_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_PMD_PMA_PRESENTf_SET
#define IEEEDEVINPKG1r_CLAUSE22_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLAUSE22_PRESENTf_GET
#define IEEEDEVINPKG1r_CLAUSE22_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG1r_CLAUSE22_PRESENTf_SET
#define READ_IEEEDEVINPKG1r BCMI_QSGMII_SERDES_READ_IEEEDEVINPKG1r
#define WRITE_IEEEDEVINPKG1r BCMI_QSGMII_SERDES_WRITE_IEEEDEVINPKG1r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_IEEEDEVINPKG1r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  IEEEDEVINPKG2
 * BLOCKS:   CL73_IEEE0
 * REGADDR:  0x8386
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     CL22_EXTENSION_PRESENT 
 *     VENDOR_SPEC_DEV1 
 *     VENDOR_SPEC_DEV2 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r (0x00078386 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_SIZE 4

/*
 * This structure should be used to declare and program IEEEDEVINPKG2.
 *
 */
typedef union BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_s {
	uint32_t v[1];
	uint32_t ieeedevinpkg2[1];
	uint32_t _ieeedevinpkg2;
} BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_t;

#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CLR(r) (r).ieeedevinpkg2[0] = 0
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_SET(r,d) (r).ieeedevinpkg2[0] = d
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_GET(r) (r).ieeedevinpkg2[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_GET(r) ((((r).ieeedevinpkg2[0]) >> 15) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_SET(r,f) (r).ieeedevinpkg2[0]=(((r).ieeedevinpkg2[0] & ~((uint32_t)0x1 << 15)) | ((((uint32_t)f) & 0x1) << 15))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_GET(r) ((((r).ieeedevinpkg2[0]) >> 14) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_SET(r,f) (r).ieeedevinpkg2[0]=(((r).ieeedevinpkg2[0] & ~((uint32_t)0x1 << 14)) | ((((uint32_t)f) & 0x1) << 14))
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_GET(r) ((((r).ieeedevinpkg2[0]) >> 13) & 0x1)
#define BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_SET(r,f) (r).ieeedevinpkg2[0]=(((r).ieeedevinpkg2[0] & ~((uint32_t)0x1 << 13)) | ((((uint32_t)f) & 0x1) << 13))

/*
 * These macros can be used to access IEEEDEVINPKG2.
 *
 */
#define BCMI_QSGMII_SERDES_READ_IEEEDEVINPKG2r(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_IEEEDEVINPKG2r,(_r._ieeedevinpkg2))
#define BCMI_QSGMII_SERDES_WRITE_IEEEDEVINPKG2r(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_IEEEDEVINPKG2r,(_r._ieeedevinpkg2))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define IEEEDEVINPKG2r BCMI_QSGMII_SERDES_IEEEDEVINPKG2r
#define IEEEDEVINPKG2r_SIZE BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_SIZE
typedef BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_t IEEEDEVINPKG2r_t;
#define IEEEDEVINPKG2r_CLR BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CLR
#define IEEEDEVINPKG2r_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_SET
#define IEEEDEVINPKG2r_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_GET
#define IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_GET
#define IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV2f_SET
#define IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_GET
#define IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_VENDOR_SPEC_DEV1f_SET
#define IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_GET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_GET
#define IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_SET BCMI_QSGMII_SERDES_IEEEDEVINPKG2r_CL22_EXTENSION_PRESENTf_SET
#define READ_IEEEDEVINPKG2r BCMI_QSGMII_SERDES_READ_IEEEDEVINPKG2r
#define WRITE_IEEEDEVINPKG2r BCMI_QSGMII_SERDES_WRITE_IEEEDEVINPKG2r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_IEEEDEVINPKG2r'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  BPETHER_STAT
 * BLOCKS:   CL73_IEEE3
 * REGADDR:  0x83a0
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     BP_AN_ABILITY    
 *     CAP_1000BASE_KX  
 *     CAP_10GBASE_KX4  
 *     CAP_10GBASE_KR   
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_BPETHER_STATr (0x000783a0 | PHY_REG_ACC_AER_IBLK)

#define BCMI_QSGMII_SERDES_BPETHER_STATr_SIZE 4

/*
 * This structure should be used to declare and program BPETHER_STAT.
 *
 */
typedef union BCMI_QSGMII_SERDES_BPETHER_STATr_s {
	uint32_t v[1];
	uint32_t bpether_stat[1];
	uint32_t _bpether_stat;
} BCMI_QSGMII_SERDES_BPETHER_STATr_t;

#define BCMI_QSGMII_SERDES_BPETHER_STATr_CLR(r) (r).bpether_stat[0] = 0
#define BCMI_QSGMII_SERDES_BPETHER_STATr_SET(r,d) (r).bpether_stat[0] = d
#define BCMI_QSGMII_SERDES_BPETHER_STATr_GET(r) (r).bpether_stat[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KRf_GET(r) ((((r).bpether_stat[0]) >> 3) & 0x1)
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KRf_SET(r,f) (r).bpether_stat[0]=(((r).bpether_stat[0] & ~((uint32_t)0x1 << 3)) | ((((uint32_t)f) & 0x1) << 3))
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KX4f_GET(r) ((((r).bpether_stat[0]) >> 2) & 0x1)
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KX4f_SET(r,f) (r).bpether_stat[0]=(((r).bpether_stat[0] & ~((uint32_t)0x1 << 2)) | ((((uint32_t)f) & 0x1) << 2))
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_1000BASE_KXf_GET(r) ((((r).bpether_stat[0]) >> 1) & 0x1)
#define BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_1000BASE_KXf_SET(r,f) (r).bpether_stat[0]=(((r).bpether_stat[0] & ~((uint32_t)0x1 << 1)) | ((((uint32_t)f) & 0x1) << 1))
#define BCMI_QSGMII_SERDES_BPETHER_STATr_BP_AN_ABILITYf_GET(r) (((r).bpether_stat[0]) & 0x1)
#define BCMI_QSGMII_SERDES_BPETHER_STATr_BP_AN_ABILITYf_SET(r,f) (r).bpether_stat[0]=(((r).bpether_stat[0] & ~((uint32_t)0x1)) | (((uint32_t)f) & 0x1))

/*
 * These macros can be used to access BPETHER_STAT.
 *
 */
#define BCMI_QSGMII_SERDES_READ_BPETHER_STATr(_pc,_r) phy_aer_iblk_read(_pc,BCMI_QSGMII_SERDES_BPETHER_STATr,(_r._bpether_stat))
#define BCMI_QSGMII_SERDES_WRITE_BPETHER_STATr(_pc,_r) phy_aer_iblk_write(_pc,BCMI_QSGMII_SERDES_BPETHER_STATr,(_r._bpether_stat))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define BPETHER_STATr BCMI_QSGMII_SERDES_BPETHER_STATr
#define BPETHER_STATr_SIZE BCMI_QSGMII_SERDES_BPETHER_STATr_SIZE
typedef BCMI_QSGMII_SERDES_BPETHER_STATr_t BPETHER_STATr_t;
#define BPETHER_STATr_CLR BCMI_QSGMII_SERDES_BPETHER_STATr_CLR
#define BPETHER_STATr_SET BCMI_QSGMII_SERDES_BPETHER_STATr_SET
#define BPETHER_STATr_GET BCMI_QSGMII_SERDES_BPETHER_STATr_GET
#define BPETHER_STATr_CAP_10GBASE_KRf_GET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KRf_GET
#define BPETHER_STATr_CAP_10GBASE_KRf_SET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KRf_SET
#define BPETHER_STATr_CAP_10GBASE_KX4f_GET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KX4f_GET
#define BPETHER_STATr_CAP_10GBASE_KX4f_SET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_10GBASE_KX4f_SET
#define BPETHER_STATr_CAP_1000BASE_KXf_GET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_1000BASE_KXf_GET
#define BPETHER_STATr_CAP_1000BASE_KXf_SET BCMI_QSGMII_SERDES_BPETHER_STATr_CAP_1000BASE_KXf_SET
#define BPETHER_STATr_BP_AN_ABILITYf_GET BCMI_QSGMII_SERDES_BPETHER_STATr_BP_AN_ABILITYf_GET
#define BPETHER_STATr_BP_AN_ABILITYf_SET BCMI_QSGMII_SERDES_BPETHER_STATr_BP_AN_ABILITYf_SET
#define READ_BPETHER_STATr BCMI_QSGMII_SERDES_READ_BPETHER_STATr
#define WRITE_BPETHER_STATr BCMI_QSGMII_SERDES_WRITE_BPETHER_STATr

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_BPETHER_STATr'
 ******************************************************************************/




/*******************************************************************************
 * CHIP:  BCMI_QSGMII_SERDES
 * REGISTER:  AN_LP_ADV3
 * BLOCKS:   CL73_IEEE1
 * REGADDR:  0x0015
 * DEVAD:    7
 * DESC:     
 * SIZE:     32
 * FIELDS:
 *     LP_TECH_ABILITY_26_11 
 *
 ******************************************************************************/
#define BCMI_QSGMII_SERDES_AN_LP_ADV3r (0x00001015 | PHY_REG_ACC_BRCM_SHADOW)

#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_SIZE 4

/*
 * This structure should be used to declare and program AN_LP_ADV3.
 *
 */
typedef union BCMI_QSGMII_SERDES_AN_LP_ADV3r_s {
	uint32_t v[1];
	uint32_t an_lp_adv3[1];
	uint32_t _an_lp_adv3;
} BCMI_QSGMII_SERDES_AN_LP_ADV3r_t;

#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_CLR(r) (r).an_lp_adv3[0] = 0
#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_SET(r,d) (r).an_lp_adv3[0] = d
#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_GET(r) (r).an_lp_adv3[0]

/*
 * These macros can be used to access individual fields.
 *
 */
#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_GET(r) (((r).an_lp_adv3[0]) & 0xffff)
#define BCMI_QSGMII_SERDES_AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_SET(r,f) (r).an_lp_adv3[0]=(((r).an_lp_adv3[0] & ~((uint32_t)0xffff)) | (((uint32_t)f) & 0xffff))

/*
 * These macros can be used to access AN_LP_ADV3.
 *
 */
#define BCMI_QSGMII_SERDES_READ_AN_LP_ADV3r(_pc,_r) phy_brcm_shadow_read(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV3r,(_r._an_lp_adv3))
#define BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV3r(_pc,_r) phy_brcm_shadow_write(_pc,BCMI_QSGMII_SERDES_AN_LP_ADV3r,(_r._an_lp_adv3))

/*
 * Unless PHY_EXCLUDE_CHIPLESS_TYPES is defined, all of the above types
 * will be redefined without the chip prefix for easier programming.
 * If multiple chips will be programmed in the same source file, then you should
 * define PHY_EXCLUDE_CHIPLESS_TYPES before including all chip header files
 * and refer to the fully qualified versions.
 *
 */
#ifndef PHY_EXCLUDE_CHIPLESS_TYPES

#define AN_LP_ADV3r BCMI_QSGMII_SERDES_AN_LP_ADV3r
#define AN_LP_ADV3r_SIZE BCMI_QSGMII_SERDES_AN_LP_ADV3r_SIZE
typedef BCMI_QSGMII_SERDES_AN_LP_ADV3r_t AN_LP_ADV3r_t;
#define AN_LP_ADV3r_CLR BCMI_QSGMII_SERDES_AN_LP_ADV3r_CLR
#define AN_LP_ADV3r_SET BCMI_QSGMII_SERDES_AN_LP_ADV3r_SET
#define AN_LP_ADV3r_GET BCMI_QSGMII_SERDES_AN_LP_ADV3r_GET
#define AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_GET BCMI_QSGMII_SERDES_AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_GET
#define AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_SET BCMI_QSGMII_SERDES_AN_LP_ADV3r_LP_TECH_ABILITY_26_11f_SET
#define READ_AN_LP_ADV3r BCMI_QSGMII_SERDES_READ_AN_LP_ADV3r
#define WRITE_AN_LP_ADV3r BCMI_QSGMII_SERDES_WRITE_AN_LP_ADV3r

#endif /* PHY_EXCLUDE_CHIPLESS_TYPES */
/*******************************************************************************
 * End of 'BCMI_QSGMII_SERDES_AN_LP_ADV3r'
 ******************************************************************************/




#endif /* __BCMI_QSGMII_SERDES_DEFS_H__ */
