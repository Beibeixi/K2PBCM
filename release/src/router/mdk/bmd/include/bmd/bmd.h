/*
 * $Id: bmd.h,v 1.43 Broadcom SDK $
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * 
 * $Copyright: Copyright 2013 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 */

#ifndef __BMD_H__
#define __BMD_H__

#include <bmd_config.h>
#include <cdk/cdk_types.h>
#include <cdk/cdk_error.h>
#include <bmd/bmd_device.h>
#include <bmdi/bmd_devlist.h>
#include <bmdi/bmd_remap.h>

/* MAC address type. */
typedef struct bmd_mac_addr_s {
    uint8_t b[6]; 
} bmd_mac_addr_t;

/* Attach BMD device to a CDK device. */
extern int bmd_attach(
    int unit);

/* Detaches BMD device from a CDK device. */
extern int bmd_detach(
    int unit);

/* Reset switch chip. */
extern int bmd_reset(
    int unit);

/* Initialize switch chip. */
extern int bmd_init(
    int unit);

/* Port Mode Enumeration. */
typedef enum bmd_port_mode_e {
    bmdPortModeDisabled, 
    bmdPortModeAuto, 
    bmdPortMode10hd, 
    bmdPortMode10fd, 
    bmdPortMode100hd, 
    bmdPortMode100fd, 
    bmdPortMode100FX, 
    bmdPortMode200fd, 
    bmdPortMode1000fd, 
    bmdPortMode1000hd, 
    bmdPortMode1000X, 
    bmdPortMode1000TBI, 
    bmdPortMode2000fd, 
    bmdPortMode2500fd, 
    bmdPortMode10000fd, 
    bmdPortMode10000SFI, 
    bmdPortMode10000XFI, 
    bmdPortMode10000KR, 
    bmdPortMode12000fd, 
    bmdPortMode13000fd, 
    bmdPortMode15000fd, 
    bmdPortMode16000fd, 
    bmdPortMode20000fd, 
    bmdPortMode21000fd, 
    bmdPortMode25000fd, 
    bmdPortMode30000fd, 
    bmdPortMode40000fd, 
    bmdPortMode40000CR, 
    bmdPortMode40000KR, 
    bmdPortMode42000fd, 
    bmdPortMode100000CR, 
    bmdPortMode127000fd, 
    bmdPortModeCount 
} bmd_port_mode_t;

#define BMD_PORT_MODE_STRINGS \
    "Disabled", \
    "Auto", \
    "10hd", \
    "10fd", \
    "100hd", \
    "100fd", \
    "100FX", \
    "200fd", \
    "1000fd", \
    "1000hd", \
    "1000X", \
    "1000TBI", \
    "2000fd", \
    "2500fd", \
    "10000fd", \
    "10000SFI", \
    "10000XFI", \
    "10000KR", \
    "12000fd", \
    "13000fd", \
    "15000fd", \
    "16000fd", \
    "20000fd", \
    "21000fd", \
    "40000fd", \
    "25000fd", \
    "30000fd", \
    "40000fd", \
    "40000CR", \
    "40000KR", \
    "42000fd", \
    "100000CR", \
    "127000fd" 

#define BMD_PORT_MODE_F_MAC_LOOPBACK    0x00000001 
#define BMD_PORT_MODE_F_PHY_LOOPBACK    0x00000002 
#define BMD_PORT_MODE_F_REMOTE_LOOPBACK 0x00000004 
#define BMD_PORT_MODE_F_HIGIG           0x00000008 
#define BMD_PORT_MODE_F_HIGIG2          0x00000010 
#define BMD_PORT_MODE_F_HGLITE          0x00000020 
#define BMD_PORT_MODE_F_SCH             0x00000040 
#define BMD_PORT_MODE_F_ASSP            0x00000080 
#define BMD_PORT_MODE_F_INTERNAL        0x00000100 
#define BMD_PORT_MODE_F_LINK_UP         0x00000200 
#define BMD_PORT_MODE_F_AUTONEG         0x00000400 
#define BMD_PORT_MODE_F_EEE             0x00000800 
#define BMD_PORT_MODE_F_AUTOGREEEN      0x00001000 

/* Set port mode. */
extern int bmd_port_mode_set(
    int unit, 
    int port, 
    bmd_port_mode_t mode, 
    uint32_t flags);

/* Get current port mode. */
extern int bmd_port_mode_get(
    int unit, 
    int port, 
    bmd_port_mode_t *mode, 
    uint32_t *flags);

/* Update port mode based on link status. */
extern int bmd_port_mode_update(
    int unit, 
    int port);

/* Create a VLAN. */
extern int bmd_vlan_create(
    int unit, 
    int vlan);

#define BMD_VLAN_PORT_F_UNTAGGED    0x00000001 

/* Add port to a VLAN. */
extern int bmd_vlan_port_add(
    int unit, 
    int vlan, 
    int port, 
    uint32_t flags);

/* Remove port from a VLAN. */
extern int bmd_vlan_port_remove(
    int unit, 
    int vlan, 
    int port);

/* Get list of ports belonging to VLAN. */
extern int bmd_vlan_port_get(
    int unit, 
    int vlan, 
    int *plist, 
    int *utlist);

/* Destroy VLAN. */
extern int bmd_vlan_destroy(
    int unit, 
    int vlan);

/* Set default VLAN for a port. */
extern int bmd_port_vlan_set(
    int unit, 
    int port, 
    int vlan);

/* Get default VLAN for a port. */
extern int bmd_port_vlan_get(
    int unit, 
    int port, 
    int *vlan);

typedef enum bmd_stp_state_e {
    bmdSpanningTreeDisabled, 
    bmdSpanningTreeBlocking, 
    bmdSpanningTreeListening, 
    bmdSpanningTreeLearning, 
    bmdSpanningTreeForwarding, 
    bmdSpanningTreeCount 
} bmd_stp_state_t;

/* Set spanning tree protocol state. */
extern int bmd_port_stp_set(
    int unit, 
    int port, 
    bmd_stp_state_t state);

/* Get spanning tree protocol state. */
extern int bmd_port_stp_get(
    int unit, 
    int port, 
    bmd_stp_state_t *state);

/* Initialize chip for L2 switching. */
extern int bmd_switching_init(
    int unit);

/* Configure port MAC address. */
extern int bmd_port_mac_addr_add(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* MAC address type. */
typedef struct bmd_arl_entry_s {
    uint8_t b[6];
    uint16_t vlan;
} bmd_arl_entry_t;

extern int bmd_port_mac_addr_get(
    int unit, 
    int port,
    int num_req_entries,
    bmd_arl_entry_t *arl_entry,
    int *num_entries);

typedef enum bmd_arl_entry_type_e {
    bmdArlEntryStatic, 
    bmdArlEntryDynamic,
    bmdArlEntryAll
} bmd_arl_entry_type_t;

extern int bmd_port_mac_addr_clear(
    int unit, 
    int port, 
    bmd_arl_entry_type_t type);

/* Delete port MAC address. */
extern int bmd_port_mac_addr_remove(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Configure CPU MAC address. */
extern int bmd_cpu_mac_addr_add(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Delete CPU MAC address. */
extern int bmd_cpu_mac_addr_remove(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Configure multicast MAC address in multicast ARL table. */
extern int bmd_mcast_mac_addr_set(
    int unit, 
    int entry_id, 
    int vlan, 
    bmd_mac_addr_t *mac_addr, 
    int fwd_portmap, 
    int priority,
    int valid);

/* Get multicast MAC address. */
extern int bmd_mcast_mac_addr_get(
    int unit, 
    int entry_id, 
    int *vlan, 
    bmd_mac_addr_t *mac_addr, 
    int *fwd_portmap, 
    int *priority, 
    int *used_bit, 
    int *valid_bit);

#define BMD_PKT_F_UNTAGGED      0x00000001 
#define BMD_PKT_F_CRC_REGEN     0x00000002 

/* Packet Type Enumeration. */
typedef enum bmd_pkt_type_e {
    bmdPktTypeCtrl, 
    bmdPktTypeUC, 
    bmdPktTypeBCDLF, 
    bmdPktTypeL2MC, 
    bmdPktTypeIPMC, 
    bmdPktTypeCount 
} bmd_pkt_type_t;

typedef struct bmd_pkt_s {
    int port;                   /* Egress/ingress port number. */
    uint8_t *data;              /* Packet data buffer. */
    int size;                   /* Size of packet data. */
    dma_addr_t baddr;           /* Hardware bus address of packet data buffer. */
    uint32_t flags;             /* BMD_PKT_F_xxx flags. */
    void *cookie;               /* Optional application data. */
    bmd_pkt_type_t mh_pkt_type; /* Module header packet type. */
    uint8_t mh_src_mod;         /* Module header source module. */
    uint8_t mh_src_port;        /* Module header source port. */
    uint8_t mh_dst_mod;         /* Module header destination module. */
    uint8_t mh_dst_port;        /* Module header destination port. */
} bmd_pkt_t;

/* Transmit a packet. */
extern int bmd_tx(
    int unit, 
    const bmd_pkt_t *pkt);

/* Submit Rx packet to DMA queue. */
extern int bmd_rx_start(
    int unit, 
    bmd_pkt_t *pkt);

/* Poll for Rx packet complete. */
extern int bmd_rx_poll(
    int unit, 
    bmd_pkt_t **ppkt);

/* Abort Rx DMA. */
extern int bmd_rx_stop(
    int unit);

/* Statistics counter type. */
typedef struct bmd_counter_s {
    uint32_t v[2];  /* v[0] is least significant word. */
} bmd_counter_t;

/* Port statistics types. */
typedef enum bmd_stat_e {
    bmdStatTxPackets, 
    bmdStatTxBytes, 
    bmdStatTxErrors, 
    bmdStatRxPackets, 
    bmdStatRxBytes, 
    bmdStatRxErrors, 
    bmdStatRxDrops, 
    bmdStatCount 
} bmd_stat_t;

/* Get statistics counter. */
extern int bmd_stat_get(
    int unit, 
    int port, 
    bmd_stat_t stat, 
    bmd_counter_t *counter);

/* Clear statistics counter. */
extern int bmd_stat_clear(
    int unit, 
    int port, 
    bmd_stat_t stat);

/* Assert test interrupt. */
extern int bmd_test_interrupt_assert(
    int unit);

/* Clear test interrupt. */
extern int bmd_test_interrupt_clear(
    int unit);

/* Downloadable code types. */
typedef enum bmd_download_e {
    bmdDownloadPortLedController, 
    bmdDownloadSerdesMicroController, 
    bmdDownloadCount 
} bmd_download_t;

/* Download code to subdevice. */
extern int bmd_download(
    int unit, 
    bmd_download_t type, 
    uint8_t *data, 
    int size);

/* Switch global config parameters. */
typedef enum bmd_switch_control_e {
    bmdSwitchTXQPauseControl, 
    bmdSwitchTXQDropControl, 
    bmdSwitchTotalPauseControl, 
    bmdSwitchTotalDropControl, 
    bmdSwitch8021QControl, 
    bmdSwitchTotalDropThreshold, 
    bmdSwitchTotalPauseThreshold, 
    bmdSwitchTotalHysteresisThreshold, 
    bmdSwitchTxQHiDropThreshold, 
    bmdSwitchTxQHiPauseThreshold, 
    bmdSwitchTxQHiHysteresisThreshold, 
    bmdSwitchTxQLowDropThreshold, 
    bmdSwitchCount 
} bmd_switch_control_t;

/* Set a global switch config parameter. */
extern int bmd_switch_control_set(
    int unit, 
    bmd_switch_control_t type, 
    int value);

/* Get a global switch config parameter. */
extern int bmd_switch_control_get(
    int unit, 
    bmd_switch_control_t type, 
    int *value);

/* Set a priority queue config parameter. */
extern int bmd_switch_control_priority_set(
    int unit, 
    int priority, 
    bmd_switch_control_t type, 
    int value);

/* Get a priority queue config parameter. */
extern int bmd_switch_control_priority_get(
    int unit, 
    int priority, 
    bmd_switch_control_t type, 
    int *value);

/* Pause capability parameters. */
typedef enum bmd_pause_e {
    bmdPauseNone, 
    bmdPauseAuto, 
    bmdPauseBoth, 
    bmdPauseTx, 
    bmdPauseRx 
} bmd_pause_t;

/* Set the pause capability of a port */
extern int bmd_port_pause_capability_set(
    int unit, 
    int port, 
    bmd_pause_t value);

/* Get the pause capability of a port */
extern int bmd_port_pause_capability_get(
    int unit, 
    int port, 
    bmd_pause_t *value);

/* Pause capability parameters. */
typedef enum bmd_pkt_type_mask_e {
    bmdPktTypeUnicast = 0x1,
    bmdPktTypeMulticast = 0x2,
    bmdPktTypeBcastTypeLessThan600 = 0x4,
    bmdPktTypeBcastType600OrMore = 0x8,
    bmdPktTypeReservedMulticast = 0x10,
    bmdPktTypeDstLookupFailure = 0x20,
    bmdPktTypeSrcLookupFailure = 0x40 ,
    bmdPktTypeAll = 0x7F
} bmd_pkt_type_mask_t;

/* Set the ingress rate limiting parameters of a port */
extern int bmd_port_rate_ingress_set(
    int unit, 
    int port,
    bmd_pkt_type_mask_t pkt_type,
    uint32_t kbits_sec,
    uint32_t kbits_burst);

/* Get the ingress rate limiting parameters of a port */
extern int bmd_port_rate_ingress_get(
    int unit, 
    int port, 
    bmd_pkt_type_mask_t *pkt_type,
    uint32_t *kbits_sec, 
    uint32_t *kbits_burst);

/* Set the egress rate limiting parameters of a port */
extern int bmd_port_rate_egress_set(
    int unit,
    int port,
    bmd_pkt_type_mask_t pkt_type,
    uint32_t kbits_sec,
    uint32_t kbits_burst);

/* Get the egress rate limiting parameters of a port */
extern int bmd_port_rate_egress_get(
    int unit,
    int port,
    bmd_pkt_type_mask_t *pkt_type,
    uint32_t *kbits_sec,
    uint32_t *kbits_burst);

/* Set the selected field of port egress replacement tag */
extern int bmd_port_replace_egress_tag_set(
    int unit, 
    int port, 
    uint32_t tag);

/* Get the port egress replacement tag */
extern int bmd_port_replace_egress_tag_get(
    int unit, 
    int port, 
    uint32_t *tag);

/* Set the 802.1p value of port default tag */
extern int bmd_port_vlan_priority_set(
    int unit, 
    int port, 
    int priority);

/* Get the 802.1p value of port default tag */
extern int bmd_port_vlan_priority_get(
    int unit, 
    int port, 
    int *priority);

/* VLAN tag fields */
typedef enum bmd_tag_sel_e {
    bmdVlanTpid, 
    bmdVlan8021p, 
    bmdVlanCfi, 
    bmdVlanVid, 
    bmdVlanMatchVid 
} bmd_tag_sel_t;

/* Set the egress tag mangling operations and the match vid */
extern int bmd_port_tag_mangle_set(
    int unit, 
    int port, 
    bmd_tag_sel_t tag_sel, 
    int value);

/* Get the egress tag mangling operations and match vid */
extern int bmd_port_tag_mangle_get(
    int unit, 
    int port, 
    bmd_tag_sel_t tag_sel, 
    int *value);

/* Set the pbvlan map of a port */
extern int bmd_port_pbvlanmap_set(
    int unit, 
    int port, 
    uint32_t portmap);

/* Get the pbvlan map of a port */
extern int bmd_port_pbvlanmap_get(
    int unit, 
    int port, 
    uint32_t *portmap);

/* Port Traffic Control Config. */
typedef enum bmd_traffic_ctrl_e {
    bmdNoRxButTx, 
    bmdNoTxButRx, 
    bmdNoTxAndRx, 
    bmdTxAndRx 
} bmd_traffic_ctrl_t;

/* Set the traffic control status of a port */
extern int bmd_port_traffic_control_set(
    int unit, 
    int port, 
    bmd_traffic_ctrl_t traffic_ctrl);

/* Get the traffic control status of a port */
extern int bmd_port_traffic_control_get(
    int unit, 
    int port, 
    bmd_traffic_ctrl_t *traffic_ctrl);

/* Set the jumbo frame status of a port */
extern int bmd_port_jumbo_control_set(
    int unit, 
    int port, 
    int value);

/* Get the jumbo frame status of a port */
extern int bmd_port_jumbo_control_get(
    int unit, 
    int port, 
    int *value);

/* Set the number of egress queues */
extern int bmd_cosq_config_set(
    int unit, 
    int numq);

/* Get the number of egress queues */
extern int bmd_cosq_config_get(
    int unit, 
    int *numq);

/* QoS type */
typedef enum bmd_cosq_qos_type_e {
    bmdPortQoS, 
    bmdMacQoS, 
    bmdPrio8021PQoS, 
    bmdDiffServQoS, 
    bmdTrafficTypeQoS, 
    bmdComboQoS, 
    bmdComboHighestQoS, 
    bmdNoQoS 
} bmd_cosq_qos_type_t;

/* Set the QoS method */
extern int bmd_cosq_priority_method_set(
    int unit, 
    bmd_cosq_qos_type_t qos_method);

/* Get the QoS method */
extern int bmd_cosq_priority_method_get(
    int unit, 
    bmd_cosq_qos_type_t *qos_method);

/* Egress Queue Scheduling Method */
typedef enum bmd_cosq_sched_e {
    bmdStrictPriority, 
    bmdWeightedRoundRobin, 
    bmdSpWrrCombo, 
    bmdQosNotEnabled 
} bmd_cosq_sched_t;

/* Set the queue scheduling parameters */
extern int bmd_cosq_sched_set(
    int unit, 
    bmd_cosq_sched_t sched_type, 
    int sp_endq);

/* Get the queue scheduling parameters */
extern int bmd_cosq_sched_get(
    int unit, 
    bmd_cosq_sched_t *sched_type, 
    int *sp_endq);

/* Set the WRR weight of a queue */
extern int bmd_cosq_wrr_weight_set(
    int unit, 
    int egressq, 
    int weight);

/* Get the WRR weight of a queue */
extern int bmd_cosq_wrr_weight_get(
    int unit, 
    int egressq, 
    int *weight);

/* Set the internal prioirity to egress queue mapping of a port */
extern int bmd_cosq_port_mapping_set(
    int unit, 
    int port, 
    int priority, 
    int egressq);

/* Get the internal prioirity to egress queue mapping of a port */
extern int bmd_cosq_port_mapping_get(
    int unit, 
    int port, 
    int priority, 
    int *egressq);

/* Set the DSCP to priority mapping */
extern int bmd_cosq_dscp_priority_mapping_set(
    int unit, 
    int dscp, 
    int priority);

/* Get the DSCP to priority mapping */
extern int bmd_cosq_dscp_priority_mapping_get(
    int unit, 
    int dscp, 
    int *priority);

/* Egress Queue selection for MIPS Tx packets */
typedef enum bmd_cosq_txqsel_e {
    bmdUseTxBdPrio, 
    bmdUseTxDmaChannel, 
    bmdUseNone 
} bmd_cosq_txqsel_t;

/* Set the method to specify the egress queue for MIPS Tx packets */
extern int bmd_cosq_txq_selection_set(
    int unit, 
    bmd_cosq_txqsel_t txq_sel_method);

/* Get the method to specify the egress queue for MIPS Tx packets */
extern int bmd_cosq_txq_selection_get(
    int unit, 
    bmd_cosq_txqsel_t *txq_sel_method);

/* Set the egress queue to Rx iuDMA channel (Rx on MIPS) mapping */
extern int bmd_cosq_rxchannel_mapping_set(
    int unit, 
    int egressq, 
    int channel);

/* Get the egress queue to Rx iuDMA channel (Rx on MIPS) mapping */
extern int bmd_cosq_rxchannel_mapping_get(
    int unit, 
    int egressq, 
    int *channel);

/* Set the Tx iuDMA channel (Tx from MIPS) to egress queue mapping */
extern int bmd_cosq_txchannel_mapping_set(
    int unit, 
    int channel, 
    int egressq);

/* Get the Tx iuDMA channel (Tx from MIPS) to egress queue mapping */
extern int bmd_cosq_txchannel_mapping_get(
    int unit, 
    int channel, 
    int *egressq);

/* Configure switch padding */
extern int bmd_packet_padding_set(
    int unit, 
    int pad_ctrl, 
    int length);

/* Get the switch padding parameters */
extern int bmd_packet_padding_get(
    int unit, 
    int *pad_status, 
    int *length);

#endif /* __BMD_H__ */
