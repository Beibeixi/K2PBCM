/*
 * $Id: $
 * 
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 * 
 * $Copyright: Copyright 2010 Broadcom Corporation.
 * This program is the proprietary software of Broadcom Corporation
 * and/or its licensors, and may only be used, duplicated, modified
 * or distributed pursuant to the terms and conditions of a separate,
 * written license agreement executed between you and Broadcom
 * (an "Authorized License").  Except as set forth in an Authorized
 * License, Broadcom grants no license (express or implied), right
 * to use, or waiver of any kind with respect to the Software, and
 * Broadcom expressly reserves all rights in and to the Software
 * and all intellectual property rights therein.  IF YOU HAVE
 * NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS SOFTWARE
 * IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
 * ALL USE OF THE SOFTWARE.  
 *  
 * Except as expressly set forth in the Authorized License,
 *  
 * 1.     This program, including its structure, sequence and organization,
 * constitutes the valuable trade secrets of Broadcom, and you shall use
 * all reasonable efforts to protect the confidentiality thereof,
 * and to use this information only in connection with your use of
 * Broadcom integrated circuit products.
 *  
 * 2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS
 * PROVIDED "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
 * REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
 * OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
 * DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
 * NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
 * ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
 * CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING
 * OUT OF USE OR PERFORMANCE OF THE SOFTWARE.
 * 
 * 3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL
 * BROADCOM OR ITS LICENSORS BE LIABLE FOR (i) CONSEQUENTIAL,
 * INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES WHATSOEVER
 * ARISING OUT OF OR IN ANY WAY RELATING TO YOUR USE OF OR INABILITY
 * TO USE THE SOFTWARE EVEN IF BROADCOM HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES; OR (ii) ANY AMOUNT IN EXCESS OF
 * THE AMOUNT ACTUALLY PAID FOR THE SOFTWARE ITSELF OR USD 1.00,
 * WHICHEVER IS GREATER. THESE LIMITATIONS SHALL APPLY NOTWITHSTANDING
 * ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.$
 */

#ifndef __BCM6300_A0_BMD_H__
#define __BCM6300_A0_BMD_H__

#include <bmd/bmd.h>
#include <bmd_config.h>
#include <cdk/cdk_types.h>
#include <cdk/cdk_error.h>
#include <bmd/bmd_device.h>
#include <bmdi/bmd_devlist.h>
#include <bmdi/bmd_remap.h>

/* Attach BMD device to a CDK device. */
extern int bcm6300_a0_bmd_attach(
    int unit);

/* Detaches BMD device from a CDK device. */
extern int bcm6300_a0_bmd_detach(
    int unit);

/* Reset switch chip. */
extern int bcm6300_a0_bmd_reset(
    int unit);

/* Initialize switch chip. */
extern int bcm6300_a0_bmd_init(
    int unit);

/* Set port mode. */
extern int bcm6300_a0_bmd_port_mode_set(
    int unit, 
    int port, 
    bmd_port_mode_t mode, 
    uint32_t flags);

/* Get current port mode. */
extern int bcm6300_a0_bmd_port_mode_get(
    int unit, 
    int port, 
    bmd_port_mode_t *mode, 
    uint32_t *flags);

/* Update port mode based on link status. */
extern int bcm6300_a0_bmd_port_mode_update(
    int unit, 
    int port);

/* Create a VLAN. */
extern int bcm6300_a0_bmd_vlan_create(
    int unit, 
    int vlan);

/* Add port to a VLAN. */
extern int bcm6300_a0_bmd_vlan_port_add(
    int unit, 
    int vlan, 
    int port, 
    uint32_t flags);

/* Remove port from a VLAN. */
extern int bcm6300_a0_bmd_vlan_port_remove(
    int unit, 
    int vlan, 
    int port);

/* Get list of ports belonging to VLAN. */
extern int bcm6300_a0_bmd_vlan_port_get(
    int unit, 
    int vlan, 
    int *plist, 
    int *utlist);

/* Destroy VLAN. */
extern int bcm6300_a0_bmd_vlan_destroy(
    int unit, 
    int vlan);

/* Set default VLAN for a port. */
extern int bcm6300_a0_bmd_port_vlan_set(
    int unit, 
    int port, 
    int vlan);

/* Get default VLAN for a port. */
extern int bcm6300_a0_bmd_port_vlan_get(
    int unit, 
    int port, 
    int *vlan);

/* Set spanning tree protocol state. */
extern int bcm6300_a0_bmd_port_stp_set(
    int unit, 
    int port, 
    bmd_stp_state_t state);

/* Get spanning tree protocol state. */
extern int bcm6300_a0_bmd_port_stp_get(
    int unit, 
    int port, 
    bmd_stp_state_t *state);

/* Initialize chip for L2 switching. */
extern int bcm6300_a0_bmd_switching_init(
    int unit);

/* Configure port MAC address. */
extern int bcm6300_a0_bmd_port_mac_addr_add(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Delete port MAC address. */
extern int bcm6300_a0_bmd_port_mac_addr_remove(
    int unit, 
    int port, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Get port MAC address. */
extern int bcm6300_a0_bmd_port_mac_addr_get(
    int unit, 
    int port, 
    int num_req_entries,
    bmd_arl_entry_t *arl_entry,
    int *num_entries);

/* Clear port MAC addresses. */
extern int bcm6300_a0_bmd_port_mac_addr_clear(
    int unit, 
    int port, 
    bmd_arl_entry_type_t type);

/* Configure CPU MAC address. */
extern int bcm6300_a0_bmd_cpu_mac_addr_add(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Delete CPU MAC address. */
extern int bcm6300_a0_bmd_cpu_mac_addr_remove(
    int unit, 
    int vlan, 
    const bmd_mac_addr_t *mac_addr);

/* Configure multicast MAC address in multicast ARL table. */
extern int bcm6300_a0_bmd_mcast_mac_addr_set(
    int unit, 
    int entry_id, 
    int vlan, 
    bmd_mac_addr_t *mac_addr, 
    int fwd_portmap, 
    int priority,
    int valid);

/* Get multicast MAC address. */
extern int bcm6300_a0_bmd_mcast_mac_addr_get(
    int unit, 
    int entry_id, 
    int *vlan, 
    bmd_mac_addr_t *mac_addr, 
    int *fwd_portmap, 
    int *priority, 
    int *used_bit, 
    int *valid_bit);

/* Transmit a packet. */
extern int bcm6300_a0_bmd_tx(
    int unit, 
    const bmd_pkt_t *pkt);

/* Submit Rx packet to DMA queue. */
extern int bcm6300_a0_bmd_rx_start(
    int unit, 
    bmd_pkt_t *pkt);

/* Poll for Rx packet complete. */
extern int bcm6300_a0_bmd_rx_poll(
    int unit, 
    bmd_pkt_t **ppkt);

/* Abort Rx DMA. */
extern int bcm6300_a0_bmd_rx_stop(
    int unit);

/* Get statistics counter. */
extern int bcm6300_a0_bmd_stat_get(
    int unit, 
    int port, 
    bmd_stat_t stat, 
    bmd_counter_t *counter);

/* Clear statistics counter. */
extern int bcm6300_a0_bmd_stat_clear(
    int unit, 
    int port, 
    bmd_stat_t stat);

/* Assert test interrupt. */
extern int bcm6300_a0_bmd_test_interrupt_assert(
    int unit);

/* Clear test interrupt. */
extern int bcm6300_a0_bmd_test_interrupt_clear(
    int unit);

/* Download code to subdevice. */
extern int bcm6300_a0_bmd_download(
    int unit, 
    bmd_download_t type, 
    uint8_t *data, 
    int size);

/* Set a global switch config parameter. */
extern int bcm6300_a0_bmd_switch_control_set(
    int unit, 
    bmd_switch_control_t type, 
    int value);

/* Get a global switch config parameter. */
extern int bcm6300_a0_bmd_switch_control_get(
    int unit, 
    bmd_switch_control_t type, 
    int *value);

/* Set a priority queue config parameter. */
extern int bcm6300_a0_bmd_switch_control_priority_set(
    int unit, 
    int priority, 
    bmd_switch_control_t type, 
    int value);

/* Get a priority queue config parameter. */
extern int bcm6300_a0_bmd_switch_control_priority_get(
    int unit, 
    int priority, 
    bmd_switch_control_t type, 
    int *value);

/* Set the pause capability of a port */
extern int bcm6300_a0_bmd_port_pause_capability_set(
    int unit, 
    int port, 
    bmd_pause_t value);

/* Get the pause capability of a port */
extern int bcm6300_a0_bmd_port_pause_capability_get(
    int unit, 
    int port, 
    bmd_pause_t *value);

/* Set the ingress rate limiting parameters of a port */
extern int bcm6300_a0_bmd_port_rate_ingress_set(
    int unit, 
    int port, 
    bmd_pkt_type_mask_t pkt_type,
    uint32_t kbits_sec, 
    uint32_t kbits_burst);

/* Get the ingress rate limiting parameters of a port */
extern int bcm6300_a0_bmd_port_rate_ingress_get(
    int unit, 
    int port, 
    bmd_pkt_type_mask_t *pkt_type,
    uint32_t *kbits_sec, 
    uint32_t *kbits_burst);

/* Set the egress rate limiting parameters of a port */
extern int bcm6300_a0_bmd_port_rate_egress_set(
    int unit, 
    int port, 
    bmd_pkt_type_mask_t pkt_type,
    uint32_t kbits_sec, 
    uint32_t kbits_burst);

/* Get the egress rate limiting parameters of a port */
extern int bcm6300_a0_bmd_port_rate_egress_get(
    int unit, 
    int port, 
    bmd_pkt_type_mask_t *pkt_type,
    uint32_t *kbits_sec, 
    uint32_t *kbits_burst);

/* Set the selected field of port egress replacement tag */
extern int bcm6300_a0_bmd_port_replace_egress_tag_set(
    int unit, 
    int port, 
    uint32_t tag);

/* Get the port egress replacement tag */
extern int bcm6300_a0_bmd_port_replace_egress_tag_get(
    int unit, 
    int port, 
    uint32_t *tag);

/* Set the 802.1p value of port default tag */
extern int bcm6300_a0_bmd_port_vlan_priority_set(
    int unit, 
    int port, 
    int priority);

/* Get the 802.1p value of port default tag */
extern int bcm6300_a0_bmd_port_vlan_priority_get(
    int unit, 
    int port, 
    int *priority);

/* Set the egress tag mangling operations and the match vid */
extern int bcm6300_a0_bmd_port_tag_mangle_set(
    int unit, 
    int port, 
    bmd_tag_sel_t tag_sel, 
    int value);

/* Get the egress tag mangling operations and match vid */
extern int bcm6300_a0_bmd_port_tag_mangle_get(
    int unit, 
    int port, 
    bmd_tag_sel_t tag_sel, 
    int *value);

/* Set the pbvlan map of a port */
extern int bcm6300_a0_bmd_port_pbvlanmap_set(
    int unit, 
    int port, 
    uint32_t portmap);

/* Get the pbvlan map of a port */
extern int bcm6300_a0_bmd_port_pbvlanmap_get(
    int unit, 
    int port, 
    uint32_t *portmap);

/* Set the traffic control status of a port */
extern int bcm6300_a0_bmd_port_traffic_control_set(
    int unit, 
    int port, 
    bmd_traffic_ctrl_t traffic_ctrl);

/* Get the traffic control status of a port */
extern int bcm6300_a0_bmd_port_traffic_control_get(
    int unit, 
    int port, 
    bmd_traffic_ctrl_t *traffic_ctrl);

/* Set the jumbo frame status of a port */
extern int bcm6300_a0_bmd_port_jumbo_control_set(
    int unit, 
    int port, 
    int value);

/* Get the jumbo frame status of a port */
extern int bcm6300_a0_bmd_port_jumbo_control_get(
    int unit, 
    int port, 
    int *value);

/* Set the number of egress queues */
extern int bcm6300_a0_bmd_cosq_config_set(
    int unit, 
    int numq);

/* Get the number of egress queues */
extern int bcm6300_a0_bmd_cosq_config_get(
    int unit, 
    int *numq);

/* Set the QoS method */
extern int bcm6300_a0_bmd_cosq_priority_method_set(
    int unit, 
    bmd_cosq_qos_type_t qos_method);

/* Get the QoS method */
extern int bcm6300_a0_bmd_cosq_priority_method_get(
    int unit, 
    bmd_cosq_qos_type_t *qos_method);

/* Set the queue scheduling parameters */
extern int bcm6300_a0_bmd_cosq_sched_set(
    int unit, 
    bmd_cosq_sched_t sched_type, 
    int sp_endq);

/* Get the queue scheduling parameters */
extern int bcm6300_a0_bmd_cosq_sched_get(
    int unit, 
    bmd_cosq_sched_t *sched_type, 
    int *sp_endq);

/* Set the WRR weight of a queue */
extern int bcm6300_a0_bmd_cosq_wrr_weight_set(
    int unit, 
    int egressq, 
    int weight);

/* Get the WRR weight of a queue */
extern int bcm6300_a0_bmd_cosq_wrr_weight_get(
    int unit, 
    int egressq, 
    int *weight);

/* Set the internal prioirity to egress queue mapping of a port */
extern int bcm6300_a0_bmd_cosq_port_mapping_set(
    int unit, 
    int port, 
    int priority, 
    int egressq);

/* Get the internal prioirity to egress queue mapping of a port */
extern int bcm6300_a0_bmd_cosq_port_mapping_get(
    int unit, 
    int port, 
    int priority, 
    int *egressq);

/* Set the DSCP to priority mapping */
extern int bcm6300_a0_bmd_cosq_dscp_priority_mapping_set(
    int unit, 
    int dscp, 
    int priority);

/* Get the DSCP to priority mapping */
extern int bcm6300_a0_bmd_cosq_dscp_priority_mapping_get(
    int unit, 
    int dscp, 
    int *priority);

/* Set the method to specify the egress queue for MIPS Tx packets */
extern int bcm6300_a0_bmd_cosq_txq_selection_set(
    int unit, 
    bmd_cosq_txqsel_t txq_sel_method);

/* Get the method to specify the egress queue for MIPS Tx packets */
extern int bcm6300_a0_bmd_cosq_txq_selection_get(
    int unit, 
    bmd_cosq_txqsel_t *txq_sel_method);

/* Set the egress queue to Rx iuDMA channel (Rx on MIPS) mapping */
extern int bcm6300_a0_bmd_cosq_rxchannel_mapping_set(
    int unit, 
    int egressq, 
    int channel);

/* Get the egress queue to Rx iuDMA channel (Rx on MIPS) mapping */
extern int bcm6300_a0_bmd_cosq_rxchannel_mapping_get(
    int unit, 
    int egressq, 
    int *channel);

/* Set the Tx iuDMA channel (Tx from MIPS) to egress queue mapping */
extern int bcm6300_a0_bmd_cosq_txchannel_mapping_set(
    int unit, 
    int channel, 
    int egressq);

/* Get the Tx iuDMA channel (Tx from MIPS) to egress queue mapping */
extern int bcm6300_a0_bmd_cosq_txchannel_mapping_get(
    int unit, 
    int channel, 
    int *egressq);

/* Configure switch padding */
extern int bcm6300_a0_bmd_packet_padding_set(
    int unit, 
    int pad_ctrl, 
    int length);

/* Get the switch padding parameters */
extern int bcm6300_a0_bmd_packet_padding_get(
    int unit, 
    int *pad_status, 
    int *length);

#endif /* __BCM6300_A0_BMD_H__ */
