################################################################################
#
#
#
package CdkInstaller;

use strict; 

sub new 
{    
    my ($class) = @_;
    my $self = {};
    bless($self, $class);
    $self;
}

sub begin_cdk_config_chips
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

/*
 * Chip inclusion and exclusion support within the CDK can be
 * specified as a combination of the following defines:
 * 
 *     (1) #define CDK_CONFIG_INCLUDE_<CHIPNAME> [1|0]
 *             -- Include or exclude all revisions of the given device
 *             Example: #define CDK_CONFIG_INCLUDE_BCM5690   1
 * 
 *     (2) #define CDK_CONFIG_INCLUDE_<CHIPNAME>_<REV>X [1|0]
 *             -- Include or exclude all versions of the given revision
 *             Example: #define CDK_CONFIG_INCLUDE_BCM5690_Ax 0
 *                      #define CDK_CONFIG_INCLUde_BCM5690_Bx 1
 * 
 *     (3) #define CDK_CONFIG_INCLUDE_<EXACT_CHIP> [1|0]
 *             -- Include or exclude an exact device
 *             Example: #define CDK_CONFIG_INCLUDE_BCM5690_A0 1
 *                      #define CDK_CONFIG_INCLUDE_BCM5690_A1 0
 * 
 * 
 * The value of CDK_CONFIG_INCLUDE_CHIP_DEFAULT is used for any chips which
 * are left unspecified. Set this value to 1 or 0 to include or exclude all
 * chips by default.
 */
#ifndef __CDK_CONFIG_CHIPS_H__
#define __CDK_CONFIG_CHIPS_H__

#include "cdk_config_archs.h"

/* This determines whether a chip is included or excluded by default */
#ifndef CDK_CONFIG_INCLUDE_CHIP_DEFAULT
#define CDK_CONFIG_INCLUDE_CHIP_DEFAULT 1
#endif

/*
 * Default configuration and dependencies for all chips
 */

EOT
}

sub end_cdk_config_chips
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
#endif /* __CDK_CONFIG_CHIPS_H__ */

EOT
}

sub begin_cdk_config_chips_opt
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * CONFIG_OPTION Macros. Can be used to determine the build configuration.
 */
 
#ifdef CONFIG_OPTION
EOT
}

sub end_cdk_config_chips_opt
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
#undef CONFIG_OPTION
#endif /* #ifdef CONFIG_OPTION */

EOT
}

sub begin_cdk_config_phys
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

/*
 * This file contains the necessary definitions for inclusion of
 * all internal PHY drivers for a specified set of switch chips.
 *
 * This file can be used to simplify the task of minimizing the
 * driver foot print. Note that the list of externel PHY drivers
 * to include depends on the hardware design and must be done 
 * manually.
 */
#ifndef __CDK_CONFIG_PHYS_H__
#define __CDK_CONFIG_PHYS_H__

#include "cdk_config.h"

EOT
}

sub end_cdk_config_phys
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
#endif /* __CDK_CONFIG_PHYS_H__ */

EOT
}

sub begin_cdk_config_archs
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */
#ifndef __CDK_CONFIG_ARCHS_H__
#define __CDK_CONFIG_ARCHS_H__

/*
 * This file defines the chip architectures currently installed.
 */

EOT
}

sub end_cdk_config_archs
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
#endif /* __CDK_CONFIG_ARCHS_H__ */

EOT
}

sub begin_cdk_devids
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#ifndef __CDK_DEVIDS_H__
#define __CDK_DEVIDS_H__

#include <cdk_config.h>

/*
 * Device Architecture Definitions
 */

#define CDK_DEV_ARCH_ROBO                    0x1
#define CDK_DEV_ARCH_XGS                     0x2
#define CDK_DEV_ARCH_SBX                     0x4
#define CDK_DEV_ARCH_XGSM                    0x8
#define CDK_DEV_ARCH_MASK                    0xf

/*
 * All Supported Devices and Revisions
 */

#define BROADCOM_VENDOR_ID                0x14e4
#define BROADCOM_PHYID_MSB                0x0143

EOT
}

sub end_cdk_devids
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * End of Supported Devices and Revisions
 */

#endif /* __CDK_DEVIDS_H__ */

EOT
}

sub begin_cdk_devlist
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
#ifdef CDK_DEVLIST_ENTRY
/*
 * CDK_DEVLIST_ENTRY MACROS
 * 
 * Before including this file, define CDK_DEVLIST_ENTRY
 * as a macro to operate on the following parameters:
 *     #define CDK_DEVLIST_ENTRY(_nm,_vn,_dv,_rv,_md,_pi,_bd,_bc,_fn,_fl,_cn,_pf,_pd,_r0,_r1)
 * 
 *     _nm: Chip Name
 *     _vn: Chip Vendor ID
 *     _dv: Chip Device ID
 *     _rv: Chip Revision
 *     _md: Chip Model
 *     _pi: Probe Information
 *     _bd: SW Base Driver
 *     _bc: SW Base Configuration
 *     _fn: SW Full Name
 *     _fl: Flags
 *     _cn: Code Name
 *     _pf: Product Full Name
 *     _pd: Product Description
 *     _r0: Reserved
 *     _r1: Reserved
 * 
 * Note that this macro will be undefined at the end of this file.
 */

EOT
}

sub end_cdk_devlist
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/* End CDK_DEVLIST_ENTRY Macros */

#ifdef CDK_DEVLIST_INCLUDE_ALL
#undef CDK_DEVLIST_INCLUDE_ALL
#endif
#undef CDK_DEVLIST_ENTRY
#endif /* CDK_DEVLIST_ENTRY */

EOT
}

sub begin_cdk_allsyms
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
/*
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 */

#include <cdk_config.h>

/* ISO C forbids empty source files */
int cdk_allsyms_not_empty;

#define CDK_EXCLUDE_CHIPLESS_TYPES

EOT
}

sub end_cdk_allsyms
{
    my ($self, $fh) = @_;

    print $fh <<EOT; 
EOT
}

1;
